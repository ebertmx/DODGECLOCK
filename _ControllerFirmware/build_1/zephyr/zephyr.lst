
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	c0 96 00 20 79 76 01 00 1b c1 02 00 4d 76 01 00     ... yv......Mv..
    1010:	4d 76 01 00 4d 76 01 00 4d 76 01 00 00 00 00 00     Mv..Mv..Mv......
	...
    102c:	49 6f 01 00 4d 76 01 00 00 00 00 00 f5 6e 01 00     Io..Mv.......n..
    103c:	4d 76 01 00                                         Mv..

00001040 <_irq_vector_table>:
    1040:	f9 6f 01 00 47 f0 02 00 f9 6f 01 00 f9 6f 01 00     .o..G....o...o..
    1050:	f9 6f 01 00 f9 6f 01 00 f9 6f 01 00 f9 6f 01 00     .o...o...o...o..
    1060:	f5 ef 02 00 f9 6f 01 00 f9 6f 01 00 2d f0 02 00     .....o...o..-...
    1070:	f9 6f 01 00 f9 6f 01 00 f9 6f 01 00 f9 6f 01 00     .o...o...o...o..
    1080:	f9 6f 01 00 f9 6f 01 00 f9 6f 01 00 f9 6f 01 00     .o...o...o...o..
    1090:	f9 6f 01 00 f9 6f 01 00 f9 6f 01 00 f9 6f 01 00     .o...o...o...o..
    10a0:	f9 6f 01 00 f9 6f 01 00 f9 6f 01 00 f9 6f 01 00     .o...o...o...o..
    10b0:	f9 6f 01 00 f9 6f 01 00 f9 6f 01 00 f9 6f 01 00     .o...o...o...o..
    10c0:	f9 6f 01 00 f9 6f 01 00 f9 6f 01 00 f9 6f 01 00     .o...o...o...o..
    10d0:	f9 6f 01 00 f9 6f 01 00 f9 6f 01 00 f9 6f 01 00     .o...o...o...o..
    10e0:	f9 6f 01 00 f9 6f 01 00 f9 6f 01 00 f9 6f 01 00     .o...o...o...o..
    10f0:	f9 6f 01 00 f9 6f 01 00 f9 6f 01 00 f9 6f 01 00     .o...o...o...o..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295
    1110:	f04f 30ff 	movne.w	r0, #4294967295
    1114:	f000 b80c 	b.w	1130 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f00c fb78 	bl	d814 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__aeabi_idiv0>:
    1130:	4770      	bx	lr
    1132:	bf00      	nop

00001134 <ocrypto_bigint_add256>:
    1134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    113c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1140:	185b      	adds	r3, r3, r1
    1142:	eb54 040c 	adcs.w	r4, r4, ip
    1146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    114a:	414d      	adcs	r5, r1
    114c:	eb56 060c 	adcs.w	r6, r6, ip
    1150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1154:	414f      	adcs	r7, r1
    1156:	eb58 080c 	adcs.w	r8, r8, ip
    115a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    115e:	eb59 0901 	adcs.w	r9, r9, r1
    1162:	eb5a 0a0c 	adcs.w	sl, sl, ip
    1166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    116a:	4180      	sbcs	r0, r0
    116c:	3001      	adds	r0, #1
    116e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1172:	4770      	bx	lr

00001174 <ocrypto_bigint_sub256>:
    1174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    117c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1180:	1a5b      	subs	r3, r3, r1
    1182:	eb74 040c 	sbcs.w	r4, r4, ip
    1186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    118a:	418d      	sbcs	r5, r1
    118c:	eb76 060c 	sbcs.w	r6, r6, ip
    1190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1194:	418f      	sbcs	r7, r1
    1196:	eb78 080c 	sbcs.w	r8, r8, ip
    119a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    119e:	eb79 0901 	sbcs.w	r9, r9, r1
    11a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    11a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    11aa:	4180      	sbcs	r0, r0
    11ac:	4240      	negs	r0, r0
    11ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    11b2:	4770      	bx	lr

000011b4 <ocrypto_bigint_cadd256>:
    11b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    11b8:	4252      	negs	r2, r2
    11ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    11be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    11c2:	4017      	ands	r7, r2
    11c4:	19db      	adds	r3, r3, r7
    11c6:	ea18 0802 	ands.w	r8, r8, r2
    11ca:	eb54 0408 	adcs.w	r4, r4, r8
    11ce:	ea19 0902 	ands.w	r9, r9, r2
    11d2:	eb55 0509 	adcs.w	r5, r5, r9
    11d6:	ea1a 0a02 	ands.w	sl, sl, r2
    11da:	eb56 060a 	adcs.w	r6, r6, sl
    11de:	c078      	stmia	r0!, {r3, r4, r5, r6}
    11e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    11e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    11e8:	4017      	ands	r7, r2
    11ea:	417b      	adcs	r3, r7
    11ec:	ea18 0802 	ands.w	r8, r8, r2
    11f0:	eb54 0408 	adcs.w	r4, r4, r8
    11f4:	ea19 0902 	ands.w	r9, r9, r2
    11f8:	eb55 0509 	adcs.w	r5, r5, r9
    11fc:	ea1a 0a02 	ands.w	sl, sl, r2
    1200:	eb56 060a 	adcs.w	r6, r6, sl
    1204:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1206:	4180      	sbcs	r0, r0
    1208:	3001      	adds	r0, #1
    120a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    120e:	4770      	bx	lr

00001210 <ocrypto_bigint_csub256>:
    1210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1214:	4252      	negs	r2, r2
    1216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    121a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    121e:	4017      	ands	r7, r2
    1220:	1bdb      	subs	r3, r3, r7
    1222:	ea18 0802 	ands.w	r8, r8, r2
    1226:	eb74 0408 	sbcs.w	r4, r4, r8
    122a:	ea19 0902 	ands.w	r9, r9, r2
    122e:	eb75 0509 	sbcs.w	r5, r5, r9
    1232:	ea1a 0a02 	ands.w	sl, sl, r2
    1236:	eb76 060a 	sbcs.w	r6, r6, sl
    123a:	c078      	stmia	r0!, {r3, r4, r5, r6}
    123c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    1240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    1244:	4017      	ands	r7, r2
    1246:	41bb      	sbcs	r3, r7
    1248:	ea18 0802 	ands.w	r8, r8, r2
    124c:	eb74 0408 	sbcs.w	r4, r4, r8
    1250:	ea19 0902 	ands.w	r9, r9, r2
    1254:	eb75 0509 	sbcs.w	r5, r5, r9
    1258:	ea1a 0a02 	ands.w	sl, sl, r2
    125c:	eb76 060a 	sbcs.w	r6, r6, sl
    1260:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1262:	4180      	sbcs	r0, r0
    1264:	4240      	negs	r0, r0
    1266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    126a:	4770      	bx	lr

0000126c <ocrypto_bigint_cswap256>:
    126c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    1270:	4252      	negs	r2, r2
    1272:	f04f 0804 	mov.w	r8, #4

00001276 <cswap256_loop>:
    1276:	e890 0030 	ldmia.w	r0, {r4, r5}
    127a:	e891 00c0 	ldmia.w	r1, {r6, r7}
    127e:	1ba3      	subs	r3, r4, r6
    1280:	4013      	ands	r3, r2
    1282:	1ae4      	subs	r4, r4, r3
    1284:	18f6      	adds	r6, r6, r3
    1286:	1beb      	subs	r3, r5, r7
    1288:	4013      	ands	r3, r2
    128a:	1aed      	subs	r5, r5, r3
    128c:	18ff      	adds	r7, r7, r3
    128e:	c030      	stmia	r0!, {r4, r5}
    1290:	c1c0      	stmia	r1!, {r6, r7}
    1292:	f1b8 0801 	subs.w	r8, r8, #1
    1296:	d1ee      	bne.n	1276 <cswap256_loop>
    1298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    129c:	4770      	bx	lr
    129e:	bf00      	nop

000012a0 <ocrypto_mul256_noframe>:
    12a0:	b500      	push	{lr}
    12a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
    12a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
    12aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
    12ae:	b402      	push	{r1}
    12b0:	fba7 5102 	umull	r5, r1, r7, r2
    12b4:	950a      	str	r5, [sp, #40]	; 0x28
    12b6:	fba8 0b02 	umull	r0, fp, r8, r2
    12ba:	fbe7 1063 	umaal	r1, r0, r7, r3
    12be:	fbe9 b062 	umaal	fp, r0, r9, r2
    12c2:	910b      	str	r1, [sp, #44]	; 0x2c
    12c4:	fba8 5103 	umull	r5, r1, r8, r3
    12c8:	fbea 0162 	umaal	r0, r1, sl, r2
    12cc:	fbe7 b564 	umaal	fp, r5, r7, r4
    12d0:	fbe7 0566 	umaal	r0, r5, r7, r6
    12d4:	fbe8 1566 	umaal	r1, r5, r8, r6
    12d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    12dc:	fba9 b603 	umull	fp, r6, r9, r3
    12e0:	fbea 1663 	umaal	r1, r6, sl, r3
    12e4:	fbec 5663 	umaal	r5, r6, ip, r3
    12e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
    12ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
    12f0:	fbea 5b64 	umaal	r5, fp, sl, r4
    12f4:	fbec 6b64 	umaal	r6, fp, ip, r4
    12f8:	900d      	str	r0, [sp, #52]	; 0x34
    12fa:	fbac 3002 	umull	r3, r0, ip, r2
    12fe:	9c05      	ldr	r4, [sp, #20]
    1300:	fbee 5062 	umaal	r5, r0, lr, r2
    1304:	fbe9 6064 	umaal	r6, r0, r9, r4
    1308:	fbea b064 	umaal	fp, r0, sl, r4
    130c:	fbe7 3164 	umaal	r3, r1, r7, r4
    1310:	fbe8 5164 	umaal	r5, r1, r8, r4
    1314:	9c06      	ldr	r4, [sp, #24]
    1316:	fbe8 6164 	umaal	r6, r1, r8, r4
    131a:	fbe9 b164 	umaal	fp, r1, r9, r4
    131e:	fbea 0164 	umaal	r0, r1, sl, r4
    1322:	930e      	str	r3, [sp, #56]	; 0x38
    1324:	fba7 3204 	umull	r3, r2, r7, r4
    1328:	9c07      	ldr	r4, [sp, #28]
    132a:	fbe7 6264 	umaal	r6, r2, r7, r4
    132e:	fbe8 b264 	umaal	fp, r2, r8, r4
    1332:	fbe9 0264 	umaal	r0, r2, r9, r4
    1336:	fbea 1264 	umaal	r1, r2, sl, r4
    133a:	9c04      	ldr	r4, [sp, #16]
    133c:	fbe9 5364 	umaal	r5, r3, r9, r4
    1340:	fbea 6364 	umaal	r6, r3, sl, r4
    1344:	9c08      	ldr	r4, [sp, #32]
    1346:	fbe7 b364 	umaal	fp, r3, r7, r4
    134a:	fbe8 0364 	umaal	r0, r3, r8, r4
    134e:	fbe9 1364 	umaal	r1, r3, r9, r4
    1352:	fbea 2364 	umaal	r2, r3, sl, r4
    1356:	950f      	str	r5, [sp, #60]	; 0x3c
    1358:	f85d 9b04 	ldr.w	r9, [sp], #4
    135c:	e899 0600 	ldmia.w	r9, {r9, sl}
    1360:	f8dd 8000 	ldr.w	r8, [sp]
    1364:	fba9 5408 	umull	r5, r4, r9, r8
    1368:	fbea b468 	umaal	fp, r4, sl, r8
    136c:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1370:	fbec 0468 	umaal	r0, r4, ip, r8
    1374:	fbee 1468 	umaal	r1, r4, lr, r8
    1378:	fbe9 2468 	umaal	r2, r4, r9, r8
    137c:	fbea 3468 	umaal	r3, r4, sl, r8
    1380:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1384:	fbee 6568 	umaal	r6, r5, lr, r8
    1388:	fbe9 b568 	umaal	fp, r5, r9, r8
    138c:	fbea 0568 	umaal	r0, r5, sl, r8
    1390:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1394:	fbec 1568 	umaal	r1, r5, ip, r8
    1398:	fbee 2568 	umaal	r2, r5, lr, r8
    139c:	fbe9 3568 	umaal	r3, r5, r9, r8
    13a0:	fbea 4568 	umaal	r4, r5, sl, r8
    13a4:	960f      	str	r6, [sp, #60]	; 0x3c
    13a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
    13aa:	fbae 7608 	umull	r7, r6, lr, r8
    13ae:	fbe9 0668 	umaal	r0, r6, r9, r8
    13b2:	fbea 1668 	umaal	r1, r6, sl, r8
    13b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
    13ba:	fbec 2668 	umaal	r2, r6, ip, r8
    13be:	fbee 3668 	umaal	r3, r6, lr, r8
    13c2:	fbe9 4668 	umaal	r4, r6, r9, r8
    13c6:	fbea 5668 	umaal	r5, r6, sl, r8
    13ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
    13ce:	fbec b768 	umaal	fp, r7, ip, r8
    13d2:	fbee 0768 	umaal	r0, r7, lr, r8
    13d6:	fbe9 1768 	umaal	r1, r7, r9, r8
    13da:	fbea 2768 	umaal	r2, r7, sl, r8
    13de:	f8dd 801c 	ldr.w	r8, [sp, #28]
    13e2:	fbec 3768 	umaal	r3, r7, ip, r8
    13e6:	fbee 4768 	umaal	r4, r7, lr, r8
    13ea:	fbe9 5768 	umaal	r5, r7, r9, r8
    13ee:	fbea 6768 	umaal	r6, r7, sl, r8
    13f2:	b008      	add	sp, #32
    13f4:	bd00      	pop	{pc}
    13f6:	bf00      	nop

000013f8 <ocrypto_bigint_mul256>:
    13f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13fc:	b087      	sub	sp, #28
    13fe:	f7ff ff4f 	bl	12a0 <ocrypto_mul256_noframe>
    1402:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1406:	f108 0820 	add.w	r8, r8, #32
    140a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    140e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    1410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    1414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001418 <ocrypto_sqr256_noframe>:
    1418:	b500      	push	{lr}
    141a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
    141e:	fba3 5203 	umull	r5, r2, r3, r3
    1422:	9501      	str	r5, [sp, #4]
    1424:	fba3 0104 	umull	r0, r1, r3, r4
    1428:	fbe3 2064 	umaal	r2, r0, r3, r4
    142c:	fbe3 1067 	umaal	r1, r0, r3, r7
    1430:	9202      	str	r2, [sp, #8]
    1432:	fba3 5207 	umull	r5, r2, r3, r7
    1436:	fbe3 0268 	umaal	r0, r2, r3, r8
    143a:	fbe4 1564 	umaal	r1, r5, r4, r4
    143e:	fbe3 0568 	umaal	r0, r5, r3, r8
    1442:	fbe3 2569 	umaal	r2, r5, r3, r9
    1446:	9103      	str	r1, [sp, #12]
    1448:	fba4 b607 	umull	fp, r6, r4, r7
    144c:	fbe3 2669 	umaal	r2, r6, r3, r9
    1450:	fbe3 566a 	umaal	r5, r6, r3, sl
    1454:	fbe4 0b67 	umaal	r0, fp, r4, r7
    1458:	fbe4 2b68 	umaal	r2, fp, r4, r8
    145c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
    1460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
    1464:	9004      	str	r0, [sp, #16]
    1466:	fba4 1008 	umull	r1, r0, r4, r8
    146a:	fbe4 5069 	umaal	r5, r0, r4, r9
    146e:	fbe3 606c 	umaal	r6, r0, r3, ip
    1472:	fbe3 b06e 	umaal	fp, r0, r3, lr
    1476:	fbe7 2167 	umaal	r2, r1, r7, r7
    147a:	fbe4 5169 	umaal	r5, r1, r4, r9
    147e:	fbe4 616a 	umaal	r6, r1, r4, sl
    1482:	fbe3 b16e 	umaal	fp, r1, r3, lr
    1486:	fbe4 016e 	umaal	r0, r1, r4, lr
    148a:	9205      	str	r2, [sp, #20]
    148c:	fba7 3208 	umull	r3, r2, r7, r8
    1490:	fbe4 626a 	umaal	r6, r2, r4, sl
    1494:	fbe4 b26c 	umaal	fp, r2, r4, ip
    1498:	fbe4 026e 	umaal	r0, r2, r4, lr
    149c:	fbe7 126e 	umaal	r1, r2, r7, lr
    14a0:	fbe7 5368 	umaal	r5, r3, r7, r8
    14a4:	fbe7 6369 	umaal	r6, r3, r7, r9
    14a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
    14ac:	fbe7 036c 	umaal	r0, r3, r7, ip
    14b0:	fbe7 136e 	umaal	r1, r3, r7, lr
    14b4:	fbe8 236e 	umaal	r2, r3, r8, lr
    14b8:	9506      	str	r5, [sp, #24]
    14ba:	fba7 5409 	umull	r5, r4, r7, r9
    14be:	fbe7 b46a 	umaal	fp, r4, r7, sl
    14c2:	fbe7 046c 	umaal	r0, r4, r7, ip
    14c6:	fbe8 146c 	umaal	r1, r4, r8, ip
    14ca:	fbe8 246e 	umaal	r2, r4, r8, lr
    14ce:	fbe9 346e 	umaal	r3, r4, r9, lr
    14d2:	fbe8 6568 	umaal	r6, r5, r8, r8
    14d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
    14da:	fbe8 056a 	umaal	r0, r5, r8, sl
    14de:	fbe8 156c 	umaal	r1, r5, r8, ip
    14e2:	fbe9 256c 	umaal	r2, r5, r9, ip
    14e6:	fbe9 356e 	umaal	r3, r5, r9, lr
    14ea:	fbea 456e 	umaal	r4, r5, sl, lr
    14ee:	9607      	str	r6, [sp, #28]
    14f0:	fba8 7609 	umull	r7, r6, r8, r9
    14f4:	fbe8 066a 	umaal	r0, r6, r8, sl
    14f8:	fbe9 166a 	umaal	r1, r6, r9, sl
    14fc:	fbe9 266c 	umaal	r2, r6, r9, ip
    1500:	fbea 366c 	umaal	r3, r6, sl, ip
    1504:	fbea 466e 	umaal	r4, r6, sl, lr
    1508:	fbec 566e 	umaal	r5, r6, ip, lr
    150c:	fbe8 b769 	umaal	fp, r7, r8, r9
    1510:	fbe9 0769 	umaal	r0, r7, r9, r9
    1514:	fbe9 176a 	umaal	r1, r7, r9, sl
    1518:	fbea 276a 	umaal	r2, r7, sl, sl
    151c:	fbea 376c 	umaal	r3, r7, sl, ip
    1520:	fbec 476c 	umaal	r4, r7, ip, ip
    1524:	fbec 576e 	umaal	r5, r7, ip, lr
    1528:	fbee 676e 	umaal	r6, r7, lr, lr
    152c:	bd00      	pop	{pc}
    152e:	bf00      	nop

00001530 <ocrypto_bigint_sqr256>:
    1530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1534:	b087      	sub	sp, #28
    1536:	f7ff ff6f 	bl	1418 <ocrypto_sqr256_noframe>
    153a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    153e:	f108 0820 	add.w	r8, r8, #32
    1542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    1548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    154c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001550 <ocrypto_constant_time_equal>:
    1550:	b430      	push	{r4, r5}
    1552:	f04f 0300 	mov.w	r3, #0

00001556 <constant_time_equal_loop>:
    1556:	f810 4b01 	ldrb.w	r4, [r0], #1
    155a:	f811 5b01 	ldrb.w	r5, [r1], #1
    155e:	3a01      	subs	r2, #1
    1560:	ea84 0405 	eor.w	r4, r4, r5
    1564:	ea43 0304 	orr.w	r3, r3, r4
    1568:	d1f5      	bne.n	1556 <constant_time_equal_loop>
    156a:	f1a3 0301 	sub.w	r3, r3, #1
    156e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    1572:	bc30      	pop	{r4, r5}
    1574:	4770      	bx	lr
    1576:	bf00      	nop

00001578 <ocrypto_constant_time_is_zero>:
    1578:	f04f 0300 	mov.w	r3, #0

0000157c <constant_time_is_zero_loop>:
    157c:	f810 2b01 	ldrb.w	r2, [r0], #1
    1580:	3901      	subs	r1, #1
    1582:	ea43 0302 	orr.w	r3, r3, r2
    1586:	d1f9      	bne.n	157c <constant_time_is_zero_loop>
    1588:	f1a3 0301 	sub.w	r3, r3, #1
    158c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    1590:	4770      	bx	lr
    1592:	bf00      	nop

00001594 <ocrypto_constant_time_xor>:
    1594:	b430      	push	{r4, r5}

00001596 <constant_time_xor_loop>:
    1596:	f811 4b01 	ldrb.w	r4, [r1], #1
    159a:	f812 5b01 	ldrb.w	r5, [r2], #1
    159e:	406c      	eors	r4, r5
    15a0:	f800 4b01 	strb.w	r4, [r0], #1
    15a4:	3b01      	subs	r3, #1
    15a6:	d1f6      	bne.n	1596 <constant_time_xor_loop>
    15a8:	bc30      	pop	{r4, r5}
    15aa:	4770      	bx	lr

000015ac <ocrypto_mod_p256_add>:
    15ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    15b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    15b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15b8:	185b      	adds	r3, r3, r1
    15ba:	eb54 040c 	adcs.w	r4, r4, ip
    15be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15c2:	414d      	adcs	r5, r1
    15c4:	eb56 060c 	adcs.w	r6, r6, ip
    15c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15cc:	414f      	adcs	r7, r1
    15ce:	eb58 080c 	adcs.w	r8, r8, ip
    15d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15d6:	eb59 0901 	adcs.w	r9, r9, r1
    15da:	eb5a 0a0c 	adcs.w	sl, sl, ip
    15de:	4189      	sbcs	r1, r1
    15e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
    15e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
    15e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
    15ec:	f176 0600 	sbcs.w	r6, r6, #0
    15f0:	f177 0700 	sbcs.w	r7, r7, #0
    15f4:	f178 0800 	sbcs.w	r8, r8, #0
    15f8:	f179 0901 	sbcs.w	r9, r9, #1
    15fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
    1600:	f151 0100 	adcs.w	r1, r1, #0
    1604:	185b      	adds	r3, r3, r1
    1606:	414c      	adcs	r4, r1
    1608:	414d      	adcs	r5, r1
    160a:	f156 0600 	adcs.w	r6, r6, #0
    160e:	f157 0700 	adcs.w	r7, r7, #0
    1612:	f158 0800 	adcs.w	r8, r8, #0
    1616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    161a:	eb5a 0a01 	adcs.w	sl, sl, r1
    161e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    1622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1626:	4770      	bx	lr

00001628 <ocrypto_mod_p256_sub>:
    1628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    162c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    1630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1634:	1a5b      	subs	r3, r3, r1
    1636:	eb74 040c 	sbcs.w	r4, r4, ip
    163a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    163e:	418d      	sbcs	r5, r1
    1640:	eb76 060c 	sbcs.w	r6, r6, ip
    1644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1648:	418f      	sbcs	r7, r1
    164a:	eb78 080c 	sbcs.w	r8, r8, ip
    164e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1652:	eb79 0901 	sbcs.w	r9, r9, r1
    1656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    165a:	4189      	sbcs	r1, r1
    165c:	185b      	adds	r3, r3, r1
    165e:	414c      	adcs	r4, r1
    1660:	414d      	adcs	r5, r1
    1662:	f156 0600 	adcs.w	r6, r6, #0
    1666:	f157 0700 	adcs.w	r7, r7, #0
    166a:	f158 0800 	adcs.w	r8, r8, #0
    166e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    1672:	eb5a 0a01 	adcs.w	sl, sl, r1
    1676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    167a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    167e:	4770      	bx	lr

00001680 <mul_reduce>:
    1680:	eb18 0804 	adds.w	r8, r8, r4
    1684:	eb59 0905 	adcs.w	r9, r9, r5
    1688:	eb5a 0a06 	adcs.w	sl, sl, r6
    168c:	eb5b 0b07 	adcs.w	fp, fp, r7
    1690:	f05f 0c00 	movs.w	ip, #0
    1694:	f14c 0c00 	adc.w	ip, ip, #0
    1698:	eb18 0805 	adds.w	r8, r8, r5
    169c:	eb59 0906 	adcs.w	r9, r9, r6
    16a0:	eb5a 0a07 	adcs.w	sl, sl, r7
    16a4:	eb5b 0b07 	adcs.w	fp, fp, r7
    16a8:	eb50 000c 	adcs.w	r0, r0, ip
    16ac:	f05f 0c00 	movs.w	ip, #0
    16b0:	eb51 010c 	adcs.w	r1, r1, ip
    16b4:	eb52 020c 	adcs.w	r2, r2, ip
    16b8:	4163      	adcs	r3, r4
    16ba:	f14c 0c00 	adc.w	ip, ip, #0
    16be:	ebb8 0807 	subs.w	r8, r8, r7
    16c2:	f179 0900 	sbcs.w	r9, r9, #0
    16c6:	f17a 0a00 	sbcs.w	sl, sl, #0
    16ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
    16ce:	41a8      	sbcs	r0, r5
    16d0:	41b1      	sbcs	r1, r6
    16d2:	41a2      	sbcs	r2, r4
    16d4:	41b3      	sbcs	r3, r6
    16d6:	f16c 0c00 	sbc.w	ip, ip, #0
    16da:	ebbb 0b05 	subs.w	fp, fp, r5
    16de:	41b0      	sbcs	r0, r6
    16e0:	41b9      	sbcs	r1, r7
    16e2:	41aa      	sbcs	r2, r5
    16e4:	41bb      	sbcs	r3, r7
    16e6:	f16c 0c00 	sbc.w	ip, ip, #0
    16ea:	f04c 0601 	orr.w	r6, ip, #1
    16ee:	f08c 0702 	eor.w	r7, ip, #2
    16f2:	eb18 0806 	adds.w	r8, r8, r6
    16f6:	eb59 096c 	adcs.w	r9, r9, ip, asr #1
    16fa:	eb5a 0a6c 	adcs.w	sl, sl, ip, asr #1
    16fe:	eb7b 0b6c 	sbcs.w	fp, fp, ip, asr #1
    1702:	eb70 046c 	sbcs.w	r4, r0, ip, asr #1
    1706:	eb71 056c 	sbcs.w	r5, r1, ip, asr #1
    170a:	eb72 0667 	sbcs.w	r6, r2, r7, asr #1
    170e:	eb53 076c 	adcs.w	r7, r3, ip, asr #1
    1712:	eb6c 0c6c 	sbc.w	ip, ip, ip, asr #1
    1716:	eb18 000c 	adds.w	r0, r8, ip
    171a:	eb59 010c 	adcs.w	r1, r9, ip
    171e:	eb5a 020c 	adcs.w	r2, sl, ip
    1722:	f15b 0300 	adcs.w	r3, fp, #0
    1726:	f154 0400 	adcs.w	r4, r4, #0
    172a:	f155 0500 	adcs.w	r5, r5, #0
    172e:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    1732:	eb57 070c 	adcs.w	r7, r7, ip
    1736:	4770      	bx	lr

00001738 <ocrypto_mod_p256_mul>:
    1738:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    173c:	b087      	sub	sp, #28
    173e:	f7ff fdaf 	bl	12a0 <ocrypto_mul256_noframe>
    1742:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1746:	f8dd 9014 	ldr.w	r9, [sp, #20]
    174a:	f8dd a018 	ldr.w	sl, [sp, #24]
    174e:	f7ff ff97 	bl	1680 <mul_reduce>
    1752:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    1756:	f7ff ff93 	bl	1680 <mul_reduce>
    175a:	b003      	add	sp, #12
    175c:	f85d 8b04 	ldr.w	r8, [sp], #4
    1760:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001768 <ocrypto_mod_p256_sqr>:
    1768:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    176c:	b087      	sub	sp, #28
    176e:	f7ff fe53 	bl	1418 <ocrypto_sqr256_noframe>
    1772:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1776:	f8dd 9014 	ldr.w	r9, [sp, #20]
    177a:	f8dd a018 	ldr.w	sl, [sp, #24]
    177e:	f7ff ff7f 	bl	1680 <mul_reduce>
    1782:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    1786:	f7ff ff7b 	bl	1680 <mul_reduce>
    178a:	b003      	add	sp, #12
    178c:	f85d 8b04 	ldr.w	r8, [sp], #4
    1790:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    179a:	4c14      	ldr	r4, [pc, #80]	; (17ec <ocrypto_mod_p256_sqr+0x84>)
    179c:	7a20      	ldrb	r0, [r4, #8]
    179e:	f88d 0001 	strb.w	r0, [sp, #1]
    17a2:	79e0      	ldrb	r0, [r4, #7]
    17a4:	f88d 0000 	strb.w	r0, [sp]
    17a8:	79a0      	ldrb	r0, [r4, #6]
    17aa:	f8ad 0004 	strh.w	r0, [sp, #4]
    17ae:	7960      	ldrb	r0, [r4, #5]
    17b0:	f8ad 0002 	strh.w	r0, [sp, #2]
    17b4:	4668      	mov	r0, sp
    17b6:	f006 fae3 	bl	7d80 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    17ba:	b108      	cbz	r0, 17c0 <ocrypto_mod_p256_sqr+0x58>
    17bc:	21ad      	movs	r1, #173	; 0xad
    17be:	e010      	b.n	17e2 <ocrypto_mod_p256_sqr+0x7a>
    17c0:	68e0      	ldr	r0, [r4, #12]
    17c2:	9002      	str	r0, [sp, #8]
    17c4:	a802      	add	r0, sp, #8
    17c6:	f006 faf1 	bl	7dac <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    17ca:	b108      	cbz	r0, 17d0 <ocrypto_mod_p256_sqr+0x68>
    17cc:	21b1      	movs	r1, #177	; 0xb1
    17ce:	e008      	b.n	17e2 <ocrypto_mod_p256_sqr+0x7a>
    17d0:	4807      	ldr	r0, [pc, #28]	; (17f0 <ocrypto_mod_p256_sqr+0x88>)
    17d2:	6800      	ldr	r0, [r0, #0]
    17d4:	9003      	str	r0, [sp, #12]
    17d6:	a803      	add	r0, sp, #12
    17d8:	f00f fbdc 	bl	10f94 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    17dc:	2800      	cmp	r0, #0
    17de:	d003      	beq.n	17e8 <ocrypto_mod_p256_sqr+0x80>
    17e0:	21b5      	movs	r1, #181	; 0xb5
    17e2:	2003      	movs	r0, #3
    17e4:	f000 f8e4 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    17e8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    17ea:	0000      	.short	0x0000
    17ec:	200014f0 	.word	0x200014f0
    17f0:	00001ab8 	.word	0x00001ab8

000017f4 <sdc_build_revision_get>:
    17f4:	b510      	push	{r4, lr}
    17f6:	b128      	cbz	r0, 1804 <sdc_build_revision_get+0x10>
    17f8:	2214      	movs	r2, #20
    17fa:	4904      	ldr	r1, [pc, #16]	; (180c <sdc_build_revision_get+0x18>)
    17fc:	f010 fb43 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1800:	2000      	movs	r0, #0
    1802:	bd10      	pop	{r4, pc}
    1804:	f06f 0015 	mvn.w	r0, #21
    1808:	bd10      	pop	{r4, pc}
    180a:	0000      	.short	0x0000
    180c:	00001ae0 	.word	0x00001ae0

00001810 <sdc_cfg_set>:
    1810:	b570      	push	{r4, r5, r6, lr}
    1812:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    1816:	bb78      	cbnz	r0, 1878 <sdc_cfg_set+0x68>
    1818:	4c22      	ldr	r4, [pc, #136]	; (18a4 <sdc_cfg_set+0x94>)
    181a:	7860      	ldrb	r0, [r4, #1]
    181c:	b108      	cbz	r0, 1822 <sdc_cfg_set+0x12>
    181e:	11a8      	asrs	r0, r5, #6
    1820:	bd70      	pop	{r4, r5, r6, pc}
    1822:	b1f9      	cbz	r1, 1864 <sdc_cfg_set+0x54>
    1824:	f06f 0015 	mvn.w	r0, #21
    1828:	2a00      	cmp	r2, #0
    182a:	d0f9      	beq.n	1820 <sdc_cfg_set+0x10>
    182c:	4b1e      	ldr	r3, [pc, #120]	; (18a8 <sdc_cfg_set+0x98>)
    182e:	1e89      	subs	r1, r1, #2
    1830:	2907      	cmp	r1, #7
    1832:	d231      	bcs.n	1898 <sdc_cfg_set+0x88>
    1834:	e8df f001 	tbb	[pc, r1]
    1838:	1a170704 	.word	0x1a170704
    183c:	00211d30 	.word	0x00211d30
    1840:	7810      	ldrb	r0, [r2, #0]
    1842:	7058      	strb	r0, [r3, #1]
    1844:	e01d      	b.n	1882 <sdc_cfg_set+0x72>
    1846:	7891      	ldrb	r1, [r2, #2]
    1848:	2900      	cmp	r1, #0
    184a:	d0e9      	beq.n	1820 <sdc_cfg_set+0x10>
    184c:	78d1      	ldrb	r1, [r2, #3]
    184e:	2900      	cmp	r1, #0
    1850:	d0e6      	beq.n	1820 <sdc_cfg_set+0x10>
    1852:	7811      	ldrb	r1, [r2, #0]
    1854:	291b      	cmp	r1, #27
    1856:	d3e3      	bcc.n	1820 <sdc_cfg_set+0x10>
    1858:	7851      	ldrb	r1, [r2, #1]
    185a:	291b      	cmp	r1, #27
    185c:	d3e0      	bcc.n	1820 <sdc_cfg_set+0x10>
    185e:	6810      	ldr	r0, [r2, #0]
    1860:	f8c3 0005 	str.w	r0, [r3, #5]
    1864:	e00d      	b.n	1882 <sdc_cfg_set+0x72>
    1866:	6810      	ldr	r0, [r2, #0]
    1868:	60d8      	str	r0, [r3, #12]
    186a:	e00a      	b.n	1882 <sdc_cfg_set+0x72>
    186c:	7810      	ldrb	r0, [r2, #0]
    186e:	7098      	strb	r0, [r3, #2]
    1870:	e007      	b.n	1882 <sdc_cfg_set+0x72>
    1872:	8810      	ldrh	r0, [r2, #0]
    1874:	8258      	strh	r0, [r3, #18]
    1876:	e004      	b.n	1882 <sdc_cfg_set+0x72>
    1878:	e00e      	b.n	1898 <sdc_cfg_set+0x88>
    187a:	8811      	ldrh	r1, [r2, #0]
    187c:	29ff      	cmp	r1, #255	; 0xff
    187e:	d8cf      	bhi.n	1820 <sdc_cfg_set+0x10>
    1880:	7519      	strb	r1, [r3, #20]
    1882:	2201      	movs	r2, #1
    1884:	4908      	ldr	r1, [pc, #32]	; (18a8 <sdc_cfg_set+0x98>)
    1886:	2000      	movs	r0, #0
    1888:	f00c f914 	bl	dab4 <__udivmoddi4+0x2a0>
    188c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    1890:	db04      	blt.n	189c <sdc_cfg_set+0x8c>
    1892:	f06f 000b 	mvn.w	r0, #11
    1896:	bd70      	pop	{r4, r5, r6, pc}
    1898:	4628      	mov	r0, r5
    189a:	bd70      	pop	{r4, r5, r6, pc}
    189c:	2101      	movs	r1, #1
    189e:	70a1      	strb	r1, [r4, #2]
    18a0:	bd70      	pop	{r4, r5, r6, pc}
    18a2:	0000      	.short	0x0000
    18a4:	20000040 	.word	0x20000040
    18a8:	200014f0 	.word	0x200014f0

000018ac <sdc_disable>:
    18ac:	b510      	push	{r4, lr}
    18ae:	4c07      	ldr	r4, [pc, #28]	; (18cc <sdc_disable+0x20>)
    18b0:	7860      	ldrb	r0, [r4, #1]
    18b2:	b120      	cbz	r0, 18be <sdc_disable+0x12>
    18b4:	f006 fd60 	bl	8378 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    18b8:	7820      	ldrb	r0, [r4, #0]
    18ba:	f00b fecb 	bl	d654 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    18be:	f000 fe4d 	bl	255c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    18c2:	f000 ff25 	bl	2710 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    18c6:	2000      	movs	r0, #0
    18c8:	7060      	strb	r0, [r4, #1]
    18ca:	bd10      	pop	{r4, pc}
    18cc:	20000040 	.word	0x20000040

000018d0 <sdc_enable>:
    18d0:	b570      	push	{r4, r5, r6, lr}
    18d2:	460c      	mov	r4, r1
    18d4:	0005      	movs	r5, r0
    18d6:	d002      	beq.n	18de <sdc_enable+0xe>
    18d8:	b10c      	cbz	r4, 18de <sdc_enable+0xe>
    18da:	0760      	lsls	r0, r4, #29
    18dc:	d002      	beq.n	18e4 <sdc_enable+0x14>
    18de:	f06f 0015 	mvn.w	r0, #21
    18e2:	bd70      	pop	{r4, r5, r6, pc}
    18e4:	f000 f922 	bl	1b2c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    18e8:	b1a8      	cbz	r0, 1916 <CONFIG_USB_DEVICE_VID+0x1>
    18ea:	4628      	mov	r0, r5
    18ec:	f00b fe78 	bl	d5e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    18f0:	4d0a      	ldr	r5, [pc, #40]	; (191c <CONFIG_USB_DEVICE_VID+0x7>)
    18f2:	2200      	movs	r2, #0
    18f4:	490a      	ldr	r1, [pc, #40]	; (1920 <CONFIG_USB_DEVICE_VID+0xb>)
    18f6:	7028      	strb	r0, [r5, #0]
    18f8:	4620      	mov	r0, r4
    18fa:	f00c f8db 	bl	dab4 <__udivmoddi4+0x2a0>
    18fe:	f00f ff58 	bl	117b2 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    1902:	2100      	movs	r1, #0
    1904:	7828      	ldrb	r0, [r5, #0]
    1906:	f006 fd21 	bl	834c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    190a:	f7ff ff45 	bl	1798 <ocrypto_mod_p256_sqr+0x30>
    190e:	2001      	movs	r0, #1
    1910:	7068      	strb	r0, [r5, #1]
    1912:	2000      	movs	r0, #0
    1914:	bd70      	pop	{r4, r5, r6, pc}
    1916:	f04f 30ff 	mov.w	r0, #4294967295
    191a:	bd70      	pop	{r4, r5, r6, pc}
    191c:	20000040 	.word	0x20000040
    1920:	200014f0 	.word	0x200014f0

00001924 <sdc_init>:
    1924:	b530      	push	{r4, r5, lr}
    1926:	b089      	sub	sp, #36	; 0x24
    1928:	0004      	movs	r4, r0
    192a:	d00c      	beq.n	1946 <sdc_init+0x22>
    192c:	f00b fe00 	bl	d530 <mpsl_is_initialized>
    1930:	f04f 35ff 	mov.w	r5, #4294967295
    1934:	b120      	cbz	r0, 1940 <sdc_init+0x1c>
    1936:	f00b fc93 	bl	d260 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    193a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    193e:	d905      	bls.n	194c <sdc_init+0x28>
    1940:	4628      	mov	r0, r5
    1942:	b009      	add	sp, #36	; 0x24
    1944:	bd30      	pop	{r4, r5, pc}
    1946:	f06f 0015 	mvn.w	r0, #21
    194a:	e7fa      	b.n	1942 <sdc_init+0x1e>
    194c:	4d13      	ldr	r5, [pc, #76]	; (199c <sdc_init+0x78>)
    194e:	4814      	ldr	r0, [pc, #80]	; (19a0 <sdc_init+0x7c>)
    1950:	606c      	str	r4, [r5, #4]
    1952:	f000 fa07 	bl	1d64 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    1956:	2000      	movs	r0, #0
    1958:	7068      	strb	r0, [r5, #1]
    195a:	70a8      	strb	r0, [r5, #2]
    195c:	4601      	mov	r1, r0
    195e:	2224      	movs	r2, #36	; 0x24
    1960:	4668      	mov	r0, sp
    1962:	f010 fb0a 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1966:	2224      	movs	r2, #36	; 0x24
    1968:	490e      	ldr	r1, [pc, #56]	; (19a4 <sdc_init+0x80>)
    196a:	4668      	mov	r0, sp
    196c:	f010 fa8b 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1970:	2224      	movs	r2, #36	; 0x24
    1972:	4669      	mov	r1, sp
    1974:	480c      	ldr	r0, [pc, #48]	; (19a8 <sdc_init+0x84>)
    1976:	f010 fa86 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    197a:	f3ef 8410 	mrs	r4, PRIMASK
    197e:	b672      	cpsid	i
    1980:	f000 fdfa 	bl	2578 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    1984:	4809      	ldr	r0, [pc, #36]	; (19ac <sdc_init+0x88>)
    1986:	f000 fecf 	bl	2728 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    198a:	b118      	cbz	r0, 1994 <sdc_init+0x70>
    198c:	21cb      	movs	r1, #203	; 0xcb
    198e:	2003      	movs	r0, #3
    1990:	f000 f80e 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1994:	b904      	cbnz	r4, 1998 <sdc_init+0x74>
    1996:	b662      	cpsie	i
    1998:	2000      	movs	r0, #0
    199a:	e7d2      	b.n	1942 <sdc_init+0x1e>
    199c:	20000040 	.word	0x20000040
    19a0:	00001799 	.word	0x00001799
    19a4:	00001abc 	.word	0x00001abc
    19a8:	200014f0 	.word	0x200014f0
    19ac:	00001b59 	.word	0x00001b59

000019b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    19b0:	b50e      	push	{r1, r2, r3, lr}
    19b2:	b672      	cpsid	i
    19b4:	4a15      	ldr	r2, [pc, #84]	; (1a0c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    19b6:	6855      	ldr	r5, [r2, #4]
    19b8:	b1dd      	cbz	r5, 19f2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    19ba:	2200      	movs	r2, #0
    19bc:	4603      	mov	r3, r0
    19be:	466e      	mov	r6, sp
    19c0:	240a      	movs	r4, #10
    19c2:	e003      	b.n	19cc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    19c4:	fbb0 f0f4 	udiv	r0, r0, r4
    19c8:	1c52      	adds	r2, r2, #1
    19ca:	b2d2      	uxtb	r2, r2
    19cc:	2800      	cmp	r0, #0
    19ce:	d1f9      	bne.n	19c4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    19d0:	54b0      	strb	r0, [r6, r2]
    19d2:	e00a      	b.n	19ea <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    19d4:	b2d8      	uxtb	r0, r3
    19d6:	fbb0 f7f4 	udiv	r7, r0, r4
    19da:	fbb3 f3f4 	udiv	r3, r3, r4
    19de:	fb04 0017 	mls	r0, r4, r7, r0
    19e2:	1e52      	subs	r2, r2, #1
    19e4:	b2d2      	uxtb	r2, r2
    19e6:	3030      	adds	r0, #48	; 0x30
    19e8:	54b0      	strb	r0, [r6, r2]
    19ea:	2a00      	cmp	r2, #0
    19ec:	d1f2      	bne.n	19d4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    19ee:	4630      	mov	r0, r6
    19f0:	47a8      	blx	r5
    19f2:	f3bf 8f4f 	dsb	sy
    19f6:	4806      	ldr	r0, [pc, #24]	; (1a10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    19f8:	6801      	ldr	r1, [r0, #0]
    19fa:	4a06      	ldr	r2, [pc, #24]	; (1a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    19fc:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    1a00:	4311      	orrs	r1, r2
    1a02:	6001      	str	r1, [r0, #0]
    1a04:	f3bf 8f4f 	dsb	sy
    1a08:	bf00      	nop
    1a0a:	e7fd      	b.n	1a08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    1a0c:	20000040 	.word	0x20000040
    1a10:	e000ed0c 	.word	0xe000ed0c
    1a14:	05fa0004 	.word	0x05fa0004

00001a18 <sdc_support_adv>:
    1a18:	4806      	ldr	r0, [pc, #24]	; (1a34 <sdc_support_adv+0x1c>)
    1a1a:	b510      	push	{r4, lr}
    1a1c:	7881      	ldrb	r1, [r0, #2]
    1a1e:	7840      	ldrb	r0, [r0, #1]
    1a20:	4301      	orrs	r1, r0
    1a22:	d002      	beq.n	1a2a <sdc_support_adv+0x12>
    1a24:	f04f 30ff 	mov.w	r0, #4294967295
    1a28:	bd10      	pop	{r4, pc}
    1a2a:	f006 fcb5 	bl	8398 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    1a2e:	2000      	movs	r0, #0
    1a30:	bd10      	pop	{r4, pc}
    1a32:	0000      	.short	0x0000
    1a34:	20000040 	.word	0x20000040

00001a38 <sdc_support_dle_peripheral>:
    1a38:	4806      	ldr	r0, [pc, #24]	; (1a54 <sdc_support_dle_peripheral+0x1c>)
    1a3a:	b510      	push	{r4, lr}
    1a3c:	7881      	ldrb	r1, [r0, #2]
    1a3e:	7840      	ldrb	r0, [r0, #1]
    1a40:	4301      	orrs	r1, r0
    1a42:	d002      	beq.n	1a4a <sdc_support_dle_peripheral+0x12>
    1a44:	f04f 30ff 	mov.w	r0, #4294967295
    1a48:	bd10      	pop	{r4, pc}
    1a4a:	f006 facd 	bl	7fe8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    1a4e:	2000      	movs	r0, #0
    1a50:	bd10      	pop	{r4, pc}
    1a52:	0000      	.short	0x0000
    1a54:	20000040 	.word	0x20000040

00001a58 <sdc_support_le_2m_phy>:
    1a58:	4806      	ldr	r0, [pc, #24]	; (1a74 <sdc_support_le_2m_phy+0x1c>)
    1a5a:	b510      	push	{r4, lr}
    1a5c:	7881      	ldrb	r1, [r0, #2]
    1a5e:	7840      	ldrb	r0, [r0, #1]
    1a60:	4301      	orrs	r1, r0
    1a62:	d002      	beq.n	1a6a <sdc_support_le_2m_phy+0x12>
    1a64:	f04f 30ff 	mov.w	r0, #4294967295
    1a68:	bd10      	pop	{r4, pc}
    1a6a:	f00f fc37 	bl	112dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    1a6e:	2000      	movs	r0, #0
    1a70:	bd10      	pop	{r4, pc}
    1a72:	0000      	.short	0x0000
    1a74:	20000040 	.word	0x20000040

00001a78 <sdc_support_peripheral>:
    1a78:	4806      	ldr	r0, [pc, #24]	; (1a94 <sdc_support_peripheral+0x1c>)
    1a7a:	b510      	push	{r4, lr}
    1a7c:	7881      	ldrb	r1, [r0, #2]
    1a7e:	7840      	ldrb	r0, [r0, #1]
    1a80:	4301      	orrs	r1, r0
    1a82:	d002      	beq.n	1a8a <sdc_support_peripheral+0x12>
    1a84:	f04f 30ff 	mov.w	r0, #4294967295
    1a88:	bd10      	pop	{r4, pc}
    1a8a:	f006 fc97 	bl	83bc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    1a8e:	2000      	movs	r0, #0
    1a90:	bd10      	pop	{r4, pc}
    1a92:	0000      	.short	0x0000
    1a94:	20000040 	.word	0x20000040

00001a98 <sdc_support_phy_update_peripheral>:
    1a98:	4806      	ldr	r0, [pc, #24]	; (1ab4 <sdc_support_phy_update_peripheral+0x1c>)
    1a9a:	b510      	push	{r4, lr}
    1a9c:	7881      	ldrb	r1, [r0, #2]
    1a9e:	7840      	ldrb	r0, [r0, #1]
    1aa0:	4301      	orrs	r1, r0
    1aa2:	d002      	beq.n	1aaa <sdc_support_phy_update_peripheral+0x12>
    1aa4:	f04f 30ff 	mov.w	r0, #4294967295
    1aa8:	bd10      	pop	{r4, pc}
    1aaa:	f00f fc2b 	bl	11304 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    1aae:	2000      	movs	r0, #0
    1ab0:	bd10      	pop	{r4, pc}
    1ab2:	0000      	.short	0x0000
    1ab4:	20000040 	.word	0x20000040
    1ab8:	00000001 	.word	0x00000001
    1abc:	00010100 	.word	0x00010100
    1ac0:	031b1b00 	.word	0x031b1b00
    1ac4:	00000002 	.word	0x00000002
    1ac8:	00001d4c 	.word	0x00001d4c
    1acc:	001f0000 	.word	0x001f0000
    1ad0:	00000008 	.word	0x00000008
	...
    1ae0:	c12e7ee0 	.word	0xc12e7ee0
    1ae4:	2385055e 	.word	0x2385055e
    1ae8:	fadc1546 	.word	0xfadc1546
    1aec:	707d298e 	.word	0x707d298e
    1af0:	fca59310 	.word	0xfca59310

00001af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    1af4:	4a05      	ldr	r2, [pc, #20]	; (1b0c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    1af6:	b510      	push	{r4, lr}
    1af8:	6852      	ldr	r2, [r2, #4]
    1afa:	b112      	cbz	r2, 1b02 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    1afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b00:	4710      	bx	r2
    1b02:	2192      	movs	r1, #146	; 0x92
    1b04:	2004      	movs	r0, #4
    1b06:	f7ff ff53 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b0a:	0000      	.short	0x0000
    1b0c:	20001514 	.word	0x20001514

00001b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    1b10:	4a05      	ldr	r2, [pc, #20]	; (1b28 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    1b12:	b510      	push	{r4, lr}
    1b14:	6892      	ldr	r2, [r2, #8]
    1b16:	b112      	cbz	r2, 1b1e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    1b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b1c:	4710      	bx	r2
    1b1e:	2198      	movs	r1, #152	; 0x98
    1b20:	2004      	movs	r0, #4
    1b22:	f7ff ff45 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b26:	0000      	.short	0x0000
    1b28:	20001514 	.word	0x20001514

00001b2c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    1b2c:	4805      	ldr	r0, [pc, #20]	; (1b44 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    1b2e:	6801      	ldr	r1, [r0, #0]
    1b30:	b129      	cbz	r1, 1b3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    1b32:	6841      	ldr	r1, [r0, #4]
    1b34:	b119      	cbz	r1, 1b3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    1b36:	6880      	ldr	r0, [r0, #8]
    1b38:	b108      	cbz	r0, 1b3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    1b3a:	2001      	movs	r0, #1
    1b3c:	4770      	bx	lr
    1b3e:	2000      	movs	r0, #0
    1b40:	4770      	bx	lr
    1b42:	0000      	.short	0x0000
    1b44:	20001514 	.word	0x20001514

00001b48 <sdc_rand_source_register>:
    1b48:	4902      	ldr	r1, [pc, #8]	; (1b54 <sdc_rand_source_register+0xc>)
    1b4a:	c80d      	ldmia	r0, {r0, r2, r3}
    1b4c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    1b50:	2000      	movs	r0, #0
    1b52:	4770      	bx	lr
    1b54:	20001514 	.word	0x20001514

00001b58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    1b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b5a:	4c12      	ldr	r4, [pc, #72]	; (1ba4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    1b5c:	2600      	movs	r6, #0
    1b5e:	6825      	ldr	r5, [r4, #0]
    1b60:	e011      	b.n	1b86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    1b62:	9800      	ldr	r0, [sp, #0]
    1b64:	2802      	cmp	r0, #2
    1b66:	d002      	beq.n	1b6e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    1b68:	2803      	cmp	r0, #3
    1b6a:	d10c      	bne.n	1b86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    1b6c:	e006      	b.n	1b7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    1b6e:	6820      	ldr	r0, [r4, #0]
    1b70:	b110      	cbz	r0, 1b78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    1b72:	2000      	movs	r0, #0
    1b74:	6026      	str	r6, [r4, #0]
    1b76:	e005      	b.n	1b84 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    1b78:	2128      	movs	r1, #40	; 0x28
    1b7a:	e00c      	b.n	1b96 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    1b7c:	6820      	ldr	r0, [r4, #0]
    1b7e:	b168      	cbz	r0, 1b9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    1b80:	2001      	movs	r0, #1
    1b82:	6026      	str	r6, [r4, #0]
    1b84:	47a8      	blx	r5
    1b86:	4668      	mov	r0, sp
    1b88:	f000 fd94 	bl	26b4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    1b8c:	2800      	cmp	r0, #0
    1b8e:	d0e8      	beq.n	1b62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    1b90:	2805      	cmp	r0, #5
    1b92:	d005      	beq.n	1ba0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    1b94:	2135      	movs	r1, #53	; 0x35
    1b96:	2004      	movs	r0, #4
    1b98:	f7ff ff0a 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b9c:	212d      	movs	r1, #45	; 0x2d
    1b9e:	e7fa      	b.n	1b96 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    1ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ba2:	0000      	.short	0x0000
    1ba4:	20000048 	.word	0x20000048

00001ba8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    1ba8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1bac:	4e28      	ldr	r6, [pc, #160]	; (1c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
    1bae:	4605      	mov	r5, r0
    1bb0:	1d00      	adds	r0, r0, #4
    1bb2:	f106 0744 	add.w	r7, r6, #68	; 0x44
    1bb6:	6030      	str	r0, [r6, #0]
    1bb8:	7838      	ldrb	r0, [r7, #0]
    1bba:	b158      	cbz	r0, 1bd4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    1bbc:	78ba      	ldrb	r2, [r7, #2]
    1bbe:	463c      	mov	r4, r7
    1bc0:	1c79      	adds	r1, r7, #1
    1bc2:	4628      	mov	r0, r5
    1bc4:	1c92      	adds	r2, r2, #2
    1bc6:	f010 f95e 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1bca:	2000      	movs	r0, #0
    1bcc:	7020      	strb	r0, [r4, #0]
    1bce:	2004      	movs	r0, #4
    1bd0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    1bd4:	481e      	ldr	r0, [pc, #120]	; (1c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
    1bd6:	f001 ff6d 	bl	3ab4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    1bda:	4604      	mov	r4, r0
    1bdc:	2802      	cmp	r0, #2
    1bde:	d004      	beq.n	1bea <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
    1be0:	2c04      	cmp	r4, #4
    1be2:	d007      	beq.n	1bf4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
    1be4:	2c08      	cmp	r4, #8
    1be6:	d02c      	beq.n	1c42 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9a>
    1be8:	e02f      	b.n	1c4a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
    1bea:	4919      	ldr	r1, [pc, #100]	; (1c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
    1bec:	4628      	mov	r0, r5
    1bee:	f00c f826 	bl	dc3e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    1bf2:	e02a      	b.n	1c4a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
    1bf4:	7830      	ldrb	r0, [r6, #0]
    1bf6:	2808      	cmp	r0, #8
    1bf8:	d104      	bne.n	1c04 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
    1bfa:	2105      	movs	r1, #5
    1bfc:	203e      	movs	r0, #62	; 0x3e
    1bfe:	f00b fff0 	bl	dbe2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    1c02:	b150      	cbz	r0, 1c1a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x72>
    1c04:	4912      	ldr	r1, [pc, #72]	; (1c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
    1c06:	4628      	mov	r0, r5
    1c08:	f00c f87e 	bl	dd08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    1c0c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
    1c10:	d30e      	bcc.n	1c30 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x88>
    1c12:	21c7      	movs	r1, #199	; 0xc7
    1c14:	2008      	movs	r0, #8
    1c16:	f7ff fecb 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c1a:	88b0      	ldrh	r0, [r6, #4]
    1c1c:	f8ad 0000 	strh.w	r0, [sp]
    1c20:	a901      	add	r1, sp, #4
    1c22:	4668      	mov	r0, sp
    1c24:	f00c fae0 	bl	e1e8 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    1c28:	2800      	cmp	r0, #0
    1c2a:	d0c5      	beq.n	1bb8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    1c2c:	21a8      	movs	r1, #168	; 0xa8
    1c2e:	e7f1      	b.n	1c14 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6c>
    1c30:	2800      	cmp	r0, #0
    1c32:	d0c1      	beq.n	1bb8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    1c34:	78a9      	ldrb	r1, [r5, #2]
    1c36:	7828      	ldrb	r0, [r5, #0]
    1c38:	f00b ffd3 	bl	dbe2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    1c3c:	2800      	cmp	r0, #0
    1c3e:	d0bb      	beq.n	1bb8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    1c40:	e003      	b.n	1c4a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
    1c42:	4903      	ldr	r1, [pc, #12]	; (1c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
    1c44:	4628      	mov	r0, r5
    1c46:	f00c f828 	bl	dc9a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
    1c4a:	4620      	mov	r0, r4
    1c4c:	e7c0      	b.n	1bd0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    1c4e:	0000      	.short	0x0000
    1c50:	20001520 	.word	0x20001520
    1c54:	b570      	push	{r4, r5, r6, lr}
    1c56:	780a      	ldrb	r2, [r1, #0]
    1c58:	7082      	strb	r2, [r0, #2]
    1c5a:	b33a      	cbz	r2, 1cac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
    1c5c:	2a01      	cmp	r2, #1
    1c5e:	d825      	bhi.n	1cac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
    1c60:	2313      	movs	r3, #19
    1c62:	7003      	strb	r3, [r0, #0]
    1c64:	2300      	movs	r3, #0
    1c66:	e00a      	b.n	1c7e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd6>
    1c68:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    1c6c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    1c70:	78a6      	ldrb	r6, [r4, #2]
    1c72:	70ee      	strb	r6, [r5, #3]
    1c74:	8864      	ldrh	r4, [r4, #2]
    1c76:	0a24      	lsrs	r4, r4, #8
    1c78:	1c5b      	adds	r3, r3, #1
    1c7a:	712c      	strb	r4, [r5, #4]
    1c7c:	b2db      	uxtb	r3, r3
    1c7e:	4293      	cmp	r3, r2
    1c80:	d3f2      	bcc.n	1c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc0>
    1c82:	2300      	movs	r3, #0
    1c84:	e00b      	b.n	1c9e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf6>
    1c86:	bf00      	nop
    1c88:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    1c8c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    1c90:	792e      	ldrb	r6, [r5, #4]
    1c92:	7166      	strb	r6, [r4, #5]
    1c94:	88ad      	ldrh	r5, [r5, #4]
    1c96:	0a2d      	lsrs	r5, r5, #8
    1c98:	1c5b      	adds	r3, r3, #1
    1c9a:	71a5      	strb	r5, [r4, #6]
    1c9c:	b2db      	uxtb	r3, r3
    1c9e:	4293      	cmp	r3, r2
    1ca0:	d3f2      	bcc.n	1c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe0>
    1ca2:	2101      	movs	r1, #1
    1ca4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    1ca8:	b2c0      	uxtb	r0, r0
    1caa:	bd70      	pop	{r4, r5, r6, pc}
    1cac:	2000      	movs	r0, #0
    1cae:	bd70      	pop	{r4, r5, r6, pc}

00001cb0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    1cb0:	2840      	cmp	r0, #64	; 0x40
    1cb2:	d203      	bcs.n	1cbc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    1cb4:	1e40      	subs	r0, r0, #1
    1cb6:	b2c1      	uxtb	r1, r0
    1cb8:	4805      	ldr	r0, [pc, #20]	; (1cd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    1cba:	e005      	b.n	1cc8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    1cbc:	28ff      	cmp	r0, #255	; 0xff
    1cbe:	d005      	beq.n	1ccc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    1cc0:	3840      	subs	r0, #64	; 0x40
    1cc2:	b2c1      	uxtb	r1, r0
    1cc4:	4802      	ldr	r0, [pc, #8]	; (1cd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    1cc6:	3008      	adds	r0, #8
    1cc8:	f00c ba1d 	b.w	e106 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    1ccc:	2001      	movs	r0, #1
    1cce:	4770      	bx	lr
    1cd0:	2000004c 	.word	0x2000004c

00001cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    1cd4:	1e40      	subs	r0, r0, #1
    1cd6:	b2c1      	uxtb	r1, r0
    1cd8:	4801      	ldr	r0, [pc, #4]	; (1ce0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    1cda:	f00c ba14 	b.w	e106 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    1cde:	0000      	.short	0x0000
    1ce0:	2000005c 	.word	0x2000005c

00001ce4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    1ce4:	4902      	ldr	r1, [pc, #8]	; (1cf0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    1ce6:	6802      	ldr	r2, [r0, #0]
    1ce8:	610a      	str	r2, [r1, #16]
    1cea:	6840      	ldr	r0, [r0, #4]
    1cec:	6148      	str	r0, [r1, #20]
    1cee:	4770      	bx	lr
    1cf0:	2000004c 	.word	0x2000004c

00001cf4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    1cf4:	4905      	ldr	r1, [pc, #20]	; (1d0c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    1cf6:	6802      	ldr	r2, [r0, #0]
    1cf8:	600a      	str	r2, [r1, #0]
    1cfa:	6840      	ldr	r0, [r0, #4]
    1cfc:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    1d00:	600a      	str	r2, [r1, #0]
    1d02:	4a03      	ldr	r2, [pc, #12]	; (1d10 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    1d04:	4310      	orrs	r0, r2
    1d06:	6048      	str	r0, [r1, #4]
    1d08:	4770      	bx	lr
    1d0a:	0000      	.short	0x0000
    1d0c:	2000004c 	.word	0x2000004c
    1d10:	024007f8 	.word	0x024007f8

00001d14 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    1d14:	4902      	ldr	r1, [pc, #8]	; (1d20 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    1d16:	6802      	ldr	r2, [r0, #0]
    1d18:	608a      	str	r2, [r1, #8]
    1d1a:	6840      	ldr	r0, [r0, #4]
    1d1c:	60c8      	str	r0, [r1, #12]
    1d1e:	4770      	bx	lr
    1d20:	2000004c 	.word	0x2000004c

00001d24 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    1d24:	4807      	ldr	r0, [pc, #28]	; (1d44 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    1d26:	f04f 31ff 	mov.w	r1, #4294967295
    1d2a:	2200      	movs	r2, #0
    1d2c:	6001      	str	r1, [r0, #0]
    1d2e:	0cc9      	lsrs	r1, r1, #19
    1d30:	6041      	str	r1, [r0, #4]
    1d32:	f100 0108 	add.w	r1, r0, #8
    1d36:	201f      	movs	r0, #31
    1d38:	600a      	str	r2, [r1, #0]
    1d3a:	604a      	str	r2, [r1, #4]
    1d3c:	3108      	adds	r1, #8
    1d3e:	e9c1 0200 	strd	r0, r2, [r1]
    1d42:	4770      	bx	lr
    1d44:	2000004c 	.word	0x2000004c

00001d48 <sdc_hci_cmd_cb_reset>:
    1d48:	b510      	push	{r4, lr}
    1d4a:	f7ff ffeb 	bl	1d24 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    1d4e:	f00f fa39 	bl	111c4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    1d52:	4604      	mov	r4, r0
    1d54:	4802      	ldr	r0, [pc, #8]	; (1d60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>)
    1d56:	6800      	ldr	r0, [r0, #0]
    1d58:	b100      	cbz	r0, 1d5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10>
    1d5a:	4780      	blx	r0
    1d5c:	4620      	mov	r0, r4
    1d5e:	bd10      	pop	{r4, pc}
    1d60:	20000064 	.word	0x20000064

00001d64 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    1d64:	4901      	ldr	r1, [pc, #4]	; (1d6c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    1d66:	6008      	str	r0, [r1, #0]
    1d68:	4770      	bx	lr
    1d6a:	0000      	.short	0x0000
    1d6c:	20000064 	.word	0x20000064

00001d70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    1d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d74:	4604      	mov	r4, r0
    1d76:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    1d7a:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
    1d7e:	4d1f      	ldr	r5, [pc, #124]	; (1dfc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
    1d80:	4e1e      	ldr	r6, [pc, #120]	; (1dfc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
    1d82:	3d10      	subs	r5, #16
    1d84:	2210      	movs	r2, #16
    1d86:	2100      	movs	r1, #0
    1d88:	4620      	mov	r0, r4
    1d8a:	f010 f8f6 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1d8e:	2210      	movs	r2, #16
    1d90:	2100      	movs	r1, #0
    1d92:	f104 0010 	add.w	r0, r4, #16
    1d96:	f010 f8f0 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1d9a:	6828      	ldr	r0, [r5, #0]
    1d9c:	1c40      	adds	r0, r0, #1
    1d9e:	d108      	bne.n	1db2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    1da0:	6868      	ldr	r0, [r5, #4]
    1da2:	1c40      	adds	r0, r0, #1
    1da4:	d105      	bne.n	1db2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    1da6:	68a8      	ldr	r0, [r5, #8]
    1da8:	1c40      	adds	r0, r0, #1
    1daa:	d102      	bne.n	1db2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    1dac:	68e8      	ldr	r0, [r5, #12]
    1dae:	1c40      	adds	r0, r0, #1
    1db0:	d007      	beq.n	1dc2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
    1db2:	6828      	ldr	r0, [r5, #0]
    1db4:	686a      	ldr	r2, [r5, #4]
    1db6:	68a9      	ldr	r1, [r5, #8]
    1db8:	68eb      	ldr	r3, [r5, #12]
    1dba:	6120      	str	r0, [r4, #16]
    1dbc:	6162      	str	r2, [r4, #20]
    1dbe:	61a1      	str	r1, [r4, #24]
    1dc0:	61e3      	str	r3, [r4, #28]
    1dc2:	2000      	movs	r0, #0
    1dc4:	f000 fd84 	bl	28d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    1dc8:	4387      	bics	r7, r0
    1dca:	07f8      	lsls	r0, r7, #31
    1dcc:	d113      	bne.n	1df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
    1dce:	6830      	ldr	r0, [r6, #0]
    1dd0:	1c40      	adds	r0, r0, #1
    1dd2:	d108      	bne.n	1de6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    1dd4:	6870      	ldr	r0, [r6, #4]
    1dd6:	1c40      	adds	r0, r0, #1
    1dd8:	d105      	bne.n	1de6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    1dda:	68b0      	ldr	r0, [r6, #8]
    1ddc:	1c40      	adds	r0, r0, #1
    1dde:	d102      	bne.n	1de6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    1de0:	68f0      	ldr	r0, [r6, #12]
    1de2:	1c40      	adds	r0, r0, #1
    1de4:	d007      	beq.n	1df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
    1de6:	6832      	ldr	r2, [r6, #0]
    1de8:	6870      	ldr	r0, [r6, #4]
    1dea:	68b1      	ldr	r1, [r6, #8]
    1dec:	68f3      	ldr	r3, [r6, #12]
    1dee:	6022      	str	r2, [r4, #0]
    1df0:	6060      	str	r0, [r4, #4]
    1df2:	60a1      	str	r1, [r4, #8]
    1df4:	60e3      	str	r3, [r4, #12]
    1df6:	2000      	movs	r0, #0
    1df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1dfc:	10000090 	.word	0x10000090

00001e00 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    1e00:	b538      	push	{r3, r4, r5, lr}
    1e02:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    1e06:	4604      	mov	r4, r0
    1e08:	4822      	ldr	r0, [pc, #136]	; (1e94 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
    1e0a:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    1e0e:	4d21      	ldr	r5, [pc, #132]	; (1e94 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
    1e10:	6802      	ldr	r2, [r0, #0]
    1e12:	3d14      	subs	r5, #20
    1e14:	1c52      	adds	r2, r2, #1
    1e16:	d104      	bne.n	1e22 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
    1e18:	6842      	ldr	r2, [r0, #4]
    1e1a:	43d2      	mvns	r2, r2
    1e1c:	0412      	lsls	r2, r2, #16
    1e1e:	0c12      	lsrs	r2, r2, #16
    1e20:	d035      	beq.n	1e8e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
    1e22:	07c9      	lsls	r1, r1, #31
    1e24:	d033      	beq.n	1e8e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
    1e26:	6801      	ldr	r1, [r0, #0]
    1e28:	6840      	ldr	r0, [r0, #4]
    1e2a:	f8ad 0000 	strh.w	r0, [sp]
    1e2e:	f8c4 1001 	str.w	r1, [r4, #1]
    1e32:	f8bd 0000 	ldrh.w	r0, [sp]
    1e36:	f8a4 0005 	strh.w	r0, [r4, #5]
    1e3a:	79a0      	ldrb	r0, [r4, #6]
    1e3c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    1e40:	71a0      	strb	r0, [r4, #6]
    1e42:	6828      	ldr	r0, [r5, #0]
    1e44:	1c40      	adds	r0, r0, #1
    1e46:	d00c      	beq.n	1e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    1e48:	6868      	ldr	r0, [r5, #4]
    1e4a:	1c40      	adds	r0, r0, #1
    1e4c:	d009      	beq.n	1e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    1e4e:	68a8      	ldr	r0, [r5, #8]
    1e50:	1c40      	adds	r0, r0, #1
    1e52:	d006      	beq.n	1e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    1e54:	68e8      	ldr	r0, [r5, #12]
    1e56:	1c40      	adds	r0, r0, #1
    1e58:	d003      	beq.n	1e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    1e5a:	2000      	movs	r0, #0
    1e5c:	f000 fd38 	bl	28d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    1e60:	b140      	cbz	r0, 1e74 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
    1e62:	2210      	movs	r2, #16
    1e64:	2100      	movs	r1, #0
    1e66:	1de0      	adds	r0, r4, #7
    1e68:	f010 f887 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1e6c:	2001      	movs	r0, #1
    1e6e:	7020      	strb	r0, [r4, #0]
    1e70:	2000      	movs	r0, #0
    1e72:	bd38      	pop	{r3, r4, r5, pc}
    1e74:	682a      	ldr	r2, [r5, #0]
    1e76:	6869      	ldr	r1, [r5, #4]
    1e78:	68a8      	ldr	r0, [r5, #8]
    1e7a:	68eb      	ldr	r3, [r5, #12]
    1e7c:	f8c4 2007 	str.w	r2, [r4, #7]
    1e80:	f8c4 100b 	str.w	r1, [r4, #11]
    1e84:	f8c4 000f 	str.w	r0, [r4, #15]
    1e88:	f8c4 3013 	str.w	r3, [r4, #19]
    1e8c:	e7ee      	b.n	1e6c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    1e8e:	2000      	movs	r0, #0
    1e90:	e7ed      	b.n	1e6e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    1e92:	0000      	.short	0x0000
    1e94:	100000a4 	.word	0x100000a4

00001e98 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    1e98:	2102      	movs	r1, #2
    1e9a:	8001      	strh	r1, [r0, #0]
    1e9c:	8041      	strh	r1, [r0, #2]
    1e9e:	2100      	movs	r1, #0
    1ea0:	7101      	strb	r1, [r0, #4]
    1ea2:	21e0      	movs	r1, #224	; 0xe0
    1ea4:	7141      	strb	r1, [r0, #5]
    1ea6:	f642 617e 	movw	r1, #11902	; 0x2e7e
    1eaa:	80c1      	strh	r1, [r0, #6]
    1eac:	4901      	ldr	r1, [pc, #4]	; (1eb4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    1eae:	6081      	str	r1, [r0, #8]
    1eb0:	2000      	movs	r0, #0
    1eb2:	4770      	bx	lr
    1eb4:	85055ec1 	.word	0x85055ec1
    1eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ebc:	798c      	ldrb	r4, [r1, #6]
    1ebe:	f8dd e018 	ldr.w	lr, [sp, #24]
    1ec2:	2c08      	cmp	r4, #8
    1ec4:	d901      	bls.n	1eca <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
    1ec6:	21db      	movs	r1, #219	; 0xdb
    1ec8:	e02c      	b.n	1f24 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
    1eca:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 1f70 <sdc_hci_cmd_vs_zephyr_read_version_info+0xd8>
    1ece:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
    1ed2:	b10d      	cbz	r5, 1ed8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
    1ed4:	21dc      	movs	r1, #220	; 0xdc
    1ed6:	e025      	b.n	1f24 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
    1ed8:	79cd      	ldrb	r5, [r1, #7]
    1eda:	2d00      	cmp	r5, #0
    1edc:	d045      	beq.n	1f6a <sdc_hci_cmd_vs_zephyr_read_version_info+0xd2>
    1ede:	006f      	lsls	r7, r5, #1
    1ee0:	370a      	adds	r7, #10
    1ee2:	681d      	ldr	r5, [r3, #0]
    1ee4:	2c02      	cmp	r4, #2
    1ee6:	443d      	add	r5, r7
    1ee8:	d901      	bls.n	1eee <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
    1eea:	4626      	mov	r6, r4
    1eec:	e001      	b.n	1ef2 <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
    1eee:	f04f 0602 	mov.w	r6, #2
    1ef2:	442e      	add	r6, r5
    1ef4:	f1a6 0601 	sub.w	r6, r6, #1
    1ef8:	d901      	bls.n	1efe <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
    1efa:	4625      	mov	r5, r4
    1efc:	e001      	b.n	1f02 <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
    1efe:	f04f 0502 	mov.w	r5, #2
    1f02:	f1a5 0501 	sub.w	r5, r5, #1
    1f06:	ea26 0605 	bic.w	r6, r6, r5
    1f0a:	888d      	ldrh	r5, [r1, #4]
    1f0c:	4425      	add	r5, r4
    1f0e:	f1a4 0401 	sub.w	r4, r4, #1
    1f12:	f1a5 0501 	sub.w	r5, r5, #1
    1f16:	ea25 0504 	bic.w	r5, r5, r4
    1f1a:	f64f 74ff 	movw	r4, #65535	; 0xffff
    1f1e:	42a5      	cmp	r5, r4
    1f20:	d303      	bcc.n	1f2a <sdc_hci_cmd_vs_zephyr_read_version_info+0x92>
    1f22:	21e7      	movs	r1, #231	; 0xe7
    1f24:	2017      	movs	r0, #23
    1f26:	f7ff fd43 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f2a:	f1be 0f00 	cmp.w	lr, #0
    1f2e:	d118      	bne.n	1f62 <sdc_hci_cmd_vs_zephyr_read_version_info+0xca>
    1f30:	1bf4      	subs	r4, r6, r7
    1f32:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
    1f36:	8025      	strh	r5, [r4, #0]
    1f38:	79c8      	ldrb	r0, [r1, #7]
    1f3a:	70a0      	strb	r0, [r4, #2]
    1f3c:	2001      	movs	r0, #1
    1f3e:	70e0      	strb	r0, [r4, #3]
    1f40:	7122      	strb	r2, [r4, #4]
    1f42:	6808      	ldr	r0, [r1, #0]
    1f44:	f64f 72f0 	movw	r2, #65520	; 0xfff0
    1f48:	0c00      	lsrs	r0, r0, #16
    1f4a:	80e0      	strh	r0, [r4, #6]
    1f4c:	8808      	ldrh	r0, [r1, #0]
    1f4e:	8120      	strh	r0, [r4, #8]
    1f50:	2000      	movs	r0, #0
    1f52:	e003      	b.n	1f5c <sdc_hci_cmd_vs_zephyr_read_version_info+0xc4>
    1f54:	eb04 0740 	add.w	r7, r4, r0, lsl #1
    1f58:	1c40      	adds	r0, r0, #1
    1f5a:	817a      	strh	r2, [r7, #10]
    1f5c:	79cf      	ldrb	r7, [r1, #7]
    1f5e:	4287      	cmp	r7, r0
    1f60:	d8f8      	bhi.n	1f54 <sdc_hci_cmd_vs_zephyr_read_version_info+0xbc>
    1f62:	79c8      	ldrb	r0, [r1, #7]
    1f64:	fb00 6005 	mla	r0, r0, r5, r6
    1f68:	6018      	str	r0, [r3, #0]
    1f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f6e:	0000      	.short	0x0000
    1f70:	20000068 	.word	0x20000068
    1f74:	b530      	push	{r4, r5, lr}
    1f76:	4603      	mov	r3, r0
    1f78:	ea4f 0002 	mov.w	r0, r2
    1f7c:	eb03 0440 	add.w	r4, r3, r0, lsl #1
    1f80:	8964      	ldrh	r4, [r4, #10]
    1f82:	428c      	cmp	r4, r1
    1f84:	d009      	beq.n	1f9a <sdc_hci_cmd_vs_zephyr_read_version_info+0x102>
    1f86:	789c      	ldrb	r4, [r3, #2]
    1f88:	1c40      	adds	r0, r0, #1
    1f8a:	fbb0 f5f4 	udiv	r5, r0, r4
    1f8e:	fb04 0015 	mls	r0, r4, r5, r0
    1f92:	b2c0      	uxtb	r0, r0
    1f94:	4290      	cmp	r0, r2
    1f96:	d1f1      	bne.n	1f7c <sdc_hci_cmd_vs_zephyr_read_version_info+0xe4>
    1f98:	20ff      	movs	r0, #255	; 0xff
    1f9a:	bd30      	pop	{r4, r5, pc}

00001f9c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    1f9c:	b570      	push	{r4, r5, r6, lr}
    1f9e:	4605      	mov	r5, r0
    1fa0:	4819      	ldr	r0, [pc, #100]	; (2008 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8>)
    1fa2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    1fa6:	b364      	cbz	r4, 2002 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2>
    1fa8:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
    1fac:	d304      	bcc.n	1fb8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
    1fae:	f240 2125 	movw	r1, #549	; 0x225
    1fb2:	2017      	movs	r0, #23
    1fb4:	f7ff fcfc 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1fb8:	4629      	mov	r1, r5
    1fba:	4620      	mov	r0, r4
    1fbc:	f00c fbbf 	bl	e73e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1fc0:	4601      	mov	r1, r0
    1fc2:	28ff      	cmp	r0, #255	; 0xff
    1fc4:	d004      	beq.n	1fd0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
    1fc6:	4620      	mov	r0, r4
    1fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1fcc:	f00c bbcb 	b.w	e766 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1fd0:	78a0      	ldrb	r0, [r4, #2]
    1fd2:	fbb5 f1f0 	udiv	r1, r5, r0
    1fd6:	fb00 5011 	mls	r0, r0, r1, r5
    1fda:	b2c6      	uxtb	r6, r0
    1fdc:	4632      	mov	r2, r6
    1fde:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    1fe2:	4620      	mov	r0, r4
    1fe4:	f7ff ffc6 	bl	1f74 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    1fe8:	4602      	mov	r2, r0
    1fea:	28ff      	cmp	r0, #255	; 0xff
    1fec:	d009      	beq.n	2002 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2>
    1fee:	42b2      	cmp	r2, r6
    1ff0:	d001      	beq.n	1ff6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
    1ff2:	2000      	movs	r0, #0
    1ff4:	70e0      	strb	r0, [r4, #3]
    1ff6:	4629      	mov	r1, r5
    1ff8:	4620      	mov	r0, r4
    1ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1ffe:	f00c bb98 	b.w	e732 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    2002:	2000      	movs	r0, #0
    2004:	bd70      	pop	{r4, r5, r6, pc}
    2006:	0000      	.short	0x0000
    2008:	20000068 	.word	0x20000068

0000200c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    200c:	4a08      	ldr	r2, [pc, #32]	; (2030 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
    200e:	b510      	push	{r4, lr}
    2010:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    2014:	4601      	mov	r1, r0
    2016:	4620      	mov	r0, r4
    2018:	f00c fb91 	bl	e73e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    201c:	4601      	mov	r1, r0
    201e:	28ff      	cmp	r0, #255	; 0xff
    2020:	d004      	beq.n	202c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
    2022:	4620      	mov	r0, r4
    2024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2028:	f00c bb9d 	b.w	e766 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    202c:	2000      	movs	r0, #0
    202e:	bd10      	pop	{r4, pc}
    2030:	20000068 	.word	0x20000068

00002034 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    2034:	b5f0      	push	{r4, r5, r6, r7, lr}
    2036:	b089      	sub	sp, #36	; 0x24
    2038:	0004      	movs	r4, r0
    203a:	460e      	mov	r6, r1
    203c:	9406      	str	r4, [sp, #24]
    203e:	d007      	beq.n	2050 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
    2040:	2500      	movs	r5, #0
    2042:	0760      	lsls	r0, r4, #29
    2044:	d006      	beq.n	2054 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    2046:	f240 1119 	movw	r1, #281	; 0x119
    204a:	2017      	movs	r0, #23
    204c:	f7ff fcb0 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2050:	2501      	movs	r5, #1
    2052:	e7f6      	b.n	2042 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    2054:	4814      	ldr	r0, [pc, #80]	; (20a8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    2056:	2200      	movs	r2, #0
    2058:	4f14      	ldr	r7, [pc, #80]	; (20ac <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    205a:	6002      	str	r2, [r0, #0]
    205c:	6042      	str	r2, [r0, #4]
    205e:	e9d7 1000 	ldrd	r1, r0, [r7]
    2062:	f896 c000 	ldrb.w	ip, [r6]
    2066:	68bb      	ldr	r3, [r7, #8]
    2068:	f36c 601f 	bfi	r0, ip, #24, #8
    206c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    2070:	e9cd 5100 	strd	r5, r1, [sp]
    2074:	ab06      	add	r3, sp, #24
    2076:	a901      	add	r1, sp, #4
    2078:	4610      	mov	r0, r2
    207a:	f7ff ff1d 	bl	1eb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    207e:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
    2082:	7873      	ldrb	r3, [r6, #1]
    2084:	697a      	ldr	r2, [r7, #20]
    2086:	f363 601f 	bfi	r0, r3, #24, #8
    208a:	e9cd 0202 	strd	r0, r2, [sp, #8]
    208e:	e9cd 5100 	strd	r5, r1, [sp]
    2092:	ab06      	add	r3, sp, #24
    2094:	2200      	movs	r2, #0
    2096:	a901      	add	r1, sp, #4
    2098:	2001      	movs	r0, #1
    209a:	f7ff ff0d 	bl	1eb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    209e:	9806      	ldr	r0, [sp, #24]
    20a0:	b009      	add	sp, #36	; 0x24
    20a2:	1b00      	subs	r0, r0, r4
    20a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20a6:	0000      	.short	0x0000
    20a8:	20000068 	.word	0x20000068
    20ac:	0000219c 	.word	0x0000219c

000020b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    20b0:	b510      	push	{r4, lr}
    20b2:	4604      	mov	r4, r0
    20b4:	7980      	ldrb	r0, [r0, #6]
    20b6:	490e      	ldr	r1, [pc, #56]	; (20f0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    20b8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    20bc:	b1a8      	cbz	r0, 20ea <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    20be:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    20c2:	79e1      	ldrb	r1, [r4, #7]
    20c4:	7882      	ldrb	r2, [r0, #2]
    20c6:	4291      	cmp	r1, r2
    20c8:	d20f      	bcs.n	20ea <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    20ca:	1c4a      	adds	r2, r1, #1
    20cc:	71e2      	strb	r2, [r4, #7]
    20ce:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    20d2:	8952      	ldrh	r2, [r2, #10]
    20d4:	429a      	cmp	r2, r3
    20d6:	d0f4      	beq.n	20c2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    20d8:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    20dc:	8952      	ldrh	r2, [r2, #10]
    20de:	80a2      	strh	r2, [r4, #4]
    20e0:	f00c fb41 	bl	e766 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    20e4:	6020      	str	r0, [r4, #0]
    20e6:	2000      	movs	r0, #0
    20e8:	bd10      	pop	{r4, pc}
    20ea:	2005      	movs	r0, #5
    20ec:	bd10      	pop	{r4, pc}
    20ee:	0000      	.short	0x0000
    20f0:	20000068 	.word	0x20000068

000020f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    20f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20f8:	4607      	mov	r7, r0
    20fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    20fe:	8038      	strh	r0, [r7, #0]
    2100:	4812      	ldr	r0, [pc, #72]	; (214c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
    2102:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    2106:	b1ec      	cbz	r4, 2144 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    2108:	78a5      	ldrb	r5, [r4, #2]
    210a:	7920      	ldrb	r0, [r4, #4]
    210c:	fbb0 f1f5 	udiv	r1, r0, r5
    2110:	fb05 0611 	mls	r6, r5, r1, r0
    2114:	4632      	mov	r2, r6
    2116:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    211a:	4620      	mov	r0, r4
    211c:	f7ff ff2a 	bl	1f74 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    2120:	4602      	mov	r2, r0
    2122:	28ff      	cmp	r0, #255	; 0xff
    2124:	d00e      	beq.n	2144 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    2126:	1ba8      	subs	r0, r5, r6
    2128:	4410      	add	r0, r2
    212a:	fbb0 f1f5 	udiv	r1, r0, r5
    212e:	fb05 0011 	mls	r0, r5, r1, r0
    2132:	7921      	ldrb	r1, [r4, #4]
    2134:	4408      	add	r0, r1
    2136:	b281      	uxth	r1, r0
    2138:	8039      	strh	r1, [r7, #0]
    213a:	4620      	mov	r0, r4
    213c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2140:	f00c baf7 	b.w	e732 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    2144:	2000      	movs	r0, #0
    2146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    214a:	0000      	.short	0x0000
    214c:	20000068 	.word	0x20000068

00002150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    2150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2154:	4606      	mov	r6, r0
    2156:	4810      	ldr	r0, [pc, #64]	; (2198 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    2158:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    215c:	4631      	mov	r1, r6
    215e:	4628      	mov	r0, r5
    2160:	f00c faed 	bl	e73e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    2164:	4604      	mov	r4, r0
    2166:	28ff      	cmp	r0, #255	; 0xff
    2168:	d012      	beq.n	2190 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    216a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    216e:	4621      	mov	r1, r4
    2170:	ea4f 4730 	mov.w	r7, r0, ror #16
    2174:	4628      	mov	r0, r5
    2176:	f00c faf6 	bl	e766 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    217a:	4601      	mov	r1, r0
    217c:	4630      	mov	r0, r6
    217e:	47b8      	blx	r7
    2180:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    2184:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    2188:	8148      	strh	r0, [r1, #10]
    218a:	2000      	movs	r0, #0
    218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2190:	f243 0002 	movw	r0, #12290	; 0x3002
    2194:	e7fa      	b.n	218c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    2196:	0000      	.short	0x0000
    2198:	20000068 	.word	0x20000068
    219c:	00010577 	.word	0x00010577
    21a0:	000802f8 	.word	0x000802f8
    21a4:	00000000 	.word	0x00000000
    21a8:	0000fb4d 	.word	0x0000fb4d
    21ac:	00080118 	.word	0x00080118
    21b0:	00000000 	.word	0x00000000

000021b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    21b4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21b8:	4c24      	ldr	r4, [pc, #144]	; (224c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    21ba:	4606      	mov	r6, r0
    21bc:	b081      	sub	sp, #4
    21be:	6820      	ldr	r0, [r4, #0]
    21c0:	469a      	mov	sl, r3
    21c2:	4693      	mov	fp, r2
    21c4:	b158      	cbz	r0, 21de <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    21c6:	7a01      	ldrb	r1, [r0, #8]
    21c8:	42b1      	cmp	r1, r6
    21ca:	d903      	bls.n	21d4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    21cc:	6840      	ldr	r0, [r0, #4]
    21ce:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    21d2:	b140      	cbz	r0, 21e6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    21d4:	f243 0002 	movw	r0, #12290	; 0x3002
    21d8:	b005      	add	sp, #20
    21da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21de:	21a5      	movs	r1, #165	; 0xa5
    21e0:	2018      	movs	r0, #24
    21e2:	f7ff fbe5 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    21e6:	4619      	mov	r1, r3
    21e8:	9802      	ldr	r0, [sp, #8]
    21ea:	f00c faf7 	bl	e7dc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    21ee:	4680      	mov	r8, r0
    21f0:	4658      	mov	r0, fp
    21f2:	990e      	ldr	r1, [sp, #56]	; 0x38
    21f4:	f00c fae8 	bl	e7c8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    21f8:	4605      	mov	r5, r0
    21fa:	eb08 0005 	add.w	r0, r8, r5
    21fe:	1d00      	adds	r0, r0, #4
    2200:	b287      	uxth	r7, r0
    2202:	6820      	ldr	r0, [r4, #0]
    2204:	46a1      	mov	r9, r4
    2206:	4639      	mov	r1, r7
    2208:	6800      	ldr	r0, [r0, #0]
    220a:	f00c fa2d 	bl	e668 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    220e:	0004      	movs	r4, r0
    2210:	d01a      	beq.n	2248 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    2212:	8067      	strh	r7, [r4, #2]
    2214:	8025      	strh	r5, [r4, #0]
    2216:	4629      	mov	r1, r5
    2218:	1d20      	adds	r0, r4, #4
    221a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    221c:	4607      	mov	r7, r0
    221e:	465a      	mov	r2, fp
    2220:	2309      	movs	r3, #9
    2222:	9500      	str	r5, [sp, #0]
    2224:	f00c f99a 	bl	e55c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    2228:	8820      	ldrh	r0, [r4, #0]
    222a:	4641      	mov	r1, r8
    222c:	4438      	add	r0, r7
    222e:	230a      	movs	r3, #10
    2230:	9a02      	ldr	r2, [sp, #8]
    2232:	f8cd a000 	str.w	sl, [sp]
    2236:	f00c f991 	bl	e55c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    223a:	f8d9 0000 	ldr.w	r0, [r9]
    223e:	6840      	ldr	r0, [r0, #4]
    2240:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    2244:	2000      	movs	r0, #0
    2246:	e7c7      	b.n	21d8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    2248:	2004      	movs	r0, #4
    224a:	e7c5      	b.n	21d8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    224c:	20000070 	.word	0x20000070

00002250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    2250:	b570      	push	{r4, r5, r6, lr}
    2252:	4c14      	ldr	r4, [pc, #80]	; (22a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    2254:	6823      	ldr	r3, [r4, #0]
    2256:	b18b      	cbz	r3, 227c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    2258:	7a19      	ldrb	r1, [r3, #8]
    225a:	4281      	cmp	r1, r0
    225c:	d912      	bls.n	2284 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    225e:	685a      	ldr	r2, [r3, #4]
    2260:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    2264:	b171      	cbz	r1, 2284 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    2266:	2500      	movs	r5, #0
    2268:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    226c:	884a      	ldrh	r2, [r1, #2]
    226e:	6818      	ldr	r0, [r3, #0]
    2270:	f00c fa52 	bl	e718 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    2274:	6821      	ldr	r1, [r4, #0]
    2276:	2000      	movs	r0, #0
    2278:	7a0a      	ldrb	r2, [r1, #8]
    227a:	e00c      	b.n	2296 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    227c:	21c6      	movs	r1, #198	; 0xc6
    227e:	2018      	movs	r0, #24
    2280:	f7ff fb96 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2284:	f243 0002 	movw	r0, #12290	; 0x3002
    2288:	bd70      	pop	{r4, r5, r6, pc}
    228a:	684b      	ldr	r3, [r1, #4]
    228c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2290:	b933      	cbnz	r3, 22a0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    2292:	1c40      	adds	r0, r0, #1
    2294:	b2c0      	uxtb	r0, r0
    2296:	4282      	cmp	r2, r0
    2298:	d8f7      	bhi.n	228a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    229a:	6808      	ldr	r0, [r1, #0]
    229c:	f00c fa31 	bl	e702 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    22a0:	2000      	movs	r0, #0
    22a2:	bd70      	pop	{r4, r5, r6, pc}
    22a4:	20000070 	.word	0x20000070

000022a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    22a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22ac:	460d      	mov	r5, r1
    22ae:	0004      	movs	r4, r0
    22b0:	4690      	mov	r8, r2
    22b2:	f04f 0600 	mov.w	r6, #0
    22b6:	d006      	beq.n	22c6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    22b8:	2700      	movs	r7, #0
    22ba:	07a0      	lsls	r0, r4, #30
    22bc:	d005      	beq.n	22ca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    22be:	2186      	movs	r1, #134	; 0x86
    22c0:	2018      	movs	r0, #24
    22c2:	f7ff fb75 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    22c6:	2701      	movs	r7, #1
    22c8:	e7f7      	b.n	22ba <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    22ca:	b1cd      	cbz	r5, 2300 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    22cc:	4611      	mov	r1, r2
    22ce:	2000      	movs	r0, #0
    22d0:	f00c f9fb 	bl	e6ca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    22d4:	300c      	adds	r0, #12
    22d6:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    22da:	b98f      	cbnz	r7, 2300 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    22dc:	4f0a      	ldr	r7, [pc, #40]	; (2308 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    22de:	f104 000c 	add.w	r0, r4, #12
    22e2:	00aa      	lsls	r2, r5, #2
    22e4:	603c      	str	r4, [r7, #0]
    22e6:	7225      	strb	r5, [r4, #8]
    22e8:	6060      	str	r0, [r4, #4]
    22ea:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    22ee:	6020      	str	r0, [r4, #0]
    22f0:	2100      	movs	r1, #0
    22f2:	6860      	ldr	r0, [r4, #4]
    22f4:	f00f fe41 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    22f8:	4641      	mov	r1, r8
    22fa:	6838      	ldr	r0, [r7, #0]
    22fc:	f00c f9e5 	bl	e6ca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    2300:	4630      	mov	r0, r6
    2302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2306:	0000      	.short	0x0000
    2308:	20000070 	.word	0x20000070

0000230c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    230c:	b570      	push	{r4, r5, r6, lr}
    230e:	4d08      	ldr	r5, [pc, #32]	; (2330 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    2310:	6828      	ldr	r0, [r5, #0]
    2312:	2800      	cmp	r0, #0
    2314:	d00a      	beq.n	232c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    2316:	2400      	movs	r4, #0
    2318:	e004      	b.n	2324 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    231a:	4620      	mov	r0, r4
    231c:	f7ff ff98 	bl	2250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    2320:	1c64      	adds	r4, r4, #1
    2322:	b2e4      	uxtb	r4, r4
    2324:	6828      	ldr	r0, [r5, #0]
    2326:	7a00      	ldrb	r0, [r0, #8]
    2328:	42a0      	cmp	r0, r4
    232a:	d8f6      	bhi.n	231a <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    232c:	bd70      	pop	{r4, r5, r6, pc}
    232e:	0000      	.short	0x0000
    2330:	20000070 	.word	0x20000070

00002334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    2334:	4909      	ldr	r1, [pc, #36]	; (235c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    2336:	b510      	push	{r4, lr}
    2338:	4602      	mov	r2, r0
    233a:	6809      	ldr	r1, [r1, #0]
    233c:	2000      	movs	r0, #0
    233e:	b149      	cbz	r1, 2354 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    2340:	7a0b      	ldrb	r3, [r1, #8]
    2342:	4293      	cmp	r3, r2
    2344:	d905      	bls.n	2352 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    2346:	6849      	ldr	r1, [r1, #4]
    2348:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    234c:	2900      	cmp	r1, #0
    234e:	d000      	beq.n	2352 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    2350:	1d08      	adds	r0, r1, #4
    2352:	bd10      	pop	{r4, pc}
    2354:	21ec      	movs	r1, #236	; 0xec
    2356:	2018      	movs	r0, #24
    2358:	f7ff fb2a 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    235c:	20000070 	.word	0x20000070

00002360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    2360:	490a      	ldr	r1, [pc, #40]	; (238c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    2362:	b510      	push	{r4, lr}
    2364:	4602      	mov	r2, r0
    2366:	6809      	ldr	r1, [r1, #0]
    2368:	2000      	movs	r0, #0
    236a:	b159      	cbz	r1, 2384 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    236c:	7a0b      	ldrb	r3, [r1, #8]
    236e:	4293      	cmp	r3, r2
    2370:	d907      	bls.n	2382 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    2372:	6849      	ldr	r1, [r1, #4]
    2374:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    2378:	2900      	cmp	r1, #0
    237a:	d002      	beq.n	2382 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    237c:	f831 0b04 	ldrh.w	r0, [r1], #4
    2380:	4408      	add	r0, r1
    2382:	bd10      	pop	{r4, pc}
    2384:	21fa      	movs	r1, #250	; 0xfa
    2386:	2018      	movs	r0, #24
    2388:	f7ff fb12 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    238c:	20000070 	.word	0x20000070
    2390:	b570      	push	{r4, r5, r6, lr}
    2392:	4b1e      	ldr	r3, [pc, #120]	; (240c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    2394:	6845      	ldr	r5, [r0, #4]
    2396:	4604      	mov	r4, r0
    2398:	2200      	movs	r2, #0
    239a:	b1a1      	cbz	r1, 23c6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    239c:	2001      	movs	r0, #1
    239e:	7060      	strb	r0, [r4, #1]
    23a0:	8858      	ldrh	r0, [r3, #2]
    23a2:	0881      	lsrs	r1, r0, #2
    23a4:	f05f 0000 	movs.w	r0, #0
    23a8:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    23ac:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    23b0:	831a      	strh	r2, [r3, #24]
    23b2:	8419      	strh	r1, [r3, #32]
    23b4:	fb00 5301 	mla	r3, r0, r1, r5
    23b8:	6073      	str	r3, [r6, #4]
    23ba:	1823      	adds	r3, r4, r0
    23bc:	1c40      	adds	r0, r0, #1
    23be:	751a      	strb	r2, [r3, #20]
    23c0:	2804      	cmp	r0, #4
    23c2:	d3f1      	bcc.n	23a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    23c4:	bd70      	pop	{r4, r5, r6, pc}
    23c6:	7062      	strb	r2, [r4, #1]
    23c8:	f05f 0000 	movs.w	r0, #0
    23cc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    23d0:	830a      	strh	r2, [r1, #24]
    23d2:	840a      	strh	r2, [r1, #32]
    23d4:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    23d8:	604a      	str	r2, [r1, #4]
    23da:	1821      	adds	r1, r4, r0
    23dc:	1c40      	adds	r0, r0, #1
    23de:	750a      	strb	r2, [r1, #20]
    23e0:	2804      	cmp	r0, #4
    23e2:	d3f3      	bcc.n	23cc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    23e4:	8858      	ldrh	r0, [r3, #2]
    23e6:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    23ea:	d201      	bcs.n	23f0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    23ec:	0846      	lsrs	r6, r0, #1
    23ee:	e000      	b.n	23f2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    23f0:	26ff      	movs	r6, #255	; 0xff
    23f2:	f00c fa67 	bl	e8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    23f6:	6065      	str	r5, [r4, #4]
    23f8:	8420      	strh	r0, [r4, #32]
    23fa:	1829      	adds	r1, r5, r0
    23fc:	60a1      	str	r1, [r4, #8]
    23fe:	8466      	strh	r6, [r4, #34]	; 0x22
    2400:	60e5      	str	r5, [r4, #12]
    2402:	84a0      	strh	r0, [r4, #36]	; 0x24
    2404:	6121      	str	r1, [r4, #16]
    2406:	84e6      	strh	r6, [r4, #38]	; 0x26
    2408:	bd70      	pop	{r4, r5, r6, pc}
    240a:	0000      	.short	0x0000
    240c:	20000074 	.word	0x20000074

00002410 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    2410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2414:	b158      	cbz	r0, 242e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    2416:	2500      	movs	r5, #0
    2418:	4411      	add	r1, r2
    241a:	4e24      	ldr	r6, [pc, #144]	; (24ac <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    241c:	b2cc      	uxtb	r4, r1
    241e:	2700      	movs	r7, #0
    2420:	7034      	strb	r4, [r6, #0]
    2422:	0781      	lsls	r1, r0, #30
    2424:	d005      	beq.n	2432 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    2426:	214e      	movs	r1, #78	; 0x4e
    2428:	2009      	movs	r0, #9
    242a:	f7ff fac1 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    242e:	2501      	movs	r5, #1
    2430:	e7f2      	b.n	2418 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    2432:	2b1f      	cmp	r3, #31
    2434:	d804      	bhi.n	2440 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    2436:	f64f 71ff 	movw	r1, #65535	; 0xffff
    243a:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    243e:	e009      	b.n	2454 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    2440:	0059      	lsls	r1, r3, #1
    2442:	2bff      	cmp	r3, #255	; 0xff
    2444:	d90c      	bls.n	2460 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    2446:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    244a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    244e:	d200      	bcs.n	2452 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    2450:	4611      	mov	r1, r2
    2452:	b289      	uxth	r1, r1
    2454:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    2458:	1cc9      	adds	r1, r1, #3
    245a:	4011      	ands	r1, r2
    245c:	b135      	cbz	r5, 246c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    245e:	e007      	b.n	2470 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    2460:	227c      	movs	r2, #124	; 0x7c
    2462:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    2466:	d3f4      	bcc.n	2452 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    2468:	217c      	movs	r1, #124	; 0x7c
    246a:	e7f2      	b.n	2452 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    246c:	6070      	str	r0, [r6, #4]
    246e:	8071      	strh	r1, [r6, #2]
    2470:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    2474:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    2478:	2200      	movs	r2, #0
    247a:	6876      	ldr	r6, [r6, #4]
    247c:	f04f 0c01 	mov.w	ip, #1
    2480:	e00d      	b.n	249e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    2482:	b94d      	cbnz	r5, 2498 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    2484:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    2488:	eb00 0e03 	add.w	lr, r0, r3
    248c:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    2490:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    2494:	f8c7 e004 	str.w	lr, [r7, #4]
    2498:	1c52      	adds	r2, r2, #1
    249a:	440b      	add	r3, r1
    249c:	b2d2      	uxtb	r2, r2
    249e:	42a2      	cmp	r2, r4
    24a0:	d3ef      	bcc.n	2482 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    24a2:	1ddb      	adds	r3, r3, #7
    24a4:	f023 0007 	bic.w	r0, r3, #7
    24a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24ac:	20000074 	.word	0x20000074

000024b0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    24b0:	b570      	push	{r4, r5, r6, lr}
    24b2:	4a10      	ldr	r2, [pc, #64]	; (24f4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    24b4:	2000      	movs	r0, #0
    24b6:	6851      	ldr	r1, [r2, #4]
    24b8:	7812      	ldrb	r2, [r2, #0]
    24ba:	e014      	b.n	24e6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    24bc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    24c0:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    24c4:	b16b      	cbz	r3, 24e2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    24c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    24ca:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    24ce:	d00c      	beq.n	24ea <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    24d0:	2500      	movs	r5, #0
    24d2:	70a5      	strb	r5, [r4, #2]
    24d4:	2101      	movs	r1, #1
    24d6:	4620      	mov	r0, r4
    24d8:	f7ff ff5a 	bl	2390 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    24dc:	7025      	strb	r5, [r4, #0]
    24de:	4620      	mov	r0, r4
    24e0:	bd70      	pop	{r4, r5, r6, pc}
    24e2:	1c40      	adds	r0, r0, #1
    24e4:	b2c0      	uxtb	r0, r0
    24e6:	4290      	cmp	r0, r2
    24e8:	d3e8      	bcc.n	24bc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    24ea:	21a9      	movs	r1, #169	; 0xa9
    24ec:	2009      	movs	r0, #9
    24ee:	f7ff fa5f 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    24f2:	0000      	.short	0x0000
    24f4:	20000074 	.word	0x20000074

000024f8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    24f8:	4804      	ldr	r0, [pc, #16]	; (250c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    24fa:	b510      	push	{r4, lr}
    24fc:	8840      	ldrh	r0, [r0, #2]
    24fe:	0884      	lsrs	r4, r0, #2
    2500:	f00c f9e0 	bl	e8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    2504:	4284      	cmp	r4, r0
    2506:	d300      	bcc.n	250a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    2508:	4620      	mov	r0, r4
    250a:	bd10      	pop	{r4, pc}
    250c:	20000074 	.word	0x20000074
    2510:	b530      	push	{r4, r5, lr}
    2512:	490d      	ldr	r1, [pc, #52]	; (2548 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    2514:	2001      	movs	r0, #1
    2516:	6048      	str	r0, [r1, #4]
    2518:	1e82      	subs	r2, r0, #2
    251a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    251e:	490b      	ldr	r1, [pc, #44]	; (254c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    2520:	6088      	str	r0, [r1, #8]
    2522:	2300      	movs	r3, #0
    2524:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    2528:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    252c:	4c08      	ldr	r4, [pc, #32]	; (2550 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    252e:	6023      	str	r3, [r4, #0]
    2530:	1d25      	adds	r5, r4, #4
    2532:	6028      	str	r0, [r5, #0]
    2534:	6088      	str	r0, [r1, #8]
    2536:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    253a:	6023      	str	r3, [r4, #0]
    253c:	6028      	str	r0, [r5, #0]
    253e:	4906      	ldr	r1, [pc, #24]	; (2558 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    2540:	4804      	ldr	r0, [pc, #16]	; (2554 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    2542:	6008      	str	r0, [r1, #0]
    2544:	bd30      	pop	{r4, r5, pc}
    2546:	0000      	.short	0x0000
    2548:	4000e000 	.word	0x4000e000
    254c:	4000f000 	.word	0x4000f000
    2550:	4000f500 	.word	0x4000f500
    2554:	3ff60000 	.word	0x3ff60000
    2558:	4001f508 	.word	0x4001f508

0000255c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    255c:	b510      	push	{r4, lr}
    255e:	f7ff ffd7 	bl	2510 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    2562:	f00c fa86 	bl	ea72 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    2566:	4903      	ldr	r1, [pc, #12]	; (2574 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    2568:	4801      	ldr	r0, [pc, #4]	; (2570 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    256a:	6008      	str	r0, [r1, #0]
    256c:	bd10      	pop	{r4, pc}
    256e:	0000      	.short	0x0000
    2570:	3ff60000 	.word	0x3ff60000
    2574:	4001f508 	.word	0x4001f508

00002578 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    2578:	b510      	push	{r4, lr}
    257a:	f7ff ffc9 	bl	2510 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    257e:	f00c fa78 	bl	ea72 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    2582:	f000 f887 	bl	2694 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    2586:	4905      	ldr	r1, [pc, #20]	; (259c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    2588:	4803      	ldr	r0, [pc, #12]	; (2598 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    258a:	6008      	str	r0, [r1, #0]
    258c:	f000 f8b8 	bl	2700 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    2590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2594:	f000 b8dc 	b.w	2750 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    2598:	3ff60000 	.word	0x3ff60000
    259c:	4001f508 	.word	0x4001f508
    25a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25a4:	4682      	mov	sl, r0
    25a6:	4838      	ldr	r0, [pc, #224]	; (2688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    25a8:	f00f fb7c 	bl	11ca4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    25ac:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 2688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    25b0:	b128      	cbz	r0, 25be <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    25b2:	2601      	movs	r6, #1
    25b4:	f10b 0001 	add.w	r0, fp, #1
    25b8:	21ff      	movs	r1, #255	; 0xff
    25ba:	7001      	strb	r1, [r0, #0]
    25bc:	e000      	b.n	25c0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    25be:	2600      	movs	r6, #0
    25c0:	f44f 7580 	mov.w	r5, #256	; 0x100
    25c4:	4c31      	ldr	r4, [pc, #196]	; (268c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    25c6:	f04f 0800 	mov.w	r8, #0
    25ca:	1d2f      	adds	r7, r5, #4
    25cc:	2101      	movs	r1, #1
    25ce:	6061      	str	r1, [r4, #4]
    25d0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    25d4:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    25d8:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    25dc:	6021      	str	r1, [r4, #0]
    25de:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 2690 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    25e2:	e01c      	b.n	261e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    25e4:	f8d9 0000 	ldr.w	r0, [r9]
    25e8:	06c0      	lsls	r0, r0, #27
    25ea:	d518      	bpl.n	261e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    25ec:	200e      	movs	r0, #14
    25ee:	f00c fa4f 	bl	ea90 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    25f2:	f3ef 8010 	mrs	r0, PRIMASK
    25f6:	9000      	str	r0, [sp, #0]
    25f8:	b672      	cpsid	i
    25fa:	2103      	movs	r1, #3
    25fc:	4620      	mov	r0, r4
    25fe:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    2602:	4629      	mov	r1, r5
    2604:	f00c fa51 	bl	eaaa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    2608:	b930      	cbnz	r0, 2618 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    260a:	4639      	mov	r1, r7
    260c:	4620      	mov	r0, r4
    260e:	f00c fa4c 	bl	eaaa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    2612:	b908      	cbnz	r0, 2618 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    2614:	f00f fbdd 	bl	11dd2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2618:	9800      	ldr	r0, [sp, #0]
    261a:	b900      	cbnz	r0, 261e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    261c:	b662      	cpsie	i
    261e:	4629      	mov	r1, r5
    2620:	4620      	mov	r0, r4
    2622:	f00c fa42 	bl	eaaa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    2626:	b928      	cbnz	r0, 2634 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    2628:	4639      	mov	r1, r7
    262a:	4620      	mov	r0, r4
    262c:	f00c fa3d 	bl	eaaa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    2630:	2800      	cmp	r0, #0
    2632:	d0d7      	beq.n	25e4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    2634:	4639      	mov	r1, r7
    2636:	4620      	mov	r0, r4
    2638:	f00c fa37 	bl	eaaa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    263c:	2800      	cmp	r0, #0
    263e:	d1c5      	bne.n	25cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    2640:	bb06      	cbnz	r6, 2684 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    2642:	f89b 1001 	ldrb.w	r1, [fp, #1]
    2646:	f88d 1000 	strb.w	r1, [sp]
    264a:	9900      	ldr	r1, [sp, #0]
    264c:	9100      	str	r1, [sp, #0]
    264e:	f89d 1000 	ldrb.w	r1, [sp]
    2652:	b109      	cbz	r1, 2658 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    2654:	2501      	movs	r5, #1
    2656:	e000      	b.n	265a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    2658:	2500      	movs	r5, #0
    265a:	f10b 0001 	add.w	r0, fp, #1
    265e:	f880 8000 	strb.w	r8, [r0]
    2662:	2003      	movs	r0, #3
    2664:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2668:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    266c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    2670:	200e      	movs	r0, #14
    2672:	f00c fa0d 	bl	ea90 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    2676:	4804      	ldr	r0, [pc, #16]	; (2688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    2678:	f00f fb2b 	bl	11cd2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    267c:	b115      	cbz	r5, 2684 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    267e:	2011      	movs	r0, #17
    2680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2684:	2000      	movs	r0, #0
    2686:	e7fb      	b.n	2680 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    2688:	20000364 	.word	0x20000364
    268c:	4000e000 	.word	0x4000e000
    2690:	e000ed10 	.word	0xe000ed10

00002694 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    2694:	b510      	push	{r4, lr}
    2696:	4806      	ldr	r0, [pc, #24]	; (26b0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    2698:	f00f fb17 	bl	11cca <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    269c:	b118      	cbz	r0, 26a6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    269e:	2130      	movs	r1, #48	; 0x30
    26a0:	201d      	movs	r0, #29
    26a2:	f7ff f985 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    26a6:	4802      	ldr	r0, [pc, #8]	; (26b0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    26a8:	2100      	movs	r1, #0
    26aa:	7041      	strb	r1, [r0, #1]
    26ac:	bd10      	pop	{r4, pc}
    26ae:	0000      	.short	0x0000
    26b0:	20000364 	.word	0x20000364

000026b4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    26b4:	b570      	push	{r4, r5, r6, lr}
    26b6:	4911      	ldr	r1, [pc, #68]	; (26fc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    26b8:	680a      	ldr	r2, [r1, #0]
    26ba:	b1ea      	cbz	r2, 26f8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    26bc:	2300      	movs	r3, #0
    26be:	461d      	mov	r5, r3
    26c0:	2401      	movs	r4, #1
    26c2:	684a      	ldr	r2, [r1, #4]
    26c4:	1c52      	adds	r2, r2, #1
    26c6:	604a      	str	r2, [r1, #4]
    26c8:	2a09      	cmp	r2, #9
    26ca:	d300      	bcc.n	26ce <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    26cc:	604d      	str	r5, [r1, #4]
    26ce:	790e      	ldrb	r6, [r1, #4]
    26d0:	fa04 f206 	lsl.w	r2, r4, r6
    26d4:	680e      	ldr	r6, [r1, #0]
    26d6:	4216      	tst	r6, r2
    26d8:	d00b      	beq.n	26f2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    26da:	f3ef 8310 	mrs	r3, PRIMASK
    26de:	b672      	cpsid	i
    26e0:	680c      	ldr	r4, [r1, #0]
    26e2:	4394      	bics	r4, r2
    26e4:	600c      	str	r4, [r1, #0]
    26e6:	b903      	cbnz	r3, 26ea <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    26e8:	b662      	cpsie	i
    26ea:	6849      	ldr	r1, [r1, #4]
    26ec:	6001      	str	r1, [r0, #0]
    26ee:	2000      	movs	r0, #0
    26f0:	bd70      	pop	{r4, r5, r6, pc}
    26f2:	1c5b      	adds	r3, r3, #1
    26f4:	2b09      	cmp	r3, #9
    26f6:	d3e4      	bcc.n	26c2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    26f8:	2005      	movs	r0, #5
    26fa:	bd70      	pop	{r4, r5, r6, pc}
    26fc:	2000007c 	.word	0x2000007c

00002700 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    2700:	4802      	ldr	r0, [pc, #8]	; (270c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    2702:	2100      	movs	r1, #0
    2704:	6001      	str	r1, [r0, #0]
    2706:	6041      	str	r1, [r0, #4]
    2708:	4770      	bx	lr
    270a:	0000      	.short	0x0000
    270c:	2000007c 	.word	0x2000007c

00002710 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    2710:	b510      	push	{r4, lr}
    2712:	4c04      	ldr	r4, [pc, #16]	; (2724 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    2714:	7820      	ldrb	r0, [r4, #0]
    2716:	28ff      	cmp	r0, #255	; 0xff
    2718:	d003      	beq.n	2722 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    271a:	f00a ff9b 	bl	d654 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    271e:	20ff      	movs	r0, #255	; 0xff
    2720:	7020      	strb	r0, [r4, #0]
    2722:	bd10      	pop	{r4, pc}
    2724:	20000000 	.word	0x20000000

00002728 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    2728:	b510      	push	{r4, lr}
    272a:	4c08      	ldr	r4, [pc, #32]	; (274c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    272c:	7861      	ldrb	r1, [r4, #1]
    272e:	b109      	cbz	r1, 2734 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    2730:	200f      	movs	r0, #15
    2732:	bd10      	pop	{r4, pc}
    2734:	f00a ff54 	bl	d5e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2738:	7020      	strb	r0, [r4, #0]
    273a:	28ff      	cmp	r0, #255	; 0xff
    273c:	d001      	beq.n	2742 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    273e:	2000      	movs	r0, #0
    2740:	bd10      	pop	{r4, pc}
    2742:	2173      	movs	r1, #115	; 0x73
    2744:	201f      	movs	r0, #31
    2746:	f7ff f933 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    274a:	0000      	.short	0x0000
    274c:	20000000 	.word	0x20000000

00002750 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    2750:	4901      	ldr	r1, [pc, #4]	; (2758 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    2752:	2000      	movs	r0, #0
    2754:	7048      	strb	r0, [r1, #1]
    2756:	4770      	bx	lr
    2758:	20000000 	.word	0x20000000

0000275c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    275c:	4806      	ldr	r0, [pc, #24]	; (2778 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    275e:	4a07      	ldr	r2, [pc, #28]	; (277c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    2760:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    2762:	8852      	ldrh	r2, [r2, #2]
    2764:	4291      	cmp	r1, r2
    2766:	d104      	bne.n	2772 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    2768:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    276c:	b108      	cbz	r0, 2772 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    276e:	2000      	movs	r0, #0
    2770:	4770      	bx	lr
    2772:	2001      	movs	r0, #1
    2774:	4770      	bx	lr
    2776:	0000      	.short	0x0000
    2778:	20001740 	.word	0x20001740
    277c:	20000358 	.word	0x20000358

00002780 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    2780:	4901      	ldr	r1, [pc, #4]	; (2788 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    2782:	8048      	strh	r0, [r1, #2]
    2784:	4770      	bx	lr
    2786:	0000      	.short	0x0000
    2788:	20000358 	.word	0x20000358

0000278c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    278c:	4808      	ldr	r0, [pc, #32]	; (27b0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    278e:	4a09      	ldr	r2, [pc, #36]	; (27b4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    2790:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    2792:	8852      	ldrh	r2, [r2, #2]
    2794:	4291      	cmp	r1, r2
    2796:	d109      	bne.n	27ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    2798:	f64f 71ff 	movw	r1, #65535	; 0xffff
    279c:	8481      	strh	r1, [r0, #36]	; 0x24
    279e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    27a2:	b119      	cbz	r1, 27ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    27a4:	2100      	movs	r1, #0
    27a6:	7001      	strb	r1, [r0, #0]
    27a8:	2001      	movs	r0, #1
    27aa:	4770      	bx	lr
    27ac:	2000      	movs	r0, #0
    27ae:	4770      	bx	lr
    27b0:	20001740 	.word	0x20001740
    27b4:	20000358 	.word	0x20000358

000027b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    27b8:	4807      	ldr	r0, [pc, #28]	; (27d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    27ba:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    27be:	2901      	cmp	r1, #1
    27c0:	d007      	beq.n	27d2 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    27c2:	2101      	movs	r1, #1
    27c4:	7001      	strb	r1, [r0, #0]
    27c6:	4805      	ldr	r0, [pc, #20]	; (27dc <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    27c8:	4903      	ldr	r1, [pc, #12]	; (27d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    27ca:	8800      	ldrh	r0, [r0, #0]
    27cc:	8488      	strh	r0, [r1, #36]	; 0x24
    27ce:	2001      	movs	r0, #1
    27d0:	4770      	bx	lr
    27d2:	2000      	movs	r0, #0
    27d4:	4770      	bx	lr
    27d6:	0000      	.short	0x0000
    27d8:	20001740 	.word	0x20001740
    27dc:	20000358 	.word	0x20000358

000027e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    27e0:	4906      	ldr	r1, [pc, #24]	; (27fc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    27e2:	4b07      	ldr	r3, [pc, #28]	; (2800 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    27e4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    27e6:	885b      	ldrh	r3, [r3, #2]
    27e8:	429a      	cmp	r2, r3
    27ea:	d105      	bne.n	27f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    27ec:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    27f0:	b112      	cbz	r2, 27f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    27f2:	6001      	str	r1, [r0, #0]
    27f4:	2001      	movs	r0, #1
    27f6:	4770      	bx	lr
    27f8:	2000      	movs	r0, #0
    27fa:	4770      	bx	lr
    27fc:	20001740 	.word	0x20001740
    2800:	20000358 	.word	0x20000358

00002804 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    2804:	4909      	ldr	r1, [pc, #36]	; (282c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    2806:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    2808:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    280c:	3bff      	subs	r3, #255	; 0xff
    280e:	d002      	beq.n	2816 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    2810:	2100      	movs	r1, #0
    2812:	6001      	str	r1, [r0, #0]
    2814:	e007      	b.n	2826 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    2816:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    281a:	4904      	ldr	r1, [pc, #16]	; (282c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    281c:	2a01      	cmp	r2, #1
    281e:	d002      	beq.n	2826 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    2820:	6001      	str	r1, [r0, #0]
    2822:	2001      	movs	r0, #1
    2824:	4770      	bx	lr
    2826:	2000      	movs	r0, #0
    2828:	4770      	bx	lr
    282a:	0000      	.short	0x0000
    282c:	20001740 	.word	0x20001740

00002830 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    2830:	4901      	ldr	r1, [pc, #4]	; (2838 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    2832:	8008      	strh	r0, [r1, #0]
    2834:	4770      	bx	lr
    2836:	0000      	.short	0x0000
    2838:	20000358 	.word	0x20000358

0000283c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    283c:	4905      	ldr	r1, [pc, #20]	; (2854 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    283e:	2000      	movs	r0, #0
    2840:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    2844:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2848:	8488      	strh	r0, [r1, #36]	; 0x24
    284a:	4903      	ldr	r1, [pc, #12]	; (2858 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    284c:	8008      	strh	r0, [r1, #0]
    284e:	8048      	strh	r0, [r1, #2]
    2850:	4770      	bx	lr
    2852:	0000      	.short	0x0000
    2854:	20001740 	.word	0x20001740
    2858:	20000358 	.word	0x20000358
    285c:	4905      	ldr	r1, [pc, #20]	; (2874 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    285e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    2860:	4282      	cmp	r2, r0
    2862:	d105      	bne.n	2870 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    2864:	2000      	movs	r0, #0
    2866:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    286a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    286e:	8488      	strh	r0, [r1, #36]	; 0x24
    2870:	4770      	bx	lr
    2872:	0000      	.short	0x0000
    2874:	20001740 	.word	0x20001740

00002878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    2878:	4a0a      	ldr	r2, [pc, #40]	; (28a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    287a:	b110      	cbz	r0, 2882 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    287c:	2801      	cmp	r0, #1
    287e:	d007      	beq.n	2890 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    2880:	e00e      	b.n	28a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    2882:	7850      	ldrb	r0, [r2, #1]
    2884:	b160      	cbz	r0, 28a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    2886:	f8d2 0002 	ldr.w	r0, [r2, #2]
    288a:	6008      	str	r0, [r1, #0]
    288c:	88d0      	ldrh	r0, [r2, #6]
    288e:	e004      	b.n	289a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    2890:	7810      	ldrb	r0, [r2, #0]
    2892:	b128      	cbz	r0, 28a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    2894:	6890      	ldr	r0, [r2, #8]
    2896:	6008      	str	r0, [r1, #0]
    2898:	8990      	ldrh	r0, [r2, #12]
    289a:	8088      	strh	r0, [r1, #4]
    289c:	2001      	movs	r0, #1
    289e:	4770      	bx	lr
    28a0:	2000      	movs	r0, #0
    28a2:	4770      	bx	lr
    28a4:	20000366 	.word	0x20000366

000028a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    28a8:	4a08      	ldr	r2, [pc, #32]	; (28cc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    28aa:	2301      	movs	r3, #1
    28ac:	b138      	cbz	r0, 28be <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    28ae:	2801      	cmp	r0, #1
    28b0:	d104      	bne.n	28bc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    28b2:	7013      	strb	r3, [r2, #0]
    28b4:	6808      	ldr	r0, [r1, #0]
    28b6:	6090      	str	r0, [r2, #8]
    28b8:	8888      	ldrh	r0, [r1, #4]
    28ba:	8190      	strh	r0, [r2, #12]
    28bc:	4770      	bx	lr
    28be:	7053      	strb	r3, [r2, #1]
    28c0:	6808      	ldr	r0, [r1, #0]
    28c2:	f8c2 0002 	str.w	r0, [r2, #2]
    28c6:	8888      	ldrh	r0, [r1, #4]
    28c8:	80d0      	strh	r0, [r2, #6]
    28ca:	4770      	bx	lr
    28cc:	20000366 	.word	0x20000366

000028d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    28d0:	4906      	ldr	r1, [pc, #24]	; (28ec <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    28d2:	b110      	cbz	r0, 28da <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    28d4:	2801      	cmp	r0, #1
    28d6:	d002      	beq.n	28de <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    28d8:	e005      	b.n	28e6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    28da:	7848      	ldrb	r0, [r1, #1]
    28dc:	e000      	b.n	28e0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    28de:	7808      	ldrb	r0, [r1, #0]
    28e0:	b108      	cbz	r0, 28e6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    28e2:	2001      	movs	r0, #1
    28e4:	4770      	bx	lr
    28e6:	2000      	movs	r0, #0
    28e8:	4770      	bx	lr
    28ea:	0000      	.short	0x0000
    28ec:	20000366 	.word	0x20000366

000028f0 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    28f0:	4901      	ldr	r1, [pc, #4]	; (28f8 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    28f2:	7708      	strb	r0, [r1, #28]
    28f4:	4770      	bx	lr
    28f6:	0000      	.short	0x0000
    28f8:	20001002 	.word	0x20001002

000028fc <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>:
    28fc:	4801      	ldr	r0, [pc, #4]	; (2904 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA+0x8>)
    28fe:	7880      	ldrb	r0, [r0, #2]
    2900:	4770      	bx	lr
    2902:	0000      	.short	0x0000
    2904:	20000084 	.word	0x20000084

00002908 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>:
    2908:	4801      	ldr	r0, [pc, #4]	; (2910 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY+0x8>)
    290a:	78c0      	ldrb	r0, [r0, #3]
    290c:	4770      	bx	lr
    290e:	0000      	.short	0x0000
    2910:	20000084 	.word	0x20000084

00002914 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>:
    2914:	b570      	push	{r4, r5, r6, lr}
    2916:	460c      	mov	r4, r1
    2918:	4605      	mov	r5, r0
    291a:	f000 f91f 	bl	2b5c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
    291e:	b118      	cbz	r0, 2928 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x14>
    2920:	21d0      	movs	r1, #208	; 0xd0
    2922:	2027      	movs	r0, #39	; 0x27
    2924:	f7ff f844 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2928:	4803      	ldr	r0, [pc, #12]	; (2938 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x24>)
    292a:	2101      	movs	r1, #1
    292c:	f00c fcdf 	bl	f2ee <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2930:	4802      	ldr	r0, [pc, #8]	; (293c <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x28>)
    2932:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    2936:	bd70      	pop	{r4, r5, r6, pc}
    2938:	20000fe0 	.word	0x20000fe0
    293c:	20000084 	.word	0x20000084

00002940 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>:
    2940:	4901      	ldr	r1, [pc, #4]	; (2948 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q+0x8>)
    2942:	2001      	movs	r0, #1
    2944:	7148      	strb	r0, [r1, #5]
    2946:	4770      	bx	lr
    2948:	20000084 	.word	0x20000084

0000294c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>:
    294c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2950:	4d5b      	ldr	r5, [pc, #364]	; (2ac0 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x174>)
    2952:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2954:	782e      	ldrb	r6, [r5, #0]
    2956:	2e00      	cmp	r6, #0
    2958:	d16b      	bne.n	2a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    295a:	2a00      	cmp	r2, #0
    295c:	d069      	beq.n	2a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    295e:	2b00      	cmp	r3, #0
    2960:	d067      	beq.n	2a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    2962:	2c00      	cmp	r4, #0
    2964:	d065      	beq.n	2a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    2966:	f105 0614 	add.w	r6, r5, #20
    296a:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    296e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    2972:	2700      	movs	r7, #0
    2974:	716f      	strb	r7, [r5, #5]
    2976:	712f      	strb	r7, [r5, #4]
    2978:	70af      	strb	r7, [r5, #2]
    297a:	706f      	strb	r7, [r5, #1]
    297c:	70ef      	strb	r7, [r5, #3]
    297e:	81af      	strh	r7, [r5, #12]
    2980:	81ef      	strh	r7, [r5, #14]
    2982:	f000 f92f 	bl	2be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2986:	4606      	mov	r6, r0
    2988:	f000 f926 	bl	2bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    298c:	4604      	mov	r4, r0
    298e:	f006 f9d1 	bl	8d34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    2992:	f005 ff29 	bl	87e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2996:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    299a:	f006 fa4f 	bl	8e3c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    299e:	69e0      	ldr	r0, [r4, #28]
    29a0:	f006 fb32 	bl	9008 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    29a4:	6960      	ldr	r0, [r4, #20]
    29a6:	f006 fb25 	bl	8ff4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    29aa:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    29ae:	f006 fb5b 	bl	9068 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    29b2:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    29b6:	6840      	ldr	r0, [r0, #4]
    29b8:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    29bc:	b108      	cbz	r0, 29c2 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x76>
    29be:	f006 f933 	bl	8c28 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    29c2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    29c6:	2001      	movs	r0, #1
    29c8:	f006 f872 	bl	8ab0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    29cc:	2800      	cmp	r0, #0
    29ce:	d070      	beq.n	2ab2 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x166>
    29d0:	483c      	ldr	r0, [pc, #240]	; (2ac4 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x178>)
    29d2:	f006 f8d9 	bl	8b88 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    29d6:	8820      	ldrh	r0, [r4, #0]
    29d8:	f7ff fcc2 	bl	2360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    29dc:	6368      	str	r0, [r5, #52]	; 0x34
    29de:	8820      	ldrh	r0, [r4, #0]
    29e0:	f7ff fca8 	bl	2334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    29e4:	f106 0288 	add.w	r2, r6, #136	; 0x88
    29e8:	63a8      	str	r0, [r5, #56]	; 0x38
    29ea:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    29ee:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>
    29f2:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    29f6:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    29fa:	f8c9 2019 	str.w	r2, [r9, #25]
    29fe:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    2a02:	f8c9 101d 	str.w	r1, [r9, #29]
    2a06:	f000 f925 	bl	2c54 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xdc>
    2a0a:	4601      	mov	r1, r0
    2a0c:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    2a0e:	f00c f9c3 	bl	ed98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    2a12:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    2a14:	4281      	cmp	r1, r0
    2a16:	d200      	bcs.n	2a1a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xce>
    2a18:	4608      	mov	r0, r1
    2a1a:	71a8      	strb	r0, [r5, #6]
    2a1c:	46a8      	mov	r8, r5
    2a1e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    2a22:	46ba      	mov	sl, r7
    2a24:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    2a26:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    2a2a:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    2a2c:	2908      	cmp	r1, #8
    2a2e:	d104      	bne.n	2a3a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xee>
    2a30:	e002      	b.n	2a38 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xec>
    2a32:	f240 1145 	movw	r1, #325	; 0x145
    2a36:	e040      	b.n	2aba <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16e>
    2a38:	2104      	movs	r1, #4
    2a3a:	f00c f9ad 	bl	ed98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    2a3e:	b90f      	cbnz	r7, 2a44 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf8>
    2a40:	1d00      	adds	r0, r0, #4
    2a42:	b280      	uxth	r0, r0
    2a44:	4285      	cmp	r5, r0
    2a46:	d200      	bcs.n	2a4a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xfe>
    2a48:	4628      	mov	r0, r5
    2a4a:	b2c5      	uxtb	r5, r0
    2a4c:	f888 5007 	strb.w	r5, [r8, #7]
    2a50:	f888 5008 	strb.w	r5, [r8, #8]
    2a54:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    2a58:	46d0      	mov	r8, sl
    2a5a:	b190      	cbz	r0, 2a82 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x136>
    2a5c:	2701      	movs	r7, #1
    2a5e:	f889 7018 	strb.w	r7, [r9, #24]
    2a62:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    2a66:	e9c9 1204 	strd	r1, r2, [r9, #16]
    2a6a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    2a6e:	f00c f8a8 	bl	ebc2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    2a72:	4603      	mov	r3, r0
    2a74:	462a      	mov	r2, r5
    2a76:	4914      	ldr	r1, [pc, #80]	; (2ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    2a78:	4638      	mov	r0, r7
    2a7a:	f8cd 8000 	str.w	r8, [sp]
    2a7e:	f005 fe1f 	bl	86c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    2a82:	2001      	movs	r0, #1
    2a84:	f000 fb46 	bl	3114 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x59c>
    2a88:	4810      	ldr	r0, [pc, #64]	; (2acc <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x180>)
    2a8a:	6800      	ldr	r0, [r0, #0]
    2a8c:	2803      	cmp	r0, #3
    2a8e:	d012      	beq.n	2ab6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    2a90:	280b      	cmp	r0, #11
    2a92:	d010      	beq.n	2ab6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    2a94:	480c      	ldr	r0, [pc, #48]	; (2ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    2a96:	220e      	movs	r2, #14
    2a98:	2100      	movs	r1, #0
    2a9a:	304a      	adds	r0, #74	; 0x4a
    2a9c:	f00f fa6d 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2aa0:	4809      	ldr	r0, [pc, #36]	; (2ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    2aa2:	8ab1      	ldrh	r1, [r6, #20]
    2aa4:	304a      	adds	r0, #74	; 0x4a
    2aa6:	8041      	strh	r1, [r0, #2]
    2aa8:	8821      	ldrh	r1, [r4, #0]
    2aaa:	8001      	strh	r1, [r0, #0]
    2aac:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    2ab0:	7101      	strb	r1, [r0, #4]
    2ab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ab6:	f240 2102 	movw	r1, #514	; 0x202
    2aba:	2027      	movs	r0, #39	; 0x27
    2abc:	f7fe ff78 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ac0:	20000084 	.word	0x20000084
    2ac4:	00003318 	.word	0x00003318
    2ac8:	20000fb8 	.word	0x20000fb8
    2acc:	40001550 	.word	0x40001550

00002ad0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>:
    2ad0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2ad4:	4688      	mov	r8, r1
    2ad6:	4607      	mov	r7, r0
    2ad8:	f000 f884 	bl	2be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2adc:	4c1a      	ldr	r4, [pc, #104]	; (2b48 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x78>)
    2ade:	4605      	mov	r5, r0
    2ae0:	07b8      	lsls	r0, r7, #30
    2ae2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2ae4:	784e      	ldrb	r6, [r1, #1]
    2ae6:	d516      	bpl.n	2b16 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x46>
    2ae8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2aea:	b330      	cbz	r0, 2b3a <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x6a>
    2aec:	8962      	ldrh	r2, [r4, #10]
    2aee:	1cd2      	adds	r2, r2, #3
    2af0:	f00f f9c9 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2af4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2af6:	6260      	str	r0, [r4, #36]	; 0x24
    2af8:	4669      	mov	r1, sp
    2afa:	aa01      	add	r2, sp, #4
    2afc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2afe:	f00b fcaa 	bl	e456 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    2b02:	9800      	ldr	r0, [sp, #0]
    2b04:	f00b fc5d 	bl	e3c2 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    2b08:	f8c8 0000 	str.w	r0, [r8]
    2b0c:	4631      	mov	r1, r6
    2b0e:	2201      	movs	r2, #1
    2b10:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2b12:	f00b fc0d 	bl	e330 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    2b16:	07f8      	lsls	r0, r7, #31
    2b18:	d00d      	beq.n	2b36 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x66>
    2b1a:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    2b1e:	3518      	adds	r5, #24
    2b20:	1c40      	adds	r0, r0, #1
    2b22:	f141 0100 	adc.w	r1, r1, #0
    2b26:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    2b2a:	f815 0918 	ldrb.w	r0, [r5], #-24
    2b2e:	2801      	cmp	r0, #1
    2b30:	d008      	beq.n	2b44 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x74>
    2b32:	2001      	movs	r0, #1
    2b34:	7628      	strb	r0, [r5, #24]
    2b36:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    2b3a:	f240 415c 	movw	r1, #1116	; 0x45c
    2b3e:	2027      	movs	r0, #39	; 0x27
    2b40:	f7fe ff36 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b44:	2000      	movs	r0, #0
    2b46:	e7f5      	b.n	2b34 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x64>
    2b48:	20000084 	.word	0x20000084

00002b4c <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>:
    2b4c:	4802      	ldr	r0, [pc, #8]	; (2b58 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI+0xc>)
    2b4e:	89c0      	ldrh	r0, [r0, #14]
    2b50:	f3c0 2080 	ubfx	r0, r0, #10, #1
    2b54:	4770      	bx	lr
    2b56:	0000      	.short	0x0000
    2b58:	20000084 	.word	0x20000084

00002b5c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>:
    2b5c:	4804      	ldr	r0, [pc, #16]	; (2b70 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x14>)
    2b5e:	7800      	ldrb	r0, [r0, #0]
    2b60:	b108      	cbz	r0, 2b66 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0xa>
    2b62:	200c      	movs	r0, #12
    2b64:	4770      	bx	lr
    2b66:	4903      	ldr	r1, [pc, #12]	; (2b74 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x18>)
    2b68:	2000      	movs	r0, #0
    2b6a:	7708      	strb	r0, [r1, #28]
    2b6c:	4770      	bx	lr
    2b6e:	0000      	.short	0x0000
    2b70:	20000084 	.word	0x20000084
    2b74:	20001002 	.word	0x20001002

00002b78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>:
    2b78:	480c      	ldr	r0, [pc, #48]	; (2bac <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34>)
    2b7a:	b510      	push	{r4, lr}
    2b7c:	7801      	ldrb	r1, [r0, #0]
    2b7e:	b149      	cbz	r1, 2b94 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1c>
    2b80:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    2b84:	7800      	ldrb	r0, [r0, #0]
    2b86:	2802      	cmp	r0, #2
    2b88:	d008      	beq.n	2b9c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x24>
    2b8a:	f240 211e 	movw	r1, #542	; 0x21e
    2b8e:	2027      	movs	r0, #39	; 0x27
    2b90:	f7fe ff0e 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2b98:	f000 b9ca 	b.w	2f30 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    2b9c:	6848      	ldr	r0, [r1, #4]
    2b9e:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    2ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2ba6:	f005 bff7 	b.w	8b98 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    2baa:	0000      	.short	0x0000
    2bac:	20000084 	.word	0x20000084
    2bb0:	4608      	mov	r0, r1
    2bb2:	2100      	movs	r1, #0
    2bb4:	7041      	strb	r1, [r0, #1]
    2bb6:	211d      	movs	r1, #29
    2bb8:	f800 1b04 	strb.w	r1, [r0], #4
    2bbc:	220e      	movs	r2, #14
    2bbe:	4901      	ldr	r1, [pc, #4]	; (2bc4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c>)
    2bc0:	f00f b961 	b.w	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2bc4:	20001010 	.word	0x20001010
    2bc8:	4a02      	ldr	r2, [pc, #8]	; (2bd4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5c>)
    2bca:	8993      	ldrh	r3, [r2, #12]
    2bcc:	4303      	orrs	r3, r0
    2bce:	8193      	strh	r3, [r2, #12]
    2bd0:	6952      	ldr	r2, [r2, #20]
    2bd2:	4710      	bx	r2
    2bd4:	20000084 	.word	0x20000084
    2bd8:	4801      	ldr	r0, [pc, #4]	; (2be0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>)
    2bda:	6840      	ldr	r0, [r0, #4]
    2bdc:	4770      	bx	lr
    2bde:	0000      	.short	0x0000
    2be0:	200000c0 	.word	0x200000c0
    2be4:	4801      	ldr	r0, [pc, #4]	; (2bec <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x74>)
    2be6:	6840      	ldr	r0, [r0, #4]
    2be8:	3080      	adds	r0, #128	; 0x80
    2bea:	4770      	bx	lr
    2bec:	200000c0 	.word	0x200000c0
    2bf0:	4a01      	ldr	r2, [pc, #4]	; (2bf8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x80>)
    2bf2:	2100      	movs	r1, #0
    2bf4:	6952      	ldr	r2, [r2, #20]
    2bf6:	4710      	bx	r2
    2bf8:	20000084 	.word	0x20000084
    2bfc:	b570      	push	{r4, r5, r6, lr}
    2bfe:	4605      	mov	r5, r0
    2c00:	2901      	cmp	r1, #1
    2c02:	d818      	bhi.n	2c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    2c04:	4c12      	ldr	r4, [pc, #72]	; (2c50 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>)
    2c06:	69a1      	ldr	r1, [r4, #24]
    2c08:	4788      	blx	r1
    2c0a:	b1a0      	cbz	r0, 2c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    2c0c:	7920      	ldrb	r0, [r4, #4]
    2c0e:	b990      	cbnz	r0, 2c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    2c10:	b9e5      	cbnz	r5, 2c4c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    2c12:	f104 0010 	add.w	r0, r4, #16
    2c16:	7801      	ldrb	r1, [r0, #0]
    2c18:	06c8      	lsls	r0, r1, #27
    2c1a:	d405      	bmi.n	2c28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    2c1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2c1e:	7800      	ldrb	r0, [r0, #0]
    2c20:	06c0      	lsls	r0, r0, #27
    2c22:	d401      	bmi.n	2c28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    2c24:	2001      	movs	r0, #1
    2c26:	e000      	b.n	2c2a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb2>
    2c28:	2000      	movs	r0, #0
    2c2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2c2c:	b92a      	cbnz	r2, 2c3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    2c2e:	8962      	ldrh	r2, [r4, #10]
    2c30:	b11a      	cbz	r2, 2c3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    2c32:	06c9      	lsls	r1, r1, #27
    2c34:	d401      	bmi.n	2c3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    2c36:	2001      	movs	r0, #1
    2c38:	bd70      	pop	{r4, r5, r6, pc}
    2c3a:	89a1      	ldrh	r1, [r4, #12]
    2c3c:	078a      	lsls	r2, r1, #30
    2c3e:	d503      	bpl.n	2c48 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    2c40:	6a22      	ldr	r2, [r4, #32]
    2c42:	78d2      	ldrb	r2, [r2, #3]
    2c44:	2a02      	cmp	r2, #2
    2c46:	d001      	beq.n	2c4c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    2c48:	4308      	orrs	r0, r1
    2c4a:	d1f4      	bne.n	2c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    2c4c:	2000      	movs	r0, #0
    2c4e:	bd70      	pop	{r4, r5, r6, pc}
    2c50:	20000084 	.word	0x20000084
    2c54:	b510      	push	{r4, lr}
    2c56:	f7ff ffbf 	bl	2bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    2c5a:	4604      	mov	r4, r0
    2c5c:	f7ff ffc2 	bl	2be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2c60:	4602      	mov	r2, r0
    2c62:	7f41      	ldrb	r1, [r0, #29]
    2c64:	4816      	ldr	r0, [pc, #88]	; (2cc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x148>)
    2c66:	2925      	cmp	r1, #37	; 0x25
    2c68:	d010      	beq.n	2c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    2c6a:	2926      	cmp	r1, #38	; 0x26
    2c6c:	d00e      	beq.n	2c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    2c6e:	7f92      	ldrb	r2, [r2, #30]
    2c70:	2a25      	cmp	r2, #37	; 0x25
    2c72:	d00b      	beq.n	2c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    2c74:	2920      	cmp	r1, #32
    2c76:	d00d      	beq.n	2c94 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    2c78:	2921      	cmp	r1, #33	; 0x21
    2c7a:	d00b      	beq.n	2c94 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    2c7c:	2a23      	cmp	r2, #35	; 0x23
    2c7e:	d00f      	beq.n	2ca0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    2c80:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2c84:	2804      	cmp	r0, #4
    2c86:	d100      	bne.n	2c8a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x112>
    2c88:	2008      	movs	r0, #8
    2c8a:	bd10      	pop	{r4, pc}
    2c8c:	6840      	ldr	r0, [r0, #4]
    2c8e:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    2c92:	e00e      	b.n	2cb2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x13a>
    2c94:	2a23      	cmp	r2, #35	; 0x23
    2c96:	d003      	beq.n	2ca0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    2c98:	6840      	ldr	r0, [r0, #4]
    2c9a:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    2c9e:	e005      	b.n	2cac <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x134>
    2ca0:	6841      	ldr	r1, [r0, #4]
    2ca2:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    2ca6:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    2caa:	4008      	ands	r0, r1
    2cac:	f00b ff7f 	bl	ebae <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    2cb0:	4601      	mov	r1, r0
    2cb2:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2cba:	f00b bf90 	b.w	ebde <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
    2cbe:	0000      	.short	0x0000
    2cc0:	200000c0 	.word	0x200000c0
    2cc4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2cc8:	468b      	mov	fp, r1
    2cca:	4681      	mov	r9, r0
    2ccc:	f7ff ff8a 	bl	2be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2cd0:	2600      	movs	r6, #0
    2cd2:	4c66      	ldr	r4, [pc, #408]	; (2e6c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>)
    2cd4:	4607      	mov	r7, r0
    2cd6:	f88d 6008 	strb.w	r6, [sp, #8]
    2cda:	9603      	str	r6, [sp, #12]
    2cdc:	9601      	str	r6, [sp, #4]
    2cde:	7820      	ldrb	r0, [r4, #0]
    2ce0:	4635      	mov	r5, r6
    2ce2:	2802      	cmp	r0, #2
    2ce4:	d004      	beq.n	2cf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x178>
    2ce6:	f240 41df 	movw	r1, #1247	; 0x4df
    2cea:	2027      	movs	r0, #39	; 0x27
    2cec:	f7fe fe60 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2cf0:	7ba0      	ldrb	r0, [r4, #14]
    2cf2:	0640      	lsls	r0, r0, #25
    2cf4:	d406      	bmi.n	2d04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x18c>
    2cf6:	2040      	movs	r0, #64	; 0x40
    2cf8:	f7ff ff7a 	bl	2bf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    2cfc:	89e0      	ldrh	r0, [r4, #14]
    2cfe:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    2d02:	81e0      	strh	r0, [r4, #14]
    2d04:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    2d08:	f1b9 0f00 	cmp.w	r9, #0
    2d0c:	d03a      	beq.n	2d84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x20c>
    2d0e:	b180      	cbz	r0, 2d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    2d10:	f005 fda4 	bl	885c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    2d14:	f005 fd7e 	bl	8814 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    2d18:	b958      	cbnz	r0, 2d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    2d1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2d1c:	7841      	ldrb	r1, [r0, #1]
    2d1e:	b141      	cbz	r1, 2d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    2d20:	7800      	ldrb	r0, [r0, #0]
    2d22:	7e39      	ldrb	r1, [r7, #24]
    2d24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    2d28:	4288      	cmp	r0, r1
    2d2a:	d102      	bne.n	2d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    2d2c:	2001      	movs	r0, #1
    2d2e:	7060      	strb	r0, [r4, #1]
    2d30:	e097      	b.n	2e62 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ea>
    2d32:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2d34:	7841      	ldrb	r1, [r0, #1]
    2d36:	8161      	strh	r1, [r4, #10]
    2d38:	b121      	cbz	r1, 2d44 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1cc>
    2d3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2d3c:	f00b fc61 	bl	e602 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    2d40:	62a0      	str	r0, [r4, #40]	; 0x28
    2d42:	e000      	b.n	2d46 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ce>
    2d44:	62a5      	str	r5, [r4, #40]	; 0x28
    2d46:	89e0      	ldrh	r0, [r4, #14]
    2d48:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    2d4c:	81e0      	strh	r0, [r4, #14]
    2d4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2d50:	7df9      	ldrb	r1, [r7, #23]
    2d52:	7800      	ldrb	r0, [r0, #0]
    2d54:	f3c0 0080 	ubfx	r0, r0, #2, #1
    2d58:	4288      	cmp	r0, r1
    2d5a:	d007      	beq.n	2d6c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f4>
    2d5c:	a803      	add	r0, sp, #12
    2d5e:	f000 f98b 	bl	3078 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x500>
    2d62:	89e0      	ldrh	r0, [r4, #14]
    2d64:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    2d68:	81e0      	strh	r0, [r4, #14]
    2d6a:	e000      	b.n	2d6e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f6>
    2d6c:	2601      	movs	r6, #1
    2d6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2d70:	7e39      	ldrb	r1, [r7, #24]
    2d72:	7800      	ldrb	r0, [r0, #0]
    2d74:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    2d78:	4288      	cmp	r0, r1
    2d7a:	d10d      	bne.n	2d98 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x220>
    2d7c:	a802      	add	r0, sp, #8
    2d7e:	f000 f931 	bl	2fe4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x46c>
    2d82:	e009      	b.n	2d98 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x220>
    2d84:	b108      	cbz	r0, 2d8a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x212>
    2d86:	f005 fd63 	bl	8850 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    2d8a:	78a0      	ldrb	r0, [r4, #2]
    2d8c:	1c40      	adds	r0, r0, #1
    2d8e:	70a0      	strb	r0, [r4, #2]
    2d90:	89e0      	ldrh	r0, [r4, #14]
    2d92:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    2d96:	81e0      	strh	r0, [r4, #14]
    2d98:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 2e6c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>
    2d9c:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    2da0:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    2da4:	b190      	cbz	r0, 2dcc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x254>
    2da6:	f7ff ff17 	bl	2bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    2daa:	4931      	ldr	r1, [pc, #196]	; (2e70 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
    2dac:	760d      	strb	r5, [r1, #24]
    2dae:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    2db2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    2db6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    2dba:	f00b ff02 	bl	ebc2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    2dbe:	4603      	mov	r3, r0
    2dc0:	22fb      	movs	r2, #251	; 0xfb
    2dc2:	492b      	ldr	r1, [pc, #172]	; (2e70 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
    2dc4:	4628      	mov	r0, r5
    2dc6:	9500      	str	r5, [sp, #0]
    2dc8:	f005 fc7a 	bl	86c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    2dcc:	f04f 0800 	mov.w	r8, #0
    2dd0:	f1bb 0f00 	cmp.w	fp, #0
    2dd4:	d104      	bne.n	2de0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x268>
    2dd6:	78a1      	ldrb	r1, [r4, #2]
    2dd8:	2001      	movs	r0, #1
    2dda:	f7ff ff0f 	bl	2bfc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    2dde:	b120      	cbz	r0, 2dea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x272>
    2de0:	f006 f8f4 	bl	8fcc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    2de4:	f04f 0801 	mov.w	r8, #1
    2de8:	e002      	b.n	2df0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x278>
    2dea:	2000      	movs	r0, #0
    2dec:	f000 f9d0 	bl	3190 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x618>
    2df0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2df4:	b118      	cbz	r0, 2dfe <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x286>
    2df6:	a901      	add	r1, sp, #4
    2df8:	2002      	movs	r0, #2
    2dfa:	f7ff fe69 	bl	2ad0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    2dfe:	481c      	ldr	r0, [pc, #112]	; (2e70 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
    2e00:	8aba      	ldrh	r2, [r7, #20]
    2e02:	304a      	adds	r0, #74	; 0x4a
    2e04:	b13e      	cbz	r6, 2e16 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x29e>
    2e06:	b91a      	cbnz	r2, 2e10 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x298>
    2e08:	88c2      	ldrh	r2, [r0, #6]
    2e0a:	b90a      	cbnz	r2, 2e10 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x298>
    2e0c:	8902      	ldrh	r2, [r0, #8]
    2e0e:	b112      	cbz	r2, 2e16 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x29e>
    2e10:	8942      	ldrh	r2, [r0, #10]
    2e12:	1c52      	adds	r2, r2, #1
    2e14:	8142      	strh	r2, [r0, #10]
    2e16:	f1b9 0f00 	cmp.w	r9, #0
    2e1a:	d004      	beq.n	2e26 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ae>
    2e1c:	88c1      	ldrh	r1, [r0, #6]
    2e1e:	1c49      	adds	r1, r1, #1
    2e20:	80c1      	strh	r1, [r0, #6]
    2e22:	70a5      	strb	r5, [r4, #2]
    2e24:	e002      	b.n	2e2c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2b4>
    2e26:	8901      	ldrh	r1, [r0, #8]
    2e28:	1c49      	adds	r1, r1, #1
    2e2a:	8101      	strh	r1, [r0, #8]
    2e2c:	480f      	ldr	r0, [pc, #60]	; (2e6c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>)
    2e2e:	303c      	adds	r0, #60	; 0x3c
    2e30:	f001 f9f2 	bl	4218 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    2e34:	9803      	ldr	r0, [sp, #12]
    2e36:	b140      	cbz	r0, 2e4a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d2>
    2e38:	f00b fac3 	bl	e3c2 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    2e3c:	f8da 1004 	ldr.w	r1, [sl, #4]
    2e40:	1c40      	adds	r0, r0, #1
    2e42:	7205      	strb	r5, [r0, #8]
    2e44:	2208      	movs	r2, #8
    2e46:	f00c fad9 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2e4a:	9801      	ldr	r0, [sp, #4]
    2e4c:	b130      	cbz	r0, 2e5c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2e4>
    2e4e:	f8da 1004 	ldr.w	r1, [sl, #4]
    2e52:	7205      	strb	r5, [r0, #8]
    2e54:	2210      	movs	r2, #16
    2e56:	9801      	ldr	r0, [sp, #4]
    2e58:	f00c fad0 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2e5c:	f1b8 0f00 	cmp.w	r8, #0
    2e60:	d001      	beq.n	2e66 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ee>
    2e62:	f000 f865 	bl	2f30 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    2e66:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2e6a:	0000      	.short	0x0000
    2e6c:	20000084 	.word	0x20000084
    2e70:	20000fb8 	.word	0x20000fb8
    2e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e78:	4688      	mov	r8, r1
    2e7a:	4681      	mov	r9, r0
    2e7c:	f7ff feb2 	bl	2be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2e80:	4d29      	ldr	r5, [pc, #164]	; (2f28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b0>)
    2e82:	4604      	mov	r4, r0
    2e84:	7828      	ldrb	r0, [r5, #0]
    2e86:	2801      	cmp	r0, #1
    2e88:	d004      	beq.n	2e94 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x31c>
    2e8a:	f240 416b 	movw	r1, #1131	; 0x46b
    2e8e:	2027      	movs	r0, #39	; 0x27
    2e90:	f7fe fd8e 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2e94:	7c20      	ldrb	r0, [r4, #16]
    2e96:	2700      	movs	r7, #0
    2e98:	2601      	movs	r6, #1
    2e9a:	b128      	cbz	r0, 2ea8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x330>
    2e9c:	7427      	strb	r7, [r4, #16]
    2e9e:	2100      	movs	r1, #0
    2ea0:	2004      	movs	r0, #4
    2ea2:	f7ff fe91 	bl	2bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2ea6:	74a6      	strb	r6, [r4, #18]
    2ea8:	6a29      	ldr	r1, [r5, #32]
    2eaa:	7808      	ldrb	r0, [r1, #0]
    2eac:	43c0      	mvns	r0, r0
    2eae:	0780      	lsls	r0, r0, #30
    2eb0:	d109      	bne.n	2ec6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34e>
    2eb2:	7da0      	ldrb	r0, [r4, #22]
    2eb4:	bb88      	cbnz	r0, 2f1a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a2>
    2eb6:	2002      	movs	r0, #2
    2eb8:	f7ff fe86 	bl	2bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2ebc:	6a28      	ldr	r0, [r5, #32]
    2ebe:	7800      	ldrb	r0, [r0, #0]
    2ec0:	43c0      	mvns	r0, r0
    2ec2:	0780      	lsls	r0, r0, #30
    2ec4:	d029      	beq.n	2f1a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a2>
    2ec6:	6a28      	ldr	r0, [r5, #32]
    2ec8:	7840      	ldrb	r0, [r0, #1]
    2eca:	b110      	cbz	r0, 2ed2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x35a>
    2ecc:	2002      	movs	r0, #2
    2ece:	75a0      	strb	r0, [r4, #22]
    2ed0:	e000      	b.n	2ed4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x35c>
    2ed2:	75a6      	strb	r6, [r4, #22]
    2ed4:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    2ed8:	b198      	cbz	r0, 2f02 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x38a>
    2eda:	f7ff fe7d 	bl	2bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    2ede:	4913      	ldr	r1, [pc, #76]	; (2f2c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b4>)
    2ee0:	7a2d      	ldrb	r5, [r5, #8]
    2ee2:	760e      	strb	r6, [r1, #24]
    2ee4:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    2ee8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    2eec:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    2ef0:	f00b fe67 	bl	ebc2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    2ef4:	4603      	mov	r3, r0
    2ef6:	462a      	mov	r2, r5
    2ef8:	490c      	ldr	r1, [pc, #48]	; (2f2c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b4>)
    2efa:	4630      	mov	r0, r6
    2efc:	9700      	str	r7, [sp, #0]
    2efe:	f005 fbdf 	bl	86c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    2f02:	ea38 0009 	bics.w	r0, r8, r9
    2f06:	d004      	beq.n	2f12 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x39a>
    2f08:	2100      	movs	r1, #0
    2f0a:	4608      	mov	r0, r1
    2f0c:	f7ff fe76 	bl	2bfc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    2f10:	b128      	cbz	r0, 2f1e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a6>
    2f12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2f16:	f000 b80b 	b.w	2f30 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    2f1a:	2003      	movs	r0, #3
    2f1c:	e7d7      	b.n	2ece <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x356>
    2f1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2f22:	2000      	movs	r0, #0
    2f24:	f000 b8f6 	b.w	3114 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x59c>
    2f28:	20000084 	.word	0x20000084
    2f2c:	20000fb8 	.word	0x20000fb8
    2f30:	b510      	push	{r4, lr}
    2f32:	f005 fd33 	bl	899c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    2f36:	f005 fc57 	bl	87e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2f3a:	4c0d      	ldr	r4, [pc, #52]	; (2f70 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3f8>)
    2f3c:	89e0      	ldrh	r0, [r4, #14]
    2f3e:	f7ff fe57 	bl	2bf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    2f42:	480c      	ldr	r0, [pc, #48]	; (2f74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
    2f44:	7f00      	ldrb	r0, [r0, #28]
    2f46:	b158      	cbz	r0, 2f60 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3e8>
    2f48:	490a      	ldr	r1, [pc, #40]	; (2f74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
    2f4a:	220e      	movs	r2, #14
    2f4c:	f101 000e 	add.w	r0, r1, #14
    2f50:	f00e ff99 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2f54:	4807      	ldr	r0, [pc, #28]	; (2f74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
    2f56:	2202      	movs	r2, #2
    2f58:	4907      	ldr	r1, [pc, #28]	; (2f78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x400>)
    2f5a:	301d      	adds	r0, #29
    2f5c:	f00c fa62 	bl	f424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2f60:	69e2      	ldr	r2, [r4, #28]
    2f62:	7921      	ldrb	r1, [r4, #4]
    2f64:	7860      	ldrb	r0, [r4, #1]
    2f66:	4790      	blx	r2
    2f68:	2000      	movs	r0, #0
    2f6a:	7020      	strb	r0, [r4, #0]
    2f6c:	bd10      	pop	{r4, pc}
    2f6e:	0000      	.short	0x0000
    2f70:	20000084 	.word	0x20000084
    2f74:	20001002 	.word	0x20001002
    2f78:	00002bb1 	.word	0x00002bb1
    2f7c:	4808      	ldr	r0, [pc, #32]	; (2fa0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x428>)
    2f7e:	b510      	push	{r4, lr}
    2f80:	7800      	ldrb	r0, [r0, #0]
    2f82:	2802      	cmp	r0, #2
    2f84:	d004      	beq.n	2f90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x418>
    2f86:	f240 2149 	movw	r1, #585	; 0x249
    2f8a:	2027      	movs	r0, #39	; 0x27
    2f8c:	f7fe fd10 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2f90:	4904      	ldr	r1, [pc, #16]	; (2fa4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x42c>)
    2f92:	2001      	movs	r0, #1
    2f94:	7308      	strb	r0, [r1, #12]
    2f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f9a:	f7ff bfc9 	b.w	2f30 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    2f9e:	0000      	.short	0x0000
    2fa0:	20000084 	.word	0x20000084
    2fa4:	20001002 	.word	0x20001002
    2fa8:	b430      	push	{r4, r5}
    2faa:	4604      	mov	r4, r0
    2fac:	480c      	ldr	r0, [pc, #48]	; (2fe0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x468>)
    2fae:	7a00      	ldrb	r0, [r0, #8]
    2fb0:	b10b      	cbz	r3, 2fb6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x43e>
    2fb2:	1d00      	adds	r0, r0, #4
    2fb4:	b2c0      	uxtb	r0, r0
    2fb6:	b93a      	cbnz	r2, 2fc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x450>
    2fb8:	28ff      	cmp	r0, #255	; 0xff
    2fba:	d105      	bne.n	2fc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x450>
    2fbc:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    2fc0:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    2fc4:	429a      	cmp	r2, r3
    2fc6:	d009      	beq.n	2fdc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x464>
    2fc8:	b121      	cbz	r1, 2fd4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x45c>
    2fca:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    2fce:	bc30      	pop	{r4, r5}
    2fd0:	f006 b820 	b.w	9014 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    2fd4:	20ff      	movs	r0, #255	; 0xff
    2fd6:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    2fda:	e7f8      	b.n	2fce <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x456>
    2fdc:	bc30      	pop	{r4, r5}
    2fde:	4770      	bx	lr
    2fe0:	20000084 	.word	0x20000084
    2fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fe8:	4607      	mov	r7, r0
    2fea:	f7ff fdfb 	bl	2be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2fee:	4c21      	ldr	r4, [pc, #132]	; (3074 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4fc>)
    2ff0:	4605      	mov	r5, r0
    2ff2:	2601      	movs	r6, #1
    2ff4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2ff6:	7808      	ldrb	r0, [r1, #0]
    2ff8:	f000 0003 	and.w	r0, r0, #3
    2ffc:	2801      	cmp	r0, #1
    2ffe:	d00c      	beq.n	301a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a2>
    3000:	2802      	cmp	r0, #2
    3002:	d00a      	beq.n	301a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a2>
    3004:	2803      	cmp	r0, #3
    3006:	d11b      	bne.n	3040 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
    3008:	742e      	strb	r6, [r5, #16]
    300a:	89e0      	ldrh	r0, [r4, #14]
    300c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    3010:	81e0      	strh	r0, [r4, #14]
    3012:	2001      	movs	r0, #1
    3014:	f7ff fdd8 	bl	2bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    3018:	e012      	b.n	3040 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
    301a:	7848      	ldrb	r0, [r1, #1]
    301c:	b180      	cbz	r0, 3040 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
    301e:	89e1      	ldrh	r1, [r4, #14]
    3020:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    3024:	81e1      	strh	r1, [r4, #14]
    3026:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3028:	2900      	cmp	r1, #0
    302a:	d018      	beq.n	305e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
    302c:	28fb      	cmp	r0, #251	; 0xfb
    302e:	d818      	bhi.n	3062 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4ea>
    3030:	7960      	ldrb	r0, [r4, #5]
    3032:	b120      	cbz	r0, 303e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c6>
    3034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3038:	2020      	movs	r0, #32
    303a:	f7ff bdd9 	b.w	2bf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    303e:	703e      	strb	r6, [r7, #0]
    3040:	7e28      	ldrb	r0, [r5, #24]
    3042:	2801      	cmp	r0, #1
    3044:	d012      	beq.n	306c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4f4>
    3046:	762e      	strb	r6, [r5, #24]
    3048:	6a60      	ldr	r0, [r4, #36]	; 0x24
    304a:	7840      	ldrb	r0, [r0, #1]
    304c:	2800      	cmp	r0, #0
    304e:	d006      	beq.n	305e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
    3050:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    3054:	1c40      	adds	r0, r0, #1
    3056:	f141 0100 	adc.w	r1, r1, #0
    305a:	e9c5 0100 	strd	r0, r1, [r5]
    305e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3062:	7920      	ldrb	r0, [r4, #4]
    3064:	f040 0010 	orr.w	r0, r0, #16
    3068:	7120      	strb	r0, [r4, #4]
    306a:	e7f8      	b.n	305e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
    306c:	2000      	movs	r0, #0
    306e:	7628      	strb	r0, [r5, #24]
    3070:	e7ea      	b.n	3048 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4d0>
    3072:	0000      	.short	0x0000
    3074:	20000084 	.word	0x20000084
    3078:	b570      	push	{r4, r5, r6, lr}
    307a:	4605      	mov	r5, r0
    307c:	f7ff fdb2 	bl	2be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    3080:	4604      	mov	r4, r0
    3082:	7d80      	ldrb	r0, [r0, #22]
    3084:	2800      	cmp	r0, #0
    3086:	d02d      	beq.n	30e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x56c>
    3088:	2802      	cmp	r0, #2
    308a:	d10c      	bne.n	30a6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x52e>
    308c:	481b      	ldr	r0, [pc, #108]	; (30fc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x584>)
    308e:	4629      	mov	r1, r5
    3090:	6b40      	ldr	r0, [r0, #52]	; 0x34
    3092:	f00b f925 	bl	e2e0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    3096:	b330      	cbz	r0, 30e6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x56e>
    3098:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    309c:	1c40      	adds	r0, r0, #1
    309e:	f141 0100 	adc.w	r1, r1, #0
    30a2:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    30a6:	2500      	movs	r5, #0
    30a8:	75a5      	strb	r5, [r4, #22]
    30aa:	7ca0      	ldrb	r0, [r4, #18]
    30ac:	b120      	cbz	r0, 30b8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x540>
    30ae:	74a5      	strb	r5, [r4, #18]
    30b0:	2100      	movs	r1, #0
    30b2:	2010      	movs	r0, #16
    30b4:	f7ff fd88 	bl	2bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    30b8:	7c60      	ldrb	r0, [r4, #17]
    30ba:	b170      	cbz	r0, 30da <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x562>
    30bc:	7465      	strb	r5, [r4, #17]
    30be:	f7ff fb65 	bl	278c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    30c2:	b198      	cbz	r0, 30ec <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x574>
    30c4:	2100      	movs	r1, #0
    30c6:	2008      	movs	r0, #8
    30c8:	f7ff fd7e 	bl	2bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    30cc:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    30d0:	1c40      	adds	r0, r0, #1
    30d2:	f141 0100 	adc.w	r1, r1, #0
    30d6:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    30da:	7de0      	ldrb	r0, [r4, #23]
    30dc:	2801      	cmp	r0, #1
    30de:	d00a      	beq.n	30f6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x57e>
    30e0:	2001      	movs	r0, #1
    30e2:	75e0      	strb	r0, [r4, #23]
    30e4:	bd70      	pop	{r4, r5, r6, pc}
    30e6:	f240 31da 	movw	r1, #986	; 0x3da
    30ea:	e001      	b.n	30f0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x578>
    30ec:	f240 31f1 	movw	r1, #1009	; 0x3f1
    30f0:	2027      	movs	r0, #39	; 0x27
    30f2:	f7fe fc5d 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    30f6:	75e5      	strb	r5, [r4, #23]
    30f8:	bd70      	pop	{r4, r5, r6, pc}
    30fa:	0000      	.short	0x0000
    30fc:	20000084 	.word	0x20000084
    3100:	4803      	ldr	r0, [pc, #12]	; (3110 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x598>)
    3102:	7800      	ldrb	r0, [r0, #0]
    3104:	2800      	cmp	r0, #0
    3106:	d001      	beq.n	310c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x594>
    3108:	f7ff bf12 	b.w	2f30 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    310c:	4770      	bx	lr
    310e:	0000      	.short	0x0000
    3110:	20000084 	.word	0x20000084
    3114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3118:	4606      	mov	r6, r0
    311a:	f7ff fd5d 	bl	2bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    311e:	4680      	mov	r8, r0
    3120:	f7ff fd60 	bl	2be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    3124:	4c18      	ldr	r4, [pc, #96]	; (3188 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x610>)
    3126:	4605      	mov	r5, r0
    3128:	4632      	mov	r2, r6
    312a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    312c:	6260      	str	r0, [r4, #36]	; 0x24
    312e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    3132:	2101      	movs	r1, #1
    3134:	4640      	mov	r0, r8
    3136:	f7ff ff37 	bl	2fa8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x430>
    313a:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    313e:	2700      	movs	r7, #0
    3140:	b170      	cbz	r0, 3160 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5e8>
    3142:	6b20      	ldr	r0, [r4, #48]	; 0x30
    3144:	f005 fe9c 	bl	8e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3148:	4810      	ldr	r0, [pc, #64]	; (318c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x614>)
    314a:	2101      	movs	r1, #1
    314c:	7601      	strb	r1, [r0, #24]
    314e:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    3152:	e9c0 1204 	strd	r1, r2, [r0, #16]
    3156:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3158:	6a60      	ldr	r0, [r4, #36]	; 0x24
    315a:	f005 fb03 	bl	8764 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    315e:	e004      	b.n	316a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5f2>
    3160:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3162:	f005 fe8d 	bl	8e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3166:	f005 fb3f 	bl	87e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    316a:	b916      	cbnz	r6, 3172 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5fa>
    316c:	4638      	mov	r0, r7
    316e:	f005 fd37 	bl	8be0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    3172:	2100      	movs	r1, #0
    3174:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    3178:	4608      	mov	r0, r1
    317a:	f005 ff09 	bl	8f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    317e:	2002      	movs	r0, #2
    3180:	7020      	strb	r0, [r4, #0]
    3182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3186:	0000      	.short	0x0000
    3188:	20000084 	.word	0x20000084
    318c:	20000fb8 	.word	0x20000fb8
    3190:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    3194:	4604      	mov	r4, r0
    3196:	f7ff fd25 	bl	2be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    319a:	4605      	mov	r5, r0
    319c:	f7ff fd1c 	bl	2bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    31a0:	2700      	movs	r7, #0
    31a2:	f88d 7000 	strb.w	r7, [sp]
    31a6:	4606      	mov	r6, r0
    31a8:	f8df 9164 	ldr.w	r9, [pc, #356]	; 3310 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x798>
    31ac:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    31b0:	4622      	mov	r2, r4
    31b2:	4639      	mov	r1, r7
    31b4:	f7ff fef8 	bl	2fa8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x430>
    31b8:	7da8      	ldrb	r0, [r5, #22]
    31ba:	f04f 0801 	mov.w	r8, #1
    31be:	f1a9 0420 	sub.w	r4, r9, #32
    31c2:	b140      	cbz	r0, 31d6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x65e>
    31c4:	2801      	cmp	r0, #1
    31c6:	d020      	beq.n	320a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x692>
    31c8:	2802      	cmp	r0, #2
    31ca:	d02f      	beq.n	322c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6b4>
    31cc:	2803      	cmp	r0, #3
    31ce:	d03b      	beq.n	3248 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d0>
    31d0:	f240 21fb 	movw	r1, #763	; 0x2fb
    31d4:	e057      	b.n	3286 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70e>
    31d6:	79a0      	ldrb	r0, [r4, #6]
    31d8:	2150      	movs	r1, #80	; 0x50
    31da:	f8ad 0004 	strh.w	r0, [sp, #4]
    31de:	5388      	strh	r0, [r1, r6]
    31e0:	4648      	mov	r0, r9
    31e2:	f7ff fafd 	bl	27e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    31e6:	b130      	cbz	r0, 31f6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x67e>
    31e8:	2080      	movs	r0, #128	; 0x80
    31ea:	6a21      	ldr	r1, [r4, #32]
    31ec:	f7ff fcec 	bl	2bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    31f0:	f885 8011 	strb.w	r8, [r5, #17]
    31f4:	e02c      	b.n	3250 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    31f6:	466a      	mov	r2, sp
    31f8:	a901      	add	r1, sp, #4
    31fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
    31fc:	f00b fcf9 	bl	ebf2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    3200:	6220      	str	r0, [r4, #32]
    3202:	b110      	cbz	r0, 320a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x692>
    3204:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    3208:	b111      	cbz	r1, 3210 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x698>
    320a:	4842      	ldr	r0, [pc, #264]	; (3314 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x79c>)
    320c:	6220      	str	r0, [r4, #32]
    320e:	e01f      	b.n	3250 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    3210:	f89d 1000 	ldrb.w	r1, [sp]
    3214:	b921      	cbnz	r1, 3220 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6a8>
    3216:	8007      	strh	r7, [r0, #0]
    3218:	7087      	strb	r7, [r0, #2]
    321a:	2101      	movs	r1, #1
    321c:	f00c f867 	bl	f2ee <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    3220:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3224:	6a20      	ldr	r0, [r4, #32]
    3226:	f00b ffea 	bl	f1fe <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    322a:	e011      	b.n	3250 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    322c:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    3230:	f8ad 0004 	strh.w	r0, [sp, #4]
    3234:	466a      	mov	r2, sp
    3236:	a901      	add	r1, sp, #4
    3238:	6b60      	ldr	r0, [r4, #52]	; 0x34
    323a:	f00b fcda 	bl	ebf2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    323e:	6220      	str	r0, [r4, #32]
    3240:	b930      	cbnz	r0, 3250 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    3242:	f240 21e5 	movw	r1, #741	; 0x2e5
    3246:	e01e      	b.n	3286 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70e>
    3248:	4648      	mov	r0, r9
    324a:	f7ff fac9 	bl	27e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    324e:	b1c0      	cbz	r0, 3282 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70a>
    3250:	6a20      	ldr	r0, [r4, #32]
    3252:	2308      	movs	r3, #8
    3254:	7801      	ldrb	r1, [r0, #0]
    3256:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    325a:	7001      	strb	r1, [r0, #0]
    325c:	7dea      	ldrb	r2, [r5, #23]
    325e:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    3262:	4311      	orrs	r1, r2
    3264:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    3268:	7001      	strb	r1, [r0, #0]
    326a:	7e2a      	ldrb	r2, [r5, #24]
    326c:	2304      	movs	r3, #4
    326e:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    3272:	4311      	orrs	r1, r2
    3274:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    3278:	7001      	strb	r1, [r0, #0]
    327a:	43c9      	mvns	r1, r1
    327c:	0789      	lsls	r1, r1, #30
    327e:	d005      	beq.n	328c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x714>
    3280:	e007      	b.n	3292 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x71a>
    3282:	f240 21ee 	movw	r1, #750	; 0x2ee
    3286:	2027      	movs	r0, #39	; 0x27
    3288:	f7fe fb92 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    328c:	78c0      	ldrb	r0, [r0, #3]
    328e:	2802      	cmp	r0, #2
    3290:	d00f      	beq.n	32b2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73a>
    3292:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3294:	f00b f922 	bl	e4dc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    3298:	b108      	cbz	r0, 329e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x726>
    329a:	2101      	movs	r1, #1
    329c:	e00a      	b.n	32b4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73c>
    329e:	6a20      	ldr	r0, [r4, #32]
    32a0:	7800      	ldrb	r0, [r0, #0]
    32a2:	43c0      	mvns	r0, r0
    32a4:	0780      	lsls	r0, r0, #30
    32a6:	d004      	beq.n	32b2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73a>
    32a8:	f7ff fa58 	bl	275c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    32ac:	f080 0101 	eor.w	r1, r0, #1
    32b0:	e000      	b.n	32b4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73c>
    32b2:	2100      	movs	r1, #0
    32b4:	6a20      	ldr	r0, [r4, #32]
    32b6:	7802      	ldrb	r2, [r0, #0]
    32b8:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    32bc:	7001      	strb	r1, [r0, #0]
    32be:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    32c2:	b181      	cbz	r1, 32e6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x76e>
    32c4:	7841      	ldrb	r1, [r0, #1]
    32c6:	b171      	cbz	r1, 32e6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x76e>
    32c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    32ca:	f005 fdd9 	bl	8e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    32ce:	4811      	ldr	r0, [pc, #68]	; (3314 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x79c>)
    32d0:	3828      	subs	r0, #40	; 0x28
    32d2:	7607      	strb	r7, [r0, #24]
    32d4:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    32d8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    32dc:	6a21      	ldr	r1, [r4, #32]
    32de:	6b20      	ldr	r0, [r4, #48]	; 0x30
    32e0:	f005 fa40 	bl	8764 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    32e4:	e003      	b.n	32ee <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x776>
    32e6:	f005 fdcb 	bl	8e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    32ea:	f005 fa7d 	bl	87e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    32ee:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    32f2:	2101      	movs	r1, #1
    32f4:	2000      	movs	r0, #0
    32f6:	f005 fe4b 	bl	8f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    32fa:	f884 8003 	strb.w	r8, [r4, #3]
    32fe:	6a21      	ldr	r1, [r4, #32]
    3300:	880a      	ldrh	r2, [r1, #0]
    3302:	8222      	strh	r2, [r4, #16]
    3304:	7889      	ldrb	r1, [r1, #2]
    3306:	74a1      	strb	r1, [r4, #18]
    3308:	f884 8000 	strb.w	r8, [r4]
    330c:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    3310:	200000a4 	.word	0x200000a4
    3314:	20000fe0 	.word	0x20000fe0
    3318:	00002f7d 	.word	0x00002f7d
    331c:	00002cc5 	.word	0x00002cc5
    3320:	00002e75 	.word	0x00002e75
    3324:	00003101 	.word	0x00003101

00003328 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    3328:	4800      	ldr	r0, [pc, #0]	; (332c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    332a:	4770      	bx	lr
    332c:	200018f0 	.word	0x200018f0

00003330 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    3330:	4904      	ldr	r1, [pc, #16]	; (3344 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    3332:	784a      	ldrb	r2, [r1, #1]
    3334:	4282      	cmp	r2, r0
    3336:	d903      	bls.n	3340 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    3338:	4408      	add	r0, r1
    333a:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    333e:	4770      	bx	lr
    3340:	2000      	movs	r0, #0
    3342:	4770      	bx	lr
    3344:	20001766 	.word	0x20001766

00003348 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    3348:	4904      	ldr	r1, [pc, #16]	; (335c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    334a:	784a      	ldrb	r2, [r1, #1]
    334c:	4282      	cmp	r2, r0
    334e:	d903      	bls.n	3358 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    3350:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    3354:	3082      	adds	r0, #130	; 0x82
    3356:	4770      	bx	lr
    3358:	2000      	movs	r0, #0
    335a:	4770      	bx	lr
    335c:	20001766 	.word	0x20001766

00003360 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    3360:	4a05      	ldr	r2, [pc, #20]	; (3378 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    3362:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3366:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    336a:	6802      	ldr	r2, [r0, #0]
    336c:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    3370:	8880      	ldrh	r0, [r0, #4]
    3372:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    3376:	4770      	bx	lr
    3378:	20001766 	.word	0x20001766

0000337c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    337c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3380:	460e      	mov	r6, r1
    3382:	4607      	mov	r7, r0
    3384:	4615      	mov	r5, r2
    3386:	2106      	movs	r1, #6
    3388:	4630      	mov	r0, r6
    338a:	f00b fdfb 	bl	ef84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    338e:	4c0d      	ldr	r4, [pc, #52]	; (33c4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    3390:	b160      	cbz	r0, 33ac <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    3392:	2000      	movs	r0, #0
    3394:	e004      	b.n	33a0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    3396:	1821      	adds	r1, r4, r0
    3398:	1c40      	adds	r0, r0, #1
    339a:	f881 513a 	strb.w	r5, [r1, #314]	; 0x13a
    339e:	b2c0      	uxtb	r0, r0
    33a0:	7861      	ldrb	r1, [r4, #1]
    33a2:	4281      	cmp	r1, r0
    33a4:	d8f7      	bhi.n	3396 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    33a6:	2001      	movs	r0, #1
    33a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33ac:	4631      	mov	r1, r6
    33ae:	4638      	mov	r0, r7
    33b0:	f00b fc2e 	bl	ec10 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    33b4:	2808      	cmp	r0, #8
    33b6:	d003      	beq.n	33c0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    33b8:	4420      	add	r0, r4
    33ba:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    33be:	e7f2      	b.n	33a6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    33c0:	2000      	movs	r0, #0
    33c2:	e7f1      	b.n	33a8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    33c4:	20001766 	.word	0x20001766

000033c8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    33c8:	4904      	ldr	r1, [pc, #16]	; (33dc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    33ca:	784a      	ldrb	r2, [r1, #1]
    33cc:	4282      	cmp	r2, r0
    33ce:	d903      	bls.n	33d8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    33d0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    33d4:	1c80      	adds	r0, r0, #2
    33d6:	4770      	bx	lr
    33d8:	2000      	movs	r0, #0
    33da:	4770      	bx	lr
    33dc:	20001766 	.word	0x20001766

000033e0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    33e0:	b510      	push	{r4, lr}
    33e2:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    33e6:	2100      	movs	r1, #0
    33e8:	4805      	ldr	r0, [pc, #20]	; (3400 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    33ea:	f00e fdc6 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    33ee:	4805      	ldr	r0, [pc, #20]	; (3404 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    33f0:	2100      	movs	r1, #0
    33f2:	7001      	strb	r1, [r0, #0]
    33f4:	7041      	strb	r1, [r0, #1]
    33f6:	f44f 7161 	mov.w	r1, #900	; 0x384
    33fa:	8041      	strh	r1, [r0, #2]
    33fc:	bd10      	pop	{r4, pc}
    33fe:	0000      	.short	0x0000
    3400:	20001766 	.word	0x20001766
    3404:	2000035c 	.word	0x2000035c

00003408 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    3408:	4901      	ldr	r1, [pc, #4]	; (3410 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    340a:	7008      	strb	r0, [r1, #0]
    340c:	4770      	bx	lr
    340e:	0000      	.short	0x0000
    3410:	2000035c 	.word	0x2000035c

00003414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    3414:	4801      	ldr	r0, [pc, #4]	; (341c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    3416:	7800      	ldrb	r0, [r0, #0]
    3418:	4770      	bx	lr
    341a:	0000      	.short	0x0000
    341c:	2000035c 	.word	0x2000035c

00003420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    3420:	4b0b      	ldr	r3, [pc, #44]	; (3450 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    3422:	b510      	push	{r4, lr}
    3424:	785c      	ldrb	r4, [r3, #1]
    3426:	4284      	cmp	r4, r0
    3428:	d910      	bls.n	344c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    342a:	4418      	add	r0, r3
    342c:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    3430:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3434:	4418      	add	r0, r3
    3436:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    343a:	700b      	strb	r3, [r1, #0]
    343c:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    3440:	6011      	str	r1, [r2, #0]
    3442:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    3446:	8090      	strh	r0, [r2, #4]
    3448:	2001      	movs	r0, #1
    344a:	bd10      	pop	{r4, pc}
    344c:	2000      	movs	r0, #0
    344e:	bd10      	pop	{r4, pc}
    3450:	20001766 	.word	0x20001766

00003454 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    3454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3458:	4698      	mov	r8, r3
    345a:	4691      	mov	r9, r2
    345c:	460f      	mov	r7, r1
    345e:	4606      	mov	r6, r0
    3460:	f000 f8b0 	bl	35c4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    3464:	4604      	mov	r4, r0
    3466:	2808      	cmp	r0, #8
    3468:	d006      	beq.n	3478 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    346a:	f000 f897 	bl	359c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    346e:	2808      	cmp	r0, #8
    3470:	d002      	beq.n	3478 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    3472:	2012      	movs	r0, #18
    3474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3478:	4d1f      	ldr	r5, [pc, #124]	; (34f8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xa4>)
    347a:	7868      	ldrb	r0, [r5, #1]
    347c:	2808      	cmp	r0, #8
    347e:	d238      	bcs.n	34f2 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x9e>
    3480:	2c08      	cmp	r4, #8
    3482:	d113      	bne.n	34ac <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x58>
    3484:	782c      	ldrb	r4, [r5, #0]
    3486:	1c60      	adds	r0, r4, #1
    3488:	7028      	strb	r0, [r5, #0]
    348a:	2c08      	cmp	r4, #8
    348c:	d303      	bcc.n	3496 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x42>
    348e:	2144      	movs	r1, #68	; 0x44
    3490:	2028      	movs	r0, #40	; 0x28
    3492:	f7fe fa8d 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3496:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    349a:	4428      	add	r0, r5
    349c:	6839      	ldr	r1, [r7, #0]
    349e:	f8c0 1153 	str.w	r1, [r0, #339]	; 0x153
    34a2:	88b9      	ldrh	r1, [r7, #4]
    34a4:	f8a0 1157 	strh.w	r1, [r0, #343]	; 0x157
    34a8:	f880 6152 	strb.w	r6, [r0, #338]	; 0x152
    34ac:	786e      	ldrb	r6, [r5, #1]
    34ae:	2210      	movs	r2, #16
    34b0:	1c70      	adds	r0, r6, #1
    34b2:	7068      	strb	r0, [r5, #1]
    34b4:	eb05 1706 	add.w	r7, r5, r6, lsl #4
    34b8:	1cb8      	adds	r0, r7, #2
    34ba:	4649      	mov	r1, r9
    34bc:	f00b fcf4 	bl	eea8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    34c0:	f107 0082 	add.w	r0, r7, #130	; 0x82
    34c4:	2210      	movs	r2, #16
    34c6:	4641      	mov	r1, r8
    34c8:	f00b fcee 	bl	eea8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    34cc:	2110      	movs	r1, #16
    34ce:	4640      	mov	r0, r8
    34d0:	f00b fd58 	bl	ef84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    34d4:	4435      	add	r5, r6
    34d6:	2110      	movs	r1, #16
    34d8:	f885 0142 	strb.w	r0, [r5, #322]	; 0x142
    34dc:	4648      	mov	r0, r9
    34de:	f205 152b 	addw	r5, r5, #299	; 0x12b
    34e2:	f00b fd4f 	bl	ef84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    34e6:	77e8      	strb	r0, [r5, #31]
    34e8:	f805 4c29 	strb.w	r4, [r5, #-41]
    34ec:	2000      	movs	r0, #0
    34ee:	73e8      	strb	r0, [r5, #15]
    34f0:	e7c0      	b.n	3474 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    34f2:	2007      	movs	r0, #7
    34f4:	e7be      	b.n	3474 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    34f6:	0000      	.short	0x0000
    34f8:	20001766 	.word	0x20001766

000034fc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    34fc:	4806      	ldr	r0, [pc, #24]	; (3518 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    34fe:	b510      	push	{r4, lr}
    3500:	7840      	ldrb	r0, [r0, #1]
    3502:	1e40      	subs	r0, r0, #1
    3504:	b244      	sxtb	r4, r0
    3506:	e004      	b.n	3512 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    3508:	b2e0      	uxtb	r0, r4
    350a:	f000 f8bd 	bl	3688 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x128>
    350e:	1e64      	subs	r4, r4, #1
    3510:	b264      	sxtb	r4, r4
    3512:	2c00      	cmp	r4, #0
    3514:	daf8      	bge.n	3508 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    3516:	bd10      	pop	{r4, pc}
    3518:	20001766 	.word	0x20001766

0000351c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    351c:	4801      	ldr	r0, [pc, #4]	; (3524 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    351e:	8840      	ldrh	r0, [r0, #2]
    3520:	4770      	bx	lr
    3522:	0000      	.short	0x0000
    3524:	2000035c 	.word	0x2000035c

00003528 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    3528:	b138      	cbz	r0, 353a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    352a:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    352e:	4288      	cmp	r0, r1
    3530:	d803      	bhi.n	353a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    3532:	4903      	ldr	r1, [pc, #12]	; (3540 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    3534:	8048      	strh	r0, [r1, #2]
    3536:	2001      	movs	r0, #1
    3538:	4770      	bx	lr
    353a:	2000      	movs	r0, #0
    353c:	4770      	bx	lr
    353e:	0000      	.short	0x0000
    3540:	2000035c 	.word	0x2000035c

00003544 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    3544:	4905      	ldr	r1, [pc, #20]	; (355c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    3546:	784a      	ldrb	r2, [r1, #1]
    3548:	4282      	cmp	r2, r0
    354a:	d903      	bls.n	3554 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    354c:	4408      	add	r0, r1
    354e:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    3552:	b108      	cbz	r0, 3558 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    3554:	2000      	movs	r0, #0
    3556:	4770      	bx	lr
    3558:	2001      	movs	r0, #1
    355a:	4770      	bx	lr
    355c:	20001766 	.word	0x20001766

00003560 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    3560:	4901      	ldr	r1, [pc, #4]	; (3568 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    3562:	7048      	strb	r0, [r1, #1]
    3564:	4770      	bx	lr
    3566:	0000      	.short	0x0000
    3568:	2000035c 	.word	0x2000035c
    356c:	4602      	mov	r2, r0
    356e:	4809      	ldr	r0, [pc, #36]	; (3594 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    3570:	b510      	push	{r4, lr}
    3572:	7800      	ldrb	r0, [r0, #0]
    3574:	460b      	mov	r3, r1
    3576:	b158      	cbz	r0, 3590 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    3578:	4807      	ldr	r0, [pc, #28]	; (3598 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    357a:	7841      	ldrb	r1, [r0, #1]
    357c:	b141      	cbz	r1, 3590 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    357e:	b10b      	cbz	r3, 3584 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    3580:	1c80      	adds	r0, r0, #2
    3582:	e001      	b.n	3588 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    3584:	4804      	ldr	r0, [pc, #16]	; (3598 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    3586:	3082      	adds	r0, #130	; 0x82
    3588:	f004 fff4 	bl	8574 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    358c:	2001      	movs	r0, #1
    358e:	bd10      	pop	{r4, pc}
    3590:	2000      	movs	r0, #0
    3592:	bd10      	pop	{r4, pc}
    3594:	2000035c 	.word	0x2000035c
    3598:	20001766 	.word	0x20001766
    359c:	4908      	ldr	r1, [pc, #32]	; (35c0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    359e:	b510      	push	{r4, lr}
    35a0:	4603      	mov	r3, r0
    35a2:	2000      	movs	r0, #0
    35a4:	784a      	ldrb	r2, [r1, #1]
    35a6:	e006      	b.n	35b6 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    35a8:	180c      	adds	r4, r1, r0
    35aa:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    35ae:	429c      	cmp	r4, r3
    35b0:	d004      	beq.n	35bc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    35b2:	1c40      	adds	r0, r0, #1
    35b4:	b2c0      	uxtb	r0, r0
    35b6:	4282      	cmp	r2, r0
    35b8:	d8f6      	bhi.n	35a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    35ba:	2008      	movs	r0, #8
    35bc:	bd10      	pop	{r4, pc}
    35be:	0000      	.short	0x0000
    35c0:	20001766 	.word	0x20001766
    35c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    35c6:	4c1a      	ldr	r4, [pc, #104]	; (3630 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    35c8:	4603      	mov	r3, r0
    35ca:	2000      	movs	r0, #0
    35cc:	7825      	ldrb	r5, [r4, #0]
    35ce:	e02b      	b.n	3628 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    35d0:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    35d4:	4422      	add	r2, r4
    35d6:	780f      	ldrb	r7, [r1, #0]
    35d8:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    35dc:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    35e0:	ea87 070c 	eor.w	r7, r7, ip
    35e4:	405e      	eors	r6, r3
    35e6:	443e      	add	r6, r7
    35e8:	784f      	ldrb	r7, [r1, #1]
    35ea:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    35ee:	ea87 070c 	eor.w	r7, r7, ip
    35f2:	443e      	add	r6, r7
    35f4:	788f      	ldrb	r7, [r1, #2]
    35f6:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    35fa:	ea87 070c 	eor.w	r7, r7, ip
    35fe:	443e      	add	r6, r7
    3600:	78cf      	ldrb	r7, [r1, #3]
    3602:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    3606:	ea87 070c 	eor.w	r7, r7, ip
    360a:	443e      	add	r6, r7
    360c:	790f      	ldrb	r7, [r1, #4]
    360e:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    3612:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    3616:	ea87 070c 	eor.w	r7, r7, ip
    361a:	443e      	add	r6, r7
    361c:	794f      	ldrb	r7, [r1, #5]
    361e:	4057      	eors	r7, r2
    3620:	42f7      	cmn	r7, r6
    3622:	d004      	beq.n	362e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    3624:	1c40      	adds	r0, r0, #1
    3626:	b2c0      	uxtb	r0, r0
    3628:	4285      	cmp	r5, r0
    362a:	d8d1      	bhi.n	35d0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    362c:	2008      	movs	r0, #8
    362e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3630:	20001766 	.word	0x20001766
    3634:	b570      	push	{r4, r5, r6, lr}
    3636:	4605      	mov	r5, r0
    3638:	f7ff ffb0 	bl	359c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    363c:	2808      	cmp	r0, #8
    363e:	d120      	bne.n	3682 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    3640:	4c10      	ldr	r4, [pc, #64]	; (3684 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x124>)
    3642:	7820      	ldrb	r0, [r4, #0]
    3644:	1e40      	subs	r0, r0, #1
    3646:	b2c0      	uxtb	r0, r0
    3648:	7020      	strb	r0, [r4, #0]
    364a:	42a8      	cmp	r0, r5
    364c:	d019      	beq.n	3682 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    364e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3652:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    3656:	4420      	add	r0, r4
    3658:	4421      	add	r1, r4
    365a:	f500 72ab 	add.w	r2, r0, #342	; 0x156
    365e:	f8d0 0152 	ldr.w	r0, [r0, #338]	; 0x152
    3662:	f8c1 0152 	str.w	r0, [r1, #338]	; 0x152
    3666:	8810      	ldrh	r0, [r2, #0]
    3668:	f8a1 0156 	strh.w	r0, [r1, #342]	; 0x156
    366c:	7890      	ldrb	r0, [r2, #2]
    366e:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
    3672:	7820      	ldrb	r0, [r4, #0]
    3674:	f7ff ff92 	bl	359c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    3678:	2808      	cmp	r0, #8
    367a:	d002      	beq.n	3682 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    367c:	4420      	add	r0, r4
    367e:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    3682:	bd70      	pop	{r4, r5, r6, pc}
    3684:	20001766 	.word	0x20001766
    3688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    368c:	4c1d      	ldr	r4, [pc, #116]	; (3704 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x1a4>)
    368e:	4606      	mov	r6, r0
    3690:	19a7      	adds	r7, r4, r6
    3692:	7860      	ldrb	r0, [r4, #1]
    3694:	1e40      	subs	r0, r0, #1
    3696:	b2c5      	uxtb	r5, r0
    3698:	7065      	strb	r5, [r4, #1]
    369a:	f897 a102 	ldrb.w	sl, [r7, #258]	; 0x102
    369e:	42ae      	cmp	r6, r5
    36a0:	d02a      	beq.n	36f8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x198>
    36a2:	eb04 1905 	add.w	r9, r4, r5, lsl #4
    36a6:	eb04 1806 	add.w	r8, r4, r6, lsl #4
    36aa:	f109 0102 	add.w	r1, r9, #2
    36ae:	f108 0002 	add.w	r0, r8, #2
    36b2:	2210      	movs	r2, #16
    36b4:	f00e fbe7 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    36b8:	f109 0182 	add.w	r1, r9, #130	; 0x82
    36bc:	f108 0082 	add.w	r0, r8, #130	; 0x82
    36c0:	2210      	movs	r2, #16
    36c2:	f00e fbe0 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    36c6:	1960      	adds	r0, r4, r5
    36c8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    36cc:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    36d0:	f887 1102 	strb.w	r1, [r7, #258]	; 0x102
    36d4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    36d8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    36dc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    36e0:	f8d2 310a 	ldr.w	r3, [r2, #266]	; 0x10a
    36e4:	f8c1 310a 	str.w	r3, [r1, #266]	; 0x10a
    36e8:	f8b2 210e 	ldrh.w	r2, [r2, #270]	; 0x10e
    36ec:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    36f0:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    36f4:	f887 013a 	strb.w	r0, [r7, #314]	; 0x13a
    36f8:	4650      	mov	r0, sl
    36fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36fe:	f7ff bf99 	b.w	3634 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd4>
    3702:	0000      	.short	0x0000
    3704:	20001766 	.word	0x20001766

00003708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    3708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    370c:	4604      	mov	r4, r0
    370e:	f100 0580 	add.w	r5, r0, #128	; 0x80
    3712:	f04f 0901 	mov.w	r9, #1
    3716:	b171      	cbz	r1, 3736 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    3718:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    371c:	1e7e      	subs	r6, r7, #1
    371e:	2901      	cmp	r1, #1
    3720:	d029      	beq.n	3776 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6e>
    3722:	2902      	cmp	r1, #2
    3724:	d04e      	beq.n	37c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    3726:	2903      	cmp	r1, #3
    3728:	d123      	bne.n	3772 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    372a:	4639      	mov	r1, r7
    372c:	4630      	mov	r0, r6
    372e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3732:	f00b bc89 	b.w	f048 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    3736:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    373a:	2100      	movs	r1, #0
    373c:	f00e fc1d 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3740:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    3744:	4924      	ldr	r1, [pc, #144]	; (37d8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    3746:	66e9      	str	r1, [r5, #108]	; 0x6c
    3748:	4620      	mov	r0, r4
    374a:	2107      	movs	r1, #7
    374c:	6729      	str	r1, [r5, #112]	; 0x70
    374e:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    3752:	f021 0104 	bic.w	r1, r1, #4
    3756:	7001      	strb	r1, [r0, #0]
    3758:	20fe      	movs	r0, #254	; 0xfe
    375a:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    375e:	207f      	movs	r0, #127	; 0x7f
    3760:	7668      	strb	r0, [r5, #25]
    3762:	481e      	ldr	r0, [pc, #120]	; (37dc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>)
    3764:	60a8      	str	r0, [r5, #8]
    3766:	2000      	movs	r0, #0
    3768:	e9c5 0000 	strd	r0, r0, [r5]
    376c:	2020      	movs	r0, #32
    376e:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    3772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3776:	f04f 0800 	mov.w	r8, #0
    377a:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    377e:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    3782:	6921      	ldr	r1, [r4, #16]
    3784:	4816      	ldr	r0, [pc, #88]	; (37e0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd8>)
    3786:	460a      	mov	r2, r1
    3788:	4408      	add	r0, r1
    378a:	fbb0 f0f1 	udiv	r0, r0, r1
    378e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    3792:	f640 30b8 	movw	r0, #3000	; 0xbb8
    3796:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    379a:	8b63      	ldrh	r3, [r4, #26]
    379c:	4628      	mov	r0, r5
    379e:	f000 f821 	bl	37e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    37a2:	4639      	mov	r1, r7
    37a4:	4630      	mov	r0, r6
    37a6:	f00b fc4f 	bl	f048 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    37aa:	f00e faee 	bl	11d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    37ae:	b118      	cbz	r0, 37b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb0>
    37b0:	6960      	ldr	r0, [r4, #20]
    37b2:	f000 fbbd 	bl	3f30 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    37b6:	b110      	cbz	r0, 37be <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb6>
    37b8:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    37bc:	e7d9      	b.n	3772 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    37be:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    37c2:	e7d6      	b.n	3772 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    37c4:	6901      	ldr	r1, [r0, #16]
    37c6:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    37ca:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    37ce:	4628      	mov	r0, r5
    37d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    37d4:	f000 b806 	b.w	37e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    37d8:	c404492f 	.word	0xc404492f
    37dc:	fffce000 	.word	0xfffce000
    37e0:	01c9c37f 	.word	0x01c9c37f
    37e4:	b510      	push	{r4, lr}
    37e6:	2400      	movs	r4, #0
    37e8:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    37ec:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    37f0:	434c      	muls	r4, r1
    37f2:	fbb4 f4f2 	udiv	r4, r4, r2
    37f6:	f820 4910 	strh.w	r4, [r0], #-16
    37fa:	f240 2471 	movw	r4, #625	; 0x271
    37fe:	4363      	muls	r3, r4
    3800:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    3804:	1e5b      	subs	r3, r3, #1
    3806:	fbb3 f3f2 	udiv	r3, r3, r2
    380a:	81c3      	strh	r3, [r0, #14]
    380c:	4b09      	ldr	r3, [pc, #36]	; (3834 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x12c>)
    380e:	fbb3 f3f2 	udiv	r3, r3, r2
    3812:	1c5b      	adds	r3, r3, #1
    3814:	8283      	strh	r3, [r0, #20]
    3816:	8903      	ldrh	r3, [r0, #8]
    3818:	4363      	muls	r3, r4
    381a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    381e:	1e5b      	subs	r3, r3, #1
    3820:	fbb3 f3f2 	udiv	r3, r3, r2
    3824:	6043      	str	r3, [r0, #4]
    3826:	6803      	ldr	r3, [r0, #0]
    3828:	434b      	muls	r3, r1
    382a:	fbb3 f1f2 	udiv	r1, r3, r2
    382e:	6001      	str	r1, [r0, #0]
    3830:	bd10      	pop	{r4, pc}
    3832:	0000      	.short	0x0000
    3834:	02625a00 	.word	0x02625a00

00003838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    3838:	4902      	ldr	r1, [pc, #8]	; (3844 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    383a:	f991 1000 	ldrsb.w	r1, [r1]
    383e:	f00b bbb4 	b.w	efaa <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    3842:	0000      	.short	0x0000
    3844:	20000374 	.word	0x20000374

00003848 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    3848:	b508      	push	{r3, lr}
    384a:	207f      	movs	r0, #127	; 0x7f
    384c:	f88d 0000 	strb.w	r0, [sp]
    3850:	4668      	mov	r0, sp
    3852:	f005 fbc3 	bl	8fdc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    3856:	b140      	cbz	r0, 386a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    3858:	4805      	ldr	r0, [pc, #20]	; (3870 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    385a:	7840      	ldrb	r0, [r0, #1]
    385c:	4240      	negs	r0, r0
    385e:	b241      	sxtb	r1, r0
    3860:	f99d 0000 	ldrsb.w	r0, [sp]
    3864:	f00b fba1 	bl	efaa <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    3868:	bd08      	pop	{r3, pc}
    386a:	f99d 0000 	ldrsb.w	r0, [sp]
    386e:	bd08      	pop	{r3, pc}
    3870:	20000374 	.word	0x20000374

00003874 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    3874:	4a01      	ldr	r2, [pc, #4]	; (387c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    3876:	7010      	strb	r0, [r2, #0]
    3878:	7051      	strb	r1, [r2, #1]
    387a:	4770      	bx	lr
    387c:	20000374 	.word	0x20000374
    3880:	b570      	push	{r4, r5, r6, lr}
    3882:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    3886:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    388a:	2401      	movs	r4, #1
    388c:	fb03 2101 	mla	r1, r3, r1, r2
    3890:	2225      	movs	r2, #37	; 0x25
    3892:	fbb1 f3f2 	udiv	r3, r1, r2
    3896:	fb02 1113 	mls	r1, r2, r3, r1
    389a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    389e:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    38a2:	f001 0307 	and.w	r3, r1, #7
    38a6:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    38aa:	fa04 f303 	lsl.w	r3, r4, r3
    38ae:	421a      	tst	r2, r3
    38b0:	d004      	beq.n	38bc <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x48>
    38b2:	bf00      	nop
    38b4:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    38b8:	2000      	movs	r0, #0
    38ba:	bd70      	pop	{r4, r5, r6, pc}
    38bc:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    38c0:	fbb1 f3f2 	udiv	r3, r1, r2
    38c4:	fb02 1113 	mls	r1, r2, r3, r1
    38c8:	1c49      	adds	r1, r1, #1
    38ca:	b2c9      	uxtb	r1, r1
    38cc:	2300      	movs	r3, #0
    38ce:	18c5      	adds	r5, r0, r3
    38d0:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    38d4:	428a      	cmp	r2, r1
    38d6:	d312      	bcc.n	38fe <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8a>
    38d8:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    38dc:	2200      	movs	r2, #0
    38de:	bf00      	nop
    38e0:	fa04 f602 	lsl.w	r6, r4, r2
    38e4:	4235      	tst	r5, r6
    38e6:	d001      	beq.n	38ec <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x78>
    38e8:	1e49      	subs	r1, r1, #1
    38ea:	b2c9      	uxtb	r1, r1
    38ec:	b121      	cbz	r1, 38f8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x84>
    38ee:	1c52      	adds	r2, r2, #1
    38f0:	b2d2      	uxtb	r2, r2
    38f2:	2a08      	cmp	r2, #8
    38f4:	d3f4      	bcc.n	38e0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x6c>
    38f6:	e004      	b.n	3902 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8e>
    38f8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    38fc:	e7da      	b.n	38b4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x40>
    38fe:	1a89      	subs	r1, r1, r2
    3900:	b2c9      	uxtb	r1, r1
    3902:	1c5b      	adds	r3, r3, #1
    3904:	b2db      	uxtb	r3, r3
    3906:	2b05      	cmp	r3, #5
    3908:	d3e1      	bcc.n	38ce <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x5a>
    390a:	201f      	movs	r0, #31
    390c:	bd70      	pop	{r4, r5, r6, pc}
    390e:	0000      	movs	r0, r0
    3910:	b570      	push	{r4, r5, r6, lr}
    3912:	1c49      	adds	r1, r1, #1
    3914:	2300      	movs	r3, #0
    3916:	b2c9      	uxtb	r1, r1
    3918:	2401      	movs	r4, #1
    391a:	18c5      	adds	r5, r0, r3
    391c:	79aa      	ldrb	r2, [r5, #6]
    391e:	428a      	cmp	r2, r1
    3920:	d312      	bcc.n	3948 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd4>
    3922:	f895 5001 	ldrb.w	r5, [r5, #1]
    3926:	2200      	movs	r2, #0
    3928:	fa04 f602 	lsl.w	r6, r4, r2
    392c:	4235      	tst	r5, r6
    392e:	d001      	beq.n	3934 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc0>
    3930:	1e49      	subs	r1, r1, #1
    3932:	b2c9      	uxtb	r1, r1
    3934:	b121      	cbz	r1, 3940 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xcc>
    3936:	1c52      	adds	r2, r2, #1
    3938:	b2d2      	uxtb	r2, r2
    393a:	2a08      	cmp	r2, #8
    393c:	d3f4      	bcc.n	3928 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xb4>
    393e:	e005      	b.n	394c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd8>
    3940:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    3944:	b2c0      	uxtb	r0, r0
    3946:	bd70      	pop	{r4, r5, r6, pc}
    3948:	1a89      	subs	r1, r1, r2
    394a:	b2c9      	uxtb	r1, r1
    394c:	1c5b      	adds	r3, r3, #1
    394e:	b2db      	uxtb	r3, r3
    3950:	2b05      	cmp	r3, #5
    3952:	d3e2      	bcc.n	391a <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xa6>
    3954:	219d      	movs	r1, #157	; 0x9d
    3956:	2046      	movs	r0, #70	; 0x46
    3958:	f7fe f82a 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000395c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    395c:	7841      	ldrb	r1, [r0, #1]
    395e:	b141      	cbz	r1, 3972 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    3960:	78c0      	ldrb	r0, [r0, #3]
    3962:	282b      	cmp	r0, #43	; 0x2b
    3964:	d203      	bcs.n	396e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    3966:	4a04      	ldr	r2, [pc, #16]	; (3978 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    3968:	5c10      	ldrb	r0, [r2, r0]
    396a:	4288      	cmp	r0, r1
    396c:	d101      	bne.n	3972 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    396e:	2001      	movs	r0, #1
    3970:	4770      	bx	lr
    3972:	2000      	movs	r0, #0
    3974:	4770      	bx	lr
    3976:	0000      	.short	0x0000
    3978:	000120c4 	.word	0x000120c4

0000397c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    397c:	b510      	push	{r4, lr}
    397e:	2201      	movs	r2, #1
    3980:	70c1      	strb	r1, [r0, #3]
    3982:	292b      	cmp	r1, #43	; 0x2b
    3984:	d202      	bcs.n	398c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    3986:	4a06      	ldr	r2, [pc, #24]	; (39a0 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    3988:	5c52      	ldrb	r2, [r2, r1]
    398a:	e006      	b.n	399a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    398c:	29ff      	cmp	r1, #255	; 0xff
    398e:	d004      	beq.n	399a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    3990:	f240 4174 	movw	r1, #1140	; 0x474
    3994:	202a      	movs	r0, #42	; 0x2a
    3996:	f7fe f80b 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    399a:	7042      	strb	r2, [r0, #1]
    399c:	bd10      	pop	{r4, pc}
    399e:	0000      	.short	0x0000
    39a0:	000120c4 	.word	0x000120c4

000039a4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    39a4:	4904      	ldr	r1, [pc, #16]	; (39b8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    39a6:	7c89      	ldrb	r1, [r1, #18]
    39a8:	0749      	lsls	r1, r1, #29
    39aa:	d400      	bmi.n	39ae <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    39ac:	b108      	cbz	r0, 39b2 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    39ae:	2000      	movs	r0, #0
    39b0:	4770      	bx	lr
    39b2:	2001      	movs	r0, #1
    39b4:	4770      	bx	lr
    39b6:	0000      	.short	0x0000
    39b8:	20001668 	.word	0x20001668

000039bc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    39bc:	4803      	ldr	r0, [pc, #12]	; (39cc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    39be:	7c80      	ldrb	r0, [r0, #18]
    39c0:	0780      	lsls	r0, r0, #30
    39c2:	d401      	bmi.n	39c8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    39c4:	2001      	movs	r0, #1
    39c6:	4770      	bx	lr
    39c8:	2000      	movs	r0, #0
    39ca:	4770      	bx	lr
    39cc:	20001668 	.word	0x20001668

000039d0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    39d0:	4803      	ldr	r0, [pc, #12]	; (39e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    39d2:	7c80      	ldrb	r0, [r0, #18]
    39d4:	07c0      	lsls	r0, r0, #31
    39d6:	d001      	beq.n	39dc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    39d8:	2000      	movs	r0, #0
    39da:	4770      	bx	lr
    39dc:	2001      	movs	r0, #1
    39de:	4770      	bx	lr
    39e0:	20001668 	.word	0x20001668
    39e4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    39e8:	4688      	mov	r8, r1
    39ea:	4699      	mov	r9, r3
    39ec:	4615      	mov	r5, r2
    39ee:	4604      	mov	r4, r0
    39f0:	4669      	mov	r1, sp
    39f2:	f00b f944 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    39f6:	bbe0      	cbnz	r0, 3a72 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    39f8:	9e01      	ldr	r6, [sp, #4]
    39fa:	2700      	movs	r7, #0
    39fc:	3680      	adds	r6, #128	; 0x80
    39fe:	b17d      	cbz	r5, 3a20 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    3a00:	4620      	mov	r0, r4
    3a02:	f7fe fcad 	bl	2360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    3a06:	0004      	movs	r4, r0
    3a08:	d00e      	beq.n	3a28 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    3a0a:	4629      	mov	r1, r5
    3a0c:	f00a fd38 	bl	e480 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    3a10:	b118      	cbz	r0, 3a1a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    3a12:	491b      	ldr	r1, [pc, #108]	; (3a80 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    3a14:	8849      	ldrh	r1, [r1, #2]
    3a16:	42a9      	cmp	r1, r5
    3a18:	d208      	bcs.n	3a2c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    3a1a:	2000      	movs	r0, #0
    3a1c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    3a20:	2001      	movs	r0, #1
    3a22:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    3a26:	e024      	b.n	3a72 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    3a28:	2167      	movs	r1, #103	; 0x67
    3a2a:	e025      	b.n	3a78 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    3a2c:	4601      	mov	r1, r0
    3a2e:	aa02      	add	r2, sp, #8
    3a30:	4620      	mov	r0, r4
    3a32:	f00a fd1e 	bl	e472 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    3a36:	9802      	ldr	r0, [sp, #8]
    3a38:	8007      	strh	r7, [r0, #0]
    3a3a:	7087      	strb	r7, [r0, #2]
    3a3c:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    3a40:	b109      	cbz	r1, 3a46 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    3a42:	f04f 0802 	mov.w	r8, #2
    3a46:	4641      	mov	r1, r8
    3a48:	f00b fc51 	bl	f2ee <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    3a4c:	9802      	ldr	r0, [sp, #8]
    3a4e:	462a      	mov	r2, r5
    3a50:	4649      	mov	r1, r9
    3a52:	1cc0      	adds	r0, r0, #3
    3a54:	f00e fa17 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3a58:	4620      	mov	r0, r4
    3a5a:	4629      	mov	r1, r5
    3a5c:	f00a fcc7 	bl	e3ee <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    3a60:	b148      	cbz	r0, 3a76 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    3a62:	4668      	mov	r0, sp
    3a64:	f00b fc9e 	bl	f3a4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    3a68:	9801      	ldr	r0, [sp, #4]
    3a6a:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    3a6e:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    3a72:	2001      	movs	r0, #1
    3a74:	e7d2      	b.n	3a1c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    3a76:	217c      	movs	r1, #124	; 0x7c
    3a78:	202b      	movs	r0, #43	; 0x2b
    3a7a:	f7fd ff99 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a7e:	0000      	.short	0x0000
    3a80:	20001668 	.word	0x20001668

00003a84 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    3a84:	4809      	ldr	r0, [pc, #36]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3a86:	b082      	sub	sp, #8
    3a88:	7a00      	ldrb	r0, [r0, #8]
    3a8a:	f88d 0000 	strb.w	r0, [sp]
    3a8e:	9800      	ldr	r0, [sp, #0]
    3a90:	9000      	str	r0, [sp, #0]
    3a92:	f89d 0000 	ldrb.w	r0, [sp]
    3a96:	2800      	cmp	r0, #0
    3a98:	d105      	bne.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
    3a9a:	2202      	movs	r2, #2
    3a9c:	4904      	ldr	r1, [pc, #16]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a9e:	4803      	ldr	r0, [pc, #12]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3aa0:	b002      	add	sp, #8
    3aa2:	f00b bcab 	b.w	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3aa6:	b002      	add	sp, #8
    3aa8:	4770      	bx	lr
    3aaa:	0000      	.short	0x0000
    3aac:	20001680 	.word	0x20001680
    3ab0:	0000f443 	.word	0x0000f443

00003ab4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    3ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ab8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 3c34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    3abc:	4f5e      	ldr	r7, [pc, #376]	; (3c38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    3abe:	4683      	mov	fp, r0
    3ac0:	f04f 0a01 	mov.w	sl, #1
    3ac4:	2600      	movs	r6, #0
    3ac6:	6878      	ldr	r0, [r7, #4]
    3ac8:	4635      	mov	r5, r6
    3aca:	7a00      	ldrb	r0, [r0, #8]
    3acc:	f88d 0000 	strb.w	r0, [sp]
    3ad0:	9800      	ldr	r0, [sp, #0]
    3ad2:	9000      	str	r0, [sp, #0]
    3ad4:	f89d 1000 	ldrb.w	r1, [sp]
    3ad8:	2910      	cmp	r1, #16
    3ada:	d106      	bne.n	3aea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    3adc:	f899 1013 	ldrb.w	r1, [r9, #19]
    3ae0:	b119      	cbz	r1, 3aea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    3ae2:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    3ae6:	2800      	cmp	r0, #0
    3ae8:	d073      	beq.n	3bd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    3aea:	f88d 6000 	strb.w	r6, [sp]
    3aee:	4668      	mov	r0, sp
    3af0:	f000 f906 	bl	3d00 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    3af4:	f89d 1000 	ldrb.w	r1, [sp]
    3af8:	2900      	cmp	r1, #0
    3afa:	d1f8      	bne.n	3aee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    3afc:	2800      	cmp	r0, #0
    3afe:	d068      	beq.n	3bd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    3b00:	4604      	mov	r4, r0
    3b02:	7a00      	ldrb	r0, [r0, #8]
    3b04:	f88d 0000 	strb.w	r0, [sp]
    3b08:	9800      	ldr	r0, [sp, #0]
    3b0a:	9000      	str	r0, [sp, #0]
    3b0c:	f89d 8000 	ldrb.w	r8, [sp]
    3b10:	f104 0008 	add.w	r0, r4, #8
    3b14:	2105      	movs	r1, #5
    3b16:	9000      	str	r0, [sp, #0]
    3b18:	7001      	strb	r1, [r0, #0]
    3b1a:	4640      	mov	r0, r8
    3b1c:	f1b8 0f08 	cmp.w	r8, #8
    3b20:	d042      	beq.n	3ba8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
    3b22:	dc07      	bgt.n	3b34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    3b24:	2802      	cmp	r0, #2
    3b26:	d00d      	beq.n	3b44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    3b28:	2803      	cmp	r0, #3
    3b2a:	d017      	beq.n	3b5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    3b2c:	f1b8 0f04 	cmp.w	r8, #4
    3b30:	d105      	bne.n	3b3e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
    3b32:	e01d      	b.n	3b70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
    3b34:	280f      	cmp	r0, #15
    3b36:	d052      	beq.n	3bde <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    3b38:	f1b8 0f10 	cmp.w	r8, #16
    3b3c:	d059      	beq.n	3bf2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    3b3e:	f240 214a 	movw	r1, #586	; 0x24a
    3b42:	e065      	b.n	3c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3b44:	6862      	ldr	r2, [r4, #4]
    3b46:	b132      	cbz	r2, 3b56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    3b48:	4659      	mov	r1, fp
    3b4a:	4620      	mov	r0, r4
    3b4c:	4790      	blx	r2
    3b4e:	2004      	movs	r0, #4
    3b50:	f360 0507 	bfi	r5, r0, #0, #8
    3b54:	e010      	b.n	3b78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    3b56:	f240 11c3 	movw	r1, #451	; 0x1c3
    3b5a:	e059      	b.n	3c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3b5c:	6862      	ldr	r2, [r4, #4]
    3b5e:	b122      	cbz	r2, 3b6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    3b60:	4659      	mov	r1, fp
    3b62:	4620      	mov	r0, r4
    3b64:	4790      	blx	r2
    3b66:	4605      	mov	r5, r0
    3b68:	e006      	b.n	3b78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    3b6a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    3b6e:	e04f      	b.n	3c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3b70:	6861      	ldr	r1, [r4, #4]
    3b72:	b1b1      	cbz	r1, 3ba2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    3b74:	4620      	mov	r0, r4
    3b76:	4788      	blx	r1
    3b78:	f3c5 2007 	ubfx	r0, r5, #8, #8
    3b7c:	2801      	cmp	r0, #1
    3b7e:	d04a      	beq.n	3c16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
    3b80:	f3ef 8110 	mrs	r1, PRIMASK
    3b84:	b672      	cpsid	i
    3b86:	7a20      	ldrb	r0, [r4, #8]
    3b88:	f88d 0000 	strb.w	r0, [sp]
    3b8c:	9800      	ldr	r0, [sp, #0]
    3b8e:	9000      	str	r0, [sp, #0]
    3b90:	f89d 0000 	ldrb.w	r0, [sp]
    3b94:	2805      	cmp	r0, #5
    3b96:	d042      	beq.n	3c1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    3b98:	b3b0      	cbz	r0, 3c08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
    3b9a:	f366 0507 	bfi	r5, r6, #0, #8
    3b9e:	b3a1      	cbz	r1, 3c0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    3ba0:	e041      	b.n	3c26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    3ba2:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    3ba6:	e033      	b.n	3c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3ba8:	6860      	ldr	r0, [r4, #4]
    3baa:	465d      	mov	r5, fp
    3bac:	b198      	cbz	r0, 3bd6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    3bae:	8804      	ldrh	r4, [r0, #0]
    3bb0:	4620      	mov	r0, r4
    3bb2:	f7fe fbd5 	bl	2360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    3bb6:	b180      	cbz	r0, 3bda <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    3bb8:	706e      	strb	r6, [r5, #1]
    3bba:	210d      	movs	r1, #13
    3bbc:	7029      	strb	r1, [r5, #0]
    3bbe:	80ec      	strh	r4, [r5, #6]
    3bc0:	f8a5 a008 	strh.w	sl, [r5, #8]
    3bc4:	f885 a004 	strb.w	sl, [r5, #4]
    3bc8:	4631      	mov	r1, r6
    3bca:	f00a fcf0 	bl	e5ae <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    3bce:	2004      	movs	r0, #4
    3bd0:	613e      	str	r6, [r7, #16]
    3bd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3bd6:	21e5      	movs	r1, #229	; 0xe5
    3bd8:	e01a      	b.n	3c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3bda:	21c5      	movs	r1, #197	; 0xc5
    3bdc:	e018      	b.n	3c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3bde:	f88b 6001 	strb.w	r6, [fp, #1]
    3be2:	2116      	movs	r1, #22
    3be4:	f88b 1000 	strb.w	r1, [fp]
    3be8:	f8d4 1009 	ldr.w	r1, [r4, #9]
    3bec:	f8cb 1004 	str.w	r1, [fp, #4]
    3bf0:	e7ad      	b.n	3b4e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    3bf2:	4812      	ldr	r0, [pc, #72]	; (3c3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    3bf4:	6802      	ldr	r2, [r0, #0]
    3bf6:	b122      	cbz	r2, 3c02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    3bf8:	6860      	ldr	r0, [r4, #4]
    3bfa:	b138      	cbz	r0, 3c0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    3bfc:	8800      	ldrh	r0, [r0, #0]
    3bfe:	4659      	mov	r1, fp
    3c00:	4790      	blx	r2
    3c02:	2002      	movs	r0, #2
    3c04:	613e      	str	r6, [r7, #16]
    3c06:	e7e4      	b.n	3bd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    3c08:	e009      	b.n	3c1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    3c0a:	e00b      	b.n	3c24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    3c0c:	f44f 7110 	mov.w	r1, #576	; 0x240
    3c10:	2010      	movs	r0, #16
    3c12:	f7fd fecd 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c16:	9800      	ldr	r0, [sp, #0]
    3c18:	4641      	mov	r1, r8
    3c1a:	7001      	strb	r1, [r0, #0]
    3c1c:	e003      	b.n	3c26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    3c1e:	7226      	strb	r6, [r4, #8]
    3c20:	613e      	str	r6, [r7, #16]
    3c22:	e7bc      	b.n	3b9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    3c24:	b662      	cpsie	i
    3c26:	f015 0fff 	tst.w	r5, #255	; 0xff
    3c2a:	f43f af4c 	beq.w	3ac6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    3c2e:	b2e8      	uxtb	r0, r5
    3c30:	e7cf      	b.n	3bd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    3c32:	0000      	.short	0x0000
    3c34:	20001668 	.word	0x20001668
    3c38:	20001694 	.word	0x20001694
    3c3c:	200000c8 	.word	0x200000c8

00003c40 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    3c40:	4901      	ldr	r1, [pc, #4]	; (3c48 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    3c42:	7008      	strb	r0, [r1, #0]
    3c44:	f000 b8be 	b.w	3dc4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>
    3c48:	20000376 	.word	0x20000376

00003c4c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    3c4c:	4902      	ldr	r1, [pc, #8]	; (3c58 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    3c4e:	4801      	ldr	r0, [pc, #4]	; (3c54 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    3c50:	6008      	str	r0, [r1, #0]
    3c52:	4770      	bx	lr
    3c54:	00003c5d 	.word	0x00003c5d
    3c58:	200000c8 	.word	0x200000c8
    3c5c:	b538      	push	{r3, r4, r5, lr}
    3c5e:	000d      	movs	r5, r1
    3c60:	d014      	beq.n	3c8c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    3c62:	80a8      	strh	r0, [r5, #4]
    3c64:	2100      	movs	r1, #0
    3c66:	7269      	strb	r1, [r5, #9]
    3c68:	f7fe fb64 	bl	2334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    3c6c:	4604      	mov	r4, r0
    3c6e:	f00a fbe2 	bl	e436 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    3c72:	b170      	cbz	r0, 3c92 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x46>
    3c74:	4601      	mov	r1, r0
    3c76:	466a      	mov	r2, sp
    3c78:	4620      	mov	r0, r4
    3c7a:	f00a fbfa 	bl	e472 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    3c7e:	80e8      	strh	r0, [r5, #6]
    3c80:	b150      	cbz	r0, 3c98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    3c82:	28fb      	cmp	r0, #251	; 0xfb
    3c84:	d90b      	bls.n	3c9e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    3c86:	f240 1123 	movw	r1, #291	; 0x123
    3c8a:	e033      	b.n	3cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3c8c:	f240 1113 	movw	r1, #275	; 0x113
    3c90:	e030      	b.n	3cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3c92:	f44f 718e 	mov.w	r1, #284	; 0x11c
    3c96:	e02d      	b.n	3cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3c98:	f240 1121 	movw	r1, #289	; 0x121
    3c9c:	e02a      	b.n	3cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3c9e:	9800      	ldr	r0, [sp, #0]
    3ca0:	f00b fad1 	bl	f246 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    3ca4:	2801      	cmp	r0, #1
    3ca6:	d004      	beq.n	3cb2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    3ca8:	2802      	cmp	r0, #2
    3caa:	d002      	beq.n	3cb2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    3cac:	f240 1133 	movw	r1, #307	; 0x133
    3cb0:	e020      	b.n	3cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3cb2:	7228      	strb	r0, [r5, #8]
    3cb4:	6828      	ldr	r0, [r5, #0]
    3cb6:	b1a8      	cbz	r0, 3ce4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>
    3cb8:	9900      	ldr	r1, [sp, #0]
    3cba:	88ea      	ldrh	r2, [r5, #6]
    3cbc:	1cc9      	adds	r1, r1, #3
    3cbe:	f00e f8e2 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3cc2:	4620      	mov	r0, r4
    3cc4:	f00a fb7f 	bl	e3c6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    3cc8:	b178      	cbz	r0, 3cea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9e>
    3cca:	4620      	mov	r0, r4
    3ccc:	2100      	movs	r1, #0
    3cce:	f00a fc6e 	bl	e5ae <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    3cd2:	b168      	cbz	r0, 3cf0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa4>
    3cd4:	4809      	ldr	r0, [pc, #36]	; (3cfc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>)
    3cd6:	7cc1      	ldrb	r1, [r0, #19]
    3cd8:	2900      	cmp	r1, #0
    3cda:	d002      	beq.n	3ce2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    3cdc:	8a81      	ldrh	r1, [r0, #20]
    3cde:	1e49      	subs	r1, r1, #1
    3ce0:	8281      	strh	r1, [r0, #20]
    3ce2:	bd38      	pop	{r3, r4, r5, pc}
    3ce4:	f44f 719d 	mov.w	r1, #314	; 0x13a
    3ce8:	e004      	b.n	3cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3cea:	f240 113f 	movw	r1, #319	; 0x13f
    3cee:	e001      	b.n	3cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3cf0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3cf4:	2010      	movs	r0, #16
    3cf6:	f7fd fe5b 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cfa:	0000      	.short	0x0000
    3cfc:	20001668 	.word	0x20001668
    3d00:	b538      	push	{r3, r4, r5, lr}
    3d02:	4603      	mov	r3, r0
    3d04:	4917      	ldr	r1, [pc, #92]	; (3d64 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x118>)
    3d06:	2000      	movs	r0, #0
    3d08:	7018      	strb	r0, [r3, #0]
    3d0a:	6908      	ldr	r0, [r1, #16]
    3d0c:	2401      	movs	r4, #1
    3d0e:	b140      	cbz	r0, 3d22 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd6>
    3d10:	7a02      	ldrb	r2, [r0, #8]
    3d12:	f88d 2000 	strb.w	r2, [sp]
    3d16:	9a00      	ldr	r2, [sp, #0]
    3d18:	9200      	str	r2, [sp, #0]
    3d1a:	f89d 5000 	ldrb.w	r5, [sp]
    3d1e:	2d00      	cmp	r5, #0
    3d20:	d111      	bne.n	3d46 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfa>
    3d22:	6848      	ldr	r0, [r1, #4]
    3d24:	7a02      	ldrb	r2, [r0, #8]
    3d26:	f88d 2000 	strb.w	r2, [sp]
    3d2a:	9a00      	ldr	r2, [sp, #0]
    3d2c:	9200      	str	r2, [sp, #0]
    3d2e:	f89d 5000 	ldrb.w	r5, [sp]
    3d32:	2d01      	cmp	r5, #1
    3d34:	d006      	beq.n	3d44 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    3d36:	f3ef 8210 	mrs	r2, PRIMASK
    3d3a:	b672      	cpsid	i
    3d3c:	6805      	ldr	r5, [r0, #0]
    3d3e:	604d      	str	r5, [r1, #4]
    3d40:	b112      	cbz	r2, 3d48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>
    3d42:	e002      	b.n	3d4a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    3d44:	2000      	movs	r0, #0
    3d46:	bd38      	pop	{r3, r4, r5, pc}
    3d48:	b662      	cpsie	i
    3d4a:	7a02      	ldrb	r2, [r0, #8]
    3d4c:	f88d 2000 	strb.w	r2, [sp]
    3d50:	9a00      	ldr	r2, [sp, #0]
    3d52:	9200      	str	r2, [sp, #0]
    3d54:	f89d 5000 	ldrb.w	r5, [sp]
    3d58:	b10d      	cbz	r5, 3d5e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x112>
    3d5a:	6108      	str	r0, [r1, #16]
    3d5c:	bd38      	pop	{r3, r4, r5, pc}
    3d5e:	701c      	strb	r4, [r3, #0]
    3d60:	bd38      	pop	{r3, r4, r5, pc}
    3d62:	0000      	.short	0x0000
    3d64:	20001694 	.word	0x20001694
    3d68:	b538      	push	{r3, r4, r5, lr}
    3d6a:	b1d0      	cbz	r0, 3da2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    3d6c:	6041      	str	r1, [r0, #4]
    3d6e:	f100 0108 	add.w	r1, r0, #8
    3d72:	700a      	strb	r2, [r1, #0]
    3d74:	f3ef 8310 	mrs	r3, PRIMASK
    3d78:	b672      	cpsid	i
    3d7a:	4c10      	ldr	r4, [pc, #64]	; (3dbc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x170>)
    3d7c:	6004      	str	r4, [r0, #0]
    3d7e:	1f21      	subs	r1, r4, #4
    3d80:	684a      	ldr	r2, [r1, #4]
    3d82:	b14a      	cbz	r2, 3d98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    3d84:	7a12      	ldrb	r2, [r2, #8]
    3d86:	f88d 2000 	strb.w	r2, [sp]
    3d8a:	9a00      	ldr	r2, [sp, #0]
    3d8c:	9200      	str	r2, [sp, #0]
    3d8e:	f89d 5000 	ldrb.w	r5, [sp]
    3d92:	2d01      	cmp	r5, #1
    3d94:	d100      	bne.n	3d98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    3d96:	600c      	str	r4, [r1, #0]
    3d98:	680a      	ldr	r2, [r1, #0]
    3d9a:	6010      	str	r0, [r2, #0]
    3d9c:	6008      	str	r0, [r1, #0]
    3d9e:	b12b      	cbz	r3, 3dac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x160>
    3da0:	e005      	b.n	3dae <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x162>
    3da2:	f240 2175 	movw	r1, #629	; 0x275
    3da6:	2010      	movs	r0, #16
    3da8:	f7fd fe02 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3dac:	b662      	cpsie	i
    3dae:	4804      	ldr	r0, [pc, #16]	; (3dc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x174>)
    3db0:	7800      	ldrb	r0, [r0, #0]
    3db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3db6:	f009 bc31 	b.w	d61c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3dba:	0000      	.short	0x0000
    3dbc:	20001698 	.word	0x20001698
    3dc0:	20000376 	.word	0x20000376
    3dc4:	b510      	push	{r4, lr}
    3dc6:	2214      	movs	r2, #20
    3dc8:	2100      	movs	r1, #0
    3dca:	4808      	ldr	r0, [pc, #32]	; (3dec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    3dcc:	f00e f8d5 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3dd0:	4806      	ldr	r0, [pc, #24]	; (3dec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    3dd2:	2212      	movs	r2, #18
    3dd4:	2100      	movs	r1, #0
    3dd6:	3814      	subs	r0, #20
    3dd8:	f00e f8cf 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3ddc:	4803      	ldr	r0, [pc, #12]	; (3dec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    3dde:	2101      	movs	r1, #1
    3de0:	7301      	strb	r1, [r0, #12]
    3de2:	1d01      	adds	r1, r0, #4
    3de4:	6041      	str	r1, [r0, #4]
    3de6:	6001      	str	r1, [r0, #0]
    3de8:	bd10      	pop	{r4, pc}
    3dea:	0000      	.short	0x0000
    3dec:	20001694 	.word	0x20001694

00003df0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    3df0:	b4f0      	push	{r4, r5, r6, r7}
    3df2:	8150      	strh	r0, [r2, #10]
    3df4:	890c      	ldrh	r4, [r1, #8]
    3df6:	8194      	strh	r4, [r2, #12]
    3df8:	898b      	ldrh	r3, [r1, #12]
    3dfa:	81d3      	strh	r3, [r2, #14]
    3dfc:	8948      	ldrh	r0, [r1, #10]
    3dfe:	8210      	strh	r0, [r2, #16]
    3e00:	89cd      	ldrh	r5, [r1, #14]
    3e02:	8255      	strh	r5, [r2, #18]
    3e04:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    3e06:	42ae      	cmp	r6, r5
    3e08:	d108      	bne.n	3e1c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    3e0a:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    3e0c:	4285      	cmp	r5, r0
    3e0e:	d105      	bne.n	3e1c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    3e10:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    3e12:	429d      	cmp	r5, r3
    3e14:	d102      	bne.n	3e1c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    3e16:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    3e18:	42a3      	cmp	r3, r4
    3e1a:	d001      	beq.n	3e20 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    3e1c:	2301      	movs	r3, #1
    3e1e:	e000      	b.n	3e22 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    3e20:	2300      	movs	r3, #0
    3e22:	7513      	strb	r3, [r2, #20]
    3e24:	8548      	strh	r0, [r1, #42]	; 0x2a
    3e26:	8a50      	ldrh	r0, [r2, #18]
    3e28:	85c8      	strh	r0, [r1, #46]	; 0x2e
    3e2a:	8990      	ldrh	r0, [r2, #12]
    3e2c:	8588      	strh	r0, [r1, #44]	; 0x2c
    3e2e:	89d0      	ldrh	r0, [r2, #14]
    3e30:	8608      	strh	r0, [r1, #48]	; 0x30
    3e32:	bcf0      	pop	{r4, r5, r6, r7}
    3e34:	4901      	ldr	r1, [pc, #4]	; (3e3c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x4c>)
    3e36:	4610      	mov	r0, r2
    3e38:	f00b bada 	b.w	f3f0 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>
    3e3c:	00003e61 	.word	0x00003e61

00003e40 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    3e40:	8150      	strh	r0, [r2, #10]
    3e42:	8a88      	ldrh	r0, [r1, #20]
    3e44:	8190      	strh	r0, [r2, #12]
    3e46:	8ac8      	ldrh	r0, [r1, #22]
    3e48:	81d0      	strh	r0, [r2, #14]
    3e4a:	8b08      	ldrh	r0, [r1, #24]
    3e4c:	8210      	strh	r0, [r2, #16]
    3e4e:	8b48      	ldrh	r0, [r1, #26]
    3e50:	8250      	strh	r0, [r2, #18]
    3e52:	4902      	ldr	r1, [pc, #8]	; (3e5c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1c>)
    3e54:	4610      	mov	r0, r2
    3e56:	f00b bac8 	b.w	f3ea <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    3e5a:	0000      	.short	0x0000
    3e5c:	00003ea1 	.word	0x00003ea1
    3e60:	b538      	push	{r3, r4, r5, lr}
    3e62:	f1a0 0418 	sub.w	r4, r0, #24
    3e66:	7d00      	ldrb	r0, [r0, #20]
    3e68:	460d      	mov	r5, r1
    3e6a:	f000 0001 	and.w	r0, r0, #1
    3e6e:	f7ff fd99 	bl	39a4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    3e72:	2100      	movs	r1, #0
    3e74:	b108      	cbz	r0, 3e7a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    3e76:	9100      	str	r1, [sp, #0]
    3e78:	e00c      	b.n	3e94 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    3e7a:	7069      	strb	r1, [r5, #1]
    3e7c:	2013      	movs	r0, #19
    3e7e:	7028      	strb	r0, [r5, #0]
    3e80:	f854 0f22 	ldr.w	r0, [r4, #34]!
    3e84:	6068      	str	r0, [r5, #4]
    3e86:	6860      	ldr	r0, [r4, #4]
    3e88:	60a8      	str	r0, [r5, #8]
    3e8a:	68a0      	ldr	r0, [r4, #8]
    3e8c:	60e8      	str	r0, [r5, #12]
    3e8e:	4803      	ldr	r0, [pc, #12]	; (3e9c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>)
    3e90:	6840      	ldr	r0, [r0, #4]
    3e92:	9000      	str	r0, [sp, #0]
    3e94:	f8bd 0000 	ldrh.w	r0, [sp]
    3e98:	bd38      	pop	{r3, r4, r5, pc}
    3e9a:	0000      	.short	0x0000
    3e9c:	00003f28 	.word	0x00003f28
    3ea0:	b570      	push	{r4, r5, r6, lr}
    3ea2:	b086      	sub	sp, #24
    3ea4:	460e      	mov	r6, r1
    3ea6:	4604      	mov	r4, r0
    3ea8:	f7ff fd88 	bl	39bc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    3eac:	2500      	movs	r5, #0
    3eae:	b358      	cbz	r0, 3f08 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    3eb0:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    3eb4:	7225      	strb	r5, [r4, #8]
    3eb6:	8804      	ldrh	r4, [r0, #0]
    3eb8:	a903      	add	r1, sp, #12
    3eba:	4620      	mov	r0, r4
    3ebc:	f00d f836 	bl	10f2c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    3ec0:	b108      	cbz	r0, 3ec6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    3ec2:	21fe      	movs	r1, #254	; 0xfe
    3ec4:	e017      	b.n	3ef6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    3ec6:	f8ad 4000 	strh.w	r4, [sp]
    3eca:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    3ece:	f8ad 0002 	strh.w	r0, [sp, #2]
    3ed2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    3ed6:	f8ad 0004 	strh.w	r0, [sp, #4]
    3eda:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    3ede:	f8ad 0006 	strh.w	r0, [sp, #6]
    3ee2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    3ee6:	f8ad 0008 	strh.w	r0, [sp, #8]
    3eea:	4668      	mov	r0, sp
    3eec:	f00d f85a 	bl	10fa4 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    3ef0:	b120      	cbz	r0, 3efc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xbc>
    3ef2:	f240 1107 	movw	r1, #263	; 0x107
    3ef6:	202c      	movs	r0, #44	; 0x2c
    3ef8:	f7fd fd5a 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3efc:	f8cd 5000 	str.w	r5, [sp]
    3f00:	f8bd 0000 	ldrh.w	r0, [sp]
    3f04:	b006      	add	sp, #24
    3f06:	bd70      	pop	{r4, r5, r6, pc}
    3f08:	201b      	movs	r0, #27
    3f0a:	7030      	strb	r0, [r6, #0]
    3f0c:	7075      	strb	r5, [r6, #1]
    3f0e:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    3f12:	6070      	str	r0, [r6, #4]
    3f14:	6860      	ldr	r0, [r4, #4]
    3f16:	60b0      	str	r0, [r6, #8]
    3f18:	8920      	ldrh	r0, [r4, #8]
    3f1a:	81b0      	strh	r0, [r6, #12]
    3f1c:	4801      	ldr	r0, [pc, #4]	; (3f24 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>)
    3f1e:	6800      	ldr	r0, [r0, #0]
    3f20:	9000      	str	r0, [sp, #0]
    3f22:	e7ed      	b.n	3f00 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc0>
    3f24:	00003f28 	.word	0x00003f28
    3f28:	00000004 	.word	0x00000004
    3f2c:	00000004 	.word	0x00000004

00003f30 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    3f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f32:	f06f 021f 	mvn.w	r2, #31
    3f36:	0c01      	lsrs	r1, r0, #16
    3f38:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    3f3c:	251f      	movs	r5, #31
    3f3e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    3f42:	3854      	subs	r0, #84	; 0x54
    3f44:	d00d      	beq.n	3f62 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    3f46:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    3f4a:	3855      	subs	r0, #85	; 0x55
    3f4c:	d009      	beq.n	3f62 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    3f4e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    3f52:	38aa      	subs	r0, #170	; 0xaa
    3f54:	d005      	beq.n	3f62 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    3f56:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    3f5a:	38aa      	subs	r0, #170	; 0xaa
    3f5c:	d001      	beq.n	3f62 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    3f5e:	2001      	movs	r0, #1
    3f60:	e000      	b.n	3f64 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    3f62:	2000      	movs	r0, #0
    3f64:	2200      	movs	r2, #0
    3f66:	4613      	mov	r3, r2
    3f68:	ea4f 0402 	mov.w	r4, r2
    3f6c:	ea82 0701 	eor.w	r7, r2, r1
    3f70:	43ff      	mvns	r7, r7
    3f72:	431f      	orrs	r7, r3
    3f74:	1c7f      	adds	r7, r7, #1
    3f76:	d00f      	beq.n	3f98 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    3f78:	f006 0701 	and.w	r7, r6, #1
    3f7c:	0852      	lsrs	r2, r2, #1
    3f7e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    3f82:	f005 0701 	and.w	r7, r5, #1
    3f86:	085b      	lsrs	r3, r3, #1
    3f88:	0876      	lsrs	r6, r6, #1
    3f8a:	086d      	lsrs	r5, r5, #1
    3f8c:	1c64      	adds	r4, r4, #1
    3f8e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    3f92:	2c16      	cmp	r4, #22
    3f94:	d3ea      	bcc.n	3f6c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    3f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f98:	2000      	movs	r0, #0
    3f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003f9c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    3f9c:	b510      	push	{r4, lr}
    3f9e:	4804      	ldr	r0, [pc, #16]	; (3fb0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    3fa0:	f00b fb47 	bl	f632 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    3fa4:	4802      	ldr	r0, [pc, #8]	; (3fb0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    3fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3faa:	3008      	adds	r0, #8
    3fac:	f00b bb41 	b.w	f632 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    3fb0:	200000cc 	.word	0x200000cc

00003fb4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    3fb4:	4801      	ldr	r0, [pc, #4]	; (3fbc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    3fb6:	f000 b809 	b.w	3fcc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    3fba:	0000      	.short	0x0000
    3fbc:	200000cc 	.word	0x200000cc

00003fc0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    3fc0:	4801      	ldr	r0, [pc, #4]	; (3fc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    3fc2:	f000 b803 	b.w	3fcc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    3fc6:	0000      	.short	0x0000
    3fc8:	200000d4 	.word	0x200000d4
    3fcc:	b510      	push	{r4, lr}
    3fce:	e9d0 2100 	ldrd	r2, r1, [r0]
    3fd2:	4b09      	ldr	r3, [pc, #36]	; (3ff8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    3fd4:	4c09      	ldr	r4, [pc, #36]	; (3ffc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    3fd6:	4353      	muls	r3, r2
    3fd8:	4354      	muls	r4, r2
    3fda:	4051      	eors	r1, r2
    3fdc:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    3fe0:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    3fe4:	ea4f 41f1 	mov.w	r1, r1, ror #19
    3fe8:	e9c0 2100 	strd	r2, r1, [r0]
    3fec:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    3ff0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3ff4:	4618      	mov	r0, r3
    3ff6:	bd10      	pop	{r4, pc}
    3ff8:	c6ef3760 	.word	0xc6ef3760
    3ffc:	9e3779bb 	.word	0x9e3779bb

00004000 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    4000:	b570      	push	{r4, r5, r6, lr}
    4002:	6844      	ldr	r4, [r0, #4]
    4004:	1d09      	adds	r1, r1, #4
    4006:	2500      	movs	r5, #0
    4008:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
    400c:	3480      	adds	r4, #128	; 0x80
    400e:	07c0      	lsls	r0, r0, #31
    4010:	d001      	beq.n	4016 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    4012:	2001      	movs	r0, #1
    4014:	bd70      	pop	{r4, r5, r6, pc}
    4016:	6848      	ldr	r0, [r1, #4]
    4018:	6809      	ldr	r1, [r1, #0]
    401a:	4b0c      	ldr	r3, [pc, #48]	; (404c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x4c>)
    401c:	f641 0207 	movw	r2, #6151	; 0x1807
    4020:	4019      	ands	r1, r3
    4022:	66e1      	str	r1, [r4, #108]	; 0x6c
    4024:	4010      	ands	r0, r2
    4026:	6720      	str	r0, [r4, #112]	; 0x70
    4028:	211b      	movs	r1, #27
    402a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    402e:	f00b fc26 	bl	f87e <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    4032:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
    4036:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    403a:	1c40      	adds	r0, r0, #1
    403c:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    4040:	68e0      	ldr	r0, [r4, #12]
    4042:	f040 0001 	orr.w	r0, r0, #1
    4046:	60e0      	str	r0, [r4, #12]
    4048:	2000      	movs	r0, #0
    404a:	bd70      	pop	{r4, r5, r6, pc}
    404c:	f704492f 	.word	0xf704492f

00004050 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    4050:	b510      	push	{r4, lr}
    4052:	1d04      	adds	r4, r0, #4
    4054:	f004 fa04 	bl	8460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    4058:	4b03      	ldr	r3, [pc, #12]	; (4068 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    405a:	f641 0207 	movw	r2, #6151	; 0x1807
    405e:	4018      	ands	r0, r3
    4060:	4011      	ands	r1, r2
    4062:	6020      	str	r0, [r4, #0]
    4064:	6061      	str	r1, [r4, #4]
    4066:	bd10      	pop	{r4, pc}
    4068:	f704492f 	.word	0xf704492f

0000406c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    406c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4070:	7803      	ldrb	r3, [r0, #0]
    4072:	6840      	ldr	r0, [r0, #4]
    4074:	1d0f      	adds	r7, r1, #4
    4076:	f100 0580 	add.w	r5, r0, #128	; 0x80
    407a:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    407e:	4606      	mov	r6, r0
    4080:	f04f 0800 	mov.w	r8, #0
    4084:	7f6a      	ldrb	r2, [r5, #29]
    4086:	2107      	movs	r1, #7
    4088:	4628      	mov	r0, r5
    408a:	f00a fe0f 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    408e:	b1e0      	cbz	r0, 40ca <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    4090:	6839      	ldr	r1, [r7, #0]
    4092:	4b18      	ldr	r3, [pc, #96]	; (40f4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    4094:	6878      	ldr	r0, [r7, #4]
    4096:	4019      	ands	r1, r3
    4098:	f641 0207 	movw	r2, #6151	; 0x1807
    409c:	66e9      	str	r1, [r5, #108]	; 0x6c
    409e:	4010      	ands	r0, r2
    40a0:	6728      	str	r0, [r5, #112]	; 0x70
    40a2:	211b      	movs	r1, #27
    40a4:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    40a8:	f00b fbe9 	bl	f87e <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    40ac:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    40b0:	f885 801d 	strb.w	r8, [r5, #29]
    40b4:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    40b8:	4640      	mov	r0, r8
    40ba:	f88d 1000 	strb.w	r1, [sp]
    40be:	9900      	ldr	r1, [sp, #0]
    40c0:	9100      	str	r1, [sp, #0]
    40c2:	f89d 1000 	ldrb.w	r1, [sp]
    40c6:	b991      	cbnz	r1, 40ee <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x82>
    40c8:	e002      	b.n	40d0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    40ca:	2001      	movs	r0, #1
    40cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    40d0:	8831      	ldrh	r1, [r6, #0]
    40d2:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    40d6:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    40da:	6839      	ldr	r1, [r7, #0]
    40dc:	66e1      	str	r1, [r4, #108]	; 0x6c
    40de:	6879      	ldr	r1, [r7, #4]
    40e0:	6721      	str	r1, [r4, #112]	; 0x70
    40e2:	2202      	movs	r2, #2
    40e4:	4904      	ldr	r1, [pc, #16]	; (40f8 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x8c>)
    40e6:	f104 0060 	add.w	r0, r4, #96	; 0x60
    40ea:	f00b f987 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    40ee:	2000      	movs	r0, #0
    40f0:	e7ec      	b.n	40cc <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x60>
    40f2:	0000      	.short	0x0000
    40f4:	f704492f 	.word	0xf704492f
    40f8:	0000f8eb 	.word	0x0000f8eb

000040fc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    40fc:	b570      	push	{r4, r5, r6, lr}
    40fe:	1d0d      	adds	r5, r1, #4
    4100:	6844      	ldr	r4, [r0, #4]
    4102:	f004 f9ad 	bl	8460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    4106:	f641 0207 	movw	r2, #6151	; 0x1807
    410a:	4b05      	ldr	r3, [pc, #20]	; (4120 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    410c:	4011      	ands	r1, r2
    410e:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    4112:	4018      	ands	r0, r3
    4114:	4002      	ands	r2, r0
    4116:	f362 0007 	bfi	r0, r2, #0, #8
    411a:	6028      	str	r0, [r5, #0]
    411c:	6069      	str	r1, [r5, #4]
    411e:	bd70      	pop	{r4, r5, r6, pc}
    4120:	f704492f 	.word	0xf704492f

00004124 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    4124:	6841      	ldr	r1, [r0, #4]
    4126:	b082      	sub	sp, #8
    4128:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    412c:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    4130:	f88d 2000 	strb.w	r2, [sp]
    4134:	9a00      	ldr	r2, [sp, #0]
    4136:	9200      	str	r2, [sp, #0]
    4138:	f89d 2000 	ldrb.w	r2, [sp]
    413c:	2a00      	cmp	r2, #0
    413e:	d10b      	bne.n	4158 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    4140:	8809      	ldrh	r1, [r1, #0]
    4142:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    4146:	211a      	movs	r1, #26
    4148:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    414c:	2202      	movs	r2, #2
    414e:	4903      	ldr	r1, [pc, #12]	; (415c <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    4150:	3060      	adds	r0, #96	; 0x60
    4152:	b002      	add	sp, #8
    4154:	f00b b952 	b.w	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4158:	b002      	add	sp, #8
    415a:	4770      	bx	lr
    415c:	0000f8eb 	.word	0x0000f8eb

00004160 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    4160:	b570      	push	{r4, r5, r6, lr}
    4162:	6844      	ldr	r4, [r0, #4]
    4164:	460d      	mov	r5, r1
    4166:	7803      	ldrb	r3, [r0, #0]
    4168:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    416c:	3480      	adds	r4, #128	; 0x80
    416e:	2600      	movs	r6, #0
    4170:	2108      	movs	r1, #8
    4172:	4620      	mov	r0, r4
    4174:	f00a fd9a 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    4178:	b920      	cbnz	r0, 4184 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    417a:	7b20      	ldrb	r0, [r4, #12]
    417c:	0780      	lsls	r0, r0, #30
    417e:	d501      	bpl.n	4184 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    4180:	2001      	movs	r0, #1
    4182:	bd70      	pop	{r4, r5, r6, pc}
    4184:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    4188:	0780      	lsls	r0, r0, #30
    418a:	d419      	bmi.n	41c0 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    418c:	4628      	mov	r0, r5
    418e:	f00b f8c8 	bl	f322 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    4192:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    4196:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    419a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    419e:	8868      	ldrh	r0, [r5, #2]
    41a0:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    41a4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    41a8:	f040 0002 	orr.w	r0, r0, #2
    41ac:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    41b0:	07c0      	lsls	r0, r0, #31
    41b2:	d009      	beq.n	41c8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    41b4:	2202      	movs	r2, #2
    41b6:	4911      	ldr	r1, [pc, #68]	; (41fc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    41b8:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    41bc:	f00b f932 	bl	f424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    41c0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    41c4:	07c0      	lsls	r0, r0, #31
    41c6:	d110      	bne.n	41ea <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    41c8:	68e0      	ldr	r0, [r4, #12]
    41ca:	0781      	lsls	r1, r0, #30
    41cc:	d503      	bpl.n	41d6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    41ce:	214f      	movs	r1, #79	; 0x4f
    41d0:	2040      	movs	r0, #64	; 0x40
    41d2:	f7fd fbed 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41d6:	f040 0002 	orr.w	r0, r0, #2
    41da:	60e0      	str	r0, [r4, #12]
    41dc:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    41e0:	1c40      	adds	r0, r0, #1
    41e2:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    41e6:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    41ea:	7f60      	ldrb	r0, [r4, #29]
    41ec:	2801      	cmp	r0, #1
    41ee:	d102      	bne.n	41f6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    41f0:	7766      	strb	r6, [r4, #29]
    41f2:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    41f6:	2000      	movs	r0, #0
    41f8:	bd70      	pop	{r4, r5, r6, pc}
    41fa:	0000      	.short	0x0000
    41fc:	0000f999 	.word	0x0000f999

00004200 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    4200:	4a04      	ldr	r2, [pc, #16]	; (4214 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    4202:	6892      	ldr	r2, [r2, #8]
    4204:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    4208:	434b      	muls	r3, r1
    420a:	4342      	muls	r2, r0
    420c:	eb03 3022 	add.w	r0, r3, r2, asr #12
    4210:	4770      	bx	lr
    4212:	0000      	.short	0x0000
    4214:	200000dc 	.word	0x200000dc

00004218 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    4218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    421a:	6844      	ldr	r4, [r0, #4]
    421c:	4606      	mov	r6, r0
    421e:	f104 0580 	add.w	r5, r4, #128	; 0x80
    4222:	f000 f87b 	bl	431c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>
    4226:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    422a:	2901      	cmp	r1, #1
    422c:	d11a      	bne.n	4264 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    422e:	2800      	cmp	r0, #0
    4230:	d018      	beq.n	4264 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    4232:	6870      	ldr	r0, [r6, #4]
    4234:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    4238:	f88d 1000 	strb.w	r1, [sp]
    423c:	9900      	ldr	r1, [sp, #0]
    423e:	9100      	str	r1, [sp, #0]
    4240:	f89d 1000 	ldrb.w	r1, [sp]
    4244:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    4248:	2900      	cmp	r1, #0
    424a:	d10b      	bne.n	4264 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    424c:	8821      	ldrh	r1, [r4, #0]
    424e:	8141      	strh	r1, [r0, #10]
    4250:	7e69      	ldrb	r1, [r5, #25]
    4252:	7301      	strb	r1, [r0, #12]
    4254:	7ea9      	ldrb	r1, [r5, #26]
    4256:	7341      	strb	r1, [r0, #13]
    4258:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    425c:	2202      	movs	r2, #2
    425e:	4902      	ldr	r1, [pc, #8]	; (4268 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    4260:	f00b b8cc 	b.w	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4266:	0000      	.short	0x0000
    4268:	0000fa21 	.word	0x0000fa21
    426c:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    4270:	4a0d      	ldr	r2, [pc, #52]	; (42a8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    4272:	b510      	push	{r4, lr}
    4274:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    4278:	1309      	asrs	r1, r1, #12
    427a:	1300      	asrs	r0, r0, #12
    427c:	b24b      	sxtb	r3, r1
    427e:	f992 4000 	ldrsb.w	r4, [r2]
    4282:	4240      	negs	r0, r0
    4284:	2100      	movs	r1, #0
    4286:	b240      	sxtb	r0, r0
    4288:	42a3      	cmp	r3, r4
    428a:	da02      	bge.n	4292 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    428c:	f992 1002 	ldrsb.w	r1, [r2, #2]
    4290:	e005      	b.n	429e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    4292:	f992 4001 	ldrsb.w	r4, [r2, #1]
    4296:	42a3      	cmp	r3, r4
    4298:	dd04      	ble.n	42a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    429a:	f992 1003 	ldrsb.w	r1, [r2, #3]
    429e:	4408      	add	r0, r1
    42a0:	f300 0107 	ssat	r1, #8, r0
    42a4:	4608      	mov	r0, r1
    42a6:	bd10      	pop	{r4, pc}
    42a8:	200000dc 	.word	0x200000dc
    42ac:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    42b0:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    42b4:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    42b8:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    42bc:	f00c fa68 	bl	10790 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    42c0:	4606      	mov	r6, r0
    42c2:	68a0      	ldr	r0, [r4, #8]
    42c4:	f7ff ffd2 	bl	426c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    42c8:	0007      	movs	r7, r0
    42ca:	d021      	beq.n	4310 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    42cc:	4620      	mov	r0, r4
    42ce:	f00b fbaf 	bl	fa30 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    42d2:	2800      	cmp	r0, #0
    42d4:	d01c      	beq.n	4310 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    42d6:	8828      	ldrh	r0, [r5, #0]
    42d8:	4669      	mov	r1, sp
    42da:	f00a fcd0 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    42de:	b118      	cbz	r0, 42e8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd0>
    42e0:	2185      	movs	r1, #133	; 0x85
    42e2:	207a      	movs	r0, #122	; 0x7a
    42e4:	f7fd fb64 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42e8:	1c76      	adds	r6, r6, #1
    42ea:	b2f1      	uxtb	r1, r6
    42ec:	2302      	movs	r3, #2
    42ee:	463a      	mov	r2, r7
    42f0:	4668      	mov	r0, sp
    42f2:	f00c fa6c 	bl	107ce <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    42f6:	2800      	cmp	r0, #0
    42f8:	d10a      	bne.n	4310 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    42fa:	4806      	ldr	r0, [pc, #24]	; (4314 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfc>)
    42fc:	4906      	ldr	r1, [pc, #24]	; (4318 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x100>)
    42fe:	7900      	ldrb	r0, [r0, #4]
    4300:	fba0 6501 	umull	r6, r5, r0, r1
    4304:	f00d fc2d 	bl	11b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4308:	1980      	adds	r0, r0, r6
    430a:	4169      	adcs	r1, r5
    430c:	e9c4 0100 	strd	r0, r1, [r4]
    4310:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    4314:	200000dc 	.word	0x200000dc
    4318:	000f4240 	.word	0x000f4240
    431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4320:	4607      	mov	r7, r0
    4322:	f7ff fa91 	bl	3848 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    4326:	687c      	ldr	r4, [r7, #4]
    4328:	4605      	mov	r5, r0
    432a:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    432e:	3480      	adds	r4, #128	; 0x80
    4330:	287f      	cmp	r0, #127	; 0x7f
    4332:	d042      	beq.n	43ba <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a2>
    4334:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    4338:	687e      	ldr	r6, [r7, #4]
    433a:	76a0      	strb	r0, [r4, #26]
    433c:	4629      	mov	r1, r5
    433e:	68a0      	ldr	r0, [r4, #8]
    4340:	f7ff ff5e 	bl	4200 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    4344:	60a0      	str	r0, [r4, #8]
    4346:	481e      	ldr	r0, [pc, #120]	; (43c0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    4348:	7940      	ldrb	r0, [r0, #5]
    434a:	b1c0      	cbz	r0, 437e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    434c:	6878      	ldr	r0, [r7, #4]
    434e:	f100 0880 	add.w	r8, r0, #128	; 0x80
    4352:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    4356:	f7ff ff89 	bl	426c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    435a:	b180      	cbz	r0, 437e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    435c:	4640      	mov	r0, r8
    435e:	f00b fb67 	bl	fa30 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    4362:	b160      	cbz	r0, 437e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    4364:	6878      	ldr	r0, [r7, #4]
    4366:	f500 78a5 	add.w	r8, r0, #330	; 0x14a
    436a:	4607      	mov	r7, r0
    436c:	f004 fca2 	bl	8cb4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    4370:	f887 006b 	strb.w	r0, [r7, #107]	; 0x6b
    4374:	4913      	ldr	r1, [pc, #76]	; (43c4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1ac>)
    4376:	f108 00aa 	add.w	r0, r8, #170	; 0xaa
    437a:	f00b f83c 	bl	f3f6 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>
    437e:	f994 001b 	ldrsb.w	r0, [r4, #27]
    4382:	2100      	movs	r1, #0
    4384:	1a28      	subs	r0, r5, r0
    4386:	d500      	bpl.n	438a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x172>
    4388:	4240      	negs	r0, r0
    438a:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    438e:	4282      	cmp	r2, r0
    4390:	dc10      	bgt.n	43b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    4392:	2aff      	cmp	r2, #255	; 0xff
    4394:	d00e      	beq.n	43b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    4396:	7f20      	ldrb	r0, [r4, #28]
    4398:	1c40      	adds	r0, r0, #1
    439a:	b2c0      	uxtb	r0, r0
    439c:	7720      	strb	r0, [r4, #28]
    439e:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    43a2:	4290      	cmp	r0, r2
    43a4:	d802      	bhi.n	43ac <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x194>
    43a6:	7ee0      	ldrb	r0, [r4, #27]
    43a8:	287f      	cmp	r0, #127	; 0x7f
    43aa:	d103      	bne.n	43b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    43ac:	2000      	movs	r0, #0
    43ae:	76e5      	strb	r5, [r4, #27]
    43b0:	7720      	strb	r0, [r4, #28]
    43b2:	2101      	movs	r1, #1
    43b4:	4608      	mov	r0, r1
    43b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43ba:	2000      	movs	r0, #0
    43bc:	e7fb      	b.n	43b6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    43be:	0000      	.short	0x0000
    43c0:	200000dc 	.word	0x200000dc
    43c4:	000042ad 	.word	0x000042ad

000043c8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    43c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43ca:	f00b fb4d 	bl	fa68 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    43ce:	4604      	mov	r4, r0
    43d0:	460d      	mov	r5, r1
    43d2:	466a      	mov	r2, sp
    43d4:	f000 f862 	bl	449c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    43d8:	b108      	cbz	r0, 43de <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    43da:	2001      	movs	r0, #1
    43dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43de:	480f      	ldr	r0, [pc, #60]	; (441c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    43e0:	7803      	ldrb	r3, [r0, #0]
    43e2:	7841      	ldrb	r1, [r0, #1]
    43e4:	428b      	cmp	r3, r1
    43e6:	d101      	bne.n	43ec <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    43e8:	2000      	movs	r0, #0
    43ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43ec:	461a      	mov	r2, r3
    43ee:	6841      	ldr	r1, [r0, #4]
    43f0:	e008      	b.n	4404 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    43f2:	bf00      	nop
    43f4:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    43f8:	1e52      	subs	r2, r2, #1
    43fa:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    43fe:	e9c6 7c00 	strd	r7, ip, [r6]
    4402:	b2d2      	uxtb	r2, r2
    4404:	f89d 6000 	ldrb.w	r6, [sp]
    4408:	42b2      	cmp	r2, r6
    440a:	d8f3      	bhi.n	43f4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    440c:	b2f2      	uxtb	r2, r6
    440e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    4412:	1c5b      	adds	r3, r3, #1
    4414:	e9c1 4500 	strd	r4, r5, [r1]
    4418:	7003      	strb	r3, [r0, #0]
    441a:	e7de      	b.n	43da <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    441c:	200000e8 	.word	0x200000e8

00004420 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    4420:	b510      	push	{r4, lr}
    4422:	0742      	lsls	r2, r0, #29
    4424:	d003      	beq.n	442e <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    4426:	2163      	movs	r1, #99	; 0x63
    4428:	2048      	movs	r0, #72	; 0x48
    442a:	f7fd fac1 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    442e:	b120      	cbz	r0, 443a <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    4430:	4a03      	ldr	r2, [pc, #12]	; (4440 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    4432:	7051      	strb	r1, [r2, #1]
    4434:	6050      	str	r0, [r2, #4]
    4436:	2000      	movs	r0, #0
    4438:	7010      	strb	r0, [r2, #0]
    443a:	00c8      	lsls	r0, r1, #3
    443c:	bd10      	pop	{r4, pc}
    443e:	0000      	.short	0x0000
    4440:	200000e8 	.word	0x200000e8

00004444 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    4444:	b538      	push	{r3, r4, r5, lr}
    4446:	f00b fb0f 	bl	fa68 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    444a:	466a      	mov	r2, sp
    444c:	f000 f826 	bl	449c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    4450:	2800      	cmp	r0, #0
    4452:	d014      	beq.n	447e <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    4454:	4a0a      	ldr	r2, [pc, #40]	; (4480 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    4456:	7810      	ldrb	r0, [r2, #0]
    4458:	1e40      	subs	r0, r0, #1
    445a:	b2c1      	uxtb	r1, r0
    445c:	7011      	strb	r1, [r2, #0]
    445e:	f89d 0000 	ldrb.w	r0, [sp]
    4462:	6852      	ldr	r2, [r2, #4]
    4464:	e008      	b.n	4478 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    4466:	bf00      	nop
    4468:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    446c:	1c40      	adds	r0, r0, #1
    446e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    4472:	e9c3 4500 	strd	r4, r5, [r3]
    4476:	b2c0      	uxtb	r0, r0
    4478:	4288      	cmp	r0, r1
    447a:	d3f5      	bcc.n	4468 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    447c:	2001      	movs	r0, #1
    447e:	bd38      	pop	{r3, r4, r5, pc}
    4480:	200000e8 	.word	0x200000e8

00004484 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    4484:	4901      	ldr	r1, [pc, #4]	; (448c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    4486:	2000      	movs	r0, #0
    4488:	7008      	strb	r0, [r1, #0]
    448a:	4770      	bx	lr
    448c:	200000e8 	.word	0x200000e8

00004490 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    4490:	4801      	ldr	r0, [pc, #4]	; (4498 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    4492:	7840      	ldrb	r0, [r0, #1]
    4494:	4770      	bx	lr
    4496:	0000      	.short	0x0000
    4498:	200000e8 	.word	0x200000e8
    449c:	b5f0      	push	{r4, r5, r6, r7, lr}
    449e:	4d20      	ldr	r5, [pc, #128]	; (4520 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    44a0:	2300      	movs	r3, #0
    44a2:	7013      	strb	r3, [r2, #0]
    44a4:	782b      	ldrb	r3, [r5, #0]
    44a6:	b323      	cbz	r3, 44f2 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    44a8:	2400      	movs	r4, #0
    44aa:	1e5b      	subs	r3, r3, #1
    44ac:	b2db      	uxtb	r3, r3
    44ae:	f8d5 c004 	ldr.w	ip, [r5, #4]
    44b2:	e00b      	b.n	44cc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    44b4:	18e5      	adds	r5, r4, r3
    44b6:	086d      	lsrs	r5, r5, #1
    44b8:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    44bc:	e9d6 7600 	ldrd	r7, r6, [r6]
    44c0:	1a3f      	subs	r7, r7, r0
    44c2:	418e      	sbcs	r6, r1
    44c4:	d201      	bcs.n	44ca <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    44c6:	462c      	mov	r4, r5
    44c8:	e000      	b.n	44cc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    44ca:	462b      	mov	r3, r5
    44cc:	1b1d      	subs	r5, r3, r4
    44ce:	2d01      	cmp	r5, #1
    44d0:	dcf0      	bgt.n	44b4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    44d2:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    44d6:	e9d6 5600 	ldrd	r5, r6, [r6]
    44da:	ea80 0705 	eor.w	r7, r0, r5
    44de:	ea81 0e06 	eor.w	lr, r1, r6
    44e2:	ea57 070e 	orrs.w	r7, r7, lr
    44e6:	d005      	beq.n	44f4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    44e8:	1b45      	subs	r5, r0, r5
    44ea:	eb71 0506 	sbcs.w	r5, r1, r6
    44ee:	d203      	bcs.n	44f8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    44f0:	7014      	strb	r4, [r2, #0]
    44f2:	e010      	b.n	4516 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    44f4:	7014      	strb	r4, [r2, #0]
    44f6:	e011      	b.n	451c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    44f8:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    44fc:	e9d5 4500 	ldrd	r4, r5, [r5]
    4500:	ea80 0604 	eor.w	r6, r0, r4
    4504:	ea81 0705 	eor.w	r7, r1, r5
    4508:	433e      	orrs	r6, r7
    450a:	d006      	beq.n	451a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    450c:	1b00      	subs	r0, r0, r4
    450e:	41a9      	sbcs	r1, r5
    4510:	d300      	bcc.n	4514 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    4512:	1c5b      	adds	r3, r3, #1
    4514:	7013      	strb	r3, [r2, #0]
    4516:	2000      	movs	r0, #0
    4518:	bdf0      	pop	{r4, r5, r6, r7, pc}
    451a:	7013      	strb	r3, [r2, #0]
    451c:	2001      	movs	r0, #1
    451e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4520:	200000e8 	.word	0x200000e8

00004524 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    4524:	b570      	push	{r4, r5, r6, lr}
    4526:	4604      	mov	r4, r0
    4528:	7c00      	ldrb	r0, [r0, #16]
    452a:	b300      	cbz	r0, 456e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    452c:	2802      	cmp	r0, #2
    452e:	d01e      	beq.n	456e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    4530:	f05f 0001 	movs.w	r0, #1
    4534:	f104 0151 	add.w	r1, r4, #81	; 0x51
    4538:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    453c:	460d      	mov	r5, r1
    453e:	b1c0      	cbz	r0, 4572 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    4540:	7de0      	ldrb	r0, [r4, #23]
    4542:	b1f0      	cbz	r0, 4582 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    4544:	f8d4 0011 	ldr.w	r0, [r4, #17]
    4548:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    454c:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    4550:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    4554:	7c20      	ldrb	r0, [r4, #16]
    4556:	f00b fab7 	bl	fac8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    455a:	7620      	strb	r0, [r4, #24]
    455c:	2008      	movs	r0, #8
    455e:	7660      	strb	r0, [r4, #25]
    4560:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4564:	4629      	mov	r1, r5
    4566:	f00b fa9b 	bl	faa0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    456a:	b9a8      	cbnz	r0, 4598 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    456c:	e00e      	b.n	458c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    456e:	2000      	movs	r0, #0
    4570:	e7e0      	b.n	4534 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    4572:	2000      	movs	r0, #0
    4574:	f7fe f980 	bl	2878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    4578:	2800      	cmp	r0, #0
    457a:	d1eb      	bne.n	4554 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    457c:	f240 41ba 	movw	r1, #1210	; 0x4ba
    4580:	e001      	b.n	4586 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    4582:	f240 41be 	movw	r1, #1214	; 0x4be
    4586:	202d      	movs	r0, #45	; 0x2d
    4588:	f7fd fa12 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    458c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4590:	4629      	mov	r1, r5
    4592:	f00b fa8e 	bl	fab2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    4596:	b100      	cbz	r0, 459a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    4598:	2001      	movs	r0, #1
    459a:	76a0      	strb	r0, [r4, #26]
    459c:	7e20      	ldrb	r0, [r4, #24]
    459e:	b130      	cbz	r0, 45ae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    45a0:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    45a4:	f104 0158 	add.w	r1, r4, #88	; 0x58
    45a8:	f00a fb32 	bl	ec10 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    45ac:	7660      	strb	r0, [r4, #25]
    45ae:	f7fe ffb5 	bl	351c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    45b2:	490c      	ldr	r1, [pc, #48]	; (45e4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    45b4:	fba0 2301 	umull	r2, r3, r0, r1
    45b8:	f104 0048 	add.w	r0, r4, #72	; 0x48
    45bc:	f00b fbf6 	bl	fdac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    45c0:	2100      	movs	r1, #0
    45c2:	4620      	mov	r0, r4
    45c4:	f00b fbab 	bl	fd1e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    45c8:	2000      	movs	r0, #0
    45ca:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    45ce:	78a0      	ldrb	r0, [r4, #2]
    45d0:	0740      	lsls	r0, r0, #29
    45d2:	d505      	bpl.n	45e0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    45d4:	4620      	mov	r0, r4
    45d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    45da:	2100      	movs	r1, #0
    45dc:	f000 bdf0 	b.w	51c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ac>
    45e0:	bd70      	pop	{r4, r5, r6, pc}
    45e2:	0000      	.short	0x0000
    45e4:	000f4240 	.word	0x000f4240

000045e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    45e8:	b530      	push	{r4, r5, lr}
    45ea:	460c      	mov	r4, r1
    45ec:	b08d      	sub	sp, #52	; 0x34
    45ee:	4605      	mov	r5, r0
    45f0:	4601      	mov	r1, r0
    45f2:	2224      	movs	r2, #36	; 0x24
    45f4:	a802      	add	r0, sp, #8
    45f6:	f00d fc46 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    45fa:	a80b      	add	r0, sp, #44	; 0x2c
    45fc:	f00b fc33 	bl	fe66 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    4600:	7aa0      	ldrb	r0, [r4, #10]
    4602:	f88d 0018 	strb.w	r0, [sp, #24]
    4606:	7820      	ldrb	r0, [r4, #0]
    4608:	f88d 0008 	strb.w	r0, [sp, #8]
    460c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    4610:	f8ad 0000 	strh.w	r0, [sp]
    4614:	f89d 0000 	ldrb.w	r0, [sp]
    4618:	f000 0101 	and.w	r1, r0, #1
    461c:	f3c0 0240 	ubfx	r2, r0, #1, #1
    4620:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    4624:	f3c0 0280 	ubfx	r2, r0, #2, #1
    4628:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    462c:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    4630:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    4634:	f3c0 1200 	ubfx	r2, r0, #4, #1
    4638:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    463c:	f3c0 1240 	ubfx	r2, r0, #5, #1
    4640:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    4644:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4648:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    464c:	f8ad 000a 	strh.w	r0, [sp, #10]
    4650:	7d20      	ldrb	r0, [r4, #20]
    4652:	2801      	cmp	r0, #1
    4654:	d006      	beq.n	4664 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    4656:	2802      	cmp	r0, #2
    4658:	d004      	beq.n	4664 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    465a:	f240 21e9 	movw	r1, #745	; 0x2e9
    465e:	2006      	movs	r0, #6
    4660:	f7fd f9a6 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4664:	f88d 000c 	strb.w	r0, [sp, #12]
    4668:	7a61      	ldrb	r1, [r4, #9]
    466a:	a80b      	add	r0, sp, #44	; 0x2c
    466c:	f00b fbe2 	bl	fe34 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    4670:	7d20      	ldrb	r0, [r4, #20]
    4672:	2101      	movs	r1, #1
    4674:	2802      	cmp	r0, #2
    4676:	d102      	bne.n	467e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    4678:	7d60      	ldrb	r0, [r4, #21]
    467a:	1c40      	adds	r0, r0, #1
    467c:	b2c1      	uxtb	r1, r0
    467e:	7ea0      	ldrb	r0, [r4, #26]
    4680:	1c40      	adds	r0, r0, #1
    4682:	b2c2      	uxtb	r2, r0
    4684:	a80b      	add	r0, sp, #44	; 0x2c
    4686:	f00b fb9c 	bl	fdc2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    468a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    468e:	0700      	lsls	r0, r0, #28
    4690:	d501      	bpl.n	4696 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    4692:	2000      	movs	r0, #0
    4694:	e020      	b.n	46d8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    4696:	a80b      	add	r0, sp, #44	; 0x2c
    4698:	f00b fba5 	bl	fde6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    469c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    46a0:	2228      	movs	r2, #40	; 0x28
    46a2:	f000 fe31 	bl	5308 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    46a6:	f240 2171 	movw	r1, #625	; 0x271
    46aa:	f200 20db 	addw	r0, r0, #731	; 0x2db
    46ae:	fbb0 f0f1 	udiv	r0, r0, r1
    46b2:	4348      	muls	r0, r1
    46b4:	f8d4 1002 	ldr.w	r1, [r4, #2]
    46b8:	f240 2371 	movw	r3, #625	; 0x271
    46bc:	0a0a      	lsrs	r2, r1, #8
    46be:	f240 2171 	movw	r1, #625	; 0x271
    46c2:	434a      	muls	r2, r1
    46c4:	f8d4 1005 	ldr.w	r1, [r4, #5]
    46c8:	0a09      	lsrs	r1, r1, #8
    46ca:	4359      	muls	r1, r3
    46cc:	4290      	cmp	r0, r2
    46ce:	d801      	bhi.n	46d4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    46d0:	9204      	str	r2, [sp, #16]
    46d2:	e004      	b.n	46de <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    46d4:	4288      	cmp	r0, r1
    46d6:	d801      	bhi.n	46dc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    46d8:	9004      	str	r0, [sp, #16]
    46da:	e000      	b.n	46de <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    46dc:	9104      	str	r1, [sp, #16]
    46de:	7ca0      	ldrb	r0, [r4, #18]
    46e0:	f88d 0017 	strb.w	r0, [sp, #23]
    46e4:	7e20      	ldrb	r0, [r4, #24]
    46e6:	2801      	cmp	r0, #1
    46e8:	d000      	beq.n	46ec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    46ea:	2000      	movs	r0, #0
    46ec:	f88d 0014 	strb.w	r0, [sp, #20]
    46f0:	6b68      	ldr	r0, [r5, #52]	; 0x34
    46f2:	f00a f8f5 	bl	e8e0 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    46f6:	6b68      	ldr	r0, [r5, #52]	; 0x34
    46f8:	f00a f99a 	bl	ea30 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    46fc:	2224      	movs	r2, #36	; 0x24
    46fe:	a902      	add	r1, sp, #8
    4700:	4628      	mov	r0, r5
    4702:	f00d fbc0 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4706:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4708:	62a8      	str	r0, [r5, #40]	; 0x28
    470a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    470e:	85a8      	strh	r0, [r5, #44]	; 0x2c
    4710:	7ae0      	ldrb	r0, [r4, #11]
    4712:	b168      	cbz	r0, 4730 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    4714:	2802      	cmp	r0, #2
    4716:	d00b      	beq.n	4730 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    4718:	f05f 0001 	movs.w	r0, #1
    471c:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    4720:	68e0      	ldr	r0, [r4, #12]
    4722:	65a8      	str	r0, [r5, #88]	; 0x58
    4724:	8a20      	ldrh	r0, [r4, #16]
    4726:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    472a:	b00d      	add	sp, #52	; 0x34
    472c:	2000      	movs	r0, #0
    472e:	bd30      	pop	{r4, r5, pc}
    4730:	2000      	movs	r0, #0
    4732:	e7f3      	b.n	471c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00004734 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    4734:	4a0a      	ldr	r2, [pc, #40]	; (4760 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    4736:	b510      	push	{r4, lr}
    4738:	2100      	movs	r1, #0
    473a:	7011      	strb	r1, [r2, #0]
    473c:	4c09      	ldr	r4, [pc, #36]	; (4764 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    473e:	6060      	str	r0, [r4, #4]
    4740:	f000 f822 	bl	4788 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    4744:	b110      	cbz	r0, 474c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    4746:	f240 312e 	movw	r1, #814	; 0x32e
    474a:	e004      	b.n	4756 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    474c:	68a0      	ldr	r0, [r4, #8]
    474e:	2800      	cmp	r0, #0
    4750:	d104      	bne.n	475c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    4752:	f240 3131 	movw	r1, #817	; 0x331
    4756:	202d      	movs	r0, #45	; 0x2d
    4758:	f7fd f92a 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    475c:	bd10      	pop	{r4, pc}
    475e:	0000      	.short	0x0000
    4760:	200016a8 	.word	0x200016a8
    4764:	200000f0 	.word	0x200000f0

00004768 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    4768:	4902      	ldr	r1, [pc, #8]	; (4774 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    476a:	4801      	ldr	r0, [pc, #4]	; (4770 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    476c:	6088      	str	r0, [r1, #8]
    476e:	4770      	bx	lr
    4770:	000052f0 	.word	0x000052f0
    4774:	200000f0 	.word	0x200000f0

00004778 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    4778:	4902      	ldr	r1, [pc, #8]	; (4784 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    477a:	6008      	str	r0, [r1, #0]
    477c:	6889      	ldr	r1, [r1, #8]
    477e:	6809      	ldr	r1, [r1, #0]
    4780:	4708      	bx	r1
    4782:	0000      	.short	0x0000
    4784:	200000f0 	.word	0x200000f0

00004788 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    4788:	4808      	ldr	r0, [pc, #32]	; (47ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    478a:	b510      	push	{r4, lr}
    478c:	7800      	ldrb	r0, [r0, #0]
    478e:	b110      	cbz	r0, 4796 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    4790:	240c      	movs	r4, #12
    4792:	4620      	mov	r0, r4
    4794:	bd10      	pop	{r4, pc}
    4796:	2400      	movs	r4, #0
    4798:	2218      	movs	r2, #24
    479a:	4621      	mov	r1, r4
    479c:	4803      	ldr	r0, [pc, #12]	; (47ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    479e:	f00d fbec 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    47a2:	f004 f8d9 	bl	8958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    47a6:	f003 fefd 	bl	85a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    47aa:	e7f2      	b.n	4792 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    47ac:	200016a8 	.word	0x200016a8

000047b0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    47b0:	4904      	ldr	r1, [pc, #16]	; (47c4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    47b2:	b510      	push	{r4, lr}
    47b4:	7809      	ldrb	r1, [r1, #0]
    47b6:	2901      	cmp	r1, #1
    47b8:	d101      	bne.n	47be <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    47ba:	f000 fbd5 	bl	4f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    47be:	2000      	movs	r0, #0
    47c0:	bd10      	pop	{r4, pc}
    47c2:	0000      	.short	0x0000
    47c4:	200016a8 	.word	0x200016a8

000047c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    47c8:	4902      	ldr	r1, [pc, #8]	; (47d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    47ca:	4801      	ldr	r0, [pc, #4]	; (47d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    47cc:	6008      	str	r0, [r1, #0]
    47ce:	4770      	bx	lr
    47d0:	00005095 	.word	0x00005095
    47d4:	200000fc 	.word	0x200000fc

000047d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    47d8:	b510      	push	{r4, lr}
    47da:	4604      	mov	r4, r0
    47dc:	7880      	ldrb	r0, [r0, #2]
    47de:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    47e2:	b158      	cbz	r0, 47fc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    47e4:	233c      	movs	r3, #60	; 0x3c
    47e6:	22ff      	movs	r2, #255	; 0xff
    47e8:	4620      	mov	r0, r4
    47ea:	69e1      	ldr	r1, [r4, #28]
    47ec:	f000 fbe2 	bl	4fb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    47f0:	2202      	movs	r2, #2
    47f2:	4904      	ldr	r1, [pc, #16]	; (4804 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    47f4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    47f8:	f00a fe00 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    47fc:	2001      	movs	r0, #1
    47fe:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    4802:	bd10      	pop	{r4, pc}
    4804:	0000fcb7 	.word	0x0000fcb7
    4808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    480c:	000f      	movs	r7, r1
    480e:	4604      	mov	r4, r0
    4810:	d023      	beq.n	485a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    4812:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4816:	4605      	mov	r5, r0
    4818:	f00b fb0e 	bl	fe38 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    481c:	b9b0      	cbnz	r0, 484c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    481e:	78a0      	ldrb	r0, [r4, #2]
    4820:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4824:	b350      	cbz	r0, 487c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    4826:	4628      	mov	r0, r5
    4828:	f00b fadd 	bl	fde6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    482c:	4606      	mov	r6, r0
    482e:	4628      	mov	r0, r5
    4830:	f00b fb02 	bl	fe38 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    4834:	1a30      	subs	r0, r6, r0
    4836:	b2c0      	uxtb	r0, r0
    4838:	f00b fb53 	bl	fee2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    483c:	4601      	mov	r1, r0
    483e:	4835      	ldr	r0, [pc, #212]	; (4914 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    4840:	6842      	ldr	r2, [r0, #4]
    4842:	4411      	add	r1, r2
    4844:	6041      	str	r1, [r0, #4]
    4846:	4628      	mov	r0, r5
    4848:	f00b fb14 	bl	fe74 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    484c:	4628      	mov	r0, r5
    484e:	f00b fad6 	bl	fdfe <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    4852:	4601      	mov	r1, r0
    4854:	4620      	mov	r0, r4
    4856:	f00b fa9e 	bl	fd96 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    485a:	4d2f      	ldr	r5, [pc, #188]	; (4918 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    485c:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    4860:	2100      	movs	r1, #0
    4862:	6868      	ldr	r0, [r5, #4]
    4864:	8001      	strh	r1, [r0, #0]
    4866:	f00b fa0f 	bl	fc88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    486a:	8860      	ldrh	r0, [r4, #2]
    486c:	2813      	cmp	r0, #19
    486e:	d013      	beq.n	4898 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    4870:	dc09      	bgt.n	4886 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    4872:	2810      	cmp	r0, #16
    4874:	d036      	beq.n	48e4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    4876:	2812      	cmp	r0, #18
    4878:	d109      	bne.n	488e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    487a:	e031      	b.n	48e0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    487c:	4620      	mov	r0, r4
    487e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4882:	f000 bb71 	b.w	4f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    4886:	2815      	cmp	r0, #21
    4888:	d00f      	beq.n	48aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    488a:	281d      	cmp	r0, #29
    488c:	d00d      	beq.n	48aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    488e:	f240 6173 	movw	r1, #1651	; 0x673
    4892:	202d      	movs	r0, #45	; 0x2d
    4894:	f7fd f88c 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4898:	2100      	movs	r1, #0
    489a:	6868      	ldr	r0, [r5, #4]
    489c:	f00a fc2c 	bl	f0f8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    48a0:	2101      	movs	r1, #1
    48a2:	6868      	ldr	r0, [r5, #4]
    48a4:	f00b f9f0 	bl	fc88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    48a8:	e020      	b.n	48ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    48aa:	2101      	movs	r1, #1
    48ac:	6868      	ldr	r0, [r5, #4]
    48ae:	f00a fc23 	bl	f0f8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    48b2:	2101      	movs	r1, #1
    48b4:	6868      	ldr	r0, [r5, #4]
    48b6:	f00b f9e7 	bl	fc88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    48ba:	b136      	cbz	r6, 48ca <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    48bc:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    48c0:	6868      	ldr	r0, [r5, #4]
    48c2:	f00a fc34 	bl	f12e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    48c6:	2101      	movs	r1, #1
    48c8:	e006      	b.n	48d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    48ca:	f104 0158 	add.w	r1, r4, #88	; 0x58
    48ce:	6868      	ldr	r0, [r5, #4]
    48d0:	f00a fc2d 	bl	f12e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    48d4:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    48d8:	6868      	ldr	r0, [r5, #4]
    48da:	f00a fc2e 	bl	f13a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    48de:	e005      	b.n	48ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    48e0:	2106      	movs	r1, #6
    48e2:	e000      	b.n	48e6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    48e4:	2102      	movs	r1, #2
    48e6:	6868      	ldr	r0, [r5, #4]
    48e8:	f00a fc06 	bl	f0f8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    48ec:	4620      	mov	r0, r4
    48ee:	f000 fcdd 	bl	52ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x798>
    48f2:	8860      	ldrh	r0, [r4, #2]
    48f4:	281d      	cmp	r0, #29
    48f6:	d007      	beq.n	4908 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    48f8:	2815      	cmp	r0, #21
    48fa:	d005      	beq.n	4908 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    48fc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    4900:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    4902:	6868      	ldr	r0, [r5, #4]
    4904:	f00a fbe8 	bl	f0d8 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    4908:	4639      	mov	r1, r7
    490a:	4620      	mov	r0, r4
    490c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4910:	f000 b9f4 	b.w	4cfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>
    4914:	200016a8 	.word	0x200016a8
    4918:	200000f0 	.word	0x200000f0
    491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4920:	4d2f      	ldr	r5, [pc, #188]	; (49e0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    4922:	4680      	mov	r8, r0
    4924:	7828      	ldrb	r0, [r5, #0]
    4926:	2802      	cmp	r0, #2
    4928:	d005      	beq.n	4936 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    492a:	7828      	ldrb	r0, [r5, #0]
    492c:	2803      	cmp	r0, #3
    492e:	d002      	beq.n	4936 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    4930:	f640 512d 	movw	r1, #3373	; 0xd2d
    4934:	e02b      	b.n	498e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    4936:	4c2b      	ldr	r4, [pc, #172]	; (49e4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    4938:	6826      	ldr	r6, [r4, #0]
    493a:	7b30      	ldrb	r0, [r6, #12]
    493c:	b118      	cbz	r0, 4946 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    493e:	f7fe ff83 	bl	3848 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    4942:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    4946:	f8d4 c004 	ldr.w	ip, [r4, #4]
    494a:	2700      	movs	r7, #0
    494c:	f1b8 0f00 	cmp.w	r8, #0
    4950:	f89c 0000 	ldrb.w	r0, [ip]
    4954:	f000 060f 	and.w	r6, r0, #15
    4958:	d027      	beq.n	49aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    495a:	6821      	ldr	r1, [r4, #0]
    495c:	09c0      	lsrs	r0, r0, #7
    495e:	f101 0351 	add.w	r3, r1, #81	; 0x51
    4962:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    4966:	f10c 0109 	add.w	r1, ip, #9
    496a:	f00a f8b9 	bl	eae0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    496e:	b1e0      	cbz	r0, 49aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    4970:	4639      	mov	r1, r7
    4972:	6860      	ldr	r0, [r4, #4]
    4974:	f00a fba0 	bl	f0b8 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    4978:	b1b8      	cbz	r0, 49aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    497a:	782a      	ldrb	r2, [r5, #0]
    497c:	6820      	ldr	r0, [r4, #0]
    497e:	4631      	mov	r1, r6
    4980:	2a02      	cmp	r2, #2
    4982:	d007      	beq.n	4994 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    4984:	782a      	ldrb	r2, [r5, #0]
    4986:	2a03      	cmp	r2, #3
    4988:	d004      	beq.n	4994 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    498a:	f640 5106 	movw	r1, #3334	; 0xd06
    498e:	202d      	movs	r0, #45	; 0x2d
    4990:	f7fd f80e 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4994:	68a2      	ldr	r2, [r4, #8]
    4996:	782b      	ldrb	r3, [r5, #0]
    4998:	6952      	ldr	r2, [r2, #20]
    499a:	f06f 0607 	mvn.w	r6, #7
    499e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    49a2:	58d2      	ldr	r2, [r2, r3]
    49a4:	4790      	blx	r2
    49a6:	4606      	mov	r6, r0
    49a8:	e000      	b.n	49ac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    49aa:	2601      	movs	r6, #1
    49ac:	7ba8      	ldrb	r0, [r5, #14]
    49ae:	b118      	cbz	r0, 49b8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    49b0:	f003 ffd2 	bl	8958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    49b4:	f003 fdf6 	bl	85a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    49b8:	2e00      	cmp	r6, #0
    49ba:	d00f      	beq.n	49dc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    49bc:	6820      	ldr	r0, [r4, #0]
    49be:	f00b faa6 	bl	ff0e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    49c2:	b130      	cbz	r0, 49d2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    49c4:	f003 ffea 	bl	899c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    49c8:	68a0      	ldr	r0, [r4, #8]
    49ca:	6880      	ldr	r0, [r0, #8]
    49cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    49d0:	4700      	bx	r0
    49d2:	6820      	ldr	r0, [r4, #0]
    49d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    49d8:	f000 bac6 	b.w	4f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    49dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49e0:	200016a8 	.word	0x200016a8
    49e4:	200000f0 	.word	0x200000f0
    49e8:	b510      	push	{r4, lr}
    49ea:	2903      	cmp	r1, #3
    49ec:	d002      	beq.n	49f4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    49ee:	2905      	cmp	r1, #5
    49f0:	d10a      	bne.n	4a08 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    49f2:	e002      	b.n	49fa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    49f4:	f000 fbb2 	bl	515c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>
    49f8:	e003      	b.n	4a02 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    49fa:	4904      	ldr	r1, [pc, #16]	; (4a0c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x234>)
    49fc:	6809      	ldr	r1, [r1, #0]
    49fe:	b109      	cbz	r1, 4a04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    4a00:	4788      	blx	r1
    4a02:	b108      	cbz	r0, 4a08 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    4a04:	2000      	movs	r0, #0
    4a06:	bd10      	pop	{r4, pc}
    4a08:	2001      	movs	r0, #1
    4a0a:	bd10      	pop	{r4, pc}
    4a0c:	200000fc 	.word	0x200000fc
    4a10:	4a09      	ldr	r2, [pc, #36]	; (4a38 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>)
    4a12:	0003      	movs	r3, r0
    4a14:	6810      	ldr	r0, [r2, #0]
    4a16:	d001      	beq.n	4a1c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
    4a18:	f000 baa6 	b.w	4f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    4a1c:	2900      	cmp	r1, #0
    4a1e:	d009      	beq.n	4a34 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x25c>
    4a20:	6891      	ldr	r1, [r2, #8]
    4a22:	4a06      	ldr	r2, [pc, #24]	; (4a3c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x264>)
    4a24:	6909      	ldr	r1, [r1, #16]
    4a26:	7812      	ldrb	r2, [r2, #0]
    4a28:	f06f 030f 	mvn.w	r3, #15
    4a2c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4a30:	5889      	ldr	r1, [r1, r2]
    4a32:	4708      	bx	r1
    4a34:	4770      	bx	lr
    4a36:	0000      	.short	0x0000
    4a38:	200000f0 	.word	0x200000f0
    4a3c:	200016a8 	.word	0x200016a8
    4a40:	b570      	push	{r4, r5, r6, lr}
    4a42:	4604      	mov	r4, r0
    4a44:	8840      	ldrh	r0, [r0, #2]
    4a46:	2810      	cmp	r0, #16
    4a48:	d019      	beq.n	4a7e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2a6>
    4a4a:	4d10      	ldr	r5, [pc, #64]	; (4a8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b4>)
    4a4c:	7ba8      	ldrb	r0, [r5, #14]
    4a4e:	b120      	cbz	r0, 4a5a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x282>
    4a50:	f003 fdc8 	bl	85e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    4a54:	2040      	movs	r0, #64	; 0x40
    4a56:	f003 ff8d 	bl	8974 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    4a5a:	480d      	ldr	r0, [pc, #52]	; (4a90 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b8>)
    4a5c:	6840      	ldr	r0, [r0, #4]
    4a5e:	f004 fa0f 	bl	8e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4a62:	78a0      	ldrb	r0, [r4, #2]
    4a64:	0740      	lsls	r0, r0, #29
    4a66:	d404      	bmi.n	4a72 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29a>
    4a68:	2100      	movs	r1, #0
    4a6a:	7922      	ldrb	r2, [r4, #4]
    4a6c:	4608      	mov	r0, r1
    4a6e:	f004 fa8f 	bl	8f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    4a72:	2000      	movs	r0, #0
    4a74:	f004 f8b4 	bl	8be0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    4a78:	2002      	movs	r0, #2
    4a7a:	7028      	strb	r0, [r5, #0]
    4a7c:	bd70      	pop	{r4, r5, r6, pc}
    4a7e:	4620      	mov	r0, r4
    4a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4a84:	2101      	movs	r1, #1
    4a86:	f7ff bebf 	b.w	4808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4a8a:	0000      	.short	0x0000
    4a8c:	200016a8 	.word	0x200016a8
    4a90:	200000f0 	.word	0x200000f0
    4a94:	b510      	push	{r4, lr}
    4a96:	4c12      	ldr	r4, [pc, #72]	; (4ae0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x308>)
    4a98:	6820      	ldr	r0, [r4, #0]
    4a9a:	f000 f825 	bl	4ae8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
    4a9e:	6820      	ldr	r0, [r4, #0]
    4aa0:	f00b fa35 	bl	ff0e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    4aa4:	2800      	cmp	r0, #0
    4aa6:	6820      	ldr	r0, [r4, #0]
    4aa8:	d00b      	beq.n	4ac2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2ea>
    4aaa:	490e      	ldr	r1, [pc, #56]	; (4ae4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30c>)
    4aac:	780a      	ldrb	r2, [r1, #0]
    4aae:	2a02      	cmp	r2, #2
    4ab0:	d00b      	beq.n	4aca <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
    4ab2:	780a      	ldrb	r2, [r1, #0]
    4ab4:	2a03      	cmp	r2, #3
    4ab6:	d008      	beq.n	4aca <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
    4ab8:	f640 4137 	movw	r1, #3127	; 0xc37
    4abc:	202d      	movs	r0, #45	; 0x2d
    4abe:	f7fc ff77 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ac6:	f000 ba4f 	b.w	4f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    4aca:	68a2      	ldr	r2, [r4, #8]
    4acc:	7809      	ldrb	r1, [r1, #0]
    4ace:	68d2      	ldr	r2, [r2, #12]
    4ad0:	f06f 0307 	mvn.w	r3, #7
    4ad4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4ad8:	5851      	ldr	r1, [r2, r1]
    4ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ade:	4708      	bx	r1
    4ae0:	200000f0 	.word	0x200000f0
    4ae4:	200016a8 	.word	0x200016a8
    4ae8:	b510      	push	{r4, lr}
    4aea:	7b01      	ldrb	r1, [r0, #12]
    4aec:	b121      	cbz	r1, 4af8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x320>
    4aee:	4604      	mov	r4, r0
    4af0:	f7fe feaa 	bl	3848 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    4af4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    4af8:	4805      	ldr	r0, [pc, #20]	; (4b10 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x338>)
    4afa:	7b80      	ldrb	r0, [r0, #14]
    4afc:	2800      	cmp	r0, #0
    4afe:	d005      	beq.n	4b0c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x334>
    4b00:	f003 ff2a 	bl	8958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b08:	f003 bd4c 	b.w	85a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4b0c:	bd10      	pop	{r4, pc}
    4b0e:	0000      	.short	0x0000
    4b10:	200016a8 	.word	0x200016a8

00004b14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    4b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b18:	4d5c      	ldr	r5, [pc, #368]	; (4c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    4b1a:	4604      	mov	r4, r0
    4b1c:	b086      	sub	sp, #24
    4b1e:	7828      	ldrb	r0, [r5, #0]
    4b20:	bbe8      	cbnz	r0, 4b9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    4b22:	7820      	ldrb	r0, [r4, #0]
    4b24:	28ff      	cmp	r0, #255	; 0xff
    4b26:	d04b      	beq.n	4bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    4b28:	f04f 0800 	mov.w	r8, #0
    4b2c:	f8a5 800c 	strh.w	r8, [r5, #12]
    4b30:	f8c5 8004 	str.w	r8, [r5, #4]
    4b34:	f885 8001 	strb.w	r8, [r5, #1]
    4b38:	f885 8002 	strb.w	r8, [r5, #2]
    4b3c:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    4b40:	4b53      	ldr	r3, [pc, #332]	; (4c90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    4b42:	4e54      	ldr	r6, [pc, #336]	; (4c94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    4b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4b46:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    4b4a:	68b0      	ldr	r0, [r6, #8]
    4b4c:	6840      	ldr	r0, [r0, #4]
    4b4e:	9003      	str	r0, [sp, #12]
    4b50:	4668      	mov	r0, sp
    4b52:	f004 f819 	bl	8b88 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4b56:	f004 f8ed 	bl	8d34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4b5a:	f003 fefd 	bl	8958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4b5e:	f003 fd21 	bl	85a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4b62:	484d      	ldr	r0, [pc, #308]	; (4c98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    4b64:	f004 fa46 	bl	8ff4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4b68:	484c      	ldr	r0, [pc, #304]	; (4c9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    4b6a:	f004 fa4d 	bl	9008 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4b6e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4b72:	4607      	mov	r7, r0
    4b74:	f00b f97e 	bl	fe74 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    4b78:	4638      	mov	r0, r7
    4b7a:	f00b f940 	bl	fdfe <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    4b7e:	4601      	mov	r1, r0
    4b80:	4620      	mov	r0, r4
    4b82:	f00b f908 	bl	fd96 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    4b86:	f994 000e 	ldrsb.w	r0, [r4, #14]
    4b8a:	f004 f957 	bl	8e3c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4b8e:	7921      	ldrb	r1, [r4, #4]
    4b90:	2000      	movs	r0, #0
    4b92:	f003 ff8d 	bl	8ab0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4b96:	2101      	movs	r1, #1
    4b98:	60a8      	str	r0, [r5, #8]
    4b9a:	b1a8      	cbz	r0, 4bc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    4b9c:	e000      	b.n	4ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    4b9e:	e00f      	b.n	4bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    4ba0:	f104 0138 	add.w	r1, r4, #56	; 0x38
    4ba4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4ba6:	f009 ff0a 	bl	e9be <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    4baa:	4607      	mov	r7, r0
    4bac:	f104 0140 	add.w	r1, r4, #64	; 0x40
    4bb0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4bb2:	f009 ff07 	bl	e9c4 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    4bb6:	b14f      	cbz	r7, 4bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    4bb8:	f894 1020 	ldrb.w	r1, [r4, #32]
    4bbc:	b951      	cbnz	r1, 4bd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
    4bbe:	e005      	b.n	4bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    4bc0:	200c      	movs	r0, #12
    4bc2:	b006      	add	sp, #24
    4bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4bc8:	7029      	strb	r1, [r5, #0]
    4bca:	e05c      	b.n	4c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    4bcc:	b120      	cbz	r0, 4bd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    4bce:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    4bd2:	b108      	cbz	r0, 4bd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    4bd4:	2701      	movs	r7, #1
    4bd6:	e000      	b.n	4bda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    4bd8:	2700      	movs	r7, #0
    4bda:	7ea0      	ldrb	r0, [r4, #26]
    4bdc:	b920      	cbnz	r0, 4be8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    4bde:	7e20      	ldrb	r0, [r4, #24]
    4be0:	b910      	cbnz	r0, 4be8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    4be2:	78a0      	ldrb	r0, [r4, #2]
    4be4:	0740      	lsls	r0, r0, #29
    4be6:	d523      	bpl.n	4c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    4be8:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    4bec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4bf0:	4050      	eors	r0, r2
    4bf2:	ea70 0101 	orns	r1, r0, r1
    4bf6:	d006      	beq.n	4c06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2>
    4bf8:	f00c ffb3 	bl	11b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4bfc:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    4c00:	1a80      	subs	r0, r0, r2
    4c02:	4199      	sbcs	r1, r3
    4c04:	d200      	bcs.n	4c08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    4c06:	b19f      	cbz	r7, 4c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    4c08:	f7fe fc88 	bl	351c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4c0c:	4924      	ldr	r1, [pc, #144]	; (4ca0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    4c0e:	fba0 2301 	umull	r2, r3, r0, r1
    4c12:	f104 0048 	add.w	r0, r4, #72	; 0x48
    4c16:	f00b f8c9 	bl	fdac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    4c1a:	2101      	movs	r1, #1
    4c1c:	4620      	mov	r0, r4
    4c1e:	f00b f87e 	bl	fd1e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    4c22:	78a0      	ldrb	r0, [r4, #2]
    4c24:	0740      	lsls	r0, r0, #29
    4c26:	d503      	bpl.n	4c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    4c28:	2101      	movs	r1, #1
    4c2a:	4620      	mov	r0, r4
    4c2c:	f000 fac8 	bl	51c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ac>
    4c30:	6870      	ldr	r0, [r6, #4]
    4c32:	1cc0      	adds	r0, r0, #3
    4c34:	f009 ffdf 	bl	ebf6 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    4c38:	73a8      	strb	r0, [r5, #14]
    4c3a:	78a0      	ldrb	r0, [r4, #2]
    4c3c:	07c0      	lsls	r0, r0, #31
    4c3e:	d022      	beq.n	4c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    4c40:	f8cd 8010 	str.w	r8, [sp, #16]
    4c44:	20ff      	movs	r0, #255	; 0xff
    4c46:	f8cd 8014 	str.w	r8, [sp, #20]
    4c4a:	73e8      	strb	r0, [r5, #15]
    4c4c:	69e6      	ldr	r6, [r4, #28]
    4c4e:	f106 070a 	add.w	r7, r6, #10
    4c52:	e013      	b.n	4c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    4c54:	9c04      	ldr	r4, [sp, #16]
    4c56:	42b4      	cmp	r4, r6
    4c58:	d010      	beq.n	4c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    4c5a:	7a72      	ldrb	r2, [r6, #9]
    4c5c:	7a60      	ldrb	r0, [r4, #9]
    4c5e:	463b      	mov	r3, r7
    4c60:	f104 010a 	add.w	r1, r4, #10
    4c64:	f009 ff3c 	bl	eae0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4c68:	b140      	cbz	r0, 4c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    4c6a:	78a0      	ldrb	r0, [r4, #2]
    4c6c:	73e8      	strb	r0, [r5, #15]
    4c6e:	f8d4 0003 	ldr.w	r0, [r4, #3]
    4c72:	6128      	str	r0, [r5, #16]
    4c74:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    4c78:	82a8      	strh	r0, [r5, #20]
    4c7a:	e004      	b.n	4c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    4c7c:	a804      	add	r0, sp, #16
    4c7e:	f7fd fa17 	bl	20b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4c82:	2800      	cmp	r0, #0
    4c84:	d0e6      	beq.n	4c54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140>
    4c86:	2000      	movs	r0, #0
    4c88:	e79b      	b.n	4bc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    4c8a:	0000      	.short	0x0000
    4c8c:	200016a8 	.word	0x200016a8
    4c90:	000052d0 	.word	0x000052d0
    4c94:	200000f0 	.word	0x200000f0
    4c98:	8e89bed6 	.word	0x8e89bed6
    4c9c:	00555555 	.word	0x00555555
    4ca0:	000f4240 	.word	0x000f4240
    4ca4:	b510      	push	{r4, lr}
    4ca6:	4604      	mov	r4, r0
    4ca8:	f7ff ff34 	bl	4b14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    4cac:	2800      	cmp	r0, #0
    4cae:	d108      	bne.n	4cc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    4cb0:	4804      	ldr	r0, [pc, #16]	; (4cc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>)
    4cb2:	7800      	ldrb	r0, [r0, #0]
    4cb4:	2801      	cmp	r0, #1
    4cb6:	d003      	beq.n	4cc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    4cb8:	2100      	movs	r1, #0
    4cba:	4620      	mov	r0, r4
    4cbc:	f7ff fda4 	bl	4808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4cc0:	2000      	movs	r0, #0
    4cc2:	bd10      	pop	{r4, pc}
    4cc4:	200016a8 	.word	0x200016a8
    4cc8:	480a      	ldr	r0, [pc, #40]	; (4cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e0>)
    4cca:	b510      	push	{r4, lr}
    4ccc:	490a      	ldr	r1, [pc, #40]	; (4cf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    4cce:	6804      	ldr	r4, [r0, #0]
    4cd0:	7808      	ldrb	r0, [r1, #0]
    4cd2:	2800      	cmp	r0, #0
    4cd4:	d00d      	beq.n	4cf2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1de>
    4cd6:	7808      	ldrb	r0, [r1, #0]
    4cd8:	2802      	cmp	r0, #2
    4cda:	d002      	beq.n	4ce2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    4cdc:	7808      	ldrb	r0, [r1, #0]
    4cde:	2803      	cmp	r0, #3
    4ce0:	d102      	bne.n	4ce8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    4ce2:	4620      	mov	r0, r4
    4ce4:	f7ff ff00 	bl	4ae8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
    4ce8:	4620      	mov	r0, r4
    4cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4cee:	f000 b93b 	b.w	4f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    4cf2:	bd10      	pop	{r4, pc}
    4cf4:	200000f0 	.word	0x200000f0
    4cf8:	200016a8 	.word	0x200016a8
    4cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d00:	4604      	mov	r4, r0
    4d02:	4829      	ldr	r0, [pc, #164]	; (4da8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    4d04:	460d      	mov	r5, r1
    4d06:	6840      	ldr	r0, [r0, #4]
    4d08:	f004 f8ba 	bl	8e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4d0c:	4e27      	ldr	r6, [pc, #156]	; (4dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    4d0e:	2004      	movs	r0, #4
    4d10:	7030      	strb	r0, [r6, #0]
    4d12:	b355      	cbz	r5, 4d6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    4d14:	8860      	ldrh	r0, [r4, #2]
    4d16:	2810      	cmp	r0, #16
    4d18:	d023      	beq.n	4d62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    4d1a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4d1e:	4680      	mov	r8, r0
    4d20:	68b5      	ldr	r5, [r6, #8]
    4d22:	f00b f860 	bl	fde6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    4d26:	4607      	mov	r7, r0
    4d28:	4640      	mov	r0, r8
    4d2a:	f00b f885 	bl	fe38 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    4d2e:	1a38      	subs	r0, r7, r0
    4d30:	1e40      	subs	r0, r0, #1
    4d32:	b2c0      	uxtb	r0, r0
    4d34:	8861      	ldrh	r1, [r4, #2]
    4d36:	2228      	movs	r2, #40	; 0x28
    4d38:	f000 fb06 	bl	5348 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    4d3c:	4405      	add	r5, r0
    4d3e:	78a0      	ldrb	r0, [r4, #2]
    4d40:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4d44:	b130      	cbz	r0, 4d54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x240>
    4d46:	6870      	ldr	r0, [r6, #4]
    4d48:	4405      	add	r5, r0
    4d4a:	f00b f8ce 	bl	feea <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    4d4e:	4428      	add	r0, r5
    4d50:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    4d54:	7922      	ldrb	r2, [r4, #4]
    4d56:	4629      	mov	r1, r5
    4d58:	2000      	movs	r0, #0
    4d5a:	f004 f8a7 	bl	8eac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    4d5e:	b920      	cbnz	r0, 4d6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    4d60:	e00c      	b.n	4d7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    4d62:	7921      	ldrb	r1, [r4, #4]
    4d64:	2000      	movs	r0, #0
    4d66:	f003 fe69 	bl	8a3c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    4d6a:	8860      	ldrh	r0, [r4, #2]
    4d6c:	2813      	cmp	r0, #19
    4d6e:	d011      	beq.n	4d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    4d70:	dc07      	bgt.n	4d82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26e>
    4d72:	2810      	cmp	r0, #16
    4d74:	d015      	beq.n	4da2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28e>
    4d76:	2812      	cmp	r0, #18
    4d78:	d107      	bne.n	4d8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
    4d7a:	e00b      	b.n	4d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    4d7c:	f640 51a8 	movw	r1, #3496	; 0xda8
    4d80:	e005      	b.n	4d8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    4d82:	2815      	cmp	r0, #21
    4d84:	d006      	beq.n	4d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    4d86:	281d      	cmp	r0, #29
    4d88:	d004      	beq.n	4d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    4d8a:	f640 51bc 	movw	r1, #3516	; 0xdbc
    4d8e:	202d      	movs	r0, #45	; 0x2d
    4d90:	f7fc fe0e 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d94:	7922      	ldrb	r2, [r4, #4]
    4d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4d9a:	2101      	movs	r1, #1
    4d9c:	2000      	movs	r0, #0
    4d9e:	f004 b8f7 	b.w	8f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    4da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4da6:	0000      	.short	0x0000
    4da8:	200000f0 	.word	0x200000f0
    4dac:	200016a8 	.word	0x200016a8
    4db0:	b538      	push	{r3, r4, r5, lr}
    4db2:	4604      	mov	r4, r0
    4db4:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    4db8:	460b      	mov	r3, r1
    4dba:	f88d 0000 	strb.w	r0, [sp]
    4dbe:	9800      	ldr	r0, [sp, #0]
    4dc0:	9000      	str	r0, [sp, #0]
    4dc2:	f89d 0000 	ldrb.w	r0, [sp]
    4dc6:	2800      	cmp	r0, #0
    4dc8:	d13a      	bne.n	4e40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32c>
    4dca:	7820      	ldrb	r0, [r4, #0]
    4dcc:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    4dd0:	2bff      	cmp	r3, #255	; 0xff
    4dd2:	d010      	beq.n	4df6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e2>
    4dd4:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    4dd8:	1e51      	subs	r1, r2, #1
    4dda:	4618      	mov	r0, r3
    4ddc:	f7fe fb20 	bl	3420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    4de0:	b130      	cbz	r0, 4df0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    4de2:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    4de6:	f040 0002 	orr.w	r0, r0, #2
    4dea:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    4dee:	e011      	b.n	4e14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    4df0:	f241 0118 	movw	r1, #4120	; 0x1018
    4df4:	e021      	b.n	4e3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    4df6:	4813      	ldr	r0, [pc, #76]	; (4e44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>)
    4df8:	6840      	ldr	r0, [r0, #4]
    4dfa:	7801      	ldrb	r1, [r0, #0]
    4dfc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    4e00:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    4e04:	f8d0 1003 	ldr.w	r1, [r0, #3]
    4e08:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    4e0c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    4e10:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    4e14:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    4e18:	287f      	cmp	r0, #127	; 0x7f
    4e1a:	d00c      	beq.n	4e36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x322>
    4e1c:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    4e20:	207f      	movs	r0, #127	; 0x7f
    4e22:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    4e26:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    4e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4e2e:	2202      	movs	r2, #2
    4e30:	4905      	ldr	r1, [pc, #20]	; (4e48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    4e32:	f00a bae3 	b.w	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4e36:	f640 616c 	movw	r1, #3692	; 0xe6c
    4e3a:	202d      	movs	r0, #45	; 0x2d
    4e3c:	f7fc fdb8 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e40:	bd38      	pop	{r3, r4, r5, pc}
    4e42:	0000      	.short	0x0000
    4e44:	200000f0 	.word	0x200000f0
    4e48:	0000fd07 	.word	0x0000fd07
    4e4c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    4e50:	4616      	mov	r6, r2
    4e52:	4604      	mov	r4, r0
    4e54:	2903      	cmp	r1, #3
    4e56:	d004      	beq.n	4e62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    4e58:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    4e5c:	b108      	cbz	r0, 4e62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    4e5e:	2001      	movs	r0, #1
    4e60:	e000      	b.n	4e64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    4e62:	2000      	movs	r0, #0
    4e64:	2500      	movs	r5, #0
    4e66:	2903      	cmp	r1, #3
    4e68:	d003      	beq.n	4e72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    4e6a:	2701      	movs	r7, #1
    4e6c:	2905      	cmp	r1, #5
    4e6e:	d005      	beq.n	4e7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
    4e70:	e008      	b.n	4e84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    4e72:	78a1      	ldrb	r1, [r4, #2]
    4e74:	2702      	movs	r7, #2
    4e76:	f3c1 0140 	ubfx	r1, r1, #1, #1
    4e7a:	e001      	b.n	4e80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
    4e7c:	78a1      	ldrb	r1, [r4, #2]
    4e7e:	07c9      	lsls	r1, r1, #31
    4e80:	2900      	cmp	r1, #0
    4e82:	d06b      	beq.n	4f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    4e84:	2800      	cmp	r0, #0
    4e86:	d169      	bne.n	4f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    4e88:	4835      	ldr	r0, [pc, #212]	; (4f60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x44c>)
    4e8a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 4f64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    4e8e:	7b80      	ldrb	r0, [r0, #14]
    4e90:	b180      	cbz	r0, 4eb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    4e92:	f009 feb3 	bl	ebfc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    4e96:	7030      	strb	r0, [r6, #0]
    4e98:	28ff      	cmp	r0, #255	; 0xff
    4e9a:	d014      	beq.n	4ec6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    4e9c:	b2c0      	uxtb	r0, r0
    4e9e:	466a      	mov	r2, sp
    4ea0:	a902      	add	r1, sp, #8
    4ea2:	f7fe fabd 	bl	3420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    4ea6:	b148      	cbz	r0, 4ebc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    4ea8:	4669      	mov	r1, sp
    4eaa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4eae:	f00a fdd4 	bl	fa5a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    4eb2:	4605      	mov	r5, r0
    4eb4:	7830      	ldrb	r0, [r6, #0]
    4eb6:	28ff      	cmp	r0, #255	; 0xff
    4eb8:	d005      	beq.n	4ec6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    4eba:	e00d      	b.n	4ed8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    4ebc:	f640 719b 	movw	r1, #3995	; 0xf9b
    4ec0:	202d      	movs	r0, #45	; 0x2d
    4ec2:	f7fc fd75 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ec6:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4eca:	f811 0b03 	ldrb.w	r0, [r1], #3
    4ece:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4ed2:	f00a fdc2 	bl	fa5a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    4ed6:	4605      	mov	r5, r0
    4ed8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4edc:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    4ee0:	f104 0358 	add.w	r3, r4, #88	; 0x58
    4ee4:	f811 0b03 	ldrb.w	r0, [r1], #3
    4ee8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4eec:	f009 fdf8 	bl	eae0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4ef0:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4ef4:	4680      	mov	r8, r0
    4ef6:	f811 0b03 	ldrb.w	r0, [r1], #3
    4efa:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4efe:	f009 fe87 	bl	ec10 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    4f02:	4681      	mov	r9, r0
    4f04:	f7fe fb1e 	bl	3544 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    4f08:	b138      	cbz	r0, 4f1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    4f0a:	4648      	mov	r0, r9
    4f0c:	f7fe fa5c 	bl	33c8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    4f10:	b118      	cbz	r0, 4f1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    4f12:	2110      	movs	r1, #16
    4f14:	f00a f836 	bl	ef84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    4f18:	b138      	cbz	r0, 4f2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    4f1a:	2100      	movs	r1, #0
    4f1c:	7830      	ldrb	r0, [r6, #0]
    4f1e:	28ff      	cmp	r0, #255	; 0xff
    4f20:	d00c      	beq.n	4f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x428>
    4f22:	f1b8 0f00 	cmp.w	r8, #0
    4f26:	d105      	bne.n	4f34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    4f28:	e001      	b.n	4f2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41a>
    4f2a:	2101      	movs	r1, #1
    4f2c:	e7f6      	b.n	4f1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
    4f2e:	7e62      	ldrb	r2, [r4, #25]
    4f30:	4282      	cmp	r2, r0
    4f32:	d101      	bne.n	4f38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    4f34:	2001      	movs	r0, #1
    4f36:	e003      	b.n	4f40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    4f38:	2000      	movs	r0, #0
    4f3a:	e001      	b.n	4f40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    4f3c:	ea28 0001 	bic.w	r0, r8, r1
    4f40:	78a2      	ldrb	r2, [r4, #2]
    4f42:	0752      	lsls	r2, r2, #29
    4f44:	d501      	bpl.n	4f4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    4f46:	b930      	cbnz	r0, 4f56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    4f48:	e008      	b.n	4f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    4f4a:	b939      	cbnz	r1, 4f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    4f4c:	b91d      	cbnz	r5, 4f56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    4f4e:	7be0      	ldrb	r0, [r4, #15]
    4f50:	b108      	cbz	r0, 4f56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    4f52:	42b8      	cmp	r0, r7
    4f54:	d102      	bne.n	4f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    4f56:	2001      	movs	r0, #1
    4f58:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    4f5c:	2000      	movs	r0, #0
    4f5e:	e7fb      	b.n	4f58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    4f60:	200016a8 	.word	0x200016a8
    4f64:	200000f0 	.word	0x200000f0
    4f68:	b570      	push	{r4, r5, r6, lr}
    4f6a:	4604      	mov	r4, r0
    4f6c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    4f6e:	4d10      	ldr	r5, [pc, #64]	; (4fb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49c>)
    4f70:	1c40      	adds	r0, r0, #1
    4f72:	8620      	strh	r0, [r4, #48]	; 0x30
    4f74:	7ba8      	ldrb	r0, [r5, #14]
    4f76:	2600      	movs	r6, #0
    4f78:	b120      	cbz	r0, 4f84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x470>
    4f7a:	f003 fced 	bl	8958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4f7e:	f003 fb11 	bl	85a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4f82:	73ae      	strb	r6, [r5, #14]
    4f84:	702e      	strb	r6, [r5, #0]
    4f86:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    4f8a:	b108      	cbz	r0, 4f90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
    4f8c:	2101      	movs	r1, #1
    4f8e:	e00a      	b.n	4fa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x492>
    4f90:	7b60      	ldrb	r0, [r4, #13]
    4f92:	b138      	cbz	r0, 4fa4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    4f94:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    4f96:	4288      	cmp	r0, r1
    4f98:	d804      	bhi.n	4fa4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    4f9a:	2101      	movs	r1, #1
    4f9c:	4620      	mov	r0, r4
    4f9e:	f00a ffc8 	bl	ff32 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    4fa2:	bd70      	pop	{r4, r5, r6, pc}
    4fa4:	2100      	movs	r1, #0
    4fa6:	4620      	mov	r0, r4
    4fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4fac:	f00a bfc1 	b.w	ff32 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    4fb0:	200016a8 	.word	0x200016a8
    4fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fb8:	4604      	mov	r4, r0
    4fba:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    4fbe:	8808      	ldrh	r0, [r1, #0]
    4fc0:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    4fc4:	20ff      	movs	r0, #255	; 0xff
    4fc6:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    4fca:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4fce:	4616      	mov	r6, r2
    4fd0:	460d      	mov	r5, r1
    4fd2:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	d14b      	bne.n	5072 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
    4fda:	6928      	ldr	r0, [r5, #16]
    4fdc:	f009 fe60 	bl	eca0 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4fe0:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    4fe4:	8b28      	ldrh	r0, [r5, #24]
    4fe6:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    4fea:	8b68      	ldrh	r0, [r5, #26]
    4fec:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    4ff0:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    4ff4:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    4ff8:	7e20      	ldrb	r0, [r4, #24]
    4ffa:	f104 0151 	add.w	r1, r4, #81	; 0x51
    4ffe:	460f      	mov	r7, r1
    5000:	2500      	movs	r5, #0
    5002:	b120      	cbz	r0, 500e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
    5004:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    5008:	f00a fd53 	bl	fab2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    500c:	b940      	cbnz	r0, 5020 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    500e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5012:	b170      	cbz	r0, 5032 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    5014:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    5018:	4639      	mov	r1, r7
    501a:	f00a fd41 	bl	faa0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    501e:	b140      	cbz	r0, 5032 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    5020:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    5024:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    5028:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    502c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    5030:	e003      	b.n	503a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x526>
    5032:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    5036:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    503a:	4815      	ldr	r0, [pc, #84]	; (5090 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57c>)
    503c:	2eff      	cmp	r6, #255	; 0xff
    503e:	6840      	ldr	r0, [r0, #4]
    5040:	7801      	ldrb	r1, [r0, #0]
    5042:	f3c1 1180 	ubfx	r1, r1, #6, #1
    5046:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    504a:	f850 1f03 	ldr.w	r1, [r0, #3]!
    504e:	d017      	beq.n	5080 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x56c>
    5050:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    5054:	8880      	ldrh	r0, [r0, #4]
    5056:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    505a:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    505e:	1e51      	subs	r1, r2, #1
    5060:	4630      	mov	r0, r6
    5062:	f7fe f9dd 	bl	3420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    5066:	b130      	cbz	r0, 5076 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x562>
    5068:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    506c:	f040 0002 	orr.w	r0, r0, #2
    5070:	7020      	strb	r0, [r4, #0]
    5072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5076:	f640 418b 	movw	r1, #3211	; 0xc8b
    507a:	202d      	movs	r0, #45	; 0x2d
    507c:	f7fc fc98 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5080:	f844 1f7a 	str.w	r1, [r4, #122]!
    5084:	8880      	ldrh	r0, [r0, #4]
    5086:	80a0      	strh	r0, [r4, #4]
    5088:	60e5      	str	r5, [r4, #12]
    508a:	8225      	strh	r5, [r4, #16]
    508c:	e7f1      	b.n	5072 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
    508e:	0000      	.short	0x0000
    5090:	200000f0 	.word	0x200000f0
    5094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5096:	4604      	mov	r4, r0
    5098:	20ff      	movs	r0, #255	; 0xff
    509a:	f88d 0000 	strb.w	r0, [sp]
    509e:	2601      	movs	r6, #1
    50a0:	466a      	mov	r2, sp
    50a2:	2105      	movs	r1, #5
    50a4:	4620      	mov	r0, r4
    50a6:	f7ff fed1 	bl	4e4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    50aa:	b160      	cbz	r0, 50c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b2>
    50ac:	4d28      	ldr	r5, [pc, #160]	; (5150 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x63c>)
    50ae:	4f27      	ldr	r7, [pc, #156]	; (514c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x638>)
    50b0:	6869      	ldr	r1, [r5, #4]
    50b2:	7bfa      	ldrb	r2, [r7, #15]
    50b4:	f107 0310 	add.w	r3, r7, #16
    50b8:	f811 0b03 	ldrb.w	r0, [r1], #3
    50bc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    50c0:	f009 fd0e 	bl	eae0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    50c4:	b110      	cbz	r0, 50cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b8>
    50c6:	2600      	movs	r6, #0
    50c8:	4630      	mov	r0, r6
    50ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50cc:	686a      	ldr	r2, [r5, #4]
    50ce:	69e0      	ldr	r0, [r4, #28]
    50d0:	7812      	ldrb	r2, [r2, #0]
    50d2:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    50d6:	f3c2 1240 	ubfx	r2, r2, #5, #1
    50da:	4011      	ands	r1, r2
    50dc:	7001      	strb	r1, [r0, #0]
    50de:	2201      	movs	r2, #1
    50e0:	4620      	mov	r0, r4
    50e2:	69e1      	ldr	r1, [r4, #28]
    50e4:	f000 f89a 	bl	521c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x708>
    50e8:	2300      	movs	r3, #0
    50ea:	f89d 2000 	ldrb.w	r2, [sp]
    50ee:	4620      	mov	r0, r4
    50f0:	69e1      	ldr	r1, [r4, #28]
    50f2:	f7ff ff5f 	bl	4fb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    50f6:	2202      	movs	r2, #2
    50f8:	4916      	ldr	r1, [pc, #88]	; (5154 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x640>)
    50fa:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    50fe:	f00a f97d 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5102:	69e0      	ldr	r0, [r4, #28]
    5104:	2202      	movs	r2, #2
    5106:	8801      	ldrh	r1, [r0, #0]
    5108:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    510c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    5110:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    5114:	4910      	ldr	r1, [pc, #64]	; (5158 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>)
    5116:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    511a:	f00a f96f 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    511e:	2100      	movs	r1, #0
    5120:	69e0      	ldr	r0, [r4, #28]
    5122:	7039      	strb	r1, [r7, #0]
    5124:	460a      	mov	r2, r1
    5126:	4621      	mov	r1, r4
    5128:	f000 fa7a 	bl	5620 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    512c:	6868      	ldr	r0, [r5, #4]
    512e:	69e1      	ldr	r1, [r4, #28]
    5130:	f8d0 2003 	ldr.w	r2, [r0, #3]
    5134:	f841 2f03 	str.w	r2, [r1, #3]!
    5138:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    513c:	808a      	strh	r2, [r1, #4]
    513e:	7800      	ldrb	r0, [r0, #0]
    5140:	69e1      	ldr	r1, [r4, #28]
    5142:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5146:	7088      	strb	r0, [r1, #2]
    5148:	e7be      	b.n	50c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b4>
    514a:	0000      	.short	0x0000
    514c:	200016a8 	.word	0x200016a8
    5150:	200000f0 	.word	0x200000f0
    5154:	0000fcb7 	.word	0x0000fcb7
    5158:	0000fca7 	.word	0x0000fca7
    515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    515e:	4604      	mov	r4, r0
    5160:	20ff      	movs	r0, #255	; 0xff
    5162:	f88d 0000 	strb.w	r0, [sp]
    5166:	2501      	movs	r5, #1
    5168:	466a      	mov	r2, sp
    516a:	2103      	movs	r1, #3
    516c:	4620      	mov	r0, r4
    516e:	f7ff fe6d 	bl	4e4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    5172:	b1e8      	cbz	r0, 51b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
    5174:	7b20      	ldrb	r0, [r4, #12]
    5176:	b120      	cbz	r0, 5182 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x66e>
    5178:	f89d 1000 	ldrb.w	r1, [sp]
    517c:	4620      	mov	r0, r4
    517e:	f7ff fe17 	bl	4db0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>
    5182:	4e0d      	ldr	r6, [pc, #52]	; (51b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
    5184:	2100      	movs	r1, #0
    5186:	6870      	ldr	r0, [r6, #4]
    5188:	8001      	strh	r1, [r0, #0]
    518a:	2104      	movs	r1, #4
    518c:	f009 ffb4 	bl	f0f8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    5190:	4620      	mov	r0, r4
    5192:	f000 f88b 	bl	52ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x798>
    5196:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    519a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    519c:	6870      	ldr	r0, [r6, #4]
    519e:	f009 ffe2 	bl	f166 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    51a2:	4906      	ldr	r1, [pc, #24]	; (51bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a8>)
    51a4:	2005      	movs	r0, #5
    51a6:	7008      	strb	r0, [r1, #0]
    51a8:	6870      	ldr	r0, [r6, #4]
    51aa:	f003 fe69 	bl	8e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    51ae:	e000      	b.n	51b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69e>
    51b0:	2500      	movs	r5, #0
    51b2:	4628      	mov	r0, r5
    51b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51b6:	0000      	.short	0x0000
    51b8:	200000f0 	.word	0x200000f0
    51bc:	200016a8 	.word	0x200016a8
    51c0:	b570      	push	{r4, r5, r6, lr}
    51c2:	4604      	mov	r4, r0
    51c4:	460e      	mov	r6, r1
    51c6:	7e40      	ldrb	r0, [r0, #25]
    51c8:	f7fe f8fe 	bl	33c8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    51cc:	0005      	movs	r5, r0
    51ce:	d019      	beq.n	5204 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f0>
    51d0:	2110      	movs	r1, #16
    51d2:	f009 fed7 	bl	ef84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    51d6:	2800      	cmp	r0, #0
    51d8:	d114      	bne.n	5204 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f0>
    51da:	2001      	movs	r0, #1
    51dc:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    51e0:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    51e4:	4632      	mov	r2, r6
    51e6:	460c      	mov	r4, r1
    51e8:	4628      	mov	r0, r5
    51ea:	f009 fca9 	bl	eb40 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    51ee:	4621      	mov	r1, r4
    51f0:	4c05      	ldr	r4, [pc, #20]	; (5208 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f4>)
    51f2:	6860      	ldr	r0, [r4, #4]
    51f4:	f009 ff9b 	bl	f12e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    51f8:	6860      	ldr	r0, [r4, #4]
    51fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    51fe:	2101      	movs	r1, #1
    5200:	f009 bf9b 	b.w	f13a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    5204:	bd70      	pop	{r4, r5, r6, pc}
    5206:	0000      	.short	0x0000
    5208:	200000f0 	.word	0x200000f0
    520c:	4802      	ldr	r0, [pc, #8]	; (5218 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x704>)
    520e:	2101      	movs	r1, #1
    5210:	6800      	ldr	r0, [r0, #0]
    5212:	f7ff baf9 	b.w	4808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    5216:	0000      	.short	0x0000
    5218:	200000f0 	.word	0x200000f0
    521c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5220:	4e21      	ldr	r6, [pc, #132]	; (52a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x794>)
    5222:	4680      	mov	r8, r0
    5224:	460c      	mov	r4, r1
    5226:	6870      	ldr	r0, [r6, #4]
    5228:	4615      	mov	r5, r2
    522a:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    522e:	6161      	str	r1, [r4, #20]
    5230:	6841      	ldr	r1, [r0, #4]
    5232:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    5236:	61e1      	str	r1, [r4, #28]
    5238:	8940      	ldrh	r0, [r0, #10]
    523a:	f009 fd2d 	bl	ec98 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    523e:	4607      	mov	r7, r0
    5240:	6120      	str	r0, [r4, #16]
    5242:	6870      	ldr	r0, [r6, #4]
    5244:	4639      	mov	r1, r7
    5246:	7d80      	ldrb	r0, [r0, #22]
    5248:	f009 fe93 	bl	ef72 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    524c:	84a0      	strh	r0, [r4, #36]	; 0x24
    524e:	6870      	ldr	r0, [r6, #4]
    5250:	4639      	mov	r1, r7
    5252:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    5256:	f009 fe88 	bl	ef6a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    525a:	6220      	str	r0, [r4, #32]
    525c:	6870      	ldr	r0, [r6, #4]
    525e:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    5262:	8321      	strh	r1, [r4, #24]
    5264:	8841      	ldrh	r1, [r0, #2]
    5266:	8361      	strh	r1, [r4, #26]
    5268:	6841      	ldr	r1, [r0, #4]
    526a:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    526e:	7a01      	ldrb	r1, [r0, #8]
    5270:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    5274:	7a41      	ldrb	r1, [r0, #9]
    5276:	f001 011f 	and.w	r1, r1, #31
    527a:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    527e:	7a40      	ldrb	r0, [r0, #9]
    5280:	0940      	lsrs	r0, r0, #5
    5282:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    5286:	f104 0062 	add.w	r0, r4, #98	; 0x62
    528a:	7205      	strb	r5, [r0, #8]
    528c:	7245      	strb	r5, [r0, #9]
    528e:	21ff      	movs	r1, #255	; 0xff
    5290:	7281      	strb	r1, [r0, #10]
    5292:	2100      	movs	r1, #0
    5294:	3836      	subs	r0, #54	; 0x36
    5296:	f00a f924 	bl	f4e2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    529a:	f998 100e 	ldrsb.w	r1, [r8, #14]
    529e:	4620      	mov	r0, r4
    52a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    52a4:	f009 bdcc 	b.w	ee40 <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>
    52a8:	200000f0 	.word	0x200000f0
    52ac:	b570      	push	{r4, r5, r6, lr}
    52ae:	4d07      	ldr	r5, [pc, #28]	; (52cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7b8>)
    52b0:	4604      	mov	r4, r0
    52b2:	f100 0151 	add.w	r1, r0, #81	; 0x51
    52b6:	6868      	ldr	r0, [r5, #4]
    52b8:	f009 ff46 	bl	f148 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    52bc:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    52c0:	6868      	ldr	r0, [r5, #4]
    52c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    52c6:	f009 bf45 	b.w	f154 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    52ca:	0000      	.short	0x0000
    52cc:	200000f0 	.word	0x200000f0
    52d0:	00004a95 	.word	0x00004a95
    52d4:	0000491d 	.word	0x0000491d
    52d8:	00004a11 	.word	0x00004a11
    52dc:	00000000 	.word	0x00000000
    52e0:	000049e9 	.word	0x000049e9
    52e4:	00004a41 	.word	0x00004a41
    52e8:	0000fc9b 	.word	0x0000fc9b
    52ec:	0000fca1 	.word	0x0000fca1
    52f0:	00004ca5 	.word	0x00004ca5
    52f4:	00004cc9 	.word	0x00004cc9
    52f8:	0000520d 	.word	0x0000520d
    52fc:	000052ec 	.word	0x000052ec
    5300:	000052e4 	.word	0x000052e4
    5304:	000052e0 	.word	0x000052e0

00005308 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    5308:	b510      	push	{r4, lr}
    530a:	1e42      	subs	r2, r0, #1
    530c:	2a02      	cmp	r2, #2
    530e:	d901      	bls.n	5314 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    5310:	21ca      	movs	r1, #202	; 0xca
    5312:	e009      	b.n	5328 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    5314:	1e40      	subs	r0, r0, #1
    5316:	2910      	cmp	r1, #16
    5318:	d009      	beq.n	532e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    531a:	2912      	cmp	r1, #18
    531c:	d00c      	beq.n	5338 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    531e:	2913      	cmp	r1, #19
    5320:	d00a      	beq.n	5338 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    5322:	2915      	cmp	r1, #21
    5324:	d005      	beq.n	5332 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    5326:	21d8      	movs	r1, #216	; 0xd8
    5328:	202f      	movs	r0, #47	; 0x2f
    532a:	f7fc fb41 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    532e:	4905      	ldr	r1, [pc, #20]	; (5344 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    5330:	e004      	b.n	533c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    5332:	4904      	ldr	r1, [pc, #16]	; (5344 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    5334:	1d89      	adds	r1, r1, #6
    5336:	e001      	b.n	533c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    5338:	4902      	ldr	r1, [pc, #8]	; (5344 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    533a:	1f89      	subs	r1, r1, #6
    533c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5340:	bd10      	pop	{r4, pc}
    5342:	0000      	.short	0x0000
    5344:	0000ff02 	.word	0x0000ff02

00005348 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    5348:	1e42      	subs	r2, r0, #1
    534a:	b510      	push	{r4, lr}
    534c:	b2d2      	uxtb	r2, r2
    534e:	2a01      	cmp	r2, #1
    5350:	d903      	bls.n	535a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    5352:	291d      	cmp	r1, #29
    5354:	d001      	beq.n	535a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    5356:	21ee      	movs	r1, #238	; 0xee
    5358:	e00d      	b.n	5376 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    535a:	2913      	cmp	r1, #19
    535c:	d013      	beq.n	5386 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    535e:	dc04      	bgt.n	536a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    5360:	2910      	cmp	r1, #16
    5362:	d00b      	beq.n	537c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    5364:	2912      	cmp	r1, #18
    5366:	d104      	bne.n	5372 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    5368:	e00d      	b.n	5386 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    536a:	2915      	cmp	r1, #21
    536c:	d008      	beq.n	5380 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    536e:	291d      	cmp	r1, #29
    5370:	d00e      	beq.n	5390 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    5372:	f44f 7181 	mov.w	r1, #258	; 0x102
    5376:	202f      	movs	r0, #47	; 0x2f
    5378:	f7fc fb1a 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    537c:	4807      	ldr	r0, [pc, #28]	; (539c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    537e:	e004      	b.n	538a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    5380:	4806      	ldr	r0, [pc, #24]	; (539c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    5382:	3008      	adds	r0, #8
    5384:	e001      	b.n	538a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    5386:	4805      	ldr	r0, [pc, #20]	; (539c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    5388:	1d00      	adds	r0, r0, #4
    538a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    538e:	bd10      	pop	{r4, pc}
    5390:	f240 315a 	movw	r1, #858	; 0x35a
    5394:	fb10 f001 	smulbb	r0, r0, r1
    5398:	bd10      	pop	{r4, pc}
    539a:	0000      	.short	0x0000
    539c:	0000fef0 	.word	0x0000fef0

000053a0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    53a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53a4:	4604      	mov	r4, r0
    53a6:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    53aa:	4616      	mov	r6, r2
    53ac:	460f      	mov	r7, r1
    53ae:	2800      	cmp	r0, #0
    53b0:	d15e      	bne.n	5470 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    53b2:	4621      	mov	r1, r4
    53b4:	484d      	ldr	r0, [pc, #308]	; (54ec <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    53b6:	f006 fd3b 	bl	be30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    53ba:	4605      	mov	r5, r0
    53bc:	2820      	cmp	r0, #32
    53be:	d057      	beq.n	5470 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    53c0:	2250      	movs	r2, #80	; 0x50
    53c2:	2100      	movs	r1, #0
    53c4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    53c8:	f00c fdd7 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    53cc:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    53d0:	2501      	movs	r5, #1
    53d2:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    53d6:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    53da:	b137      	cbz	r7, 53ea <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    53dc:	f7fe fdf0 	bl	3fc0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    53e0:	f000 0007 	and.w	r0, r0, #7
    53e4:	1c40      	adds	r0, r0, #1
    53e6:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    53ea:	4620      	mov	r0, r4
    53ec:	f00a ff4e 	bl	1028c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    53f0:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    53f4:	2002      	movs	r0, #2
    53f6:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    53fa:	46a8      	mov	r8, r5
    53fc:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    5400:	2500      	movs	r5, #0
    5402:	f804 5fe8 	strb.w	r5, [r4, #232]!
    5406:	f007 fe79 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    540a:	4607      	mov	r7, r0
    540c:	f00c fba0 	bl	11b50 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    5410:	8921      	ldrh	r1, [r4, #8]
    5412:	3ce8      	subs	r4, #232	; 0xe8
    5414:	4288      	cmp	r0, r1
    5416:	d800      	bhi.n	541a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    5418:	4608      	mov	r0, r1
    541a:	4438      	add	r0, r7
    541c:	30ce      	adds	r0, #206	; 0xce
    541e:	b287      	uxth	r7, r0
    5420:	4620      	mov	r0, r4
    5422:	f00a fbf9 	bl	fc18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5426:	b330      	cbz	r0, 5476 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    5428:	f00c f982 	bl	11730 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    542c:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    5430:	b281      	uxth	r1, r0
    5432:	4630      	mov	r0, r6
    5434:	f007 ff82 	bl	d33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    5438:	4430      	add	r0, r6
    543a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    543e:	3490      	adds	r4, #144	; 0x90
    5440:	f00c fb8f 	bl	11b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    5444:	19c0      	adds	r0, r0, r7
    5446:	4169      	adcs	r1, r5
    5448:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    544c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    5450:	f824 5c6e 	strh.w	r5, [r4, #-110]
    5454:	2001      	movs	r0, #1
    5456:	f00a fd44 	bl	fee2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    545a:	f200 1015 	addw	r0, r0, #277	; 0x115
    545e:	1a30      	subs	r0, r6, r0
    5460:	6460      	str	r0, [r4, #68]	; 0x44
    5462:	f04f 30ff 	mov.w	r0, #4294967295
    5466:	0841      	lsrs	r1, r0, #1
    5468:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    546c:	3c90      	subs	r4, #144	; 0x90
    546e:	e025      	b.n	54bc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    5470:	200c      	movs	r0, #12
    5472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5476:	2100      	movs	r1, #0
    5478:	4620      	mov	r0, r4
    547a:	f00a fe5b 	bl	10134 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    547e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 54f0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    5482:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    5486:	2000      	movs	r0, #0
    5488:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    548c:	b149      	cbz	r1, 54a2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    548e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    5490:	b139      	cbz	r1, 54a2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    5492:	f7fe fd95 	bl	3fc0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    5496:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    549a:	fbb0 f2f1 	udiv	r2, r0, r1
    549e:	fb01 0012 	mls	r0, r1, r2, r0
    54a2:	4407      	add	r7, r0
    54a4:	f00c fb5d 	bl	11b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    54a8:	19c0      	adds	r0, r0, r7
    54aa:	4169      	adcs	r1, r5
    54ac:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    54b0:	b19e      	cbz	r6, 54da <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    54b2:	1980      	adds	r0, r0, r6
    54b4:	eb51 0105 	adcs.w	r1, r1, r5
    54b8:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    54bc:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    54c0:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    54c4:	f00a fee0 	bl	10288 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    54c8:	b158      	cbz	r0, 54e2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    54ca:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    54ce:	2100      	movs	r1, #0
    54d0:	4620      	mov	r0, r4
    54d2:	f00a fbd1 	bl	fc78 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    54d6:	2000      	movs	r0, #0
    54d8:	e7cb      	b.n	5472 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    54da:	f04f 30ff 	mov.w	r0, #4294967295
    54de:	0841      	lsrs	r1, r0, #1
    54e0:	e7ea      	b.n	54b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    54e2:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    54e6:	2030      	movs	r0, #48	; 0x30
    54e8:	f7fc fa62 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54ec:	0001036d 	.word	0x0001036d
    54f0:	20000100 	.word	0x20000100

000054f4 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    54f4:	4901      	ldr	r1, [pc, #4]	; (54fc <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    54f6:	8088      	strh	r0, [r1, #4]
    54f8:	4770      	bx	lr
    54fa:	0000      	.short	0x0000
    54fc:	20000100 	.word	0x20000100

00005500 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    5500:	4805      	ldr	r0, [pc, #20]	; (5518 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    5502:	2100      	movs	r1, #0
    5504:	7001      	strb	r1, [r0, #0]
    5506:	2201      	movs	r2, #1
    5508:	7082      	strb	r2, [r0, #2]
    550a:	7041      	strb	r1, [r0, #1]
    550c:	f242 7110 	movw	r1, #10000	; 0x2710
    5510:	8081      	strh	r1, [r0, #4]
    5512:	f000 b803 	b.w	551c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    5516:	0000      	.short	0x0000
    5518:	20000100 	.word	0x20000100

0000551c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    551c:	b51c      	push	{r2, r3, r4, lr}
    551e:	4909      	ldr	r1, [pc, #36]	; (5544 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    5520:	e9d1 0100 	ldrd	r0, r1, [r1]
    5524:	e9cd 0100 	strd	r0, r1, [sp]
    5528:	e002      	b.n	5530 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    552a:	9800      	ldr	r0, [sp, #0]
    552c:	f00a fd15 	bl	ff5a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    5530:	4668      	mov	r0, sp
    5532:	f7fc fdbd 	bl	20b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    5536:	2800      	cmp	r0, #0
    5538:	d0f7      	beq.n	552a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    553a:	f000 f8c7 	bl	56cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xac>
    553e:	2000      	movs	r0, #0
    5540:	bd1c      	pop	{r2, r3, r4, pc}
    5542:	0000      	.short	0x0000
    5544:	00005e64 	.word	0x00005e64

00005548 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    5548:	4901      	ldr	r1, [pc, #4]	; (5550 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    554a:	7008      	strb	r0, [r1, #0]
    554c:	4770      	bx	lr
    554e:	0000      	.short	0x0000
    5550:	20000100 	.word	0x20000100

00005554 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    5554:	4908      	ldr	r1, [pc, #32]	; (5578 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    5556:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    555a:	fbb1 f1f2 	udiv	r1, r1, r2
    555e:	b510      	push	{r4, lr}
    5560:	f501 7128 	add.w	r1, r1, #672	; 0x2a0
    5564:	f009 ffd6 	bl	f514 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    5568:	f640 0148 	movw	r1, #2120	; 0x848
    556c:	4288      	cmp	r0, r1
    556e:	d300      	bcc.n	5572 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    5570:	4608      	mov	r0, r1
    5572:	b280      	uxth	r0, r0
    5574:	bd10      	pop	{r4, pc}
    5576:	0000      	.short	0x0000
    5578:	0001527d 	.word	0x0001527d

0000557c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    557c:	b510      	push	{r4, lr}
    557e:	f003 fb93 	bl	8ca8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    5582:	4905      	ldr	r1, [pc, #20]	; (5598 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1c>)
    5584:	688a      	ldr	r2, [r1, #8]
    5586:	4290      	cmp	r0, r2
    5588:	d801      	bhi.n	558e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x12>
    558a:	7848      	ldrb	r0, [r1, #1]
    558c:	b108      	cbz	r0, 5592 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x16>
    558e:	2000      	movs	r0, #0
    5590:	bd10      	pop	{r4, pc}
    5592:	2001      	movs	r0, #1
    5594:	bd10      	pop	{r4, pc}
    5596:	0000      	.short	0x0000
    5598:	20000100 	.word	0x20000100

0000559c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    559c:	b510      	push	{r4, lr}
    559e:	4604      	mov	r4, r0
    55a0:	2906      	cmp	r1, #6
    55a2:	d238      	bcs.n	5616 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a>
    55a4:	e8df f001 	tbb	[pc, r1]
    55a8:	14031105 	.word	0x14031105
    55ac:	3215      	.short	0x3215
    55ae:	2100      	movs	r1, #0
    55b0:	e006      	b.n	55c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    55b2:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    55b6:	b110      	cbz	r0, 55be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    55b8:	4620      	mov	r0, r4
    55ba:	f00a fdf8 	bl	101ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fc>
    55be:	2101      	movs	r1, #1
    55c0:	4620      	mov	r0, r4
    55c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    55c6:	f000 b97f 	b.w	58c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a8>
    55ca:	2003      	movs	r0, #3
    55cc:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    55d0:	bd10      	pop	{r4, pc}
    55d2:	f003 fb75 	bl	8cc0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    55d6:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    55da:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    55de:	f003 fc33 	bl	8e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    55e2:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    55e6:	4288      	cmp	r0, r1
    55e8:	d904      	bls.n	55f4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    55ea:	f240 31e3 	movw	r1, #995	; 0x3e3
    55ee:	2030      	movs	r0, #48	; 0x30
    55f0:	f7fc f9de 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55f4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    55f8:	f003 fc26 	bl	8e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    55fc:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    5600:	1a08      	subs	r0, r1, r0
    5602:	4906      	ldr	r1, [pc, #24]	; (561c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x80>)
    5604:	688a      	ldr	r2, [r1, #8]
    5606:	4410      	add	r0, r2
    5608:	6088      	str	r0, [r1, #8]
    560a:	bd10      	pop	{r4, pc}
    560c:	4620      	mov	r0, r4
    560e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5612:	f00a bdb9 	b.w	10188 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    5616:	f240 7199 	movw	r1, #1945	; 0x799
    561a:	e7e8      	b.n	55ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x52>
    561c:	20000100 	.word	0x20000100

00005620 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    5620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5624:	460c      	mov	r4, r1
    5626:	4680      	mov	r8, r0
    5628:	b112      	cbz	r2, 5630 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10>
    562a:	f240 71c3 	movw	r1, #1987	; 0x7c3
    562e:	e037      	b.n	56a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    5630:	f003 fb3a 	bl	8ca8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    5634:	4607      	mov	r7, r0
    5636:	2000      	movs	r0, #0
    5638:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    563c:	e9d4 563e 	ldrd	r5, r6, [r4, #248]	; 0xf8
    5640:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    5644:	2001      	movs	r0, #1
    5646:	f884 00e1 	strb.w	r0, [r4, #225]	; 0xe1
    564a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    564e:	2101      	movs	r1, #1
    5650:	34c8      	adds	r4, #200	; 0xc8
    5652:	f7fe f859 	bl	3708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    5656:	f854 0f04 	ldr.w	r0, [r4, #4]!
    565a:	f8c0 5290 	str.w	r5, [r0, #656]	; 0x290
    565e:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
    5662:	6821      	ldr	r1, [r4, #0]
    5664:	f814 0c04 	ldrb.w	r0, [r4, #-4]
    5668:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    566c:	6820      	ldr	r0, [r4, #0]
    566e:	f8c0 72a8 	str.w	r7, [r0, #680]	; 0x2a8
    5672:	6820      	ldr	r0, [r4, #0]
    5674:	e9c0 56a6 	strd	r5, r6, [r0, #664]	; 0x298
    5678:	f854 09cc 	ldr.w	r0, [r4], #-204
    567c:	f00a ff1f 	bl	104be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
    5680:	b110      	cbz	r0, 5688 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68>
    5682:	f44f 61ea 	mov.w	r1, #1872	; 0x750
    5686:	e00b      	b.n	56a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    5688:	f00a fd8a 	bl	101a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    568c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    5690:	4642      	mov	r2, r8
    5692:	4906      	ldr	r1, [pc, #24]	; (56ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>)
    5694:	f006 fa84 	bl	bba0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    5698:	2800      	cmp	r0, #0
    569a:	d104      	bne.n	56a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x86>
    569c:	f240 71ac 	movw	r1, #1964	; 0x7ac
    56a0:	2030      	movs	r0, #48	; 0x30
    56a2:	f7fc f985 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56aa:	0000      	.short	0x0000
    56ac:	000103d9 	.word	0x000103d9
    56b0:	b510      	push	{r4, lr}
    56b2:	280c      	cmp	r0, #12
    56b4:	d304      	bcc.n	56c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa0>
    56b6:	f240 318a 	movw	r1, #906	; 0x38a
    56ba:	2006      	movs	r0, #6
    56bc:	f7fc f978 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56c0:	4901      	ldr	r1, [pc, #4]	; (56c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa8>)
    56c2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    56c6:	bd10      	pop	{r4, pc}
    56c8:	00005e80 	.word	0x00005e80
    56cc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    56d0:	4d16      	ldr	r5, [pc, #88]	; (572c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10c>)
    56d2:	2001      	movs	r0, #1
    56d4:	7068      	strb	r0, [r5, #1]
    56d6:	2400      	movs	r4, #0
    56d8:	f64f 76ff 	movw	r6, #65535	; 0xffff
    56dc:	e00b      	b.n	56f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xd6>
    56de:	2100      	movs	r1, #0
    56e0:	f7fc fc94 	bl	200c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    56e4:	0007      	movs	r7, r0
    56e6:	d009      	beq.n	56fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xdc>
    56e8:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    56ec:	f006 fa88 	bl	bc00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    56f0:	4638      	mov	r0, r7
    56f2:	f00a fe2e 	bl	10352 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    56f6:	9400      	str	r4, [sp, #0]
    56f8:	9401      	str	r4, [sp, #4]
    56fa:	e00e      	b.n	571a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    56fc:	f44f 7191 	mov.w	r1, #290	; 0x122
    5700:	2030      	movs	r0, #48	; 0x30
    5702:	f7fc f955 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5706:	9800      	ldr	r0, [sp, #0]
    5708:	b138      	cbz	r0, 571a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    570a:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
    570e:	2920      	cmp	r1, #32
    5710:	d003      	beq.n	571a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    5712:	8800      	ldrh	r0, [r0, #0]
    5714:	42b0      	cmp	r0, r6
    5716:	d1e2      	bne.n	56de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbe>
    5718:	e004      	b.n	5724 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x104>
    571a:	4668      	mov	r0, sp
    571c:	f7fc fcc8 	bl	20b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    5720:	2800      	cmp	r0, #0
    5722:	d0f0      	beq.n	5706 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe6>
    5724:	706c      	strb	r4, [r5, #1]
    5726:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    572a:	0000      	.short	0x0000
    572c:	20000100 	.word	0x20000100
    5730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5734:	4604      	mov	r4, r0
    5736:	4839      	ldr	r0, [pc, #228]	; (581c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    5738:	461e      	mov	r6, r3
    573a:	4690      	mov	r8, r2
    573c:	7880      	ldrb	r0, [r0, #2]
    573e:	4689      	mov	r9, r1
    5740:	2500      	movs	r5, #0
    5742:	2800      	cmp	r0, #0
    5744:	d063      	beq.n	580e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    5746:	f007 fdaf 	bl	d2a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    574a:	b3e0      	cbz	r0, 57c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    574c:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    5750:	2802      	cmp	r0, #2
    5752:	d35c      	bcc.n	580e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    5754:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    5758:	2802      	cmp	r0, #2
    575a:	d058      	beq.n	580e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    575c:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    5760:	bb88      	cbnz	r0, 57c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    5762:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    5766:	f7ff ffa3 	bl	56b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    576a:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    576e:	b281      	uxth	r1, r0
    5770:	8031      	strh	r1, [r6, #0]
    5772:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    5776:	2700      	movs	r7, #0
    5778:	2801      	cmp	r0, #1
    577a:	d00d      	beq.n	5798 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x178>
    577c:	6920      	ldr	r0, [r4, #16]
    577e:	f007 fddd 	bl	d33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    5782:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    5786:	4442      	add	r2, r8
    5788:	eba2 0109 	sub.w	r1, r2, r9
    578c:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    5790:	1a82      	subs	r2, r0, r2
    5792:	fb01 7502 	mla	r5, r1, r2, r7
    5796:	e035      	b.n	5804 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1e4>
    5798:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    579c:	2803      	cmp	r0, #3
    579e:	d039      	beq.n	5814 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>
    57a0:	2101      	movs	r1, #1
    57a2:	2000      	movs	r0, #0
    57a4:	f009 fb3a 	bl	ee1c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    57a8:	6a21      	ldr	r1, [r4, #32]
    57aa:	1847      	adds	r7, r0, r1
    57ac:	8831      	ldrh	r1, [r6, #0]
    57ae:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    57b2:	f007 fdc3 	bl	d33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    57b6:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    57ba:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    57be:	1a82      	subs	r2, r0, r2
    57c0:	fb01 5502 	mla	r5, r1, r2, r5
    57c4:	e000      	b.n	57c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    57c6:	e022      	b.n	580e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    57c8:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    57cc:	8831      	ldrh	r1, [r6, #0]
    57ce:	4638      	mov	r0, r7
    57d0:	f007 fdb4 	bl	d33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    57d4:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    57d8:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    57dc:	1a41      	subs	r1, r0, r1
    57de:	440d      	add	r5, r1
    57e0:	8831      	ldrh	r1, [r6, #0]
    57e2:	6920      	ldr	r0, [r4, #16]
    57e4:	f007 fdaa 	bl	d33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    57e8:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    57ec:	4442      	add	r2, r8
    57ee:	eba2 0109 	sub.w	r1, r2, r9
    57f2:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    57f6:	1a89      	subs	r1, r1, r2
    57f8:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    57fc:	1a82      	subs	r2, r0, r2
    57fe:	1e49      	subs	r1, r1, #1
    5800:	fb01 5502 	mla	r5, r1, r2, r5
    5804:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    5808:	2001      	movs	r0, #1
    580a:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    580e:	4628      	mov	r0, r5
    5810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5814:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    5818:	e7c6      	b.n	57a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x188>
    581a:	0000      	.short	0x0000
    581c:	20000100 	.word	0x20000100
    5820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5824:	4605      	mov	r5, r0
    5826:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    582a:	2128      	movs	r1, #40	; 0x28
    582c:	f00a fc28 	bl	10080 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    5830:	f500 782c 	add.w	r8, r0, #688	; 0x2b0
    5834:	f00c f98c 	bl	11b50 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    5838:	2869      	cmp	r0, #105	; 0x69
    583a:	d800      	bhi.n	583e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x21e>
    583c:	2069      	movs	r0, #105	; 0x69
    583e:	f8d5 1264 	ldr.w	r1, [r5, #612]	; 0x264
    5842:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
    5846:	692a      	ldr	r2, [r5, #16]
    5848:	440b      	add	r3, r1
    584a:	429a      	cmp	r2, r3
    584c:	d903      	bls.n	5856 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    584e:	1a51      	subs	r1, r2, r1
    5850:	1a0c      	subs	r4, r1, r0
    5852:	3469      	adds	r4, #105	; 0x69
    5854:	e000      	b.n	5858 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x238>
    5856:	2400      	movs	r4, #0
    5858:	4f1a      	ldr	r7, [pc, #104]	; (58c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a4>)
    585a:	7838      	ldrb	r0, [r7, #0]
    585c:	b918      	cbnz	r0, 5866 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    585e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5860:	42a0      	cmp	r0, r4
    5862:	d800      	bhi.n	5866 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    5864:	4604      	mov	r4, r0
    5866:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    586a:	f009 fe5e 	bl	f52a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    586e:	4606      	mov	r6, r0
    5870:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    5874:	f00a fe16 	bl	104a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    5878:	f8d5 1230 	ldr.w	r1, [r5, #560]	; 0x230
    587c:	4430      	add	r0, r6
    587e:	1846      	adds	r6, r0, r1
    5880:	1ba4      	subs	r4, r4, r6
    5882:	2c00      	cmp	r4, #0
    5884:	dc00      	bgt.n	5888 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x268>
    5886:	2400      	movs	r4, #0
    5888:	2002      	movs	r0, #2
    588a:	f005 fa8b 	bl	ada4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    588e:	4284      	cmp	r4, r0
    5890:	d300      	bcc.n	5894 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x274>
    5892:	4604      	mov	r4, r0
    5894:	2102      	movs	r1, #2
    5896:	4620      	mov	r0, r4
    5898:	f005 f994 	bl	abc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    589c:	b900      	cbnz	r0, 58a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x280>
    589e:	4426      	add	r6, r4
    58a0:	4642      	mov	r2, r8
    58a2:	4631      	mov	r1, r6
    58a4:	4628      	mov	r0, r5
    58a6:	f009 fde1 	bl	f46c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    58aa:	60b8      	str	r0, [r7, #8]
    58ac:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    58b0:	f00a fdf8 	bl	104a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    58b4:	1a30      	subs	r0, r6, r0
    58b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    58ba:	f5a0 70b7 	sub.w	r0, r0, #366	; 0x16e
    58be:	f006 bbb7 	b.w	c030 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    58c2:	0000      	.short	0x0000
    58c4:	20000100 	.word	0x20000100
    58c8:	b538      	push	{r3, r4, r5, lr}
    58ca:	2500      	movs	r5, #0
    58cc:	4604      	mov	r4, r0
    58ce:	2901      	cmp	r1, #1
    58d0:	d102      	bne.n	58d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2b8>
    58d2:	4810      	ldr	r0, [pc, #64]	; (5914 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f4>)
    58d4:	7840      	ldrb	r0, [r0, #1]
    58d6:	b170      	cbz	r0, 58f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2d6>
    58d8:	2004      	movs	r0, #4
    58da:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    58de:	bf00      	nop
    58e0:	f00a fc5e 	bl	101a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    58e4:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    58e8:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    58ec:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    58f0:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    58f4:	bd38      	pop	{r3, r4, r5, pc}
    58f6:	9500      	str	r5, [sp, #0]
    58f8:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    58fc:	2301      	movs	r3, #1
    58fe:	2200      	movs	r2, #0
    5900:	4620      	mov	r0, r4
    5902:	f000 f809 	bl	5918 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    5906:	2800      	cmp	r0, #0
    5908:	d0ea      	beq.n	58e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    590a:	f240 710e 	movw	r1, #1806	; 0x70e
    590e:	2030      	movs	r0, #48	; 0x30
    5910:	f7fc f84e 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5914:	20000100 	.word	0x20000100
    5918:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    591c:	b08b      	sub	sp, #44	; 0x2c
    591e:	4604      	mov	r4, r0
    5920:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5924:	4699      	mov	r9, r3
    5926:	460f      	mov	r7, r1
    5928:	9307      	str	r3, [sp, #28]
    592a:	9005      	str	r0, [sp, #20]
    592c:	f00b ff00 	bl	11730 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    5930:	4605      	mov	r5, r0
    5932:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    5936:	f7ff febb 	bl	56b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    593a:	4428      	add	r0, r5
    593c:	f8ad 0004 	strh.w	r0, [sp, #4]
    5940:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    5944:	280d      	cmp	r0, #13
    5946:	d004      	beq.n	5952 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x332>
    5948:	2000      	movs	r0, #0
    594a:	9008      	str	r0, [sp, #32]
    594c:	980d      	ldr	r0, [sp, #52]	; 0x34
    594e:	b110      	cbz	r0, 5956 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x336>
    5950:	e02e      	b.n	59b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    5952:	2001      	movs	r0, #1
    5954:	e7f9      	b.n	594a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x32a>
    5956:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    595a:	2803      	cmp	r0, #3
    595c:	d128      	bne.n	59b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    595e:	9808      	ldr	r0, [sp, #32]
    5960:	b330      	cbz	r0, 59b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    5962:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    5966:	42b8      	cmp	r0, r7
    5968:	d122      	bne.n	59b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    596a:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    596e:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    5972:	6920      	ldr	r0, [r4, #16]
    5974:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    5978:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    597c:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    5980:	4408      	add	r0, r1
    5982:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    5986:	4620      	mov	r0, r4
    5988:	f000 fa86 	bl	5e98 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    598c:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    5990:	6220      	str	r0, [r4, #32]
    5992:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    5996:	84a0      	strh	r0, [r4, #36]	; 0x24
    5998:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    599c:	6120      	str	r0, [r4, #16]
    599e:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    59a2:	8320      	strh	r0, [r4, #24]
    59a4:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    59a8:	8360      	strh	r0, [r4, #26]
    59aa:	2002      	movs	r0, #2
    59ac:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    59b0:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    59b4:	f504 751e 	add.w	r5, r4, #632	; 0x278
    59b8:	1a38      	subs	r0, r7, r0
    59ba:	fa0f fa80 	sxth.w	sl, r0
    59be:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    59c2:	1a38      	subs	r0, r7, r0
    59c4:	fa0f f880 	sxth.w	r8, r0
    59c8:	f1b8 0f00 	cmp.w	r8, #0
    59cc:	da08      	bge.n	59e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c0>
    59ce:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    59d2:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    59d6:	46d0      	mov	r8, sl
    59d8:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    59dc:	2001      	movs	r0, #1
    59de:	9007      	str	r0, [sp, #28]
    59e0:	ab01      	add	r3, sp, #4
    59e2:	4652      	mov	r2, sl
    59e4:	4641      	mov	r1, r8
    59e6:	4620      	mov	r0, r4
    59e8:	f7ff fea2 	bl	5730 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x110>
    59ec:	9004      	str	r0, [sp, #16]
    59ee:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    59f2:	f8df b334 	ldr.w	fp, [pc, #820]	; 5d28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    59f6:	b140      	cbz	r0, 5a0a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3ea>
    59f8:	2801      	cmp	r0, #1
    59fa:	d07d      	beq.n	5af8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4d8>
    59fc:	2802      	cmp	r0, #2
    59fe:	d051      	beq.n	5aa4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x484>
    5a00:	2803      	cmp	r0, #3
    5a02:	d07a      	beq.n	5afa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    5a04:	f240 518e 	movw	r1, #1422	; 0x58e
    5a08:	e18a      	b.n	5d20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    5a0a:	2101      	movs	r1, #1
    5a0c:	2000      	movs	r0, #0
    5a0e:	f009 fa05 	bl	ee1c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    5a12:	4606      	mov	r6, r0
    5a14:	6a20      	ldr	r0, [r4, #32]
    5a16:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5a1a:	4430      	add	r0, r6
    5a1c:	f007 fc8e 	bl	d33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    5a20:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    5a24:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5a28:	6920      	ldr	r0, [r4, #16]
    5a2a:	f007 fc87 	bl	d33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    5a2e:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    5a32:	a907      	add	r1, sp, #28
    5a34:	a806      	add	r0, sp, #24
    5a36:	f003 f89f 	bl	8b78 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    5a3a:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    5a3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    5a42:	f006 fbc7 	bl	c1d4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    5a46:	4682      	mov	sl, r0
    5a48:	4620      	mov	r0, r4
    5a4a:	f00a fb9d 	bl	10188 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    5a4e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5a52:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    5a56:	f003 fa23 	bl	8ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    5a5a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    5a5e:	4401      	add	r1, r0
    5a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5a64:	fbb1 f0f0 	udiv	r0, r1, r0
    5a68:	6a21      	ldr	r1, [r4, #32]
    5a6a:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    5a6e:	4431      	add	r1, r6
    5a70:	1a08      	subs	r0, r1, r0
    5a72:	1a81      	subs	r1, r0, r2
    5a74:	4441      	add	r1, r8
    5a76:	3920      	subs	r1, #32
    5a78:	eba1 060a 	sub.w	r6, r1, sl
    5a7c:	0050      	lsls	r0, r2, #1
    5a7e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    5a80:	3060      	adds	r0, #96	; 0x60
    5a82:	4401      	add	r1, r0
    5a84:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5a88:	f00a fbec 	bl	10264 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    5a8c:	3022      	adds	r0, #34	; 0x22
    5a8e:	f8cb 000c 	str.w	r0, [fp, #12]
    5a92:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    5a96:	1a30      	subs	r0, r6, r0
    5a98:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
    5a9c:	d258      	bcs.n	5b50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x530>
    5a9e:	f240 5127 	movw	r1, #1319	; 0x527
    5aa2:	e13d      	b.n	5d20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    5aa4:	6a21      	ldr	r1, [r4, #32]
    5aa6:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    5aaa:	4408      	add	r0, r1
    5aac:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5ab0:	f007 fc44 	bl	d33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    5ab4:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    5ab8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5abc:	6920      	ldr	r0, [r4, #16]
    5abe:	f007 fc3d 	bl	d33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    5ac2:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    5ac6:	4620      	mov	r0, r4
    5ac8:	f00a fb5e 	bl	10188 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    5acc:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    5ad0:	bb10      	cbnz	r0, 5b18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    5ad2:	f1b9 0f00 	cmp.w	r9, #0
    5ad6:	d01f      	beq.n	5b18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    5ad8:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    5adc:	4640      	mov	r0, r8
    5ade:	f003 f9df 	bl	8ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    5ae2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    5ae6:	4401      	add	r1, r0
    5ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5aec:	fbb1 f0f0 	udiv	r0, r1, r0
    5af0:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    5af4:	4408      	add	r0, r1
    5af6:	e001      	b.n	5afc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4dc>
    5af8:	e02b      	b.n	5b52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x532>
    5afa:	e047      	b.n	5b8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    5afc:	6a22      	ldr	r2, [r4, #32]
    5afe:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    5b02:	4411      	add	r1, r2
    5b04:	1a0e      	subs	r6, r1, r0
    5b06:	4640      	mov	r0, r8
    5b08:	f003 f99e 	bl	8e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    5b0c:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    5b10:	1a08      	subs	r0, r1, r0
    5b12:	4406      	add	r6, r0
    5b14:	3e20      	subs	r6, #32
    5b16:	e006      	b.n	5b26 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x506>
    5b18:	6a21      	ldr	r1, [r4, #32]
    5b1a:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    5b1e:	4408      	add	r0, r1
    5b20:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    5b24:	1a46      	subs	r6, r0, r1
    5b26:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    5b2a:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    5b2e:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    5b32:	fb01 0002 	mla	r0, r1, r2, r0
    5b36:	0040      	lsls	r0, r0, #1
    5b38:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    5b3a:	3060      	adds	r0, #96	; 0x60
    5b3c:	4401      	add	r1, r0
    5b3e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5b42:	f00a fb8f 	bl	10264 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    5b46:	f8cb 000c 	str.w	r0, [fp, #12]
    5b4a:	2001      	movs	r0, #1
    5b4c:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    5b50:	e061      	b.n	5c16 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f6>
    5b52:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    5b56:	6920      	ldr	r0, [r4, #16]
    5b58:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    5b5c:	1a86      	subs	r6, r0, r2
    5b5e:	eb01 000a 	add.w	r0, r1, sl
    5b62:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    5b66:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    5b6a:	1a40      	subs	r0, r0, r1
    5b6c:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    5b70:	1e40      	subs	r0, r0, #1
    5b72:	fb0c 3101 	mla	r1, ip, r1, r3
    5b76:	fb00 1002 	mla	r0, r0, r2, r1
    5b7a:	0040      	lsls	r0, r0, #1
    5b7c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    5b7e:	3060      	adds	r0, #96	; 0x60
    5b80:	4401      	add	r1, r0
    5b82:	fb06 f608 	mul.w	r6, r6, r8
    5b86:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5b8a:	e040      	b.n	5c0e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ee>
    5b8c:	6920      	ldr	r0, [r4, #16]
    5b8e:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    5b92:	fb00 f008 	mul.w	r0, r0, r8
    5b96:	fb08 0611 	mls	r6, r8, r1, r0
    5b9a:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    5b9e:	2825      	cmp	r0, #37	; 0x25
    5ba0:	d003      	beq.n	5baa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58a>
    5ba2:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    5ba6:	2825      	cmp	r0, #37	; 0x25
    5ba8:	d109      	bne.n	5bbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    5baa:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    5bae:	1a38      	subs	r0, r7, r0
    5bb0:	b200      	sxth	r0, r0
    5bb2:	2800      	cmp	r0, #0
    5bb4:	db03      	blt.n	5bbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    5bb6:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    5bba:	b100      	cbz	r0, 5bbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    5bbc:	9005      	str	r0, [sp, #20]
    5bbe:	9807      	ldr	r0, [sp, #28]
    5bc0:	b1d8      	cbz	r0, 5bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    5bc2:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    5bc6:	b9c0      	cbnz	r0, 5bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    5bc8:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    5bcc:	2800      	cmp	r0, #0
    5bce:	d07d      	beq.n	5ccc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ac>
    5bd0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5bd4:	f003 f964 	bl	8ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    5bd8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    5bdc:	4401      	add	r1, r0
    5bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5be2:	fbb1 f0f0 	udiv	r0, r1, r0
    5be6:	1a36      	subs	r6, r6, r0
    5be8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5bec:	f003 f92c 	bl	8e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    5bf0:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    5bf4:	1a08      	subs	r0, r1, r0
    5bf6:	4406      	add	r6, r0
    5bf8:	3e20      	subs	r6, #32
    5bfa:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    5bfe:	eb01 000a 	add.w	r0, r1, sl
    5c02:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    5c06:	4348      	muls	r0, r1
    5c08:	0041      	lsls	r1, r0, #1
    5c0a:	3160      	adds	r1, #96	; 0x60
    5c0c:	9805      	ldr	r0, [sp, #20]
    5c0e:	f00a fb29 	bl	10264 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    5c12:	f8cb 000c 	str.w	r0, [fp, #12]
    5c16:	9804      	ldr	r0, [sp, #16]
    5c18:	f8db 200c 	ldr.w	r2, [fp, #12]
    5c1c:	1a31      	subs	r1, r6, r0
    5c1e:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    5c22:	6920      	ldr	r0, [r4, #16]
    5c24:	1b80      	subs	r0, r0, r6
    5c26:	f2a0 2052 	subw	r0, r0, #594	; 0x252
    5c2a:	f8cb 0010 	str.w	r0, [fp, #16]
    5c2e:	4282      	cmp	r2, r0
    5c30:	d800      	bhi.n	5c34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
    5c32:	4610      	mov	r0, r2
    5c34:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    5c38:	2600      	movs	r6, #0
    5c3a:	702e      	strb	r6, [r5, #0]
    5c3c:	2069      	movs	r0, #105	; 0x69
    5c3e:	8128      	strh	r0, [r5, #8]
    5c40:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    5c44:	1851      	adds	r1, r2, r1
    5c46:	4170      	adcs	r0, r6
    5c48:	e9c5 1004 	strd	r1, r0, [r5, #16]
    5c4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    5c50:	f009 fc6b 	bl	f52a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5c54:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    5c58:	4408      	add	r0, r1
    5c5a:	6068      	str	r0, [r5, #4]
    5c5c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    5c60:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    5c64:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    5c68:	72ae      	strb	r6, [r5, #10]
    5c6a:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    5c6e:	1bc0      	subs	r0, r0, r7
    5c70:	b200      	sxth	r0, r0
    5c72:	2800      	cmp	r0, #0
    5c74:	dd01      	ble.n	5c7a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x65a>
    5c76:	2002      	movs	r0, #2
    5c78:	72a8      	strb	r0, [r5, #10]
    5c7a:	9808      	ldr	r0, [sp, #32]
    5c7c:	b338      	cbz	r0, 5cce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ae>
    5c7e:	f1b9 0f00 	cmp.w	r9, #0
    5c82:	d01c      	beq.n	5cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    5c84:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    5c88:	b3f1      	cbz	r1, 5d08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e8>
    5c8a:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5c8e:	bf00      	nop
    5c90:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    5c94:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    5c98:	1c40      	adds	r0, r0, #1
    5c9a:	4342      	muls	r2, r0
    5c9c:	428a      	cmp	r2, r1
    5c9e:	d20e      	bcs.n	5cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    5ca0:	7aa8      	ldrb	r0, [r5, #10]
    5ca2:	b160      	cbz	r0, 5cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    5ca4:	72ae      	strb	r6, [r5, #10]
    5ca6:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5caa:	1c40      	adds	r0, r0, #1
    5cac:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    5cb0:	f7fe f980 	bl	3fb4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    5cb4:	f000 0007 	and.w	r0, r0, #7
    5cb8:	1c40      	adds	r0, r0, #1
    5cba:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    5cbe:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    5cc2:	4629      	mov	r1, r5
    5cc4:	f00a fae0 	bl	10288 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    5cc8:	b340      	cbz	r0, 5d1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fc>
    5cca:	e001      	b.n	5cd0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b0>
    5ccc:	e009      	b.n	5ce2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c2>
    5cce:	e00b      	b.n	5ce8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c8>
    5cd0:	980d      	ldr	r0, [sp, #52]	; 0x34
    5cd2:	f080 0001 	eor.w	r0, r0, #1
    5cd6:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    5cda:	2000      	movs	r0, #0
    5cdc:	b00f      	add	sp, #60	; 0x3c
    5cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ce2:	f240 5179 	movw	r1, #1401	; 0x579
    5ce6:	e01b      	b.n	5d20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    5ce8:	f1b9 0f00 	cmp.w	r9, #0
    5cec:	d1ca      	bne.n	5c84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x664>
    5cee:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    5cf2:	2800      	cmp	r0, #0
    5cf4:	d0e3      	beq.n	5cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    5cf6:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    5cfa:	6920      	ldr	r0, [r4, #16]
    5cfc:	1a41      	subs	r1, r0, r1
    5cfe:	4628      	mov	r0, r5
    5d00:	f009 f8a2 	bl	ee48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    5d04:	0400      	lsls	r0, r0, #16
    5d06:	e000      	b.n	5d0a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ea>
    5d08:	e006      	b.n	5d18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f8>
    5d0a:	0c00      	lsrs	r0, r0, #16
    5d0c:	d0d7      	beq.n	5cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    5d0e:	9918      	ldr	r1, [sp, #96]	; 0x60
    5d10:	b101      	cbz	r1, 5d14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f4>
    5d12:	8008      	strh	r0, [r1, #0]
    5d14:	2001      	movs	r0, #1
    5d16:	e7e1      	b.n	5cdc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6bc>
    5d18:	2000      	movs	r0, #0
    5d1a:	e7b9      	b.n	5c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x670>
    5d1c:	f240 51d7 	movw	r1, #1495	; 0x5d7
    5d20:	2030      	movs	r0, #48	; 0x30
    5d22:	f7fb fe45 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d26:	0000      	.short	0x0000
    5d28:	20000100 	.word	0x20000100
    5d2c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    5d2e:	4604      	mov	r4, r0
    5d30:	f00b ff17 	bl	11b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    5d34:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    5d38:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    5d3c:	1ac0      	subs	r0, r0, r3
    5d3e:	eb61 0102 	sbc.w	r1, r1, r2
    5d42:	2200      	movs	r2, #0
    5d44:	4613      	mov	r3, r2
    5d46:	1a12      	subs	r2, r2, r0
    5d48:	418b      	sbcs	r3, r1
    5d4a:	db02      	blt.n	5d52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x732>
    5d4c:	f240 6154 	movw	r1, #1620	; 0x654
    5d50:	e04d      	b.n	5dee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    5d52:	1c42      	adds	r2, r0, #1
    5d54:	f171 0100 	sbcs.w	r1, r1, #0
    5d58:	db02      	blt.n	5d60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x740>
    5d5a:	f240 6155 	movw	r1, #1621	; 0x655
    5d5e:	e046      	b.n	5dee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    5d60:	6922      	ldr	r2, [r4, #16]
    5d62:	2100      	movs	r1, #0
    5d64:	b10a      	cbz	r2, 5d6a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x74a>
    5d66:	fbb0 f1f2 	udiv	r1, r0, r2
    5d6a:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    5d6e:	280d      	cmp	r0, #13
    5d70:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    5d74:	d01b      	beq.n	5dae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78e>
    5d76:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    5d7a:	1853      	adds	r3, r2, r1
    5d7c:	1ac3      	subs	r3, r0, r3
    5d7e:	b21b      	sxth	r3, r3
    5d80:	2b00      	cmp	r3, #0
    5d82:	db01      	blt.n	5d88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x768>
    5d84:	1c40      	adds	r0, r0, #1
    5d86:	e001      	b.n	5d8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    5d88:	1c49      	adds	r1, r1, #1
    5d8a:	1850      	adds	r0, r2, r1
    5d8c:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    5d90:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    5d94:	f88d 0000 	strb.w	r0, [sp]
    5d98:	9800      	ldr	r0, [sp, #0]
    5d9a:	9000      	str	r0, [sp, #0]
    5d9c:	f89d 0000 	ldrb.w	r0, [sp]
    5da0:	b940      	cbnz	r0, 5db4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    5da2:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    5da6:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    5daa:	4288      	cmp	r0, r1
    5dac:	d102      	bne.n	5db4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    5dae:	1c40      	adds	r0, r0, #1
    5db0:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    5db4:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    5db8:	1c40      	adds	r0, r0, #1
    5dba:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    5dbe:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    5dc2:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    5dc6:	1a40      	subs	r0, r0, r1
    5dc8:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    5dcc:	1e40      	subs	r0, r0, #1
    5dce:	4408      	add	r0, r1
    5dd0:	b285      	uxth	r5, r0
    5dd2:	e026      	b.n	5e22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    5dd4:	a801      	add	r0, sp, #4
    5dd6:	2300      	movs	r3, #0
    5dd8:	9000      	str	r0, [sp, #0]
    5dda:	461a      	mov	r2, r3
    5ddc:	4620      	mov	r0, r4
    5dde:	f7ff fd9b 	bl	5918 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    5de2:	2800      	cmp	r0, #0
    5de4:	d03a      	beq.n	5e5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x83c>
    5de6:	2801      	cmp	r0, #1
    5de8:	d004      	beq.n	5df4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7d4>
    5dea:	f240 6194 	movw	r1, #1684	; 0x694
    5dee:	2030      	movs	r0, #48	; 0x30
    5df0:	f7fb fdde 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5df4:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    5df8:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    5dfc:	1a42      	subs	r2, r0, r1
    5dfe:	b212      	sxth	r2, r2
    5e00:	2a00      	cmp	r2, #0
    5e02:	da09      	bge.n	5e18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    5e04:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5e08:	4402      	add	r2, r0
    5e0a:	1aaa      	subs	r2, r5, r2
    5e0c:	b212      	sxth	r2, r2
    5e0e:	2a00      	cmp	r2, #0
    5e10:	da02      	bge.n	5e18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    5e12:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    5e16:	e004      	b.n	5e22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    5e18:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5e1c:	4408      	add	r0, r1
    5e1e:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    5e22:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    5e26:	1a68      	subs	r0, r5, r1
    5e28:	b200      	sxth	r0, r0
    5e2a:	2800      	cmp	r0, #0
    5e2c:	dad2      	bge.n	5dd4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>
    5e2e:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    5e32:	b188      	cbz	r0, 5e58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x838>
    5e34:	f05f 0008 	movs.w	r0, #8
    5e38:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    5e3c:	2202      	movs	r2, #2
    5e3e:	4908      	ldr	r1, [pc, #32]	; (5e60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x840>)
    5e40:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    5e44:	f009 fada 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5e48:	4620      	mov	r0, r4
    5e4a:	f00a fbae 	bl	105aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    5e4e:	4620      	mov	r0, r4
    5e50:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    5e54:	f00a ba7d 	b.w	10352 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    5e58:	203e      	movs	r0, #62	; 0x3e
    5e5a:	e7ed      	b.n	5e38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x818>
    5e5c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5e5e:	0000      	.short	0x0000
    5e60:	0000f6b9 	.word	0x0000f6b9
    5e64:	00000000 	.word	0x00000000
    5e68:	00010000 	.word	0x00010000
    5e6c:	00000000 	.word	0x00000000
    5e70:	00010000 	.word	0x00010000
    5e74:	00000000 	.word	0x00000000
    5e78:	00001e14 	.word	0x00001e14
    5e7c:	00001130 	.word	0x00001130
    5e80:	00fa01f4 	.word	0x00fa01f4
    5e84:	00640096 	.word	0x00640096
    5e88:	0032004b 	.word	0x0032004b
    5e8c:	0014001e 	.word	0x0014001e
    5e90:	0005000a 	.word	0x0005000a
    5e94:	00010002 	.word	0x00010002

00005e98 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    5e98:	b510      	push	{r4, lr}
    5e9a:	4604      	mov	r4, r0
    5e9c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    5ea0:	6921      	ldr	r1, [r4, #16]
    5ea2:	4288      	cmp	r0, r1
    5ea4:	d109      	bne.n	5eba <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    5ea6:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    5eaa:	8b22      	ldrh	r2, [r4, #24]
    5eac:	4291      	cmp	r1, r2
    5eae:	d104      	bne.n	5eba <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    5eb0:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    5eb4:	8b62      	ldrh	r2, [r4, #26]
    5eb6:	4291      	cmp	r1, r2
    5eb8:	d014      	beq.n	5ee4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    5eba:	8821      	ldrh	r1, [r4, #0]
    5ebc:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    5ec0:	f008 feee 	bl	eca0 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5ec4:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    5ec8:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    5ecc:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    5ed0:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    5ed4:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    5ed8:	2202      	movs	r2, #2
    5eda:	4907      	ldr	r1, [pc, #28]	; (5ef8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    5edc:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    5ee0:	f009 faa0 	bl	f424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5ee4:	2102      	movs	r1, #2
    5ee6:	4620      	mov	r0, r4
    5ee8:	f7fd fc0e 	bl	3708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    5eec:	2000      	movs	r0, #0
    5eee:	f804 0f9e 	strb.w	r0, [r4, #158]!
    5ef2:	2003      	movs	r0, #3
    5ef4:	70e0      	strb	r0, [r4, #3]
    5ef6:	bd10      	pop	{r4, pc}
    5ef8:	0000f747 	.word	0x0000f747

00005efc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    5efc:	4806      	ldr	r0, [pc, #24]	; (5f18 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    5efe:	4905      	ldr	r1, [pc, #20]	; (5f14 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    5f00:	6501      	str	r1, [r0, #80]	; 0x50
    5f02:	4906      	ldr	r1, [pc, #24]	; (5f1c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    5f04:	6541      	str	r1, [r0, #84]	; 0x54
    5f06:	4807      	ldr	r0, [pc, #28]	; (5f24 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    5f08:	4905      	ldr	r1, [pc, #20]	; (5f20 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    5f0a:	6501      	str	r1, [r0, #80]	; 0x50
    5f0c:	4906      	ldr	r1, [pc, #24]	; (5f28 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    5f0e:	6541      	str	r1, [r0, #84]	; 0x54
    5f10:	4770      	bx	lr
    5f12:	0000      	.short	0x0000
    5f14:	000071f5 	.word	0x000071f5
    5f18:	2000012c 	.word	0x2000012c
    5f1c:	000072dd 	.word	0x000072dd
    5f20:	0000f769 	.word	0x0000f769
    5f24:	200001d8 	.word	0x200001d8
    5f28:	0000772d 	.word	0x0000772d

00005f2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    5f2c:	481e      	ldr	r0, [pc, #120]	; (5fa8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    5f2e:	491d      	ldr	r1, [pc, #116]	; (5fa4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    5f30:	6081      	str	r1, [r0, #8]
    5f32:	491e      	ldr	r1, [pc, #120]	; (5fac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    5f34:	6041      	str	r1, [r0, #4]
    5f36:	491e      	ldr	r1, [pc, #120]	; (5fb0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    5f38:	6001      	str	r1, [r0, #0]
    5f3a:	491e      	ldr	r1, [pc, #120]	; (5fb4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    5f3c:	6281      	str	r1, [r0, #40]	; 0x28
    5f3e:	491e      	ldr	r1, [pc, #120]	; (5fb8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    5f40:	62c1      	str	r1, [r0, #44]	; 0x2c
    5f42:	491e      	ldr	r1, [pc, #120]	; (5fbc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    5f44:	60c1      	str	r1, [r0, #12]
    5f46:	491e      	ldr	r1, [pc, #120]	; (5fc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    5f48:	6181      	str	r1, [r0, #24]
    5f4a:	491e      	ldr	r1, [pc, #120]	; (5fc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    5f4c:	6301      	str	r1, [r0, #48]	; 0x30
    5f4e:	491e      	ldr	r1, [pc, #120]	; (5fc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    5f50:	6201      	str	r1, [r0, #32]
    5f52:	491e      	ldr	r1, [pc, #120]	; (5fcc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    5f54:	64c1      	str	r1, [r0, #76]	; 0x4c
    5f56:	491e      	ldr	r1, [pc, #120]	; (5fd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    5f58:	6481      	str	r1, [r0, #72]	; 0x48
    5f5a:	491e      	ldr	r1, [pc, #120]	; (5fd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    5f5c:	6441      	str	r1, [r0, #68]	; 0x44
    5f5e:	491e      	ldr	r1, [pc, #120]	; (5fd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    5f60:	6341      	str	r1, [r0, #52]	; 0x34
    5f62:	491e      	ldr	r1, [pc, #120]	; (5fdc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    5f64:	61c1      	str	r1, [r0, #28]
    5f66:	491e      	ldr	r1, [pc, #120]	; (5fe0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    5f68:	6241      	str	r1, [r0, #36]	; 0x24
    5f6a:	481f      	ldr	r0, [pc, #124]	; (5fe8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    5f6c:	491d      	ldr	r1, [pc, #116]	; (5fe4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    5f6e:	6081      	str	r1, [r0, #8]
    5f70:	491e      	ldr	r1, [pc, #120]	; (5fec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    5f72:	61c1      	str	r1, [r0, #28]
    5f74:	491e      	ldr	r1, [pc, #120]	; (5ff0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    5f76:	6241      	str	r1, [r0, #36]	; 0x24
    5f78:	491e      	ldr	r1, [pc, #120]	; (5ff4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    5f7a:	62c1      	str	r1, [r0, #44]	; 0x2c
    5f7c:	491e      	ldr	r1, [pc, #120]	; (5ff8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    5f7e:	6101      	str	r1, [r0, #16]
    5f80:	491e      	ldr	r1, [pc, #120]	; (5ffc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    5f82:	6141      	str	r1, [r0, #20]
    5f84:	491e      	ldr	r1, [pc, #120]	; (6000 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    5f86:	6441      	str	r1, [r0, #68]	; 0x44
    5f88:	491e      	ldr	r1, [pc, #120]	; (6004 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    5f8a:	6341      	str	r1, [r0, #52]	; 0x34
    5f8c:	491e      	ldr	r1, [pc, #120]	; (6008 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    5f8e:	6181      	str	r1, [r0, #24]
    5f90:	491e      	ldr	r1, [pc, #120]	; (600c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    5f92:	6301      	str	r1, [r0, #48]	; 0x30
    5f94:	491e      	ldr	r1, [pc, #120]	; (6010 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    5f96:	6481      	str	r1, [r0, #72]	; 0x48
    5f98:	491e      	ldr	r1, [pc, #120]	; (6014 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    5f9a:	64c1      	str	r1, [r0, #76]	; 0x4c
    5f9c:	491e      	ldr	r1, [pc, #120]	; (6018 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    5f9e:	6381      	str	r1, [r0, #56]	; 0x38
    5fa0:	4770      	bx	lr
    5fa2:	0000      	.short	0x0000
    5fa4:	00007641 	.word	0x00007641
    5fa8:	2000012c 	.word	0x2000012c
    5fac:	00006fdd 	.word	0x00006fdd
    5fb0:	00007049 	.word	0x00007049
    5fb4:	000072e9 	.word	0x000072e9
    5fb8:	00010623 	.word	0x00010623
    5fbc:	00007109 	.word	0x00007109
    5fc0:	00007619 	.word	0x00007619
    5fc4:	000076d9 	.word	0x000076d9
    5fc8:	000071a9 	.word	0x000071a9
    5fcc:	0000f961 	.word	0x0000f961
    5fd0:	0000f919 	.word	0x0000f919
    5fd4:	00007591 	.word	0x00007591
    5fd8:	000075c5 	.word	0x000075c5
    5fdc:	0000764d 	.word	0x0000764d
    5fe0:	000071b5 	.word	0x000071b5
    5fe4:	0000f729 	.word	0x0000f729
    5fe8:	200001d8 	.word	0x200001d8
    5fec:	00007819 	.word	0x00007819
    5ff0:	000106f1 	.word	0x000106f1
    5ff4:	000106f5 	.word	0x000106f5
    5ff8:	000106cb 	.word	0x000106cb
    5ffc:	0001075d 	.word	0x0001075d
    6000:	0000776d 	.word	0x0000776d
    6004:	0001073b 	.word	0x0001073b
    6008:	000077a5 	.word	0x000077a5
    600c:	0001077b 	.word	0x0001077b
    6010:	0000f93d 	.word	0x0000f93d
    6014:	0000f987 	.word	0x0000f987
    6018:	00010759 	.word	0x00010759

0000601c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    601c:	4806      	ldr	r0, [pc, #24]	; (6038 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    601e:	4905      	ldr	r1, [pc, #20]	; (6034 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    6020:	6581      	str	r1, [r0, #88]	; 0x58
    6022:	4906      	ldr	r1, [pc, #24]	; (603c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    6024:	6601      	str	r1, [r0, #96]	; 0x60
    6026:	4807      	ldr	r0, [pc, #28]	; (6044 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    6028:	4905      	ldr	r1, [pc, #20]	; (6040 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    602a:	6581      	str	r1, [r0, #88]	; 0x58
    602c:	4906      	ldr	r1, [pc, #24]	; (6048 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    602e:	65c1      	str	r1, [r0, #92]	; 0x5c
    6030:	4770      	bx	lr
    6032:	0000      	.short	0x0000
    6034:	00007339 	.word	0x00007339
    6038:	2000012c 	.word	0x2000012c
    603c:	0000741d 	.word	0x0000741d
    6040:	00011765 	.word	0x00011765
    6044:	200001d8 	.word	0x200001d8
    6048:	0001071b 	.word	0x0001071b

0000604c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    604e:	4c7c      	ldr	r4, [pc, #496]	; (6240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    6050:	2101      	movs	r1, #1
    6052:	f1a4 0610 	sub.w	r6, r4, #16
    6056:	7021      	strb	r1, [r4, #0]
    6058:	2500      	movs	r5, #0
    605a:	6060      	str	r0, [r4, #4]
    605c:	8075      	strh	r5, [r6, #2]
    605e:	7075      	strb	r5, [r6, #1]
    6060:	7035      	strb	r5, [r6, #0]
    6062:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    6066:	8800      	ldrh	r0, [r0, #0]
    6068:	f7fc f97a 	bl	2360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    606c:	b180      	cbz	r0, 6090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    606e:	6860      	ldr	r0, [r4, #4]
    6070:	8800      	ldrh	r0, [r0, #0]
    6072:	f7fc fbdd 	bl	2830 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    6076:	6860      	ldr	r0, [r4, #4]
    6078:	8800      	ldrh	r0, [r0, #0]
    607a:	f7fc fb81 	bl	2780 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    607e:	6860      	ldr	r0, [r4, #4]
    6080:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    6084:	b1c9      	cbz	r1, 60ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    6086:	3080      	adds	r0, #128	; 0x80
    6088:	f00a fa9e 	bl	105c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    608c:	b118      	cbz	r0, 6096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    608e:	e014      	b.n	60ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    6090:	f640 419f 	movw	r1, #3231	; 0xc9f
    6094:	e06c      	b.n	6170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    6096:	6860      	ldr	r0, [r4, #4]
    6098:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    609c:	f88d 1000 	strb.w	r1, [sp]
    60a0:	9900      	ldr	r1, [sp, #0]
    60a2:	9100      	str	r1, [sp, #0]
    60a4:	f89d 1000 	ldrb.w	r1, [sp]
    60a8:	b139      	cbz	r1, 60ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    60aa:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    60ae:	2301      	movs	r3, #1
    60b0:	4619      	mov	r1, r3
    60b2:	3080      	adds	r0, #128	; 0x80
    60b4:	f008 fdfa 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    60b8:	b180      	cbz	r0, 60dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    60ba:	6860      	ldr	r0, [r4, #4]
    60bc:	3080      	adds	r0, #128	; 0x80
    60be:	f00a fa83 	bl	105c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    60c2:	b128      	cbz	r0, 60d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    60c4:	6860      	ldr	r0, [r4, #4]
    60c6:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    60ca:	bf00      	nop
    60cc:	f000 fb84 	bl	67d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
    60d0:	6860      	ldr	r0, [r4, #4]
    60d2:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    60d6:	b189      	cbz	r1, 60fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    60d8:	80b5      	strh	r5, [r6, #4]
    60da:	e01e      	b.n	611a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    60dc:	6860      	ldr	r0, [r4, #4]
    60de:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    60e2:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    60e6:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    60ea:	2100      	movs	r1, #0
    60ec:	2002      	movs	r0, #2
    60ee:	f000 fe39 	bl	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    60f2:	6860      	ldr	r0, [r4, #4]
    60f4:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    60f8:	2002      	movs	r0, #2
    60fa:	e7e7      	b.n	60cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    60fc:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    6100:	f88d 1000 	strb.w	r1, [sp]
    6104:	9900      	ldr	r1, [sp, #0]
    6106:	9100      	str	r1, [sp, #0]
    6108:	f89d 1000 	ldrb.w	r1, [sp]
    610c:	b919      	cbnz	r1, 6116 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    610e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    6110:	8b02      	ldrh	r2, [r0, #24]
    6112:	4291      	cmp	r1, r2
    6114:	d800      	bhi.n	6118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    6116:	8b01      	ldrh	r1, [r0, #24]
    6118:	80b1      	strh	r1, [r6, #4]
    611a:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    611e:	1e49      	subs	r1, r1, #1
    6120:	b28f      	uxth	r7, r1
    6122:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    6126:	4439      	add	r1, r7
    6128:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    612c:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    6130:	4439      	add	r1, r7
    6132:	8001      	strh	r1, [r0, #0]
    6134:	f001 fba0 	bl	7878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    6138:	b120      	cbz	r0, 6144 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    613a:	6860      	ldr	r0, [r4, #4]
    613c:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    6140:	4439      	add	r1, r7
    6142:	6001      	str	r1, [r0, #0]
    6144:	6861      	ldr	r1, [r4, #4]
    6146:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    614a:	2801      	cmp	r0, #1
    614c:	d802      	bhi.n	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    614e:	1c40      	adds	r0, r0, #1
    6150:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    6154:	b10f      	cbz	r7, 615a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    6156:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    615a:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    615e:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    6162:	f101 0080 	add.w	r0, r1, #128	; 0x80
    6166:	f008 ff4d 	bl	f004 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    616a:	b120      	cbz	r0, 6176 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    616c:	f640 41e6 	movw	r1, #3302	; 0xce6
    6170:	2031      	movs	r0, #49	; 0x31
    6172:	f7fb fc1d 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6176:	6860      	ldr	r0, [r4, #4]
    6178:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    617c:	290a      	cmp	r1, #10
    617e:	d001      	beq.n	6184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    6180:	290b      	cmp	r1, #11
    6182:	d119      	bne.n	61b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    6184:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    6188:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    618c:	1ad2      	subs	r2, r2, r3
    618e:	b212      	sxth	r2, r2
    6190:	2a00      	cmp	r2, #0
    6192:	db11      	blt.n	61b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    6194:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    6198:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    619c:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    61a0:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    61a4:	2103      	movs	r1, #3
    61a6:	f7fd faaf 	bl	3708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    61aa:	6860      	ldr	r0, [r4, #4]
    61ac:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    61b0:	21ff      	movs	r1, #255	; 0xff
    61b2:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    61b6:	e026      	b.n	6206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    61b8:	2925      	cmp	r1, #37	; 0x25
    61ba:	d111      	bne.n	61e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    61bc:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    61c0:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    61c4:	1a89      	subs	r1, r1, r2
    61c6:	b209      	sxth	r1, r1
    61c8:	2900      	cmp	r1, #0
    61ca:	db09      	blt.n	61e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    61cc:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    61d0:	f000 fe82 	bl	6ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    61d4:	2800      	cmp	r0, #0
    61d6:	6860      	ldr	r0, [r4, #4]
    61d8:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    61dc:	d029      	beq.n	6232 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    61de:	e012      	b.n	6206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    61e0:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    61e4:	2925      	cmp	r1, #37	; 0x25
    61e6:	d001      	beq.n	61ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    61e8:	2927      	cmp	r1, #39	; 0x27
    61ea:	d10c      	bne.n	6206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    61ec:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    61f0:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    61f4:	1a89      	subs	r1, r1, r2
    61f6:	b209      	sxth	r1, r1
    61f8:	2900      	cmp	r1, #0
    61fa:	db04      	blt.n	6206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    61fc:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    6200:	f000 fe6a 	bl	6ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    6204:	b1a8      	cbz	r0, 6232 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    6206:	480f      	ldr	r0, [pc, #60]	; (6244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    6208:	9000      	str	r0, [sp, #0]
    620a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    620e:	4b0e      	ldr	r3, [pc, #56]	; (6248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    6210:	4a0e      	ldr	r2, [pc, #56]	; (624c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    6212:	f7fc fb9b 	bl	294c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>
    6216:	6860      	ldr	r0, [r4, #4]
    6218:	2301      	movs	r3, #1
    621a:	2105      	movs	r1, #5
    621c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6220:	3080      	adds	r0, #128	; 0x80
    6222:	f008 fd43 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6226:	2800      	cmp	r0, #0
    6228:	d009      	beq.n	623e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    622a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    622e:	f7fc bb87 	b.w	2940 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>
    6232:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6236:	2100      	movs	r1, #0
    6238:	4608      	mov	r0, r1
    623a:	f000 bb9f 	b.w	697c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x930>
    623e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6240:	20000124 	.word	0x20000124
    6244:	0000697d 	.word	0x0000697d
    6248:	000064cd 	.word	0x000064cd
    624c:	00006e25 	.word	0x00006e25
    6250:	491d      	ldr	r1, [pc, #116]	; (62c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    6252:	b508      	push	{r3, lr}
    6254:	6849      	ldr	r1, [r1, #4]
    6256:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    625a:	b1c0      	cbz	r0, 628e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x242>
    625c:	2a11      	cmp	r2, #17
    625e:	d006      	beq.n	626e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    6260:	2a15      	cmp	r2, #21
    6262:	d007      	beq.n	6274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    6264:	2a16      	cmp	r2, #22
    6266:	d009      	beq.n	627c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    6268:	2a1c      	cmp	r2, #28
    626a:	d128      	bne.n	62be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    626c:	e009      	b.n	6282 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x236>
    626e:	2101      	movs	r1, #1
    6270:	200b      	movs	r0, #11
    6272:	e008      	b.n	6286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    6274:	4814      	ldr	r0, [pc, #80]	; (62c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    6276:	f00a f9e0 	bl	1063a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x90>
    627a:	e006      	b.n	628a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    627c:	f000 fd90 	bl	6da0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd54>
    6280:	e003      	b.n	628a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    6282:	2101      	movs	r1, #1
    6284:	2006      	movs	r0, #6
    6286:	f000 fd6d 	bl	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    628a:	2001      	movs	r0, #1
    628c:	bd08      	pop	{r3, pc}
    628e:	2a22      	cmp	r2, #34	; 0x22
    6290:	d004      	beq.n	629c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    6292:	2a2f      	cmp	r2, #47	; 0x2f
    6294:	d113      	bne.n	62be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    6296:	2101      	movs	r1, #1
    6298:	2011      	movs	r0, #17
    629a:	e7f4      	b.n	6286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    629c:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    62a0:	2802      	cmp	r0, #2
    62a2:	d00e      	beq.n	62c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    62a4:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    62a8:	2801      	cmp	r0, #1
    62aa:	d108      	bne.n	62be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    62ac:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    62b0:	f88d 0000 	strb.w	r0, [sp]
    62b4:	9800      	ldr	r0, [sp, #0]
    62b6:	9000      	str	r0, [sp, #0]
    62b8:	f89d 0000 	ldrb.w	r0, [sp]
    62bc:	b108      	cbz	r0, 62c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    62be:	2000      	movs	r0, #0
    62c0:	bd08      	pop	{r3, pc}
    62c2:	2101      	movs	r1, #1
    62c4:	2017      	movs	r0, #23
    62c6:	e7de      	b.n	6286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    62c8:	20000124 	.word	0x20000124
    62cc:	b538      	push	{r3, r4, r5, lr}
    62ce:	2800      	cmp	r0, #0
    62d0:	d173      	bne.n	63ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    62d2:	4c3b      	ldr	r4, [pc, #236]	; (63c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    62d4:	6860      	ldr	r0, [r4, #4]
    62d6:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    62da:	07ca      	lsls	r2, r1, #31
    62dc:	d002      	beq.n	62e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    62de:	2101      	movs	r1, #1
    62e0:	2009      	movs	r0, #9
    62e2:	e066      	b.n	63b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    62e4:	078a      	lsls	r2, r1, #30
    62e6:	d50a      	bpl.n	62fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    62e8:	2101      	movs	r1, #1
    62ea:	200c      	movs	r0, #12
    62ec:	f000 fd3a 	bl	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    62f0:	6860      	ldr	r0, [r4, #4]
    62f2:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    62f6:	f041 0101 	orr.w	r1, r1, #1
    62fa:	7001      	strb	r1, [r0, #0]
    62fc:	e05b      	b.n	63b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36a>
    62fe:	074a      	lsls	r2, r1, #29
    6300:	d502      	bpl.n	6308 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    6302:	2101      	movs	r1, #1
    6304:	2013      	movs	r0, #19
    6306:	e054      	b.n	63b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    6308:	070a      	lsls	r2, r1, #28
    630a:	d506      	bpl.n	631a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ce>
    630c:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    6310:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    6314:	2101      	movs	r1, #1
    6316:	2007      	movs	r0, #7
    6318:	e04b      	b.n	63b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    631a:	f011 0f30 	tst.w	r1, #48	; 0x30
    631e:	d044      	beq.n	63aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35e>
    6320:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    6324:	f88d 1000 	strb.w	r1, [sp]
    6328:	9900      	ldr	r1, [sp, #0]
    632a:	9100      	str	r1, [sp, #0]
    632c:	f89d 1000 	ldrb.w	r1, [sp]
    6330:	bbc1      	cbnz	r1, 63a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>
    6332:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6336:	2500      	movs	r5, #0
    6338:	f88d 1000 	strb.w	r1, [sp]
    633c:	9900      	ldr	r1, [sp, #0]
    633e:	9100      	str	r1, [sp, #0]
    6340:	f89d 1000 	ldrb.w	r1, [sp]
    6344:	b1c1      	cbz	r1, 6378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32c>
    6346:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    634a:	2925      	cmp	r1, #37	; 0x25
    634c:	d02b      	beq.n	63a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    634e:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    6352:	2925      	cmp	r1, #37	; 0x25
    6354:	d027      	beq.n	63a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    6356:	2300      	movs	r3, #0
    6358:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    635c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    6360:	f009 f876 	bl	f450 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    6364:	6860      	ldr	r0, [r4, #4]
    6366:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    636a:	f021 0120 	bic.w	r1, r1, #32
    636e:	f041 0110 	orr.w	r1, r1, #16
    6372:	6001      	str	r1, [r0, #0]
    6374:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    6378:	6860      	ldr	r0, [r4, #4]
    637a:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    637e:	06c9      	lsls	r1, r1, #27
    6380:	d51b      	bpl.n	63ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    6382:	f009 f880 	bl	f486 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6386:	480e      	ldr	r0, [pc, #56]	; (63c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    6388:	f009 fa3e 	bl	f808 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    638c:	6861      	ldr	r1, [r4, #4]
    638e:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    6392:	8bc2      	ldrh	r2, [r0, #30]
    6394:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    6398:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    639a:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    639e:	2101      	movs	r1, #1
    63a0:	2015      	movs	r0, #21
    63a2:	e006      	b.n	63b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    63a4:	e009      	b.n	63ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    63a6:	2301      	movs	r3, #1
    63a8:	e7d6      	b.n	6358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30c>
    63aa:	0648      	lsls	r0, r1, #25
    63ac:	d505      	bpl.n	63ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    63ae:	2101      	movs	r1, #1
    63b0:	2024      	movs	r0, #36	; 0x24
    63b2:	f000 fcd7 	bl	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    63b6:	2001      	movs	r0, #1
    63b8:	bd38      	pop	{r3, r4, r5, pc}
    63ba:	2000      	movs	r0, #0
    63bc:	bd38      	pop	{r3, r4, r5, pc}
    63be:	0000      	.short	0x0000
    63c0:	20000124 	.word	0x20000124
    63c4:	b570      	push	{r4, r5, r6, lr}
    63c6:	460d      	mov	r5, r1
    63c8:	4606      	mov	r6, r0
    63ca:	f008 ff76 	bl	f2ba <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    63ce:	4604      	mov	r4, r0
    63d0:	4630      	mov	r0, r6
    63d2:	f008 ff74 	bl	f2be <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    63d6:	4629      	mov	r1, r5
    63d8:	f000 f81e 	bl	6418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    63dc:	b1b8      	cbz	r0, 640e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    63de:	4620      	mov	r0, r4
    63e0:	f008 fd0e 	bl	ee00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    63e4:	0001      	movs	r1, r0
    63e6:	d00d      	beq.n	6404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    63e8:	480a      	ldr	r0, [pc, #40]	; (6414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>)
    63ea:	6840      	ldr	r0, [r0, #4]
    63ec:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    63f0:	428a      	cmp	r2, r1
    63f2:	d007      	beq.n	6404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    63f4:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    63f8:	2901      	cmp	r1, #1
    63fa:	d005      	beq.n	6408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3bc>
    63fc:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    6400:	4220      	tst	r0, r4
    6402:	d004      	beq.n	640e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    6404:	2001      	movs	r0, #1
    6406:	bd70      	pop	{r4, r5, r6, pc}
    6408:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    640c:	e7f8      	b.n	6400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>
    640e:	2000      	movs	r0, #0
    6410:	bd70      	pop	{r4, r5, r6, pc}
    6412:	0000      	.short	0x0000
    6414:	20000124 	.word	0x20000124
    6418:	b570      	push	{r4, r5, r6, lr}
    641a:	460d      	mov	r5, r1
    641c:	4604      	mov	r4, r0
    641e:	f008 fcef 	bl	ee00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    6422:	b350      	cbz	r0, 647a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    6424:	4916      	ldr	r1, [pc, #88]	; (6480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>)
    6426:	6849      	ldr	r1, [r1, #4]
    6428:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    642c:	4282      	cmp	r2, r0
    642e:	d024      	beq.n	647a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    6430:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    6434:	2b01      	cmp	r3, #1
    6436:	d005      	beq.n	6444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    6438:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    643c:	4223      	tst	r3, r4
    643e:	d013      	beq.n	6468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    6440:	b11d      	cbz	r5, 644a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fe>
    6442:	e01a      	b.n	647a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    6444:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    6448:	e7f8      	b.n	643c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    644a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    644e:	4221      	tst	r1, r4
    6450:	d113      	bne.n	647a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    6452:	b15a      	cbz	r2, 646c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    6454:	2a04      	cmp	r2, #4
    6456:	d00e      	beq.n	6476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    6458:	2804      	cmp	r0, #4
    645a:	d00c      	beq.n	6476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    645c:	2a08      	cmp	r2, #8
    645e:	d00a      	beq.n	6476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    6460:	2808      	cmp	r0, #8
    6462:	d008      	beq.n	6476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    6464:	4282      	cmp	r2, r0
    6466:	d908      	bls.n	647a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    6468:	2000      	movs	r0, #0
    646a:	bd70      	pop	{r4, r5, r6, pc}
    646c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    6470:	2006      	movs	r0, #6
    6472:	f7fb fa9d 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6476:	4282      	cmp	r2, r0
    6478:	d3f6      	bcc.n	6468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    647a:	2001      	movs	r0, #1
    647c:	bd70      	pop	{r4, r5, r6, pc}
    647e:	0000      	.short	0x0000
    6480:	20000124 	.word	0x20000124
    6484:	b510      	push	{r4, lr}
    6486:	4c10      	ldr	r4, [pc, #64]	; (64c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x47c>)
    6488:	2301      	movs	r3, #1
    648a:	2100      	movs	r1, #0
    648c:	6860      	ldr	r0, [r4, #4]
    648e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6492:	3080      	adds	r0, #128	; 0x80
    6494:	f008 fc0a 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6498:	b140      	cbz	r0, 64ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    649a:	6860      	ldr	r0, [r4, #4]
    649c:	2301      	movs	r3, #1
    649e:	2104      	movs	r1, #4
    64a0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    64a4:	3080      	adds	r0, #128	; 0x80
    64a6:	f008 fc01 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    64aa:	b108      	cbz	r0, 64b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>
    64ac:	2000      	movs	r0, #0
    64ae:	bd10      	pop	{r4, pc}
    64b0:	6860      	ldr	r0, [r4, #4]
    64b2:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    64b6:	2800      	cmp	r0, #0
    64b8:	d0f9      	beq.n	64ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    64ba:	2100      	movs	r1, #0
    64bc:	2012      	movs	r0, #18
    64be:	f000 fc51 	bl	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    64c2:	2001      	movs	r0, #1
    64c4:	bd10      	pop	{r4, pc}
    64c6:	0000      	.short	0x0000
    64c8:	20000124 	.word	0x20000124
    64cc:	490d      	ldr	r1, [pc, #52]	; (6504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b8>)
    64ce:	4602      	mov	r2, r0
    64d0:	7848      	ldrb	r0, [r1, #1]
    64d2:	b9a0      	cbnz	r0, 64fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    64d4:	f101 0010 	add.w	r0, r1, #16
    64d8:	6840      	ldr	r0, [r0, #4]
    64da:	b142      	cbz	r2, 64ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    64dc:	7889      	ldrb	r1, [r1, #2]
    64de:	0709      	lsls	r1, r1, #28
    64e0:	d503      	bpl.n	64ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    64e2:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    64e6:	2807      	cmp	r0, #7
    64e8:	d009      	beq.n	64fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    64ea:	2001      	movs	r0, #1
    64ec:	4770      	bx	lr
    64ee:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    64f2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    64f4:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    64f6:	428a      	cmp	r2, r1
    64f8:	d801      	bhi.n	64fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    64fa:	f7ff b83f 	b.w	557c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    64fe:	2000      	movs	r0, #0
    6500:	4770      	bx	lr
    6502:	0000      	.short	0x0000
    6504:	20000114 	.word	0x20000114
    6508:	b538      	push	{r3, r4, r5, lr}
    650a:	4c32      	ldr	r4, [pc, #200]	; (65d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x588>)
    650c:	4605      	mov	r5, r0
    650e:	6860      	ldr	r0, [r4, #4]
    6510:	3080      	adds	r0, #128	; 0x80
    6512:	f00a f859 	bl	105c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    6516:	2800      	cmp	r0, #0
    6518:	d15b      	bne.n	65d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    651a:	2d00      	cmp	r5, #0
    651c:	d159      	bne.n	65d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    651e:	6860      	ldr	r0, [r4, #4]
    6520:	2301      	movs	r3, #1
    6522:	4619      	mov	r1, r3
    6524:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6528:	3080      	adds	r0, #128	; 0x80
    652a:	f008 fbbf 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    652e:	2800      	cmp	r0, #0
    6530:	d14f      	bne.n	65d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    6532:	6860      	ldr	r0, [r4, #4]
    6534:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    6538:	f88d 1000 	strb.w	r1, [sp]
    653c:	9900      	ldr	r1, [sp, #0]
    653e:	9100      	str	r1, [sp, #0]
    6540:	f89d 2000 	ldrb.w	r2, [sp]
    6544:	2100      	movs	r1, #0
    6546:	b142      	cbz	r2, 655a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x50e>
    6548:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    654c:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    6550:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    6554:	2100      	movs	r1, #0
    6556:	2002      	movs	r0, #2
    6558:	e030      	b.n	65bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    655a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    655e:	2301      	movs	r3, #1
    6560:	2104      	movs	r1, #4
    6562:	3080      	adds	r0, #128	; 0x80
    6564:	f008 fba2 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6568:	4605      	mov	r5, r0
    656a:	f7ff feaf 	bl	62cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x280>
    656e:	2800      	cmp	r0, #0
    6570:	d12f      	bne.n	65d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    6572:	4628      	mov	r0, r5
    6574:	f7ff fe6c 	bl	6250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    6578:	2800      	cmp	r0, #0
    657a:	d12a      	bne.n	65d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    657c:	f7ff ff82 	bl	6484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    6580:	2800      	cmp	r0, #0
    6582:	d126      	bne.n	65d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    6584:	6860      	ldr	r0, [r4, #4]
    6586:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    658a:	2909      	cmp	r1, #9
    658c:	d01a      	beq.n	65c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    658e:	2d00      	cmp	r5, #0
    6590:	d11f      	bne.n	65d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    6592:	f000 fb13 	bl	6bbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb70>
    6596:	2800      	cmp	r0, #0
    6598:	d11b      	bne.n	65d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    659a:	6860      	ldr	r0, [r4, #4]
    659c:	2301      	movs	r3, #1
    659e:	2100      	movs	r1, #0
    65a0:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    65a4:	3080      	adds	r0, #128	; 0x80
    65a6:	f008 fb81 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    65aa:	2800      	cmp	r0, #0
    65ac:	d011      	beq.n	65d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    65ae:	6860      	ldr	r0, [r4, #4]
    65b0:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    65b4:	2800      	cmp	r0, #0
    65b6:	d00c      	beq.n	65d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    65b8:	2100      	movs	r1, #0
    65ba:	20ff      	movs	r0, #255	; 0xff
    65bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    65c0:	f000 bbd0 	b.w	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    65c4:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    65c8:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    65cc:	2100      	movs	r1, #0
    65ce:	2007      	movs	r0, #7
    65d0:	e7f4      	b.n	65bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    65d2:	bd38      	pop	{r3, r4, r5, pc}
    65d4:	20000124 	.word	0x20000124
    65d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65da:	4d2b      	ldr	r5, [pc, #172]	; (6688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    65dc:	0006      	movs	r6, r0
    65de:	f105 0410 	add.w	r4, r5, #16
    65e2:	d133      	bne.n	664c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    65e4:	f000 f8aa 	bl	673c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f0>
    65e8:	f000 f852 	bl	6690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    65ec:	0006      	movs	r6, r0
    65ee:	d12d      	bne.n	664c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    65f0:	8869      	ldrh	r1, [r5, #2]
    65f2:	0748      	lsls	r0, r1, #29
    65f4:	d506      	bpl.n	6604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    65f6:	6860      	ldr	r0, [r4, #4]
    65f8:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    65fc:	2806      	cmp	r0, #6
    65fe:	d101      	bne.n	6604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    6600:	2001      	movs	r0, #1
    6602:	7028      	strb	r0, [r5, #0]
    6604:	0788      	lsls	r0, r1, #30
    6606:	d516      	bpl.n	6636 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    6608:	68a8      	ldr	r0, [r5, #8]
    660a:	78c0      	ldrb	r0, [r0, #3]
    660c:	282b      	cmp	r0, #43	; 0x2b
    660e:	d207      	bcs.n	6620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    6610:	491e      	ldr	r1, [pc, #120]	; (668c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
    6612:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    6616:	b119      	cbz	r1, 6620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    6618:	481b      	ldr	r0, [pc, #108]	; (6688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    661a:	3010      	adds	r0, #16
    661c:	4788      	blx	r1
    661e:	e00a      	b.n	6636 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    6620:	28ff      	cmp	r0, #255	; 0xff
    6622:	d004      	beq.n	662e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e2>
    6624:	f640 0148 	movw	r1, #2120	; 0x848
    6628:	2031      	movs	r0, #49	; 0x31
    662a:	f7fb f9c1 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    662e:	4816      	ldr	r0, [pc, #88]	; (6688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    6630:	3010      	adds	r0, #16
    6632:	f00a f841 	bl	106b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    6636:	78a8      	ldrb	r0, [r5, #2]
    6638:	06c0      	lsls	r0, r0, #27
    663a:	d507      	bpl.n	664c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    663c:	6860      	ldr	r0, [r4, #4]
    663e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6642:	290a      	cmp	r1, #10
    6644:	d102      	bne.n	664c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    6646:	210b      	movs	r1, #11
    6648:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    664c:	7868      	ldrb	r0, [r5, #1]
    664e:	0700      	lsls	r0, r0, #28
    6650:	d518      	bpl.n	6684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    6652:	6860      	ldr	r0, [r4, #4]
    6654:	2301      	movs	r3, #1
    6656:	2105      	movs	r1, #5
    6658:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    665c:	3080      	adds	r0, #128	; 0x80
    665e:	f008 fb25 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6662:	b108      	cbz	r0, 6668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x61c>
    6664:	2608      	movs	r6, #8
    6666:	e00d      	b.n	6684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    6668:	2500      	movs	r5, #0
    666a:	4669      	mov	r1, sp
    666c:	2003      	movs	r0, #3
    666e:	9500      	str	r5, [sp, #0]
    6670:	f7fc fa2e 	bl	2ad0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    6674:	9800      	ldr	r0, [sp, #0]
    6676:	b128      	cbz	r0, 6684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    6678:	7205      	strb	r5, [r0, #8]
    667a:	2210      	movs	r2, #16
    667c:	6861      	ldr	r1, [r4, #4]
    667e:	9800      	ldr	r0, [sp, #0]
    6680:	f008 febc 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6684:	4630      	mov	r0, r6
    6686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6688:	20000114 	.word	0x20000114
    668c:	200001d8 	.word	0x200001d8
    6690:	b570      	push	{r4, r5, r6, lr}
    6692:	4d28      	ldr	r5, [pc, #160]	; (6734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    6694:	2000      	movs	r0, #0
    6696:	78a9      	ldrb	r1, [r5, #2]
    6698:	07c9      	lsls	r1, r1, #31
    669a:	d017      	beq.n	66cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
    669c:	68e8      	ldr	r0, [r5, #12]
    669e:	f105 0410 	add.w	r4, r5, #16
    66a2:	2301      	movs	r3, #1
    66a4:	78c6      	ldrb	r6, [r0, #3]
    66a6:	6860      	ldr	r0, [r4, #4]
    66a8:	2105      	movs	r1, #5
    66aa:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    66ae:	3080      	adds	r0, #128	; 0x80
    66b0:	f008 fafc 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66b4:	b158      	cbz	r0, 66ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    66b6:	1eb6      	subs	r6, r6, #2
    66b8:	2e0a      	cmp	r6, #10
    66ba:	d206      	bcs.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
    66bc:	e8df f006 	tbb	[pc, r6]
    66c0:	05050707 	.word	0x05050707
    66c4:	05050707 	.word	0x05050707
    66c8:	0707      	.short	0x0707
    66ca:	2008      	movs	r0, #8
    66cc:	bd70      	pop	{r4, r5, r6, pc}
    66ce:	68e8      	ldr	r0, [r5, #12]
    66d0:	f7fd f944 	bl	395c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    66d4:	b338      	cbz	r0, 6726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    66d6:	68e8      	ldr	r0, [r5, #12]
    66d8:	78c5      	ldrb	r5, [r0, #3]
    66da:	b11d      	cbz	r5, 66e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    66dc:	2d01      	cmp	r5, #1
    66de:	d001      	beq.n	66e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    66e0:	2d16      	cmp	r5, #22
    66e2:	d113      	bne.n	670c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    66e4:	6860      	ldr	r0, [r4, #4]
    66e6:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    66ea:	f008 fb37 	bl	ed5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    66ee:	b168      	cbz	r0, 670c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    66f0:	6861      	ldr	r1, [r4, #4]
    66f2:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    66f6:	2820      	cmp	r0, #32
    66f8:	d008      	beq.n	670c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    66fa:	2821      	cmp	r0, #33	; 0x21
    66fc:	d003      	beq.n	6706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ba>
    66fe:	2d16      	cmp	r5, #22
    6700:	d00f      	beq.n	6722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    6702:	2002      	movs	r0, #2
    6704:	bd70      	pop	{r4, r5, r6, pc}
    6706:	202e      	movs	r0, #46	; 0x2e
    6708:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    670c:	2d2b      	cmp	r5, #43	; 0x2b
    670e:	d20a      	bcs.n	6726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    6710:	4809      	ldr	r0, [pc, #36]	; (6738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ec>)
    6712:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    6716:	b131      	cbz	r1, 6726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    6718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    671c:	4805      	ldr	r0, [pc, #20]	; (6734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    671e:	3010      	adds	r0, #16
    6720:	4708      	bx	r1
    6722:	2020      	movs	r0, #32
    6724:	bd70      	pop	{r4, r5, r6, pc}
    6726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    672a:	4802      	ldr	r0, [pc, #8]	; (6734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    672c:	3010      	adds	r0, #16
    672e:	f000 bd47 	b.w	71c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    6732:	0000      	.short	0x0000
    6734:	20000114 	.word	0x20000114
    6738:	2000012c 	.word	0x2000012c
    673c:	b570      	push	{r4, r5, r6, lr}
    673e:	4e25      	ldr	r6, [pc, #148]	; (67d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    6740:	78b0      	ldrb	r0, [r6, #2]
    6742:	0700      	lsls	r0, r0, #28
    6744:	d545      	bpl.n	67d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    6746:	f106 0410 	add.w	r4, r6, #16
    674a:	6860      	ldr	r0, [r4, #4]
    674c:	3080      	adds	r0, #128	; 0x80
    674e:	f009 ff3b 	bl	105c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    6752:	b148      	cbz	r0, 6768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    6754:	6860      	ldr	r0, [r4, #4]
    6756:	21fe      	movs	r1, #254	; 0xfe
    6758:	2500      	movs	r5, #0
    675a:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    675e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6762:	291a      	cmp	r1, #26
    6764:	d10e      	bne.n	6784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x738>
    6766:	e004      	b.n	6772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    6768:	f640 0154 	movw	r1, #2132	; 0x854
    676c:	2031      	movs	r0, #49	; 0x31
    676e:	f7fb f91f 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6772:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    6776:	4817      	ldr	r0, [pc, #92]	; (67d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    6778:	3010      	adds	r0, #16
    677a:	f008 ff80 	bl	f67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    677e:	6860      	ldr	r0, [r4, #4]
    6780:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    6784:	6860      	ldr	r0, [r4, #4]
    6786:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    678a:	2920      	cmp	r1, #32
    678c:	d002      	beq.n	6794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x748>
    678e:	2931      	cmp	r1, #49	; 0x31
    6790:	d116      	bne.n	67c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    6792:	e00e      	b.n	67b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x766>
    6794:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6798:	2301      	movs	r3, #1
    679a:	210b      	movs	r1, #11
    679c:	3080      	adds	r0, #128	; 0x80
    679e:	f008 fa85 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    67a2:	b108      	cbz	r0, 67a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    67a4:	202e      	movs	r0, #46	; 0x2e
    67a6:	e000      	b.n	67aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75e>
    67a8:	2021      	movs	r0, #33	; 0x21
    67aa:	6861      	ldr	r1, [r4, #4]
    67ac:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    67b0:	e006      	b.n	67c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    67b2:	2101      	movs	r1, #1
    67b4:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    67b8:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    67bc:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    67c0:	6860      	ldr	r0, [r4, #4]
    67c2:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    67c6:	2907      	cmp	r1, #7
    67c8:	d103      	bne.n	67d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    67ca:	2102      	movs	r1, #2
    67cc:	7031      	strb	r1, [r6, #0]
    67ce:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    67d2:	bd70      	pop	{r4, r5, r6, pc}
    67d4:	20000114 	.word	0x20000114
    67d8:	b538      	push	{r3, r4, r5, lr}
    67da:	4605      	mov	r5, r0
    67dc:	4668      	mov	r0, sp
    67de:	f7fc f811 	bl	2804 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    67e2:	b308      	cbz	r0, 6828 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7dc>
    67e4:	2222      	movs	r2, #34	; 0x22
    67e6:	2100      	movs	r1, #0
    67e8:	9800      	ldr	r0, [sp, #0]
    67ea:	f00b fbc6 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    67ee:	2103      	movs	r1, #3
    67f0:	9800      	ldr	r0, [sp, #0]
    67f2:	f008 fd7c 	bl	f2ee <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    67f6:	9800      	ldr	r0, [sp, #0]
    67f8:	7801      	ldrb	r1, [r0, #0]
    67fa:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    67fe:	7001      	strb	r1, [r0, #0]
    6800:	4629      	mov	r1, r5
    6802:	f7fd f8bb 	bl	397c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    6806:	4c5b      	ldr	r4, [pc, #364]	; (6974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    6808:	2d11      	cmp	r5, #17
    680a:	d032      	beq.n	6872 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x826>
    680c:	dc0f      	bgt.n	682e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    680e:	f1a5 0502 	sub.w	r5, r5, #2
    6812:	2d0d      	cmp	r5, #13
    6814:	d21f      	bcs.n	6856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    6816:	e8df f005 	tbb	[pc, r5]
    681a:	1e21      	.short	0x1e21
    681c:	26a3a355 	.word	0x26a3a355
    6820:	a31e621e 	.word	0xa31e621e
    6824:	0090393f 	.word	0x0090393f
    6828:	f640 21fe 	movw	r1, #2814	; 0xafe
    682c:	e09e      	b.n	696c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    682e:	2d17      	cmp	r5, #23
    6830:	d075      	beq.n	691e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    6832:	dc08      	bgt.n	6846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fa>
    6834:	f1a5 0512 	sub.w	r5, r5, #18
    6838:	2d05      	cmp	r5, #5
    683a:	d20c      	bcs.n	6856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    683c:	e8df f005 	tbb	[pc, r5]
    6840:	54549090 	.word	0x54549090
    6844:	0038      	.short	0x0038
    6846:	2d23      	cmp	r5, #35	; 0x23
    6848:	d07b      	beq.n	6942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    684a:	2d24      	cmp	r5, #36	; 0x24
    684c:	d079      	beq.n	6942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    684e:	2d25      	cmp	r5, #37	; 0x25
    6850:	d077      	beq.n	6942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    6852:	2dff      	cmp	r5, #255	; 0xff
    6854:	d07c      	beq.n	6950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    6856:	f640 31aa 	movw	r1, #2986	; 0xbaa
    685a:	e087      	b.n	696c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    685c:	6861      	ldr	r1, [r4, #4]
    685e:	9800      	ldr	r0, [sp, #0]
    6860:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
    6864:	e016      	b.n	6894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x848>
    6866:	6860      	ldr	r0, [r4, #4]
    6868:	9900      	ldr	r1, [sp, #0]
    686a:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    686e:	7108      	strb	r0, [r1, #4]
    6870:	e076      	b.n	6960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    6872:	6860      	ldr	r0, [r4, #4]
    6874:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    6878:	9800      	ldr	r0, [sp, #0]
    687a:	f008 fd24 	bl	f2c6 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    687e:	6860      	ldr	r0, [r4, #4]
    6880:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    6884:	9800      	ldr	r0, [sp, #0]
    6886:	f008 fd22 	bl	f2ce <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    688a:	e069      	b.n	6960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    688c:	6861      	ldr	r1, [r4, #4]
    688e:	9800      	ldr	r0, [sp, #0]
    6890:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    6894:	7101      	strb	r1, [r0, #4]
    6896:	e063      	b.n	6960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    6898:	9800      	ldr	r0, [sp, #0]
    689a:	210d      	movs	r1, #13
    689c:	7101      	strb	r1, [r0, #4]
    689e:	2159      	movs	r1, #89	; 0x59
    68a0:	7141      	strb	r1, [r0, #5]
    68a2:	2100      	movs	r1, #0
    68a4:	7181      	strb	r1, [r0, #6]
    68a6:	2177      	movs	r1, #119	; 0x77
    68a8:	71c1      	strb	r1, [r0, #7]
    68aa:	2110      	movs	r1, #16
    68ac:	7201      	strb	r1, [r0, #8]
    68ae:	e057      	b.n	6960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    68b0:	9800      	ldr	r0, [sp, #0]
    68b2:	6861      	ldr	r1, [r4, #4]
    68b4:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    68b8:	7101      	strb	r1, [r0, #4]
    68ba:	6861      	ldr	r1, [r4, #4]
    68bc:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    68c0:	7141      	strb	r1, [r0, #5]
    68c2:	e04d      	b.n	6960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    68c4:	6861      	ldr	r1, [r4, #4]
    68c6:	9800      	ldr	r0, [sp, #0]
    68c8:	f501 7110 	add.w	r1, r1, #576	; 0x240
    68cc:	f008 fcb6 	bl	f23c <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    68d0:	6861      	ldr	r1, [r4, #4]
    68d2:	9800      	ldr	r0, [sp, #0]
    68d4:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    68d8:	f008 fcad 	bl	f236 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    68dc:	e040      	b.n	6960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    68de:	4825      	ldr	r0, [pc, #148]	; (6974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    68e0:	9900      	ldr	r1, [sp, #0]
    68e2:	f7fd fc0b 	bl	40fc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    68e6:	e03b      	b.n	6960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    68e8:	6860      	ldr	r0, [r4, #4]
    68ea:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    68ee:	9800      	ldr	r0, [sp, #0]
    68f0:	f008 fd05 	bl	f2fe <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    68f4:	6860      	ldr	r0, [r4, #4]
    68f6:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    68fa:	9800      	ldr	r0, [sp, #0]
    68fc:	f008 fd03 	bl	f306 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    6900:	6860      	ldr	r0, [r4, #4]
    6902:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    6906:	9800      	ldr	r0, [sp, #0]
    6908:	f008 fd01 	bl	f30e <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    690c:	6860      	ldr	r0, [r4, #4]
    690e:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    6912:	9800      	ldr	r0, [sp, #0]
    6914:	f008 fcff 	bl	f316 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    6918:	e022      	b.n	6960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    691a:	e000      	b.n	691e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    691c:	e011      	b.n	6942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    691e:	6861      	ldr	r1, [r4, #4]
    6920:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    6924:	2801      	cmp	r0, #1
    6926:	9800      	ldr	r0, [sp, #0]
    6928:	d0c4      	beq.n	68b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x868>
    692a:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    692e:	7101      	strb	r1, [r0, #4]
    6930:	6861      	ldr	r1, [r4, #4]
    6932:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    6936:	e7c3      	b.n	68c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x874>
    6938:	e00a      	b.n	6950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    693a:	9800      	ldr	r0, [sp, #0]
    693c:	f7fd fb88 	bl	4050 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    6940:	e00e      	b.n	6960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    6942:	4b0d      	ldr	r3, [pc, #52]	; (6978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92c>)
    6944:	4a0b      	ldr	r2, [pc, #44]	; (6974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    6946:	4628      	mov	r0, r5
    6948:	681b      	ldr	r3, [r3, #0]
    694a:	9900      	ldr	r1, [sp, #0]
    694c:	4798      	blx	r3
    694e:	e007      	b.n	6960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    6950:	6860      	ldr	r0, [r4, #4]
    6952:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    6956:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    695a:	9800      	ldr	r0, [sp, #0]
    695c:	f008 fcb9 	bl	f2d2 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    6960:	f7fb ff2a 	bl	27b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    6964:	2800      	cmp	r0, #0
    6966:	d104      	bne.n	6972 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    6968:	f640 31ae 	movw	r1, #2990	; 0xbae
    696c:	2031      	movs	r0, #49	; 0x31
    696e:	f7fb f81f 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6972:	bd38      	pop	{r3, r4, r5, pc}
    6974:	20000124 	.word	0x20000124
    6978:	20000284 	.word	0x20000284
    697c:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6980:	4e8c      	ldr	r6, [pc, #560]	; (6bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>)
    6982:	468a      	mov	sl, r1
    6984:	6870      	ldr	r0, [r6, #4]
    6986:	8800      	ldrh	r0, [r0, #0]
    6988:	f7fb fcea 	bl	2360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    698c:	0007      	movs	r7, r0
    698e:	d00c      	beq.n	69aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    6990:	f1a6 0510 	sub.w	r5, r6, #16
    6994:	f04f 0400 	mov.w	r4, #0
    6998:	8868      	ldrh	r0, [r5, #2]
    699a:	05c0      	lsls	r0, r0, #23
    699c:	d50a      	bpl.n	69b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
    699e:	6870      	ldr	r0, [r6, #4]
    69a0:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    69a4:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    69a8:	e009      	b.n	69be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    69aa:	f640 6189 	movw	r1, #3721	; 0xe89
    69ae:	2031      	movs	r0, #49	; 0x31
    69b0:	f7fa fffe 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69b4:	6871      	ldr	r1, [r6, #4]
    69b6:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    69ba:	1c40      	adds	r0, r0, #1
    69bc:	8008      	strh	r0, [r1, #0]
    69be:	f000 ff5b 	bl	7878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    69c2:	f04f 0901 	mov.w	r9, #1
    69c6:	b340      	cbz	r0, 6a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    69c8:	8868      	ldrh	r0, [r5, #2]
    69ca:	0500      	lsls	r0, r0, #20
    69cc:	d506      	bpl.n	69dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    69ce:	6870      	ldr	r0, [r6, #4]
    69d0:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    69d4:	b111      	cbz	r1, 69dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    69d6:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    69da:	e01e      	b.n	6a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    69dc:	6870      	ldr	r0, [r6, #4]
    69de:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    69e2:	1c49      	adds	r1, r1, #1
    69e4:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    69e8:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    69ec:	428a      	cmp	r2, r1
    69ee:	d301      	bcc.n	69f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a8>
    69f0:	1a53      	subs	r3, r2, r1
    69f2:	e000      	b.n	69f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9aa>
    69f4:	2300      	movs	r3, #0
    69f6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    69fa:	f10c 0c05 	add.w	ip, ip, #5
    69fe:	4563      	cmp	r3, ip
    6a00:	d801      	bhi.n	6a06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ba>
    6a02:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    6a06:	4291      	cmp	r1, r2
    6a08:	d307      	bcc.n	6a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    6a0a:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    6a0e:	2202      	movs	r2, #2
    6a10:	4969      	ldr	r1, [pc, #420]	; (6bb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>)
    6a12:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    6a16:	f008 fd05 	bl	f424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    6a1a:	8868      	ldrh	r0, [r5, #2]
    6a1c:	f04f 0b02 	mov.w	fp, #2
    6a20:	f410 7f40 	tst.w	r0, #768	; 0x300
    6a24:	d00e      	beq.n	6a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    6a26:	6870      	ldr	r0, [r6, #4]
    6a28:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    6a2c:	b111      	cbz	r1, 6a34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e8>
    6a2e:	2903      	cmp	r1, #3
    6a30:	d108      	bne.n	6a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    6a32:	e002      	b.n	6a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ee>
    6a34:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    6a38:	e001      	b.n	6a3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f2>
    6a3a:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    6a3e:	2101      	movs	r1, #1
    6a40:	f7fe fdac 	bl	559c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6a44:	6870      	ldr	r0, [r6, #4]
    6a46:	46b0      	mov	r8, r6
    6a48:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    6a4c:	2901      	cmp	r1, #1
    6a4e:	d104      	bne.n	6a5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    6a50:	8869      	ldrh	r1, [r5, #2]
    6a52:	0549      	lsls	r1, r1, #21
    6a54:	d501      	bpl.n	6a5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    6a56:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    6a5a:	9900      	ldr	r1, [sp, #0]
    6a5c:	2900      	cmp	r1, #0
    6a5e:	d179      	bne.n	6b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb08>
    6a60:	78a9      	ldrb	r1, [r5, #2]
    6a62:	0649      	lsls	r1, r1, #25
    6a64:	d502      	bpl.n	6a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
    6a66:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    6a6a:	e004      	b.n	6a76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
    6a6c:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    6a70:	1c49      	adds	r1, r1, #1
    6a72:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    6a76:	4650      	mov	r0, sl
    6a78:	f7ff fdae 	bl	65d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x58c>
    6a7c:	ea40 000a 	orr.w	r0, r0, sl
    6a80:	4682      	mov	sl, r0
    6a82:	f7ff fd41 	bl	6508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    6a86:	f8d8 6004 	ldr.w	r6, [r8, #4]
    6a8a:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    6a8e:	1c40      	adds	r0, r0, #1
    6a90:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    6a94:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    6a98:	b128      	cbz	r0, 6aa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    6a9a:	f7fc f857 	bl	2b4c <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>
    6a9e:	b1b0      	cbz	r0, 6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    6aa0:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    6aa4:	e013      	b.n	6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    6aa6:	f7fb ff2f 	bl	2908 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>
    6aaa:	b108      	cbz	r0, 6ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    6aac:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    6ab0:	f7fb ff24 	bl	28fc <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>
    6ab4:	b158      	cbz	r0, 6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    6ab6:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    6aba:	1c40      	adds	r0, r0, #1
    6abc:	b2c0      	uxtb	r0, r0
    6abe:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    6ac2:	2802      	cmp	r0, #2
    6ac4:	d903      	bls.n	6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    6ac6:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    6aca:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    6ace:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6ad2:	4646      	mov	r6, r8
    6ad4:	2301      	movs	r3, #1
    6ad6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6ada:	2100      	movs	r1, #0
    6adc:	3080      	adds	r0, #128	; 0x80
    6ade:	f008 f8e5 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6ae2:	b920      	cbnz	r0, 6aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa2>
    6ae4:	6870      	ldr	r0, [r6, #4]
    6ae6:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    6aea:	280b      	cmp	r0, #11
    6aec:	d15f      	bne.n	6bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    6aee:	6870      	ldr	r0, [r6, #4]
    6af0:	2301      	movs	r3, #1
    6af2:	2100      	movs	r1, #0
    6af4:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6af8:	3080      	adds	r0, #128	; 0x80
    6afa:	f008 f8d7 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6afe:	b350      	cbz	r0, 6b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    6b00:	6870      	ldr	r0, [r6, #4]
    6b02:	2301      	movs	r3, #1
    6b04:	2100      	movs	r1, #0
    6b06:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6b0a:	3080      	adds	r0, #128	; 0x80
    6b0c:	f008 f8ce 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6b10:	b308      	cbz	r0, 6b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    6b12:	6870      	ldr	r0, [r6, #4]
    6b14:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    6b18:	2902      	cmp	r1, #2
    6b1a:	d148      	bne.n	6bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    6b1c:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    6b20:	b9c8      	cbnz	r0, 6b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    6b22:	4638      	mov	r0, r7
    6b24:	f007 fbd4 	bl	e2d0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6b28:	b1a8      	cbz	r0, 6b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    6b2a:	6870      	ldr	r0, [r6, #4]
    6b2c:	3080      	adds	r0, #128	; 0x80
    6b2e:	f009 fd4b 	bl	105c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    6b32:	b980      	cbnz	r0, 6b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    6b34:	6871      	ldr	r1, [r6, #4]
    6b36:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    6b3a:	2801      	cmp	r0, #1
    6b3c:	d937      	bls.n	6bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    6b3e:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    6b42:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    6b46:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    6b4a:	1e93      	subs	r3, r2, #2
    6b4c:	4298      	cmp	r0, r3
    6b4e:	db03      	blt.n	6b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0c>
    6b50:	2001      	movs	r0, #1
    6b52:	e004      	b.n	6b5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb12>
    6b54:	e01c      	b.n	6b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb44>
    6b56:	e02a      	b.n	6bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    6b58:	1a10      	subs	r0, r2, r0
    6b5a:	1e40      	subs	r0, r0, #1
    6b5c:	b280      	uxth	r0, r0
    6b5e:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    6b62:	88aa      	ldrh	r2, [r5, #4]
    6b64:	4293      	cmp	r3, r2
    6b66:	d301      	bcc.n	6b6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb20>
    6b68:	2201      	movs	r2, #1
    6b6a:	e002      	b.n	6b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb26>
    6b6c:	1ad2      	subs	r2, r2, r3
    6b6e:	1c52      	adds	r2, r2, #1
    6b70:	b292      	uxth	r2, r2
    6b72:	4290      	cmp	r0, r2
    6b74:	d900      	bls.n	6b78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2c>
    6b76:	4610      	mov	r0, r2
    6b78:	2801      	cmp	r0, #1
    6b7a:	d101      	bne.n	6b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb34>
    6b7c:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    6b80:	6871      	ldr	r1, [r6, #4]
    6b82:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    6b86:	4410      	add	r0, r2
    6b88:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    6b8c:	f000 ff8e 	bl	7aac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    6b90:	78a8      	ldrb	r0, [r5, #2]
    6b92:	4652      	mov	r2, sl
    6b94:	f3c0 1180 	ubfx	r1, r0, #6, #1
    6b98:	9800      	ldr	r0, [sp, #0]
    6b9a:	f000 fe81 	bl	78a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
    6b9e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6ba2:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    6ba6:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6baa:	f7fb bdef 	b.w	278c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6bae:	2001      	movs	r0, #1
    6bb0:	6871      	ldr	r1, [r6, #4]
    6bb2:	e7e3      	b.n	6b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb30>
    6bb4:	20000124 	.word	0x20000124
    6bb8:	0000f907 	.word	0x0000f907
    6bbc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6bbe:	4c68      	ldr	r4, [pc, #416]	; (6d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>)
    6bc0:	2301      	movs	r3, #1
    6bc2:	2100      	movs	r1, #0
    6bc4:	6860      	ldr	r0, [r4, #4]
    6bc6:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6bca:	3080      	adds	r0, #128	; 0x80
    6bcc:	f008 f86e 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6bd0:	2800      	cmp	r0, #0
    6bd2:	d07a      	beq.n	6cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc7e>
    6bd4:	6860      	ldr	r0, [r4, #4]
    6bd6:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    6bda:	2500      	movs	r5, #0
    6bdc:	b139      	cbz	r1, 6bee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    6bde:	2100      	movs	r1, #0
    6be0:	200e      	movs	r0, #14
    6be2:	f000 f8bf 	bl	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    6be6:	6860      	ldr	r0, [r4, #4]
    6be8:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    6bec:	e0b5      	b.n	6d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    6bee:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    6bf2:	b119      	cbz	r1, 6bfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb0>
    6bf4:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    6bf8:	0789      	lsls	r1, r1, #30
    6bfa:	d016      	beq.n	6c2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbde>
    6bfc:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6c00:	f88d 1004 	strb.w	r1, [sp, #4]
    6c04:	9901      	ldr	r1, [sp, #4]
    6c06:	9101      	str	r1, [sp, #4]
    6c08:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6c0c:	b141      	cbz	r1, 6c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd4>
    6c0e:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    6c12:	f88d 1000 	strb.w	r1, [sp]
    6c16:	9900      	ldr	r1, [sp, #0]
    6c18:	9100      	str	r1, [sp, #0]
    6c1a:	f89d 1000 	ldrb.w	r1, [sp]
    6c1e:	b189      	cbz	r1, 6c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf8>
    6c20:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6c24:	2901      	cmp	r1, #1
    6c26:	d030      	beq.n	6c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    6c28:	e040      	b.n	6cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    6c2a:	2100      	movs	r1, #0
    6c2c:	200c      	movs	r0, #12
    6c2e:	f000 f899 	bl	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    6c32:	6860      	ldr	r0, [r4, #4]
    6c34:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    6c38:	f041 0101 	orr.w	r1, r1, #1
    6c3c:	7001      	strb	r1, [r0, #0]
    6c3e:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    6c42:	e08a      	b.n	6d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    6c44:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6c48:	2925      	cmp	r1, #37	; 0x25
    6c4a:	d01c      	beq.n	6c86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    6c4c:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    6c50:	2925      	cmp	r1, #37	; 0x25
    6c52:	d018      	beq.n	6c86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    6c54:	f05f 0300 	movs.w	r3, #0
    6c58:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    6c5c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    6c60:	f008 fbf6 	bl	f450 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    6c64:	6860      	ldr	r0, [r4, #4]
    6c66:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    6c6a:	2100      	movs	r1, #0
    6c6c:	2014      	movs	r0, #20
    6c6e:	f000 f879 	bl	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    6c72:	6861      	ldr	r1, [r4, #4]
    6c74:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    6c78:	8bc2      	ldrh	r2, [r0, #30]
    6c7a:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    6c7e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    6c80:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    6c84:	e069      	b.n	6d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    6c86:	2301      	movs	r3, #1
    6c88:	e7e6      	b.n	6c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc0c>
    6c8a:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    6c8e:	f88d 1000 	strb.w	r1, [sp]
    6c92:	9900      	ldr	r1, [sp, #0]
    6c94:	9100      	str	r1, [sp, #0]
    6c96:	f89d 1000 	ldrb.w	r1, [sp]
    6c9a:	b939      	cbnz	r1, 6cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    6c9c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6ca0:	2301      	movs	r3, #1
    6ca2:	210b      	movs	r1, #11
    6ca4:	3080      	adds	r0, #128	; 0x80
    6ca6:	f008 f801 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6caa:	b178      	cbz	r0, 6ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    6cac:	6860      	ldr	r0, [r4, #4]
    6cae:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    6cb2:	f88d 1000 	strb.w	r1, [sp]
    6cb6:	9900      	ldr	r1, [sp, #0]
    6cb8:	9100      	str	r1, [sp, #0]
    6cba:	f89d 1000 	ldrb.w	r1, [sp]
    6cbe:	b3b9      	cbz	r1, 6d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    6cc0:	2100      	movs	r1, #0
    6cc2:	2023      	movs	r0, #35	; 0x23
    6cc4:	f000 f84e 	bl	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    6cc8:	e047      	b.n	6d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    6cca:	e030      	b.n	6d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    6ccc:	6860      	ldr	r0, [r4, #4]
    6cce:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    6cd2:	f009 fc81 	bl	105d8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    6cd6:	4605      	mov	r5, r0
    6cd8:	6860      	ldr	r0, [r4, #4]
    6cda:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    6cde:	f009 fc7b 	bl	105d8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    6ce2:	4606      	mov	r6, r0
    6ce4:	6860      	ldr	r0, [r4, #4]
    6ce6:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    6cea:	4628      	mov	r0, r5
    6cec:	f009 fc7f 	bl	105ee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    6cf0:	b150      	cbz	r0, 6d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    6cf2:	6860      	ldr	r0, [r4, #4]
    6cf4:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    6cf8:	4630      	mov	r0, r6
    6cfa:	f009 fc78 	bl	105ee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    6cfe:	b118      	cbz	r0, 6d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    6d00:	2000      	movs	r0, #0
    6d02:	f000 f943 	bl	6f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6d06:	e011      	b.n	6d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    6d08:	6860      	ldr	r0, [r4, #4]
    6d0a:	2301      	movs	r3, #1
    6d0c:	2103      	movs	r1, #3
    6d0e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6d12:	3080      	adds	r0, #128	; 0x80
    6d14:	f007 ffca 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6d18:	b940      	cbnz	r0, 6d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    6d1a:	6860      	ldr	r0, [r4, #4]
    6d1c:	2301      	movs	r3, #1
    6d1e:	2102      	movs	r1, #2
    6d20:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6d24:	3080      	adds	r0, #128	; 0x80
    6d26:	f007 ffc1 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6d2a:	b110      	cbz	r0, 6d32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce6>
    6d2c:	2000      	movs	r0, #0
    6d2e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6d30:	e002      	b.n	6d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcec>
    6d32:	2100      	movs	r1, #0
    6d34:	2016      	movs	r0, #22
    6d36:	e7c5      	b.n	6cc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc78>
    6d38:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    6d3c:	f88d 0000 	strb.w	r0, [sp]
    6d40:	9800      	ldr	r0, [sp, #0]
    6d42:	9000      	str	r0, [sp, #0]
    6d44:	f89d 0000 	ldrb.w	r0, [sp]
    6d48:	2800      	cmp	r0, #0
    6d4a:	d0f0      	beq.n	6d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    6d4c:	2100      	movs	r1, #0
    6d4e:	2025      	movs	r0, #37	; 0x25
    6d50:	f000 f808 	bl	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    6d54:	6860      	ldr	r0, [r4, #4]
    6d56:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    6d5a:	2001      	movs	r0, #1
    6d5c:	e7e7      	b.n	6d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    6d5e:	0000      	.short	0x0000
    6d60:	20000124 	.word	0x20000124
    6d64:	b570      	push	{r4, r5, r6, lr}
    6d66:	4c0d      	ldr	r4, [pc, #52]	; (6d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd50>)
    6d68:	4606      	mov	r6, r0
    6d6a:	460d      	mov	r5, r1
    6d6c:	6860      	ldr	r0, [r4, #4]
    6d6e:	3080      	adds	r0, #128	; 0x80
    6d70:	f009 fc2a 	bl	105c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    6d74:	b120      	cbz	r0, 6d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    6d76:	f640 31b3 	movw	r1, #2995	; 0xbb3
    6d7a:	2031      	movs	r0, #49	; 0x31
    6d7c:	f7fa fe18 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d80:	6862      	ldr	r2, [r4, #4]
    6d82:	2000      	movs	r0, #0
    6d84:	2d01      	cmp	r5, #1
    6d86:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    6d8a:	d004      	beq.n	6d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4a>
    6d8c:	f822 0fd2 	strh.w	r0, [r2, #210]!
    6d90:	2001      	movs	r0, #1
    6d92:	7110      	strb	r0, [r2, #4]
    6d94:	bd70      	pop	{r4, r5, r6, pc}
    6d96:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    6d9a:	bd70      	pop	{r4, r5, r6, pc}
    6d9c:	20000124 	.word	0x20000124
    6da0:	b538      	push	{r3, r4, r5, lr}
    6da2:	4c1f      	ldr	r4, [pc, #124]	; (6e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    6da4:	2500      	movs	r5, #0
    6da6:	6860      	ldr	r0, [r4, #4]
    6da8:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    6dac:	2901      	cmp	r1, #1
    6dae:	d00a      	beq.n	6dc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7a>
    6db0:	2902      	cmp	r1, #2
    6db2:	d133      	bne.n	6e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    6db4:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    6db8:	b1d9      	cbz	r1, 6df2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda6>
    6dba:	2106      	movs	r1, #6
    6dbc:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    6dc0:	2101      	movs	r1, #1
    6dc2:	2002      	movs	r0, #2
    6dc4:	e025      	b.n	6e12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    6dc6:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    6dca:	f88d 1000 	strb.w	r1, [sp]
    6dce:	9900      	ldr	r1, [sp, #0]
    6dd0:	9100      	str	r1, [sp, #0]
    6dd2:	f89d 1000 	ldrb.w	r1, [sp]
    6dd6:	2900      	cmp	r1, #0
    6dd8:	d120      	bne.n	6e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    6dda:	f500 7384 	add.w	r3, r0, #264	; 0x108
    6dde:	f500 710e 	add.w	r1, r0, #568	; 0x238
    6de2:	2200      	movs	r2, #0
    6de4:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    6de8:	f007 ff2b 	bl	ec42 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    6dec:	2101      	movs	r1, #1
    6dee:	2005      	movs	r0, #5
    6df0:	e00f      	b.n	6e12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    6df2:	2103      	movs	r1, #3
    6df4:	2206      	movs	r2, #6
    6df6:	480a      	ldr	r0, [pc, #40]	; (6e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    6df8:	f008 fc4f 	bl	f69a <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>
    6dfc:	6860      	ldr	r0, [r4, #4]
    6dfe:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    6e02:	0880      	lsrs	r0, r0, #2
    6e04:	f010 0f01 	tst.w	r0, #1
    6e08:	d001      	beq.n	6e0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    6e0a:	2011      	movs	r0, #17
    6e0c:	e000      	b.n	6e10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    6e0e:	200d      	movs	r0, #13
    6e10:	2101      	movs	r1, #1
    6e12:	f7ff ffa7 	bl	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    6e16:	6860      	ldr	r0, [r4, #4]
    6e18:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    6e1c:	bd38      	pop	{r3, r4, r5, pc}
    6e1e:	0000      	.short	0x0000
    6e20:	20000124 	.word	0x20000124
    6e24:	b570      	push	{r4, r5, r6, lr}
    6e26:	4b2b      	ldr	r3, [pc, #172]	; (6ed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    6e28:	4602      	mov	r2, r0
    6e2a:	8858      	ldrh	r0, [r3, #2]
    6e2c:	4310      	orrs	r0, r2
    6e2e:	8058      	strh	r0, [r3, #2]
    6e30:	f103 0010 	add.w	r0, r3, #16
    6e34:	2a40      	cmp	r2, #64	; 0x40
    6e36:	6840      	ldr	r0, [r0, #4]
    6e38:	d00d      	beq.n	6e56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    6e3a:	0796      	lsls	r6, r2, #30
    6e3c:	f04f 0500 	mov.w	r5, #0
    6e40:	f04f 0401 	mov.w	r4, #1
    6e44:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    6e48:	d50c      	bpl.n	6e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    6e4a:	b14e      	cbz	r6, 6e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe14>
    6e4c:	f640 51f6 	movw	r1, #3574	; 0xdf6
    6e50:	2031      	movs	r0, #49	; 0x31
    6e52:	f7fa fdad 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e5a:	2104      	movs	r1, #4
    6e5c:	f7fe bb9e 	b.w	559c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6e60:	6099      	str	r1, [r3, #8]
    6e62:	e01c      	b.n	6e9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    6e64:	b1c6      	cbz	r6, 6e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    6e66:	60d9      	str	r1, [r3, #12]
    6e68:	78c9      	ldrb	r1, [r1, #3]
    6e6a:	2906      	cmp	r1, #6
    6e6c:	d002      	beq.n	6e74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>
    6e6e:	290b      	cmp	r1, #11
    6e70:	d112      	bne.n	6e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    6e72:	e009      	b.n	6e88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3c>
    6e74:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6e78:	2918      	cmp	r1, #24
    6e7a:	d10d      	bne.n	6e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    6e7c:	2100      	movs	r1, #0
    6e7e:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    6e82:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    6e86:	e007      	b.n	6e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    6e88:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6e8c:	2912      	cmp	r1, #18
    6e8e:	d103      	bne.n	6e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    6e90:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    6e94:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    6e98:	0791      	lsls	r1, r2, #30
    6e9a:	d516      	bpl.n	6eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6e9c:	6899      	ldr	r1, [r3, #8]
    6e9e:	78c9      	ldrb	r1, [r1, #3]
    6ea0:	2905      	cmp	r1, #5
    6ea2:	d002      	beq.n	6eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    6ea4:	290b      	cmp	r1, #11
    6ea6:	d110      	bne.n	6eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6ea8:	e009      	b.n	6ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe72>
    6eaa:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6eae:	2916      	cmp	r1, #22
    6eb0:	d10b      	bne.n	6eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6eb2:	2100      	movs	r1, #0
    6eb4:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    6eb8:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    6ebc:	e005      	b.n	6eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6ebe:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6ec2:	2911      	cmp	r1, #17
    6ec4:	d101      	bne.n	6eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6ec6:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    6eca:	0690      	lsls	r0, r2, #26
    6ecc:	d501      	bpl.n	6ed2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    6ece:	2008      	movs	r0, #8
    6ed0:	7058      	strb	r0, [r3, #1]
    6ed2:	bd70      	pop	{r4, r5, r6, pc}
    6ed4:	20000114 	.word	0x20000114
    6ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6edc:	4c29      	ldr	r4, [pc, #164]	; (6f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>)
    6ede:	2501      	movs	r5, #1
    6ee0:	6862      	ldr	r2, [r4, #4]
    6ee2:	f892 12ce 	ldrb.w	r1, [r2, #718]	; 0x2ce
    6ee6:	b109      	cbz	r1, 6eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6ee8:	2701      	movs	r7, #1
    6eea:	e000      	b.n	6eee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    6eec:	2700      	movs	r7, #0
    6eee:	f892 02cf 	ldrb.w	r0, [r2, #719]	; 0x2cf
    6ef2:	b108      	cbz	r0, 6ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    6ef4:	2601      	movs	r6, #1
    6ef6:	e000      	b.n	6efa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    6ef8:	2600      	movs	r6, #0
    6efa:	b90f      	cbnz	r7, 6f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    6efc:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    6f00:	b90e      	cbnz	r6, 6f06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    6f02:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    6f06:	f102 0362 	add.w	r3, r2, #98	; 0x62
    6f0a:	7219      	strb	r1, [r3, #8]
    6f0c:	7258      	strb	r0, [r3, #9]
    6f0e:	20ff      	movs	r0, #255	; 0xff
    6f10:	7298      	strb	r0, [r3, #10]
    6f12:	481d      	ldr	r0, [pc, #116]	; (6f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3c>)
    6f14:	6803      	ldr	r3, [r0, #0]
    6f16:	b10b      	cbz	r3, 6f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed0>
    6f18:	4610      	mov	r0, r2
    6f1a:	4798      	blx	r3
    6f1c:	6860      	ldr	r0, [r4, #4]
    6f1e:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    6f22:	2801      	cmp	r0, #1
    6f24:	d001      	beq.n	6f2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    6f26:	b907      	cbnz	r7, 6f2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    6f28:	b116      	cbz	r6, 6f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee4>
    6f2a:	2000      	movs	r0, #0
    6f2c:	f000 f82e 	bl	6f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6f30:	6860      	ldr	r0, [r4, #4]
    6f32:	302c      	adds	r0, #44	; 0x2c
    6f34:	f008 faf9 	bl	f52a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    6f38:	4606      	mov	r6, r0
    6f3a:	6860      	ldr	r0, [r4, #4]
    6f3c:	f008 faa3 	bl	f486 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6f40:	b130      	cbz	r0, 6f50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf04>
    6f42:	6861      	ldr	r1, [r4, #4]
    6f44:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    6f48:	f831 0b2c 	ldrh.w	r0, [r1], #44
    6f4c:	f7fc ff50 	bl	3df0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    6f50:	2105      	movs	r1, #5
    6f52:	6860      	ldr	r0, [r4, #4]
    6f54:	f7fe fb22 	bl	559c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6f58:	6860      	ldr	r0, [r4, #4]
    6f5a:	302c      	adds	r0, #44	; 0x2c
    6f5c:	f008 fae5 	bl	f52a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    6f60:	4604      	mov	r4, r0
    6f62:	42a6      	cmp	r6, r4
    6f64:	d20a      	bcs.n	6f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    6f66:	f003 ff67 	bl	ae38 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    6f6a:	4601      	mov	r1, r0
    6f6c:	1ba0      	subs	r0, r4, r6
    6f6e:	2867      	cmp	r0, #103	; 0x67
    6f70:	d200      	bcs.n	6f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    6f72:	2067      	movs	r0, #103	; 0x67
    6f74:	f003 fe26 	bl	abc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    6f78:	b100      	cbz	r0, 6f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    6f7a:	2500      	movs	r5, #0
    6f7c:	4628      	mov	r0, r5
    6f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f82:	0000      	.short	0x0000
    6f84:	20000124 	.word	0x20000124
    6f88:	2000028c 	.word	0x2000028c
    6f8c:	4601      	mov	r1, r0
    6f8e:	4801      	ldr	r0, [pc, #4]	; (6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf48>)
    6f90:	f001 ba96 	b.w	84c0 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>
    6f94:	20000124 	.word	0x20000124
    6f98:	b570      	push	{r4, r5, r6, lr}
    6f9a:	4d0f      	ldr	r5, [pc, #60]	; (6fd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    6f9c:	686c      	ldr	r4, [r5, #4]
    6f9e:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    6fa2:	2921      	cmp	r1, #33	; 0x21
    6fa4:	d002      	beq.n	6fac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    6fa6:	292e      	cmp	r1, #46	; 0x2e
    6fa8:	d003      	beq.n	6fb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf66>
    6faa:	e011      	b.n	6fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    6fac:	f7ff ffee 	bl	6f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6fb0:	e008      	b.n	6fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf78>
    6fb2:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    6fb6:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6fba:	2301      	movs	r3, #1
    6fbc:	210b      	movs	r1, #11
    6fbe:	f007 fe75 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6fc2:	b138      	cbz	r0, 6fd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf88>
    6fc4:	6869      	ldr	r1, [r5, #4]
    6fc6:	2000      	movs	r0, #0
    6fc8:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6fcc:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    6fd0:	2000      	movs	r0, #0
    6fd2:	bd70      	pop	{r4, r5, r6, pc}
    6fd4:	202a      	movs	r0, #42	; 0x2a
    6fd6:	e7e9      	b.n	6fac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    6fd8:	20000124 	.word	0x20000124
    6fdc:	b570      	push	{r4, r5, r6, lr}
    6fde:	4604      	mov	r4, r0
    6fe0:	6840      	ldr	r0, [r0, #4]
    6fe2:	2301      	movs	r3, #1
    6fe4:	2100      	movs	r1, #0
    6fe6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6fea:	3080      	adds	r0, #128	; 0x80
    6fec:	f007 fe5e 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6ff0:	b1b8      	cbz	r0, 7022 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd6>
    6ff2:	4d13      	ldr	r5, [pc, #76]	; (7040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff4>)
    6ff4:	68e8      	ldr	r0, [r5, #12]
    6ff6:	f008 f8cc 	bl	f192 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    6ffa:	6861      	ldr	r1, [r4, #4]
    6ffc:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    7000:	6861      	ldr	r1, [r4, #4]
    7002:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    7006:	f009 fb00 	bl	1060a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    700a:	b160      	cbz	r0, 7026 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfda>
    700c:	6861      	ldr	r1, [r4, #4]
    700e:	2028      	movs	r0, #40	; 0x28
    7010:	2202      	movs	r2, #2
    7012:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    7016:	6860      	ldr	r0, [r4, #4]
    7018:	490a      	ldr	r1, [pc, #40]	; (7044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff8>)
    701a:	30b4      	adds	r0, #180	; 0xb4
    701c:	f008 f9ee 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    7020:	e00b      	b.n	703a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfee>
    7022:	2001      	movs	r0, #1
    7024:	bd70      	pop	{r4, r5, r6, pc}
    7026:	6861      	ldr	r1, [r4, #4]
    7028:	68e8      	ldr	r0, [r5, #12]
    702a:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    702e:	f008 f8ab 	bl	f188 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    7032:	6861      	ldr	r1, [r4, #4]
    7034:	200a      	movs	r0, #10
    7036:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    703a:	2000      	movs	r0, #0
    703c:	bd70      	pop	{r4, r5, r6, pc}
    703e:	0000      	.short	0x0000
    7040:	20000114 	.word	0x20000114
    7044:	0000f6b9 	.word	0x0000f6b9
    7048:	b570      	push	{r4, r5, r6, lr}
    704a:	4604      	mov	r4, r0
    704c:	6840      	ldr	r0, [r0, #4]
    704e:	2301      	movs	r3, #1
    7050:	2100      	movs	r1, #0
    7052:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    7056:	3080      	adds	r0, #128	; 0x80
    7058:	f007 fe28 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    705c:	b1e0      	cbz	r0, 7098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x104c>
    705e:	4d28      	ldr	r5, [pc, #160]	; (7100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b4>)
    7060:	2100      	movs	r1, #0
    7062:	68e8      	ldr	r0, [r5, #12]
    7064:	f008 f898 	bl	f198 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    7068:	b1c0      	cbz	r0, 709c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    706a:	68e8      	ldr	r0, [r5, #12]
    706c:	6861      	ldr	r1, [r4, #4]
    706e:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    7072:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    7076:	6861      	ldr	r1, [r4, #4]
    7078:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    707c:	f009 fac5 	bl	1060a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    7080:	b188      	cbz	r0, 70a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x105a>
    7082:	6861      	ldr	r1, [r4, #4]
    7084:	2028      	movs	r0, #40	; 0x28
    7086:	2202      	movs	r2, #2
    7088:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    708c:	6860      	ldr	r0, [r4, #4]
    708e:	491d      	ldr	r1, [pc, #116]	; (7104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>)
    7090:	30b4      	adds	r0, #180	; 0xb4
    7092:	f008 f9b3 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    7096:	e030      	b.n	70fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ae>
    7098:	2001      	movs	r0, #1
    709a:	bd70      	pop	{r4, r5, r6, pc}
    709c:	4620      	mov	r0, r4
    709e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    70a2:	f000 b88d 	b.w	71c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    70a6:	68e8      	ldr	r0, [r5, #12]
    70a8:	f008 f8a0 	bl	f1ec <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    70ac:	f007 fdf4 	bl	ec98 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    70b0:	4606      	mov	r6, r0
    70b2:	6860      	ldr	r0, [r4, #4]
    70b4:	4631      	mov	r1, r6
    70b6:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    70ba:	68e8      	ldr	r0, [r5, #12]
    70bc:	7900      	ldrb	r0, [r0, #4]
    70be:	f007 ff58 	bl	ef72 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    70c2:	6861      	ldr	r1, [r4, #4]
    70c4:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    70c8:	68e8      	ldr	r0, [r5, #12]
    70ca:	4631      	mov	r1, r6
    70cc:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    70d0:	f007 ff4b 	bl	ef6a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    70d4:	6861      	ldr	r1, [r4, #4]
    70d6:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    70da:	68e8      	ldr	r0, [r5, #12]
    70dc:	f008 f889 	bl	f1f2 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    70e0:	6861      	ldr	r1, [r4, #4]
    70e2:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    70e6:	68e8      	ldr	r0, [r5, #12]
    70e8:	f008 f886 	bl	f1f8 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    70ec:	6861      	ldr	r1, [r4, #4]
    70ee:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    70f2:	6861      	ldr	r1, [r4, #4]
    70f4:	200d      	movs	r0, #13
    70f6:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    70fa:	2000      	movs	r0, #0
    70fc:	bd70      	pop	{r4, r5, r6, pc}
    70fe:	0000      	.short	0x0000
    7100:	20000114 	.word	0x20000114
    7104:	0000f6b9 	.word	0x0000f6b9
    7108:	b570      	push	{r4, r5, r6, lr}
    710a:	4604      	mov	r4, r0
    710c:	6840      	ldr	r0, [r0, #4]
    710e:	2301      	movs	r3, #1
    7110:	2100      	movs	r1, #0
    7112:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    7116:	3080      	adds	r0, #128	; 0x80
    7118:	f007 fdc8 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    711c:	b970      	cbnz	r0, 713c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    711e:	6860      	ldr	r0, [r4, #4]
    7120:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    7124:	2a13      	cmp	r2, #19
    7126:	d009      	beq.n	713c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    7128:	2301      	movs	r3, #1
    712a:	2105      	movs	r1, #5
    712c:	3080      	adds	r0, #128	; 0x80
    712e:	f007 fdbd 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7132:	b108      	cbz	r0, 7138 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    7134:	2008      	movs	r0, #8
    7136:	bd70      	pop	{r4, r5, r6, pc}
    7138:	2001      	movs	r0, #1
    713a:	bd70      	pop	{r4, r5, r6, pc}
    713c:	6860      	ldr	r0, [r4, #4]
    713e:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    7142:	b910      	cbnz	r0, 714a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fe>
    7144:	4816      	ldr	r0, [pc, #88]	; (71a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    7146:	f008 fa92 	bl	f66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    714a:	4d15      	ldr	r5, [pc, #84]	; (71a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    714c:	6861      	ldr	r1, [r4, #4]
    714e:	3d10      	subs	r5, #16
    7150:	f501 710e 	add.w	r1, r1, #568	; 0x238
    7154:	68e8      	ldr	r0, [r5, #12]
    7156:	f008 f868 	bl	f22a <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    715a:	6861      	ldr	r1, [r4, #4]
    715c:	68e8      	ldr	r0, [r5, #12]
    715e:	f501 718c 	add.w	r1, r1, #280	; 0x118
    7162:	f008 f859 	bl	f218 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    7166:	6860      	ldr	r0, [r4, #4]
    7168:	8801      	ldrh	r1, [r0, #0]
    716a:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    716e:	6861      	ldr	r1, [r4, #4]
    7170:	68e8      	ldr	r0, [r5, #12]
    7172:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    7176:	f008 f853 	bl	f220 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    717a:	6861      	ldr	r1, [r4, #4]
    717c:	68e8      	ldr	r0, [r5, #12]
    717e:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    7182:	f008 f846 	bl	f212 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    7186:	6860      	ldr	r0, [r4, #4]
    7188:	2202      	movs	r2, #2
    718a:	4906      	ldr	r1, [pc, #24]	; (71a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1158>)
    718c:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    7190:	f008 f934 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    7194:	6861      	ldr	r1, [r4, #4]
    7196:	2015      	movs	r0, #21
    7198:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    719c:	2000      	movs	r0, #0
    719e:	bd70      	pop	{r4, r5, r6, pc}
    71a0:	20000124 	.word	0x20000124
    71a4:	0000f85d 	.word	0x0000f85d
    71a8:	4901      	ldr	r1, [pc, #4]	; (71b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1164>)
    71aa:	68c9      	ldr	r1, [r1, #12]
    71ac:	f7fc bf28 	b.w	4000 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    71b0:	20000114 	.word	0x20000114
    71b4:	4901      	ldr	r1, [pc, #4]	; (71bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1170>)
    71b6:	68c9      	ldr	r1, [r1, #12]
    71b8:	f7fc bf58 	b.w	406c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    71bc:	20000114 	.word	0x20000114
    71c0:	b510      	push	{r4, lr}
    71c2:	6842      	ldr	r2, [r0, #4]
    71c4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    71c8:	070b      	lsls	r3, r1, #28
    71ca:	d501      	bpl.n	71d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    71cc:	2001      	movs	r0, #1
    71ce:	bd10      	pop	{r4, pc}
    71d0:	f041 0108 	orr.w	r1, r1, #8
    71d4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    71d8:	4905      	ldr	r1, [pc, #20]	; (71f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    71da:	6840      	ldr	r0, [r0, #4]
    71dc:	68c9      	ldr	r1, [r1, #12]
    71de:	78c9      	ldrb	r1, [r1, #3]
    71e0:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    71e4:	4802      	ldr	r0, [pc, #8]	; (71f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    71e6:	3010      	adds	r0, #16
    71e8:	f008 fa41 	bl	f66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    71ec:	2000      	movs	r0, #0
    71ee:	bd10      	pop	{r4, pc}
    71f0:	20000114 	.word	0x20000114
    71f4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    71f8:	4605      	mov	r5, r0
    71fa:	6840      	ldr	r0, [r0, #4]
    71fc:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    7200:	f010 0f30 	tst.w	r0, #48	; 0x30
    7204:	d002      	beq.n	720c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    7206:	2001      	movs	r0, #1
    7208:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    720c:	4c32      	ldr	r4, [pc, #200]	; (72d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    720e:	68e0      	ldr	r0, [r4, #12]
    7210:	f008 f825 	bl	f25e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    7214:	b330      	cbz	r0, 7264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    7216:	68e0      	ldr	r0, [r4, #12]
    7218:	f008 f81b 	bl	f252 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    721c:	4680      	mov	r8, r0
    721e:	68e0      	ldr	r0, [r4, #12]
    7220:	f008 f81b 	bl	f25a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    7224:	4607      	mov	r7, r0
    7226:	68e0      	ldr	r0, [r4, #12]
    7228:	f008 f811 	bl	f24e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    722c:	4606      	mov	r6, r0
    722e:	68e0      	ldr	r0, [r4, #12]
    7230:	f008 f811 	bl	f256 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    7234:	4601      	mov	r1, r0
    7236:	f8cd 8000 	str.w	r8, [sp]
    723a:	6868      	ldr	r0, [r5, #4]
    723c:	463b      	mov	r3, r7
    723e:	4632      	mov	r2, r6
    7240:	302c      	adds	r0, #44	; 0x2c
    7242:	f008 f97c 	bl	f53e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    7246:	78a0      	ldrb	r0, [r4, #2]
    7248:	0781      	lsls	r1, r0, #30
    724a:	f04f 0001 	mov.w	r0, #1
    724e:	d503      	bpl.n	7258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x120c>
    7250:	68a1      	ldr	r1, [r4, #8]
    7252:	78c9      	ldrb	r1, [r1, #3]
    7254:	2914      	cmp	r1, #20
    7256:	d00a      	beq.n	726e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    7258:	6869      	ldr	r1, [r5, #4]
    725a:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    725e:	291d      	cmp	r1, #29
    7260:	d005      	beq.n	726e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    7262:	e007      	b.n	7274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1228>
    7264:	4628      	mov	r0, r5
    7266:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    726a:	f7ff bfa9 	b.w	71c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    726e:	6869      	ldr	r1, [r5, #4]
    7270:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    7274:	6868      	ldr	r0, [r5, #4]
    7276:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    727a:	2901      	cmp	r1, #1
    727c:	d011      	beq.n	72a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    727e:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    7282:	f88d 1004 	strb.w	r1, [sp, #4]
    7286:	9901      	ldr	r1, [sp, #4]
    7288:	9101      	str	r1, [sp, #4]
    728a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    728e:	b941      	cbnz	r1, 72a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    7290:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    7294:	f88d 1000 	strb.w	r1, [sp]
    7298:	9900      	ldr	r1, [sp, #0]
    729a:	9100      	str	r1, [sp, #0]
    729c:	f89d 1000 	ldrb.w	r1, [sp]
    72a0:	b151      	cbz	r1, 72b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126c>
    72a2:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    72a6:	f041 0110 	orr.w	r1, r1, #16
    72aa:	6001      	str	r1, [r0, #0]
    72ac:	480a      	ldr	r0, [pc, #40]	; (72d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    72ae:	3010      	adds	r0, #16
    72b0:	f008 f9dd 	bl	f66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    72b4:	2000      	movs	r0, #0
    72b6:	e7a7      	b.n	7208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    72b8:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    72bc:	f041 0120 	orr.w	r1, r1, #32
    72c0:	6001      	str	r1, [r0, #0]
    72c2:	4805      	ldr	r0, [pc, #20]	; (72d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    72c4:	3010      	adds	r0, #16
    72c6:	6843      	ldr	r3, [r0, #4]
    72c8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    72cc:	8818      	ldrh	r0, [r3, #0]
    72ce:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    72d2:	f7fc fdb5 	bl	3e40 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    72d6:	e7e9      	b.n	72ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1260>
    72d8:	20000114 	.word	0x20000114
    72dc:	4901      	ldr	r1, [pc, #4]	; (72e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    72de:	68c9      	ldr	r1, [r1, #12]
    72e0:	f008 ba54 	b.w	f78c <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>
    72e4:	20000114 	.word	0x20000114
    72e8:	b510      	push	{r4, lr}
    72ea:	4604      	mov	r4, r0
    72ec:	6840      	ldr	r0, [r0, #4]
    72ee:	2301      	movs	r3, #1
    72f0:	2100      	movs	r1, #0
    72f2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    72f6:	3080      	adds	r0, #128	; 0x80
    72f8:	f007 fcd8 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    72fc:	2800      	cmp	r0, #0
    72fe:	6860      	ldr	r0, [r4, #4]
    7300:	d00c      	beq.n	731c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    7302:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    7306:	2800      	cmp	r0, #0
    7308:	d007      	beq.n	731a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ce>
    730a:	480a      	ldr	r0, [pc, #40]	; (7334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>)
    730c:	f008 f9af 	bl	f66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    7310:	6861      	ldr	r1, [r4, #4]
    7312:	2011      	movs	r0, #17
    7314:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    7318:	2000      	movs	r0, #0
    731a:	bd10      	pop	{r4, pc}
    731c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    7320:	2301      	movs	r3, #1
    7322:	2105      	movs	r1, #5
    7324:	3080      	adds	r0, #128	; 0x80
    7326:	f007 fcc1 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    732a:	b108      	cbz	r0, 7330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    732c:	2008      	movs	r0, #8
    732e:	bd10      	pop	{r4, pc}
    7330:	2001      	movs	r0, #1
    7332:	bd10      	pop	{r4, pc}
    7334:	20000124 	.word	0x20000124
    7338:	b538      	push	{r3, r4, r5, lr}
    733a:	4604      	mov	r4, r0
    733c:	6840      	ldr	r0, [r0, #4]
    733e:	2301      	movs	r3, #1
    7340:	210b      	movs	r1, #11
    7342:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    7346:	3080      	adds	r0, #128	; 0x80
    7348:	f007 fcb0 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    734c:	bb60      	cbnz	r0, 73a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    734e:	6860      	ldr	r0, [r4, #4]
    7350:	2301      	movs	r3, #1
    7352:	2100      	movs	r1, #0
    7354:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    7358:	3080      	adds	r0, #128	; 0x80
    735a:	f007 fca7 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    735e:	b308      	cbz	r0, 73a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1358>
    7360:	6860      	ldr	r0, [r4, #4]
    7362:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    7366:	2825      	cmp	r0, #37	; 0x25
    7368:	d01e      	beq.n	73a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    736a:	4d2a      	ldr	r5, [pc, #168]	; (7414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    736c:	68e8      	ldr	r0, [r5, #12]
    736e:	f007 ff88 	bl	f282 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    7372:	b1d8      	cbz	r0, 73ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1360>
    7374:	68e8      	ldr	r0, [r5, #12]
    7376:	6862      	ldr	r2, [r4, #4]
    7378:	7941      	ldrb	r1, [r0, #5]
    737a:	f001 0107 	and.w	r1, r1, #7
    737e:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    7382:	7900      	ldrb	r0, [r0, #4]
    7384:	f000 0207 	and.w	r2, r0, #7
    7388:	6860      	ldr	r0, [r4, #4]
    738a:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    738e:	6860      	ldr	r0, [r4, #4]
    7390:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    7394:	f88d 1000 	strb.w	r1, [sp]
    7398:	9900      	ldr	r1, [sp, #0]
    739a:	9100      	str	r1, [sp, #0]
    739c:	f89d 1000 	ldrb.w	r1, [sp]
    73a0:	bb71      	cbnz	r1, 7400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    73a2:	e008      	b.n	73b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x136a>
    73a4:	2001      	movs	r0, #1
    73a6:	bd38      	pop	{r3, r4, r5, pc}
    73a8:	2020      	movs	r0, #32
    73aa:	bd38      	pop	{r3, r4, r5, pc}
    73ac:	4620      	mov	r0, r4
    73ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    73b2:	f7ff bf05 	b.w	71c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    73b6:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    73ba:	2901      	cmp	r1, #1
    73bc:	d020      	beq.n	7400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    73be:	f100 016a 	add.w	r1, r0, #106	; 0x6a
    73c2:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    73c6:	784d      	ldrb	r5, [r1, #1]
    73c8:	4295      	cmp	r5, r2
    73ca:	d106      	bne.n	73da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    73cc:	7809      	ldrb	r1, [r1, #0]
    73ce:	4299      	cmp	r1, r3
    73d0:	d103      	bne.n	73da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    73d2:	2102      	movs	r1, #2
    73d4:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    73d8:	e012      	b.n	7400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    73da:	480e      	ldr	r0, [pc, #56]	; (7414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    73dc:	3010      	adds	r0, #16
    73de:	6841      	ldr	r1, [r0, #4]
    73e0:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    73e4:	880a      	ldrh	r2, [r1, #0]
    73e6:	f820 2b02 	strh.w	r2, [r0], #2
    73ea:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    73ee:	f800 2b01 	strb.w	r2, [r0], #1
    73f2:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    73f6:	f800 190d 	strb.w	r1, [r0], #-13
    73fa:	4907      	ldr	r1, [pc, #28]	; (7418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13cc>)
    73fc:	f007 fff5 	bl	f3ea <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    7400:	6861      	ldr	r1, [r4, #4]
    7402:	2022      	movs	r0, #34	; 0x22
    7404:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    7408:	4802      	ldr	r0, [pc, #8]	; (7414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    740a:	3010      	adds	r0, #16
    740c:	f008 f92f 	bl	f66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    7410:	2000      	movs	r0, #0
    7412:	bd38      	pop	{r3, r4, r5, pc}
    7414:	20000114 	.word	0x20000114
    7418:	00008501 	.word	0x00008501
    741c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7420:	6845      	ldr	r5, [r0, #4]
    7422:	4604      	mov	r4, r0
    7424:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    7428:	2821      	cmp	r0, #33	; 0x21
    742a:	d008      	beq.n	743e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f2>
    742c:	f05f 0600 	movs.w	r6, #0
    7430:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    7434:	2823      	cmp	r0, #35	; 0x23
    7436:	d004      	beq.n	7442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f6>
    7438:	b35e      	cbz	r6, 7492 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    743a:	359d      	adds	r5, #157	; 0x9d
    743c:	e002      	b.n	7444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f8>
    743e:	2601      	movs	r6, #1
    7440:	e7f6      	b.n	7430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13e4>
    7442:	359e      	adds	r5, #158	; 0x9e
    7444:	f8df 8140 	ldr.w	r8, [pc, #320]	; 7588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>
    7448:	f8d8 000c 	ldr.w	r0, [r8, #12]
    744c:	f007 ff25 	bl	f29a <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    7450:	2700      	movs	r7, #0
    7452:	b308      	cbz	r0, 7498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    7454:	4631      	mov	r1, r6
    7456:	f8d8 000c 	ldr.w	r0, [r8, #12]
    745a:	f7fe ffb3 	bl	63c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x378>
    745e:	b1d8      	cbz	r0, 7498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    7460:	466a      	mov	r2, sp
    7462:	4646      	mov	r6, r8
    7464:	6860      	ldr	r0, [r4, #4]
    7466:	f8d8 100c 	ldr.w	r1, [r8, #12]
    746a:	f007 fd38 	bl	eede <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    746e:	b388      	cbz	r0, 74d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1488>
    7470:	68f0      	ldr	r0, [r6, #12]
    7472:	f007 ff10 	bl	f296 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    7476:	6861      	ldr	r1, [r4, #4]
    7478:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    747c:	6861      	ldr	r1, [r4, #4]
    747e:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    7482:	f009 f8c2 	bl	1060a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    7486:	b3e8      	cbz	r0, 7504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b8>
    7488:	6861      	ldr	r1, [r4, #4]
    748a:	2028      	movs	r0, #40	; 0x28
    748c:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    7490:	e06e      	b.n	7570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
    7492:	2002      	movs	r0, #2
    7494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7498:	6860      	ldr	r0, [r4, #4]
    749a:	f04f 0900 	mov.w	r9, #0
    749e:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    74a2:	2901      	cmp	r1, #1
    74a4:	d017      	beq.n	74d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148a>
    74a6:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    74aa:	b306      	cbz	r6, 74ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    74ac:	f8d8 000c 	ldr.w	r0, [r8, #12]
    74b0:	6861      	ldr	r1, [r4, #4]
    74b2:	2201      	movs	r2, #1
    74b4:	78c0      	ldrb	r0, [r0, #3]
    74b6:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    74ba:	4082      	lsls	r2, r0
    74bc:	6861      	ldr	r1, [r4, #4]
    74be:	f3c2 6000 	ubfx	r0, r2, #24, #1
    74c2:	b160      	cbz	r0, 74de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
    74c4:	2009      	movs	r0, #9
    74c6:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    74ca:	6860      	ldr	r0, [r4, #4]
    74cc:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    74d0:	b9b0      	cbnz	r0, 7500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    74d2:	e007      	b.n	74e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    74d4:	e017      	b.n	7506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ba>
    74d6:	201e      	movs	r0, #30
    74d8:	f7ff fd58 	bl	6f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    74dc:	e7e5      	b.n	74aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    74de:	f240 414b 	movw	r1, #1099	; 0x44b
    74e2:	e001      	b.n	74e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    74e4:	f240 4153 	movw	r1, #1107	; 0x453
    74e8:	2031      	movs	r0, #49	; 0x31
    74ea:	f7fa fa61 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ee:	4826      	ldr	r0, [pc, #152]	; (7588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    74f0:	702f      	strb	r7, [r5, #0]
    74f2:	3010      	adds	r0, #16
    74f4:	f008 f8c3 	bl	f67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    74f8:	4620      	mov	r0, r4
    74fa:	f7ff fe61 	bl	71c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    74fe:	4681      	mov	r9, r0
    7500:	4648      	mov	r0, r9
    7502:	e7c7      	b.n	7494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    7504:	e013      	b.n	752e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e2>
    7506:	6860      	ldr	r0, [r4, #4]
    7508:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    750c:	2901      	cmp	r1, #1
    750e:	d009      	beq.n	7524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d8>
    7510:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    7514:	6860      	ldr	r0, [r4, #4]
    7516:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    751a:	42a9      	cmp	r1, r5
    751c:	d11b      	bne.n	7556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    751e:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    7522:	e018      	b.n	7556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    7524:	2000      	movs	r0, #0
    7526:	f7ff fd31 	bl	6f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    752a:	702f      	strb	r7, [r5, #0]
    752c:	e7f2      	b.n	7514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    752e:	6860      	ldr	r0, [r4, #4]
    7530:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    7534:	290d      	cmp	r1, #13
    7536:	d018      	beq.n	756a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    7538:	290b      	cmp	r1, #11
    753a:	d016      	beq.n	756a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    753c:	290a      	cmp	r1, #10
    753e:	d014      	beq.n	756a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    7540:	f89d 1000 	ldrb.w	r1, [sp]
    7544:	f880 12ce 	strb.w	r1, [r0, #718]	; 0x2ce
    7548:	6861      	ldr	r1, [r4, #4]
    754a:	f89d 0001 	ldrb.w	r0, [sp, #1]
    754e:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    7552:	2025      	movs	r0, #37	; 0x25
    7554:	7028      	strb	r0, [r5, #0]
    7556:	6860      	ldr	r0, [r4, #4]
    7558:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    755c:	42a9      	cmp	r1, r5
    755e:	d10e      	bne.n	757e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1532>
    7560:	4809      	ldr	r0, [pc, #36]	; (7588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    7562:	3010      	adds	r0, #16
    7564:	f008 f88b 	bl	f67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    7568:	e00b      	b.n	7582 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1536>
    756a:	212a      	movs	r1, #42	; 0x2a
    756c:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    7570:	6860      	ldr	r0, [r4, #4]
    7572:	2202      	movs	r2, #2
    7574:	4905      	ldr	r1, [pc, #20]	; (758c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>)
    7576:	30b4      	adds	r0, #180	; 0xb4
    7578:	f007 ff40 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    757c:	e7eb      	b.n	7556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    757e:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    7582:	2000      	movs	r0, #0
    7584:	e786      	b.n	7494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    7586:	0000      	.short	0x0000
    7588:	20000114 	.word	0x20000114
    758c:	0000f6b9 	.word	0x0000f6b9
    7590:	b570      	push	{r4, r5, r6, lr}
    7592:	4604      	mov	r4, r0
    7594:	6840      	ldr	r0, [r0, #4]
    7596:	4d0a      	ldr	r5, [pc, #40]	; (75c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1574>)
    7598:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    759c:	f041 0104 	orr.w	r1, r1, #4
    75a0:	7001      	strb	r1, [r0, #0]
    75a2:	68e8      	ldr	r0, [r5, #12]
    75a4:	f007 fe8d 	bl	f2c2 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    75a8:	4606      	mov	r6, r0
    75aa:	68e8      	ldr	r0, [r5, #12]
    75ac:	f007 fe8d 	bl	f2ca <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    75b0:	4601      	mov	r1, r0
    75b2:	4622      	mov	r2, r4
    75b4:	4630      	mov	r0, r6
    75b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    75ba:	f000 b893 	b.w	76e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    75be:	0000      	.short	0x0000
    75c0:	20000114 	.word	0x20000114
    75c4:	4602      	mov	r2, r0
    75c6:	4813      	ldr	r0, [pc, #76]	; (7614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    75c8:	68c0      	ldr	r0, [r0, #12]
    75ca:	7901      	ldrb	r1, [r0, #4]
    75cc:	4811      	ldr	r0, [pc, #68]	; (7614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    75ce:	3010      	adds	r0, #16
    75d0:	6843      	ldr	r3, [r0, #4]
    75d2:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    75d6:	2821      	cmp	r0, #33	; 0x21
    75d8:	d010      	beq.n	75fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    75da:	282e      	cmp	r0, #46	; 0x2e
    75dc:	d00e      	beq.n	75fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    75de:	2828      	cmp	r0, #40	; 0x28
    75e0:	d00e      	beq.n	7600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    75e2:	2804      	cmp	r0, #4
    75e4:	d00e      	beq.n	7604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    75e6:	280f      	cmp	r0, #15
    75e8:	d00e      	beq.n	7608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    75ea:	281d      	cmp	r0, #29
    75ec:	d00e      	beq.n	760c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    75ee:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    75f2:	2823      	cmp	r0, #35	; 0x23
    75f4:	d00c      	beq.n	7610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    75f6:	20fe      	movs	r0, #254	; 0xfe
    75f8:	f000 b874 	b.w	76e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    75fc:	2016      	movs	r0, #22
    75fe:	e7fb      	b.n	75f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    7600:	2023      	movs	r0, #35	; 0x23
    7602:	e7f9      	b.n	75f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    7604:	200e      	movs	r0, #14
    7606:	e7f7      	b.n	75f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    7608:	2012      	movs	r0, #18
    760a:	e7f5      	b.n	75f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    760c:	2014      	movs	r0, #20
    760e:	e7f3      	b.n	75f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    7610:	2017      	movs	r0, #23
    7612:	e7f1      	b.n	75f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    7614:	20000114 	.word	0x20000114
    7618:	b510      	push	{r4, lr}
    761a:	4604      	mov	r4, r0
    761c:	6840      	ldr	r0, [r0, #4]
    761e:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    7622:	2818      	cmp	r0, #24
    7624:	d001      	beq.n	762a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    7626:	2002      	movs	r0, #2
    7628:	bd10      	pop	{r4, pc}
    762a:	4804      	ldr	r0, [pc, #16]	; (763c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>)
    762c:	f008 f827 	bl	f67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    7630:	6861      	ldr	r1, [r4, #4]
    7632:	201c      	movs	r0, #28
    7634:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    7638:	2000      	movs	r0, #0
    763a:	bd10      	pop	{r4, pc}
    763c:	20000124 	.word	0x20000124
    7640:	4901      	ldr	r1, [pc, #4]	; (7648 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    7642:	68c9      	ldr	r1, [r1, #12]
    7644:	f008 b85a 	b.w	f6fc <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>
    7648:	20000114 	.word	0x20000114
    764c:	b570      	push	{r4, r5, r6, lr}
    764e:	4604      	mov	r4, r0
    7650:	481f      	ldr	r0, [pc, #124]	; (76d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1684>)
    7652:	2500      	movs	r5, #0
    7654:	68c0      	ldr	r0, [r0, #12]
    7656:	7903      	ldrb	r3, [r0, #4]
    7658:	6860      	ldr	r0, [r4, #4]
    765a:	2b16      	cmp	r3, #22
    765c:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    7660:	d013      	beq.n	768a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163e>
    7662:	dc06      	bgt.n	7672 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1626>
    7664:	2b0e      	cmp	r3, #14
    7666:	d009      	beq.n	767c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    7668:	2b12      	cmp	r3, #18
    766a:	d007      	beq.n	767c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    766c:	2b14      	cmp	r3, #20
    766e:	d12c      	bne.n	76ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    7670:	e004      	b.n	767c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    7672:	2b17      	cmp	r3, #23
    7674:	d002      	beq.n	767c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    7676:	2b23      	cmp	r3, #35	; 0x23
    7678:	d127      	bne.n	76ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    767a:	e01f      	b.n	76bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    767c:	4622      	mov	r2, r4
    767e:	2101      	movs	r1, #1
    7680:	4618      	mov	r0, r3
    7682:	f000 f9c5 	bl	7a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    7686:	4605      	mov	r5, r0
    7688:	e01f      	b.n	76ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    768a:	2821      	cmp	r0, #33	; 0x21
    768c:	d001      	beq.n	7692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    768e:	282e      	cmp	r0, #46	; 0x2e
    7690:	d11b      	bne.n	76ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    7692:	4620      	mov	r0, r4
    7694:	f008 f807 	bl	f6a6 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    7698:	6860      	ldr	r0, [r4, #4]
    769a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    769e:	2922      	cmp	r1, #34	; 0x22
    76a0:	d013      	beq.n	76ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    76a2:	2108      	movs	r1, #8
    76a4:	30ec      	adds	r0, #236	; 0xec
    76a6:	f008 ff5c 	bl	10562 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    76aa:	6860      	ldr	r0, [r4, #4]
    76ac:	210b      	movs	r1, #11
    76ae:	30ec      	adds	r0, #236	; 0xec
    76b0:	f008 ff57 	bl	10562 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    76b4:	201a      	movs	r0, #26
    76b6:	f7ff fc69 	bl	6f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    76ba:	e006      	b.n	76ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    76bc:	2828      	cmp	r0, #40	; 0x28
    76be:	d104      	bne.n	76ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    76c0:	4804      	ldr	r0, [pc, #16]	; (76d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    76c2:	6801      	ldr	r1, [r0, #0]
    76c4:	b109      	cbz	r1, 76ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    76c6:	4620      	mov	r0, r4
    76c8:	4788      	blx	r1
    76ca:	4628      	mov	r0, r5
    76cc:	bd70      	pop	{r4, r5, r6, pc}
    76ce:	0000      	.short	0x0000
    76d0:	20000114 	.word	0x20000114
    76d4:	20000290 	.word	0x20000290
    76d8:	4901      	ldr	r1, [pc, #4]	; (76e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>)
    76da:	68c9      	ldr	r1, [r1, #12]
    76dc:	f7fc bd40 	b.w	4160 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    76e0:	20000114 	.word	0x20000114
    76e4:	4603      	mov	r3, r0
    76e6:	2000      	movs	r0, #0
    76e8:	2b17      	cmp	r3, #23
    76ea:	d017      	beq.n	771c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    76ec:	dc0a      	bgt.n	7704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b8>
    76ee:	2b0e      	cmp	r3, #14
    76f0:	d014      	beq.n	771c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    76f2:	2b12      	cmp	r3, #18
    76f4:	d012      	beq.n	771c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    76f6:	2b14      	cmp	r3, #20
    76f8:	d010      	beq.n	771c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    76fa:	2b16      	cmp	r3, #22
    76fc:	d112      	bne.n	7724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    76fe:	4608      	mov	r0, r1
    7700:	f7ff bc4a 	b.w	6f98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf4c>
    7704:	2b23      	cmp	r3, #35	; 0x23
    7706:	d003      	beq.n	7710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    7708:	2b24      	cmp	r3, #36	; 0x24
    770a:	d001      	beq.n	7710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    770c:	2b25      	cmp	r3, #37	; 0x25
    770e:	d109      	bne.n	7724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    7710:	4a05      	ldr	r2, [pc, #20]	; (7728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16dc>)
    7712:	6812      	ldr	r2, [r2, #0]
    7714:	2a00      	cmp	r2, #0
    7716:	d005      	beq.n	7724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    7718:	4618      	mov	r0, r3
    771a:	4710      	bx	r2
    771c:	2100      	movs	r1, #0
    771e:	4618      	mov	r0, r3
    7720:	f000 b976 	b.w	7a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    7724:	4770      	bx	lr
    7726:	0000      	.short	0x0000
    7728:	20000288 	.word	0x20000288
    772c:	b510      	push	{r4, lr}
    772e:	6841      	ldr	r1, [r0, #4]
    7730:	4604      	mov	r4, r0
    7732:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    7736:	06c2      	lsls	r2, r0, #27
    7738:	d402      	bmi.n	7740 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f4>
    773a:	f240 71db 	movw	r1, #2011	; 0x7db
    773e:	e003      	b.n	7748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    7740:	0682      	lsls	r2, r0, #26
    7742:	d504      	bpl.n	774e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1702>
    7744:	f240 71dc 	movw	r1, #2012	; 0x7dc
    7748:	2031      	movs	r0, #49	; 0x31
    774a:	f7fa f931 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    774e:	f020 0010 	bic.w	r0, r0, #16
    7752:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    7756:	4804      	ldr	r0, [pc, #16]	; (7768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171c>)
    7758:	f007 ff91 	bl	f67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    775c:	6860      	ldr	r0, [r4, #4]
    775e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7762:	2105      	movs	r1, #5
    7764:	f7fd bf1a 	b.w	559c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    7768:	20000124 	.word	0x20000124
    776c:	b510      	push	{r4, lr}
    776e:	6840      	ldr	r0, [r0, #4]
    7770:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    7774:	292f      	cmp	r1, #47	; 0x2f
    7776:	d006      	beq.n	7786 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173a>
    7778:	2916      	cmp	r1, #22
    777a:	d00c      	beq.n	7796 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174a>
    777c:	f240 71a5 	movw	r1, #1957	; 0x7a5
    7780:	2031      	movs	r0, #49	; 0x31
    7782:	f7fa f915 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7786:	2100      	movs	r1, #0
    7788:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    778c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7790:	4803      	ldr	r0, [pc, #12]	; (77a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    7792:	f007 bf74 	b.w	f67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    7796:	211a      	movs	r1, #26
    7798:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    779c:	bd10      	pop	{r4, pc}
    779e:	0000      	.short	0x0000
    77a0:	20000124 	.word	0x20000124
    77a4:	b570      	push	{r4, r5, r6, lr}
    77a6:	4604      	mov	r4, r0
    77a8:	6840      	ldr	r0, [r0, #4]
    77aa:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    77ae:	291c      	cmp	r1, #28
    77b0:	d004      	beq.n	77bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>
    77b2:	f240 71b6 	movw	r1, #1974	; 0x7b6
    77b6:	2031      	movs	r0, #49	; 0x31
    77b8:	f7fa f8fa 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77bc:	2500      	movs	r5, #0
    77be:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    77c2:	6860      	ldr	r0, [r4, #4]
    77c4:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    77c8:	b161      	cbz	r1, 77e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    77ca:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    77ce:	6860      	ldr	r0, [r4, #4]
    77d0:	2202      	movs	r2, #2
    77d2:	8801      	ldrh	r1, [r0, #0]
    77d4:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    77d8:	6860      	ldr	r0, [r4, #4]
    77da:	490d      	ldr	r1, [pc, #52]	; (7810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>)
    77dc:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    77e0:	6860      	ldr	r0, [r4, #4]
    77e2:	e00c      	b.n	77fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    77e4:	8801      	ldrh	r1, [r0, #0]
    77e6:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    77ea:	6860      	ldr	r0, [r4, #4]
    77ec:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    77f0:	6861      	ldr	r1, [r4, #4]
    77f2:	2001      	movs	r0, #1
    77f4:	2202      	movs	r2, #2
    77f6:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    77fa:	4906      	ldr	r1, [pc, #24]	; (7814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c8>)
    77fc:	6860      	ldr	r0, [r4, #4]
    77fe:	f200 200a 	addw	r0, r0, #522	; 0x20a
    7802:	f007 fdfb 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    7806:	6860      	ldr	r0, [r4, #4]
    7808:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    780c:	bd70      	pop	{r4, r5, r6, pc}
    780e:	0000      	.short	0x0000
    7810:	0000f847 	.word	0x0000f847
    7814:	0000f829 	.word	0x0000f829
    7818:	4916      	ldr	r1, [pc, #88]	; (7874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    781a:	b510      	push	{r4, lr}
    781c:	6889      	ldr	r1, [r1, #8]
    781e:	790a      	ldrb	r2, [r1, #4]
    7820:	6841      	ldr	r1, [r0, #4]
    7822:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    7826:	2b09      	cmp	r3, #9
    7828:	d10a      	bne.n	7840 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    782a:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    782e:	4293      	cmp	r3, r2
    7830:	d106      	bne.n	7840 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    7832:	2200      	movs	r2, #0
    7834:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    7838:	6840      	ldr	r0, [r0, #4]
    783a:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    783e:	bd10      	pop	{r4, pc}
    7840:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    7844:	071c      	lsls	r4, r3, #28
    7846:	d509      	bpl.n	785c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1810>
    7848:	f023 0008 	bic.w	r0, r3, #8
    784c:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    7850:	4808      	ldr	r0, [pc, #32]	; (7874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    7852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7856:	3010      	adds	r0, #16
    7858:	f007 bf11 	b.w	f67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    785c:	2aff      	cmp	r2, #255	; 0xff
    785e:	d004      	beq.n	786a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181e>
    7860:	f240 7151 	movw	r1, #1873	; 0x751
    7864:	2031      	movs	r0, #49	; 0x31
    7866:	f7fa f8a3 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    786a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    786e:	f008 bf23 	b.w	106b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    7872:	0000      	.short	0x0000
    7874:	20000114 	.word	0x20000114
    7878:	4808      	ldr	r0, [pc, #32]	; (789c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>)
    787a:	b510      	push	{r4, lr}
    787c:	6840      	ldr	r0, [r0, #4]
    787e:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    7882:	b941      	cbnz	r1, 7896 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184a>
    7884:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    7888:	2301      	movs	r3, #1
    788a:	2106      	movs	r1, #6
    788c:	3080      	adds	r0, #128	; 0x80
    788e:	f007 fa0d 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7892:	2800      	cmp	r0, #0
    7894:	d000      	beq.n	7898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    7896:	2001      	movs	r0, #1
    7898:	bd10      	pop	{r4, pc}
    789a:	0000      	.short	0x0000
    789c:	20000124 	.word	0x20000124
    78a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78a2:	4c59      	ldr	r4, [pc, #356]	; (7a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    78a4:	4606      	mov	r6, r0
    78a6:	4615      	mov	r5, r2
    78a8:	6860      	ldr	r0, [r4, #4]
    78aa:	2200      	movs	r2, #0
    78ac:	b111      	cbz	r1, 78b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    78ae:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    78b2:	e006      	b.n	78c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1876>
    78b4:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    78b8:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    78bc:	4411      	add	r1, r2
    78be:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    78c2:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    78c6:	f88d 1000 	strb.w	r1, [sp]
    78ca:	9900      	ldr	r1, [sp, #0]
    78cc:	9100      	str	r1, [sp, #0]
    78ce:	f89d 1000 	ldrb.w	r1, [sp]
    78d2:	b939      	cbnz	r1, 78e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1898>
    78d4:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    78d8:	2301      	movs	r3, #1
    78da:	4619      	mov	r1, r3
    78dc:	3080      	adds	r0, #128	; 0x80
    78de:	f007 f9e5 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    78e2:	b130      	cbz	r0, 78f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a6>
    78e4:	6860      	ldr	r0, [r4, #4]
    78e6:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    78ea:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    78ee:	4411      	add	r1, r2
    78f0:	8001      	strh	r1, [r0, #0]
    78f2:	6860      	ldr	r0, [r4, #4]
    78f4:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    78f8:	b132      	cbz	r2, 7908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    78fa:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    78fe:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    7902:	4419      	add	r1, r3
    7904:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    7908:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    790c:	2b00      	cmp	r3, #0
    790e:	dd06      	ble.n	791e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d2>
    7910:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    7914:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    7918:	4439      	add	r1, r7
    791a:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    791e:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    7922:	bb09      	cbnz	r1, 7968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    7924:	b9be      	cbnz	r6, 7956 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    7926:	4938      	ldr	r1, [pc, #224]	; (7a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    7928:	3910      	subs	r1, #16
    792a:	7809      	ldrb	r1, [r1, #0]
    792c:	2902      	cmp	r1, #2
    792e:	d006      	beq.n	793e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f2>
    7930:	2901      	cmp	r1, #1
    7932:	d00a      	beq.n	794a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    7934:	b1f5      	cbz	r5, 7974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    7936:	06e9      	lsls	r1, r5, #27
    7938:	d50b      	bpl.n	7952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1906>
    793a:	211e      	movs	r1, #30
    793c:	e042      	b.n	79c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    793e:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    7942:	2906      	cmp	r1, #6
    7944:	d03e      	beq.n	79c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    7946:	2116      	movs	r1, #22
    7948:	e03c      	b.n	79c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    794a:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    794e:	b959      	cbnz	r1, 7968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    7950:	e054      	b.n	79fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    7952:	0729      	lsls	r1, r5, #28
    7954:	d501      	bpl.n	795a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    7956:	213d      	movs	r1, #61	; 0x3d
    7958:	e034      	b.n	79c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    795a:	06a9      	lsls	r1, r5, #26
    795c:	d501      	bpl.n	7962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    795e:	2123      	movs	r1, #35	; 0x23
    7960:	e030      	b.n	79c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    7962:	07a9      	lsls	r1, r5, #30
    7964:	d001      	beq.n	796a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191e>
    7966:	212a      	movs	r1, #42	; 0x2a
    7968:	e02c      	b.n	79c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    796a:	f640 51a3 	movw	r1, #3491	; 0xda3
    796e:	2031      	movs	r0, #49	; 0x31
    7970:	f7fa f81e 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7974:	b12a      	cbz	r2, 7982 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    7976:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    797a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    797e:	4291      	cmp	r1, r2
    7980:	d216      	bcs.n	79b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    7982:	2b00      	cmp	r3, #0
    7984:	dd05      	ble.n	7992 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    7986:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    798a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    798e:	4291      	cmp	r1, r2
    7990:	d20e      	bcs.n	79b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    7992:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    7996:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    799a:	428a      	cmp	r2, r1
    799c:	d30a      	bcc.n	79b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    799e:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    79a2:	f88d 2000 	strb.w	r2, [sp]
    79a6:	9a00      	ldr	r2, [sp, #0]
    79a8:	9200      	str	r2, [sp, #0]
    79aa:	f89d 2000 	ldrb.w	r2, [sp]
    79ae:	b10a      	cbz	r2, 79b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    79b0:	2122      	movs	r1, #34	; 0x22
    79b2:	e007      	b.n	79c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    79b4:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    79b8:	b172      	cbz	r2, 79d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    79ba:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    79be:	428a      	cmp	r2, r1
    79c0:	d31c      	bcc.n	79fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    79c2:	2108      	movs	r1, #8
    79c4:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    79c8:	f88d 2000 	strb.w	r2, [sp]
    79cc:	9a00      	ldr	r2, [sp, #0]
    79ce:	9200      	str	r2, [sp, #0]
    79d0:	f89d 2000 	ldrb.w	r2, [sp]
    79d4:	b96a      	cbnz	r2, 79f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    79d6:	e005      	b.n	79e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>
    79d8:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    79dc:	2906      	cmp	r1, #6
    79de:	d30d      	bcc.n	79fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    79e0:	213e      	movs	r1, #62	; 0x3e
    79e2:	e7ef      	b.n	79c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    79e4:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    79e8:	2202      	movs	r2, #2
    79ea:	4908      	ldr	r1, [pc, #32]	; (7a0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>)
    79ec:	30b4      	adds	r0, #180	; 0xb4
    79ee:	f007 fd05 	bl	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    79f2:	6860      	ldr	r0, [r4, #4]
    79f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    79f8:	f008 bdd7 	b.w	105aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    79fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7a00:	2100      	movs	r1, #0
    7a02:	f7fd bdcb 	b.w	559c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    7a06:	0000      	.short	0x0000
    7a08:	20000124 	.word	0x20000124
    7a0c:	0000f6b9 	.word	0x0000f6b9
    7a10:	b570      	push	{r4, r5, r6, lr}
    7a12:	4614      	mov	r4, r2
    7a14:	460e      	mov	r6, r1
    7a16:	6861      	ldr	r1, [r4, #4]
    7a18:	4602      	mov	r2, r0
    7a1a:	2500      	movs	r5, #0
    7a1c:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    7a20:	2a0e      	cmp	r2, #14
    7a22:	d00a      	beq.n	7a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ee>
    7a24:	2a12      	cmp	r2, #18
    7a26:	d011      	beq.n	7a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>
    7a28:	2a14      	cmp	r2, #20
    7a2a:	d016      	beq.n	7a5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0e>
    7a2c:	2a17      	cmp	r2, #23
    7a2e:	d023      	beq.n	7a78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    7a30:	f240 31dd 	movw	r1, #989	; 0x3dd
    7a34:	2031      	movs	r0, #49	; 0x31
    7a36:	f7f9 ffbb 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a3a:	2804      	cmp	r0, #4
    7a3c:	d131      	bne.n	7aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    7a3e:	4620      	mov	r0, r4
    7a40:	f007 fe31 	bl	f6a6 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    7a44:	4620      	mov	r0, r4
    7a46:	f7fc fb6d 	bl	4124 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    7a4a:	e02a      	b.n	7aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    7a4c:	280f      	cmp	r0, #15
    7a4e:	d128      	bne.n	7aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    7a50:	4620      	mov	r0, r4
    7a52:	f007 ff85 	bl	f960 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>
    7a56:	4605      	mov	r5, r0
    7a58:	e023      	b.n	7aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    7a5a:	281d      	cmp	r0, #29
    7a5c:	d121      	bne.n	7aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    7a5e:	4620      	mov	r0, r4
    7a60:	f007 fe21 	bl	f6a6 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    7a64:	b126      	cbz	r6, 7a70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    7a66:	6860      	ldr	r0, [r4, #4]
    7a68:	2105      	movs	r1, #5
    7a6a:	30ec      	adds	r0, #236	; 0xec
    7a6c:	f008 fd79 	bl	10562 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    7a70:	480d      	ldr	r0, [pc, #52]	; (7aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    7a72:	f007 fec9 	bl	f808 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    7a76:	e014      	b.n	7aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    7a78:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    7a7c:	2823      	cmp	r0, #35	; 0x23
    7a7e:	d110      	bne.n	7aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    7a80:	2600      	movs	r6, #0
    7a82:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    7a86:	4808      	ldr	r0, [pc, #32]	; (7aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    7a88:	f007 fdf9 	bl	f67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    7a8c:	6860      	ldr	r0, [r4, #4]
    7a8e:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    7a92:	2801      	cmp	r0, #1
    7a94:	d102      	bne.n	7a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a50>
    7a96:	2000      	movs	r0, #0
    7a98:	f7ff fa78 	bl	6f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    7a9c:	6860      	ldr	r0, [r4, #4]
    7a9e:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    7aa2:	4628      	mov	r0, r5
    7aa4:	bd70      	pop	{r4, r5, r6, pc}
    7aa6:	0000      	.short	0x0000
    7aa8:	20000124 	.word	0x20000124
    7aac:	b570      	push	{r4, r5, r6, lr}
    7aae:	4d2e      	ldr	r5, [pc, #184]	; (7b68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b1c>)
    7ab0:	6868      	ldr	r0, [r5, #4]
    7ab2:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    7ab6:	b151      	cbz	r1, 7ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    7ab8:	2901      	cmp	r1, #1
    7aba:	d008      	beq.n	7ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    7abc:	2902      	cmp	r1, #2
    7abe:	d009      	beq.n	7ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    7ac0:	2903      	cmp	r1, #3
    7ac2:	d007      	beq.n	7ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    7ac4:	f640 4118 	movw	r1, #3096	; 0xc18
    7ac8:	2031      	movs	r0, #49	; 0x31
    7aca:	f7f9 ff71 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ace:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    7ad2:	e037      	b.n	7b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af8>
    7ad4:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    7ad8:	2907      	cmp	r1, #7
    7ada:	d036      	beq.n	7b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afe>
    7adc:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    7ae0:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    7ae4:	2400      	movs	r4, #0
    7ae6:	1c93      	adds	r3, r2, #2
    7ae8:	4299      	cmp	r1, r3
    7aea:	d306      	bcc.n	7afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    7aec:	1a89      	subs	r1, r1, r2
    7aee:	1e89      	subs	r1, r1, #2
    7af0:	040c      	lsls	r4, r1, #16
    7af2:	0c24      	lsrs	r4, r4, #16
    7af4:	d001      	beq.n	7afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    7af6:	1e64      	subs	r4, r4, #1
    7af8:	b2a4      	uxth	r4, r4
    7afa:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    7afe:	b139      	cbz	r1, 7b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac4>
    7b00:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    7b04:	2301      	movs	r3, #1
    7b06:	2109      	movs	r1, #9
    7b08:	3080      	adds	r0, #128	; 0x80
    7b0a:	f007 f8cf 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7b0e:	b340      	cbz	r0, 7b62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b16>
    7b10:	f7ff feb2 	bl	7878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    7b14:	b178      	cbz	r0, 7b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    7b16:	686a      	ldr	r2, [r5, #4]
    7b18:	2000      	movs	r0, #0
    7b1a:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    7b1e:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    7b22:	1c93      	adds	r3, r2, #2
    7b24:	4299      	cmp	r1, r3
    7b26:	d303      	bcc.n	7b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    7b28:	1a88      	subs	r0, r1, r2
    7b2a:	1e80      	subs	r0, r0, #2
    7b2c:	d000      	beq.n	7b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    7b2e:	1e40      	subs	r0, r0, #1
    7b30:	42a0      	cmp	r0, r4
    7b32:	d200      	bcs.n	7b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    7b34:	b284      	uxth	r4, r0
    7b36:	b10c      	cbz	r4, 7b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    7b38:	1e64      	subs	r4, r4, #1
    7b3a:	b2a4      	uxth	r4, r4
    7b3c:	6868      	ldr	r0, [r5, #4]
    7b3e:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    7b42:	4421      	add	r1, r4
    7b44:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    7b48:	bd70      	pop	{r4, r5, r6, pc}
    7b4a:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    7b4e:	2903      	cmp	r1, #3
    7b50:	d3bd      	bcc.n	7ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    7b52:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    7b56:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    7b58:	4411      	add	r1, r2
    7b5a:	1c49      	adds	r1, r1, #1
    7b5c:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    7b60:	bd70      	pop	{r4, r5, r6, pc}
    7b62:	2400      	movs	r4, #0
    7b64:	e7ea      	b.n	7b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    7b66:	0000      	.short	0x0000
    7b68:	20000124 	.word	0x20000124

00007b6c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    7b6c:	b570      	push	{r4, r5, r6, lr}
    7b6e:	6844      	ldr	r4, [r0, #4]
    7b70:	220d      	movs	r2, #13
    7b72:	f504 7598 	add.w	r5, r4, #304	; 0x130
    7b76:	2100      	movs	r1, #0
    7b78:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    7b7c:	f00a f9fd 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7b80:	f44f 70a3 	mov.w	r0, #326	; 0x146
    7b84:	2100      	movs	r1, #0
    7b86:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    7b8a:	5501      	strb	r1, [r0, r4]
    7b8c:	f8a5 1017 	strh.w	r1, [r5, #23]
    7b90:	7669      	strb	r1, [r5, #25]
    7b92:	4608      	mov	r0, r1
    7b94:	f05f 017f 	movs.w	r1, #127	; 0x7f
    7b98:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    7b9c:	1c40      	adds	r0, r0, #1
    7b9e:	b2c0      	uxtb	r0, r0
    7ba0:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    7ba4:	2802      	cmp	r0, #2
    7ba6:	d3f7      	bcc.n	7b98 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    7ba8:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    7bac:	4620      	mov	r0, r4
    7bae:	f008 fe43 	bl	10838 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    7bb2:	2000      	movs	r0, #0
    7bb4:	21ff      	movs	r1, #255	; 0xff
    7bb6:	1822      	adds	r2, r4, r0
    7bb8:	1c40      	adds	r0, r0, #1
    7bba:	b2c0      	uxtb	r0, r0
    7bbc:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    7bc0:	2802      	cmp	r0, #2
    7bc2:	d3f8      	bcc.n	7bb6 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    7bc4:	bd70      	pop	{r4, r5, r6, pc}
	...

00007bc8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    7bc8:	4903      	ldr	r1, [pc, #12]	; (7bd8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    7bca:	884a      	ldrh	r2, [r1, #2]
    7bcc:	8002      	strh	r2, [r0, #0]
    7bce:	7809      	ldrb	r1, [r1, #0]
    7bd0:	7081      	strb	r1, [r0, #2]
    7bd2:	2000      	movs	r0, #0
    7bd4:	4770      	bx	lr
    7bd6:	0000      	.short	0x0000
    7bd8:	20001668 	.word	0x20001668

00007bdc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    7bdc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    7bde:	460c      	mov	r4, r1
    7be0:	4605      	mov	r5, r0
    7be2:	8800      	ldrh	r0, [r0, #0]
    7be4:	4669      	mov	r1, sp
    7be6:	f007 f84a 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7bea:	2200      	movs	r2, #0
    7bec:	b128      	cbz	r0, 7bfa <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    7bee:	f8c4 2002 	str.w	r2, [r4, #2]
    7bf2:	71a2      	strb	r2, [r4, #6]
    7bf4:	8022      	strh	r2, [r4, #0]
    7bf6:	2002      	movs	r0, #2
    7bf8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7bfa:	9901      	ldr	r1, [sp, #4]
    7bfc:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    7c00:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    7c04:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    7c08:	f8c4 0002 	str.w	r0, [r4, #2]
    7c0c:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    7c10:	71a0      	strb	r0, [r4, #6]
    7c12:	8828      	ldrh	r0, [r5, #0]
    7c14:	8020      	strh	r0, [r4, #0]
    7c16:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    7c1a:	f88d 0008 	strb.w	r0, [sp, #8]
    7c1e:	9802      	ldr	r0, [sp, #8]
    7c20:	9002      	str	r0, [sp, #8]
    7c22:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7c26:	2800      	cmp	r0, #0
    7c28:	d1ea      	bne.n	7c00 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    7c2a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00007c2c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    7c2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7c2e:	460d      	mov	r5, r1
    7c30:	4606      	mov	r6, r0
    7c32:	8800      	ldrh	r0, [r0, #0]
    7c34:	4669      	mov	r1, sp
    7c36:	f007 f822 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7c3a:	2800      	cmp	r0, #0
    7c3c:	d11a      	bne.n	7c74 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    7c3e:	f8dd 4004 	ldr.w	r4, [sp, #4]
    7c42:	2700      	movs	r7, #0
    7c44:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    7c48:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    7c4c:	f009 fb71 	bl	11332 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    7c50:	70a8      	strb	r0, [r5, #2]
    7c52:	7860      	ldrb	r0, [r4, #1]
    7c54:	f009 fb6d 	bl	11332 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    7c58:	70e8      	strb	r0, [r5, #3]
    7c5a:	78a0      	ldrb	r0, [r4, #2]
    7c5c:	f88d 0008 	strb.w	r0, [sp, #8]
    7c60:	9802      	ldr	r0, [sp, #8]
    7c62:	9002      	str	r0, [sp, #8]
    7c64:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7c68:	3c6a      	subs	r4, #106	; 0x6a
    7c6a:	2800      	cmp	r0, #0
    7c6c:	d1ea      	bne.n	7c44 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    7c6e:	8830      	ldrh	r0, [r6, #0]
    7c70:	8028      	strh	r0, [r5, #0]
    7c72:	2000      	movs	r0, #0
    7c74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007c78 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    7c78:	4903      	ldr	r1, [pc, #12]	; (7c88 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    7c7a:	888a      	ldrh	r2, [r1, #4]
    7c7c:	8002      	strh	r2, [r0, #0]
    7c7e:	88c9      	ldrh	r1, [r1, #6]
    7c80:	8041      	strh	r1, [r0, #2]
    7c82:	2000      	movs	r0, #0
    7c84:	4770      	bx	lr
    7c86:	0000      	.short	0x0000
    7c88:	2000029c 	.word	0x2000029c

00007c8c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    7c8c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    7c8e:	2400      	movs	r4, #0
    7c90:	a902      	add	r1, sp, #8
    7c92:	f88d 4004 	strb.w	r4, [sp, #4]
    7c96:	f88d 4008 	strb.w	r4, [sp, #8]
    7c9a:	9100      	str	r1, [sp, #0]
    7c9c:	7882      	ldrb	r2, [r0, #2]
    7c9e:	7841      	ldrb	r1, [r0, #1]
    7ca0:	7800      	ldrb	r0, [r0, #0]
    7ca2:	ab01      	add	r3, sp, #4
    7ca4:	f009 fcc0 	bl	11628 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x324>
    7ca8:	2800      	cmp	r0, #0
    7caa:	d112      	bne.n	7cd2 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    7cac:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7cb0:	f009 fbf3 	bl	1149a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    7cb4:	b170      	cbz	r0, 7cd4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    7cb6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7cba:	f009 fbee 	bl	1149a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    7cbe:	b148      	cbz	r0, 7cd4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    7cc0:	4805      	ldr	r0, [pc, #20]	; (7cd8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    7cc2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    7cc6:	7381      	strb	r1, [r0, #14]
    7cc8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7ccc:	73c1      	strb	r1, [r0, #15]
    7cce:	8204      	strh	r4, [r0, #16]
    7cd0:	2000      	movs	r0, #0
    7cd2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7cd4:	2011      	movs	r0, #17
    7cd6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7cd8:	20001668 	.word	0x20001668

00007cdc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    7cdc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7ce0:	460f      	mov	r7, r1
    7ce2:	4605      	mov	r5, r0
    7ce4:	7806      	ldrb	r6, [r0, #0]
    7ce6:	f009 fb8b 	bl	11400 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    7cea:	2800      	cmp	r0, #0
    7cec:	d10e      	bne.n	7d0c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    7cee:	4628      	mov	r0, r5
    7cf0:	f009 fb60 	bl	113b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    7cf4:	2800      	cmp	r0, #0
    7cf6:	d109      	bne.n	7d0c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    7cf8:	2101      	movs	r1, #1
    7cfa:	4630      	mov	r0, r6
    7cfc:	f7fa f986 	bl	200c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7d00:	0004      	movs	r4, r0
    7d02:	d005      	beq.n	7d10 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
    7d04:	f008 f952 	bl	ffac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7d08:	b170      	cbz	r0, 7d28 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
    7d0a:	200c      	movs	r0, #12
    7d0c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    7d10:	2101      	movs	r1, #1
    7d12:	4630      	mov	r0, r6
    7d14:	f7fa f942 	bl	1f9c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    7d18:	0004      	movs	r4, r0
    7d1a:	d013      	beq.n	7d44 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
    7d1c:	4817      	ldr	r0, [pc, #92]	; (7d7c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>)
    7d1e:	f990 1000 	ldrsb.w	r1, [r0]
    7d22:	4620      	mov	r0, r4
    7d24:	f007 ff17 	bl	fb56 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    7d28:	4620      	mov	r0, r4
    7d2a:	f007 ff7f 	bl	fc2c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    7d2e:	7038      	strb	r0, [r7, #0]
    7d30:	74e8      	strb	r0, [r5, #19]
    7d32:	4629      	mov	r1, r5
    7d34:	4620      	mov	r0, r4
    7d36:	f7fc fc57 	bl	45e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    7d3a:	4606      	mov	r6, r0
    7d3c:	7e68      	ldrb	r0, [r5, #25]
    7d3e:	b1d0      	cbz	r0, 7d76 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    7d40:	b12e      	cbz	r6, 7d4e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    7d42:	e018      	b.n	7d76 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    7d44:	f241 512e 	movw	r1, #5422	; 0x152e
    7d48:	2039      	movs	r0, #57	; 0x39
    7d4a:	f7f9 fe31 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d4e:	2200      	movs	r2, #0
    7d50:	4668      	mov	r0, sp
    7d52:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7d54:	f006 fdc7 	bl	e8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    7d58:	2200      	movs	r2, #0
    7d5a:	2101      	movs	r1, #1
    7d5c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7d5e:	f006 fe3c 	bl	e9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    7d62:	2204      	movs	r2, #4
    7d64:	4668      	mov	r0, sp
    7d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7d68:	f006 fdbd 	bl	e8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    7d6c:	2200      	movs	r2, #0
    7d6e:	4611      	mov	r1, r2
    7d70:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7d72:	f006 fe32 	bl	e9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    7d76:	4630      	mov	r0, r6
    7d78:	e7c8      	b.n	7d0c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    7d7a:	0000      	.short	0x0000
    7d7c:	20000294 	.word	0x20000294

00007d80 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    7d80:	7801      	ldrb	r1, [r0, #0]
    7d82:	b171      	cbz	r1, 7da2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7d84:	7841      	ldrb	r1, [r0, #1]
    7d86:	b161      	cbz	r1, 7da2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7d88:	8841      	ldrh	r1, [r0, #2]
    7d8a:	291b      	cmp	r1, #27
    7d8c:	d309      	bcc.n	7da2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7d8e:	8881      	ldrh	r1, [r0, #4]
    7d90:	291b      	cmp	r1, #27
    7d92:	d306      	bcc.n	7da2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7d94:	4904      	ldr	r1, [pc, #16]	; (7da8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    7d96:	6802      	ldr	r2, [r0, #0]
    7d98:	600a      	str	r2, [r1, #0]
    7d9a:	8880      	ldrh	r0, [r0, #4]
    7d9c:	8088      	strh	r0, [r1, #4]
    7d9e:	2000      	movs	r0, #0
    7da0:	4770      	bx	lr
    7da2:	2012      	movs	r0, #18
    7da4:	4770      	bx	lr
    7da6:	0000      	.short	0x0000
    7da8:	20001668 	.word	0x20001668

00007dac <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    7dac:	6800      	ldr	r0, [r0, #0]
    7dae:	f240 41e2 	movw	r1, #1250	; 0x4e2
    7db2:	4288      	cmp	r0, r1
    7db4:	d303      	bcc.n	7dbe <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    7db6:	4903      	ldr	r1, [pc, #12]	; (7dc4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    7db8:	6088      	str	r0, [r1, #8]
    7dba:	2000      	movs	r0, #0
    7dbc:	4770      	bx	lr
    7dbe:	2012      	movs	r0, #18
    7dc0:	4770      	bx	lr
    7dc2:	0000      	.short	0x0000
    7dc4:	20001668 	.word	0x20001668

00007dc8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    7dc8:	4a03      	ldr	r2, [pc, #12]	; (7dd8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    7dca:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    7dce:	6001      	str	r1, [r0, #0]
    7dd0:	6042      	str	r2, [r0, #4]
    7dd2:	2000      	movs	r0, #0
    7dd4:	4770      	bx	lr
    7dd6:	0000      	.short	0x0000
    7dd8:	00008324 	.word	0x00008324

00007ddc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    7ddc:	b50e      	push	{r1, r2, r3, lr}
    7dde:	8800      	ldrh	r0, [r0, #0]
    7de0:	4669      	mov	r1, sp
    7de2:	f006 ff4c 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7de6:	b960      	cbnz	r0, 7e02 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    7de8:	9801      	ldr	r0, [sp, #4]
    7dea:	f009 fbd2 	bl	11592 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    7dee:	b140      	cbz	r0, 7e02 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    7df0:	9801      	ldr	r0, [sp, #4]
    7df2:	4601      	mov	r1, r0
    7df4:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    7df8:	3080      	adds	r0, #128	; 0x80
    7dfa:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    7dfe:	b962      	cbnz	r2, 7e1a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    7e00:	e001      	b.n	7e06 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    7e02:	2002      	movs	r0, #2
    7e04:	bd0e      	pop	{r1, r2, r3, pc}
    7e06:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    7e0a:	f88d 2008 	strb.w	r2, [sp, #8]
    7e0e:	9a02      	ldr	r2, [sp, #8]
    7e10:	9202      	str	r2, [sp, #8]
    7e12:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7e16:	2201      	movs	r2, #1
    7e18:	b10b      	cbz	r3, 7e1e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    7e1a:	203a      	movs	r0, #58	; 0x3a
    7e1c:	bd0e      	pop	{r1, r2, r3, pc}
    7e1e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    7e22:	079b      	lsls	r3, r3, #30
    7e24:	d006      	beq.n	7e34 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    7e26:	2202      	movs	r2, #2
    7e28:	4905      	ldr	r1, [pc, #20]	; (7e40 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    7e2a:	305e      	adds	r0, #94	; 0x5e
    7e2c:	f007 fafa 	bl	f424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7e30:	2000      	movs	r0, #0
    7e32:	bd0e      	pop	{r1, r2, r3, pc}
    7e34:	700a      	strb	r2, [r1, #0]
    7e36:	4668      	mov	r0, sp
    7e38:	f007 fab4 	bl	f3a4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    7e3c:	e7f8      	b.n	7e30 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    7e3e:	0000      	.short	0x0000
    7e40:	0000f999 	.word	0x0000f999

00007e44 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ>:
    7e44:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    7e48:	4613      	mov	r3, r2
    7e4a:	4a33      	ldr	r2, [pc, #204]	; (7f18 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd4>)
    7e4c:	460f      	mov	r7, r1
    7e4e:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    7e52:	8814      	ldrh	r4, [r2, #0]
    7e54:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    7e58:	428c      	cmp	r4, r1
    7e5a:	d200      	bcs.n	7e5e <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x1a>
    7e5c:	4621      	mov	r1, r4
    7e5e:	4688      	mov	r8, r1
    7e60:	8891      	ldrh	r1, [r2, #4]
    7e62:	42b1      	cmp	r1, r6
    7e64:	d200      	bcs.n	7e68 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x24>
    7e66:	460e      	mov	r6, r1
    7e68:	8851      	ldrh	r1, [r2, #2]
    7e6a:	f640 0448 	movw	r4, #2120	; 0x848
    7e6e:	42a1      	cmp	r1, r4
    7e70:	d300      	bcc.n	7e74 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x30>
    7e72:	4621      	mov	r1, r4
    7e74:	88d5      	ldrh	r5, [r2, #6]
    7e76:	42a5      	cmp	r5, r4
    7e78:	d300      	bcc.n	7e7c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x38>
    7e7a:	4625      	mov	r5, r4
    7e7c:	42a1      	cmp	r1, r4
    7e7e:	d200      	bcs.n	7e82 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x3e>
    7e80:	460c      	mov	r4, r1
    7e82:	f44f 72a4 	mov.w	r2, #328	; 0x148
    7e86:	2e1b      	cmp	r6, #27
    7e88:	d001      	beq.n	7e8e <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x4a>
    7e8a:	4295      	cmp	r5, r2
    7e8c:	d104      	bne.n	7e98 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x54>
    7e8e:	f1b8 0f1b 	cmp.w	r8, #27
    7e92:	d03e      	beq.n	7f12 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    7e94:	4294      	cmp	r4, r2
    7e96:	d03c      	beq.n	7f12 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    7e98:	466a      	mov	r2, sp
    7e9a:	4619      	mov	r1, r3
    7e9c:	f009 fb20 	bl	114e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    7ea0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7ea4:	4641      	mov	r1, r8
    7ea6:	4540      	cmp	r0, r8
    7ea8:	d900      	bls.n	7eac <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x68>
    7eaa:	4608      	mov	r0, r1
    7eac:	80f8      	strh	r0, [r7, #6]
    7eae:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7eb2:	42a1      	cmp	r1, r4
    7eb4:	d800      	bhi.n	7eb8 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x74>
    7eb6:	460c      	mov	r4, r1
    7eb8:	813c      	strh	r4, [r7, #8]
    7eba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7ebe:	42b1      	cmp	r1, r6
    7ec0:	d800      	bhi.n	7ec4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x80>
    7ec2:	460e      	mov	r6, r1
    7ec4:	807e      	strh	r6, [r7, #2]
    7ec6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7eca:	42a9      	cmp	r1, r5
    7ecc:	d800      	bhi.n	7ed0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x8c>
    7ece:	460d      	mov	r5, r1
    7ed0:	80bd      	strh	r5, [r7, #4]
    7ed2:	21ff      	movs	r1, #255	; 0xff
    7ed4:	7039      	strb	r1, [r7, #0]
    7ed6:	381b      	subs	r0, #27
    7ed8:	28e0      	cmp	r0, #224	; 0xe0
    7eda:	d902      	bls.n	7ee2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x9e>
    7edc:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
    7ee0:	e014      	b.n	7f0c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    7ee2:	3e1b      	subs	r6, #27
    7ee4:	2ee0      	cmp	r6, #224	; 0xe0
    7ee6:	d902      	bls.n	7eee <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xaa>
    7ee8:	f240 51b2 	movw	r1, #1458	; 0x5b2
    7eec:	e00e      	b.n	7f0c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    7eee:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    7ef2:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    7ef6:	4284      	cmp	r4, r0
    7ef8:	d902      	bls.n	7f00 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xbc>
    7efa:	f240 51b4 	movw	r1, #1460	; 0x5b4
    7efe:	e005      	b.n	7f0c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    7f00:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    7f04:	4285      	cmp	r5, r0
    7f06:	d904      	bls.n	7f12 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    7f08:	f240 51b6 	movw	r1, #1462	; 0x5b6
    7f0c:	2039      	movs	r0, #57	; 0x39
    7f0e:	f7f9 fd4f 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f12:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    7f16:	0000      	.short	0x0000
    7f18:	2000029c 	.word	0x2000029c

00007f1c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
    7f1c:	b570      	push	{r4, r5, r6, lr}
    7f1e:	b086      	sub	sp, #24
    7f20:	4604      	mov	r4, r0
    7f22:	f000 fa9d 	bl	8460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7f26:	0940      	lsrs	r0, r0, #5
    7f28:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    7f2c:	4e2d      	ldr	r6, [pc, #180]	; (7fe4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
    7f2e:	07c0      	lsls	r0, r0, #31
    7f30:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    7f34:	d002      	beq.n	7f3c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
    7f36:	8871      	ldrh	r1, [r6, #2]
    7f38:	88b0      	ldrh	r0, [r6, #4]
    7f3a:	e001      	b.n	7f40 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
    7f3c:	211b      	movs	r1, #27
    7f3e:	4608      	mov	r0, r1
    7f40:	84e9      	strh	r1, [r5, #38]	; 0x26
    7f42:	8528      	strh	r0, [r5, #40]	; 0x28
    7f44:	f000 fa8c 	bl	8460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7f48:	0788      	lsls	r0, r1, #30
    7f4a:	f04f 0501 	mov.w	r5, #1
    7f4e:	d505      	bpl.n	7f5c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
    7f50:	f88d 5000 	strb.w	r5, [sp]
    7f54:	4668      	mov	r0, sp
    7f56:	9401      	str	r4, [sp, #4]
    7f58:	f7ff fe08 	bl	7b6c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    7f5c:	68b0      	ldr	r0, [r6, #8]
    7f5e:	62e0      	str	r0, [r4, #44]	; 0x2c
    7f60:	f641 514c 	movw	r1, #7500	; 0x1d4c
    7f64:	6121      	str	r1, [r4, #16]
    7f66:	8821      	ldrh	r1, [r4, #0]
    7f68:	f8ad 1004 	strh.w	r1, [sp, #4]
    7f6c:	7bb1      	ldrb	r1, [r6, #14]
    7f6e:	f88d 1006 	strb.w	r1, [sp, #6]
    7f72:	7bf1      	ldrb	r1, [r6, #15]
    7f74:	f88d 1007 	strb.w	r1, [sp, #7]
    7f78:	8a31      	ldrh	r1, [r6, #16]
    7f7a:	f8ad 1008 	strh.w	r1, [sp, #8]
    7f7e:	a904      	add	r1, sp, #16
    7f80:	9100      	str	r1, [sp, #0]
    7f82:	4628      	mov	r0, r5
    7f84:	ab03      	add	r3, sp, #12
    7f86:	aa01      	add	r2, sp, #4
    7f88:	4621      	mov	r1, r4
    7f8a:	f009 fadf 	bl	1154c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    7f8e:	b138      	cbz	r0, 7fa0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
    7f90:	8820      	ldrh	r0, [r4, #0]
    7f92:	2100      	movs	r1, #0
    7f94:	f7fa f8dc 	bl	2150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7f98:	b308      	cbz	r0, 7fde <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
    7f9a:	f240 517d 	movw	r1, #1405	; 0x57d
    7f9e:	e01b      	b.n	7fd8 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
    7fa0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    7fa4:	f88d 0014 	strb.w	r0, [sp, #20]
    7fa8:	f89d 0010 	ldrb.w	r0, [sp, #16]
    7fac:	f88d 0015 	strb.w	r0, [sp, #21]
    7fb0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    7fb4:	f8ad 0016 	strh.w	r0, [sp, #22]
    7fb8:	a905      	add	r1, sp, #20
    7fba:	4620      	mov	r0, r4
    7fbc:	f006 ff1c 	bl	edf8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    7fc0:	7870      	ldrb	r0, [r6, #1]
    7fc2:	9000      	str	r0, [sp, #0]
    7fc4:	7833      	ldrb	r3, [r6, #0]
    7fc6:	88b2      	ldrh	r2, [r6, #4]
    7fc8:	8871      	ldrh	r1, [r6, #2]
    7fca:	8820      	ldrh	r0, [r4, #0]
    7fcc:	f7fa f8f2 	bl	21b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    7fd0:	2800      	cmp	r0, #0
    7fd2:	d005      	beq.n	7fe0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
    7fd4:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    7fd8:	2039      	movs	r0, #57	; 0x39
    7fda:	f7f9 fce9 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fde:	2009      	movs	r0, #9
    7fe0:	b006      	add	sp, #24
    7fe2:	bd70      	pop	{r4, r5, r6, pc}
    7fe4:	20001668 	.word	0x20001668

00007fe8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    7fe8:	b510      	push	{r4, lr}
    7fea:	2005      	movs	r0, #5
    7fec:	f000 fa2c 	bl	8448 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    7ff0:	f7fd ff84 	bl	5efc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    7ff4:	4902      	ldr	r1, [pc, #8]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7ff6:	4801      	ldr	r0, [pc, #4]	; (7ffc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    7ff8:	6048      	str	r0, [r1, #4]
    7ffa:	bd10      	pop	{r4, pc}
    7ffc:	00007e45 	.word	0x00007e45
    8000:	20000294 	.word	0x20000294
    8004:	b51c      	push	{r2, r3, r4, lr}
    8006:	4909      	ldr	r1, [pc, #36]	; (802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    8008:	e9d1 0100 	ldrd	r0, r1, [r1]
    800c:	e9cd 0100 	strd	r0, r1, [sp]
    8010:	e005      	b.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    8012:	9800      	ldr	r0, [sp, #0]
    8014:	f007 ffca 	bl	ffac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    8018:	b108      	cbz	r0, 801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    801a:	2001      	movs	r0, #1
    801c:	bd1c      	pop	{r2, r3, r4, pc}
    801e:	4668      	mov	r0, sp
    8020:	f7fa f846 	bl	20b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8024:	2800      	cmp	r0, #0
    8026:	d0f4      	beq.n	8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    8028:	2000      	movs	r0, #0
    802a:	bd1c      	pop	{r2, r3, r4, pc}
    802c:	00008324 	.word	0x00008324
    8030:	b510      	push	{r4, lr}
    8032:	480d      	ldr	r0, [pc, #52]	; (8068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>)
    8034:	2100      	movs	r1, #0
    8036:	4b0d      	ldr	r3, [pc, #52]	; (806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>)
    8038:	74c1      	strb	r1, [r0, #19]
    803a:	8281      	strh	r1, [r0, #20]
    803c:	221b      	movs	r2, #27
    803e:	801a      	strh	r2, [r3, #0]
    8040:	f44f 74a4 	mov.w	r4, #328	; 0x148
    8044:	805c      	strh	r4, [r3, #2]
    8046:	809a      	strh	r2, [r3, #4]
    8048:	80dc      	strh	r4, [r3, #6]
    804a:	7381      	strb	r1, [r0, #14]
    804c:	73c1      	strb	r1, [r0, #15]
    804e:	2303      	movs	r3, #3
    8050:	7003      	strb	r3, [r0, #0]
    8052:	2302      	movs	r3, #2
    8054:	7043      	strb	r3, [r0, #1]
    8056:	8042      	strh	r2, [r0, #2]
    8058:	8082      	strh	r2, [r0, #4]
    805a:	f640 62a6 	movw	r2, #3750	; 0xea6
    805e:	6082      	str	r2, [r0, #8]
    8060:	7481      	strb	r1, [r0, #18]
    8062:	7301      	strb	r1, [r0, #12]
    8064:	bd10      	pop	{r4, pc}
    8066:	0000      	.short	0x0000
    8068:	20001668 	.word	0x20001668
    806c:	2000029c 	.word	0x2000029c
    8070:	b510      	push	{r4, lr}
    8072:	2101      	movs	r1, #1
    8074:	2000      	movs	r0, #0
    8076:	f7f9 ffc9 	bl	200c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    807a:	0004      	movs	r4, r0
    807c:	d10a      	bne.n	8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    807e:	2101      	movs	r1, #1
    8080:	f7f9 ff8c 	bl	1f9c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    8084:	0004      	movs	r4, r0
    8086:	d007      	beq.n	8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>
    8088:	4806      	ldr	r0, [pc, #24]	; (80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>)
    808a:	f990 1000 	ldrsb.w	r1, [r0]
    808e:	4620      	mov	r0, r4
    8090:	f007 fd61 	bl	fb56 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    8094:	4620      	mov	r0, r4
    8096:	bd10      	pop	{r4, pc}
    8098:	f240 3113 	movw	r1, #787	; 0x313
    809c:	2039      	movs	r0, #57	; 0x39
    809e:	f7f9 fc87 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80a2:	0000      	.short	0x0000
    80a4:	20000294 	.word	0x20000294

000080a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    80a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80aa:	460c      	mov	r4, r1
    80ac:	4605      	mov	r5, r0
    80ae:	f007 fdc0 	bl	fc32 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    80b2:	b158      	cbz	r0, 80cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    80b4:	4628      	mov	r0, r5
    80b6:	f007 fdaf 	bl	fc18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    80ba:	b148      	cbz	r0, 80d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    80bc:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    80c0:	2112      	movs	r1, #18
    80c2:	b108      	cbz	r0, 80c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    80c4:	2880      	cmp	r0, #128	; 0x80
    80c6:	d903      	bls.n	80d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    80c8:	4608      	mov	r0, r1
    80ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    80cc:	2142      	movs	r1, #66	; 0x42
    80ce:	e7fb      	b.n	80c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    80d0:	4628      	mov	r0, r5
    80d2:	f007 fd92 	bl	fbfa <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    80d6:	b120      	cbz	r0, 80e2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    80d8:	4628      	mov	r0, r5
    80da:	f007 fcfd 	bl	fad8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    80de:	b110      	cbz	r0, 80e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
    80e0:	e005      	b.n	80ee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    80e2:	210c      	movs	r1, #12
    80e4:	e7f0      	b.n	80c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    80e6:	4628      	mov	r0, r5
    80e8:	f007 fd90 	bl	fc0c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    80ec:	b120      	cbz	r0, 80f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
    80ee:	4628      	mov	r0, r5
    80f0:	f007 ff5c 	bl	ffac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    80f4:	b930      	cbnz	r0, 8104 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    80f6:	e001      	b.n	80fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    80f8:	2012      	movs	r0, #18
    80fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    80fc:	4628      	mov	r0, r5
    80fe:	f007 fd06 	bl	fb0e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    8102:	b108      	cbz	r0, 8108 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
    8104:	200c      	movs	r0, #12
    8106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8108:	4628      	mov	r0, r5
    810a:	f7fc fa0b 	bl	4524 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    810e:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    8112:	f242 7010 	movw	r0, #10000	; 0x2710
    8116:	4346      	muls	r6, r0
    8118:	78e1      	ldrb	r1, [r4, #3]
    811a:	4628      	mov	r0, r5
    811c:	f007 fd64 	bl	fbe8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    8120:	4628      	mov	r0, r5
    8122:	f007 fd75 	bl	fc10 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    8126:	b1a8      	cbz	r0, 8154 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
    8128:	2100      	movs	r1, #0
    812a:	4668      	mov	r0, sp
    812c:	f7f9 ffe2 	bl	20f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    8130:	0004      	movs	r4, r0
    8132:	d019      	beq.n	8168 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    8134:	2100      	movs	r1, #0
    8136:	f7fb fae7 	bl	3708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    813a:	f8bd 0000 	ldrh.w	r0, [sp]
    813e:	8020      	strh	r0, [r4, #0]
    8140:	4621      	mov	r1, r4
    8142:	4628      	mov	r0, r5
    8144:	f007 fd8c 	bl	fc60 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    8148:	4628      	mov	r0, r5
    814a:	f007 fd69 	bl	fc20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    814e:	b168      	cbz	r0, 816c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    8150:	2001      	movs	r0, #1
    8152:	e00e      	b.n	8172 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
    8154:	4632      	mov	r2, r6
    8156:	2100      	movs	r1, #0
    8158:	4628      	mov	r0, r5
    815a:	f7fd f921 	bl	53a0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    815e:	2800      	cmp	r0, #0
    8160:	d0d1      	beq.n	8106 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
    8162:	f241 7168 	movw	r1, #5992	; 0x1768
    8166:	e012      	b.n	818e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
    8168:	200d      	movs	r0, #13
    816a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    816c:	4628      	mov	r0, r5
    816e:	f007 fd75 	bl	fc5c <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    8172:	4601      	mov	r1, r0
    8174:	4620      	mov	r0, r4
    8176:	f7ff fed1 	bl	7f1c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
    817a:	2800      	cmp	r0, #0
    817c:	d1f5      	bne.n	816a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    817e:	4632      	mov	r2, r6
    8180:	4621      	mov	r1, r4
    8182:	4628      	mov	r0, r5
    8184:	f7fd f90c 	bl	53a0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    8188:	b120      	cbz	r0, 8194 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    818a:	f241 718b 	movw	r1, #6027	; 0x178b
    818e:	2039      	movs	r0, #57	; 0x39
    8190:	f7f9 fc0e 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8194:	4804      	ldr	r0, [pc, #16]	; (81a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
    8196:	6843      	ldr	r3, [r0, #4]
    8198:	b123      	cbz	r3, 81a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    819a:	2200      	movs	r2, #0
    819c:	f504 7199 	add.w	r1, r4, #306	; 0x132
    81a0:	4620      	mov	r0, r4
    81a2:	4798      	blx	r3
    81a4:	2000      	movs	r0, #0
    81a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    81a8:	20000294 	.word	0x20000294
    81ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81b0:	b088      	sub	sp, #32
    81b2:	4604      	mov	r4, r0
    81b4:	8800      	ldrh	r0, [r0, #0]
    81b6:	a906      	add	r1, sp, #24
    81b8:	f006 fd61 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    81bc:	2800      	cmp	r0, #0
    81be:	d147      	bne.n	8250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    81c0:	9807      	ldr	r0, [sp, #28]
    81c2:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    81c6:	f88d 1008 	strb.w	r1, [sp, #8]
    81ca:	9902      	ldr	r1, [sp, #8]
    81cc:	9102      	str	r1, [sp, #8]
    81ce:	f89d 1008 	ldrb.w	r1, [sp, #8]
    81d2:	3080      	adds	r0, #128	; 0x80
    81d4:	b101      	cbz	r1, 81d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x130>
    81d6:	2101      	movs	r1, #1
    81d8:	f88d 100c 	strb.w	r1, [sp, #12]
    81dc:	7b01      	ldrb	r1, [r0, #12]
    81de:	f04f 0800 	mov.w	r8, #0
    81e2:	0689      	lsls	r1, r1, #26
    81e4:	d502      	bpl.n	81ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x144>
    81e6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    81ea:	b149      	cbz	r1, 8200 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x158>
    81ec:	f05f 0100 	movs.w	r1, #0
    81f0:	f88d 1004 	strb.w	r1, [sp, #4]
    81f4:	2105      	movs	r1, #5
    81f6:	306c      	adds	r0, #108	; 0x6c
    81f8:	f008 fb6f 	bl	108da <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    81fc:	b110      	cbz	r0, 8204 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15c>
    81fe:	e004      	b.n	820a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
    8200:	2101      	movs	r1, #1
    8202:	e7f5      	b.n	81f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x148>
    8204:	f89d 0004 	ldrb.w	r0, [sp, #4]
    8208:	b308      	cbz	r0, 824e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a6>
    820a:	8921      	ldrh	r1, [r4, #8]
    820c:	88e0      	ldrh	r0, [r4, #6]
    820e:	f009 f959 	bl	114c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    8212:	2800      	cmp	r0, #0
    8214:	d11c      	bne.n	8250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    8216:	88a1      	ldrh	r1, [r4, #4]
    8218:	8860      	ldrh	r0, [r4, #2]
    821a:	f009 f953 	bl	114c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    821e:	2800      	cmp	r0, #0
    8220:	d116      	bne.n	8250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    8222:	8921      	ldrh	r1, [r4, #8]
    8224:	88e0      	ldrh	r0, [r4, #6]
    8226:	f009 f943 	bl	114b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    822a:	2800      	cmp	r0, #0
    822c:	d110      	bne.n	8250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    822e:	88a1      	ldrh	r1, [r4, #4]
    8230:	8860      	ldrh	r0, [r4, #2]
    8232:	f009 f93d 	bl	114b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    8236:	0006      	movs	r6, r0
    8238:	d10a      	bne.n	8250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    823a:	9807      	ldr	r0, [sp, #28]
    823c:	f500 7599 	add.w	r5, r0, #306	; 0x132
    8240:	27ff      	movs	r7, #255	; 0xff
    8242:	706f      	strb	r7, [r5, #1]
    8244:	f89d 100c 	ldrb.w	r1, [sp, #12]
    8248:	b129      	cbz	r1, 8256 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ae>
    824a:	263a      	movs	r6, #58	; 0x3a
    824c:	e02e      	b.n	82ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    824e:	201a      	movs	r0, #26
    8250:	b008      	add	sp, #32
    8252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8256:	4641      	mov	r1, r8
    8258:	aa03      	add	r2, sp, #12
    825a:	f009 f941 	bl	114e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    825e:	8861      	ldrh	r1, [r4, #2]
    8260:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    8264:	4281      	cmp	r1, r0
    8266:	d200      	bcs.n	826a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c2>
    8268:	4608      	mov	r0, r1
    826a:	80e8      	strh	r0, [r5, #6]
    826c:	88a1      	ldrh	r1, [r4, #4]
    826e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    8272:	4281      	cmp	r1, r0
    8274:	d200      	bcs.n	8278 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    8276:	4608      	mov	r0, r1
    8278:	8128      	strh	r0, [r5, #8]
    827a:	88e2      	ldrh	r2, [r4, #6]
    827c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    8280:	428a      	cmp	r2, r1
    8282:	d200      	bcs.n	8286 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1de>
    8284:	4611      	mov	r1, r2
    8286:	8069      	strh	r1, [r5, #2]
    8288:	8922      	ldrh	r2, [r4, #8]
    828a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    828e:	428a      	cmp	r2, r1
    8290:	d200      	bcs.n	8294 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    8292:	4611      	mov	r1, r2
    8294:	f640 0248 	movw	r2, #2120	; 0x848
    8298:	80a9      	strh	r1, [r5, #4]
    829a:	4291      	cmp	r1, r2
    829c:	d300      	bcc.n	82a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    829e:	4611      	mov	r1, r2
    82a0:	80a9      	strh	r1, [r5, #4]
    82a2:	4290      	cmp	r0, r2
    82a4:	d200      	bcs.n	82a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    82a6:	4602      	mov	r2, r0
    82a8:	812a      	strh	r2, [r5, #8]
    82aa:	702f      	strb	r7, [r5, #0]
    82ac:	f885 8001 	strb.w	r8, [r5, #1]
    82b0:	4630      	mov	r0, r6
    82b2:	e7cd      	b.n	8250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    82b4:	b51c      	push	{r2, r3, r4, lr}
    82b6:	490c      	ldr	r1, [pc, #48]	; (82e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>)
    82b8:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    82bc:	e9cd 0100 	strd	r0, r1, [sp]
    82c0:	e00a      	b.n	82d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    82c2:	9c00      	ldr	r4, [sp, #0]
    82c4:	4620      	mov	r0, r4
    82c6:	f007 fe71 	bl	ffac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    82ca:	b128      	cbz	r0, 82d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    82cc:	4620      	mov	r0, r4
    82ce:	f007 fcd6 	bl	fc7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    82d2:	b108      	cbz	r0, 82d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    82d4:	2001      	movs	r0, #1
    82d6:	bd1c      	pop	{r2, r3, r4, pc}
    82d8:	4668      	mov	r0, sp
    82da:	f7f9 fee9 	bl	20b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    82de:	2800      	cmp	r0, #0
    82e0:	d0ef      	beq.n	82c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21a>
    82e2:	2000      	movs	r0, #0
    82e4:	bd1c      	pop	{r2, r3, r4, pc}
    82e6:	0000      	.short	0x0000
    82e8:	00008324 	.word	0x00008324
    82ec:	b510      	push	{r4, lr}
    82ee:	4604      	mov	r4, r0
    82f0:	88c1      	ldrh	r1, [r0, #6]
    82f2:	8880      	ldrh	r0, [r0, #4]
    82f4:	f009 f8e6 	bl	114c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    82f8:	2800      	cmp	r0, #0
    82fa:	d10f      	bne.n	831c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    82fc:	8861      	ldrh	r1, [r4, #2]
    82fe:	8820      	ldrh	r0, [r4, #0]
    8300:	f009 f8e0 	bl	114c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    8304:	2800      	cmp	r0, #0
    8306:	d109      	bne.n	831c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    8308:	4805      	ldr	r0, [pc, #20]	; (8320 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x278>)
    830a:	88a1      	ldrh	r1, [r4, #4]
    830c:	8081      	strh	r1, [r0, #4]
    830e:	8821      	ldrh	r1, [r4, #0]
    8310:	8001      	strh	r1, [r0, #0]
    8312:	88e1      	ldrh	r1, [r4, #6]
    8314:	80c1      	strh	r1, [r0, #6]
    8316:	8861      	ldrh	r1, [r4, #2]
    8318:	8041      	strh	r1, [r0, #2]
    831a:	2000      	movs	r0, #0
    831c:	bd10      	pop	{r4, pc}
    831e:	0000      	.short	0x0000
    8320:	2000029c 	.word	0x2000029c
    8324:	00000000 	.word	0x00000000
    8328:	00010000 	.word	0x00010000
    832c:	00000000 	.word	0x00000000
    8330:	00010000 	.word	0x00010000
    8334:	0d10770d 	.word	0x0d10770d
    8338:	10770059 	.word	0x10770059
    833c:	00000000 	.word	0x00000000
    8340:	00010000 	.word	0x00010000
    8344:	00000000 	.word	0x00000000
    8348:	00010000 	.word	0x00010000

0000834c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    834c:	b510      	push	{r4, lr}
    834e:	f7fb fc77 	bl	3c40 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    8352:	4c05      	ldr	r4, [pc, #20]	; (8368 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    8354:	6860      	ldr	r0, [r4, #4]
    8356:	f009 f9c4 	bl	116e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3de>
    835a:	f008 ff58 	bl	1120e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    835e:	f7fb fe1d 	bl	3f9c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    8362:	2001      	movs	r0, #1
    8364:	7020      	strb	r0, [r4, #0]
    8366:	bd10      	pop	{r4, pc}
    8368:	200002a4 	.word	0x200002a4

0000836c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    836c:	4801      	ldr	r0, [pc, #4]	; (8374 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    836e:	7800      	ldrb	r0, [r0, #0]
    8370:	4770      	bx	lr
    8372:	0000      	.short	0x0000
    8374:	200002a4 	.word	0x200002a4

00008378 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    8378:	b510      	push	{r4, lr}
    837a:	4c06      	ldr	r4, [pc, #24]	; (8394 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    837c:	68a0      	ldr	r0, [r4, #8]
    837e:	f009 f9b0 	bl	116e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3de>
    8382:	68e0      	ldr	r0, [r4, #12]
    8384:	f009 f9ad 	bl	116e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3de>
    8388:	f008 ffab 	bl	112e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    838c:	2000      	movs	r0, #0
    838e:	7020      	strb	r0, [r4, #0]
    8390:	bd10      	pop	{r4, pc}
    8392:	0000      	.short	0x0000
    8394:	200002a4 	.word	0x200002a4

00008398 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    8398:	b510      	push	{r4, lr}
    839a:	4905      	ldr	r1, [pc, #20]	; (83b0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    839c:	4805      	ldr	r0, [pc, #20]	; (83b4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    839e:	f009 f993 	bl	116c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    83a2:	4804      	ldr	r0, [pc, #16]	; (83b4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    83a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    83a8:	4903      	ldr	r1, [pc, #12]	; (83b8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    83aa:	1d00      	adds	r0, r0, #4
    83ac:	f009 b98c 	b.w	116c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    83b0:	200002b4 	.word	0x200002b4
    83b4:	200002a8 	.word	0x200002a8
    83b8:	200002bc 	.word	0x200002bc

000083bc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    83bc:	b510      	push	{r4, lr}
    83be:	4908      	ldr	r1, [pc, #32]	; (83e0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    83c0:	4808      	ldr	r0, [pc, #32]	; (83e4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    83c2:	f009 f981 	bl	116c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    83c6:	4807      	ldr	r0, [pc, #28]	; (83e4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    83c8:	4907      	ldr	r1, [pc, #28]	; (83e8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    83ca:	1d00      	adds	r0, r0, #4
    83cc:	f009 f97c 	bl	116c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    83d0:	4804      	ldr	r0, [pc, #16]	; (83e4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    83d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    83d6:	4905      	ldr	r1, [pc, #20]	; (83ec <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    83d8:	3008      	adds	r0, #8
    83da:	f009 b975 	b.w	116c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    83de:	0000      	.short	0x0000
    83e0:	200002cc 	.word	0x200002cc
    83e4:	200002a8 	.word	0x200002a8
    83e8:	200002d4 	.word	0x200002d4
    83ec:	200002c4 	.word	0x200002c4

000083f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    83f0:	4801      	ldr	r0, [pc, #4]	; (83f8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    83f2:	7840      	ldrb	r0, [r0, #1]
    83f4:	4770      	bx	lr
    83f6:	0000      	.short	0x0000
    83f8:	200002a4 	.word	0x200002a4
    83fc:	b510      	push	{r4, lr}
    83fe:	f7fc f9b3 	bl	4768 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    8402:	f7fd f87d 	bl	5500 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    8406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    840a:	4801      	ldr	r0, [pc, #4]	; (8410 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    840c:	f7fc b992 	b.w	4734 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    8410:	20001900 	.word	0x20001900
    8414:	490a      	ldr	r1, [pc, #40]	; (8440 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    8416:	b510      	push	{r4, lr}
    8418:	2001      	movs	r0, #1
    841a:	7048      	strb	r0, [r1, #1]
    841c:	f7fc f9d4 	bl	47c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    8420:	f7fd fd84 	bl	5f2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    8424:	f006 fb5a 	bl	eadc <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    8428:	4906      	ldr	r1, [pc, #24]	; (8444 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    842a:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    842e:	f7fa fa71 	bl	2914 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>
    8432:	2000      	movs	r0, #0
    8434:	f006 f9a0 	bl	e778 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    8438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    843c:	f7fb bc06 	b.w	3c4c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    8440:	200002a4 	.word	0x200002a4
    8444:	20001a02 	.word	0x20001a02

00008448 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    8448:	4a04      	ldr	r2, [pc, #16]	; (845c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    844a:	08c1      	lsrs	r1, r0, #3
    844c:	f000 0307 	and.w	r3, r0, #7
    8450:	2001      	movs	r0, #1
    8452:	4098      	lsls	r0, r3
    8454:	5c53      	ldrb	r3, [r2, r1]
    8456:	4303      	orrs	r3, r0
    8458:	5453      	strb	r3, [r2, r1]
    845a:	4770      	bx	lr
    845c:	20000020 	.word	0x20000020

00008460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    8460:	4901      	ldr	r1, [pc, #4]	; (8468 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    8462:	e9d1 0100 	ldrd	r0, r1, [r1]
    8466:	4770      	bx	lr
    8468:	20000020 	.word	0x20000020

0000846c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    846c:	4806      	ldr	r0, [pc, #24]	; (8488 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    846e:	8801      	ldrh	r1, [r0, #0]
    8470:	7900      	ldrb	r0, [r0, #4]
    8472:	0602      	lsls	r2, r0, #24
    8474:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    8478:	f000 0001 	and.w	r0, r0, #1
    847c:	1800      	adds	r0, r0, r0
    847e:	b2c0      	uxtb	r0, r0
    8480:	f040 0001 	orr.w	r0, r0, #1
    8484:	4770      	bx	lr
    8486:	0000      	.short	0x0000
    8488:	20000020 	.word	0x20000020

0000848c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    848c:	b510      	push	{r4, lr}
    848e:	f004 fee7 	bl	d260 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    8492:	2200      	movs	r2, #0
    8494:	4b08      	ldr	r3, [pc, #32]	; (84b8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    8496:	4611      	mov	r1, r2
    8498:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    849c:	4284      	cmp	r4, r0
    849e:	d303      	bcc.n	84a8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    84a0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    84a4:	7882      	ldrb	r2, [r0, #2]
    84a6:	e003      	b.n	84b0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    84a8:	1c49      	adds	r1, r1, #1
    84aa:	b2c9      	uxtb	r1, r1
    84ac:	290c      	cmp	r1, #12
    84ae:	d3f3      	bcc.n	8498 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    84b0:	4802      	ldr	r0, [pc, #8]	; (84bc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    84b2:	7002      	strb	r2, [r0, #0]
    84b4:	bd10      	pop	{r4, pc}
    84b6:	0000      	.short	0x0000
    84b8:	00011734 	.word	0x00011734
    84bc:	20000377 	.word	0x20000377

000084c0 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>:
    84c0:	b570      	push	{r4, r5, r6, lr}
    84c2:	6845      	ldr	r5, [r0, #4]
    84c4:	f505 76d3 	add.w	r6, r5, #422	; 0x1a6
    84c8:	8828      	ldrh	r0, [r5, #0]
    84ca:	f826 0902 	strh.w	r0, [r6], #-2
    84ce:	f505 7498 	add.w	r4, r5, #304	; 0x130
    84d2:	7031      	strb	r1, [r6, #0]
    84d4:	f895 006a 	ldrb.w	r0, [r5, #106]	; 0x6a
    84d8:	f009 f960 	bl	1179c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    84dc:	7130      	strb	r0, [r6, #4]
    84de:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    84e2:	f009 f95b 	bl	1179c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    84e6:	f806 0f05 	strb.w	r0, [r6, #5]!
    84ea:	2202      	movs	r2, #2
    84ec:	4903      	ldr	r1, [pc, #12]	; (84fc <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA+0x3c>)
    84ee:	f1a6 000f 	sub.w	r0, r6, #15
    84f2:	f006 ff97 	bl	f424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    84f6:	2000      	movs	r0, #0
    84f8:	7320      	strb	r0, [r4, #12]
    84fa:	bd70      	pop	{r4, r5, r6, pc}
    84fc:	00011789 	.word	0x00011789

00008500 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
    8500:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8502:	460e      	mov	r6, r1
    8504:	4604      	mov	r4, r0
    8506:	f7fb fa63 	bl	39d0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    850a:	2500      	movs	r5, #0
    850c:	b320      	cbz	r0, 8558 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x58>
    850e:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
    8512:	a902      	add	r1, sp, #8
    8514:	8820      	ldrh	r0, [r4, #0]
    8516:	f8ad 0000 	strh.w	r0, [sp]
    851a:	f006 fbb0 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    851e:	b108      	cbz	r0, 8524 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x24>
    8520:	2126      	movs	r1, #38	; 0x26
    8522:	e010      	b.n	8546 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x46>
    8524:	9803      	ldr	r0, [sp, #12]
    8526:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    852a:	f88d 1002 	strb.w	r1, [sp, #2]
    852e:	7841      	ldrb	r1, [r0, #1]
    8530:	f88d 1003 	strb.w	r1, [sp, #3]
    8534:	8840      	ldrh	r0, [r0, #2]
    8536:	f8ad 0004 	strh.w	r0, [sp, #4]
    853a:	2102      	movs	r1, #2
    853c:	4668      	mov	r0, sp
    853e:	f008 fe68 	bl	11212 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    8542:	b118      	cbz	r0, 854c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4c>
    8544:	213c      	movs	r1, #60	; 0x3c
    8546:	207e      	movs	r0, #126	; 0x7e
    8548:	f7f9 fa32 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    854c:	f8cd 5000 	str.w	r5, [sp]
    8550:	f8bd 0000 	ldrh.w	r0, [sp]
    8554:	b004      	add	sp, #16
    8556:	bd70      	pop	{r4, r5, r6, pc}
    8558:	201c      	movs	r0, #28
    855a:	7030      	strb	r0, [r6, #0]
    855c:	7075      	strb	r5, [r6, #1]
    855e:	f8d4 000a 	ldr.w	r0, [r4, #10]
    8562:	6070      	str	r0, [r6, #4]
    8564:	4801      	ldr	r0, [pc, #4]	; (856c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x6c>)
    8566:	6800      	ldr	r0, [r0, #0]
    8568:	9000      	str	r0, [sp, #0]
    856a:	e7f1      	b.n	8550 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x50>
    856c:	00008570 	.word	0x00008570
    8570:	00000004 	.word	0x00000004

00008574 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    8574:	b570      	push	{r4, r5, r6, lr}
    8576:	4605      	mov	r5, r0
    8578:	4616      	mov	r6, r2
    857a:	460c      	mov	r4, r1
    857c:	2002      	movs	r0, #2
    857e:	f000 f9b7 	bl	88f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    8582:	4906      	ldr	r1, [pc, #24]	; (859c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    8584:	2001      	movs	r0, #1
    8586:	1ef6      	subs	r6, r6, #3
    8588:	7008      	strb	r0, [r1, #0]
    858a:	4805      	ldr	r0, [pc, #20]	; (85a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    858c:	6006      	str	r6, [r0, #0]
    858e:	4804      	ldr	r0, [pc, #16]	; (85a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    8590:	3808      	subs	r0, #8
    8592:	6005      	str	r5, [r0, #0]
    8594:	1f00      	subs	r0, r0, #4
    8596:	6004      	str	r4, [r0, #0]
    8598:	bd70      	pop	{r4, r5, r6, pc}
    859a:	0000      	.short	0x0000
    859c:	20000378 	.word	0x20000378
    85a0:	4000f510 	.word	0x4000f510

000085a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    85a4:	b510      	push	{r4, lr}
    85a6:	4c0c      	ldr	r4, [pc, #48]	; (85d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    85a8:	7820      	ldrb	r0, [r4, #0]
    85aa:	b180      	cbz	r0, 85ce <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    85ac:	490b      	ldr	r1, [pc, #44]	; (85dc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    85ae:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    85b2:	6008      	str	r0, [r1, #0]
    85b4:	f000 f86a 	bl	868c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    85b8:	2100      	movs	r1, #0
    85ba:	b120      	cbz	r0, 85c6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    85bc:	2001      	movs	r0, #1
    85be:	7060      	strb	r0, [r4, #1]
    85c0:	4807      	ldr	r0, [pc, #28]	; (85e0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    85c2:	6800      	ldr	r0, [r0, #0]
    85c4:	e001      	b.n	85ca <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    85c6:	7061      	strb	r1, [r4, #1]
    85c8:	2010      	movs	r0, #16
    85ca:	70a0      	strb	r0, [r4, #2]
    85cc:	7021      	strb	r1, [r4, #0]
    85ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    85d2:	2000      	movs	r0, #0
    85d4:	f000 b98c 	b.w	88f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    85d8:	20000378 	.word	0x20000378
    85dc:	4001f508 	.word	0x4001f508
    85e0:	4000f400 	.word	0x4000f400

000085e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    85e4:	b510      	push	{r4, lr}
    85e6:	2002      	movs	r0, #2
    85e8:	f000 f982 	bl	88f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    85ec:	4904      	ldr	r1, [pc, #16]	; (8600 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    85ee:	2001      	movs	r0, #1
    85f0:	7008      	strb	r0, [r1, #0]
    85f2:	f000 f859 	bl	86a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    85f6:	4903      	ldr	r1, [pc, #12]	; (8604 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    85f8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    85fc:	6008      	str	r0, [r1, #0]
    85fe:	bd10      	pop	{r4, pc}
    8600:	20000378 	.word	0x20000378
    8604:	4001f504 	.word	0x4001f504

00008608 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    8608:	4803      	ldr	r0, [pc, #12]	; (8618 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    860a:	2100      	movs	r1, #0
    860c:	7001      	strb	r1, [r0, #0]
    860e:	7041      	strb	r1, [r0, #1]
    8610:	2110      	movs	r1, #16
    8612:	7081      	strb	r1, [r0, #2]
    8614:	4770      	bx	lr
    8616:	0000      	.short	0x0000
    8618:	20000378 	.word	0x20000378

0000861c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    861c:	4807      	ldr	r0, [pc, #28]	; (863c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    861e:	b510      	push	{r4, lr}
    8620:	7801      	ldrb	r1, [r0, #0]
    8622:	b141      	cbz	r1, 8636 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    8624:	f000 f832 	bl	868c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    8628:	b118      	cbz	r0, 8632 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    862a:	4805      	ldr	r0, [pc, #20]	; (8640 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    862c:	6800      	ldr	r0, [r0, #0]
    862e:	b2c0      	uxtb	r0, r0
    8630:	bd10      	pop	{r4, pc}
    8632:	2010      	movs	r0, #16
    8634:	bd10      	pop	{r4, pc}
    8636:	7880      	ldrb	r0, [r0, #2]
    8638:	bd10      	pop	{r4, pc}
    863a:	0000      	.short	0x0000
    863c:	20000378 	.word	0x20000378
    8640:	4000f400 	.word	0x4000f400

00008644 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    8644:	4808      	ldr	r0, [pc, #32]	; (8668 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    8646:	b510      	push	{r4, lr}
    8648:	7801      	ldrb	r1, [r0, #0]
    864a:	b159      	cbz	r1, 8664 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    864c:	4807      	ldr	r0, [pc, #28]	; (866c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    864e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    8652:	b128      	cbz	r0, 8660 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    8654:	f000 f80c 	bl	8670 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    8658:	2800      	cmp	r0, #0
    865a:	d000      	beq.n	865e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    865c:	2001      	movs	r0, #1
    865e:	bd10      	pop	{r4, pc}
    8660:	2002      	movs	r0, #2
    8662:	bd10      	pop	{r4, pc}
    8664:	7840      	ldrb	r0, [r0, #1]
    8666:	bd10      	pop	{r4, pc}
    8668:	20000378 	.word	0x20000378
    866c:	4000f000 	.word	0x4000f000
    8670:	4805      	ldr	r0, [pc, #20]	; (8688 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    8672:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    8676:	b111      	cbz	r1, 867e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    8678:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    867c:	b108      	cbz	r0, 8682 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    867e:	2000      	movs	r0, #0
    8680:	4770      	bx	lr
    8682:	2001      	movs	r0, #1
    8684:	4770      	bx	lr
    8686:	0000      	.short	0x0000
    8688:	4000f000 	.word	0x4000f000
    868c:	4805      	ldr	r0, [pc, #20]	; (86a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    868e:	b510      	push	{r4, lr}
    8690:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    8694:	b120      	cbz	r0, 86a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    8696:	f7ff ffeb 	bl	8670 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    869a:	b108      	cbz	r0, 86a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    869c:	2001      	movs	r0, #1
    869e:	bd10      	pop	{r4, pc}
    86a0:	2000      	movs	r0, #0
    86a2:	bd10      	pop	{r4, pc}
    86a4:	4000f000 	.word	0x4000f000
    86a8:	4804      	ldr	r0, [pc, #16]	; (86bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    86aa:	2100      	movs	r1, #0
    86ac:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    86b0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    86b4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    86b8:	4770      	bx	lr
    86ba:	0000      	.short	0x0000
    86bc:	4000f000 	.word	0x4000f000

000086c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    86c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86c4:	4604      	mov	r4, r0
    86c6:	461e      	mov	r6, r3
    86c8:	4690      	mov	r8, r2
    86ca:	460f      	mov	r7, r1
    86cc:	2001      	movs	r0, #1
    86ce:	f000 f90f 	bl	88f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    86d2:	4d1e      	ldr	r5, [pc, #120]	; (874c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    86d4:	481e      	ldr	r0, [pc, #120]	; (8750 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    86d6:	f004 0103 	and.w	r1, r4, #3
    86da:	712e      	strb	r6, [r5, #4]
    86dc:	6800      	ldr	r0, [r0, #0]
    86de:	0432      	lsls	r2, r6, #16
    86e0:	f361 0007 	bfi	r0, r1, #0, #8
    86e4:	f366 200f 	bfi	r0, r6, #8, #8
    86e8:	0c00      	lsrs	r0, r0, #16
    86ea:	4e1a      	ldr	r6, [pc, #104]	; (8754 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    86ec:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    86f0:	4308      	orrs	r0, r1
    86f2:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    86f6:	4818      	ldr	r0, [pc, #96]	; (8758 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    86f8:	6007      	str	r7, [r0, #0]
    86fa:	f009 fb2a 	bl	11d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    86fe:	b938      	cbnz	r0, 8710 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    8700:	4815      	ldr	r0, [pc, #84]	; (8758 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    8702:	3010      	adds	r0, #16
    8704:	6801      	ldr	r1, [r0, #0]
    8706:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    870a:	ea41 0108 	orr.w	r1, r1, r8
    870e:	6001      	str	r1, [r0, #0]
    8710:	f000 f8e4 	bl	88dc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    8714:	b10c      	cbz	r4, 871a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    8716:	2c04      	cmp	r4, #4
    8718:	d107      	bne.n	872a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    871a:	4811      	ldr	r0, [pc, #68]	; (8760 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    871c:	490d      	ldr	r1, [pc, #52]	; (8754 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    871e:	4a0f      	ldr	r2, [pc, #60]	; (875c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    8720:	1d09      	adds	r1, r1, #4
    8722:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    8726:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    872a:	2001      	movs	r0, #1
    872c:	7068      	strb	r0, [r5, #1]
    872e:	70ec      	strb	r4, [r5, #3]
    8730:	b11c      	cbz	r4, 873a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    8732:	2c01      	cmp	r4, #1
    8734:	d001      	beq.n	873a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    8736:	2c02      	cmp	r4, #2
    8738:	d106      	bne.n	8748 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    873a:	7028      	strb	r0, [r5, #0]
    873c:	2100      	movs	r1, #0
    873e:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    8742:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    8746:	6030      	str	r0, [r6, #0]
    8748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    874c:	2000037b 	.word	0x2000037b
    8750:	000088ec 	.word	0x000088ec
    8754:	4000f000 	.word	0x4000f000
    8758:	4000f508 	.word	0x4000f508
    875c:	4000f100 	.word	0x4000f100
    8760:	4001f088 	.word	0x4001f088

00008764 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    8764:	b570      	push	{r4, r5, r6, lr}
    8766:	4a1c      	ldr	r2, [pc, #112]	; (87d8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    8768:	7853      	ldrb	r3, [r2, #1]
    876a:	b1a3      	cbz	r3, 8796 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    876c:	4b1b      	ldr	r3, [pc, #108]	; (87dc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    876e:	6019      	str	r1, [r3, #0]
    8770:	1d19      	adds	r1, r3, #4
    8772:	6008      	str	r0, [r1, #0]
    8774:	2501      	movs	r5, #1
    8776:	7095      	strb	r5, [r2, #2]
    8778:	4610      	mov	r0, r2
    877a:	78d6      	ldrb	r6, [r2, #3]
    877c:	4b18      	ldr	r3, [pc, #96]	; (87e0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    877e:	7800      	ldrb	r0, [r0, #0]
    8780:	4c18      	ldr	r4, [pc, #96]	; (87e4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    8782:	2100      	movs	r1, #0
    8784:	b156      	cbz	r6, 879c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    8786:	2e04      	cmp	r6, #4
    8788:	d01b      	beq.n	87c2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    878a:	b308      	cbz	r0, 87d0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    878c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    8790:	0668      	lsls	r0, r5, #25
    8792:	6018      	str	r0, [r3, #0]
    8794:	bd70      	pop	{r4, r5, r6, pc}
    8796:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    879a:	e01a      	b.n	87d2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    879c:	b178      	cbz	r0, 87be <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    879e:	4620      	mov	r0, r4
    87a0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    87a4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    87a8:	601e      	str	r6, [r3, #0]
    87aa:	1271      	asrs	r1, r6, #9
    87ac:	f009 f81e 	bl	117ec <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    87b0:	2800      	cmp	r0, #0
    87b2:	d0ef      	beq.n	8794 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    87b4:	6065      	str	r5, [r4, #4]
    87b6:	480a      	ldr	r0, [pc, #40]	; (87e0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    87b8:	1d00      	adds	r0, r0, #4
    87ba:	6006      	str	r6, [r0, #0]
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	21d5      	movs	r1, #213	; 0xd5
    87c0:	e007      	b.n	87d2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    87c2:	7015      	strb	r5, [r2, #0]
    87c4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    87c8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    87cc:	6025      	str	r5, [r4, #0]
    87ce:	bd70      	pop	{r4, r5, r6, pc}
    87d0:	21e8      	movs	r1, #232	; 0xe8
    87d2:	203c      	movs	r0, #60	; 0x3c
    87d4:	f7f9 f8ec 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87d8:	2000037b 	.word	0x2000037b
    87dc:	4000f50c 	.word	0x4000f50c
    87e0:	4001f504 	.word	0x4001f504
    87e4:	4000f000 	.word	0x4000f000

000087e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    87e8:	b570      	push	{r4, r5, r6, lr}
    87ea:	4d05      	ldr	r5, [pc, #20]	; (8800 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    87ec:	2400      	movs	r4, #0
    87ee:	7828      	ldrb	r0, [r5, #0]
    87f0:	b110      	cbz	r0, 87f8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    87f2:	f000 f873 	bl	88dc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    87f6:	702c      	strb	r4, [r5, #0]
    87f8:	706c      	strb	r4, [r5, #1]
    87fa:	70ac      	strb	r4, [r5, #2]
    87fc:	bd70      	pop	{r4, r5, r6, pc}
    87fe:	0000      	.short	0x0000
    8800:	2000037b 	.word	0x2000037b

00008804 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    8804:	4802      	ldr	r0, [pc, #8]	; (8810 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    8806:	2100      	movs	r1, #0
    8808:	7001      	strb	r1, [r0, #0]
    880a:	7041      	strb	r1, [r0, #1]
    880c:	7081      	strb	r1, [r0, #2]
    880e:	4770      	bx	lr
    8810:	2000037b 	.word	0x2000037b

00008814 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    8814:	480b      	ldr	r0, [pc, #44]	; (8844 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    8816:	b510      	push	{r4, lr}
    8818:	7800      	ldrb	r0, [r0, #0]
    881a:	b158      	cbz	r0, 8834 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    881c:	f44f 7182 	mov.w	r1, #260	; 0x104
    8820:	4809      	ldr	r0, [pc, #36]	; (8848 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    8822:	f008 ffe3 	bl	117ec <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    8826:	b140      	cbz	r0, 883a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    8828:	4808      	ldr	r0, [pc, #32]	; (884c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    882a:	6800      	ldr	r0, [r0, #0]
    882c:	2800      	cmp	r0, #0
    882e:	d000      	beq.n	8832 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    8830:	2001      	movs	r0, #1
    8832:	bd10      	pop	{r4, pc}
    8834:	f240 215e 	movw	r1, #606	; 0x25e
    8838:	e001      	b.n	883e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    883a:	f240 215f 	movw	r1, #607	; 0x25f
    883e:	203c      	movs	r0, #60	; 0x3c
    8840:	f7f9 f8b6 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8844:	2000037b 	.word	0x2000037b
    8848:	4000f000 	.word	0x4000f000
    884c:	4000f400 	.word	0x4000f400

00008850 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    8850:	4801      	ldr	r0, [pc, #4]	; (8858 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    8852:	2101      	movs	r1, #1
    8854:	6081      	str	r1, [r0, #8]
    8856:	4770      	bx	lr
    8858:	4000f000 	.word	0x4000f000

0000885c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    885c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8860:	481b      	ldr	r0, [pc, #108]	; (88d0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    8862:	7800      	ldrb	r0, [r0, #0]
    8864:	b1d8      	cbz	r0, 889e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    8866:	f8df 806c 	ldr.w	r8, [pc, #108]	; 88d4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    886a:	f44f 7682 	mov.w	r6, #260	; 0x104
    886e:	4631      	mov	r1, r6
    8870:	4640      	mov	r0, r8
    8872:	f008 ffbb 	bl	117ec <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    8876:	2800      	cmp	r0, #0
    8878:	d128      	bne.n	88cc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    887a:	2002      	movs	r0, #2
    887c:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    8880:	4c15      	ldr	r4, [pc, #84]	; (88d8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    8882:	6820      	ldr	r0, [r4, #0]
    8884:	43c0      	mvns	r0, r0
    8886:	f340 1500 	sbfx	r5, r0, #4, #1
    888a:	6820      	ldr	r0, [r4, #0]
    888c:	f040 0010 	orr.w	r0, r0, #16
    8890:	6020      	str	r0, [r4, #0]
    8892:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    8896:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    889a:	1c6d      	adds	r5, r5, #1
    889c:	e008      	b.n	88b0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    889e:	f240 216a 	movw	r1, #618	; 0x26a
    88a2:	203c      	movs	r0, #60	; 0x3c
    88a4:	f7f9 f884 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88a8:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    88ac:	f009 fa91 	bl	11dd2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    88b0:	4631      	mov	r1, r6
    88b2:	4640      	mov	r0, r8
    88b4:	f008 ff9a 	bl	117ec <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    88b8:	2800      	cmp	r0, #0
    88ba:	d0f5      	beq.n	88a8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    88bc:	b91d      	cbnz	r5, 88c6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    88be:	6820      	ldr	r0, [r4, #0]
    88c0:	f020 0010 	bic.w	r0, r0, #16
    88c4:	6020      	str	r0, [r4, #0]
    88c6:	2002      	movs	r0, #2
    88c8:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    88cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    88d0:	2000037b 	.word	0x2000037b
    88d4:	4000f000 	.word	0x4000f000
    88d8:	e000ed10 	.word	0xe000ed10
    88dc:	4902      	ldr	r1, [pc, #8]	; (88e8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    88de:	4801      	ldr	r0, [pc, #4]	; (88e4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    88e0:	6008      	str	r0, [r1, #0]
    88e2:	4770      	bx	lr
    88e4:	02020000 	.word	0x02020000
    88e8:	4001f508 	.word	0x4001f508
    88ec:	00010000 	.word	0x00010000

000088f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    88f0:	b510      	push	{r4, lr}
    88f2:	4604      	mov	r4, r0
    88f4:	f000 f820 	bl	8938 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    88f8:	2c00      	cmp	r4, #0
    88fa:	d00e      	beq.n	891a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    88fc:	4a0b      	ldr	r2, [pc, #44]	; (892c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    88fe:	480b      	ldr	r0, [pc, #44]	; (892c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    8900:	490b      	ldr	r1, [pc, #44]	; (8930 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    8902:	3214      	adds	r2, #20
    8904:	2c01      	cmp	r4, #1
    8906:	d005      	beq.n	8914 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    8908:	2c02      	cmp	r4, #2
    890a:	d007      	beq.n	891c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    890c:	2182      	movs	r1, #130	; 0x82
    890e:	203d      	movs	r0, #61	; 0x3d
    8910:	f7f9 f84e 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8914:	2302      	movs	r3, #2
    8916:	6003      	str	r3, [r0, #0]
    8918:	6011      	str	r1, [r2, #0]
    891a:	bd10      	pop	{r4, pc}
    891c:	2303      	movs	r3, #3
    891e:	6003      	str	r3, [r0, #0]
    8920:	6011      	str	r1, [r2, #0]
    8922:	4904      	ldr	r1, [pc, #16]	; (8934 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    8924:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    8928:	6008      	str	r0, [r1, #0]
    892a:	bd10      	pop	{r4, pc}
    892c:	4000f500 	.word	0x4000f500
    8930:	20001b04 	.word	0x20001b04
    8934:	4001f504 	.word	0x4001f504
    8938:	4805      	ldr	r0, [pc, #20]	; (8950 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    893a:	b510      	push	{r4, lr}
    893c:	2100      	movs	r1, #0
    893e:	6001      	str	r1, [r0, #0]
    8940:	6001      	str	r1, [r0, #0]
    8942:	f7ff ff51 	bl	87e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    8946:	4903      	ldr	r1, [pc, #12]	; (8954 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    8948:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    894c:	6008      	str	r0, [r1, #0]
    894e:	bd10      	pop	{r4, pc}
    8950:	4000f500 	.word	0x4000f500
    8954:	4001f508 	.word	0x4001f508

00008958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    8958:	4805      	ldr	r0, [pc, #20]	; (8970 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    895a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    895e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    8962:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8966:	2100      	movs	r1, #0
    8968:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    896c:	4770      	bx	lr
    896e:	0000      	.short	0x0000
    8970:	40001000 	.word	0x40001000

00008974 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    8974:	4904      	ldr	r1, [pc, #16]	; (8988 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    8976:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    897a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    897e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    8982:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    8986:	4770      	bx	lr
    8988:	40001000 	.word	0x40001000

0000898c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    898c:	4902      	ldr	r1, [pc, #8]	; (8998 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    898e:	5c08      	ldrb	r0, [r1, r0]
    8990:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    8994:	4770      	bx	lr
    8996:	0000      	.short	0x0000
    8998:	0000962e 	.word	0x0000962e

0000899c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    899e:	4c24      	ldr	r4, [pc, #144]	; (8a30 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    89a0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    89a4:	f010 0f10 	tst.w	r0, #16
    89a8:	d001      	beq.n	89ae <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    89aa:	2701      	movs	r7, #1
    89ac:	e000      	b.n	89b0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    89ae:	2700      	movs	r7, #0
    89b0:	2010      	movs	r0, #16
    89b2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    89b6:	2002      	movs	r0, #2
    89b8:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    89bc:	481d      	ldr	r0, [pc, #116]	; (8a34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    89be:	2500      	movs	r5, #0
    89c0:	491d      	ldr	r1, [pc, #116]	; (8a38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    89c2:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    89c6:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    89ca:	6008      	str	r0, [r1, #0]
    89cc:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    89d0:	f44f 7688 	mov.w	r6, #272	; 0x110
    89d4:	f010 0fff 	tst.w	r0, #255	; 0xff
    89d8:	d019      	beq.n	8a0e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    89da:	20ff      	movs	r0, #255	; 0xff
    89dc:	f88d 0000 	strb.w	r0, [sp]
    89e0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    89e4:	2001      	movs	r0, #1
    89e6:	6120      	str	r0, [r4, #16]
    89e8:	e005      	b.n	89f6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    89ea:	bf00      	nop
    89ec:	f89d 0000 	ldrb.w	r0, [sp]
    89f0:	1e40      	subs	r0, r0, #1
    89f2:	f88d 0000 	strb.w	r0, [sp]
    89f6:	f89d 0000 	ldrb.w	r0, [sp]
    89fa:	b128      	cbz	r0, 8a08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    89fc:	4631      	mov	r1, r6
    89fe:	4620      	mov	r0, r4
    8a00:	f008 ff23 	bl	1184a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8a04:	2800      	cmp	r0, #0
    8a06:	d0f1      	beq.n	89ec <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    8a08:	f89d 0000 	ldrb.w	r0, [sp]
    8a0c:	b158      	cbz	r0, 8a26 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    8a0e:	f000 fc23 	bl	9258 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    8a12:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    8a16:	f000 fd8b 	bl	9530 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    8a1a:	2f00      	cmp	r7, #0
    8a1c:	d002      	beq.n	8a24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    8a1e:	2010      	movs	r0, #16
    8a20:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a26:	f640 0194 	movw	r1, #2196	; 0x894
    8a2a:	203e      	movs	r0, #62	; 0x3e
    8a2c:	f7f8 ffc0 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a30:	40001000 	.word	0x40001000
    8a34:	200016d0 	.word	0x200016d0
    8a38:	4001f508 	.word	0x4001f508

00008a3c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    8a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a40:	4d18      	ldr	r5, [pc, #96]	; (8aa4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    8a42:	4607      	mov	r7, r0
    8a44:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    8a48:	07c2      	lsls	r2, r0, #31
    8a4a:	d00f      	beq.n	8a6c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    8a4c:	4c16      	ldr	r4, [pc, #88]	; (8aa8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    8a4e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    8a52:	f042 0201 	orr.w	r2, r2, #1
    8a56:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    8a5a:	f040 0002 	orr.w	r0, r0, #2
    8a5e:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    8a62:	2601      	movs	r6, #1
    8a64:	b13f      	cbz	r7, 8a76 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    8a66:	2f01      	cmp	r7, #1
    8a68:	d00b      	beq.n	8a82 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    8a6a:	e010      	b.n	8a8e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    8a6c:	f240 716f 	movw	r1, #1903	; 0x76f
    8a70:	203e      	movs	r0, #62	; 0x3e
    8a72:	f7f8 ff9d 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a76:	4608      	mov	r0, r1
    8a78:	f000 fdb4 	bl	95e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    8a7c:	726e      	strb	r6, [r5, #9]
    8a7e:	6026      	str	r6, [r4, #0]
    8a80:	e005      	b.n	8a8e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    8a82:	4608      	mov	r0, r1
    8a84:	f000 fd94 	bl	95b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    8a88:	2002      	movs	r0, #2
    8a8a:	7268      	strb	r0, [r5, #9]
    8a8c:	6066      	str	r6, [r4, #4]
    8a8e:	4807      	ldr	r0, [pc, #28]	; (8aac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    8a90:	64c6      	str	r6, [r0, #76]	; 0x4c
    8a92:	4806      	ldr	r0, [pc, #24]	; (8aac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    8a94:	300c      	adds	r0, #12
    8a96:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    8a9a:	4638      	mov	r0, r7
    8a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8aa0:	f000 bd18 	b.w	94d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    8aa4:	200016d0 	.word	0x200016d0
    8aa8:	40001000 	.word	0x40001000
    8aac:	40008000 	.word	0x40008000

00008ab0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    8ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ab4:	4c2c      	ldr	r4, [pc, #176]	; (8b68 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    8ab6:	0006      	movs	r6, r0
    8ab8:	4d2c      	ldr	r5, [pc, #176]	; (8b6c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    8aba:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    8abe:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8b70 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    8ac2:	f040 0002 	orr.w	r0, r0, #2
    8ac6:	4689      	mov	r9, r1
    8ac8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    8acc:	f04f 0700 	mov.w	r7, #0
    8ad0:	d002      	beq.n	8ad8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    8ad2:	2e01      	cmp	r6, #1
    8ad4:	d020      	beq.n	8b18 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    8ad6:	e036      	b.n	8b46 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    8ad8:	4608      	mov	r0, r1
    8ada:	f000 fd83 	bl	95e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    8ade:	2001      	movs	r0, #1
    8ae0:	7260      	strb	r0, [r4, #9]
    8ae2:	79e0      	ldrb	r0, [r4, #7]
    8ae4:	2801      	cmp	r0, #1
    8ae6:	d105      	bne.n	8af4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    8ae8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    8aec:	f040 0008 	orr.w	r0, r0, #8
    8af0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    8af4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8af6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    8afa:	6260      	str	r0, [r4, #36]	; 0x24
    8afc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    8b00:	f8c8 0000 	str.w	r0, [r8]
    8b04:	491b      	ldr	r1, [pc, #108]	; (8b74 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    8b06:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    8b0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8b0e:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    8b12:	fbb0 f7f1 	udiv	r7, r0, r1
    8b16:	e016      	b.n	8b46 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    8b18:	4608      	mov	r0, r1
    8b1a:	f000 fd49 	bl	95b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    8b1e:	2002      	movs	r0, #2
    8b20:	7260      	strb	r0, [r4, #9]
    8b22:	79e0      	ldrb	r0, [r4, #7]
    8b24:	2801      	cmp	r0, #1
    8b26:	d105      	bne.n	8b34 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    8b28:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    8b2c:	f040 0004 	orr.w	r0, r0, #4
    8b30:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    8b34:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8b36:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    8b3a:	6260      	str	r0, [r4, #36]	; 0x24
    8b3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    8b40:	f8c8 0000 	str.w	r0, [r8]
    8b44:	2729      	movs	r7, #41	; 0x29
    8b46:	f000 fbf3 	bl	9330 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    8b4a:	f008 fff8 	bl	11b3e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    8b4e:	b120      	cbz	r0, 8b5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    8b50:	f7ff ff24 	bl	899c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8b54:	2000      	movs	r0, #0
    8b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b5a:	2100      	movs	r1, #0
    8b5c:	4630      	mov	r0, r6
    8b5e:	f000 fcb9 	bl	94d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    8b62:	4638      	mov	r0, r7
    8b64:	e7f7      	b.n	8b56 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    8b66:	0000      	.short	0x0000
    8b68:	200016d0 	.word	0x200016d0
    8b6c:	40001000 	.word	0x40001000
    8b70:	4001f504 	.word	0x4001f504
    8b74:	00009628 	.word	0x00009628

00008b78 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    8b78:	4a02      	ldr	r2, [pc, #8]	; (8b84 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    8b7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    8b7c:	6003      	str	r3, [r0, #0]
    8b7e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    8b80:	6008      	str	r0, [r1, #0]
    8b82:	4770      	bx	lr
    8b84:	200016d0 	.word	0x200016d0

00008b88 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    8b88:	b510      	push	{r4, lr}
    8b8a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    8b8c:	4901      	ldr	r1, [pc, #4]	; (8b94 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    8b8e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    8b92:	bd10      	pop	{r4, pc}
    8b94:	200016c0 	.word	0x200016c0

00008b98 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    8b98:	490f      	ldr	r1, [pc, #60]	; (8bd8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    8b9a:	b510      	push	{r4, lr}
    8b9c:	69ca      	ldr	r2, [r1, #28]
    8b9e:	4282      	cmp	r2, r0
    8ba0:	d302      	bcc.n	8ba8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    8ba2:	f640 1124 	movw	r1, #2340	; 0x924
    8ba6:	e00b      	b.n	8bc0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    8ba8:	2201      	movs	r2, #1
    8baa:	730a      	strb	r2, [r1, #12]
    8bac:	6108      	str	r0, [r1, #16]
    8bae:	490b      	ldr	r1, [pc, #44]	; (8bdc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    8bb0:	644a      	str	r2, [r1, #68]	; 0x44
    8bb2:	1d0a      	adds	r2, r1, #4
    8bb4:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    8bb8:	4283      	cmp	r3, r0
    8bba:	d304      	bcc.n	8bc6 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    8bbc:	f640 112d 	movw	r1, #2349	; 0x92d
    8bc0:	203e      	movs	r0, #62	; 0x3e
    8bc2:	f7f8 fef5 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8bc6:	2300      	movs	r3, #0
    8bc8:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    8bcc:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8bd4:	f000 bc52 	b.w	947c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    8bd8:	200016d0 	.word	0x200016d0
    8bdc:	40008000 	.word	0x40008000

00008be0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    8be0:	b570      	push	{r4, r5, r6, lr}
    8be2:	4c0f      	ldr	r4, [pc, #60]	; (8c20 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    8be4:	4603      	mov	r3, r0
    8be6:	2002      	movs	r0, #2
    8be8:	7320      	strb	r0, [r4, #12]
    8bea:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    8bee:	2096      	movs	r0, #150	; 0x96
    8bf0:	f894 1020 	ldrb.w	r1, [r4, #32]
    8bf4:	7d22      	ldrb	r2, [r4, #20]
    8bf6:	2d01      	cmp	r5, #1
    8bf8:	d00e      	beq.n	8c18 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    8bfa:	f000 fd51 	bl	96a0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    8bfe:	6120      	str	r0, [r4, #16]
    8c00:	4808      	ldr	r0, [pc, #32]	; (8c24 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    8c02:	2100      	movs	r1, #0
    8c04:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    8c08:	6921      	ldr	r1, [r4, #16]
    8c0a:	69e0      	ldr	r0, [r4, #28]
    8c0c:	4408      	add	r0, r1
    8c0e:	4905      	ldr	r1, [pc, #20]	; (8c24 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    8c10:	1d09      	adds	r1, r1, #4
    8c12:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8c16:	bd70      	pop	{r4, r5, r6, pc}
    8c18:	f000 fd60 	bl	96dc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    8c1c:	e7ef      	b.n	8bfe <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    8c1e:	0000      	.short	0x0000
    8c20:	200016d0 	.word	0x200016d0
    8c24:	40008000 	.word	0x40008000

00008c28 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    8c28:	b510      	push	{r4, lr}
    8c2a:	f009 f8ae 	bl	11d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8c2e:	2800      	cmp	r0, #0
    8c30:	d006      	beq.n	8c40 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    8c32:	4804      	ldr	r0, [pc, #16]	; (8c44 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    8c34:	6801      	ldr	r1, [r0, #0]
    8c36:	f021 0101 	bic.w	r1, r1, #1
    8c3a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    8c3e:	6001      	str	r1, [r0, #0]
    8c40:	bd10      	pop	{r4, pc}
    8c42:	0000      	.short	0x0000
    8c44:	40001774 	.word	0x40001774

00008c48 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    8c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c4c:	2234      	movs	r2, #52	; 0x34
    8c4e:	2100      	movs	r1, #0
    8c50:	4813      	ldr	r0, [pc, #76]	; (8ca0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    8c52:	f009 f992 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8c56:	f000 fc6b 	bl	9530 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    8c5a:	f009 f84f 	bl	11cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8c5e:	4d11      	ldr	r5, [pc, #68]	; (8ca4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    8c60:	4e10      	ldr	r6, [pc, #64]	; (8ca4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    8c62:	2400      	movs	r4, #0
    8c64:	4f0f      	ldr	r7, [pc, #60]	; (8ca4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    8c66:	3508      	adds	r5, #8
    8c68:	3610      	adds	r6, #16
    8c6a:	b928      	cbnz	r0, 8c78 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    8c6c:	f009 f85d 	bl	11d2a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8c70:	b910      	cbnz	r0, 8c78 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    8c72:	f009 f864 	bl	11d3e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8c76:	b108      	cbz	r0, 8c7c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    8c78:	2224      	movs	r2, #36	; 0x24
    8c7a:	e006      	b.n	8c8a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    8c7c:	f009 f89f 	bl	11dbe <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8c80:	b910      	cbnz	r0, 8c88 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    8c82:	f009 f892 	bl	11daa <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8c86:	b140      	cbz	r0, 8c9a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    8c88:	2240      	movs	r2, #64	; 0x40
    8c8a:	21ff      	movs	r1, #255	; 0xff
    8c8c:	4638      	mov	r0, r7
    8c8e:	f009 f974 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8c92:	602c      	str	r4, [r5, #0]
    8c94:	6034      	str	r4, [r6, #0]
    8c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c9a:	2238      	movs	r2, #56	; 0x38
    8c9c:	e7f5      	b.n	8c8a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    8c9e:	0000      	.short	0x0000
    8ca0:	200016d0 	.word	0x200016d0
    8ca4:	40000e00 	.word	0x40000e00

00008ca8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    8ca8:	4801      	ldr	r0, [pc, #4]	; (8cb0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    8caa:	69c0      	ldr	r0, [r0, #28]
    8cac:	4770      	bx	lr
    8cae:	0000      	.short	0x0000
    8cb0:	200016d0 	.word	0x200016d0

00008cb4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    8cb4:	4801      	ldr	r0, [pc, #4]	; (8cbc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8>)
    8cb6:	f890 0020 	ldrb.w	r0, [r0, #32]
    8cba:	4770      	bx	lr
    8cbc:	200016d0 	.word	0x200016d0

00008cc0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    8cc0:	4801      	ldr	r0, [pc, #4]	; (8cc8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    8cc2:	6980      	ldr	r0, [r0, #24]
    8cc4:	4770      	bx	lr
    8cc6:	0000      	.short	0x0000
    8cc8:	200016d0 	.word	0x200016d0

00008ccc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    8ccc:	b510      	push	{r4, lr}
    8cce:	f000 fbe3 	bl	9498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    8cd2:	f7ff fe63 	bl	899c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8cd6:	f004 fd5d 	bl	d794 <mpsl_fem_disable>
    8cda:	b130      	cbz	r0, 8cea <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    8cdc:	1c40      	adds	r0, r0, #1
    8cde:	d004      	beq.n	8cea <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    8ce0:	f240 5165 	movw	r1, #1381	; 0x565
    8ce4:	203e      	movs	r0, #62	; 0x3e
    8ce6:	f7f8 fe63 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cea:	480f      	ldr	r0, [pc, #60]	; (8d28 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    8cec:	4a0f      	ldr	r2, [pc, #60]	; (8d2c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    8cee:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8cf0:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    8cf4:	6011      	str	r1, [r2, #0]
    8cf6:	2400      	movs	r4, #0
    8cf8:	6244      	str	r4, [r0, #36]	; 0x24
    8cfa:	7304      	strb	r4, [r0, #12]
    8cfc:	61c4      	str	r4, [r0, #28]
    8cfe:	6184      	str	r4, [r0, #24]
    8d00:	f000 fbca 	bl	9498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    8d04:	480a      	ldr	r0, [pc, #40]	; (8d30 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    8d06:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    8d0a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    8d0e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    8d12:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    8d16:	2001      	movs	r0, #1
    8d18:	f008 fd86 	bl	11828 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    8d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8d20:	2001      	movs	r0, #1
    8d22:	f008 bd74 	b.w	1180e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8d26:	0000      	.short	0x0000
    8d28:	200016d0 	.word	0x200016d0
    8d2c:	4001f508 	.word	0x4001f508
    8d30:	40008000 	.word	0x40008000

00008d34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    8d34:	b570      	push	{r4, r5, r6, lr}
    8d36:	2001      	movs	r0, #1
    8d38:	f008 fd76 	bl	11828 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    8d3c:	4c37      	ldr	r4, [pc, #220]	; (8e1c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    8d3e:	2000      	movs	r0, #0
    8d40:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    8d44:	2001      	movs	r0, #1
    8d46:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    8d4a:	f009 f80e 	bl	11d6a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8d4e:	4d34      	ldr	r5, [pc, #208]	; (8e20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8d50:	b118      	cbz	r0, 8d5a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    8d52:	6828      	ldr	r0, [r5, #0]
    8d54:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    8d58:	6028      	str	r0, [r5, #0]
    8d5a:	f008 fffa 	bl	11d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8d5e:	b128      	cbz	r0, 8d6c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    8d60:	6828      	ldr	r0, [r5, #0]
    8d62:	4930      	ldr	r1, [pc, #192]	; (8e24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    8d64:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    8d68:	4308      	orrs	r0, r1
    8d6a:	6028      	str	r0, [r5, #0]
    8d6c:	f009 f80d 	bl	11d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8d70:	b138      	cbz	r0, 8d82 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    8d72:	482b      	ldr	r0, [pc, #172]	; (8e20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8d74:	1d00      	adds	r0, r0, #4
    8d76:	6801      	ldr	r1, [r0, #0]
    8d78:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    8d7c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    8d80:	6001      	str	r1, [r0, #0]
    8d82:	4927      	ldr	r1, [pc, #156]	; (8e20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8d84:	4828      	ldr	r0, [pc, #160]	; (8e28 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    8d86:	313c      	adds	r1, #60	; 0x3c
    8d88:	6008      	str	r0, [r1, #0]
    8d8a:	f004 fd3d 	bl	d808 <mpsl_fem_device_config_254_apply_get>
    8d8e:	b140      	cbz	r0, 8da2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    8d90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8d94:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    8d98:	1c41      	adds	r1, r0, #1
    8d9a:	d002      	beq.n	8da2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    8d9c:	4920      	ldr	r1, [pc, #128]	; (8e20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8d9e:	3110      	adds	r1, #16
    8da0:	6008      	str	r0, [r1, #0]
    8da2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    8da6:	6e00      	ldr	r0, [r0, #96]	; 0x60
    8da8:	1c41      	adds	r1, r0, #1
    8daa:	d004      	beq.n	8db6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    8dac:	491f      	ldr	r1, [pc, #124]	; (8e2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    8dae:	680a      	ldr	r2, [r1, #0]
    8db0:	f360 4217 	bfi	r2, r0, #16, #8
    8db4:	600a      	str	r2, [r1, #0]
    8db6:	f240 1103 	movw	r1, #259	; 0x103
    8dba:	f240 605b 	movw	r0, #1627	; 0x65b
    8dbe:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    8dc2:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    8dc6:	2001      	movs	r0, #1
    8dc8:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    8dcc:	f000 f842 	bl	8e54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8dd0:	f240 2001 	movw	r0, #513	; 0x201
    8dd4:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    8dd8:	2002      	movs	r0, #2
    8dda:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    8dde:	4914      	ldr	r1, [pc, #80]	; (8e30 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    8de0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    8de4:	6008      	str	r0, [r1, #0]
    8de6:	4913      	ldr	r1, [pc, #76]	; (8e34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    8de8:	2000      	movs	r0, #0
    8dea:	8608      	strh	r0, [r1, #48]	; 0x30
    8dec:	3110      	adds	r1, #16
    8dee:	61c8      	str	r0, [r1, #28]
    8df0:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    8df4:	2001      	movs	r0, #1
    8df6:	f008 fd0a 	bl	1180e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8dfa:	2010      	movs	r0, #16
    8dfc:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8e00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8e04:	2002      	movs	r0, #2
    8e06:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    8e0a:	480b      	ldr	r0, [pc, #44]	; (8e38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    8e0c:	6800      	ldr	r0, [r0, #0]
    8e0e:	2800      	cmp	r0, #0
    8e10:	d002      	beq.n	8e18 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    8e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8e16:	4700      	bx	r0
    8e18:	bd70      	pop	{r4, r5, r6, pc}
    8e1a:	0000      	.short	0x0000
    8e1c:	40001000 	.word	0x40001000
    8e20:	4000173c 	.word	0x4000173c
    8e24:	80000096 	.word	0x80000096
    8e28:	8900002c 	.word	0x8900002c
    8e2c:	4000158c 	.word	0x4000158c
    8e30:	4001f504 	.word	0x4001f504
    8e34:	200016c0 	.word	0x200016c0
    8e38:	200002dc 	.word	0x200002dc

00008e3c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    8e3c:	4901      	ldr	r1, [pc, #4]	; (8e44 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    8e3e:	7548      	strb	r0, [r1, #21]
    8e40:	4770      	bx	lr
    8e42:	0000      	.short	0x0000
    8e44:	200016d0 	.word	0x200016d0

00008e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    8e48:	4901      	ldr	r1, [pc, #4]	; (8e50 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    8e4a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8e4e:	4770      	bx	lr
    8e50:	0000967c 	.word	0x0000967c

00008e54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    8e54:	4908      	ldr	r1, [pc, #32]	; (8e78 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    8e56:	b510      	push	{r4, lr}
    8e58:	7508      	strb	r0, [r1, #20]
    8e5a:	4908      	ldr	r1, [pc, #32]	; (8e7c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    8e5c:	2801      	cmp	r0, #1
    8e5e:	d006      	beq.n	8e6e <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    8e60:	2802      	cmp	r0, #2
    8e62:	d006      	beq.n	8e72 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    8e64:	f640 516c 	movw	r1, #3436	; 0xd6c
    8e68:	203e      	movs	r0, #62	; 0x3e
    8e6a:	f7f8 fda1 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e6e:	2003      	movs	r0, #3
    8e70:	e000      	b.n	8e74 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    8e72:	2004      	movs	r0, #4
    8e74:	6008      	str	r0, [r1, #0]
    8e76:	bd10      	pop	{r4, pc}
    8e78:	200016d0 	.word	0x200016d0
    8e7c:	40001510 	.word	0x40001510

00008e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    8e80:	4905      	ldr	r1, [pc, #20]	; (8e98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    8e82:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    8e86:	4805      	ldr	r0, [pc, #20]	; (8e9c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    8e88:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    8e8c:	f041 0101 	orr.w	r1, r1, #1
    8e90:	7001      	strb	r1, [r0, #0]
    8e92:	f000 ba13 	b.w	92bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    8e96:	0000      	.short	0x0000
    8e98:	40001000 	.word	0x40001000
    8e9c:	200016d0 	.word	0x200016d0

00008ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    8ea0:	4901      	ldr	r1, [pc, #4]	; (8ea8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    8ea2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8ea6:	4770      	bx	lr
    8ea8:	00009688 	.word	0x00009688

00008eac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    8eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8eb0:	4e30      	ldr	r6, [pc, #192]	; (8f74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8eb2:	4c31      	ldr	r4, [pc, #196]	; (8f78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    8eb4:	4688      	mov	r8, r1
    8eb6:	0007      	movs	r7, r0
    8eb8:	4615      	mov	r5, r2
    8eba:	f04f 0901 	mov.w	r9, #1
    8ebe:	d006      	beq.n	8ece <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    8ec0:	2f01      	cmp	r7, #1
    8ec2:	d012      	beq.n	8eea <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    8ec4:	f640 0117 	movw	r1, #2071	; 0x817
    8ec8:	203e      	movs	r0, #62	; 0x3e
    8eca:	f7f8 fd71 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ece:	4610      	mov	r0, r2
    8ed0:	f000 fb88 	bl	95e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    8ed4:	4829      	ldr	r0, [pc, #164]	; (8f7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    8ed6:	f884 9009 	strb.w	r9, [r4, #9]
    8eda:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    8ede:	4640      	mov	r0, r8
    8ee0:	f000 fb2e 	bl	9540 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    8ee4:	4605      	mov	r5, r0
    8ee6:	4630      	mov	r0, r6
    8ee8:	e00c      	b.n	8f04 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    8eea:	4610      	mov	r0, r2
    8eec:	f000 fb60 	bl	95b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    8ef0:	2002      	movs	r0, #2
    8ef2:	7260      	strb	r0, [r4, #9]
    8ef4:	f649 71ba 	movw	r1, #40890	; 0x9fba
    8ef8:	4640      	mov	r0, r8
    8efa:	f000 fb21 	bl	9540 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    8efe:	4605      	mov	r5, r0
    8f00:	481c      	ldr	r0, [pc, #112]	; (8f74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8f02:	1d00      	adds	r0, r0, #4
    8f04:	f000 fada 	bl	94bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    8f08:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8f80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    8f0c:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    8f10:	f8df a074 	ldr.w	sl, [pc, #116]	; 8f88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    8f14:	481b      	ldr	r0, [pc, #108]	; (8f84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    8f16:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    8f1a:	2010      	movs	r0, #16
    8f1c:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    8f20:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8f22:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    8f26:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    8f2a:	6260      	str	r0, [r4, #36]	; 0x24
    8f2c:	4817      	ldr	r0, [pc, #92]	; (8f8c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    8f2e:	6006      	str	r6, [r0, #0]
    8f30:	f000 f9fe 	bl	9330 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    8f34:	4641      	mov	r1, r8
    8f36:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    8f3a:	4811      	ldr	r0, [pc, #68]	; (8f80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    8f3c:	300c      	adds	r0, #12
    8f3e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    8f42:	42a8      	cmp	r0, r5
    8f44:	d310      	bcc.n	8f68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    8f46:	2000      	movs	r0, #0
    8f48:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8f4c:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    8f50:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8f52:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    8f56:	6260      	str	r0, [r4, #36]	; 0x24
    8f58:	480c      	ldr	r0, [pc, #48]	; (8f8c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    8f5a:	1d00      	adds	r0, r0, #4
    8f5c:	6006      	str	r6, [r0, #0]
    8f5e:	f7ff fd1d 	bl	899c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8f62:	2000      	movs	r0, #0
    8f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8f68:	4629      	mov	r1, r5
    8f6a:	4638      	mov	r0, r7
    8f6c:	f000 fab2 	bl	94d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    8f70:	2001      	movs	r0, #1
    8f72:	e7f7      	b.n	8f64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    8f74:	40001000 	.word	0x40001000
    8f78:	200016d0 	.word	0x200016d0
    8f7c:	00009628 	.word	0x00009628
    8f80:	40008000 	.word	0x40008000
    8f84:	40008140 	.word	0x40008140
    8f88:	4001f098 	.word	0x4001f098
    8f8c:	4001f504 	.word	0x4001f504

00008f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    8f90:	4b0d      	ldr	r3, [pc, #52]	; (8fc8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    8f92:	b510      	push	{r4, lr}
    8f94:	71d8      	strb	r0, [r3, #7]
    8f96:	729a      	strb	r2, [r3, #10]
    8f98:	b151      	cbz	r1, 8fb0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    8f9a:	2002      	movs	r0, #2
    8f9c:	7218      	strb	r0, [r3, #8]
    8f9e:	2801      	cmp	r0, #1
    8fa0:	d008      	beq.n	8fb4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    8fa2:	2802      	cmp	r0, #2
    8fa4:	d00f      	beq.n	8fc6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    8fa6:	f640 2144 	movw	r1, #2628	; 0xa44
    8faa:	203e      	movs	r0, #62	; 0x3e
    8fac:	f7f8 fd00 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fb0:	2001      	movs	r0, #1
    8fb2:	e7f3      	b.n	8f9c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    8fb4:	7a58      	ldrb	r0, [r3, #9]
    8fb6:	2802      	cmp	r0, #2
    8fb8:	d105      	bne.n	8fc6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    8fba:	f000 f943 	bl	9244 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    8fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8fc2:	f000 ba51 	b.w	9468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    8fc6:	bd10      	pop	{r4, pc}
    8fc8:	200016d0 	.word	0x200016d0

00008fcc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    8fcc:	4902      	ldr	r1, [pc, #8]	; (8fd8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    8fce:	2000      	movs	r0, #0
    8fd0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8fd4:	4770      	bx	lr
    8fd6:	0000      	.short	0x0000
    8fd8:	40008000 	.word	0x40008000

00008fdc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    8fdc:	4904      	ldr	r1, [pc, #16]	; (8ff0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    8fde:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    8fe2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    8fe6:	4249      	negs	r1, r1
    8fe8:	7001      	strb	r1, [r0, #0]
    8fea:	2001      	movs	r0, #1
    8fec:	4770      	bx	lr
    8fee:	0000      	.short	0x0000
    8ff0:	40001000 	.word	0x40001000

00008ff4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8ff4:	4903      	ldr	r1, [pc, #12]	; (9004 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    8ff6:	0e02      	lsrs	r2, r0, #24
    8ff8:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    8ffc:	0200      	lsls	r0, r0, #8
    8ffe:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    9002:	4770      	bx	lr
    9004:	40001000 	.word	0x40001000

00009008 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    9008:	4901      	ldr	r1, [pc, #4]	; (9010 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    900a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    900e:	4770      	bx	lr
    9010:	40001000 	.word	0x40001000

00009014 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    9014:	b510      	push	{r4, lr}
    9016:	2200      	movs	r2, #0
    9018:	2901      	cmp	r1, #1
    901a:	d006      	beq.n	902a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    901c:	2902      	cmp	r1, #2
    901e:	d002      	beq.n	9026 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    9020:	f240 21d2 	movw	r1, #722	; 0x2d2
    9024:	e014      	b.n	9050 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    9026:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    902a:	490b      	ldr	r1, [pc, #44]	; (9058 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    902c:	430a      	orrs	r2, r1
    902e:	490b      	ldr	r1, [pc, #44]	; (905c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    9030:	600a      	str	r2, [r1, #0]
    9032:	490b      	ldr	r1, [pc, #44]	; (9060 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    9034:	4308      	orrs	r0, r1
    9036:	4909      	ldr	r1, [pc, #36]	; (905c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    9038:	1d09      	adds	r1, r1, #4
    903a:	6008      	str	r0, [r1, #0]
    903c:	4809      	ldr	r0, [pc, #36]	; (9064 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    903e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    9042:	b2c0      	uxtb	r0, r0
    9044:	2803      	cmp	r0, #3
    9046:	d001      	beq.n	904c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    9048:	280b      	cmp	r0, #11
    904a:	d104      	bne.n	9056 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    904c:	f240 21ea 	movw	r1, #746	; 0x2ea
    9050:	203e      	movs	r0, #62	; 0x3e
    9052:	f7f8 fcad 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9056:	bd10      	pop	{r4, pc}
    9058:	00100108 	.word	0x00100108
    905c:	40001514 	.word	0x40001514
    9060:	02030000 	.word	0x02030000
    9064:	40001000 	.word	0x40001000

00009068 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    9068:	4901      	ldr	r1, [pc, #4]	; (9070 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    906a:	7588      	strb	r0, [r1, #22]
    906c:	4770      	bx	lr
    906e:	0000      	.short	0x0000
    9070:	200016d0 	.word	0x200016d0

00009074 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    9074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9078:	4851      	ldr	r0, [pc, #324]	; (91c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    907a:	f04f 0a01 	mov.w	sl, #1
    907e:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    9082:	484f      	ldr	r0, [pc, #316]	; (91c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    9084:	300c      	adds	r0, #12
    9086:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    908a:	f008 fd56 	bl	11b3a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    908e:	4c4d      	ldr	r4, [pc, #308]	; (91c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    9090:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    9094:	f000 f8e0 	bl	9258 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    9098:	494b      	ldr	r1, [pc, #300]	; (91c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    909a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    909c:	6008      	str	r0, [r1, #0]
    909e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 91cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    90a2:	2000      	movs	r0, #0
    90a4:	6260      	str	r0, [r4, #36]	; 0x24
    90a6:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    90aa:	f240 131d 	movw	r3, #285	; 0x11d
    90ae:	439a      	bics	r2, r3
    90b0:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    90b4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    90b8:	f000 f94e 	bl	9358 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    90bc:	4605      	mov	r5, r0
    90be:	4840      	ldr	r0, [pc, #256]	; (91c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    90c0:	3008      	adds	r0, #8
    90c2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    90c6:	4e3e      	ldr	r6, [pc, #248]	; (91c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    90c8:	61e0      	str	r0, [r4, #28]
    90ca:	1d36      	adds	r6, r6, #4
    90cc:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    90d0:	61a0      	str	r0, [r4, #24]
    90d2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    90d6:	7d21      	ldrb	r1, [r4, #20]
    90d8:	f884 1020 	strb.w	r1, [r4, #32]
    90dc:	7a61      	ldrb	r1, [r4, #9]
    90de:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    90e2:	46a1      	mov	r9, r4
    90e4:	2400      	movs	r4, #0
    90e6:	4639      	mov	r1, r7
    90e8:	4628      	mov	r0, r5
    90ea:	f000 f983 	bl	93f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>
    90ee:	b910      	cbnz	r0, 90f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    90f0:	f8c8 a010 	str.w	sl, [r8, #16]
    90f4:	2401      	movs	r4, #1
    90f6:	4f33      	ldr	r7, [pc, #204]	; (91c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    90f8:	07e8      	lsls	r0, r5, #31
    90fa:	f1a7 0710 	sub.w	r7, r7, #16
    90fe:	d120      	bne.n	9142 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    9100:	07a8      	lsls	r0, r5, #30
    9102:	d527      	bpl.n	9154 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    9104:	f008 fe41 	bl	11d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    9108:	b9f0      	cbnz	r0, 9148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    910a:	f008 fe2e 	bl	11d6a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    910e:	b9d8      	cbnz	r0, 9148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    9110:	482f      	ldr	r0, [pc, #188]	; (91d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    9112:	6800      	ldr	r0, [r0, #0]
    9114:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    9118:	f3c0 6300 	ubfx	r3, r0, #24, #1
    911c:	f000 020f 	and.w	r2, r0, #15
    9120:	f3c0 1103 	ubfx	r1, r0, #4, #4
    9124:	f3c0 2803 	ubfx	r8, r0, #8, #4
    9128:	b173      	cbz	r3, 9148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    912a:	b11a      	cbz	r2, 9134 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    912c:	b111      	cbz	r1, 9134 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    912e:	f1b8 0f00 	cmp.w	r8, #0
    9132:	d109      	bne.n	9148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    9134:	f3c0 4004 	ubfx	r0, r0, #16, #5
    9138:	2801      	cmp	r0, #1
    913a:	d105      	bne.n	9148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    913c:	f1bc 0f03 	cmp.w	ip, #3
    9140:	d202      	bcs.n	9148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    9142:	6838      	ldr	r0, [r7, #0]
    9144:	4780      	blx	r0
    9146:	e00e      	b.n	9166 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    9148:	f345 0080 	sbfx	r0, r5, #2, #1
    914c:	4621      	mov	r1, r4
    914e:	1c40      	adds	r0, r0, #1
    9150:	687a      	ldr	r2, [r7, #4]
    9152:	e007      	b.n	9164 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    9154:	f015 0f28 	tst.w	r5, #40	; 0x28
    9158:	d005      	beq.n	9166 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    915a:	f345 1140 	sbfx	r1, r5, #5, #1
    915e:	68ba      	ldr	r2, [r7, #8]
    9160:	4620      	mov	r0, r4
    9162:	1c49      	adds	r1, r1, #1
    9164:	4790      	blx	r2
    9166:	06e8      	lsls	r0, r5, #27
    9168:	d501      	bpl.n	916e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    916a:	68f8      	ldr	r0, [r7, #12]
    916c:	4780      	blx	r0
    916e:	f899 1009 	ldrb.w	r1, [r9, #9]
    9172:	4648      	mov	r0, r9
    9174:	2902      	cmp	r1, #2
    9176:	d120      	bne.n	91ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    9178:	7b01      	ldrb	r1, [r0, #12]
    917a:	2900      	cmp	r1, #0
    917c:	d01d      	beq.n	91ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    917e:	2902      	cmp	r1, #2
    9180:	d004      	beq.n	918c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    9182:	2901      	cmp	r1, #1
    9184:	d009      	beq.n	919a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    9186:	f640 4156 	movw	r1, #3158	; 0xc56
    918a:	e00d      	b.n	91a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    918c:	69c1      	ldr	r1, [r0, #28]
    918e:	f8d9 0010 	ldr.w	r0, [r9, #16]
    9192:	4408      	add	r0, r1
    9194:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    9198:	e00b      	b.n	91b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    919a:	6901      	ldr	r1, [r0, #16]
    919c:	f8d9 001c 	ldr.w	r0, [r9, #28]
    91a0:	4281      	cmp	r1, r0
    91a2:	d804      	bhi.n	91ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    91a4:	f640 4157 	movw	r1, #3159	; 0xc57
    91a8:	203e      	movs	r0, #62	; 0x3e
    91aa:	f7f8 fc01 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91ae:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    91b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    91b6:	f000 b961 	b.w	947c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    91ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    91be:	0000      	.short	0x0000
    91c0:	40008000 	.word	0x40008000
    91c4:	200016d0 	.word	0x200016d0
    91c8:	4001f508 	.word	0x4001f508
    91cc:	40001000 	.word	0x40001000
    91d0:	40001450 	.word	0x40001450
    91d4:	480b      	ldr	r0, [pc, #44]	; (9204 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    91d6:	7d81      	ldrb	r1, [r0, #22]
    91d8:	480b      	ldr	r0, [pc, #44]	; (9208 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    91da:	5c40      	ldrb	r0, [r0, r1]
    91dc:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    91e0:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    91e4:	d204      	bcs.n	91f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    91e6:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    91ea:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    91ee:	e001      	b.n	91f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    91f0:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    91f4:	4a05      	ldr	r2, [pc, #20]	; (920c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    91f6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    91fa:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    91fe:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    9202:	4770      	bx	lr
    9204:	200016d0 	.word	0x200016d0
    9208:	0000962e 	.word	0x0000962e
    920c:	40001000 	.word	0x40001000
    9210:	b508      	push	{r3, lr}
    9212:	490b      	ldr	r1, [pc, #44]	; (9240 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    9214:	466b      	mov	r3, sp
    9216:	f991 2015 	ldrsb.w	r2, [r1, #21]
    921a:	7d89      	ldrb	r1, [r1, #22]
    921c:	f000 faaa 	bl	9774 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    9220:	f99d 0000 	ldrsb.w	r0, [sp]
    9224:	f000 fa7a 	bl	971c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    9228:	f10d 0001 	add.w	r0, sp, #1
    922c:	f004 fad6 	bl	d7dc <mpsl_fem_pa_gain_set>
    9230:	2800      	cmp	r0, #0
    9232:	d004      	beq.n	923e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    9234:	f240 51e6 	movw	r1, #1510	; 0x5e6
    9238:	203e      	movs	r0, #62	; 0x3e
    923a:	f7f8 fbb9 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    923e:	bd08      	pop	{r3, pc}
    9240:	200016d0 	.word	0x200016d0
    9244:	4803      	ldr	r0, [pc, #12]	; (9254 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    9246:	7a01      	ldrb	r1, [r0, #8]
    9248:	2901      	cmp	r1, #1
    924a:	d102      	bne.n	9252 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    924c:	7a80      	ldrb	r0, [r0, #10]
    924e:	f7ff bfdf 	b.w	9210 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    9252:	4770      	bx	lr
    9254:	200016d0 	.word	0x200016d0
    9258:	480d      	ldr	r0, [pc, #52]	; (9290 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    925a:	b510      	push	{r4, lr}
    925c:	7a40      	ldrb	r0, [r0, #9]
    925e:	2801      	cmp	r0, #1
    9260:	d00c      	beq.n	927c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    9262:	2802      	cmp	r0, #2
    9264:	d113      	bne.n	928e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    9266:	f004 fa9b 	bl	d7a0 <mpsl_fem_lna_configuration_clear>
    926a:	2800      	cmp	r0, #0
    926c:	d00f      	beq.n	928e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    926e:	1c40      	adds	r0, r0, #1
    9270:	d00d      	beq.n	928e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    9272:	f640 01ab 	movw	r1, #2219	; 0x8ab
    9276:	203e      	movs	r0, #62	; 0x3e
    9278:	f7f8 fb9a 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    927c:	f004 faa2 	bl	d7c4 <mpsl_fem_pa_configuration_clear>
    9280:	2800      	cmp	r0, #0
    9282:	d004      	beq.n	928e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    9284:	1c40      	adds	r0, r0, #1
    9286:	d002      	beq.n	928e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    9288:	f640 01a5 	movw	r1, #2213	; 0x8a5
    928c:	e7f3      	b.n	9276 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    928e:	bd10      	pop	{r4, pc}
    9290:	200016d0 	.word	0x200016d0
    9294:	4808      	ldr	r0, [pc, #32]	; (92b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    9296:	2100      	movs	r1, #0
    9298:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    929c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    92a0:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    92a4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    92a8:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    92ac:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    92b0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    92b4:	4770      	bx	lr
    92b6:	0000      	.short	0x0000
    92b8:	40001000 	.word	0x40001000
    92bc:	4818      	ldr	r0, [pc, #96]	; (9320 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    92be:	b510      	push	{r4, lr}
    92c0:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    92c4:	07c1      	lsls	r1, r0, #31
    92c6:	d029      	beq.n	931c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    92c8:	0781      	lsls	r1, r0, #30
    92ca:	d514      	bpl.n	92f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    92cc:	4815      	ldr	r0, [pc, #84]	; (9324 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    92ce:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    92d2:	f041 0101 	orr.w	r1, r1, #1
    92d6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    92da:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    92de:	b2c0      	uxtb	r0, r0
    92e0:	280b      	cmp	r0, #11
    92e2:	d005      	beq.n	92f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    92e4:	280a      	cmp	r0, #10
    92e6:	d003      	beq.n	92f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    92e8:	2803      	cmp	r0, #3
    92ea:	d001      	beq.n	92f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    92ec:	2802      	cmp	r0, #2
    92ee:	d115      	bne.n	931c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    92f0:	f240 610f 	movw	r1, #1551	; 0x60f
    92f4:	e00f      	b.n	9316 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    92f6:	0740      	lsls	r0, r0, #29
    92f8:	d510      	bpl.n	931c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    92fa:	480a      	ldr	r0, [pc, #40]	; (9324 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    92fc:	490a      	ldr	r1, [pc, #40]	; (9328 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    92fe:	3008      	adds	r0, #8
    9300:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    9304:	f44f 71a0 	mov.w	r1, #320	; 0x140
    9308:	4808      	ldr	r0, [pc, #32]	; (932c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    930a:	f008 faa3 	bl	11854 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    930e:	2800      	cmp	r0, #0
    9310:	d004      	beq.n	931c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    9312:	f240 6117 	movw	r1, #1559	; 0x617
    9316:	203e      	movs	r0, #62	; 0x3e
    9318:	f7f8 fb4a 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    931c:	bd10      	pop	{r4, pc}
    931e:	0000      	.short	0x0000
    9320:	200016d0 	.word	0x200016d0
    9324:	40001000 	.word	0x40001000
    9328:	4001f098 	.word	0x4001f098
    932c:	40008000 	.word	0x40008000
    9330:	4808      	ldr	r0, [pc, #32]	; (9354 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    9332:	4601      	mov	r1, r0
    9334:	79c2      	ldrb	r2, [r0, #7]
    9336:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    933a:	b112      	cbz	r2, 9342 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    933c:	2a01      	cmp	r2, #1
    933e:	d003      	beq.n	9348 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    9340:	e006      	b.n	9350 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    9342:	f041 0102 	orr.w	r1, r1, #2
    9346:	e001      	b.n	934c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    9348:	f041 0104 	orr.w	r1, r1, #4
    934c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    9350:	f7ff bfb4 	b.w	92bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    9354:	200016d0 	.word	0x200016d0
    9358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    935c:	4d22      	ldr	r5, [pc, #136]	; (93e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x374>)
    935e:	2400      	movs	r4, #0
    9360:	7b28      	ldrb	r0, [r5, #12]
    9362:	b138      	cbz	r0, 9374 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    9364:	f44f 71a2 	mov.w	r1, #324	; 0x144
    9368:	4820      	ldr	r0, [pc, #128]	; (93ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
    936a:	f008 fa73 	bl	11854 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    936e:	b108      	cbz	r0, 9374 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    9370:	2701      	movs	r7, #1
    9372:	e000      	b.n	9376 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    9374:	2700      	movs	r7, #0
    9376:	7a68      	ldrb	r0, [r5, #9]
    9378:	4e1d      	ldr	r6, [pc, #116]	; (93f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
    937a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    937e:	2801      	cmp	r0, #1
    9380:	d002      	beq.n	9388 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    9382:	2802      	cmp	r0, #2
    9384:	d006      	beq.n	9394 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    9386:	e016      	b.n	93b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    9388:	4630      	mov	r0, r6
    938a:	f008 fa5e 	bl	1184a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    938e:	b190      	cbz	r0, 93b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    9390:	2408      	movs	r4, #8
    9392:	e010      	b.n	93b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    9394:	4630      	mov	r0, r6
    9396:	f008 fa58 	bl	1184a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    939a:	b100      	cbz	r0, 939e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    939c:	2402      	movs	r4, #2
    939e:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    93a2:	43c0      	mvns	r0, r0
    93a4:	f340 0000 	sbfx	r0, r0, #0, #1
    93a8:	1c40      	adds	r0, r0, #1
    93aa:	d101      	bne.n	93b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x33c>
    93ac:	f044 0404 	orr.w	r4, r4, #4
    93b0:	b10f      	cbz	r7, 93b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    93b2:	f044 0401 	orr.w	r4, r4, #1
    93b6:	f014 0f0b 	tst.w	r4, #11
    93ba:	d107      	bne.n	93cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    93bc:	f44f 7188 	mov.w	r1, #272	; 0x110
    93c0:	4630      	mov	r0, r6
    93c2:	f008 fa42 	bl	1184a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    93c6:	b108      	cbz	r0, 93cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    93c8:	f044 0410 	orr.w	r4, r4, #16
    93cc:	f7ff ff62 	bl	9294 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    93d0:	06e0      	lsls	r0, r4, #27
    93d2:	d506      	bpl.n	93e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    93d4:	0720      	lsls	r0, r4, #28
    93d6:	d404      	bmi.n	93e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    93d8:	7a68      	ldrb	r0, [r5, #9]
    93da:	2801      	cmp	r0, #1
    93dc:	d101      	bne.n	93e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    93de:	f044 0420 	orr.w	r4, r4, #32
    93e2:	4620      	mov	r0, r4
    93e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    93e8:	200016d0 	.word	0x200016d0
    93ec:	40008000 	.word	0x40008000
    93f0:	40001000 	.word	0x40001000
    93f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93f8:	4c1a      	ldr	r4, [pc, #104]	; (9464 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f0>)
    93fa:	460d      	mov	r5, r1
    93fc:	7a21      	ldrb	r1, [r4, #8]
    93fe:	b129      	cbz	r1, 940c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x398>
    9400:	f010 0f11 	tst.w	r0, #17
    9404:	d007      	beq.n	9416 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a2>
    9406:	f7ff fac9 	bl	899c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    940a:	e024      	b.n	9456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    940c:	f000 f890 	bl	9530 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    9410:	2000      	movs	r0, #0
    9412:	7320      	strb	r0, [r4, #12]
    9414:	e01f      	b.n	9456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    9416:	2901      	cmp	r1, #1
    9418:	d001      	beq.n	941e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    941a:	2601      	movs	r6, #1
    941c:	e000      	b.n	9420 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ac>
    941e:	2600      	movs	r6, #0
    9420:	79e0      	ldrb	r0, [r4, #7]
    9422:	2801      	cmp	r0, #1
    9424:	d00e      	beq.n	9444 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
    9426:	2700      	movs	r7, #0
    9428:	f000 f882 	bl	9530 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    942c:	2196      	movs	r1, #150	; 0x96
    942e:	4630      	mov	r0, r6
    9430:	f000 f894 	bl	955c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>
    9434:	4601      	mov	r1, r0
    9436:	b14f      	cbz	r7, 944c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
    9438:	353b      	adds	r5, #59	; 0x3b
    943a:	428d      	cmp	r5, r1
    943c:	d904      	bls.n	9448 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
    943e:	2000      	movs	r0, #0
    9440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9444:	2701      	movs	r7, #1
    9446:	e7ef      	b.n	9428 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    9448:	2001      	movs	r0, #1
    944a:	71e0      	strb	r0, [r4, #7]
    944c:	7aa2      	ldrb	r2, [r4, #10]
    944e:	4630      	mov	r0, r6
    9450:	f7ff fd2c 	bl	8eac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    9454:	b108      	cbz	r0, 945a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    9456:	2001      	movs	r0, #1
    9458:	e7f2      	b.n	9440 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3cc>
    945a:	f640 21a5 	movw	r1, #2725	; 0xaa5
    945e:	203e      	movs	r0, #62	; 0x3e
    9460:	f7f8 faa6 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9464:	200016d0 	.word	0x200016d0
    9468:	4803      	ldr	r0, [pc, #12]	; (9478 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    946a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    946e:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    9472:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    9476:	4770      	bx	lr
    9478:	40001000 	.word	0x40001000
    947c:	4804      	ldr	r0, [pc, #16]	; (9490 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    947e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    9480:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    9484:	6241      	str	r1, [r0, #36]	; 0x24
    9486:	4903      	ldr	r1, [pc, #12]	; (9494 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    9488:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    948c:	6008      	str	r0, [r1, #0]
    948e:	4770      	bx	lr
    9490:	200016d0 	.word	0x200016d0
    9494:	4001f504 	.word	0x4001f504
    9498:	4a07      	ldr	r2, [pc, #28]	; (94b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    949a:	2000      	movs	r0, #0
    949c:	3208      	adds	r2, #8
    949e:	4906      	ldr	r1, [pc, #24]	; (94b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    94a0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    94a4:	1d0a      	adds	r2, r1, #4
    94a6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    94aa:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    94ae:	4902      	ldr	r1, [pc, #8]	; (94b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    94b0:	310c      	adds	r1, #12
    94b2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    94b6:	4770      	bx	lr
    94b8:	40008000 	.word	0x40008000
    94bc:	4903      	ldr	r1, [pc, #12]	; (94cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    94be:	79c9      	ldrb	r1, [r1, #7]
    94c0:	2900      	cmp	r1, #0
    94c2:	d102      	bne.n	94ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x456>
    94c4:	4902      	ldr	r1, [pc, #8]	; (94d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    94c6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    94ca:	4770      	bx	lr
    94cc:	200016d0 	.word	0x200016d0
    94d0:	4001f098 	.word	0x4001f098
    94d4:	b510      	push	{r4, lr}
    94d6:	4a14      	ldr	r2, [pc, #80]	; (9528 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    94d8:	b120      	cbz	r0, 94e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    94da:	2801      	cmp	r0, #1
    94dc:	d011      	beq.n	9502 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48e>
    94de:	f240 7153 	movw	r1, #1875	; 0x753
    94e2:	e01c      	b.n	951e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    94e4:	f101 0028 	add.w	r0, r1, #40	; 0x28
    94e8:	e9c2 1002 	strd	r1, r0, [r2, #8]
    94ec:	490f      	ldr	r1, [pc, #60]	; (952c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    94ee:	480e      	ldr	r0, [pc, #56]	; (9528 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    94f0:	f004 f96e 	bl	d7d0 <mpsl_fem_pa_configuration_set>
    94f4:	2800      	cmp	r0, #0
    94f6:	d015      	beq.n	9524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    94f8:	1c40      	adds	r0, r0, #1
    94fa:	d013      	beq.n	9524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    94fc:	f240 7142 	movw	r1, #1858	; 0x742
    9500:	e00d      	b.n	951e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    9502:	f101 0029 	add.w	r0, r1, #41	; 0x29
    9506:	e9c2 1002 	strd	r1, r0, [r2, #8]
    950a:	4908      	ldr	r1, [pc, #32]	; (952c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    950c:	4806      	ldr	r0, [pc, #24]	; (9528 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    950e:	f004 f94d 	bl	d7ac <mpsl_fem_lna_configuration_set>
    9512:	2800      	cmp	r0, #0
    9514:	d006      	beq.n	9524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    9516:	1c40      	adds	r0, r0, #1
    9518:	d004      	beq.n	9524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    951a:	f240 714f 	movw	r1, #1871	; 0x74f
    951e:	203e      	movs	r0, #62	; 0x3e
    9520:	f7f8 fa46 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9524:	bd10      	pop	{r4, pc}
    9526:	0000      	.short	0x0000
    9528:	200002e0 	.word	0x200002e0
    952c:	00009658 	.word	0x00009658
    9530:	4802      	ldr	r0, [pc, #8]	; (953c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c8>)
    9532:	2100      	movs	r1, #0
    9534:	71c1      	strb	r1, [r0, #7]
    9536:	7201      	strb	r1, [r0, #8]
    9538:	7241      	strb	r1, [r0, #9]
    953a:	4770      	bx	lr
    953c:	200016d0 	.word	0x200016d0
    9540:	4a05      	ldr	r2, [pc, #20]	; (9558 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e4>)
    9542:	79d2      	ldrb	r2, [r2, #7]
    9544:	2a01      	cmp	r2, #1
    9546:	d006      	beq.n	9556 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e2>
    9548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    954c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    9550:	fbb1 f1f2 	udiv	r1, r1, r2
    9554:	1a40      	subs	r0, r0, r1
    9556:	4770      	bx	lr
    9558:	200016d0 	.word	0x200016d0
    955c:	b570      	push	{r4, r5, r6, lr}
    955e:	4c13      	ldr	r4, [pc, #76]	; (95ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x538>)
    9560:	4603      	mov	r3, r0
    9562:	460d      	mov	r5, r1
    9564:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    9568:	2000      	movs	r0, #0
    956a:	b15a      	cbz	r2, 9584 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    956c:	4621      	mov	r1, r4
    956e:	f891 1020 	ldrb.w	r1, [r1, #32]
    9572:	b163      	cbz	r3, 958e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x51a>
    9574:	2b01      	cmp	r3, #1
    9576:	d111      	bne.n	959c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
    9578:	2a01      	cmp	r2, #1
    957a:	4628      	mov	r0, r5
    957c:	d012      	beq.n	95a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x530>
    957e:	f008 f96e 	bl	1185e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    9582:	e009      	b.n	9598 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    9584:	f640 0158 	movw	r1, #2136	; 0x858
    9588:	203e      	movs	r0, #62	; 0x3e
    958a:	f7f8 fa11 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    958e:	2a01      	cmp	r2, #1
    9590:	4628      	mov	r0, r5
    9592:	d004      	beq.n	959e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52a>
    9594:	f008 f971 	bl	1187a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    9598:	69e1      	ldr	r1, [r4, #28]
    959a:	4408      	add	r0, r1
    959c:	bd70      	pop	{r4, r5, r6, pc}
    959e:	f000 f8d1 	bl	9744 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    95a2:	e7f9      	b.n	9598 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    95a4:	f000 f8c0 	bl	9728 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    95a8:	e7f6      	b.n	9598 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    95aa:	0000      	.short	0x0000
    95ac:	200016d0 	.word	0x200016d0
    95b0:	b510      	push	{r4, lr}
    95b2:	f7ff fc4f 	bl	8e54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    95b6:	f7ff fe0d 	bl	91d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    95ba:	f7ff fe43 	bl	9244 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    95be:	f7ff ff53 	bl	9468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    95c2:	f008 fbe2 	bl	11d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    95c6:	2800      	cmp	r0, #0
    95c8:	d108      	bne.n	95dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    95ca:	f008 fbce 	bl	11d6a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    95ce:	2800      	cmp	r0, #0
    95d0:	d104      	bne.n	95dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    95d2:	4803      	ldr	r0, [pc, #12]	; (95e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56c>)
    95d4:	6801      	ldr	r1, [r0, #0]
    95d6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    95da:	6001      	str	r1, [r0, #0]
    95dc:	bd10      	pop	{r4, pc}
    95de:	0000      	.short	0x0000
    95e0:	40001568 	.word	0x40001568
    95e4:	b510      	push	{r4, lr}
    95e6:	4604      	mov	r4, r0
    95e8:	f7ff fc34 	bl	8e54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    95ec:	f7ff fdf2 	bl	91d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    95f0:	4620      	mov	r0, r4
    95f2:	f7ff fe0d 	bl	9210 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    95f6:	f008 fbc8 	bl	11d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    95fa:	2800      	cmp	r0, #0
    95fc:	d00d      	beq.n	961a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a6>
    95fe:	4a09      	ldr	r2, [pc, #36]	; (9624 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>)
    9600:	6811      	ldr	r1, [r2, #0]
    9602:	0650      	lsls	r0, r2, #25
    9604:	2c02      	cmp	r4, #2
    9606:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    960a:	d007      	beq.n	961c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>
    960c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    9610:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    9614:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    9618:	6010      	str	r0, [r2, #0]
    961a:	bd10      	pop	{r4, pc}
    961c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    9620:	e7f6      	b.n	9610 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>
    9622:	0000      	.short	0x0000
    9624:	40001588 	.word	0x40001588
    9628:	a62c0000 	.word	0xa62c0000
    962c:	0604a1e0 	.word	0x0604a1e0
    9630:	0e0c0a08 	.word	0x0e0c0a08
    9634:	16141210 	.word	0x16141210
    9638:	201e1c18 	.word	0x201e1c18
    963c:	28262422 	.word	0x28262422
    9640:	302e2c2a 	.word	0x302e2c2a
    9644:	38363432 	.word	0x38363432
    9648:	403e3c3a 	.word	0x403e3c3a
    964c:	48464442 	.word	0x48464442
    9650:	024e4c4a 	.word	0x024e4c4a
    9654:	0000501a 	.word	0x0000501a
    9658:	00000001 	.word	0x00000001
    965c:	40001110 	.word	0x40001110
	...
    9674:	00001e14 	.word	0x00001e14
    9678:	00001130 	.word	0x00001130
    967c:	00000000 	.word	0x00000000
    9680:	00000028 	.word	0x00000028
    9684:	00000018 	.word	0x00000018
    9688:	00000000 	.word	0x00000000
    968c:	00001e14 	.word	0x00001e14
    9690:	00001130 	.word	0x00001130
    9694:	00000000 	.word	0x00000000
    9698:	00001770 	.word	0x00001770
    969c:	00000fa0 	.word	0x00000fa0

000096a0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    96a0:	b570      	push	{r4, r5, r6, lr}
    96a2:	4605      	mov	r5, r0
    96a4:	4614      	mov	r4, r2
    96a6:	4608      	mov	r0, r1
    96a8:	f7ff fbfa 	bl	8ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    96ac:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    96b0:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    96b4:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    96b8:	4807      	ldr	r0, [pc, #28]	; (96d8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    96ba:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    96be:	4408      	add	r0, r1
    96c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    96c4:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    96c8:	fbb0 f5f1 	udiv	r5, r0, r1
    96cc:	4620      	mov	r0, r4
    96ce:	f7ff fbbb 	bl	8e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    96d2:	4428      	add	r0, r5
    96d4:	1d40      	adds	r0, r0, #5
    96d6:	bd70      	pop	{r4, r5, r6, pc}
    96d8:	00009768 	.word	0x00009768

000096dc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    96dc:	b570      	push	{r4, r5, r6, lr}
    96de:	4d0e      	ldr	r5, [pc, #56]	; (9718 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    96e0:	461c      	mov	r4, r3
    96e2:	3d08      	subs	r5, #8
    96e4:	4b0c      	ldr	r3, [pc, #48]	; (9718 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    96e6:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    96ea:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    96ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    96f2:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    96f6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    96fa:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    96fe:	4418      	add	r0, r3
    9700:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9704:	fbb0 f5f1 	udiv	r5, r0, r1
    9708:	4610      	mov	r0, r2
    970a:	f7ff fb9d 	bl	8e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    970e:	4428      	add	r0, r5
    9710:	4420      	add	r0, r4
    9712:	1d40      	adds	r0, r0, #5
    9714:	bd70      	pop	{r4, r5, r6, pc}
    9716:	0000      	.short	0x0000
    9718:	00009768 	.word	0x00009768

0000971c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    971c:	4901      	ldr	r1, [pc, #4]	; (9724 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    971e:	b2c0      	uxtb	r0, r0
    9720:	6008      	str	r0, [r1, #0]
    9722:	4770      	bx	lr
    9724:	4000150c 	.word	0x4000150c

00009728 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    9728:	4a05      	ldr	r2, [pc, #20]	; (9740 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    972a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    972e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9732:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    9736:	fbb1 f1f2 	udiv	r1, r1, r2
    973a:	4408      	add	r0, r1
    973c:	1e80      	subs	r0, r0, #2
    973e:	4770      	bx	lr
    9740:	00009760 	.word	0x00009760

00009744 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    9744:	4a05      	ldr	r2, [pc, #20]	; (975c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    9746:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    974a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    974e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    9752:	fbb1 f1f2 	udiv	r1, r1, r2
    9756:	4408      	add	r0, r1
    9758:	4770      	bx	lr
    975a:	0000      	.short	0x0000
    975c:	00009760 	.word	0x00009760
    9760:	05dc0000 	.word	0x05dc0000
    9764:	000003e8 	.word	0x000003e8
    9768:	00000000 	.word	0x00000000
    976c:	00001e14 	.word	0x00001e14
    9770:	00001130 	.word	0x00001130

00009774 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    9774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9778:	461e      	mov	r6, r3
    977a:	4617      	mov	r7, r2
    977c:	460c      	mov	r4, r1
    977e:	4605      	mov	r5, r0
    9780:	f000 f856 	bl	9830 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    9784:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 982c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    9788:	4680      	mov	r8, r0
    978a:	f899 0000 	ldrb.w	r0, [r9]
    978e:	42a8      	cmp	r0, r5
    9790:	d110      	bne.n	97b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    9792:	f899 1001 	ldrb.w	r1, [r9, #1]
    9796:	4648      	mov	r0, r9
    9798:	42a1      	cmp	r1, r4
    979a:	d10b      	bne.n	97b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    979c:	f990 1002 	ldrsb.w	r1, [r0, #2]
    97a0:	42b9      	cmp	r1, r7
    97a2:	d107      	bne.n	97b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    97a4:	78c2      	ldrb	r2, [r0, #3]
    97a6:	4542      	cmp	r2, r8
    97a8:	d104      	bne.n	97b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    97aa:	8881      	ldrh	r1, [r0, #4]
    97ac:	8031      	strh	r1, [r6, #0]
    97ae:	7980      	ldrb	r0, [r0, #6]
    97b0:	70b0      	strb	r0, [r6, #2]
    97b2:	e037      	b.n	9824 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    97b4:	463a      	mov	r2, r7
    97b6:	4621      	mov	r1, r4
    97b8:	2d01      	cmp	r5, #1
    97ba:	d009      	beq.n	97d0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    97bc:	2d02      	cmp	r5, #2
    97be:	d009      	beq.n	97d4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    97c0:	2d04      	cmp	r5, #4
    97c2:	d009      	beq.n	97d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    97c4:	2d08      	cmp	r5, #8
    97c6:	d009      	beq.n	97dc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    97c8:	f240 4161 	movw	r1, #1121	; 0x461
    97cc:	2006      	movs	r0, #6
    97ce:	e00c      	b.n	97ea <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    97d0:	2000      	movs	r0, #0
    97d2:	e004      	b.n	97de <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    97d4:	2001      	movs	r0, #1
    97d6:	e002      	b.n	97de <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    97d8:	2003      	movs	r0, #3
    97da:	e000      	b.n	97de <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    97dc:	2002      	movs	r0, #2
    97de:	466b      	mov	r3, sp
    97e0:	f000 f89e 	bl	9920 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    97e4:	b118      	cbz	r0, 97ee <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    97e6:	213d      	movs	r1, #61	; 0x3d
    97e8:	2075      	movs	r0, #117	; 0x75
    97ea:	f7f8 f8e1 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97ee:	4620      	mov	r0, r4
    97f0:	f7ff f8cc 	bl	898c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    97f4:	4602      	mov	r2, r0
    97f6:	2300      	movs	r3, #0
    97f8:	4631      	mov	r1, r6
    97fa:	f99d 0000 	ldrsb.w	r0, [sp]
    97fe:	f003 fff9 	bl	d7f4 <mpsl_fem_tx_power_split>
    9802:	4601      	mov	r1, r0
    9804:	f889 1007 	strb.w	r1, [r9, #7]
    9808:	8831      	ldrh	r1, [r6, #0]
    980a:	f8a9 1004 	strh.w	r1, [r9, #4]
    980e:	78b1      	ldrb	r1, [r6, #2]
    9810:	f889 1006 	strb.w	r1, [r9, #6]
    9814:	f889 5000 	strb.w	r5, [r9]
    9818:	f889 4001 	strb.w	r4, [r9, #1]
    981c:	f889 7002 	strb.w	r7, [r9, #2]
    9820:	f889 8003 	strb.w	r8, [r9, #3]
    9824:	f999 0007 	ldrsb.w	r0, [r9, #7]
    9828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    982c:	20000380 	.word	0x20000380

00009830 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    9830:	4801      	ldr	r0, [pc, #4]	; (9838 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    9832:	7800      	ldrb	r0, [r0, #0]
    9834:	4770      	bx	lr
    9836:	0000      	.short	0x0000
    9838:	200002f8 	.word	0x200002f8

0000983c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    983c:	b570      	push	{r4, r5, r6, lr}
    983e:	4c17      	ldr	r4, [pc, #92]	; (989c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    9840:	7860      	ldrb	r0, [r4, #1]
    9842:	2800      	cmp	r0, #0
    9844:	d123      	bne.n	988e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    9846:	2001      	movs	r0, #1
    9848:	7060      	strb	r0, [r4, #1]
    984a:	f008 fa78 	bl	11d3e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    984e:	f06f 0527 	mvn.w	r5, #39	; 0x27
    9852:	b928      	cbnz	r0, 9860 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    9854:	f008 faa9 	bl	11daa <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    9858:	b910      	cbnz	r0, 9860 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    985a:	f008 fab0 	bl	11dbe <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    985e:	b120      	cbz	r0, 986a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    9860:	480f      	ldr	r0, [pc, #60]	; (98a0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    9862:	6060      	str	r0, [r4, #4]
    9864:	70a5      	strb	r5, [r4, #2]
    9866:	2008      	movs	r0, #8
    9868:	e010      	b.n	988c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    986a:	f008 fa3d 	bl	11ce8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    986e:	b940      	cbnz	r0, 9882 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    9870:	f008 fa44 	bl	11cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    9874:	b928      	cbnz	r0, 9882 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    9876:	f008 fa58 	bl	11d2a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    987a:	b910      	cbnz	r0, 9882 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    987c:	f008 fa69 	bl	11d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    9880:	b130      	cbz	r0, 9890 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    9882:	4807      	ldr	r0, [pc, #28]	; (98a0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    9884:	3031      	adds	r0, #49	; 0x31
    9886:	6060      	str	r0, [r4, #4]
    9888:	70a5      	strb	r5, [r4, #2]
    988a:	2004      	movs	r0, #4
    988c:	70e0      	strb	r0, [r4, #3]
    988e:	bd70      	pop	{r4, r5, r6, pc}
    9890:	f240 113f 	movw	r1, #319	; 0x13f
    9894:	2074      	movs	r0, #116	; 0x74
    9896:	f003 fdef 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    989a:	0000      	.short	0x0000
    989c:	200002f8 	.word	0x200002f8
    98a0:	000120fd 	.word	0x000120fd

000098a4 <mpsl_tx_power_radio_supported_power_adjust>:
    98a4:	4a06      	ldr	r2, [pc, #24]	; (98c0 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    98a6:	b500      	push	{lr}
    98a8:	f992 2003 	ldrsb.w	r2, [r2, #3]
    98ac:	4290      	cmp	r0, r2
    98ae:	db01      	blt.n	98b4 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    98b0:	4610      	mov	r0, r2
    98b2:	bd00      	pop	{pc}
    98b4:	f000 f808 	bl	98c8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    98b8:	4902      	ldr	r1, [pc, #8]	; (98c4 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    98ba:	5608      	ldrsb	r0, [r1, r0]
    98bc:	bd00      	pop	{pc}
    98be:	0000      	.short	0x0000
    98c0:	200002f8 	.word	0x200002f8
    98c4:	000120ef 	.word	0x000120ef

000098c8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    98c8:	4602      	mov	r2, r0
    98ca:	4813      	ldr	r0, [pc, #76]	; (9918 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    98cc:	b510      	push	{r4, lr}
    98ce:	f990 3003 	ldrsb.w	r3, [r0, #3]
    98d2:	429a      	cmp	r2, r3
    98d4:	db01      	blt.n	98da <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    98d6:	200d      	movs	r0, #13
    98d8:	bd10      	pop	{r4, pc}
    98da:	f990 3002 	ldrsb.w	r3, [r0, #2]
    98de:	429a      	cmp	r2, r3
    98e0:	dc01      	bgt.n	98e6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    98e2:	2000      	movs	r0, #0
    98e4:	bd10      	pop	{r4, pc}
    98e6:	b101      	cbz	r1, 98ea <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    98e8:	2101      	movs	r1, #1
    98ea:	1ad4      	subs	r4, r2, r3
    98ec:	6843      	ldr	r3, [r0, #4]
    98ee:	5d18      	ldrb	r0, [r3, r4]
    98f0:	4c0a      	ldr	r4, [pc, #40]	; (991c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    98f2:	5624      	ldrsb	r4, [r4, r0]
    98f4:	4294      	cmp	r4, r2
    98f6:	d0f5      	beq.n	98e4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    98f8:	4c08      	ldr	r4, [pc, #32]	; (991c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    98fa:	4408      	add	r0, r1
    98fc:	343f      	adds	r4, #63	; 0x3f
    98fe:	b2c0      	uxtb	r0, r0
    9900:	b2d2      	uxtb	r2, r2
    9902:	42a3      	cmp	r3, r4
    9904:	d1ee      	bne.n	98e4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    9906:	2900      	cmp	r1, #0
    9908:	d0ec      	beq.n	98e4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    990a:	2a01      	cmp	r2, #1
    990c:	d001      	beq.n	9912 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    990e:	2a02      	cmp	r2, #2
    9910:	d1e8      	bne.n	98e4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    9912:	1c40      	adds	r0, r0, #1
    9914:	b2c0      	uxtb	r0, r0
    9916:	bd10      	pop	{r4, pc}
    9918:	200002f8 	.word	0x200002f8
    991c:	000120ef 	.word	0x000120ef

00009920 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    9920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9924:	461c      	mov	r4, r3
    9926:	4690      	mov	r8, r2
    9928:	460d      	mov	r5, r1
    992a:	4606      	mov	r6, r0
    992c:	f06f 0715 	mvn.w	r7, #21
    9930:	2804      	cmp	r0, #4
    9932:	d804      	bhi.n	993e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    9934:	b11c      	cbz	r4, 993e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    9936:	f007 ffab 	bl	11890 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    993a:	42a8      	cmp	r0, r5
    993c:	d802      	bhi.n	9944 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    993e:	4638      	mov	r0, r7
    9940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9944:	4805      	ldr	r0, [pc, #20]	; (995c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    9946:	4642      	mov	r2, r8
    9948:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    994c:	b118      	cbz	r0, 9956 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    994e:	5740      	ldrsb	r0, [r0, r5]
    9950:	4282      	cmp	r2, r0
    9952:	dd00      	ble.n	9956 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    9954:	4602      	mov	r2, r0
    9956:	7022      	strb	r2, [r4, #0]
    9958:	2000      	movs	r0, #0
    995a:	e7f1      	b.n	9940 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    995c:	20001704 	.word	0x20001704
    9960:	b570      	push	{r4, r5, r6, lr}
    9962:	460d      	mov	r5, r1
    9964:	0004      	movs	r4, r0
    9966:	d00c      	beq.n	9982 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
    9968:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    996c:	2100      	movs	r1, #0
    996e:	2002      	movs	r0, #2
    9970:	2d09      	cmp	r5, #9
    9972:	d26e      	bcs.n	9a52 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x132>
    9974:	e8df f005 	tbb	[pc, r5]
    9978:	36361108 	.word	0x36361108
    997c:	a6897166 	.word	0xa6897166
    9980:	0094      	.short	0x0094
    9982:	f44f 71cb 	mov.w	r1, #406	; 0x196
    9986:	e0f7      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9988:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    998c:	2804      	cmp	r0, #4
    998e:	d07b      	beq.n	9a88 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x168>
    9990:	2803      	cmp	r0, #3
    9992:	d0fc      	beq.n	998e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
    9994:	f240 11a1 	movw	r1, #417	; 0x1a1
    9998:	e0ee      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    999a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    999e:	2804      	cmp	r0, #4
    99a0:	d004      	beq.n	99ac <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    99a2:	2803      	cmp	r0, #3
    99a4:	d002      	beq.n	99ac <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    99a6:	f240 11a5 	movw	r1, #421	; 0x1a5
    99aa:	e0e5      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    99ac:	2005      	movs	r0, #5
    99ae:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    99b2:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    99b6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    99ba:	bbb8      	cbnz	r0, 9a2c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10c>
    99bc:	2100      	movs	r1, #0
    99be:	4620      	mov	r0, r4
    99c0:	f007 ffc7 	bl	11952 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
    99c4:	7820      	ldrb	r0, [r4, #0]
    99c6:	2801      	cmp	r0, #1
    99c8:	d007      	beq.n	99da <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xba>
    99ca:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    99ce:	bf00      	nop
    99d0:	e9c4 0106 	strd	r0, r1, [r4, #24]
    99d4:	2100      	movs	r1, #0
    99d6:	6a22      	ldr	r2, [r4, #32]
    99d8:	e048      	b.n	9a6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    99da:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    99de:	f001 fa3b 	bl	ae58 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    99e2:	e7f5      	b.n	99d0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb0>
    99e4:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    99e8:	2904      	cmp	r1, #4
    99ea:	d004      	beq.n	99f6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    99ec:	2903      	cmp	r1, #3
    99ee:	d002      	beq.n	99f6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    99f0:	f240 11c3 	movw	r1, #451	; 0x1c3
    99f4:	e0c0      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    99f6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    99fa:	b122      	cbz	r2, 9a06 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xe6>
    99fc:	4621      	mov	r1, r4
    99fe:	4630      	mov	r0, r6
    9a00:	f007 ffe7 	bl	119d2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
    9a04:	e0b0      	b.n	9b68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    9a06:	2904      	cmp	r1, #4
    9a08:	d000      	beq.n	9a0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xec>
    9a0a:	2001      	movs	r0, #1
    9a0c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    9a10:	6a22      	ldr	r2, [r4, #32]
    9a12:	2d02      	cmp	r5, #2
    9a14:	d00b      	beq.n	9a2e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10e>
    9a16:	2106      	movs	r1, #6
    9a18:	4630      	mov	r0, r6
    9a1a:	4790      	blx	r2
    9a1c:	2800      	cmp	r0, #0
    9a1e:	d06d      	beq.n	9afc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    9a20:	7800      	ldrb	r0, [r0, #0]
    9a22:	2800      	cmp	r0, #0
    9a24:	d06a      	beq.n	9afc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    9a26:	f240 11dd 	movw	r1, #477	; 0x1dd
    9a2a:	e0a5      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9a2c:	e034      	b.n	9a98 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    9a2e:	2105      	movs	r1, #5
    9a30:	4630      	mov	r0, r6
    9a32:	4790      	blx	r2
    9a34:	2800      	cmp	r0, #0
    9a36:	d070      	beq.n	9b1a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    9a38:	7800      	ldrb	r0, [r0, #0]
    9a3a:	2800      	cmp	r0, #0
    9a3c:	d06d      	beq.n	9b1a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    9a3e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    9a42:	e099      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9a44:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    9a48:	2805      	cmp	r0, #5
    9a4a:	d003      	beq.n	9a54 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x134>
    9a4c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    9a50:	e092      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9a52:	e080      	b.n	9b56 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x236>
    9a54:	2102      	movs	r1, #2
    9a56:	6a22      	ldr	r2, [r4, #32]
    9a58:	e008      	b.n	9a6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    9a5a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    9a5e:	2805      	cmp	r0, #5
    9a60:	d002      	beq.n	9a68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x148>
    9a62:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    9a66:	e087      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9a68:	6a22      	ldr	r2, [r4, #32]
    9a6a:	2101      	movs	r1, #1
    9a6c:	4630      	mov	r0, r6
    9a6e:	4790      	blx	r2
    9a70:	4601      	mov	r1, r0
    9a72:	4620      	mov	r0, r4
    9a74:	f007 ff18 	bl	118a8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    9a78:	2802      	cmp	r0, #2
    9a7a:	d075      	beq.n	9b68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    9a7c:	b3e8      	cbz	r0, 9afa <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1da>
    9a7e:	2801      	cmp	r0, #1
    9a80:	d06c      	beq.n	9b5c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x23c>
    9a82:	f240 212a 	movw	r1, #554	; 0x22a
    9a86:	e077      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9a88:	e070      	b.n	9b6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24c>
    9a8a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    9a8e:	2805      	cmp	r0, #5
    9a90:	d002      	beq.n	9a98 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    9a92:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    9a96:	e06f      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9a9c:	f000 b89e 	b.w	9bdc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
    9aa0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    9aa4:	2805      	cmp	r0, #5
    9aa6:	d002      	beq.n	9aae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x18e>
    9aa8:	f240 11f5 	movw	r1, #501	; 0x1f5
    9aac:	e064      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9aae:	6a22      	ldr	r2, [r4, #32]
    9ab0:	210a      	movs	r1, #10
    9ab2:	4630      	mov	r0, r6
    9ab4:	4790      	blx	r2
    9ab6:	4601      	mov	r1, r0
    9ab8:	4620      	mov	r0, r4
    9aba:	f007 fef5 	bl	118a8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    9abe:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    9ac2:	e059      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9ac4:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    9ac8:	2a05      	cmp	r2, #5
    9aca:	d007      	beq.n	9adc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    9acc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    9ad0:	b10b      	cbz	r3, 9ad6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1b6>
    9ad2:	2a03      	cmp	r2, #3
    9ad4:	d002      	beq.n	9adc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    9ad6:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    9ada:	e04d      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9adc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    9ae0:	b12a      	cbz	r2, 9aee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1ce>
    9ae2:	4621      	mov	r1, r4
    9ae4:	4630      	mov	r0, r6
    9ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9aea:	f007 bf72 	b.w	119d2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
    9aee:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    9af2:	b19a      	cbz	r2, 9b1c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fc>
    9af4:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    9af8:	e001      	b.n	9afe <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1de>
    9afa:	e032      	b.n	9b62 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x242>
    9afc:	e034      	b.n	9b68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    9afe:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    9b02:	6a22      	ldr	r2, [r4, #32]
    9b04:	2108      	movs	r1, #8
    9b06:	4630      	mov	r0, r6
    9b08:	4790      	blx	r2
    9b0a:	2800      	cmp	r0, #0
    9b0c:	d037      	beq.n	9b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9b0e:	7800      	ldrb	r0, [r0, #0]
    9b10:	2800      	cmp	r0, #0
    9b12:	d034      	beq.n	9b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9b14:	f44f 7102 	mov.w	r1, #520	; 0x208
    9b18:	e02e      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9b1a:	e030      	b.n	9b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9b1c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    9b20:	b15a      	cbz	r2, 9b3a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x21a>
    9b22:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    9b26:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    9b2a:	4621      	mov	r1, r4
    9b2c:	f007 ff0f 	bl	1194e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
    9b30:	2800      	cmp	r0, #0
    9b32:	d124      	bne.n	9b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9b34:	f240 210d 	movw	r1, #525	; 0x20d
    9b38:	e01e      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9b3a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    9b3e:	6a22      	ldr	r2, [r4, #32]
    9b40:	2107      	movs	r1, #7
    9b42:	4630      	mov	r0, r6
    9b44:	4790      	blx	r2
    9b46:	2800      	cmp	r0, #0
    9b48:	d019      	beq.n	9b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9b4a:	7800      	ldrb	r0, [r0, #0]
    9b4c:	2800      	cmp	r0, #0
    9b4e:	d016      	beq.n	9b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9b50:	f44f 7105 	mov.w	r1, #532	; 0x214
    9b54:	e010      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9b56:	f240 2119 	movw	r1, #537	; 0x219
    9b5a:	e00d      	b.n	9b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9b5c:	2104      	movs	r1, #4
    9b5e:	6a22      	ldr	r2, [r4, #32]
    9b60:	e784      	b.n	9a6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    9b62:	2103      	movs	r1, #3
    9b64:	6a22      	ldr	r2, [r4, #32]
    9b66:	e781      	b.n	9a6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    9b68:	2d00      	cmp	r5, #0
    9b6a:	d108      	bne.n	9b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9b6c:	f007 ffe7 	bl	11b3e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    9b70:	2800      	cmp	r0, #0
    9b72:	d004      	beq.n	9b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9b74:	f240 2133 	movw	r1, #563	; 0x233
    9b78:	206a      	movs	r0, #106	; 0x6a
    9b7a:	f003 fc7d 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b7e:	bd70      	pop	{r4, r5, r6, pc}
    9b80:	2800      	cmp	r0, #0
    9b82:	d019      	beq.n	9bb8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x298>
    9b84:	7803      	ldrb	r3, [r0, #0]
    9b86:	4913      	ldr	r1, [pc, #76]	; (9bd4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b4>)
    9b88:	4a13      	ldr	r2, [pc, #76]	; (9bd8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b8>)
    9b8a:	b113      	cbz	r3, 9b92 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x272>
    9b8c:	2b01      	cmp	r3, #1
    9b8e:	d00e      	beq.n	9bae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x28e>
    9b90:	e011      	b.n	9bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    9b92:	7903      	ldrb	r3, [r0, #4]
    9b94:	2b01      	cmp	r3, #1
    9b96:	d000      	beq.n	9b9a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x27a>
    9b98:	b96b      	cbnz	r3, 9bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    9b9a:	7943      	ldrb	r3, [r0, #5]
    9b9c:	b10b      	cbz	r3, 9ba2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x282>
    9b9e:	2b01      	cmp	r3, #1
    9ba0:	d109      	bne.n	9bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    9ba2:	6883      	ldr	r3, [r0, #8]
    9ba4:	3b64      	subs	r3, #100	; 0x64
    9ba6:	428b      	cmp	r3, r1
    9ba8:	d205      	bcs.n	9bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    9baa:	68c0      	ldr	r0, [r0, #12]
    9bac:	e00e      	b.n	9bcc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ac>
    9bae:	7903      	ldrb	r3, [r0, #4]
    9bb0:	2b01      	cmp	r3, #1
    9bb2:	d002      	beq.n	9bba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    9bb4:	b10b      	cbz	r3, 9bba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    9bb6:	2000      	movs	r0, #0
    9bb8:	4770      	bx	lr
    9bba:	7943      	ldrb	r3, [r0, #5]
    9bbc:	b10b      	cbz	r3, 9bc2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2a2>
    9bbe:	2b01      	cmp	r3, #1
    9bc0:	d1f9      	bne.n	9bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    9bc2:	68c3      	ldr	r3, [r0, #12]
    9bc4:	3b64      	subs	r3, #100	; 0x64
    9bc6:	428b      	cmp	r3, r1
    9bc8:	d2f5      	bcs.n	9bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    9bca:	6880      	ldr	r0, [r0, #8]
    9bcc:	4290      	cmp	r0, r2
    9bce:	d8f2      	bhi.n	9bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    9bd0:	2001      	movs	r0, #1
    9bd2:	4770      	bx	lr
    9bd4:	0001863d 	.word	0x0001863d
    9bd8:	0f423fff 	.word	0x0f423fff
    9bdc:	b510      	push	{r4, lr}
    9bde:	4c05      	ldr	r4, [pc, #20]	; (9bf4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2d4>)
    9be0:	6820      	ldr	r0, [r4, #0]
    9be2:	b110      	cbz	r0, 9bea <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ca>
    9be4:	4780      	blx	r0
    9be6:	2000      	movs	r0, #0
    9be8:	6020      	str	r0, [r4, #0]
    9bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9bee:	f002 b943 	b.w	be78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9bf2:	0000      	.short	0x0000
    9bf4:	20000300 	.word	0x20000300

00009bf8 <mpsl_timeslot_session_open>:
    9bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bfc:	460e      	mov	r6, r1
    9bfe:	0005      	movs	r5, r0
    9c00:	d004      	beq.n	9c0c <mpsl_timeslot_session_open+0x14>
    9c02:	f000 f847 	bl	9c94 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    9c06:	4607      	mov	r7, r0
    9c08:	2400      	movs	r4, #0
    9c0a:	e00b      	b.n	9c24 <mpsl_timeslot_session_open+0x2c>
    9c0c:	f06f 0015 	mvn.w	r0, #21
    9c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c14:	4620      	mov	r0, r4
    9c16:	f000 f843 	bl	9ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    9c1a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    9c1e:	b130      	cbz	r0, 9c2e <mpsl_timeslot_session_open+0x36>
    9c20:	1c64      	adds	r4, r4, #1
    9c22:	b2e4      	uxtb	r4, r4
    9c24:	42bc      	cmp	r4, r7
    9c26:	d3f5      	bcc.n	9c14 <mpsl_timeslot_session_open+0x1c>
    9c28:	f06f 000b 	mvn.w	r0, #11
    9c2c:	e7f0      	b.n	9c10 <mpsl_timeslot_session_open+0x18>
    9c2e:	4627      	mov	r7, r4
    9c30:	2cff      	cmp	r4, #255	; 0xff
    9c32:	d0f9      	beq.n	9c28 <mpsl_timeslot_session_open+0x30>
    9c34:	4620      	mov	r0, r4
    9c36:	f000 f833 	bl	9ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    9c3a:	4604      	mov	r4, r0
    9c3c:	f007 fee4 	bl	11a08 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
    9c40:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    9c44:	4621      	mov	r1, r4
    9c46:	4808      	ldr	r0, [pc, #32]	; (9c68 <mpsl_timeslot_session_open+0x70>)
    9c48:	f002 f8f2 	bl	be30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    9c4c:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    9c50:	2820      	cmp	r0, #32
    9c52:	d006      	beq.n	9c62 <mpsl_timeslot_session_open+0x6a>
    9c54:	2001      	movs	r0, #1
    9c56:	6225      	str	r5, [r4, #32]
    9c58:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    9c5c:	7037      	strb	r7, [r6, #0]
    9c5e:	2000      	movs	r0, #0
    9c60:	e7d6      	b.n	9c10 <mpsl_timeslot_session_open+0x18>
    9c62:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9c66:	e7d3      	b.n	9c10 <mpsl_timeslot_session_open+0x18>
    9c68:	00009961 	.word	0x00009961

00009c6c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    9c6c:	b510      	push	{r4, lr}
    9c6e:	0782      	lsls	r2, r0, #30
    9c70:	d002      	beq.n	9c78 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    9c72:	f06f 000d 	mvn.w	r0, #13
    9c76:	bd10      	pop	{r4, pc}
    9c78:	4a05      	ldr	r2, [pc, #20]	; (9c90 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    9c7a:	7011      	strb	r1, [r2, #0]
    9c7c:	6050      	str	r0, [r2, #4]
    9c7e:	b128      	cbz	r0, 9c8c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    9c80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9c84:	010a      	lsls	r2, r1, #4
    9c86:	2100      	movs	r1, #0
    9c88:	f008 f977 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9c8c:	2000      	movs	r0, #0
    9c8e:	bd10      	pop	{r4, pc}
    9c90:	20000304 	.word	0x20000304

00009c94 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    9c94:	4801      	ldr	r0, [pc, #4]	; (9c9c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    9c96:	7800      	ldrb	r0, [r0, #0]
    9c98:	4770      	bx	lr
    9c9a:	0000      	.short	0x0000
    9c9c:	20000304 	.word	0x20000304

00009ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    9ca0:	4905      	ldr	r1, [pc, #20]	; (9cb8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    9ca2:	780a      	ldrb	r2, [r1, #0]
    9ca4:	4290      	cmp	r0, r2
    9ca6:	d301      	bcc.n	9cac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    9ca8:	2000      	movs	r0, #0
    9caa:	4770      	bx	lr
    9cac:	6849      	ldr	r1, [r1, #4]
    9cae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9cb2:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    9cb6:	4770      	bx	lr
    9cb8:	20000304 	.word	0x20000304

00009cbc <MPSL_IRQ_RADIO_Handler>:
    9cbc:	490d      	ldr	r1, [pc, #52]	; (9cf4 <MPSL_IRQ_RADIO_Handler+0x38>)
    9cbe:	b510      	push	{r4, lr}
    9cc0:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    9cc4:	2820      	cmp	r0, #32
    9cc6:	d00f      	beq.n	9ce8 <MPSL_IRQ_RADIO_Handler+0x2c>
    9cc8:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    9ccc:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    9cd0:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    9cd4:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    9cd8:	6840      	ldr	r0, [r0, #4]
    9cda:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    9cde:	680a      	ldr	r2, [r1, #0]
    9ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9ce4:	2104      	movs	r1, #4
    9ce6:	4710      	bx	r2
    9ce8:	f640 017f 	movw	r1, #2175	; 0x87f
    9cec:	2070      	movs	r0, #112	; 0x70
    9cee:	f003 fbc3 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9cf2:	0000      	.short	0x0000
    9cf4:	200014a8 	.word	0x200014a8
    9cf8:	b570      	push	{r4, r5, r6, lr}
    9cfa:	4605      	mov	r5, r0
    9cfc:	2a20      	cmp	r2, #32
    9cfe:	d028      	beq.n	9d52 <MPSL_IRQ_RADIO_Handler+0x96>
    9d00:	4819      	ldr	r0, [pc, #100]	; (9d68 <MPSL_IRQ_RADIO_Handler+0xac>)
    9d02:	4c1a      	ldr	r4, [pc, #104]	; (9d6c <MPSL_IRQ_RADIO_Handler+0xb0>)
    9d04:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    9d08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9d0c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    9d10:	4423      	add	r3, r4
    9d12:	2920      	cmp	r1, #32
    9d14:	d022      	beq.n	9d5c <MPSL_IRQ_RADIO_Handler+0xa0>
    9d16:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    9d1a:	7840      	ldrb	r0, [r0, #1]
    9d1c:	784c      	ldrb	r4, [r1, #1]
    9d1e:	7048      	strb	r0, [r1, #1]
    9d20:	4620      	mov	r0, r4
    9d22:	4601      	mov	r1, r0
    9d24:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    9d28:	4291      	cmp	r1, r2
    9d2a:	7005      	strb	r5, [r0, #0]
    9d2c:	7840      	ldrb	r0, [r0, #1]
    9d2e:	d1f8      	bne.n	9d22 <MPSL_IRQ_RADIO_Handler+0x66>
    9d30:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    9d34:	2a20      	cmp	r2, #32
    9d36:	bf1a      	itte	ne
    9d38:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    9d3c:	7054      	strbne	r4, [r2, #1]
    9d3e:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    9d42:	2220      	movs	r2, #32
    9d44:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    9d48:	f88c 2001 	strb.w	r2, [ip, #1]
    9d4c:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    9d50:	bd70      	pop	{r4, r5, r6, pc}
    9d52:	f240 2186 	movw	r1, #646	; 0x286
    9d56:	2070      	movs	r0, #112	; 0x70
    9d58:	f003 fb8e 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d5c:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    9d60:	7840      	ldrb	r0, [r0, #1]
    9d62:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    9d66:	e7db      	b.n	9d20 <MPSL_IRQ_RADIO_Handler+0x64>
    9d68:	20001428 	.word	0x20001428
    9d6c:	200014a8 	.word	0x200014a8
    9d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d74:	b08f      	sub	sp, #60	; 0x3c
    9d76:	4615      	mov	r5, r2
    9d78:	461e      	mov	r6, r3
    9d7a:	460c      	mov	r4, r1
    9d7c:	f002 facc 	bl	c318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9d80:	1828      	adds	r0, r5, r0
    9d82:	f146 0100 	adc.w	r1, r6, #0
    9d86:	e9cd 1001 	strd	r1, r0, [sp, #4]
    9d8a:	e9d4 2300 	ldrd	r2, r3, [r4]
    9d8e:	1a80      	subs	r0, r0, r2
    9d90:	eb71 0003 	sbcs.w	r0, r1, r3
    9d94:	f0c0 80e5 	bcc.w	9f62 <MPSL_IRQ_RADIO_Handler+0x2a6>
    9d98:	a808      	add	r0, sp, #32
    9d9a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    9d9e:	900a      	str	r0, [sp, #40]	; 0x28
    9da0:	48bc      	ldr	r0, [pc, #752]	; (a094 <MPSL_IRQ_RADIO_Handler+0x3d8>)
    9da2:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    9da6:	4408      	add	r0, r1
    9da8:	9009      	str	r0, [sp, #36]	; 0x24
    9daa:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    9dae:	2020      	movs	r0, #32
    9db0:	f10d 091c 	add.w	r9, sp, #28
    9db4:	f88d 001c 	strb.w	r0, [sp, #28]
    9db8:	2d20      	cmp	r5, #32
    9dba:	d036      	beq.n	9e2a <MPSL_IRQ_RADIO_Handler+0x16e>
    9dbc:	48b6      	ldr	r0, [pc, #728]	; (a098 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    9dbe:	2600      	movs	r6, #0
    9dc0:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    9dc4:	48b5      	ldr	r0, [pc, #724]	; (a09c <MPSL_IRQ_RADIO_Handler+0x3e0>)
    9dc6:	e9d4 7300 	ldrd	r7, r3, [r4]
    9dca:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    9dce:	f850 8f08 	ldr.w	r8, [r0, #8]!
    9dd2:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    9dd6:	eb18 0101 	adds.w	r1, r8, r1
    9dda:	4172      	adcs	r2, r6
    9ddc:	1a79      	subs	r1, r7, r1
    9dde:	eb73 0102 	sbcs.w	r1, r3, r2
    9de2:	d322      	bcc.n	9e2a <MPSL_IRQ_RADIO_Handler+0x16e>
    9de4:	89e1      	ldrh	r1, [r4, #14]
    9de6:	b1c9      	cbz	r1, 9e1c <MPSL_IRQ_RADIO_Handler+0x160>
    9de8:	89c0      	ldrh	r0, [r0, #14]
    9dea:	b9b8      	cbnz	r0, 9e1c <MPSL_IRQ_RADIO_Handler+0x160>
    9dec:	f003 f986 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9df0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9df4:	bf08      	it	eq
    9df6:	200d      	moveq	r0, #13
    9df8:	d00b      	beq.n	9e12 <MPSL_IRQ_RADIO_Handler+0x156>
    9dfa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9dfe:	3856      	subs	r0, #86	; 0x56
    9e00:	bf08      	it	eq
    9e02:	201c      	moveq	r0, #28
    9e04:	d005      	beq.n	9e12 <MPSL_IRQ_RADIO_Handler+0x156>
    9e06:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9e0a:	389f      	subs	r0, #159	; 0x9f
    9e0c:	bf14      	ite	ne
    9e0e:	4630      	movne	r0, r6
    9e10:	2032      	moveq	r0, #50	; 0x32
    9e12:	1c40      	adds	r0, r0, #1
    9e14:	ebb7 0108 	subs.w	r1, r7, r8
    9e18:	4281      	cmp	r1, r0
    9e1a:	db06      	blt.n	9e2a <MPSL_IRQ_RADIO_Handler+0x16e>
    9e1c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9e20:	f889 5000 	strb.w	r5, [r9]
    9e24:	7845      	ldrb	r5, [r0, #1]
    9e26:	2d20      	cmp	r5, #32
    9e28:	d1cc      	bne.n	9dc4 <MPSL_IRQ_RADIO_Handler+0x108>
    9e2a:	980a      	ldr	r0, [sp, #40]	; 0x28
    9e2c:	f899 1000 	ldrb.w	r1, [r9]
    9e30:	2d20      	cmp	r5, #32
    9e32:	7001      	strb	r1, [r0, #0]
    9e34:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    9e38:	f000 8128 	beq.w	a08c <MPSL_IRQ_RADIO_Handler+0x3d0>
    9e3c:	4896      	ldr	r0, [pc, #600]	; (a098 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    9e3e:	4f97      	ldr	r7, [pc, #604]	; (a09c <MPSL_IRQ_RADIO_Handler+0x3e0>)
    9e40:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    9e44:	2600      	movs	r6, #0
    9e46:	9004      	str	r0, [sp, #16]
    9e48:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    9e4c:	f10a 0008 	add.w	r0, sl, #8
    9e50:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    9e54:	f8d4 b000 	ldr.w	fp, [r4]
    9e58:	e9d0 8300 	ldrd	r8, r3, [r0]
    9e5c:	eb1b 0202 	adds.w	r2, fp, r2
    9e60:	4171      	adcs	r1, r6
    9e62:	ebb8 0202 	subs.w	r2, r8, r2
    9e66:	eb73 0101 	sbcs.w	r1, r3, r1
    9e6a:	d320      	bcc.n	9eae <MPSL_IRQ_RADIO_Handler+0x1f2>
    9e6c:	89c0      	ldrh	r0, [r0, #14]
    9e6e:	2800      	cmp	r0, #0
    9e70:	f000 810c 	beq.w	a08c <MPSL_IRQ_RADIO_Handler+0x3d0>
    9e74:	89e0      	ldrh	r0, [r4, #14]
    9e76:	2800      	cmp	r0, #0
    9e78:	f040 8108 	bne.w	a08c <MPSL_IRQ_RADIO_Handler+0x3d0>
    9e7c:	f003 f93e 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9e80:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9e84:	bf08      	it	eq
    9e86:	200d      	moveq	r0, #13
    9e88:	d00b      	beq.n	9ea2 <MPSL_IRQ_RADIO_Handler+0x1e6>
    9e8a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9e8e:	3856      	subs	r0, #86	; 0x56
    9e90:	bf08      	it	eq
    9e92:	201c      	moveq	r0, #28
    9e94:	d005      	beq.n	9ea2 <MPSL_IRQ_RADIO_Handler+0x1e6>
    9e96:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9e9a:	389f      	subs	r0, #159	; 0x9f
    9e9c:	bf14      	ite	ne
    9e9e:	4630      	movne	r0, r6
    9ea0:	2032      	moveq	r0, #50	; 0x32
    9ea2:	1c41      	adds	r1, r0, #1
    9ea4:	ebb8 000b 	subs.w	r0, r8, fp
    9ea8:	4288      	cmp	r0, r1
    9eaa:	f280 80ef 	bge.w	a08c <MPSL_IRQ_RADIO_Handler+0x3d0>
    9eae:	f889 5000 	strb.w	r5, [r9]
    9eb2:	f89a 0018 	ldrb.w	r0, [sl, #24]
    9eb6:	7c21      	ldrb	r1, [r4, #16]
    9eb8:	4281      	cmp	r1, r0
    9eba:	d207      	bcs.n	9ecc <MPSL_IRQ_RADIO_Handler+0x210>
    9ebc:	9804      	ldr	r0, [sp, #16]
    9ebe:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    9ec2:	7845      	ldrb	r5, [r0, #1]
    9ec4:	2d20      	cmp	r5, #32
    9ec6:	d1bf      	bne.n	9e48 <MPSL_IRQ_RADIO_Handler+0x18c>
    9ec8:	f000 b8e0 	b.w	a08c <MPSL_IRQ_RADIO_Handler+0x3d0>
    9ecc:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9ed0:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    9ed4:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    9ed8:	f8d0 9008 	ldr.w	r9, [r0, #8]
    9edc:	8ac0      	ldrh	r0, [r0, #22]
    9ede:	eb19 0502 	adds.w	r5, r9, r2
    9ee2:	eb41 0806 	adc.w	r8, r1, r6
    9ee6:	bbb0      	cbnz	r0, 9f56 <MPSL_IRQ_RADIO_Handler+0x29a>
    9ee8:	89e0      	ldrh	r0, [r4, #14]
    9eea:	b3a0      	cbz	r0, 9f56 <MPSL_IRQ_RADIO_Handler+0x29a>
    9eec:	f003 f906 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9ef0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9ef4:	bf08      	it	eq
    9ef6:	200d      	moveq	r0, #13
    9ef8:	d00b      	beq.n	9f12 <MPSL_IRQ_RADIO_Handler+0x256>
    9efa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9efe:	3856      	subs	r0, #86	; 0x56
    9f00:	bf08      	it	eq
    9f02:	201c      	moveq	r0, #28
    9f04:	d005      	beq.n	9f12 <MPSL_IRQ_RADIO_Handler+0x256>
    9f06:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9f0a:	389f      	subs	r0, #159	; 0x9f
    9f0c:	bf14      	ite	ne
    9f0e:	4630      	movne	r0, r6
    9f10:	2032      	moveq	r0, #50	; 0x32
    9f12:	1c41      	adds	r1, r0, #1
    9f14:	ebb5 0009 	subs.w	r0, r5, r9
    9f18:	4288      	cmp	r0, r1
    9f1a:	da1c      	bge.n	9f56 <MPSL_IRQ_RADIO_Handler+0x29a>
    9f1c:	f003 f8ee 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9f20:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9f24:	bf08      	it	eq
    9f26:	200d      	moveq	r0, #13
    9f28:	d00b      	beq.n	9f42 <MPSL_IRQ_RADIO_Handler+0x286>
    9f2a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9f2e:	3856      	subs	r0, #86	; 0x56
    9f30:	bf08      	it	eq
    9f32:	201c      	moveq	r0, #28
    9f34:	d005      	beq.n	9f42 <MPSL_IRQ_RADIO_Handler+0x286>
    9f36:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9f3a:	389f      	subs	r0, #159	; 0x9f
    9f3c:	bf14      	ite	ne
    9f3e:	4630      	movne	r0, r6
    9f40:	2032      	moveq	r0, #50	; 0x32
    9f42:	f89d 1020 	ldrb.w	r1, [sp, #32]
    9f46:	1c40      	adds	r0, r0, #1
    9f48:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    9f4c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    9f50:	1815      	adds	r5, r2, r0
    9f52:	eb43 0806 	adc.w	r8, r3, r6
    9f56:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    9f5a:	1b49      	subs	r1, r1, r5
    9f5c:	eb70 0008 	sbcs.w	r0, r0, r8
    9f60:	d203      	bcs.n	9f6a <MPSL_IRQ_RADIO_Handler+0x2ae>
    9f62:	b00f      	add	sp, #60	; 0x3c
    9f64:	2000      	movs	r0, #0
    9f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f6a:	e9c4 5800 	strd	r5, r8, [r4]
    9f6e:	9818      	ldr	r0, [sp, #96]	; 0x60
    9f70:	900b      	str	r0, [sp, #44]	; 0x2c
    9f72:	a808      	add	r0, sp, #32
    9f74:	900a      	str	r0, [sp, #40]	; 0x28
    9f76:	9809      	ldr	r0, [sp, #36]	; 0x24
    9f78:	f10d 0a1c 	add.w	sl, sp, #28
    9f7c:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    9f80:	2020      	movs	r0, #32
    9f82:	f88d 001c 	strb.w	r0, [sp, #28]
    9f86:	2d20      	cmp	r5, #32
    9f88:	d037      	beq.n	9ffa <MPSL_IRQ_RADIO_Handler+0x33e>
    9f8a:	4843      	ldr	r0, [pc, #268]	; (a098 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    9f8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9f8e:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    9f92:	bf00      	nop
    9f94:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    9f98:	e9d4 8300 	ldrd	r8, r3, [r4]
    9f9c:	f850 9f08 	ldr.w	r9, [r0, #8]!
    9fa0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    9fa4:	eb19 0202 	adds.w	r2, r9, r2
    9fa8:	4171      	adcs	r1, r6
    9faa:	ebb8 0202 	subs.w	r2, r8, r2
    9fae:	eb73 0101 	sbcs.w	r1, r3, r1
    9fb2:	d322      	bcc.n	9ffa <MPSL_IRQ_RADIO_Handler+0x33e>
    9fb4:	89e1      	ldrh	r1, [r4, #14]
    9fb6:	b1c9      	cbz	r1, 9fec <MPSL_IRQ_RADIO_Handler+0x330>
    9fb8:	89c0      	ldrh	r0, [r0, #14]
    9fba:	b9b8      	cbnz	r0, 9fec <MPSL_IRQ_RADIO_Handler+0x330>
    9fbc:	f003 f89e 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9fc0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9fc4:	bf08      	it	eq
    9fc6:	200d      	moveq	r0, #13
    9fc8:	d00b      	beq.n	9fe2 <MPSL_IRQ_RADIO_Handler+0x326>
    9fca:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9fce:	3856      	subs	r0, #86	; 0x56
    9fd0:	bf08      	it	eq
    9fd2:	201c      	moveq	r0, #28
    9fd4:	d005      	beq.n	9fe2 <MPSL_IRQ_RADIO_Handler+0x326>
    9fd6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9fda:	389f      	subs	r0, #159	; 0x9f
    9fdc:	bf14      	ite	ne
    9fde:	4630      	movne	r0, r6
    9fe0:	2032      	moveq	r0, #50	; 0x32
    9fe2:	1c41      	adds	r1, r0, #1
    9fe4:	ebb8 0009 	subs.w	r0, r8, r9
    9fe8:	4288      	cmp	r0, r1
    9fea:	db06      	blt.n	9ffa <MPSL_IRQ_RADIO_Handler+0x33e>
    9fec:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9ff0:	f88a 5000 	strb.w	r5, [sl]
    9ff4:	7845      	ldrb	r5, [r0, #1]
    9ff6:	2d20      	cmp	r5, #32
    9ff8:	d1cc      	bne.n	9f94 <MPSL_IRQ_RADIO_Handler+0x2d8>
    9ffa:	980a      	ldr	r0, [sp, #40]	; 0x28
    9ffc:	f89a 1000 	ldrb.w	r1, [sl]
    a000:	2d20      	cmp	r5, #32
    a002:	7001      	strb	r1, [r0, #0]
    a004:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    a008:	d040      	beq.n	a08c <MPSL_IRQ_RADIO_Handler+0x3d0>
    a00a:	4923      	ldr	r1, [pc, #140]	; (a098 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    a00c:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    a010:	f8cd 000c 	str.w	r0, [sp, #12]
    a014:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    a018:	f109 0008 	add.w	r0, r9, #8
    a01c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    a020:	f8d4 b000 	ldr.w	fp, [r4]
    a024:	e9d0 a300 	ldrd	sl, r3, [r0]
    a028:	eb1b 0202 	adds.w	r2, fp, r2
    a02c:	4171      	adcs	r1, r6
    a02e:	ebba 0202 	subs.w	r2, sl, r2
    a032:	eb73 0101 	sbcs.w	r1, r3, r1
    a036:	d31b      	bcc.n	a070 <MPSL_IRQ_RADIO_Handler+0x3b4>
    a038:	89c0      	ldrh	r0, [r0, #14]
    a03a:	b338      	cbz	r0, a08c <MPSL_IRQ_RADIO_Handler+0x3d0>
    a03c:	89e0      	ldrh	r0, [r4, #14]
    a03e:	bb28      	cbnz	r0, a08c <MPSL_IRQ_RADIO_Handler+0x3d0>
    a040:	f003 f85c 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a044:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a048:	bf08      	it	eq
    a04a:	200d      	moveq	r0, #13
    a04c:	d00b      	beq.n	a066 <MPSL_IRQ_RADIO_Handler+0x3aa>
    a04e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a052:	3856      	subs	r0, #86	; 0x56
    a054:	bf08      	it	eq
    a056:	201c      	moveq	r0, #28
    a058:	d005      	beq.n	a066 <MPSL_IRQ_RADIO_Handler+0x3aa>
    a05a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a05e:	389f      	subs	r0, #159	; 0x9f
    a060:	bf14      	ite	ne
    a062:	4630      	movne	r0, r6
    a064:	2032      	moveq	r0, #50	; 0x32
    a066:	1c41      	adds	r1, r0, #1
    a068:	ebba 000b 	subs.w	r0, sl, fp
    a06c:	4288      	cmp	r0, r1
    a06e:	da0d      	bge.n	a08c <MPSL_IRQ_RADIO_Handler+0x3d0>
    a070:	f888 5000 	strb.w	r5, [r8]
    a074:	f899 1018 	ldrb.w	r1, [r9, #24]
    a078:	7c20      	ldrb	r0, [r4, #16]
    a07a:	4288      	cmp	r0, r1
    a07c:	f4bf af26 	bcs.w	9ecc <MPSL_IRQ_RADIO_Handler+0x210>
    a080:	9803      	ldr	r0, [sp, #12]
    a082:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    a086:	7845      	ldrb	r5, [r0, #1]
    a088:	2d20      	cmp	r5, #32
    a08a:	d1c3      	bne.n	a014 <MPSL_IRQ_RADIO_Handler+0x358>
    a08c:	b00f      	add	sp, #60	; 0x3c
    a08e:	2001      	movs	r0, #1
    a090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a094:	200014a8 	.word	0x200014a8
    a098:	20001428 	.word	0x20001428
    a09c:	20001028 	.word	0x20001028
    a0a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a0a4:	b083      	sub	sp, #12
    a0a6:	4691      	mov	r9, r2
    a0a8:	4604      	mov	r4, r0
    a0aa:	460d      	mov	r5, r1
    a0ac:	4698      	mov	r8, r3
    a0ae:	aa01      	add	r2, sp, #4
    a0b0:	4669      	mov	r1, sp
    a0b2:	4618      	mov	r0, r3
    a0b4:	f002 f94c 	bl	c350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a0b8:	f002 fe48 	bl	cd4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a0bc:	f002 f92c 	bl	c318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a0c0:	4607      	mov	r7, r0
    a0c2:	481e      	ldr	r0, [pc, #120]	; (a13c <MPSL_IRQ_RADIO_Handler+0x480>)
    a0c4:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    a0c8:	2600      	movs	r6, #0
    a0ca:	2920      	cmp	r1, #32
    a0cc:	d009      	beq.n	a0e2 <MPSL_IRQ_RADIO_Handler+0x426>
    a0ce:	6882      	ldr	r2, [r0, #8]
    a0d0:	68c1      	ldr	r1, [r0, #12]
    a0d2:	6900      	ldr	r0, [r0, #16]
    a0d4:	1d83      	adds	r3, r0, #6
    a0d6:	f146 0000 	adc.w	r0, r6, #0
    a0da:	18d4      	adds	r4, r2, r3
    a0dc:	eb41 0500 	adc.w	r5, r1, r0
    a0e0:	e026      	b.n	a130 <MPSL_IRQ_RADIO_Handler+0x474>
    a0e2:	340a      	adds	r4, #10
    a0e4:	f145 0500 	adc.w	r5, r5, #0
    a0e8:	f1b8 0f00 	cmp.w	r8, #0
    a0ec:	d017      	beq.n	a11e <MPSL_IRQ_RADIO_Handler+0x462>
    a0ee:	f003 f94b 	bl	d388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a0f2:	b9a0      	cbnz	r0, a11e <MPSL_IRQ_RADIO_Handler+0x462>
    a0f4:	f003 f802 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a0f8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a0fc:	bf08      	it	eq
    a0fe:	200d      	moveq	r0, #13
    a100:	d00b      	beq.n	a11a <MPSL_IRQ_RADIO_Handler+0x45e>
    a102:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a106:	3856      	subs	r0, #86	; 0x56
    a108:	bf08      	it	eq
    a10a:	201c      	moveq	r0, #28
    a10c:	d005      	beq.n	a11a <MPSL_IRQ_RADIO_Handler+0x45e>
    a10e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a112:	389f      	subs	r0, #159	; 0x9f
    a114:	bf14      	ite	ne
    a116:	4630      	movne	r0, r6
    a118:	2032      	moveq	r0, #50	; 0x32
    a11a:	1904      	adds	r4, r0, r4
    a11c:	4175      	adcs	r5, r6
    a11e:	f1b9 0f00 	cmp.w	r9, #0
    a122:	d105      	bne.n	a130 <MPSL_IRQ_RADIO_Handler+0x474>
    a124:	9800      	ldr	r0, [sp, #0]
    a126:	4287      	cmp	r7, r0
    a128:	d902      	bls.n	a130 <MPSL_IRQ_RADIO_Handler+0x474>
    a12a:	1a38      	subs	r0, r7, r0
    a12c:	1904      	adds	r4, r0, r4
    a12e:	4175      	adcs	r5, r6
    a130:	b003      	add	sp, #12
    a132:	4620      	mov	r0, r4
    a134:	4629      	mov	r1, r5
    a136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a13a:	0000      	.short	0x0000
    a13c:	200014a8 	.word	0x200014a8
    a140:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a144:	b081      	sub	sp, #4
    a146:	4605      	mov	r5, r0
    a148:	9802      	ldr	r0, [sp, #8]
    a14a:	494a      	ldr	r1, [pc, #296]	; (a274 <MPSL_IRQ_RADIO_Handler+0x5b8>)
    a14c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a150:	4408      	add	r0, r1
    a152:	2600      	movs	r6, #0
    a154:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    a158:	2020      	movs	r0, #32
    a15a:	4692      	mov	sl, r2
    a15c:	7010      	strb	r0, [r2, #0]
    a15e:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    a162:	2c20      	cmp	r4, #32
    a164:	d036      	beq.n	a1d4 <MPSL_IRQ_RADIO_Handler+0x518>
    a166:	9902      	ldr	r1, [sp, #8]
    a168:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    a16c:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    a170:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    a174:	e9d5 7300 	ldrd	r7, r3, [r5]
    a178:	f850 8f08 	ldr.w	r8, [r0, #8]!
    a17c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    a180:	eb18 0202 	adds.w	r2, r8, r2
    a184:	4171      	adcs	r1, r6
    a186:	1aba      	subs	r2, r7, r2
    a188:	eb73 0101 	sbcs.w	r1, r3, r1
    a18c:	d322      	bcc.n	a1d4 <MPSL_IRQ_RADIO_Handler+0x518>
    a18e:	89e9      	ldrh	r1, [r5, #14]
    a190:	b1c9      	cbz	r1, a1c6 <MPSL_IRQ_RADIO_Handler+0x50a>
    a192:	89c0      	ldrh	r0, [r0, #14]
    a194:	b9b8      	cbnz	r0, a1c6 <MPSL_IRQ_RADIO_Handler+0x50a>
    a196:	f002 ffb1 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a19a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a19e:	bf08      	it	eq
    a1a0:	200d      	moveq	r0, #13
    a1a2:	d00b      	beq.n	a1bc <MPSL_IRQ_RADIO_Handler+0x500>
    a1a4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a1a8:	3856      	subs	r0, #86	; 0x56
    a1aa:	bf08      	it	eq
    a1ac:	201c      	moveq	r0, #28
    a1ae:	d005      	beq.n	a1bc <MPSL_IRQ_RADIO_Handler+0x500>
    a1b0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a1b4:	389f      	subs	r0, #159	; 0x9f
    a1b6:	bf14      	ite	ne
    a1b8:	4630      	movne	r0, r6
    a1ba:	2032      	moveq	r0, #50	; 0x32
    a1bc:	1c41      	adds	r1, r0, #1
    a1be:	ebb7 0008 	subs.w	r0, r7, r8
    a1c2:	4288      	cmp	r0, r1
    a1c4:	db06      	blt.n	a1d4 <MPSL_IRQ_RADIO_Handler+0x518>
    a1c6:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    a1ca:	f88a 4000 	strb.w	r4, [sl]
    a1ce:	7844      	ldrb	r4, [r0, #1]
    a1d0:	2c20      	cmp	r4, #32
    a1d2:	d1cd      	bne.n	a170 <MPSL_IRQ_RADIO_Handler+0x4b4>
    a1d4:	9804      	ldr	r0, [sp, #16]
    a1d6:	f89a 1000 	ldrb.w	r1, [sl]
    a1da:	2c20      	cmp	r4, #32
    a1dc:	7001      	strb	r1, [r0, #0]
    a1de:	9f04      	ldr	r7, [sp, #16]
    a1e0:	9802      	ldr	r0, [sp, #8]
    a1e2:	d042      	beq.n	a26a <MPSL_IRQ_RADIO_Handler+0x5ae>
    a1e4:	4924      	ldr	r1, [pc, #144]	; (a278 <MPSL_IRQ_RADIO_Handler+0x5bc>)
    a1e6:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    a1ea:	9000      	str	r0, [sp, #0]
    a1ec:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    a1f0:	f8d5 b000 	ldr.w	fp, [r5]
    a1f4:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    a1f8:	f108 0008 	add.w	r0, r8, #8
    a1fc:	eb1b 0201 	adds.w	r2, fp, r1
    a200:	eb43 0106 	adc.w	r1, r3, r6
    a204:	e9d0 a300 	ldrd	sl, r3, [r0]
    a208:	ebba 0202 	subs.w	r2, sl, r2
    a20c:	eb73 0101 	sbcs.w	r1, r3, r1
    a210:	d31b      	bcc.n	a24a <MPSL_IRQ_RADIO_Handler+0x58e>
    a212:	89c0      	ldrh	r0, [r0, #14]
    a214:	b348      	cbz	r0, a26a <MPSL_IRQ_RADIO_Handler+0x5ae>
    a216:	89e8      	ldrh	r0, [r5, #14]
    a218:	bb38      	cbnz	r0, a26a <MPSL_IRQ_RADIO_Handler+0x5ae>
    a21a:	f002 ff6f 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a21e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a222:	bf08      	it	eq
    a224:	200d      	moveq	r0, #13
    a226:	d00b      	beq.n	a240 <MPSL_IRQ_RADIO_Handler+0x584>
    a228:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a22c:	3856      	subs	r0, #86	; 0x56
    a22e:	bf08      	it	eq
    a230:	201c      	moveq	r0, #28
    a232:	d005      	beq.n	a240 <MPSL_IRQ_RADIO_Handler+0x584>
    a234:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a238:	389f      	subs	r0, #159	; 0x9f
    a23a:	bf14      	ite	ne
    a23c:	4630      	movne	r0, r6
    a23e:	2032      	moveq	r0, #50	; 0x32
    a240:	1c41      	adds	r1, r0, #1
    a242:	ebba 000b 	subs.w	r0, sl, fp
    a246:	4288      	cmp	r0, r1
    a248:	da0f      	bge.n	a26a <MPSL_IRQ_RADIO_Handler+0x5ae>
    a24a:	703c      	strb	r4, [r7, #0]
    a24c:	f898 1018 	ldrb.w	r1, [r8, #24]
    a250:	7c28      	ldrb	r0, [r5, #16]
    a252:	4288      	cmp	r0, r1
    a254:	d303      	bcc.n	a25e <MPSL_IRQ_RADIO_Handler+0x5a2>
    a256:	b005      	add	sp, #20
    a258:	2000      	movs	r0, #0
    a25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a25e:	9800      	ldr	r0, [sp, #0]
    a260:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    a264:	7844      	ldrb	r4, [r0, #1]
    a266:	2c20      	cmp	r4, #32
    a268:	d1c0      	bne.n	a1ec <MPSL_IRQ_RADIO_Handler+0x530>
    a26a:	b005      	add	sp, #20
    a26c:	2001      	movs	r0, #1
    a26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a272:	0000      	.short	0x0000
    a274:	200014a8 	.word	0x200014a8
    a278:	20001428 	.word	0x20001428
    a27c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    a280:	b09c      	sub	sp, #112	; 0x70
    a282:	461f      	mov	r7, r3
    a284:	f002 fab4 	bl	c7f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    a288:	4604      	mov	r4, r0
    a28a:	460d      	mov	r5, r1
    a28c:	f002 fd5e 	bl	cd4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a290:	4606      	mov	r6, r0
    a292:	981e      	ldr	r0, [sp, #120]	; 0x78
    a294:	2801      	cmp	r0, #1
    a296:	bf18      	it	ne
    a298:	2802      	cmpne	r0, #2
    a29a:	d005      	beq.n	a2a8 <MPSL_IRQ_RADIO_Handler+0x5ec>
    a29c:	f640 1156 	movw	r1, #2390	; 0x956
    a2a0:	f04f 0070 	mov.w	r0, #112	; 0x70
    a2a4:	f003 f8e8 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2a8:	49fe      	ldr	r1, [pc, #1016]	; (a6a4 <MPSL_IRQ_RADIO_Handler+0x9e8>)
    a2aa:	2001      	movs	r0, #1
    a2ac:	6008      	str	r0, [r1, #0]
    a2ae:	49fe      	ldr	r1, [pc, #1016]	; (a6a8 <MPSL_IRQ_RADIO_Handler+0x9ec>)
    a2b0:	6889      	ldr	r1, [r1, #8]
    a2b2:	6008      	str	r0, [r1, #0]
    a2b4:	2000      	movs	r0, #0
    a2b6:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    a2ba:	900c      	str	r0, [sp, #48]	; 0x30
    a2bc:	1e40      	subs	r0, r0, #1
    a2be:	900d      	str	r0, [sp, #52]	; 0x34
    a2c0:	48fa      	ldr	r0, [pc, #1000]	; (a6ac <MPSL_IRQ_RADIO_Handler+0x9f0>)
    a2c2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    a2c6:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    a2ca:	f100 0108 	add.w	r1, r0, #8
    a2ce:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    a2d2:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    a2d6:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    a2da:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    a2de:	980e      	ldr	r0, [sp, #56]	; 0x38
    a2e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a2e4:	f007 fc3f 	bl	11b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a2e8:	4602      	mov	r2, r0
    a2ea:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    a2ee:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    a2f2:	4bef      	ldr	r3, [pc, #956]	; (a6b0 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    a2f4:	4440      	add	r0, r8
    a2f6:	1c41      	adds	r1, r0, #1
    a2f8:	1850      	adds	r0, r2, r1
    a2fa:	429a      	cmp	r2, r3
    a2fc:	d856      	bhi.n	a3ac <MPSL_IRQ_RADIO_Handler+0x6f0>
    a2fe:	4aed      	ldr	r2, [pc, #948]	; (a6b4 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    a300:	4291      	cmp	r1, r2
    a302:	dc5b      	bgt.n	a3bc <MPSL_IRQ_RADIO_Handler+0x700>
    a304:	4252      	negs	r2, r2
    a306:	4291      	cmp	r1, r2
    a308:	db60      	blt.n	a3cc <MPSL_IRQ_RADIO_Handler+0x710>
    a30a:	1c59      	adds	r1, r3, #1
    a30c:	4281      	cmp	r1, r0
    a30e:	bfdc      	itt	le
    a310:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    a314:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    a318:	dd05      	ble.n	a326 <MPSL_IRQ_RADIO_Handler+0x66a>
    a31a:	2800      	cmp	r0, #0
    a31c:	bfbc      	itt	lt
    a31e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    a322:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    a326:	9017      	str	r0, [sp, #92]	; 0x5c
    a328:	48e3      	ldr	r0, [pc, #908]	; (a6b8 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    a32a:	f1b8 0f00 	cmp.w	r8, #0
    a32e:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    a332:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    a336:	bf14      	ite	ne
    a338:	f04f 0a01 	movne.w	sl, #1
    a33c:	f04f 0a00 	moveq.w	sl, #0
    a340:	f003 f822 	bl	d388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a344:	9019      	str	r0, [sp, #100]	; 0x64
    a346:	f1ba 0f00 	cmp.w	sl, #0
    a34a:	d00b      	beq.n	a364 <MPSL_IRQ_RADIO_Handler+0x6a8>
    a34c:	49db      	ldr	r1, [pc, #876]	; (a6bc <MPSL_IRQ_RADIO_Handler+0xa00>)
    a34e:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    a352:	ea6f 0200 	mvn.w	r2, r0
    a356:	ea72 0001 	orns	r0, r2, r1
    a35a:	bf02      	ittt	eq
    a35c:	9819      	ldreq	r0, [sp, #100]	; 0x64
    a35e:	2800      	cmpeq	r0, #0
    a360:	2701      	moveq	r7, #1
    a362:	d001      	beq.n	a368 <MPSL_IRQ_RADIO_Handler+0x6ac>
    a364:	f04f 0700 	mov.w	r7, #0
    a368:	f002 fec8 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a36c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a370:	bf08      	it	eq
    a372:	200d      	moveq	r0, #13
    a374:	d00b      	beq.n	a38e <MPSL_IRQ_RADIO_Handler+0x6d2>
    a376:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a37a:	3856      	subs	r0, #86	; 0x56
    a37c:	bf08      	it	eq
    a37e:	201c      	moveq	r0, #28
    a380:	d005      	beq.n	a38e <MPSL_IRQ_RADIO_Handler+0x6d2>
    a382:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a386:	389f      	subs	r0, #159	; 0x9f
    a388:	bf14      	ite	ne
    a38a:	2000      	movne	r0, #0
    a38c:	2032      	moveq	r0, #50	; 0x32
    a38e:	f04f 0900 	mov.w	r9, #0
    a392:	46cb      	mov	fp, r9
    a394:	9016      	str	r0, [sp, #88]	; 0x58
    a396:	4546      	cmp	r6, r8
    a398:	d936      	bls.n	a408 <MPSL_IRQ_RADIO_Handler+0x74c>
    a39a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    a39c:	43f3      	mvns	r3, r6
    a39e:	f8df c310 	ldr.w	ip, [pc, #784]	; a6b0 <MPSL_IRQ_RADIO_Handler+0x9f4>
    a3a2:	18c8      	adds	r0, r1, r3
    a3a4:	46e9      	mov	r9, sp
    a3a6:	aa1a      	add	r2, sp, #104	; 0x68
    a3a8:	4561      	cmp	r1, ip
    a3aa:	d904      	bls.n	a3b6 <MPSL_IRQ_RADIO_Handler+0x6fa>
    a3ac:	f240 517f 	movw	r1, #1407	; 0x57f
    a3b0:	2070      	movs	r0, #112	; 0x70
    a3b2:	f003 f861 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a3b6:	49bf      	ldr	r1, [pc, #764]	; (a6b4 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    a3b8:	428b      	cmp	r3, r1
    a3ba:	dd04      	ble.n	a3c6 <MPSL_IRQ_RADIO_Handler+0x70a>
    a3bc:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    a3c0:	2070      	movs	r0, #112	; 0x70
    a3c2:	f003 f859 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a3c6:	49be      	ldr	r1, [pc, #760]	; (a6c0 <MPSL_IRQ_RADIO_Handler+0xa04>)
    a3c8:	428b      	cmp	r3, r1
    a3ca:	da04      	bge.n	a3d6 <MPSL_IRQ_RADIO_Handler+0x71a>
    a3cc:	f240 5181 	movw	r1, #1409	; 0x581
    a3d0:	2070      	movs	r0, #112	; 0x70
    a3d2:	f003 f851 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a3d6:	49bb      	ldr	r1, [pc, #748]	; (a6c4 <MPSL_IRQ_RADIO_Handler+0xa08>)
    a3d8:	4281      	cmp	r1, r0
    a3da:	bfdc      	itt	le
    a3dc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    a3e0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    a3e4:	dd05      	ble.n	a3f2 <MPSL_IRQ_RADIO_Handler+0x736>
    a3e6:	2800      	cmp	r0, #0
    a3e8:	bfbc      	itt	lt
    a3ea:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    a3ee:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    a3f2:	4649      	mov	r1, r9
    a3f4:	f001 ffac 	bl	c350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a3f8:	9800      	ldr	r0, [sp, #0]
    a3fa:	990e      	ldr	r1, [sp, #56]	; 0x38
    a3fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a400:	9000      	str	r0, [sp, #0]
    a402:	1a08      	subs	r0, r1, r0
    a404:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    a408:	2f00      	cmp	r7, #0
    a40a:	bf18      	it	ne
    a40c:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    a410:	d105      	bne.n	a41e <MPSL_IRQ_RADIO_Handler+0x762>
    a412:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    a416:	2800      	cmp	r0, #0
    a418:	bf18      	it	ne
    a41a:	f04f 0b02 	movne.w	fp, #2
    a41e:	43e0      	mvns	r0, r4
    a420:	ea70 0005 	orns	r0, r0, r5
    a424:	d022      	beq.n	a46c <MPSL_IRQ_RADIO_Handler+0x7b0>
    a426:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    a42a:	1a22      	subs	r2, r4, r0
    a42c:	eb75 0201 	sbcs.w	r2, r5, r1
    a430:	d20c      	bcs.n	a44c <MPSL_IRQ_RADIO_Handler+0x790>
    a432:	1b02      	subs	r2, r0, r4
    a434:	eb61 0105 	sbc.w	r1, r1, r5
    a438:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    a43c:	f171 0100 	sbcs.w	r1, r1, #0
    a440:	d311      	bcc.n	a466 <MPSL_IRQ_RADIO_Handler+0x7aa>
    a442:	f640 1195 	movw	r1, #2453	; 0x995
    a446:	2070      	movs	r0, #112	; 0x70
    a448:	f003 f816 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a44c:	1a22      	subs	r2, r4, r0
    a44e:	eb65 0101 	sbc.w	r1, r5, r1
    a452:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    a456:	f171 0100 	sbcs.w	r1, r1, #0
    a45a:	d304      	bcc.n	a466 <MPSL_IRQ_RADIO_Handler+0x7aa>
    a45c:	f640 1199 	movw	r1, #2457	; 0x999
    a460:	2070      	movs	r0, #112	; 0x70
    a462:	f003 f809 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a466:	1b00      	subs	r0, r0, r4
    a468:	2801      	cmp	r0, #1
    a46a:	da03      	bge.n	a474 <MPSL_IRQ_RADIO_Handler+0x7b8>
    a46c:	981c      	ldr	r0, [sp, #112]	; 0x70
    a46e:	901a      	str	r0, [sp, #104]	; 0x68
    a470:	2003      	movs	r0, #3
    a472:	e00d      	b.n	a490 <MPSL_IRQ_RADIO_Handler+0x7d4>
    a474:	b157      	cbz	r7, a48c <MPSL_IRQ_RADIO_Handler+0x7d0>
    a476:	4891      	ldr	r0, [pc, #580]	; (a6bc <MPSL_IRQ_RADIO_Handler+0xa00>)
    a478:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    a47c:	b130      	cbz	r0, a48c <MPSL_IRQ_RADIO_Handler+0x7d0>
    a47e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    a482:	f110 0b00 	adds.w	fp, r0, #0
    a486:	bf18      	it	ne
    a488:	f04f 0b02 	movne.w	fp, #2
    a48c:	2000      	movs	r0, #0
    a48e:	941a      	str	r4, [sp, #104]	; 0x68
    a490:	4483      	add	fp, r0
    a492:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    a496:	ebb0 0009 	subs.w	r0, r0, r9
    a49a:	f162 0100 	sbc.w	r1, r2, #0
    a49e:	1e42      	subs	r2, r0, #1
    a4a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a4a2:	f141 3eff 	adc.w	lr, r1, #4294967295
    a4a6:	1ad3      	subs	r3, r2, r3
    a4a8:	455b      	cmp	r3, fp
    a4aa:	db08      	blt.n	a4be <MPSL_IRQ_RADIO_Handler+0x802>
    a4ac:	f1b9 0f00 	cmp.w	r9, #0
    a4b0:	d032      	beq.n	a518 <MPSL_IRQ_RADIO_Handler+0x85c>
    a4b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a4b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a4b8:	444b      	add	r3, r9
    a4ba:	9310      	str	r3, [sp, #64]	; 0x40
    a4bc:	e02c      	b.n	a518 <MPSL_IRQ_RADIO_Handler+0x85c>
    a4be:	f1b9 0f00 	cmp.w	r9, #0
    a4c2:	d005      	beq.n	a4d0 <MPSL_IRQ_RADIO_Handler+0x814>
    a4c4:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    a4c8:	b920      	cbnz	r0, a4d4 <MPSL_IRQ_RADIO_Handler+0x818>
    a4ca:	f002 fc35 	bl	cd38 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a4ce:	b108      	cbz	r0, a4d4 <MPSL_IRQ_RADIO_Handler+0x818>
    a4d0:	b9af      	cbnz	r7, a4fe <MPSL_IRQ_RADIO_Handler+0x842>
    a4d2:	e00c      	b.n	a4ee <MPSL_IRQ_RADIO_Handler+0x832>
    a4d4:	b92f      	cbnz	r7, a4e2 <MPSL_IRQ_RADIO_Handler+0x826>
    a4d6:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    a4da:	2800      	cmp	r0, #0
    a4dc:	bf18      	it	ne
    a4de:	f1ab 0b02 	subne.w	fp, fp, #2
    a4e2:	f04f 0900 	mov.w	r9, #0
    a4e6:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    a4ea:	464e      	mov	r6, r9
    a4ec:	e007      	b.n	a4fe <MPSL_IRQ_RADIO_Handler+0x842>
    a4ee:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    a4f2:	b120      	cbz	r0, a4fe <MPSL_IRQ_RADIO_Handler+0x842>
    a4f4:	2000      	movs	r0, #0
    a4f6:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    a4fa:	f1ab 0b02 	sub.w	fp, fp, #2
    a4fe:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    a502:	ebb0 0009 	subs.w	r0, r0, r9
    a506:	f162 0100 	sbc.w	r1, r2, #0
    a50a:	1e42      	subs	r2, r0, #1
    a50c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a50e:	f141 3eff 	adc.w	lr, r1, #4294967295
    a512:	1ad3      	subs	r3, r2, r3
    a514:	455b      	cmp	r3, fp
    a516:	db7d      	blt.n	a614 <MPSL_IRQ_RADIO_Handler+0x958>
    a518:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a51a:	b99b      	cbnz	r3, a544 <MPSL_IRQ_RADIO_Handler+0x888>
    a51c:	4b67      	ldr	r3, [pc, #412]	; (a6bc <MPSL_IRQ_RADIO_Handler+0xa00>)
    a51e:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    a522:	ea6f 090c 	mvn.w	r9, ip
    a526:	ea79 0903 	orns	r9, r9, r3
    a52a:	d00b      	beq.n	a544 <MPSL_IRQ_RADIO_Handler+0x888>
    a52c:	ebb0 0c0c 	subs.w	ip, r0, ip
    a530:	9816      	ldr	r0, [sp, #88]	; 0x58
    a532:	eb61 0303 	sbc.w	r3, r1, r3
    a536:	ebbc 0000 	subs.w	r0, ip, r0
    a53a:	f173 0000 	sbcs.w	r0, r3, #0
    a53e:	bf38      	it	cc
    a540:	2000      	movcc	r0, #0
    a542:	d300      	bcc.n	a546 <MPSL_IRQ_RADIO_Handler+0x88a>
    a544:	2001      	movs	r0, #1
    a546:	ea3a 0000 	bics.w	r0, sl, r0
    a54a:	d163      	bne.n	a614 <MPSL_IRQ_RADIO_Handler+0x958>
    a54c:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    a550:	e9cd 0107 	strd	r0, r1, [sp, #28]
    a554:	981e      	ldr	r0, [sp, #120]	; 0x78
    a556:	4691      	mov	r9, r2
    a558:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    a55c:	46f3      	mov	fp, lr
    a55e:	2700      	movs	r7, #0
    a560:	f002 fdcc 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a564:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a568:	bf08      	it	eq
    a56a:	200d      	moveq	r0, #13
    a56c:	d00b      	beq.n	a586 <MPSL_IRQ_RADIO_Handler+0x8ca>
    a56e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a572:	3856      	subs	r0, #86	; 0x56
    a574:	bf08      	it	eq
    a576:	201c      	moveq	r0, #28
    a578:	d005      	beq.n	a586 <MPSL_IRQ_RADIO_Handler+0x8ca>
    a57a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a57e:	389f      	subs	r0, #159	; 0x9f
    a580:	bf14      	ite	ne
    a582:	4638      	movne	r0, r7
    a584:	2032      	moveq	r0, #50	; 0x32
    a586:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    a58a:	300b      	adds	r0, #11
    a58c:	ebb9 0202 	subs.w	r2, r9, r2
    a590:	eb6b 0303 	sbc.w	r3, fp, r3
    a594:	1a10      	subs	r0, r2, r0
    a596:	f173 0000 	sbcs.w	r0, r3, #0
    a59a:	d22a      	bcs.n	a5f2 <MPSL_IRQ_RADIO_Handler+0x936>
    a59c:	9819      	ldr	r0, [sp, #100]	; 0x64
    a59e:	2801      	cmp	r0, #1
    a5a0:	d002      	beq.n	a5a8 <MPSL_IRQ_RADIO_Handler+0x8ec>
    a5a2:	9818      	ldr	r0, [sp, #96]	; 0x60
    a5a4:	b148      	cbz	r0, a5ba <MPSL_IRQ_RADIO_Handler+0x8fe>
    a5a6:	e017      	b.n	a5d8 <MPSL_IRQ_RADIO_Handler+0x91c>
    a5a8:	43e0      	mvns	r0, r4
    a5aa:	ea70 0005 	orns	r0, r0, r5
    a5ae:	d127      	bne.n	a600 <MPSL_IRQ_RADIO_Handler+0x944>
    a5b0:	f640 01d7 	movw	r1, #2263	; 0x8d7
    a5b4:	2070      	movs	r0, #112	; 0x70
    a5b6:	f002 ff5f 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a5ba:	43e0      	mvns	r0, r4
    a5bc:	ea70 0005 	orns	r0, r0, r5
    a5c0:	d00a      	beq.n	a5d8 <MPSL_IRQ_RADIO_Handler+0x91c>
    a5c2:	d01d      	beq.n	a600 <MPSL_IRQ_RADIO_Handler+0x944>
    a5c4:	ebb4 0009 	subs.w	r0, r4, r9
    a5c8:	eb65 010b 	sbc.w	r1, r5, fp
    a5cc:	2300      	movs	r3, #0
    a5ce:	f1d0 0204 	rsbs	r2, r0, #4
    a5d2:	eb73 0201 	sbcs.w	r2, r3, r1
    a5d6:	da06      	bge.n	a5e6 <MPSL_IRQ_RADIO_Handler+0x92a>
    a5d8:	464c      	mov	r4, r9
    a5da:	465d      	mov	r5, fp
    a5dc:	4620      	mov	r0, r4
    a5de:	4629      	mov	r1, r5
    a5e0:	f001 ffe6 	bl	c5b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    a5e4:	e00c      	b.n	a600 <MPSL_IRQ_RADIO_Handler+0x944>
    a5e6:	2200      	movs	r2, #0
    a5e8:	1a10      	subs	r0, r2, r0
    a5ea:	eb72 0001 	sbcs.w	r0, r2, r1
    a5ee:	db11      	blt.n	a614 <MPSL_IRQ_RADIO_Handler+0x958>
    a5f0:	e006      	b.n	a600 <MPSL_IRQ_RADIO_Handler+0x944>
    a5f2:	464c      	mov	r4, r9
    a5f4:	465d      	mov	r5, fp
    a5f6:	4620      	mov	r0, r4
    a5f8:	4629      	mov	r1, r5
    a5fa:	f001 ffd9 	bl	c5b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    a5fe:	4657      	mov	r7, sl
    a600:	43e1      	mvns	r1, r4
    a602:	ea71 0005 	orns	r0, r1, r5
    a606:	d071      	beq.n	a6ec <MPSL_IRQ_RADIO_Handler+0xa30>
    a608:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    a60c:	f04f 0b00 	mov.w	fp, #0
    a610:	990e      	ldr	r1, [sp, #56]	; 0x38
    a612:	e000      	b.n	a616 <MPSL_IRQ_RADIO_Handler+0x95a>
    a614:	e06f      	b.n	a6f6 <MPSL_IRQ_RADIO_Handler+0xa3a>
    a616:	1a0b      	subs	r3, r1, r0
    a618:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    a61c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a620:	eb11 010c 	adds.w	r1, r1, ip
    a624:	1a08      	subs	r0, r1, r0
    a626:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a62a:	2b01      	cmp	r3, #1
    a62c:	d363      	bcc.n	a6f6 <MPSL_IRQ_RADIO_Handler+0xa3a>
    a62e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    a632:	bf98      	it	ls
    a634:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a638:	d85d      	bhi.n	a6f6 <MPSL_IRQ_RADIO_Handler+0xa3a>
    a63a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    a63e:	f007 fa92 	bl	11b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a642:	9917      	ldr	r1, [sp, #92]	; 0x5c
    a644:	4a1b      	ldr	r2, [pc, #108]	; (a6b4 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    a646:	1a0d      	subs	r5, r1, r0
    a648:	1aaa      	subs	r2, r5, r2
    a64a:	f17b 0200 	sbcs.w	r2, fp, #0
    a64e:	d316      	bcc.n	a67e <MPSL_IRQ_RADIO_Handler+0x9c2>
    a650:	4b18      	ldr	r3, [pc, #96]	; (a6b4 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    a652:	1a42      	subs	r2, r0, r1
    a654:	1ad3      	subs	r3, r2, r3
    a656:	f17b 0300 	sbcs.w	r3, fp, #0
    a65a:	d310      	bcc.n	a67e <MPSL_IRQ_RADIO_Handler+0x9c2>
    a65c:	4b14      	ldr	r3, [pc, #80]	; (a6b0 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    a65e:	42ab      	cmp	r3, r5
    a660:	bf3e      	ittt	cc
    a662:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    a666:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    a66a:	1845      	addcc	r5, r0, r1
    a66c:	d307      	bcc.n	a67e <MPSL_IRQ_RADIO_Handler+0x9c2>
    a66e:	4293      	cmp	r3, r2
    a670:	d245      	bcs.n	a6fe <MPSL_IRQ_RADIO_Handler+0xa42>
    a672:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    a676:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    a67a:	4408      	add	r0, r1
    a67c:	4245      	negs	r5, r0
    a67e:	f8df 903c 	ldr.w	r9, [pc, #60]	; a6bc <MPSL_IRQ_RADIO_Handler+0xa00>
    a682:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    a686:	b378      	cbz	r0, a6e8 <MPSL_IRQ_RADIO_Handler+0xa2c>
    a688:	981e      	ldr	r0, [sp, #120]	; 0x78
    a68a:	2801      	cmp	r0, #1
    a68c:	d005      	beq.n	a69a <MPSL_IRQ_RADIO_Handler+0x9de>
    a68e:	2002      	movs	r0, #2
    a690:	f002 fa1a 	bl	cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a694:	2001      	movs	r0, #1
    a696:	f002 fa17 	bl	cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a69a:	45b0      	cmp	r8, r6
    a69c:	d240      	bcs.n	a720 <MPSL_IRQ_RADIO_Handler+0xa64>
    a69e:	eba5 0106 	sub.w	r1, r5, r6
    a6a2:	e011      	b.n	a6c8 <MPSL_IRQ_RADIO_Handler+0xa0c>
    a6a4:	40000508 	.word	0x40000508
    a6a8:	2000030c 	.word	0x2000030c
    a6ac:	20001028 	.word	0x20001028
    a6b0:	1e847fff 	.word	0x1e847fff
    a6b4:	0f424000 	.word	0x0f424000
    a6b8:	20001428 	.word	0x20001428
    a6bc:	200014a8 	.word	0x200014a8
    a6c0:	f0bdc000 	.word	0xf0bdc000
    a6c4:	1e848000 	.word	0x1e848000
    a6c8:	f04f 0002 	mov.w	r0, #2
    a6cc:	f002 f942 	bl	c954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a6d0:	b398      	cbz	r0, a73a <MPSL_IRQ_RADIO_Handler+0xa7e>
    a6d2:	f1b8 0f00 	cmp.w	r8, #0
    a6d6:	bf1c      	itt	ne
    a6d8:	eba5 0108 	subne.w	r1, r5, r8
    a6dc:	2001      	movne	r0, #1
    a6de:	d035      	beq.n	a74c <MPSL_IRQ_RADIO_Handler+0xa90>
    a6e0:	f002 f938 	bl	c954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a6e4:	b348      	cbz	r0, a73a <MPSL_IRQ_RADIO_Handler+0xa7e>
    a6e6:	e031      	b.n	a74c <MPSL_IRQ_RADIO_Handler+0xa90>
    a6e8:	e00e      	b.n	a708 <MPSL_IRQ_RADIO_Handler+0xa4c>
    a6ea:	e7ff      	b.n	a6ec <MPSL_IRQ_RADIO_Handler+0xa30>
    a6ec:	f640 2103 	movw	r1, #2563	; 0xa03
    a6f0:	2070      	movs	r0, #112	; 0x70
    a6f2:	f002 fec1 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a6f6:	b020      	add	sp, #128	; 0x80
    a6f8:	2000      	movs	r0, #0
    a6fa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a6fe:	f640 21d7 	movw	r1, #2775	; 0xad7
    a702:	2070      	movs	r0, #112	; 0x70
    a704:	f002 feb8 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a708:	45b0      	cmp	r8, r6
    a70a:	bf34      	ite	cc
    a70c:	4630      	movcc	r0, r6
    a70e:	4640      	movcs	r0, r8
    a710:	301e      	adds	r0, #30
    a712:	42a8      	cmp	r0, r5
    a714:	dbb8      	blt.n	a688 <MPSL_IRQ_RADIO_Handler+0x9cc>
    a716:	f640 2117 	movw	r1, #2583	; 0xa17
    a71a:	2070      	movs	r0, #112	; 0x70
    a71c:	f002 feac 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a720:	d90c      	bls.n	a73c <MPSL_IRQ_RADIO_Handler+0xa80>
    a722:	eba5 0108 	sub.w	r1, r5, r8
    a726:	2001      	movs	r0, #1
    a728:	f002 f914 	bl	c954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a72c:	b128      	cbz	r0, a73a <MPSL_IRQ_RADIO_Handler+0xa7e>
    a72e:	2e00      	cmp	r6, #0
    a730:	bf1c      	itt	ne
    a732:	1ba9      	subne	r1, r5, r6
    a734:	2002      	movne	r0, #2
    a736:	d009      	beq.n	a74c <MPSL_IRQ_RADIO_Handler+0xa90>
    a738:	e7d2      	b.n	a6e0 <MPSL_IRQ_RADIO_Handler+0xa24>
    a73a:	e034      	b.n	a7a6 <MPSL_IRQ_RADIO_Handler+0xaea>
    a73c:	ea56 0008 	orrs.w	r0, r6, r8
    a740:	d004      	beq.n	a74c <MPSL_IRQ_RADIO_Handler+0xa90>
    a742:	f640 113a 	movw	r1, #2362	; 0x93a
    a746:	2070      	movs	r0, #112	; 0x70
    a748:	f002 fe96 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a74c:	4629      	mov	r1, r5
    a74e:	2000      	movs	r0, #0
    a750:	f002 f900 	bl	c954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a754:	b338      	cbz	r0, a7a6 <MPSL_IRQ_RADIO_Handler+0xaea>
    a756:	2601      	movs	r6, #1
    a758:	f1ba 0f00 	cmp.w	sl, #0
    a75c:	bf04      	itt	eq
    a75e:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    a762:	2800      	cmpeq	r0, #0
    a764:	d000      	beq.n	a768 <MPSL_IRQ_RADIO_Handler+0xaac>
    a766:	b347      	cbz	r7, a7ba <MPSL_IRQ_RADIO_Handler+0xafe>
    a768:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    a76c:	ea6f 0101 	mvn.w	r1, r1
    a770:	ea71 0000 	orns	r0, r1, r0
    a774:	d006      	beq.n	a784 <MPSL_IRQ_RADIO_Handler+0xac8>
    a776:	f002 fcc7 	bl	d108 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    a77a:	f04f 30ff 	mov.w	r0, #4294967295
    a77e:	4601      	mov	r1, r0
    a780:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    a784:	b1ff      	cbz	r7, a7c6 <MPSL_IRQ_RADIO_Handler+0xb0a>
    a786:	9816      	ldr	r0, [sp, #88]	; 0x58
    a788:	1a20      	subs	r0, r4, r0
    a78a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    a78e:	f04f 0005 	mov.w	r0, #5
    a792:	f002 f8df 	bl	c954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a796:	b370      	cbz	r0, a7f6 <MPSL_IRQ_RADIO_Handler+0xb3a>
    a798:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    a79c:	2800      	cmp	r0, #0
    a79e:	bf08      	it	eq
    a7a0:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    a7a4:	e017      	b.n	a7d6 <MPSL_IRQ_RADIO_Handler+0xb1a>
    a7a6:	2002      	movs	r0, #2
    a7a8:	f002 f98e 	bl	cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a7ac:	2001      	movs	r0, #1
    a7ae:	f002 f98b 	bl	cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a7b2:	b020      	add	sp, #128	; 0x80
    a7b4:	2000      	movs	r0, #0
    a7b6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a7ba:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    a7be:	43c0      	mvns	r0, r0
    a7c0:	ea70 0001 	orns	r0, r0, r1
    a7c4:	d012      	beq.n	a7ec <MPSL_IRQ_RADIO_Handler+0xb30>
    a7c6:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    a7ca:	b120      	cbz	r0, a7d6 <MPSL_IRQ_RADIO_Handler+0xb1a>
    a7cc:	2005      	movs	r0, #5
    a7ce:	f002 f97b 	bl	cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a7d2:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    a7d6:	eba5 0008 	sub.w	r0, r5, r8
    a7da:	f1a0 0119 	sub.w	r1, r0, #25
    a7de:	2900      	cmp	r1, #0
    a7e0:	dc0f      	bgt.n	a802 <MPSL_IRQ_RADIO_Handler+0xb46>
    a7e2:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    a7e6:	2070      	movs	r0, #112	; 0x70
    a7e8:	f002 fe46 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a7ec:	f002 fca8 	bl	d140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a7f0:	f002 f88e 	bl	c910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a7f4:	e7c4      	b.n	a780 <MPSL_IRQ_RADIO_Handler+0xac4>
    a7f6:	e7ff      	b.n	a7f8 <MPSL_IRQ_RADIO_Handler+0xb3c>
    a7f8:	f240 21e6 	movw	r1, #742	; 0x2e6
    a7fc:	2070      	movs	r0, #112	; 0x70
    a7fe:	f002 fe3b 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a802:	2003      	movs	r0, #3
    a804:	f002 f8a6 	bl	c954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a808:	b338      	cbz	r0, a85a <MPSL_IRQ_RADIO_Handler+0xb9e>
    a80a:	4816      	ldr	r0, [pc, #88]	; (a864 <MPSL_IRQ_RADIO_Handler+0xba8>)
    a80c:	6880      	ldr	r0, [r0, #8]
    a80e:	f8c0 b000 	str.w	fp, [r0]
    a812:	4815      	ldr	r0, [pc, #84]	; (a868 <MPSL_IRQ_RADIO_Handler+0xbac>)
    a814:	f8c0 b000 	str.w	fp, [r0]
    a818:	ac0c      	add	r4, sp, #48	; 0x30
    a81a:	4814      	ldr	r0, [pc, #80]	; (a86c <MPSL_IRQ_RADIO_Handler+0xbb0>)
    a81c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    a820:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    a824:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    a828:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    a82c:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    a830:	ac10      	add	r4, sp, #64	; 0x40
    a832:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    a836:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    a83a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    a83e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    a842:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    a846:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    a84a:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    a84e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    a852:	b020      	add	sp, #128	; 0x80
    a854:	2001      	movs	r0, #1
    a856:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a85a:	f640 2148 	movw	r1, #2632	; 0xa48
    a85e:	2070      	movs	r0, #112	; 0x70
    a860:	f002 fe0a 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a864:	2000030c 	.word	0x2000030c
    a868:	40000508 	.word	0x40000508
    a86c:	20001428 	.word	0x20001428
    a870:	b570      	push	{r4, r5, r6, lr}
    a872:	4d1d      	ldr	r5, [pc, #116]	; (a8e8 <MPSL_IRQ_RADIO_Handler+0xc2c>)
    a874:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    a878:	2820      	cmp	r0, #32
    a87a:	bf18      	it	ne
    a87c:	bd70      	popne	{r4, r5, r6, pc}
    a87e:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    a882:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    a886:	4428      	add	r0, r5
    a888:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    a88c:	2c20      	cmp	r4, #32
    a88e:	d026      	beq.n	a8de <MPSL_IRQ_RADIO_Handler+0xc22>
    a890:	4b16      	ldr	r3, [pc, #88]	; (a8ec <MPSL_IRQ_RADIO_Handler+0xc30>)
    a892:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    a896:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    a89a:	7849      	ldrb	r1, [r1, #1]
    a89c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    a8a0:	20ff      	movs	r0, #255	; 0xff
    a8a2:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    a8a6:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    a8aa:	4621      	mov	r1, r4
    a8ac:	2002      	movs	r0, #2
    a8ae:	f000 f88b 	bl	a9c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a8b2:	2000      	movs	r0, #0
    a8b4:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    a8b8:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    a8bc:	480c      	ldr	r0, [pc, #48]	; (a8f0 <MPSL_IRQ_RADIO_Handler+0xc34>)
    a8be:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    a8c2:	7e00      	ldrb	r0, [r0, #24]
    a8c4:	2800      	cmp	r0, #0
    a8c6:	bf08      	it	eq
    a8c8:	f002 ff3e 	bleq	d748 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    a8cc:	2000      	movs	r0, #0
    a8ce:	4909      	ldr	r1, [pc, #36]	; (a8f4 <MPSL_IRQ_RADIO_Handler+0xc38>)
    a8d0:	6849      	ldr	r1, [r1, #4]
    a8d2:	2900      	cmp	r1, #0
    a8d4:	bf08      	it	eq
    a8d6:	bd70      	popeq	{r4, r5, r6, pc}
    a8d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a8dc:	4708      	bx	r1
    a8de:	f240 311d 	movw	r1, #797	; 0x31d
    a8e2:	2070      	movs	r0, #112	; 0x70
    a8e4:	f002 fdc8 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a8e8:	200014a8 	.word	0x200014a8
    a8ec:	20001428 	.word	0x20001428
    a8f0:	20001028 	.word	0x20001028
    a8f4:	2000030c 	.word	0x2000030c
    a8f8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    a8fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; a9b8 <MPSL_IRQ_RADIO_Handler+0xcfc>
    a900:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    a904:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    a908:	4440      	add	r0, r8
    a90a:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    a90e:	2c20      	cmp	r4, #32
    a910:	bf08      	it	eq
    a912:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a916:	f8df b0a4 	ldr.w	fp, [pc, #164]	; a9bc <MPSL_IRQ_RADIO_Handler+0xd00>
    a91a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; a9c0 <MPSL_IRQ_RADIO_Handler+0xd04>
    a91e:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    a922:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    a926:	2607      	movs	r6, #7
    a928:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    a92c:	2801      	cmp	r0, #1
    a92e:	d00e      	beq.n	a94e <MPSL_IRQ_RADIO_Handler+0xc92>
    a930:	2804      	cmp	r0, #4
    a932:	bf08      	it	eq
    a934:	2602      	moveq	r6, #2
    a936:	d00a      	beq.n	a94e <MPSL_IRQ_RADIO_Handler+0xc92>
    a938:	2805      	cmp	r0, #5
    a93a:	bf0c      	ite	eq
    a93c:	2603      	moveq	r6, #3
    a93e:	2806      	cmpne	r0, #6
    a940:	d005      	beq.n	a94e <MPSL_IRQ_RADIO_Handler+0xc92>
    a942:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    a946:	f04f 0070 	mov.w	r0, #112	; 0x70
    a94a:	f002 fd95 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a94e:	f1bb 0f00 	cmp.w	fp, #0
    a952:	bf18      	it	ne
    a954:	f3af 8000 	nopne.w
    a958:	f3ef 8010 	mrs	r0, PRIMASK
    a95c:	b672      	cpsid	i
    a95e:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    a962:	784a      	ldrb	r2, [r1, #1]
    a964:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    a968:	4441      	add	r1, r8
    a96a:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    a96e:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    a972:	42a2      	cmp	r2, r4
    a974:	bf04      	itt	eq
    a976:	2220      	moveq	r2, #32
    a978:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    a97c:	b1a8      	cbz	r0, a9aa <MPSL_IRQ_RADIO_Handler+0xcee>
    a97e:	462a      	mov	r2, r5
    a980:	4621      	mov	r1, r4
    a982:	2001      	movs	r0, #1
    a984:	f000 f820 	bl	a9c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a988:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    a98c:	e9d1 2000 	ldrd	r2, r0, [r1]
    a990:	4631      	mov	r1, r6
    a992:	4790      	blx	r2
    a994:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    a998:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    a99c:	4440      	add	r0, r8
    a99e:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    a9a2:	2c20      	cmp	r4, #32
    a9a4:	d1bd      	bne.n	a922 <MPSL_IRQ_RADIO_Handler+0xc66>
    a9a6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a9aa:	4806      	ldr	r0, [pc, #24]	; (a9c4 <MPSL_IRQ_RADIO_Handler+0xd08>)
    a9ac:	2800      	cmp	r0, #0
    a9ae:	bf18      	it	ne
    a9b0:	f3af 8000 	nopne.w
    a9b4:	b662      	cpsie	i
    a9b6:	e7e2      	b.n	a97e <MPSL_IRQ_RADIO_Handler+0xcc2>
    a9b8:	200014a8 	.word	0x200014a8
    a9bc:	00000000 	.word	0x00000000
    a9c0:	20001428 	.word	0x20001428
    a9c4:	00000000 	.word	0x00000000
    a9c8:	f8df c058 	ldr.w	ip, [pc, #88]	; aa24 <MPSL_IRQ_RADIO_Handler+0xd68>
    a9cc:	b510      	push	{r4, lr}
    a9ce:	2300      	movs	r3, #0
    a9d0:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    a9d4:	2807      	cmp	r0, #7
    a9d6:	d21f      	bcs.n	aa18 <MPSL_IRQ_RADIO_Handler+0xd5c>
    a9d8:	e8df f000 	tbb	[pc, r0]
    a9dc:	05050505 	.word	0x05050505
    a9e0:	00040404 	.word	0x00040404
    a9e4:	2301      	movs	r3, #1
    a9e6:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    a9ea:	2b00      	cmp	r3, #0
    a9ec:	bf08      	it	eq
    a9ee:	bd10      	popeq	{r4, pc}
    a9f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a9f4:	480c      	ldr	r0, [pc, #48]	; (aa28 <MPSL_IRQ_RADIO_Handler+0xd6c>)
    a9f6:	4402      	add	r2, r0
    a9f8:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    a9fc:	2820      	cmp	r0, #32
    a9fe:	bf0e      	itee	eq
    aa00:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    aa04:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    aa08:	7041      	strbne	r1, [r0, #1]
    aa0a:	2020      	movs	r0, #32
    aa0c:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    aa10:	7058      	strb	r0, [r3, #1]
    aa12:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    aa16:	bd10      	pop	{r4, pc}
    aa18:	f44f 7117 	mov.w	r1, #604	; 0x25c
    aa1c:	2070      	movs	r0, #112	; 0x70
    aa1e:	f002 fd2b 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aa22:	0000      	.short	0x0000
    aa24:	20001428 	.word	0x20001428
    aa28:	200014a8 	.word	0x200014a8
    aa2c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    aa30:	460f      	mov	r7, r1
    aa32:	4680      	mov	r8, r0
    aa34:	f8df b154 	ldr.w	fp, [pc, #340]	; ab8c <MPSL_IRQ_RADIO_Handler+0xed0>
    aa38:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    aa3c:	4458      	add	r0, fp
    aa3e:	f1b8 0f01 	cmp.w	r8, #1
    aa42:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    aa46:	4625      	mov	r5, r4
    aa48:	bf18      	it	ne
    aa4a:	f1b8 0f02 	cmpne.w	r8, #2
    aa4e:	d005      	beq.n	aa5c <MPSL_IRQ_RADIO_Handler+0xda0>
    aa50:	f640 217e 	movw	r1, #2686	; 0xa7e
    aa54:	f04f 0070 	mov.w	r0, #112	; 0x70
    aa58:	f002 fd0e 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aa5c:	2d20      	cmp	r5, #32
    aa5e:	d041      	beq.n	aae4 <MPSL_IRQ_RADIO_Handler+0xe28>
    aa60:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    aa64:	2600      	movs	r6, #0
    aa66:	2800      	cmp	r0, #0
    aa68:	bf08      	it	eq
    aa6a:	2602      	moveq	r6, #2
    aa6c:	f001 fd9a 	bl	c5a4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    aa70:	f8df 911c 	ldr.w	r9, [pc, #284]	; ab90 <MPSL_IRQ_RADIO_Handler+0xed4>
    aa74:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    aa78:	6899      	ldr	r1, [r3, #8]
    aa7a:	691b      	ldr	r3, [r3, #16]
    aa7c:	1a0a      	subs	r2, r1, r0
    aa7e:	18c9      	adds	r1, r1, r3
    aa80:	1a09      	subs	r1, r1, r0
    aa82:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    aa86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    aa8a:	4296      	cmp	r6, r2
    aa8c:	bf99      	ittee	ls
    aa8e:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    aa92:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    aa96:	4a3f      	ldrhi	r2, [pc, #252]	; (ab94 <MPSL_IRQ_RADIO_Handler+0xed8>)
    aa98:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    aa9c:	d920      	bls.n	aae0 <MPSL_IRQ_RADIO_Handler+0xe24>
    aa9e:	4622      	mov	r2, r4
    aaa0:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    aaa4:	784c      	ldrb	r4, [r1, #1]
    aaa6:	2c20      	cmp	r4, #32
    aaa8:	d012      	beq.n	aad0 <MPSL_IRQ_RADIO_Handler+0xe14>
    aaaa:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    aaae:	6899      	ldr	r1, [r3, #8]
    aab0:	691b      	ldr	r3, [r3, #16]
    aab2:	ebb1 0c00 	subs.w	ip, r1, r0
    aab6:	18c9      	adds	r1, r1, r3
    aab8:	1a09      	subs	r1, r1, r0
    aaba:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    aabe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    aac2:	4566      	cmp	r6, ip
    aac4:	bf9c      	itt	ls
    aac6:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    aaca:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    aace:	d8e6      	bhi.n	aa9e <MPSL_IRQ_RADIO_Handler+0xde2>
    aad0:	2a20      	cmp	r2, #32
    aad2:	d005      	beq.n	aae0 <MPSL_IRQ_RADIO_Handler+0xe24>
    aad4:	463b      	mov	r3, r7
    aad6:	2120      	movs	r1, #32
    aad8:	2004      	movs	r0, #4
    aada:	f7ff f90d 	bl	9cf8 <MPSL_IRQ_RADIO_Handler+0x3c>
    aade:	4604      	mov	r4, r0
    aae0:	42ac      	cmp	r4, r5
    aae2:	d113      	bne.n	ab0c <MPSL_IRQ_RADIO_Handler+0xe50>
    aae4:	482c      	ldr	r0, [pc, #176]	; (ab98 <MPSL_IRQ_RADIO_Handler+0xedc>)
    aae6:	2800      	cmp	r0, #0
    aae8:	bf18      	it	ne
    aaea:	f3af 8000 	nopne.w
    aaee:	f001 ff0f 	bl	c910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    aaf2:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    aaf6:	2a20      	cmp	r2, #32
    aaf8:	d00b      	beq.n	ab12 <MPSL_IRQ_RADIO_Handler+0xe56>
    aafa:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    aafe:	1c84      	adds	r4, r0, #2
    ab00:	f141 0c00 	adc.w	ip, r1, #0
    ab04:	1b1b      	subs	r3, r3, r4
    ab06:	eb72 020c 	sbcs.w	r2, r2, ip
    ab0a:	d202      	bcs.n	ab12 <MPSL_IRQ_RADIO_Handler+0xe56>
    ab0c:	2000      	movs	r0, #0
    ab0e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    ab12:	2d20      	cmp	r5, #32
    ab14:	d013      	beq.n	ab3e <MPSL_IRQ_RADIO_Handler+0xe82>
    ab16:	462b      	mov	r3, r5
    ab18:	4642      	mov	r2, r8
    ab1a:	f7ff fbaf 	bl	a27c <MPSL_IRQ_RADIO_Handler+0x5c0>
    ab1e:	2800      	cmp	r0, #0
    ab20:	bf1e      	ittt	ne
    ab22:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    ab26:	2002      	movne	r0, #2
    ab28:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    ab2c:	463b      	mov	r3, r7
    ab2e:	462a      	mov	r2, r5
    ab30:	2120      	movs	r1, #32
    ab32:	2004      	movs	r0, #4
    ab34:	f7ff f8e0 	bl	9cf8 <MPSL_IRQ_RADIO_Handler+0x3c>
    ab38:	2000      	movs	r0, #0
    ab3a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    ab3e:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    ab42:	43c0      	mvns	r0, r0
    ab44:	ea70 0001 	orns	r0, r0, r1
    ab48:	d005      	beq.n	ab56 <MPSL_IRQ_RADIO_Handler+0xe9a>
    ab4a:	f002 fadd 	bl	d108 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    ab4e:	f04f 30ff 	mov.w	r0, #4294967295
    ab52:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    ab56:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    ab5a:	b128      	cbz	r0, ab68 <MPSL_IRQ_RADIO_Handler+0xeac>
    ab5c:	2005      	movs	r0, #5
    ab5e:	f001 ffb3 	bl	cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    ab62:	2000      	movs	r0, #0
    ab64:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    ab68:	2004      	movs	r0, #4
    ab6a:	f001 ffad 	bl	cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    ab6e:	f002 f813 	bl	cb98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    ab72:	490a      	ldr	r1, [pc, #40]	; (ab9c <MPSL_IRQ_RADIO_Handler+0xee0>)
    ab74:	2020      	movs	r0, #32
    ab76:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    ab7a:	6889      	ldr	r1, [r1, #8]
    ab7c:	2000      	movs	r0, #0
    ab7e:	6008      	str	r0, [r1, #0]
    ab80:	4907      	ldr	r1, [pc, #28]	; (aba0 <MPSL_IRQ_RADIO_Handler+0xee4>)
    ab82:	6008      	str	r0, [r1, #0]
    ab84:	2001      	movs	r0, #1
    ab86:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    ab8a:	0000      	.short	0x0000
    ab8c:	200014a8 	.word	0x200014a8
    ab90:	20001028 	.word	0x20001028
    ab94:	20001428 	.word	0x20001428
    ab98:	00000000 	.word	0x00000000
    ab9c:	2000030c 	.word	0x2000030c
    aba0:	40000508 	.word	0x40000508

0000aba4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    aba4:	4906      	ldr	r1, [pc, #24]	; (abc0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    aba6:	b510      	push	{r4, lr}
    aba8:	f891 2042 	ldrb.w	r2, [r1, #66]	; 0x42
    abac:	2a20      	cmp	r2, #32
    abae:	bf1c      	itt	ne
    abb0:	f881 0022 	strbne.w	r0, [r1, #34]	; 0x22
    abb4:	bd10      	popne	{r4, pc}
    abb6:	f240 3177 	movw	r1, #887	; 0x377
    abba:	2070      	movs	r0, #112	; 0x70
    abbc:	f002 fc5c 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    abc0:	200014a8 	.word	0x200014a8

0000abc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    abc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    abc8:	f8df b1c4 	ldr.w	fp, [pc, #452]	; ad90 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    abcc:	4606      	mov	r6, r0
    abce:	b08f      	sub	sp, #60	; 0x3c
    abd0:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    abd4:	468a      	mov	sl, r1
    abd6:	2820      	cmp	r0, #32
    abd8:	d061      	beq.n	ac9e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    abda:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    abde:	f10b 0408 	add.w	r4, fp, #8
    abe2:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    abe6:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    abea:	2120      	movs	r1, #32
    abec:	f88d 1018 	strb.w	r1, [sp, #24]
    abf0:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    abf4:	f8db 2008 	ldr.w	r2, [fp, #8]
    abf8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    abfc:	4459      	add	r1, fp
    abfe:	2700      	movs	r7, #0
    ac00:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    ac04:	f8db 1010 	ldr.w	r1, [fp, #16]
    ac08:	1851      	adds	r1, r2, r1
    ac0a:	910a      	str	r1, [sp, #40]	; 0x28
    ac0c:	f8db 0000 	ldr.w	r0, [fp]
    ac10:	aa09      	add	r2, sp, #36	; 0x24
    ac12:	4430      	add	r0, r6
    ac14:	a907      	add	r1, sp, #28
    ac16:	f001 fb9b 	bl	c350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ac1a:	f8d9 0010 	ldr.w	r0, [r9, #16]
    ac1e:	9907      	ldr	r1, [sp, #28]
    ac20:	f8d9 2008 	ldr.w	r2, [r9, #8]
    ac24:	1840      	adds	r0, r0, r1
    ac26:	1810      	adds	r0, r2, r0
    ac28:	2e67      	cmp	r6, #103	; 0x67
    ac2a:	d33d      	bcc.n	aca8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    ac2c:	4959      	ldr	r1, [pc, #356]	; (ad94 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    ac2e:	2200      	movs	r2, #0
    ac30:	1b89      	subs	r1, r1, r6
    ac32:	eb72 0107 	sbcs.w	r1, r2, r7
    ac36:	d337      	bcc.n	aca8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    ac38:	6821      	ldr	r1, [r4, #0]
    ac3a:	4694      	mov	ip, r2
    ac3c:	1a40      	subs	r0, r0, r1
    ac3e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    ac42:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    ac46:	eb7c 010c 	sbcs.w	r1, ip, ip
    ac4a:	d32d      	bcc.n	aca8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    ac4c:	60a0      	str	r0, [r4, #8]
    ac4e:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    ac52:	f884 a010 	strb.w	sl, [r4, #16]
    ac56:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    ac5a:	f10d 0b18 	add.w	fp, sp, #24
    ac5e:	2d20      	cmp	r5, #32
    ac60:	d055      	beq.n	ad0e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    ac62:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    ac66:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    ac6a:	9001      	str	r0, [sp, #4]
    ac6c:	484a      	ldr	r0, [pc, #296]	; (ad98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    ac6e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    ac72:	f8d4 a000 	ldr.w	sl, [r4]
    ac76:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    ac7a:	f108 0008 	add.w	r0, r8, #8
    ac7e:	eb1a 0201 	adds.w	r2, sl, r1
    ac82:	eb43 0107 	adc.w	r1, r3, r7
    ac86:	e9d0 9300 	ldrd	r9, r3, [r0]
    ac8a:	ebb9 0202 	subs.w	r2, r9, r2
    ac8e:	eb73 0101 	sbcs.w	r1, r3, r1
    ac92:	d325      	bcc.n	ace0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    ac94:	89c0      	ldrh	r0, [r0, #14]
    ac96:	b398      	cbz	r0, ad00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    ac98:	89e0      	ldrh	r0, [r4, #14]
    ac9a:	b148      	cbz	r0, acb0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    ac9c:	e037      	b.n	ad0e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    ac9e:	f640 3135 	movw	r1, #2869	; 0xb35
    aca2:	2070      	movs	r0, #112	; 0x70
    aca4:	f002 fbe8 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aca8:	b00f      	add	sp, #60	; 0x3c
    acaa:	2001      	movs	r0, #1
    acac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acb0:	f002 fa24 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    acb4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    acb8:	bf08      	it	eq
    acba:	200d      	moveq	r0, #13
    acbc:	d00b      	beq.n	acd6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    acbe:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    acc2:	3856      	subs	r0, #86	; 0x56
    acc4:	bf08      	it	eq
    acc6:	201c      	moveq	r0, #28
    acc8:	d005      	beq.n	acd6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    acca:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    acce:	389f      	subs	r0, #159	; 0x9f
    acd0:	bf14      	ite	ne
    acd2:	4638      	movne	r0, r7
    acd4:	2032      	moveq	r0, #50	; 0x32
    acd6:	1c41      	adds	r1, r0, #1
    acd8:	ebb9 000a 	subs.w	r0, r9, sl
    acdc:	4288      	cmp	r0, r1
    acde:	da16      	bge.n	ad0e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    ace0:	f88b 5000 	strb.w	r5, [fp]
    ace4:	f898 0018 	ldrb.w	r0, [r8, #24]
    ace8:	7c21      	ldrb	r1, [r4, #16]
    acea:	4281      	cmp	r1, r0
    acec:	d309      	bcc.n	ad02 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    acee:	6821      	ldr	r1, [r4, #0]
    acf0:	980a      	ldr	r0, [sp, #40]	; 0x28
    acf2:	1a40      	subs	r0, r0, r1
    acf4:	60a0      	str	r0, [r4, #8]
    acf6:	b00f      	add	sp, #60	; 0x3c
    acf8:	f04f 0002 	mov.w	r0, #2
    acfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad00:	e005      	b.n	ad0e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    ad02:	9801      	ldr	r0, [sp, #4]
    ad04:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    ad08:	7845      	ldrb	r5, [r0, #1]
    ad0a:	2d20      	cmp	r5, #32
    ad0c:	d1ae      	bne.n	ac6c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    ad0e:	2005      	movs	r0, #5
    ad10:	f001 feda 	bl	cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    ad14:	4d1e      	ldr	r5, [pc, #120]	; (ad90 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    ad16:	f04f 30ff 	mov.w	r0, #4294967295
    ad1a:	6068      	str	r0, [r5, #4]
    ad1c:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    ad20:	f89d 2018 	ldrb.w	r2, [sp, #24]
    ad24:	2120      	movs	r1, #32
    ad26:	2a20      	cmp	r2, #32
    ad28:	d003      	beq.n	ad32 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    ad2a:	2005      	movs	r0, #5
    ad2c:	f7fe ffe4 	bl	9cf8 <MPSL_IRQ_RADIO_Handler+0x3c>
    ad30:	e004      	b.n	ad3c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    ad32:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    ad36:	4428      	add	r0, r5
    ad38:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    ad3c:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    ad40:	4916      	ldr	r1, [pc, #88]	; (ad9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    ad42:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    ad46:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    ad4a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    ad4e:	7048      	strb	r0, [r1, #1]
    ad50:	6828      	ldr	r0, [r5, #0]
    ad52:	4430      	add	r0, r6
    ad54:	6028      	str	r0, [r5, #0]
    ad56:	20ff      	movs	r0, #255	; 0xff
    ad58:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    ad5c:	7e68      	ldrb	r0, [r5, #25]
    ad5e:	2801      	cmp	r0, #1
    ad60:	d10a      	bne.n	ad78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    ad62:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    ad66:	6823      	ldr	r3, [r4, #0]
    ad68:	1818      	adds	r0, r3, r0
    ad6a:	f142 0100 	adc.w	r1, r2, #0
    ad6e:	1e40      	subs	r0, r0, #1
    ad70:	f141 31ff 	adc.w	r1, r1, #4294967295
    ad74:	f001 fcca 	bl	c70c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    ad78:	f89d 0018 	ldrb.w	r0, [sp, #24]
    ad7c:	2820      	cmp	r0, #32
    ad7e:	d003      	beq.n	ad88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    ad80:	4807      	ldr	r0, [pc, #28]	; (ada0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    ad82:	7840      	ldrb	r0, [r0, #1]
    ad84:	f002 fc4a 	bl	d61c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    ad88:	b00f      	add	sp, #60	; 0x3c
    ad8a:	2000      	movs	r0, #0
    ad8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad90:	200014a8 	.word	0x200014a8
    ad94:	0f424000 	.word	0x0f424000
    ad98:	20001028 	.word	0x20001028
    ad9c:	20001428 	.word	0x20001428
    ada0:	2000030c 	.word	0x2000030c

0000ada4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    ada4:	b570      	push	{r4, r5, r6, lr}
    ada6:	4a23      	ldr	r2, [pc, #140]	; (ae34 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    ada8:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    adac:	2920      	cmp	r1, #32
    adae:	d039      	beq.n	ae24 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    adb0:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    adb4:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    adb8:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    adbc:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    adc0:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    adc4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    adc8:	4411      	add	r1, r2
    adca:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    adce:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    add2:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    add6:	2920      	cmp	r1, #32
    add8:	d029      	beq.n	ae2e <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    adda:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    adde:	7e2d      	ldrb	r5, [r5, #24]
    ade0:	42a8      	cmp	r0, r5
    ade2:	bf3c      	itt	cc
    ade4:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    ade8:	7849      	ldrbcc	r1, [r1, #1]
    adea:	d3f4      	bcc.n	add6 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    adec:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    adf0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    adf4:	f8dc 5008 	ldr.w	r5, [ip, #8]
    adf8:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    adfc:	6814      	ldr	r4, [r2, #0]
    adfe:	1828      	adds	r0, r5, r0
    ae00:	f146 0200 	adc.w	r2, r6, #0
    ae04:	ebb1 0c00 	subs.w	ip, r1, r0
    ae08:	eb73 0202 	sbcs.w	r2, r3, r2
    ae0c:	d308      	bcc.n	ae20 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    ae0e:	1a08      	subs	r0, r1, r0
    ae10:	f006 fea9 	bl	11b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ae14:	f104 0167 	add.w	r1, r4, #103	; 0x67
    ae18:	4281      	cmp	r1, r0
    ae1a:	bf9c      	itt	ls
    ae1c:	1b00      	subls	r0, r0, r4
    ae1e:	bd70      	popls	{r4, r5, r6, pc}
    ae20:	2000      	movs	r0, #0
    ae22:	bd70      	pop	{r4, r5, r6, pc}
    ae24:	f640 3108 	movw	r1, #2824	; 0xb08
    ae28:	2070      	movs	r0, #112	; 0x70
    ae2a:	f002 fb25 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae2e:	f04f 30ff 	mov.w	r0, #4294967295
    ae32:	bd70      	pop	{r4, r5, r6, pc}
    ae34:	200014a8 	.word	0x200014a8

0000ae38 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    ae38:	4806      	ldr	r0, [pc, #24]	; (ae54 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    ae3a:	b510      	push	{r4, lr}
    ae3c:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    ae40:	2920      	cmp	r1, #32
    ae42:	bf1c      	itt	ne
    ae44:	7e00      	ldrbne	r0, [r0, #24]
    ae46:	bd10      	popne	{r4, pc}
    ae48:	f640 312f 	movw	r1, #2863	; 0xb2f
    ae4c:	2070      	movs	r0, #112	; 0x70
    ae4e:	f002 fb13 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae52:	0000      	.short	0x0000
    ae54:	200014a8 	.word	0x200014a8

0000ae58 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    ae58:	490a      	ldr	r1, [pc, #40]	; (ae84 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    ae5a:	b510      	push	{r4, lr}
    ae5c:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    ae60:	f100 0408 	add.w	r4, r0, #8
    ae64:	e9d4 0100 	ldrd	r0, r1, [r4]
    ae68:	f001 f9f4 	bl	c254 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    ae6c:	89e3      	ldrh	r3, [r4, #14]
    ae6e:	2200      	movs	r2, #0
    ae70:	18c3      	adds	r3, r0, r3
    ae72:	7b20      	ldrb	r0, [r4, #12]
    ae74:	4151      	adcs	r1, r2
    ae76:	1818      	adds	r0, r3, r0
    ae78:	4151      	adcs	r1, r2
    ae7a:	1c40      	adds	r0, r0, #1
    ae7c:	f141 0100 	adc.w	r1, r1, #0
    ae80:	bd10      	pop	{r4, pc}
    ae82:	0000      	.short	0x0000
    ae84:	20001028 	.word	0x20001028

0000ae88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    ae88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae8a:	4d6f      	ldr	r5, [pc, #444]	; (b048 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    ae8c:	2600      	movs	r6, #0
    ae8e:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    ae92:	2701      	movs	r7, #1
    ae94:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    ae98:	4b6c      	ldr	r3, [pc, #432]	; (b04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    ae9a:	2808      	cmp	r0, #8
    ae9c:	d273      	bcs.n	af86 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    ae9e:	e8df f000 	tbb	[pc, r0]
    aea2:	7804      	.short	0x7804
    aea4:	47ceb3a0 	.word	0x47ceb3a0
    aea8:	bdb8      	.short	0xbdb8
    aeaa:	43c8      	mvns	r0, r1
    aeac:	ea70 0002 	orns	r0, r0, r2
    aeb0:	d105      	bne.n	aebe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    aeb2:	f002 f945 	bl	d140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    aeb6:	f001 fd2b 	bl	c910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    aeba:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    aebe:	8ae0      	ldrh	r0, [r4, #22]
    aec0:	b110      	cbz	r0, aec8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    aec2:	f002 fa61 	bl	d388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    aec6:	b180      	cbz	r0, aeea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    aec8:	f7ff fcd2 	bl	a870 <MPSL_IRQ_RADIO_Handler+0xbb4>
    aecc:	20ff      	movs	r0, #255	; 0xff
    aece:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    aed2:	6861      	ldr	r1, [r4, #4]
    aed4:	f1b1 3fff 	cmp.w	r1, #4294967295
    aed8:	d003      	beq.n	aee2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    aeda:	2005      	movs	r0, #5
    aedc:	f001 fd3a 	bl	c954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    aee0:	b140      	cbz	r0, aef4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    aee2:	7e60      	ldrb	r0, [r4, #25]
    aee4:	2801      	cmp	r0, #1
    aee6:	d114      	bne.n	af12 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    aee8:	e009      	b.n	aefe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    aeea:	f640 012c 	movw	r1, #2092	; 0x82c
    aeee:	2070      	movs	r0, #112	; 0x70
    aef0:	f002 fac2 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aef4:	f640 0131 	movw	r1, #2097	; 0x831
    aef8:	2070      	movs	r0, #112	; 0x70
    aefa:	f002 fabd 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aefe:	68a2      	ldr	r2, [r4, #8]
    af00:	6920      	ldr	r0, [r4, #16]
    af02:	68e1      	ldr	r1, [r4, #12]
    af04:	1810      	adds	r0, r2, r0
    af06:	4171      	adcs	r1, r6
    af08:	1e40      	subs	r0, r0, #1
    af0a:	f141 31ff 	adc.w	r1, r1, #4294967295
    af0e:	f001 fbfd 	bl	c70c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    af12:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    af16:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    af1a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    af1e:	6840      	ldr	r0, [r0, #4]
    af20:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    af24:	680a      	ldr	r2, [r1, #0]
    af26:	b001      	add	sp, #4
    af28:	2101      	movs	r1, #1
    af2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    af2e:	4710      	bx	r2
    af30:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    af34:	b160      	cbz	r0, af50 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    af36:	43c8      	mvns	r0, r1
    af38:	ea70 0002 	orns	r0, r0, r2
    af3c:	d105      	bne.n	af4a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    af3e:	f002 f8ff 	bl	d140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    af42:	f001 fce5 	bl	c910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    af46:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    af4a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    af4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af50:	f7ff fc8e 	bl	a870 <MPSL_IRQ_RADIO_Handler+0xbb4>
    af54:	f04f 30ff 	mov.w	r0, #4294967295
    af58:	6060      	str	r0, [r4, #4]
    af5a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    af5e:	f88d 0000 	strb.w	r0, [sp]
    af62:	f89d 0000 	ldrb.w	r0, [sp]
    af66:	b178      	cbz	r0, af88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    af68:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    af6c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    af70:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    af74:	6840      	ldr	r0, [r0, #4]
    af76:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    af7a:	680a      	ldr	r2, [r1, #0]
    af7c:	b001      	add	sp, #4
    af7e:	2106      	movs	r1, #6
    af80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    af84:	4710      	bx	r2
    af86:	e05a      	b.n	b03e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    af88:	f640 0148 	movw	r1, #2120	; 0x848
    af8c:	2070      	movs	r0, #112	; 0x70
    af8e:	f002 fa73 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af92:	f7ff fc6d 	bl	a870 <MPSL_IRQ_RADIO_Handler+0xbb4>
    af96:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    af9a:	f002 f9f5 	bl	d388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    af9e:	b130      	cbz	r0, afae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    afa0:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    afa4:	43c9      	mvns	r1, r1
    afa6:	ea71 0000 	orns	r0, r1, r0
    afaa:	d005      	beq.n	afb8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    afac:	e00a      	b.n	afc4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    afae:	f640 0156 	movw	r1, #2134	; 0x856
    afb2:	2070      	movs	r0, #112	; 0x70
    afb4:	f002 fa60 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    afb8:	f002 f8c2 	bl	d140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    afbc:	f001 fca8 	bl	c910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    afc0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    afc4:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    afc8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    afcc:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    afd0:	6840      	ldr	r0, [r0, #4]
    afd2:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    afd6:	680a      	ldr	r2, [r1, #0]
    afd8:	b001      	add	sp, #4
    afda:	2100      	movs	r1, #0
    afdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    afe0:	4710      	bx	r2
    afe2:	f001 fe95 	bl	cd10 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    afe6:	8ae0      	ldrh	r0, [r4, #22]
    afe8:	b110      	cbz	r0, aff0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    afea:	f002 f9cd 	bl	d388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    afee:	b130      	cbz	r0, affe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    aff0:	f001 fea2 	bl	cd38 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    aff4:	2800      	cmp	r0, #0
    aff6:	bf18      	it	ne
    aff8:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    affc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    affe:	f44f 6106 	mov.w	r1, #2144	; 0x860
    b002:	2070      	movs	r0, #112	; 0x70
    b004:	f002 fa38 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b008:	4811      	ldr	r0, [pc, #68]	; (b050 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    b00a:	6007      	str	r7, [r0, #0]
    b00c:	6898      	ldr	r0, [r3, #8]
    b00e:	6007      	str	r7, [r0, #0]
    b010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b012:	7818      	ldrb	r0, [r3, #0]
    b014:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b018:	f002 bb00 	b.w	d61c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b01c:	f7ff fc28 	bl	a870 <MPSL_IRQ_RADIO_Handler+0xbb4>
    b020:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b024:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    b028:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    b02c:	6840      	ldr	r0, [r0, #4]
    b02e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    b032:	680a      	ldr	r2, [r1, #0]
    b034:	b001      	add	sp, #4
    b036:	2105      	movs	r1, #5
    b038:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    b03c:	4710      	bx	r2
    b03e:	f640 0173 	movw	r1, #2163	; 0x873
    b042:	2070      	movs	r0, #112	; 0x70
    b044:	f002 fa18 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b048:	20001028 	.word	0x20001028
    b04c:	2000030c 	.word	0x2000030c
    b050:	40000508 	.word	0x40000508

0000b054 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    b054:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b058:	48f7      	ldr	r0, [pc, #988]	; (b438 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    b05a:	b097      	sub	sp, #92	; 0x5c
    b05c:	460c      	mov	r4, r1
    b05e:	6800      	ldr	r0, [r0, #0]
    b060:	4ff6      	ldr	r7, [pc, #984]	; (b43c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    b062:	05c0      	lsls	r0, r0, #23
    b064:	0dc0      	lsrs	r0, r0, #23
    b066:	d00e      	beq.n	b086 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    b068:	3810      	subs	r0, #16
    b06a:	b240      	sxtb	r0, r0
    b06c:	2800      	cmp	r0, #0
    b06e:	bfb8      	it	lt
    b070:	f000 000f 	andlt.w	r0, r0, #15
    b074:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b078:	bfac      	ite	ge
    b07a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    b07e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    b082:	0940      	lsrs	r0, r0, #5
    b084:	d00c      	beq.n	b0a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    b086:	7820      	ldrb	r0, [r4, #0]
    b088:	f04f 0a00 	mov.w	sl, #0
    b08c:	2800      	cmp	r0, #0
    b08e:	bf18      	it	ne
    b090:	2801      	cmpne	r0, #1
    b092:	d017      	beq.n	b0c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    b094:	f240 61f9 	movw	r1, #1785	; 0x6f9
    b098:	f04f 0070 	mov.w	r0, #112	; 0x70
    b09c:	f002 f9ec 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0a0:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    b0a4:	f04f 0a01 	mov.w	sl, #1
    b0a8:	2820      	cmp	r0, #32
    b0aa:	d006      	beq.n	b0ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    b0ac:	7820      	ldrb	r0, [r4, #0]
    b0ae:	b148      	cbz	r0, b0c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    b0b0:	f240 61f5 	movw	r1, #1781	; 0x6f5
    b0b4:	2070      	movs	r0, #112	; 0x70
    b0b6:	f002 f9df 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0ba:	f240 61f2 	movw	r1, #1778	; 0x6f2
    b0be:	2070      	movs	r0, #112	; 0x70
    b0c0:	f002 f9da 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0c4:	f8df b378 	ldr.w	fp, [pc, #888]	; b440 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    b0c8:	f1bb 0f00 	cmp.w	fp, #0
    b0cc:	d004      	beq.n	b0d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    b0ce:	2100      	movs	r1, #0
    b0d0:	f240 60fc 	movw	r0, #1788	; 0x6fc
    b0d4:	f3af 8000 	nop.w
    b0d8:	2000      	movs	r0, #0
    b0da:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    b0de:	a905      	add	r1, sp, #20
    b0e0:	9112      	str	r1, [sp, #72]	; 0x48
    b0e2:	49d8      	ldr	r1, [pc, #864]	; (b444 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    b0e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b0e6:	f04f 0801 	mov.w	r8, #1
    b0ea:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    b0ee:	9001      	str	r0, [sp, #4]
    b0f0:	f1bb 0f00 	cmp.w	fp, #0
    b0f4:	d004      	beq.n	b100 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    b0f6:	2100      	movs	r1, #0
    b0f8:	f240 7007 	movw	r0, #1799	; 0x707
    b0fc:	f3af 8000 	nop.w
    b100:	f1b8 0f00 	cmp.w	r8, #0
    b104:	d009      	beq.n	b11a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    b106:	bf00      	nop
    b108:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    b10c:	2500      	movs	r5, #0
    b10e:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    b112:	f1ba 0f00 	cmp.w	sl, #0
    b116:	d007      	beq.n	b128 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    b118:	e03e      	b.n	b198 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    b11a:	48cb      	ldr	r0, [pc, #812]	; (b448 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    b11c:	2800      	cmp	r0, #0
    b11e:	bf18      	it	ne
    b120:	f3af 8000 	nopne.w
    b124:	b662      	cpsie	i
    b126:	e7ef      	b.n	b108 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    b128:	46b1      	mov	r9, r6
    b12a:	2001      	movs	r0, #1
    b12c:	ea20 0609 	bic.w	r6, r0, r9
    b130:	48c6      	ldr	r0, [pc, #792]	; (b44c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    b132:	2240      	movs	r2, #64	; 0x40
    b134:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    b138:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    b13c:	f006 fea3 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    b140:	f1bb 0f00 	cmp.w	fp, #0
    b144:	d004      	beq.n	b150 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    b146:	2100      	movs	r1, #0
    b148:	f240 503c 	movw	r0, #1340	; 0x53c
    b14c:	f3af 8000 	nop.w
    b150:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    b154:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    b158:	4439      	add	r1, r7
    b15a:	4438      	add	r0, r7
    b15c:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    b15e:	8502      	strh	r2, [r0, #40]	; 0x28
    b160:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    b164:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    b168:	f1bb 0f00 	cmp.w	fp, #0
    b16c:	d004      	beq.n	b178 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    b16e:	2100      	movs	r1, #0
    b170:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    b174:	f3af 8000 	nop.w
    b178:	f1bb 0f00 	cmp.w	fp, #0
    b17c:	d004      	beq.n	b188 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    b17e:	2100      	movs	r1, #0
    b180:	f240 7011 	movw	r0, #1809	; 0x711
    b184:	f3af 8000 	nop.w
    b188:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    b18c:	f88d 0020 	strb.w	r0, [sp, #32]
    b190:	f89d 0020 	ldrb.w	r0, [sp, #32]
    b194:	2800      	cmp	r0, #0
    b196:	d1ab      	bne.n	b0f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    b198:	f1bb 0f00 	cmp.w	fp, #0
    b19c:	d004      	beq.n	b1a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    b19e:	2100      	movs	r1, #0
    b1a0:	f240 701b 	movw	r0, #1819	; 0x71b
    b1a4:	f3af 8000 	nop.w
    b1a8:	f001 fbb2 	bl	c910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    b1ac:	4681      	mov	r9, r0
    b1ae:	a802      	add	r0, sp, #8
    b1b0:	900a      	str	r0, [sp, #40]	; 0x28
    b1b2:	4688      	mov	r8, r1
    b1b4:	8921      	ldrh	r1, [r4, #8]
    b1b6:	4628      	mov	r0, r5
    b1b8:	f361 401f 	bfi	r0, r1, #16, #16
    b1bc:	4601      	mov	r1, r0
    b1be:	7aa2      	ldrb	r2, [r4, #10]
    b1c0:	4628      	mov	r0, r5
    b1c2:	f362 0007 	bfi	r0, r2, #0, #8
    b1c6:	7ae2      	ldrb	r2, [r4, #11]
    b1c8:	f362 200f 	bfi	r0, r2, #8, #8
    b1cc:	7822      	ldrb	r2, [r4, #0]
    b1ce:	9502      	str	r5, [sp, #8]
    b1d0:	f362 4017 	bfi	r0, r2, #16, #8
    b1d4:	e9cd 5104 	strd	r5, r1, [sp, #16]
    b1d8:	e9cd 0506 	strd	r0, r5, [sp, #24]
    b1dc:	9503      	str	r5, [sp, #12]
    b1de:	7820      	ldrb	r0, [r4, #0]
    b1e0:	b380      	cbz	r0, b244 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    b1e2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    b1e6:	499a      	ldr	r1, [pc, #616]	; (b450 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    b1e8:	1a08      	subs	r0, r1, r0
    b1ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    b1ec:	f101 020c 	add.w	r2, r1, #12
    b1f0:	a914      	add	r1, sp, #80	; 0x50
    b1f2:	f001 f8ad 	bl	c350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b1f6:	2200      	movs	r2, #0
    b1f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    b1fc:	4648      	mov	r0, r9
    b1fe:	4641      	mov	r1, r8
    b200:	f7fe ff4e 	bl	a0a0 <MPSL_IRQ_RADIO_Handler+0x3e4>
    b204:	468c      	mov	ip, r1
    b206:	7ae1      	ldrb	r1, [r4, #11]
    b208:	2900      	cmp	r1, #0
    b20a:	bf0c      	ite	eq
    b20c:	217a      	moveq	r1, #122	; 0x7a
    b20e:	214a      	movne	r1, #74	; 0x4a
    b210:	6862      	ldr	r2, [r4, #4]
    b212:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b216:	4411      	add	r1, r2
    b218:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    b21c:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    b220:	441a      	add	r2, r3
    b222:	4411      	add	r1, r2
    b224:	1c88      	adds	r0, r1, #2
    b226:	f001 f877 	bl	c318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    b22a:	9600      	str	r6, [sp, #0]
    b22c:	9004      	str	r0, [sp, #16]
    b22e:	464a      	mov	r2, r9
    b230:	4643      	mov	r3, r8
    b232:	6920      	ldr	r0, [r4, #16]
    b234:	990a      	ldr	r1, [sp, #40]	; 0x28
    b236:	f7fe fd9b 	bl	9d70 <MPSL_IRQ_RADIO_Handler+0xb4>
    b23a:	2800      	cmp	r0, #0
    b23c:	bf08      	it	eq
    b23e:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    b242:	e046      	b.n	b2d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    b244:	e7ff      	b.n	b246 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    b246:	4648      	mov	r0, r9
    b248:	4641      	mov	r1, r8
    b24a:	f001 f803 	bl	c254 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    b24e:	f8df c204 	ldr.w	ip, [pc, #516]	; b454 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    b252:	4602      	mov	r2, r0
    b254:	eb10 0c0c 	adds.w	ip, r0, ip
    b258:	460b      	mov	r3, r1
    b25a:	f141 0e00 	adc.w	lr, r1, #0
    b25e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    b262:	ebb0 0c0c 	subs.w	ip, r0, ip
    b266:	eb71 0c0e 	sbcs.w	ip, r1, lr
    b26a:	d229      	bcs.n	b2c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    b26c:	3229      	adds	r2, #41	; 0x29
    b26e:	f143 0300 	adc.w	r3, r3, #0
    b272:	1a82      	subs	r2, r0, r2
    b274:	eb71 0203 	sbcs.w	r2, r1, r3
    b278:	d322      	bcc.n	b2c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    b27a:	8922      	ldrh	r2, [r4, #8]
    b27c:	ab0a      	add	r3, sp, #40	; 0x28
    b27e:	1a80      	subs	r0, r0, r2
    b280:	eb61 0105 	sbc.w	r1, r1, r5
    b284:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b286:	1e40      	subs	r0, r0, #1
    b288:	9200      	str	r2, [sp, #0]
    b28a:	f141 31ff 	adc.w	r1, r1, #4294967295
    b28e:	aa0d      	add	r2, sp, #52	; 0x34
    b290:	f001 f804 	bl	c29c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    b294:	7ae0      	ldrb	r0, [r4, #11]
    b296:	2800      	cmp	r0, #0
    b298:	bf0c      	ite	eq
    b29a:	207a      	moveq	r0, #122	; 0x7a
    b29c:	204a      	movne	r0, #74	; 0x4a
    b29e:	990d      	ldr	r1, [sp, #52]	; 0x34
    b2a0:	8922      	ldrh	r2, [r4, #8]
    b2a2:	4408      	add	r0, r1
    b2a4:	6861      	ldr	r1, [r4, #4]
    b2a6:	4411      	add	r1, r2
    b2a8:	4408      	add	r0, r1
    b2aa:	1c80      	adds	r0, r0, #2
    b2ac:	f001 f834 	bl	c318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    b2b0:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    b2b4:	e9cd 1202 	strd	r1, r2, [sp, #8]
    b2b8:	1a40      	subs	r0, r0, r1
    b2ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b2be:	e007      	b.n	b2d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    b2c0:	f1b9 0101 	subs.w	r1, r9, #1
    b2c4:	f148 30ff 	adc.w	r0, r8, #4294967295
    b2c8:	e9cd 1002 	strd	r1, r0, [sp, #8]
    b2cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b2d0:	9004      	str	r0, [sp, #16]
    b2d2:	f1bb 0f00 	cmp.w	fp, #0
    b2d6:	d004      	beq.n	b2e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    b2d8:	2100      	movs	r1, #0
    b2da:	f240 7022 	movw	r0, #1826	; 0x722
    b2de:	f3af 8000 	nop.w
    b2e2:	495a      	ldr	r1, [pc, #360]	; (b44c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    b2e4:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    b2e8:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    b2ec:	9108      	str	r1, [sp, #32]
    b2ee:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    b2f2:	a802      	add	r0, sp, #8
    b2f4:	2901      	cmp	r1, #1
    b2f6:	bf18      	it	ne
    b2f8:	2902      	cmpne	r1, #2
    b2fa:	d141      	bne.n	b380 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    b2fc:	9511      	str	r5, [sp, #68]	; 0x44
    b2fe:	9a02      	ldr	r2, [sp, #8]
    b300:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    b304:	1a53      	subs	r3, r2, r1
    b306:	f8dd c010 	ldr.w	ip, [sp, #16]
    b30a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b30e:	eb12 020c 	adds.w	r2, r2, ip
    b312:	1a51      	subs	r1, r2, r1
    b314:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b318:	2b02      	cmp	r3, #2
    b31a:	d374      	bcc.n	b406 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    b31c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b320:	bf98      	it	ls
    b322:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    b326:	d86e      	bhi.n	b406 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    b328:	2501      	movs	r5, #1
    b32a:	ab14      	add	r3, sp, #80	; 0x50
    b32c:	aa0e      	add	r2, sp, #56	; 0x38
    b32e:	4631      	mov	r1, r6
    b330:	f7fe ff06 	bl	a140 <MPSL_IRQ_RADIO_Handler+0x484>
    b334:	2800      	cmp	r0, #0
    b336:	d06d      	beq.n	b414 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    b338:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    b33c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    b340:	4633      	mov	r3, r6
    b342:	428a      	cmp	r2, r1
    b344:	d06a      	beq.n	b41c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    b346:	2005      	movs	r0, #5
    b348:	f7fe fcd6 	bl	9cf8 <MPSL_IRQ_RADIO_Handler+0x3c>
    b34c:	9908      	ldr	r1, [sp, #32]
    b34e:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    b352:	7048      	strb	r0, [r1, #1]
    b354:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    b358:	2820      	cmp	r0, #32
    b35a:	bf01      	itttt	eq
    b35c:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    b360:	4438      	addeq	r0, r7
    b362:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    b366:	9511      	streq	r5, [sp, #68]	; 0x44
    b368:	bf1e      	ittt	ne
    b36a:	9908      	ldrne	r1, [sp, #32]
    b36c:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    b370:	f880 8001 	strbne.w	r8, [r0, #1]
    b374:	4632      	mov	r2, r6
    b376:	4641      	mov	r1, r8
    b378:	f05f 0003 	movs.w	r0, #3
    b37c:	f7ff fb24 	bl	a9c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    b380:	f1bb 0f00 	cmp.w	fp, #0
    b384:	d004      	beq.n	b390 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    b386:	2100      	movs	r1, #0
    b388:	f240 7027 	movw	r0, #1831	; 0x727
    b38c:	f3af 8000 	nop.w
    b390:	4831      	ldr	r0, [pc, #196]	; (b458 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    b392:	2800      	cmp	r0, #0
    b394:	bf18      	it	ne
    b396:	f3af 8000 	nopne.w
    b39a:	f3ef 8810 	mrs	r8, PRIMASK
    b39e:	b672      	cpsid	i
    b3a0:	f1bb 0f00 	cmp.w	fp, #0
    b3a4:	d004      	beq.n	b3b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    b3a6:	2100      	movs	r1, #0
    b3a8:	f240 702d 	movw	r0, #1837	; 0x72d
    b3ac:	f3af 8000 	nop.w
    b3b0:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    b3b4:	f88d 0020 	strb.w	r0, [sp, #32]
    b3b8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    b3bc:	2800      	cmp	r0, #0
    b3be:	f47f ae97 	bne.w	b0f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    b3c2:	f1bb 0f00 	cmp.w	fp, #0
    b3c6:	d004      	beq.n	b3d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    b3c8:	2100      	movs	r1, #0
    b3ca:	f240 7035 	movw	r0, #1845	; 0x735
    b3ce:	f3af 8000 	nop.w
    b3d2:	f10d 0e04 	add.w	lr, sp, #4
    b3d6:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    b3da:	f100 0e08 	add.w	lr, r0, #8
    b3de:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    b3e2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    b3e6:	e9c0 1206 	strd	r1, r2, [r0, #24]
    b3ea:	b325      	cbz	r5, b436 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    b3ec:	f1bb 0f00 	cmp.w	fp, #0
    b3f0:	d004      	beq.n	b3fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    b3f2:	2100      	movs	r1, #0
    b3f4:	f240 7042 	movw	r0, #1858	; 0x742
    b3f8:	f3af 8000 	nop.w
    b3fc:	f1ba 0f00 	cmp.w	sl, #0
    b400:	d146      	bne.n	b490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    b402:	e02b      	b.n	b45c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    b404:	e7ff      	b.n	b406 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    b406:	4632      	mov	r2, r6
    b408:	4641      	mov	r1, r8
    b40a:	2004      	movs	r0, #4
    b40c:	f7ff fadc 	bl	a9c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    b410:	2501      	movs	r5, #1
    b412:	e7b5      	b.n	b380 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    b414:	4632      	mov	r2, r6
    b416:	4641      	mov	r1, r8
    b418:	2004      	movs	r0, #4
    b41a:	e7af      	b.n	b37c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    b41c:	2920      	cmp	r1, #32
    b41e:	bf1d      	ittte	ne
    b420:	9808      	ldrne	r0, [sp, #32]
    b422:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    b426:	7840      	ldrbne	r0, [r0, #1]
    b428:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    b42c:	bf04      	itt	eq
    b42e:	4438      	addeq	r0, r7
    b430:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    b434:	e78a      	b.n	b34c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    b436:	e03b      	b.n	b4b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    b438:	e000ed04 	.word	0xe000ed04
    b43c:	200014a8 	.word	0x200014a8
    b440:	00000000 	.word	0x00000000
    b444:	20001028 	.word	0x20001028
    b448:	00000000 	.word	0x00000000
    b44c:	20001428 	.word	0x20001428
    b450:	1e847fff 	.word	0x1e847fff
    b454:	0f424000 	.word	0x0f424000
    b458:	00000000 	.word	0x00000000
    b45c:	9811      	ldr	r0, [sp, #68]	; 0x44
    b45e:	f010 0fff 	tst.w	r0, #255	; 0xff
    b462:	d015      	beq.n	b490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    b464:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    b468:	2820      	cmp	r0, #32
    b46a:	d111      	bne.n	b490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    b46c:	f1bb 0f00 	cmp.w	fp, #0
    b470:	d004      	beq.n	b47c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    b472:	2100      	movs	r1, #0
    b474:	f240 7047 	movw	r0, #1863	; 0x747
    b478:	f3af 8000 	nop.w
    b47c:	4631      	mov	r1, r6
    b47e:	2002      	movs	r0, #2
    b480:	f7ff fad4 	bl	aa2c <MPSL_IRQ_RADIO_Handler+0xd70>
    b484:	9010      	str	r0, [sp, #64]	; 0x40
    b486:	b918      	cbnz	r0, b490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    b488:	7820      	ldrb	r0, [r4, #0]
    b48a:	b300      	cbz	r0, b4ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    b48c:	2801      	cmp	r0, #1
    b48e:	d02e      	beq.n	b4ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    b490:	f1bb 0f00 	cmp.w	fp, #0
    b494:	d004      	beq.n	b4a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    b496:	2100      	movs	r1, #0
    b498:	f240 7064 	movw	r0, #1892	; 0x764
    b49c:	f3af 8000 	nop.w
    b4a0:	20ff      	movs	r0, #255	; 0xff
    b4a2:	f1ba 0f00 	cmp.w	sl, #0
    b4a6:	bf18      	it	ne
    b4a8:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    b4ac:	d029      	beq.n	b502 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    b4ae:	2501      	movs	r5, #1
    b4b0:	f1bb 0f00 	cmp.w	fp, #0
    b4b4:	d004      	beq.n	b4c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    b4b6:	2100      	movs	r1, #0
    b4b8:	f240 7075 	movw	r0, #1909	; 0x775
    b4bc:	f3af 8000 	nop.w
    b4c0:	9810      	ldr	r0, [sp, #64]	; 0x40
    b4c2:	4c34      	ldr	r4, [pc, #208]	; (b594 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    b4c4:	2802      	cmp	r0, #2
    b4c6:	d025      	beq.n	b514 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    b4c8:	2801      	cmp	r0, #1
    b4ca:	d02b      	beq.n	b524 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    b4cc:	e02f      	b.n	b52e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    b4ce:	f1bb 0f00 	cmp.w	fp, #0
    b4d2:	d004      	beq.n	b4de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    b4d4:	2100      	movs	r1, #0
    b4d6:	f240 704f 	movw	r0, #1871	; 0x74f
    b4da:	f3af 8000 	nop.w
    b4de:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    b4e2:	2004      	movs	r0, #4
    b4e4:	9917      	ldr	r1, [sp, #92]	; 0x5c
    b4e6:	f7ff fa6f 	bl	a9c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    b4ea:	2501      	movs	r5, #1
    b4ec:	e7e0      	b.n	b4b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    b4ee:	f1bb 0f00 	cmp.w	fp, #0
    b4f2:	f43f adfd 	beq.w	b0f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    b4f6:	2100      	movs	r1, #0
    b4f8:	f240 705a 	movw	r0, #1882	; 0x75a
    b4fc:	f3af 8000 	nop.w
    b500:	e5f6      	b.n	b0f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    b502:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    b506:	2101      	movs	r1, #1
    b508:	4391      	bics	r1, r2
    b50a:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    b50e:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    b512:	e7cc      	b.n	b4ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    b514:	68b8      	ldr	r0, [r7, #8]
    b516:	ebb0 0009 	subs.w	r0, r0, r9
    b51a:	f006 fb24 	bl	11b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b51e:	6861      	ldr	r1, [r4, #4]
    b520:	b921      	cbnz	r1, b52c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    b522:	e004      	b.n	b52e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    b524:	6861      	ldr	r1, [r4, #4]
    b526:	f04f 30ff 	mov.w	r0, #4294967295
    b52a:	b101      	cbz	r1, b52e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    b52c:	4788      	blx	r1
    b52e:	f1b8 0f00 	cmp.w	r8, #0
    b532:	d028      	beq.n	b586 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    b534:	f1bb 0f00 	cmp.w	fp, #0
    b538:	d004      	beq.n	b544 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    b53a:	2100      	movs	r1, #0
    b53c:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    b540:	f3af 8000 	nop.w
    b544:	b19d      	cbz	r5, b56e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    b546:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    b54a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    b54e:	4438      	add	r0, r7
    b550:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    b554:	2820      	cmp	r0, #32
    b556:	d00a      	beq.n	b56e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    b558:	f1bb 0f00 	cmp.w	fp, #0
    b55c:	d004      	beq.n	b568 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    b55e:	2100      	movs	r1, #0
    b560:	f240 708f 	movw	r0, #1935	; 0x78f
    b564:	f3af 8000 	nop.w
    b568:	7860      	ldrb	r0, [r4, #1]
    b56a:	f002 f857 	bl	d61c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b56e:	f1bb 0f00 	cmp.w	fp, #0
    b572:	d004      	beq.n	b57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    b574:	2100      	movs	r1, #0
    b576:	f240 7094 	movw	r0, #1940	; 0x794
    b57a:	f3af 8000 	nop.w
    b57e:	b019      	add	sp, #100	; 0x64
    b580:	4628      	mov	r0, r5
    b582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b586:	4804      	ldr	r0, [pc, #16]	; (b598 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    b588:	2800      	cmp	r0, #0
    b58a:	bf18      	it	ne
    b58c:	f3af 8000 	nopne.w
    b590:	b662      	cpsie	i
    b592:	e7cf      	b.n	b534 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    b594:	2000030c 	.word	0x2000030c
    b598:	00000000 	.word	0x00000000

0000b59c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    b59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5a0:	4604      	mov	r4, r0
    b5a2:	7800      	ldrb	r0, [r0, #0]
    b5a4:	b095      	sub	sp, #84	; 0x54
    b5a6:	b118      	cbz	r0, b5b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    b5a8:	b015      	add	sp, #84	; 0x54
    b5aa:	2000      	movs	r0, #0
    b5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5b0:	48d1      	ldr	r0, [pc, #836]	; (b8f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    b5b2:	6800      	ldr	r0, [r0, #0]
    b5b4:	05c0      	lsls	r0, r0, #23
    b5b6:	0dc0      	lsrs	r0, r0, #23
    b5b8:	d00e      	beq.n	b5d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    b5ba:	3810      	subs	r0, #16
    b5bc:	b240      	sxtb	r0, r0
    b5be:	2800      	cmp	r0, #0
    b5c0:	bfb8      	it	lt
    b5c2:	f000 000f 	andlt.w	r0, r0, #15
    b5c6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b5ca:	bfac      	ite	ge
    b5cc:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    b5d0:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    b5d4:	0940      	lsrs	r0, r0, #5
    b5d6:	d0e7      	beq.n	b5a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    b5d8:	a80d      	add	r0, sp, #52	; 0x34
    b5da:	f8df 9320 	ldr.w	r9, [pc, #800]	; b8fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    b5de:	9009      	str	r0, [sp, #36]	; 0x24
    b5e0:	f1b9 0f00 	cmp.w	r9, #0
    b5e4:	d004      	beq.n	b5f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    b5e6:	2100      	movs	r1, #0
    b5e8:	f240 50c5 	movw	r0, #1477	; 0x5c5
    b5ec:	f3af 8000 	nop.w
    b5f0:	f8df 830c 	ldr.w	r8, [pc, #780]	; b900 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    b5f4:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    b5f8:	2500      	movs	r5, #0
    b5fa:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    b5fe:	9503      	str	r5, [sp, #12]
    b600:	f1b9 0f00 	cmp.w	r9, #0
    b604:	d004      	beq.n	b610 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    b606:	2100      	movs	r1, #0
    b608:	f240 50ca 	movw	r0, #1482	; 0x5ca
    b60c:	f3af 8000 	nop.w
    b610:	2001      	movs	r0, #1
    b612:	ea20 0a06 	bic.w	sl, r0, r6
    b616:	48bb      	ldr	r0, [pc, #748]	; (b904 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    b618:	2240      	movs	r2, #64	; 0x40
    b61a:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    b61e:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    b622:	f006 fc30 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    b626:	f1b9 0f00 	cmp.w	r9, #0
    b62a:	d004      	beq.n	b636 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    b62c:	2100      	movs	r1, #0
    b62e:	f240 503c 	movw	r0, #1340	; 0x53c
    b632:	f3af 8000 	nop.w
    b636:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    b63a:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    b63e:	eb01 0208 	add.w	r2, r1, r8
    b642:	4440      	add	r0, r8
    b644:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    b646:	8501      	strh	r1, [r0, #40]	; 0x28
    b648:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    b64c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    b650:	f1b9 0f00 	cmp.w	r9, #0
    b654:	d004      	beq.n	b660 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    b656:	2100      	movs	r1, #0
    b658:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    b65c:	f3af 8000 	nop.w
    b660:	f1b9 0f00 	cmp.w	r9, #0
    b664:	d004      	beq.n	b670 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    b666:	2100      	movs	r1, #0
    b668:	f240 50cf 	movw	r0, #1487	; 0x5cf
    b66c:	f3af 8000 	nop.w
    b670:	f001 f94e 	bl	c910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    b674:	460f      	mov	r7, r1
    b676:	4606      	mov	r6, r0
    b678:	8921      	ldrh	r1, [r4, #8]
    b67a:	4628      	mov	r0, r5
    b67c:	f361 401f 	bfi	r0, r1, #16, #16
    b680:	4601      	mov	r1, r0
    b682:	7aa2      	ldrb	r2, [r4, #10]
    b684:	4628      	mov	r0, r5
    b686:	f362 0007 	bfi	r0, r2, #0, #8
    b68a:	7ae2      	ldrb	r2, [r4, #11]
    b68c:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    b690:	f362 200f 	bfi	r0, r2, #8, #8
    b694:	7822      	ldrb	r2, [r4, #0]
    b696:	950a      	str	r5, [sp, #40]	; 0x28
    b698:	f362 4017 	bfi	r0, r2, #16, #8
    b69c:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    b6a0:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    b6a4:	950b      	str	r5, [sp, #44]	; 0x2c
    b6a6:	7820      	ldrb	r0, [r4, #0]
    b6a8:	b388      	cbz	r0, b70e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    b6aa:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    b6ae:	4896      	ldr	r0, [pc, #600]	; (b908 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    b6b0:	f10b 020c 	add.w	r2, fp, #12
    b6b4:	1a40      	subs	r0, r0, r1
    b6b6:	a911      	add	r1, sp, #68	; 0x44
    b6b8:	f000 fe4a 	bl	c350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b6bc:	2200      	movs	r2, #0
    b6be:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    b6c2:	4630      	mov	r0, r6
    b6c4:	4639      	mov	r1, r7
    b6c6:	f7fe fceb 	bl	a0a0 <MPSL_IRQ_RADIO_Handler+0x3e4>
    b6ca:	4684      	mov	ip, r0
    b6cc:	7ae0      	ldrb	r0, [r4, #11]
    b6ce:	460b      	mov	r3, r1
    b6d0:	2800      	cmp	r0, #0
    b6d2:	bf0c      	ite	eq
    b6d4:	207a      	moveq	r0, #122	; 0x7a
    b6d6:	204a      	movne	r0, #74	; 0x4a
    b6d8:	6861      	ldr	r1, [r4, #4]
    b6da:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    b6de:	4408      	add	r0, r1
    b6e0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    b6e4:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    b6e8:	4411      	add	r1, r2
    b6ea:	4408      	add	r0, r1
    b6ec:	1c80      	adds	r0, r0, #2
    b6ee:	f000 fe13 	bl	c318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    b6f2:	f8cd a000 	str.w	sl, [sp]
    b6f6:	900c      	str	r0, [sp, #48]	; 0x30
    b6f8:	4632      	mov	r2, r6
    b6fa:	463b      	mov	r3, r7
    b6fc:	4659      	mov	r1, fp
    b6fe:	6920      	ldr	r0, [r4, #16]
    b700:	f7fe fb36 	bl	9d70 <MPSL_IRQ_RADIO_Handler+0xb4>
    b704:	2800      	cmp	r0, #0
    b706:	bf08      	it	eq
    b708:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    b70c:	e045      	b.n	b79a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    b70e:	e7ff      	b.n	b710 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    b710:	4630      	mov	r0, r6
    b712:	4639      	mov	r1, r7
    b714:	f000 fd9e 	bl	c254 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    b718:	4b7c      	ldr	r3, [pc, #496]	; (b90c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    b71a:	4602      	mov	r2, r0
    b71c:	eb10 0c03 	adds.w	ip, r0, r3
    b720:	468b      	mov	fp, r1
    b722:	f141 0300 	adc.w	r3, r1, #0
    b726:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    b72a:	ebb0 0c0c 	subs.w	ip, r0, ip
    b72e:	eb71 0303 	sbcs.w	r3, r1, r3
    b732:	d22a      	bcs.n	b78a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    b734:	3229      	adds	r2, #41	; 0x29
    b736:	f14b 0300 	adc.w	r3, fp, #0
    b73a:	1a82      	subs	r2, r0, r2
    b73c:	eb71 0203 	sbcs.w	r2, r1, r3
    b740:	d323      	bcc.n	b78a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    b742:	8922      	ldrh	r2, [r4, #8]
    b744:	ab12      	add	r3, sp, #72	; 0x48
    b746:	1a80      	subs	r0, r0, r2
    b748:	eb61 0105 	sbc.w	r1, r1, r5
    b74c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b74e:	1e40      	subs	r0, r0, #1
    b750:	9200      	str	r2, [sp, #0]
    b752:	f141 31ff 	adc.w	r1, r1, #4294967295
    b756:	aa07      	add	r2, sp, #28
    b758:	f000 fda0 	bl	c29c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    b75c:	7ae0      	ldrb	r0, [r4, #11]
    b75e:	2800      	cmp	r0, #0
    b760:	bf0c      	ite	eq
    b762:	207a      	moveq	r0, #122	; 0x7a
    b764:	204a      	movne	r0, #74	; 0x4a
    b766:	9907      	ldr	r1, [sp, #28]
    b768:	8922      	ldrh	r2, [r4, #8]
    b76a:	4408      	add	r0, r1
    b76c:	6861      	ldr	r1, [r4, #4]
    b76e:	4411      	add	r1, r2
    b770:	4408      	add	r0, r1
    b772:	1c80      	adds	r0, r0, #2
    b774:	f000 fdd0 	bl	c318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    b778:	4601      	mov	r1, r0
    b77a:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    b77e:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    b782:	1a08      	subs	r0, r1, r0
    b784:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b788:	e006      	b.n	b798 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    b78a:	1e70      	subs	r0, r6, #1
    b78c:	f147 31ff 	adc.w	r1, r7, #4294967295
    b790:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    b794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b798:	900c      	str	r0, [sp, #48]	; 0x30
    b79a:	f1b9 0f00 	cmp.w	r9, #0
    b79e:	d004      	beq.n	b7aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    b7a0:	2100      	movs	r1, #0
    b7a2:	f240 50d5 	movw	r0, #1493	; 0x5d5
    b7a6:	f3af 8000 	nop.w
    b7aa:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    b7ae:	f8d8 1008 	ldr.w	r1, [r8, #8]
    b7b2:	1808      	adds	r0, r1, r0
    b7b4:	eb42 0105 	adc.w	r1, r2, r5
    b7b8:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    b7bc:	2a20      	cmp	r2, #32
    b7be:	d009      	beq.n	b7d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    b7c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    b7c4:	1a12      	subs	r2, r2, r0
    b7c6:	eb73 0201 	sbcs.w	r2, r3, r1
    b7ca:	d203      	bcs.n	b7d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    b7cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    b7d0:	2001      	movs	r0, #1
    b7d2:	9003      	str	r0, [sp, #12]
    b7d4:	f1b9 0f00 	cmp.w	r9, #0
    b7d8:	d004      	beq.n	b7e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    b7da:	2100      	movs	r1, #0
    b7dc:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    b7e0:	f3af 8000 	nop.w
    b7e4:	990a      	ldr	r1, [sp, #40]	; 0x28
    b7e6:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    b7ea:	1a0a      	subs	r2, r1, r0
    b7ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b7ee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    b7f2:	18c9      	adds	r1, r1, r3
    b7f4:	1a08      	subs	r0, r1, r0
    b7f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7fa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    b7fe:	bf98      	it	ls
    b800:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    b804:	d80b      	bhi.n	b81e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    b806:	4632      	mov	r2, r6
    b808:	463b      	mov	r3, r7
    b80a:	a90a      	add	r1, sp, #40	; 0x28
    b80c:	483f      	ldr	r0, [pc, #252]	; (b90c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    b80e:	f8cd a000 	str.w	sl, [sp]
    b812:	f7fe faad 	bl	9d70 <MPSL_IRQ_RADIO_Handler+0xb4>
    b816:	9903      	ldr	r1, [sp, #12]
    b818:	4308      	orrs	r0, r1
    b81a:	d145      	bne.n	b8a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    b81c:	e05f      	b.n	b8de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    b81e:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    b822:	aa05      	add	r2, sp, #20
    b824:	a903      	add	r1, sp, #12
    b826:	4658      	mov	r0, fp
    b828:	f000 fd92 	bl	c350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b82c:	f001 fa8e 	bl	cd4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    b830:	f000 fd72 	bl	c318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    b834:	4682      	mov	sl, r0
    b836:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    b83a:	2820      	cmp	r0, #32
    b83c:	d00a      	beq.n	b854 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    b83e:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    b842:	f8d8 3008 	ldr.w	r3, [r8, #8]
    b846:	1d80      	adds	r0, r0, #6
    b848:	f145 0100 	adc.w	r1, r5, #0
    b84c:	181e      	adds	r6, r3, r0
    b84e:	eb42 0701 	adc.w	r7, r2, r1
    b852:	e024      	b.n	b89e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    b854:	360a      	adds	r6, #10
    b856:	f147 0700 	adc.w	r7, r7, #0
    b85a:	f1bb 0f00 	cmp.w	fp, #0
    b85e:	d017      	beq.n	b890 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    b860:	f001 fd92 	bl	d388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b864:	b9a0      	cbnz	r0, b890 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    b866:	f001 fc49 	bl	d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    b86a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    b86e:	bf08      	it	eq
    b870:	200d      	moveq	r0, #13
    b872:	d00b      	beq.n	b88c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    b874:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    b878:	3856      	subs	r0, #86	; 0x56
    b87a:	bf08      	it	eq
    b87c:	201c      	moveq	r0, #28
    b87e:	d005      	beq.n	b88c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    b880:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    b884:	389f      	subs	r0, #159	; 0x9f
    b886:	bf14      	ite	ne
    b888:	4628      	movne	r0, r5
    b88a:	2032      	moveq	r0, #50	; 0x32
    b88c:	1986      	adds	r6, r0, r6
    b88e:	416f      	adcs	r7, r5
    b890:	9803      	ldr	r0, [sp, #12]
    b892:	4582      	cmp	sl, r0
    b894:	d903      	bls.n	b89e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    b896:	ebaa 0000 	sub.w	r0, sl, r0
    b89a:	1986      	adds	r6, r0, r6
    b89c:	416f      	adcs	r7, r5
    b89e:	201f      	movs	r0, #31
    b8a0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    b8a4:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    b8a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    b8ac:	f000 fcd2 	bl	c254 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    b8b0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    b8b4:	1880      	adds	r0, r0, r2
    b8b6:	eb41 0205 	adc.w	r2, r1, r5
    b8ba:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    b8be:	1840      	adds	r0, r0, r1
    b8c0:	eb42 0105 	adc.w	r1, r2, r5
    b8c4:	1c40      	adds	r0, r0, #1
    b8c6:	f141 0100 	adc.w	r1, r1, #0
    b8ca:	f1b9 0f00 	cmp.w	r9, #0
    b8ce:	e9c4 0104 	strd	r0, r1, [r4, #16]
    b8d2:	d004      	beq.n	b8de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    b8d4:	2100      	movs	r1, #0
    b8d6:	f240 50fa 	movw	r0, #1530	; 0x5fa
    b8da:	f3af 8000 	nop.w
    b8de:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    b8e2:	f88d 0000 	strb.w	r0, [sp]
    b8e6:	f89d 0000 	ldrb.w	r0, [sp]
    b8ea:	2800      	cmp	r0, #0
    b8ec:	f47f ae78 	bne.w	b5e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    b8f0:	b015      	add	sp, #84	; 0x54
    b8f2:	2001      	movs	r0, #1
    b8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8f8:	e000ed04 	.word	0xe000ed04
    b8fc:	00000000 	.word	0x00000000
    b900:	200014a8 	.word	0x200014a8
    b904:	20001428 	.word	0x20001428
    b908:	1e847fff 	.word	0x1e847fff
    b90c:	0f424000 	.word	0x0f424000

0000b910 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    b910:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b914:	4d9d      	ldr	r5, [pc, #628]	; (bb8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    b916:	b08c      	sub	sp, #48	; 0x30
    b918:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    b91c:	2000      	movs	r0, #0
    b91e:	9007      	str	r0, [sp, #28]
    b920:	9008      	str	r0, [sp, #32]
    b922:	2001      	movs	r0, #1
    b924:	4c9a      	ldr	r4, [pc, #616]	; (bb90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    b926:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    b92a:	f04f 0800 	mov.w	r8, #0
    b92e:	4607      	mov	r7, r0
    b930:	9006      	str	r0, [sp, #24]
    b932:	b124      	cbz	r4, b93e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    b934:	2100      	movs	r1, #0
    b936:	f240 70a5 	movw	r0, #1957	; 0x7a5
    b93a:	f3af 8000 	nop.w
    b93e:	9806      	ldr	r0, [sp, #24]
    b940:	2800      	cmp	r0, #0
    b942:	d03c      	beq.n	b9be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    b944:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    b948:	b124      	cbz	r4, b954 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    b94a:	2100      	movs	r1, #0
    b94c:	f240 70aa 	movw	r0, #1962	; 0x7aa
    b950:	f3af 8000 	nop.w
    b954:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    b958:	2240      	movs	r2, #64	; 0x40
    b95a:	ea27 060a 	bic.w	r6, r7, sl
    b95e:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    b962:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    b966:	4683      	mov	fp, r0
    b968:	f006 fa8d 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    b96c:	b124      	cbz	r4, b978 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    b96e:	2100      	movs	r1, #0
    b970:	f240 503c 	movw	r0, #1340	; 0x53c
    b974:	f3af 8000 	nop.w
    b978:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    b97c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    b980:	4428      	add	r0, r5
    b982:	4429      	add	r1, r5
    b984:	9000      	str	r0, [sp, #0]
    b986:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    b988:	8502      	strh	r2, [r0, #40]	; 0x28
    b98a:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    b98e:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    b992:	b124      	cbz	r4, b99e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    b994:	2100      	movs	r1, #0
    b996:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    b99a:	f3af 8000 	nop.w
    b99e:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    b9a2:	f88d 0008 	strb.w	r0, [sp, #8]
    b9a6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b9aa:	b178      	cbz	r0, b9cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    b9ac:	2c00      	cmp	r4, #0
    b9ae:	bf1c      	itt	ne
    b9b0:	2100      	movne	r1, #0
    b9b2:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    b9b6:	d0bc      	beq.n	b932 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    b9b8:	f3af 8000 	nop.w
    b9bc:	e7b9      	b.n	b932 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    b9be:	4875      	ldr	r0, [pc, #468]	; (bb94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    b9c0:	2800      	cmp	r0, #0
    b9c2:	bf18      	it	ne
    b9c4:	f3af 8000 	nopne.w
    b9c8:	b662      	cpsie	i
    b9ca:	e7bb      	b.n	b944 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    b9cc:	b124      	cbz	r4, b9d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    b9ce:	2100      	movs	r1, #0
    b9d0:	f240 70b4 	movw	r0, #1972	; 0x7b4
    b9d4:	f3af 8000 	nop.w
    b9d8:	980c      	ldr	r0, [sp, #48]	; 0x30
    b9da:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    b9de:	2803      	cmp	r0, #3
    b9e0:	d17e      	bne.n	bae0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    b9e2:	9a00      	ldr	r2, [sp, #0]
    b9e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    b9e6:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    b9ea:	4288      	cmp	r0, r1
    b9ec:	bf14      	ite	ne
    b9ee:	f04f 0a00 	movne.w	sl, #0
    b9f2:	f04f 0a01 	moveq.w	sl, #1
    b9f6:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    b9fa:	4683      	mov	fp, r0
    b9fc:	2220      	movs	r2, #32
    b9fe:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    ba02:	e003      	b.n	ba0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    ba04:	4602      	mov	r2, r0
    ba06:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    ba0a:	7840      	ldrb	r0, [r0, #1]
    ba0c:	4288      	cmp	r0, r1
    ba0e:	d002      	beq.n	ba16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    ba10:	2820      	cmp	r0, #32
    ba12:	d00a      	beq.n	ba2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ba14:	e7f6      	b.n	ba04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    ba16:	2820      	cmp	r0, #32
    ba18:	d007      	beq.n	ba2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ba1a:	4583      	cmp	fp, r0
    ba1c:	d107      	bne.n	ba2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    ba1e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    ba22:	7840      	ldrb	r0, [r0, #1]
    ba24:	f88c 0000 	strb.w	r0, [ip]
    ba28:	e007      	b.n	ba3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    ba2a:	4640      	mov	r0, r8
    ba2c:	e00c      	b.n	ba48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    ba2e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    ba32:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    ba36:	7840      	ldrb	r0, [r0, #1]
    ba38:	7048      	strb	r0, [r1, #1]
    ba3a:	b124      	cbz	r4, ba46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    ba3c:	2100      	movs	r1, #0
    ba3e:	f240 40a4 	movw	r0, #1188	; 0x4a4
    ba42:	f3af 8000 	nop.w
    ba46:	4638      	mov	r0, r7
    ba48:	46c3      	mov	fp, r8
    ba4a:	ea10 0f0a 	tst.w	r0, sl
    ba4e:	bf18      	it	ne
    ba50:	46bb      	movne	fp, r7
    ba52:	2800      	cmp	r0, #0
    ba54:	d04e      	beq.n	baf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    ba56:	b124      	cbz	r4, ba62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    ba58:	2100      	movs	r1, #0
    ba5a:	f240 70b9 	movw	r0, #1977	; 0x7b9
    ba5e:	f3af 8000 	nop.w
    ba62:	4632      	mov	r2, r6
    ba64:	2001      	movs	r0, #1
    ba66:	990c      	ldr	r1, [sp, #48]	; 0x30
    ba68:	f7fe ffae 	bl	a9c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    ba6c:	b124      	cbz	r4, ba78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    ba6e:	2100      	movs	r1, #0
    ba70:	f240 70c2 	movw	r0, #1986	; 0x7c2
    ba74:	f3af 8000 	nop.w
    ba78:	4847      	ldr	r0, [pc, #284]	; (bb98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    ba7a:	2800      	cmp	r0, #0
    ba7c:	bf18      	it	ne
    ba7e:	f3af 8000 	nopne.w
    ba82:	f3ef 8010 	mrs	r0, PRIMASK
    ba86:	b672      	cpsid	i
    ba88:	9006      	str	r0, [sp, #24]
    ba8a:	b124      	cbz	r4, ba96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    ba8c:	2100      	movs	r1, #0
    ba8e:	f240 70c7 	movw	r0, #1991	; 0x7c7
    ba92:	f3af 8000 	nop.w
    ba96:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    ba9a:	f88d 0008 	strb.w	r0, [sp, #8]
    ba9e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    baa2:	b138      	cbz	r0, bab4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    baa4:	2c00      	cmp	r4, #0
    baa6:	bf1c      	itt	ne
    baa8:	2100      	movne	r1, #0
    baaa:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    baae:	f43f af40 	beq.w	b932 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    bab2:	e781      	b.n	b9b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    bab4:	f1bb 0f00 	cmp.w	fp, #0
    bab8:	d009      	beq.n	bace <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    baba:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    babe:	2820      	cmp	r0, #32
    bac0:	d105      	bne.n	bace <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    bac2:	4631      	mov	r1, r6
    bac4:	2002      	movs	r0, #2
    bac6:	f7fe ffb1 	bl	aa2c <MPSL_IRQ_RADIO_Handler+0xd70>
    baca:	9008      	str	r0, [sp, #32]
    bacc:	b1f8      	cbz	r0, bb0e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    bace:	b124      	cbz	r4, bada <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    bad0:	2100      	movs	r1, #0
    bad2:	f240 70df 	movw	r0, #2015	; 0x7df
    bad6:	f3af 8000 	nop.w
    bada:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    bade:	e000      	b.n	bae2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    bae0:	e008      	b.n	baf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    bae2:	ea27 0000 	bic.w	r0, r7, r0
    bae6:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    baea:	20ff      	movs	r0, #255	; 0xff
    baec:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    baf0:	2001      	movs	r0, #1
    baf2:	9007      	str	r0, [sp, #28]
    baf4:	b124      	cbz	r4, bb00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    baf6:	2100      	movs	r1, #0
    baf8:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    bafc:	f3af 8000 	nop.w
    bb00:	9808      	ldr	r0, [sp, #32]
    bb02:	4e26      	ldr	r6, [pc, #152]	; (bb9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    bb04:	2802      	cmp	r0, #2
    bb06:	d009      	beq.n	bb1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    bb08:	2801      	cmp	r0, #1
    bb0a:	d027      	beq.n	bb5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    bb0c:	e02b      	b.n	bb66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    bb0e:	b354      	cbz	r4, bb66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    bb10:	2100      	movs	r1, #0
    bb12:	f240 70da 	movw	r0, #2010	; 0x7da
    bb16:	f3af 8000 	nop.w
    bb1a:	e7ec      	b.n	baf6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    bb1c:	f000 fef8 	bl	c910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    bb20:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    bb24:	ebb3 0c00 	subs.w	ip, r3, r0
    bb28:	eb72 0c01 	sbcs.w	ip, r2, r1
    bb2c:	d204      	bcs.n	bb38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    bb2e:	f240 71ee 	movw	r1, #2030	; 0x7ee
    bb32:	2070      	movs	r0, #112	; 0x70
    bb34:	f001 fca0 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb38:	1a18      	subs	r0, r3, r0
    bb3a:	eb62 0101 	sbc.w	r1, r2, r1
    bb3e:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    bb42:	f171 0100 	sbcs.w	r1, r1, #0
    bb46:	d304      	bcc.n	bb52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    bb48:	f240 71ef 	movw	r1, #2031	; 0x7ef
    bb4c:	2070      	movs	r0, #112	; 0x70
    bb4e:	f001 fc93 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb52:	f006 f808 	bl	11b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    bb56:	6871      	ldr	r1, [r6, #4]
    bb58:	b129      	cbz	r1, bb66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    bb5a:	e003      	b.n	bb64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    bb5c:	6871      	ldr	r1, [r6, #4]
    bb5e:	f04f 30ff 	mov.w	r0, #4294967295
    bb62:	b101      	cbz	r1, bb66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    bb64:	4788      	blx	r1
    bb66:	9806      	ldr	r0, [sp, #24]
    bb68:	b148      	cbz	r0, bb7e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    bb6a:	b124      	cbz	r4, bb76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    bb6c:	2100      	movs	r1, #0
    bb6e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    bb72:	f3af 8000 	nop.w
    bb76:	9807      	ldr	r0, [sp, #28]
    bb78:	b00d      	add	sp, #52	; 0x34
    bb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb7e:	4805      	ldr	r0, [pc, #20]	; (bb94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    bb80:	2800      	cmp	r0, #0
    bb82:	bf18      	it	ne
    bb84:	f3af 8000 	nopne.w
    bb88:	b662      	cpsie	i
    bb8a:	e7ee      	b.n	bb6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    bb8c:	200014a8 	.word	0x200014a8
	...
    bb9c:	2000030c 	.word	0x2000030c

0000bba0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    bba0:	2820      	cmp	r0, #32
    bba2:	bf24      	itt	cs
    bba4:	2000      	movcs	r0, #0
    bba6:	4770      	bxcs	lr
    bba8:	4b03      	ldr	r3, [pc, #12]	; (bbb8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x18>)
    bbaa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    bbae:	e9c0 1200 	strd	r1, r2, [r0]
    bbb2:	2001      	movs	r0, #1
    bbb4:	4770      	bx	lr
    bbb6:	0000      	.short	0x0000
    bbb8:	20001028 	.word	0x20001028

0000bbbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    bbbc:	b510      	push	{r4, lr}
    bbbe:	2820      	cmp	r0, #32
    bbc0:	d211      	bcs.n	bbe6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    bbc2:	490e      	ldr	r1, [pc, #56]	; (bbfc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    bbc4:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    bbc8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    bbcc:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    bbd0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    bbd4:	b13b      	cbz	r3, bbe6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    bbd6:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    bbda:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    bbde:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    bbe2:	2a01      	cmp	r2, #1
    bbe4:	d001      	beq.n	bbea <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    bbe6:	2000      	movs	r0, #0
    bbe8:	bd10      	pop	{r4, pc}
    bbea:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    bbee:	4601      	mov	r1, r0
    bbf0:	2000      	movs	r0, #0
    bbf2:	f7fe fee9 	bl	a9c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    bbf6:	2001      	movs	r0, #1
    bbf8:	bd10      	pop	{r4, pc}
    bbfa:	0000      	.short	0x0000
    bbfc:	200014a8 	.word	0x200014a8

0000bc00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    bc00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc04:	4e86      	ldr	r6, [pc, #536]	; (be20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    bc06:	4680      	mov	r8, r0
    bc08:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    bc0c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    bc10:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    bc14:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    bc18:	2800      	cmp	r0, #0
    bc1a:	d071      	beq.n	bd00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    bc1c:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    bc20:	4d80      	ldr	r5, [pc, #512]	; (be24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    bc22:	b125      	cbz	r5, bc2e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    bc24:	2100      	movs	r1, #0
    bc26:	f640 307b 	movw	r0, #2939	; 0xb7b
    bc2a:	f3af 8000 	nop.w
    bc2e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    bc32:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    bc36:	2801      	cmp	r0, #1
    bc38:	d018      	beq.n	bc6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    bc3a:	b2c0      	uxtb	r0, r0
    bc3c:	2804      	cmp	r0, #4
    bc3e:	bf1c      	itt	ne
    bc40:	2805      	cmpne	r0, #5
    bc42:	2806      	cmpne	r0, #6
    bc44:	d061      	beq.n	bd0a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    bc46:	b12d      	cbz	r5, bc54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    bc48:	f04f 0100 	mov.w	r1, #0
    bc4c:	f640 3087 	movw	r0, #2951	; 0xb87
    bc50:	f3af 8000 	nop.w
    bc54:	f006 f8bd 	bl	11dd2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bc58:	b125      	cbz	r5, bc64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    bc5a:	2100      	movs	r1, #0
    bc5c:	f640 308b 	movw	r0, #2955	; 0xb8b
    bc60:	f3af 8000 	nop.w
    bc64:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    bc68:	2801      	cmp	r0, #1
    bc6a:	d1e6      	bne.n	bc3a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    bc6c:	2401      	movs	r4, #1
    bc6e:	b125      	cbz	r5, bc7a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    bc70:	2100      	movs	r1, #0
    bc72:	f640 3092 	movw	r0, #2962	; 0xb92
    bc76:	f3af 8000 	nop.w
    bc7a:	2c00      	cmp	r4, #0
    bc7c:	d04b      	beq.n	bd16 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    bc7e:	2000      	movs	r0, #0
    bc80:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    bc84:	b125      	cbz	r5, bc90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    bc86:	2100      	movs	r1, #0
    bc88:	f640 3097 	movw	r0, #2967	; 0xb97
    bc8c:	f3af 8000 	nop.w
    bc90:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    bc94:	2001      	movs	r0, #1
    bc96:	ea20 090b 	bic.w	r9, r0, fp
    bc9a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    bc9e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    bca2:	2240      	movs	r2, #64	; 0x40
    bca4:	f006 f8ef 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    bca8:	b125      	cbz	r5, bcb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    bcaa:	2100      	movs	r1, #0
    bcac:	f240 503c 	movw	r0, #1340	; 0x53c
    bcb0:	f3af 8000 	nop.w
    bcb4:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    bcb8:	eb00 0a06 	add.w	sl, r0, r6
    bcbc:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    bcc0:	4430      	add	r0, r6
    bcc2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    bcc4:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    bcc8:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    bccc:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    bcd0:	b125      	cbz	r5, bcdc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    bcd2:	2100      	movs	r1, #0
    bcd4:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    bcd8:	f3af 8000 	nop.w
    bcdc:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    bce0:	f88d 0000 	strb.w	r0, [sp]
    bce4:	f89d 0000 	ldrb.w	r0, [sp]
    bce8:	b1e0      	cbz	r0, bd24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    bcea:	2d00      	cmp	r5, #0
    bcec:	bf1c      	itt	ne
    bcee:	2100      	movne	r1, #0
    bcf0:	f640 309d 	movwne	r0, #2973	; 0xb9d
    bcf4:	d0bb      	beq.n	bc6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    bcf6:	bf00      	nop
    bcf8:	f3af 8000 	nop.w
    bcfc:	e7b7      	b.n	bc6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    bcfe:	e7ff      	b.n	bd00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    bd00:	f640 3172 	movw	r1, #2930	; 0xb72
    bd04:	2070      	movs	r0, #112	; 0x70
    bd06:	f001 fbb7 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bd0a:	464a      	mov	r2, r9
    bd0c:	4641      	mov	r1, r8
    bd0e:	2001      	movs	r0, #1
    bd10:	f7fe fe5a 	bl	a9c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    bd14:	e7a0      	b.n	bc58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    bd16:	4844      	ldr	r0, [pc, #272]	; (be28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    bd18:	2800      	cmp	r0, #0
    bd1a:	bf18      	it	ne
    bd1c:	f3af 8000 	nopne.w
    bd20:	b662      	cpsie	i
    bd22:	e7ac      	b.n	bc7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    bd24:	b125      	cbz	r5, bd30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    bd26:	2100      	movs	r1, #0
    bd28:	f640 30a1 	movw	r0, #2977	; 0xba1
    bd2c:	f3af 8000 	nop.w
    bd30:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    bd34:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    bd38:	4640      	mov	r0, r8
    bd3a:	461c      	mov	r4, r3
    bd3c:	f04f 0b20 	mov.w	fp, #32
    bd40:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    bd44:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    bd48:	e004      	b.n	bd54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    bd4a:	46a3      	mov	fp, r4
    bd4c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    bd50:	f89c 4001 	ldrb.w	r4, [ip, #1]
    bd54:	4284      	cmp	r4, r0
    bd56:	d002      	beq.n	bd5e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    bd58:	2c20      	cmp	r4, #32
    bd5a:	d02b      	beq.n	bdb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    bd5c:	e7f5      	b.n	bd4a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    bd5e:	2c20      	cmp	r4, #32
    bd60:	d028      	beq.n	bdb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    bd62:	42a3      	cmp	r3, r4
    bd64:	d104      	bne.n	bd70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    bd66:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    bd6a:	7840      	ldrb	r0, [r0, #1]
    bd6c:	7008      	strb	r0, [r1, #0]
    bd6e:	e005      	b.n	bd7c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    bd70:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    bd74:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    bd78:	7840      	ldrb	r0, [r0, #1]
    bd7a:	7048      	strb	r0, [r1, #1]
    bd7c:	f1ba 0f00 	cmp.w	sl, #0
    bd80:	d011      	beq.n	bda6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    bd82:	b125      	cbz	r5, bd8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    bd84:	2100      	movs	r1, #0
    bd86:	f240 409c 	movw	r0, #1180	; 0x49c
    bd8a:	f3af 8000 	nop.w
    bd8e:	f89a 0000 	ldrb.w	r0, [sl]
    bd92:	42a0      	cmp	r0, r4
    bd94:	d107      	bne.n	bda6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    bd96:	b125      	cbz	r5, bda2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    bd98:	2100      	movs	r1, #0
    bd9a:	f240 409f 	movw	r0, #1183	; 0x49f
    bd9e:	f3af 8000 	nop.w
    bda2:	f88a b000 	strb.w	fp, [sl]
    bda6:	b15d      	cbz	r5, bdc0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    bda8:	2100      	movs	r1, #0
    bdaa:	f240 40a4 	movw	r0, #1188	; 0x4a4
    bdae:	f3af 8000 	nop.w
    bdb2:	e000      	b.n	bdb6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    bdb4:	b125      	cbz	r5, bdc0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    bdb6:	2100      	movs	r1, #0
    bdb8:	f640 30a5 	movw	r0, #2981	; 0xba5
    bdbc:	f3af 8000 	nop.w
    bdc0:	481a      	ldr	r0, [pc, #104]	; (be2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    bdc2:	2800      	cmp	r0, #0
    bdc4:	bf18      	it	ne
    bdc6:	f3af 8000 	nopne.w
    bdca:	f3ef 8410 	mrs	r4, PRIMASK
    bdce:	b672      	cpsid	i
    bdd0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    bdd4:	f88d 0000 	strb.w	r0, [sp]
    bdd8:	f89d 0000 	ldrb.w	r0, [sp]
    bddc:	b138      	cbz	r0, bdee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    bdde:	2d00      	cmp	r5, #0
    bde0:	bf1c      	itt	ne
    bde2:	2100      	movne	r1, #0
    bde4:	f640 30ab 	movwne	r0, #2987	; 0xbab
    bde8:	f43f af41 	beq.w	bc6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    bdec:	e784      	b.n	bcf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    bdee:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    bdf2:	20ff      	movs	r0, #255	; 0xff
    bdf4:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    bdf8:	b154      	cbz	r4, be10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    bdfa:	2d00      	cmp	r5, #0
    bdfc:	bf08      	it	eq
    bdfe:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be02:	2100      	movs	r1, #0
    be04:	f640 30b8 	movw	r0, #3000	; 0xbb8
    be08:	f3af 8000 	nop.w
    be0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be10:	4805      	ldr	r0, [pc, #20]	; (be28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    be12:	2800      	cmp	r0, #0
    be14:	bf18      	it	ne
    be16:	f3af 8000 	nopne.w
    be1a:	b662      	cpsie	i
    be1c:	e7ed      	b.n	bdfa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    be1e:	0000      	.short	0x0000
    be20:	200014a8 	.word	0x200014a8
	...

0000be30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    be30:	b570      	push	{r4, r5, r6, lr}
    be32:	460d      	mov	r5, r1
    be34:	4606      	mov	r6, r0
    be36:	f001 fa95 	bl	d364 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    be3a:	480d      	ldr	r0, [pc, #52]	; (be70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    be3c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    be40:	2400      	movs	r4, #0
    be42:	3880      	subs	r0, #128	; 0x80
    be44:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    be48:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    be4c:	b129      	cbz	r1, be5a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    be4e:	1c61      	adds	r1, r4, #1
    be50:	b2cc      	uxtb	r4, r1
    be52:	2c20      	cmp	r4, #32
    be54:	d3f8      	bcc.n	be48 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    be56:	2020      	movs	r0, #32
    be58:	bd70      	pop	{r4, r5, r6, pc}
    be5a:	4806      	ldr	r0, [pc, #24]	; (be74 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    be5c:	4621      	mov	r1, r4
    be5e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    be62:	e9c0 6500 	strd	r6, r5, [r0]
    be66:	2001      	movs	r0, #1
    be68:	f7fe fdae 	bl	a9c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    be6c:	4620      	mov	r0, r4
    be6e:	bd70      	pop	{r4, r5, r6, pc}
    be70:	200014a8 	.word	0x200014a8
    be74:	20001028 	.word	0x20001028

0000be78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    be78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be7c:	f000 fd48 	bl	c910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    be80:	4606      	mov	r6, r0
    be82:	460f      	mov	r7, r1
    be84:	f000 fe88 	bl	cb98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    be88:	4c65      	ldr	r4, [pc, #404]	; (c020 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    be8a:	6860      	ldr	r0, [r4, #4]
    be8c:	f1b0 3fff 	cmp.w	r0, #4294967295
    be90:	bf1c      	itt	ne
    be92:	f04f 30ff 	movne.w	r0, #4294967295
    be96:	6060      	strne	r0, [r4, #4]
    be98:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    be9c:	f8df b184 	ldr.w	fp, [pc, #388]	; c024 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    bea0:	2500      	movs	r5, #0
    bea2:	bb10      	cbnz	r0, beea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    bea4:	f44f 710c 	mov.w	r1, #560	; 0x230
    bea8:	6920      	ldr	r0, [r4, #16]
    beaa:	f001 fa47 	bl	d33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    beae:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    beb2:	68a1      	ldr	r1, [r4, #8]
    beb4:	1818      	adds	r0, r3, r0
    beb6:	eb45 0305 	adc.w	r3, r5, r5
    beba:	1809      	adds	r1, r1, r0
    bebc:	eb42 0003 	adc.w	r0, r2, r3
    bec0:	1a71      	subs	r1, r6, r1
    bec2:	eb77 0000 	sbcs.w	r0, r7, r0
    bec6:	d310      	bcc.n	beea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    bec8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    becc:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    bed0:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    bed4:	6840      	ldr	r0, [r0, #4]
    bed6:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    beda:	680a      	ldr	r2, [r1, #0]
    bedc:	2108      	movs	r1, #8
    bede:	4790      	blx	r2
    bee0:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    bee4:	2070      	movs	r0, #112	; 0x70
    bee6:	f001 fac7 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    beea:	7e60      	ldrb	r0, [r4, #25]
    beec:	b180      	cbz	r0, bf10 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    beee:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    bef2:	f88d 0000 	strb.w	r0, [sp]
    bef6:	f89d 0000 	ldrb.w	r0, [sp]
    befa:	b148      	cbz	r0, bf10 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    befc:	f000 fc7e 	bl	c7fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    bf00:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    bf04:	b150      	cbz	r0, bf1c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    bf06:	f240 31cd 	movw	r1, #973	; 0x3cd
    bf0a:	2070      	movs	r0, #112	; 0x70
    bf0c:	f001 fab4 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bf10:	1cf0      	adds	r0, r6, #3
    bf12:	f147 0100 	adc.w	r1, r7, #0
    bf16:	f000 fb4b 	bl	c5b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    bf1a:	e7f1      	b.n	bf00 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    bf1c:	2001      	movs	r0, #1
    bf1e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    bf22:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    bf26:	2820      	cmp	r0, #32
    bf28:	d020      	beq.n	bf6c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    bf2a:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    bf2e:	2020      	movs	r0, #32
    bf30:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    bf34:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    bf38:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    bf3c:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    bf40:	6025      	str	r5, [r4, #0]
    bf42:	f000 ff09 	bl	cd58 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    bf46:	f884 0020 	strb.w	r0, [r4, #32]
    bf4a:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    bf4e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    bf52:	eb00 0a04 	add.w	sl, r0, r4
    bf56:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    bf5a:	2820      	cmp	r0, #32
    bf5c:	d01c      	beq.n	bf98 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    bf5e:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    bf62:	f89b 001a 	ldrb.w	r0, [fp, #26]
    bf66:	2801      	cmp	r0, #1
    bf68:	d005      	beq.n	bf76 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    bf6a:	e015      	b.n	bf98 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    bf6c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    bf70:	2070      	movs	r0, #112	; 0x70
    bf72:	f001 fa81 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bf76:	2201      	movs	r2, #1
    bf78:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    bf7c:	4630      	mov	r0, r6
    bf7e:	4639      	mov	r1, r7
    bf80:	f7fe f88e 	bl	a0a0 <MPSL_IRQ_RADIO_Handler+0x3e4>
    bf84:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    bf88:	1a12      	subs	r2, r2, r0
    bf8a:	eb73 0201 	sbcs.w	r2, r3, r1
    bf8e:	bf24      	itt	cs
    bf90:	f10b 0208 	addcs.w	r2, fp, #8
    bf94:	e9c2 0100 	strdcs	r0, r1, [r2]
    bf98:	4641      	mov	r1, r8
    bf9a:	2001      	movs	r0, #1
    bf9c:	f7fe fd46 	bl	aa2c <MPSL_IRQ_RADIO_Handler+0xd70>
    bfa0:	0007      	movs	r7, r0
    bfa2:	d0f9      	beq.n	bf98 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    bfa4:	4820      	ldr	r0, [pc, #128]	; (c028 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    bfa6:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    bfaa:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    bfae:	2802      	cmp	r0, #2
    bfb0:	d104      	bne.n	bfbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    bfb2:	4642      	mov	r2, r8
    bfb4:	4649      	mov	r1, r9
    bfb6:	2006      	movs	r0, #6
    bfb8:	f7fe fd06 	bl	a9c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    bfbc:	20ff      	movs	r0, #255	; 0xff
    bfbe:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    bfc2:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    bfc6:	f8df 8064 	ldr.w	r8, [pc, #100]	; c02c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    bfca:	2820      	cmp	r0, #32
    bfcc:	bf1c      	itt	ne
    bfce:	f898 0001 	ldrbne.w	r0, [r8, #1]
    bfd2:	f001 fb23 	blne	d61c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bfd6:	f894 0020 	ldrb.w	r0, [r4, #32]
    bfda:	b128      	cbz	r0, bfe8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    bfdc:	f000 fe98 	bl	cd10 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    bfe0:	f884 5020 	strb.w	r5, [r4, #32]
    bfe4:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    bfe8:	2f02      	cmp	r7, #2
    bfea:	d00f      	beq.n	c00c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    bfec:	2f01      	cmp	r7, #1
    bfee:	bf18      	it	ne
    bff0:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bff4:	f04f 30ff 	mov.w	r0, #4294967295
    bff8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    bffc:	2900      	cmp	r1, #0
    bffe:	bf08      	it	eq
    c000:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c004:	b001      	add	sp, #4
    c006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c00a:	4708      	bx	r1
    c00c:	68a0      	ldr	r0, [r4, #8]
    c00e:	1b80      	subs	r0, r0, r6
    c010:	f005 fda9 	bl	11b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    c014:	f8d8 1004 	ldr.w	r1, [r8, #4]
    c018:	2900      	cmp	r1, #0
    c01a:	d1f3      	bne.n	c004 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    c01c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c020:	200014a8 	.word	0x200014a8
    c024:	20001028 	.word	0x20001028
    c028:	20001428 	.word	0x20001428
    c02c:	2000030c 	.word	0x2000030c

0000c030 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    c030:	b570      	push	{r4, r5, r6, lr}
    c032:	4c42      	ldr	r4, [pc, #264]	; (c13c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    c034:	4605      	mov	r5, r0
    c036:	b082      	sub	sp, #8
    c038:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    c03c:	2820      	cmp	r0, #32
    c03e:	d008      	beq.n	c052 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    c040:	6860      	ldr	r0, [r4, #4]
    c042:	f1b0 3fff 	cmp.w	r0, #4294967295
    c046:	d009      	beq.n	c05c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    c048:	f640 21b6 	movw	r1, #2742	; 0xab6
    c04c:	2070      	movs	r0, #112	; 0x70
    c04e:	f001 fa13 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c052:	f640 21b5 	movw	r1, #2741	; 0xab5
    c056:	2070      	movs	r0, #112	; 0x70
    c058:	f001 fa0e 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c05c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    c060:	4937      	ldr	r1, [pc, #220]	; (c140 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    c062:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    c066:	68b0      	ldr	r0, [r6, #8]
    c068:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c06c:	f005 fd7b 	bl	11b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    c070:	4602      	mov	r2, r0
    c072:	8af0      	ldrh	r0, [r6, #22]
    c074:	7d31      	ldrb	r1, [r6, #20]
    c076:	4b33      	ldr	r3, [pc, #204]	; (c144 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    c078:	4408      	add	r0, r1
    c07a:	1c40      	adds	r0, r0, #1
    c07c:	1811      	adds	r1, r2, r0
    c07e:	429a      	cmp	r2, r3
    c080:	d817      	bhi.n	c0b2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    c082:	4a31      	ldr	r2, [pc, #196]	; (c148 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    c084:	4290      	cmp	r0, r2
    c086:	dc1b      	bgt.n	c0c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    c088:	f1c2 0c00 	rsb	ip, r2, #0
    c08c:	4560      	cmp	r0, ip
    c08e:	db1e      	blt.n	c0ce <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    c090:	0056      	lsls	r6, r2, #1
    c092:	428e      	cmp	r6, r1
    c094:	bfdc      	itt	le
    c096:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    c09a:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    c09e:	dd05      	ble.n	c0ac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    c0a0:	2900      	cmp	r1, #0
    c0a2:	bfbc      	itt	lt
    c0a4:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    c0a8:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    c0ac:	1948      	adds	r0, r1, r5
    c0ae:	4299      	cmp	r1, r3
    c0b0:	d904      	bls.n	c0bc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    c0b2:	f240 517f 	movw	r1, #1407	; 0x57f
    c0b6:	2070      	movs	r0, #112	; 0x70
    c0b8:	f001 f9de 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c0bc:	4295      	cmp	r5, r2
    c0be:	dd04      	ble.n	c0ca <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    c0c0:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    c0c4:	2070      	movs	r0, #112	; 0x70
    c0c6:	f001 f9d7 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c0ca:	4565      	cmp	r5, ip
    c0cc:	da04      	bge.n	c0d8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    c0ce:	f240 5181 	movw	r1, #1409	; 0x581
    c0d2:	2070      	movs	r0, #112	; 0x70
    c0d4:	f001 f9d0 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c0d8:	4286      	cmp	r6, r0
    c0da:	bfdc      	itt	le
    c0dc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    c0e0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    c0e4:	dd05      	ble.n	c0f2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    c0e6:	2800      	cmp	r0, #0
    c0e8:	bfbc      	itt	lt
    c0ea:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    c0ee:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    c0f2:	aa01      	add	r2, sp, #4
    c0f4:	4669      	mov	r1, sp
    c0f6:	f000 f92b 	bl	c350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    c0fa:	f89d 0004 	ldrb.w	r0, [sp, #4]
    c0fe:	280f      	cmp	r0, #15
    c100:	bf8c      	ite	hi
    c102:	2001      	movhi	r0, #1
    c104:	2000      	movls	r0, #0
    c106:	9900      	ldr	r1, [sp, #0]
    c108:	4408      	add	r0, r1
    c10a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    c10e:	6061      	str	r1, [r4, #4]
    c110:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    c114:	f88d 0000 	strb.w	r0, [sp]
    c118:	f89d 0000 	ldrb.w	r0, [sp]
    c11c:	2800      	cmp	r0, #0
    c11e:	bf04      	itt	eq
    c120:	b002      	addeq	sp, #8
    c122:	bd70      	popeq	{r4, r5, r6, pc}
    c124:	2005      	movs	r0, #5
    c126:	f000 fc15 	bl	c954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    c12a:	2800      	cmp	r0, #0
    c12c:	bf1c      	itt	ne
    c12e:	b002      	addne	sp, #8
    c130:	bd70      	popne	{r4, r5, r6, pc}
    c132:	f640 21bd 	movw	r1, #2749	; 0xabd
    c136:	2070      	movs	r0, #112	; 0x70
    c138:	f001 f99e 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c13c:	200014a8 	.word	0x200014a8
    c140:	20001028 	.word	0x20001028
    c144:	1e847fff 	.word	0x1e847fff
    c148:	0f424000 	.word	0x0f424000

0000c14c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    c14c:	b570      	push	{r4, r5, r6, lr}
    c14e:	4c1e      	ldr	r4, [pc, #120]	; (c1c8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    c150:	2120      	movs	r1, #32
    c152:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    c156:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    c15a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    c15e:	2000      	movs	r0, #0
    c160:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    c164:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    c168:	1e42      	subs	r2, r0, #1
    c16a:	e9c4 0200 	strd	r0, r2, [r4]
    c16e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    c172:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    c176:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    c17a:	f884 0020 	strb.w	r0, [r4, #32]
    c17e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    c182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    c186:	1e41      	subs	r1, r0, #1
    c188:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    c18c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    c190:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    c194:	2210      	movs	r2, #16
    c196:	7088      	strb	r0, [r1, #2]
    c198:	f801 0f04 	strb.w	r0, [r1, #4]!
    c19c:	1e52      	subs	r2, r2, #1
    c19e:	d1fa      	bne.n	c196 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    c1a0:	f000 fde4 	bl	cd6c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    c1a4:	4d09      	ldr	r5, [pc, #36]	; (c1cc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    c1a6:	2601      	movs	r6, #1
    c1a8:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    c1ac:	20ff      	movs	r0, #255	; 0xff
    c1ae:	7028      	strb	r0, [r5, #0]
    c1b0:	4807      	ldr	r0, [pc, #28]	; (c1d0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    c1b2:	f001 fa15 	bl	d5e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    c1b6:	7068      	strb	r0, [r5, #1]
    c1b8:	f001 fa80 	bl	d6bc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    c1bc:	60a8      	str	r0, [r5, #8]
    c1be:	f000 fd67 	bl	cc90 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    c1c2:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    c1c6:	bd70      	pop	{r4, r5, r6, pc}
    c1c8:	200014a8 	.word	0x200014a8
    c1cc:	2000030c 	.word	0x2000030c
    c1d0:	0000a8f9 	.word	0x0000a8f9

0000c1d4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    c1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1d6:	4607      	mov	r7, r0
    c1d8:	b087      	sub	sp, #28
    c1da:	461d      	mov	r5, r3
    c1dc:	460e      	mov	r6, r1
    c1de:	4610      	mov	r0, r2
    c1e0:	f005 fcc1 	bl	11b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    c1e4:	4604      	mov	r4, r0
    c1e6:	a803      	add	r0, sp, #12
    c1e8:	9000      	str	r0, [sp, #0]
    c1ea:	ab04      	add	r3, sp, #16
    c1ec:	aa02      	add	r2, sp, #8
    c1ee:	4638      	mov	r0, r7
    c1f0:	4631      	mov	r1, r6
    c1f2:	f000 f853 	bl	c29c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    c1f6:	9902      	ldr	r1, [sp, #8]
    c1f8:	4a14      	ldr	r2, [pc, #80]	; (c24c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>)
    c1fa:	1a60      	subs	r0, r4, r1
    c1fc:	2300      	movs	r3, #0
    c1fe:	1a82      	subs	r2, r0, r2
    c200:	f173 0200 	sbcs.w	r2, r3, #0
    c204:	d318      	bcc.n	c238 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    c206:	f8df c044 	ldr.w	ip, [pc, #68]	; c24c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>
    c20a:	1b0a      	subs	r2, r1, r4
    c20c:	ebb2 0c0c 	subs.w	ip, r2, ip
    c210:	f173 0300 	sbcs.w	r3, r3, #0
    c214:	d310      	bcc.n	c238 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    c216:	4b0e      	ldr	r3, [pc, #56]	; (c250 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x7c>)
    c218:	4283      	cmp	r3, r0
    c21a:	bf3e      	ittt	cc
    c21c:	f5c1 2090 	rsbcc	r0, r1, #294912	; 0x48000
    c220:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    c224:	4420      	addcc	r0, r4
    c226:	d307      	bcc.n	c238 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    c228:	4293      	cmp	r3, r2
    c22a:	d209      	bcs.n	c240 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x6c>
    c22c:	f5c4 2090 	rsb	r0, r4, #294912	; 0x48000
    c230:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
    c234:	4408      	add	r0, r1
    c236:	4240      	negs	r0, r0
    c238:	300f      	adds	r0, #15
    c23a:	b007      	add	sp, #28
    c23c:	1a28      	subs	r0, r5, r0
    c23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c240:	f640 21d7 	movw	r1, #2775	; 0xad7
    c244:	2070      	movs	r0, #112	; 0x70
    c246:	f001 f917 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c24a:	0000      	.short	0x0000
    c24c:	0f424000 	.word	0x0f424000
    c250:	1e847fff 	.word	0x1e847fff

0000c254 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    c254:	0e03      	lsrs	r3, r0, #24
    c256:	b430      	push	{r4, r5}
    c258:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    c25c:	f8df c038 	ldr.w	ip, [pc, #56]	; c298 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    c260:	0e09      	lsrs	r1, r1, #24
    c262:	fba3 250c 	umull	r2, r5, r3, ip
    c266:	fb01 510c 	mla	r1, r1, ip, r5
    c26a:	2400      	movs	r4, #0
    c26c:	fb03 1104 	mla	r1, r3, r4, r1
    c270:	f647 73ff 	movw	r3, #32767	; 0x7fff
    c274:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    c278:	f643 5c09 	movw	ip, #15625	; 0x3d09
    c27c:	fb13 f30c 	smulbb	r3, r3, ip
    c280:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c284:	fb10 f00c 	smulbb	r0, r0, ip
    c288:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c28c:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    c290:	1880      	adds	r0, r0, r2
    c292:	4161      	adcs	r1, r4
    c294:	bc30      	pop	{r4, r5}
    c296:	4770      	bx	lr
    c298:	1e848000 	.word	0x1e848000

0000c29c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    c29c:	b570      	push	{r4, r5, r6, lr}
    c29e:	b084      	sub	sp, #16
    c2a0:	4615      	mov	r5, r2
    c2a2:	aa01      	add	r2, sp, #4
    c2a4:	461c      	mov	r4, r3
    c2a6:	9200      	str	r2, [sp, #0]
    c2a8:	9e08      	ldr	r6, [sp, #32]
    c2aa:	ab02      	add	r3, sp, #8
    c2ac:	4a17      	ldr	r2, [pc, #92]	; (c30c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    c2ae:	f005 fddb 	bl	11e68 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    c2b2:	9801      	ldr	r0, [sp, #4]
    c2b4:	f248 6237 	movw	r2, #34359	; 0x8637
    c2b8:	0b41      	lsrs	r1, r0, #13
    c2ba:	4351      	muls	r1, r2
    c2bc:	0c09      	lsrs	r1, r1, #16
    c2be:	4a14      	ldr	r2, [pc, #80]	; (c310 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    c2c0:	024b      	lsls	r3, r1, #9
    c2c2:	fb01 0102 	mla	r1, r1, r2, r0
    c2c6:	4813      	ldr	r0, [pc, #76]	; (c314 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    c2c8:	4348      	muls	r0, r1
    c2ca:	0d42      	lsrs	r2, r0, #21
    c2cc:	1898      	adds	r0, r3, r2
    c2ce:	f643 5309 	movw	r3, #15625	; 0x3d09
    c2d2:	fb12 f303 	smulbb	r3, r2, r3
    c2d6:	f503 7280 	add.w	r2, r3, #256	; 0x100
    c2da:	f643 5c08 	movw	ip, #15624	; 0x3d08
    c2de:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    c2e2:	4463      	add	r3, ip
    c2e4:	b2d2      	uxtb	r2, r2
    c2e6:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    c2ea:	bf84      	itt	hi
    c2ec:	2200      	movhi	r2, #0
    c2ee:	1c40      	addhi	r0, r0, #1
    c2f0:	7032      	strb	r2, [r6, #0]
    c2f2:	9b02      	ldr	r3, [sp, #8]
    c2f4:	0a19      	lsrs	r1, r3, #8
    c2f6:	061b      	lsls	r3, r3, #24
    c2f8:	1818      	adds	r0, r3, r0
    c2fa:	f141 0100 	adc.w	r1, r1, #0
    c2fe:	e9c4 0100 	strd	r0, r1, [r4]
    c302:	9801      	ldr	r0, [sp, #4]
    c304:	6028      	str	r0, [r5, #0]
    c306:	b004      	add	sp, #16
    c308:	bd70      	pop	{r4, r5, r6, pc}
    c30a:	0000      	.short	0x0000
    c30c:	1e848000 	.word	0x1e848000
    c310:	ffffc2f7 	.word	0xffffc2f7
    c314:	00010c6f 	.word	0x00010c6f

0000c318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    c318:	0b41      	lsrs	r1, r0, #13
    c31a:	f248 6237 	movw	r2, #34359	; 0x8637
    c31e:	4351      	muls	r1, r2
    c320:	0c0a      	lsrs	r2, r1, #16
    c322:	4b09      	ldr	r3, [pc, #36]	; (c348 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    c324:	0251      	lsls	r1, r2, #9
    c326:	fb02 0203 	mla	r2, r2, r3, r0
    c32a:	4808      	ldr	r0, [pc, #32]	; (c34c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    c32c:	4350      	muls	r0, r2
    c32e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    c332:	306e      	adds	r0, #110	; 0x6e
    c334:	0d40      	lsrs	r0, r0, #21
    c336:	425b      	negs	r3, r3
    c338:	fb10 f303 	smulbb	r3, r0, r3
    c33c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    c340:	bf88      	it	hi
    c342:	1c49      	addhi	r1, r1, #1
    c344:	4408      	add	r0, r1
    c346:	4770      	bx	lr
    c348:	ffffc2f7 	.word	0xffffc2f7
    c34c:	00010c6f 	.word	0x00010c6f

0000c350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    c350:	0b43      	lsrs	r3, r0, #13
    c352:	f248 6c37 	movw	ip, #34359	; 0x8637
    c356:	fb03 f30c 	mul.w	r3, r3, ip
    c35a:	b430      	push	{r4, r5}
    c35c:	0c1b      	lsrs	r3, r3, #16
    c35e:	f8df c044 	ldr.w	ip, [pc, #68]	; c3a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    c362:	025c      	lsls	r4, r3, #9
    c364:	fb03 030c 	mla	r3, r3, ip, r0
    c368:	480f      	ldr	r0, [pc, #60]	; (c3a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    c36a:	4358      	muls	r0, r3
    c36c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    c370:	eb04 000c 	add.w	r0, r4, ip
    c374:	f643 5409 	movw	r4, #15625	; 0x3d09
    c378:	fb1c f404 	smulbb	r4, ip, r4
    c37c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    c380:	f643 5508 	movw	r5, #15624	; 0x3d08
    c384:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    c388:	442c      	add	r4, r5
    c38a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    c38e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    c392:	bf84      	itt	hi
    c394:	f04f 0c00 	movhi.w	ip, #0
    c398:	1c40      	addhi	r0, r0, #1
    c39a:	6008      	str	r0, [r1, #0]
    c39c:	f882 c000 	strb.w	ip, [r2]
    c3a0:	bc30      	pop	{r4, r5}
    c3a2:	4770      	bx	lr
    c3a4:	ffffc2f7 	.word	0xffffc2f7
    c3a8:	00010c6f 	.word	0x00010c6f

0000c3ac <MPSL_IRQ_RTC0_Handler>:
    c3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3b0:	2400      	movs	r4, #0
    c3b2:	f8df 9080 	ldr.w	r9, [pc, #128]	; c434 <MPSL_IRQ_RTC0_Handler+0x88>
    c3b6:	4d20      	ldr	r5, [pc, #128]	; (c438 <MPSL_IRQ_RTC0_Handler+0x8c>)
    c3b8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    c3bc:	f44f 78a0 	mov.w	r8, #320	; 0x140
    c3c0:	ea4f 0604 	mov.w	r6, r4
    c3c4:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    c3c8:	fa07 f004 	lsl.w	r0, r7, r4
    c3cc:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    c3d0:	4202      	tst	r2, r0
    c3d2:	d01a      	beq.n	c40a <MPSL_IRQ_RTC0_Handler+0x5e>
    c3d4:	4a18      	ldr	r2, [pc, #96]	; (c438 <MPSL_IRQ_RTC0_Handler+0x8c>)
    c3d6:	5852      	ldr	r2, [r2, r1]
    c3d8:	b1ba      	cbz	r2, c40a <MPSL_IRQ_RTC0_Handler+0x5e>
    c3da:	506e      	str	r6, [r5, r1]
    c3dc:	00a1      	lsls	r1, r4, #2
    c3de:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    c3e2:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    c3e6:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    c3ea:	f8d9 2000 	ldr.w	r2, [r9]
    c3ee:	1a89      	subs	r1, r1, r2
    c3f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    c3f4:	2902      	cmp	r1, #2
    c3f6:	d302      	bcc.n	c3fe <MPSL_IRQ_RTC0_Handler+0x52>
    c3f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    c3fc:	d905      	bls.n	c40a <MPSL_IRQ_RTC0_Handler+0x5e>
    c3fe:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c402:	1d20      	adds	r0, r4, #4
    c404:	b2c0      	uxtb	r0, r0
    c406:	f7fe fd3f 	bl	ae88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    c40a:	1c60      	adds	r0, r4, #1
    c40c:	b2c4      	uxtb	r4, r0
    c40e:	2c03      	cmp	r4, #3
    c410:	d3d8      	bcc.n	c3c4 <MPSL_IRQ_RTC0_Handler+0x18>
    c412:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    c416:	b128      	cbz	r0, c424 <MPSL_IRQ_RTC0_Handler+0x78>
    c418:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    c41c:	4807      	ldr	r0, [pc, #28]	; (c43c <MPSL_IRQ_RTC0_Handler+0x90>)
    c41e:	6881      	ldr	r1, [r0, #8]
    c420:	1c49      	adds	r1, r1, #1
    c422:	6081      	str	r1, [r0, #8]
    c424:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c428:	f44f 6000 	mov.w	r0, #2048	; 0x800
    c42c:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    c430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c434:	4000b504 	.word	0x4000b504
    c438:	4000b000 	.word	0x4000b000
    c43c:	20000028 	.word	0x20000028

0000c440 <MPSL_IRQ_TIMER0_Handler>:
    c440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c444:	4d38      	ldr	r5, [pc, #224]	; (c528 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    c446:	7828      	ldrb	r0, [r5, #0]
    c448:	2804      	cmp	r0, #4
    c44a:	d068      	beq.n	c51e <MPSL_IRQ_TIMER0_Handler+0xde>
    c44c:	1ca8      	adds	r0, r5, #2
    c44e:	2201      	movs	r2, #1
    c450:	7801      	ldrb	r1, [r0, #0]
    c452:	b159      	cbz	r1, c46c <MPSL_IRQ_TIMER0_Handler+0x2c>
    c454:	2901      	cmp	r1, #1
    c456:	bf08      	it	eq
    c458:	706a      	strbeq	r2, [r5, #1]
    c45a:	d002      	beq.n	c462 <MPSL_IRQ_TIMER0_Handler+0x22>
    c45c:	7869      	ldrb	r1, [r5, #1]
    c45e:	2900      	cmp	r1, #0
    c460:	d058      	beq.n	c514 <MPSL_IRQ_TIMER0_Handler+0xd4>
    c462:	2102      	movs	r1, #2
    c464:	7001      	strb	r1, [r0, #0]
    c466:	7840      	ldrb	r0, [r0, #1]
    c468:	f000 fb2e 	bl	cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    c46c:	4c2f      	ldr	r4, [pc, #188]	; (c52c <MPSL_IRQ_TIMER0_Handler+0xec>)
    c46e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    c472:	f04f 0800 	mov.w	r8, #0
    c476:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    c47a:	f44f 7780 	mov.w	r7, #256	; 0x100
    c47e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    c482:	d00a      	beq.n	c49a <MPSL_IRQ_TIMER0_Handler+0x5a>
    c484:	482a      	ldr	r0, [pc, #168]	; (c530 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    c486:	6800      	ldr	r0, [r0, #0]
    c488:	b138      	cbz	r0, c49a <MPSL_IRQ_TIMER0_Handler+0x5a>
    c48a:	2003      	movs	r0, #3
    c48c:	f000 fb1c 	bl	cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    c490:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    c494:	2003      	movs	r0, #3
    c496:	f7fe fcf7 	bl	ae88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    c49a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    c49e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    c4a2:	d00a      	beq.n	c4ba <MPSL_IRQ_TIMER0_Handler+0x7a>
    c4a4:	4823      	ldr	r0, [pc, #140]	; (c534 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    c4a6:	6800      	ldr	r0, [r0, #0]
    c4a8:	b138      	cbz	r0, c4ba <MPSL_IRQ_TIMER0_Handler+0x7a>
    c4aa:	2002      	movs	r0, #2
    c4ac:	f000 fb0c 	bl	cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    c4b0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    c4b4:	2002      	movs	r0, #2
    c4b6:	f7fe fce7 	bl	ae88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    c4ba:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    c4be:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    c4c2:	d00a      	beq.n	c4da <MPSL_IRQ_TIMER0_Handler+0x9a>
    c4c4:	481c      	ldr	r0, [pc, #112]	; (c538 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    c4c6:	6800      	ldr	r0, [r0, #0]
    c4c8:	b138      	cbz	r0, c4da <MPSL_IRQ_TIMER0_Handler+0x9a>
    c4ca:	2001      	movs	r0, #1
    c4cc:	f000 fafc 	bl	cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    c4d0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    c4d4:	2001      	movs	r0, #1
    c4d6:	f7fe fcd7 	bl	ae88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    c4da:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    c4de:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    c4e2:	bf08      	it	eq
    c4e4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4e8:	4814      	ldr	r0, [pc, #80]	; (c53c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    c4ea:	6800      	ldr	r0, [r0, #0]
    c4ec:	2800      	cmp	r0, #0
    c4ee:	bf08      	it	eq
    c4f0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4f4:	2000      	movs	r0, #0
    c4f6:	f000 fae7 	bl	cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    c4fa:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    c4fe:	2004      	movs	r0, #4
    c500:	7028      	strb	r0, [r5, #0]
    c502:	f8c5 8004 	str.w	r8, [r5, #4]
    c506:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    c50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c50e:	2000      	movs	r0, #0
    c510:	f7fe bcba 	b.w	ae88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    c514:	f240 5169 	movw	r1, #1385	; 0x569
    c518:	206c      	movs	r0, #108	; 0x6c
    c51a:	f000 ffad 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c522:	2007      	movs	r0, #7
    c524:	f7fe bcb0 	b.w	ae88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    c528:	20000028 	.word	0x20000028
    c52c:	40008000 	.word	0x40008000
    c530:	4000814c 	.word	0x4000814c
    c534:	40008148 	.word	0x40008148
    c538:	40008144 	.word	0x40008144
    c53c:	40008140 	.word	0x40008140
    c540:	2201      	movs	r2, #1
    c542:	0211      	lsls	r1, r2, #8
    c544:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c548:	2000      	movs	r0, #0
    c54a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    c54e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    c552:	f3bf 8f4f 	dsb	sy
    c556:	f3bf 8f6f 	isb	sy
    c55a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    c55e:	490e      	ldr	r1, [pc, #56]	; (c598 <MPSL_IRQ_TIMER0_Handler+0x158>)
    c560:	f841 2f04 	str.w	r2, [r1, #4]!
    c564:	1e43      	subs	r3, r0, #1
    c566:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    c56a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    c56e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    c572:	4b0a      	ldr	r3, [pc, #40]	; (c59c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    c574:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    c578:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    c57c:	1d1b      	adds	r3, r3, #4
    c57e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    c582:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    c586:	1d1b      	adds	r3, r3, #4
    c588:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    c58c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    c590:	60ca      	str	r2, [r1, #12]
    c592:	4903      	ldr	r1, [pc, #12]	; (c5a0 <MPSL_IRQ_TIMER0_Handler+0x160>)
    c594:	7048      	strb	r0, [r1, #1]
    c596:	4770      	bx	lr
    c598:	40008000 	.word	0x40008000
    c59c:	40008004 	.word	0x40008004
    c5a0:	20000028 	.word	0x20000028

0000c5a4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    c5a4:	4801      	ldr	r0, [pc, #4]	; (c5ac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    c5a6:	6800      	ldr	r0, [r0, #0]
    c5a8:	4770      	bx	lr
    c5aa:	0000      	.short	0x0000
    c5ac:	4000b504 	.word	0x4000b504

0000c5b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    c5b0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    c5b4:	f8df 8130 	ldr.w	r8, [pc, #304]	; c6e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    c5b8:	4604      	mov	r4, r0
    c5ba:	f1a8 0702 	sub.w	r7, r8, #2
    c5be:	460e      	mov	r6, r1
    c5c0:	f898 c000 	ldrb.w	ip, [r8]
    c5c4:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    c5c8:	f1bc 0f01 	cmp.w	ip, #1
    c5cc:	d106      	bne.n	c5dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    c5ce:	ea81 0204 	eor.w	r2, r1, r4
    c5d2:	4070      	eors	r0, r6
    c5d4:	4310      	orrs	r0, r2
    c5d6:	bf08      	it	eq
    c5d8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    c5dc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c5e0:	4a42      	ldr	r2, [pc, #264]	; (c6ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    c5e2:	6010      	str	r0, [r2, #0]
    c5e4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    c5e8:	f1bc 0f00 	cmp.w	ip, #0
    c5ec:	bf07      	ittee	eq
    c5ee:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    c5f2:	2200      	moveq	r2, #0
    c5f4:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    c5f8:	2201      	movne	r2, #1
    c5fa:	483d      	ldr	r0, [pc, #244]	; (c6f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    c5fc:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    c600:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    c604:	2500      	movs	r5, #0
    c606:	f44f 79a0 	mov.w	r9, #320	; 0x140
    c60a:	2a02      	cmp	r2, #2
    c60c:	d207      	bcs.n	c61e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    c60e:	bf00      	nop
    c610:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    c614:	50c5      	str	r5, [r0, r3]
    c616:	1c52      	adds	r2, r2, #1
    c618:	b2d2      	uxtb	r2, r2
    c61a:	2a02      	cmp	r2, #2
    c61c:	d3f8      	bcc.n	c610 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    c61e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    c622:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    c626:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    c62a:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    c62e:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    c632:	4a30      	ldr	r2, [pc, #192]	; (c6f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    c634:	f8d2 9000 	ldr.w	r9, [r2]
    c638:	eba3 0909 	sub.w	r9, r3, r9
    c63c:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    c640:	f04f 0901 	mov.w	r9, #1
    c644:	f1ba 0f02 	cmp.w	sl, #2
    c648:	d32e      	bcc.n	c6a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    c64a:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    c64e:	d82b      	bhi.n	c6a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    c650:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    c654:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    c658:	f1bc 0f00 	cmp.w	ip, #0
    c65c:	d005      	beq.n	c66a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    c65e:	6810      	ldr	r0, [r2, #0]
    c660:	1a08      	subs	r0, r1, r0
    c662:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c666:	2802      	cmp	r0, #2
    c668:	d3f9      	bcc.n	c65e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    c66a:	f8c7 9004 	str.w	r9, [r7, #4]
    c66e:	703d      	strb	r5, [r7, #0]
    c670:	f7ff ff66 	bl	c540 <MPSL_IRQ_TIMER0_Handler+0x100>
    c674:	4820      	ldr	r0, [pc, #128]	; (c6f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    c676:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    c67a:	f365 0101 	bfi	r1, r5, #0, #2
    c67e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    c682:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    c686:	2102      	movs	r1, #2
    c688:	f361 0201 	bfi	r2, r1, #0, #2
    c68c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    c690:	2110      	movs	r1, #16
    c692:	fa91 f1a1 	rbit	r1, r1
    c696:	fab1 f181 	clz	r1, r1
    c69a:	2909      	cmp	r1, #9
    c69c:	d909      	bls.n	c6b2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    c69e:	f240 3155 	movw	r1, #853	; 0x355
    c6a2:	a016      	add	r0, pc, #88	; (adr r0, c6fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    c6a4:	f000 febc 	bl	d420 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c6a8:	f240 31b2 	movw	r1, #946	; 0x3b2
    c6ac:	206c      	movs	r0, #108	; 0x6c
    c6ae:	f000 fee3 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c6b2:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    c6b6:	f8c0 900c 	str.w	r9, [r0, #12]
    c6ba:	6879      	ldr	r1, [r7, #4]
    c6bc:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c6c0:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    c6c4:	f44f 7180 	mov.w	r1, #256	; 0x100
    c6c8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c6cc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c6d0:	490d      	ldr	r1, [pc, #52]	; (c708 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    c6d2:	0480      	lsls	r0, r0, #18
    c6d4:	6008      	str	r0, [r1, #0]
    c6d6:	e9c7 4604 	strd	r4, r6, [r7, #16]
    c6da:	2004      	movs	r0, #4
    c6dc:	f888 0001 	strb.w	r0, [r8, #1]
    c6e0:	f888 9000 	strb.w	r9, [r8]
    c6e4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    c6e8:	2000002a 	.word	0x2000002a
    c6ec:	4001f508 	.word	0x4001f508
    c6f0:	4000b000 	.word	0x4000b000
    c6f4:	4000b504 	.word	0x4000b504
    c6f8:	40008000 	.word	0x40008000
    c6fc:	5f66726e 	.word	0x5f66726e
    c700:	656d6974 	.word	0x656d6974
    c704:	00682e72 	.word	0x00682e72
    c708:	4001f504 	.word	0x4001f504

0000c70c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    c70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c710:	4c31      	ldr	r4, [pc, #196]	; (c7d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    c712:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    c716:	ea82 0c00 	eor.w	ip, r2, r0
    c71a:	404b      	eors	r3, r1
    c71c:	ea5c 0303 	orrs.w	r3, ip, r3
    c720:	bf14      	ite	ne
    c722:	2301      	movne	r3, #1
    c724:	2300      	moveq	r3, #0
    c726:	f8df c0b4 	ldr.w	ip, [pc, #180]	; c7dc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    c72a:	f89c 8000 	ldrb.w	r8, [ip]
    c72e:	f1b8 0f02 	cmp.w	r8, #2
    c732:	d002      	beq.n	c73a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    c734:	2b00      	cmp	r3, #0
    c736:	d03f      	beq.n	c7b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    c738:	e003      	b.n	c742 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    c73a:	2b00      	cmp	r3, #0
    c73c:	bf08      	it	eq
    c73e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c742:	7863      	ldrb	r3, [r4, #1]
    c744:	b3bb      	cbz	r3, c7b6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    c746:	4d26      	ldr	r5, [pc, #152]	; (c7e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    c748:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    c74c:	602b      	str	r3, [r5, #0]
    c74e:	4e25      	ldr	r6, [pc, #148]	; (c7e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    c750:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    c754:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    c758:	462f      	mov	r7, r5
    c75a:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    c75e:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    c762:	2500      	movs	r5, #0
    c764:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    c768:	4d1f      	ldr	r5, [pc, #124]	; (c7e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    c76a:	f8d5 9000 	ldr.w	r9, [r5]
    c76e:	eba3 0909 	sub.w	r9, r3, r9
    c772:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    c776:	f1b9 0f02 	cmp.w	r9, #2
    c77a:	d327      	bcc.n	c7cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    c77c:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    c780:	d824      	bhi.n	c7cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    c782:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    c786:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    c78a:	f1b8 0f00 	cmp.w	r8, #0
    c78e:	d005      	beq.n	c79c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    c790:	682b      	ldr	r3, [r5, #0]
    c792:	1ad3      	subs	r3, r2, r3
    c794:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c798:	2b02      	cmp	r3, #2
    c79a:	d3f9      	bcc.n	c790 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    c79c:	4d13      	ldr	r5, [pc, #76]	; (c7ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    c79e:	2202      	movs	r2, #2
    c7a0:	0753      	lsls	r3, r2, #29
    c7a2:	602b      	str	r3, [r5, #0]
    c7a4:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c7a8:	2004      	movs	r0, #4
    c7aa:	f88c 0001 	strb.w	r0, [ip, #1]
    c7ae:	f88c 2000 	strb.w	r2, [ip]
    c7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7b6:	e004      	b.n	c7c2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    c7b8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    c7bc:	206c      	movs	r0, #108	; 0x6c
    c7be:	f000 fe5b 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c7c2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    c7c6:	206c      	movs	r0, #108	; 0x6c
    c7c8:	f000 fe56 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c7cc:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    c7d0:	206c      	movs	r0, #108	; 0x6c
    c7d2:	f000 fe51 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c7d6:	0000      	.short	0x0000
    c7d8:	20000028 	.word	0x20000028
    c7dc:	2000002a 	.word	0x2000002a
    c7e0:	4001f508 	.word	0x4001f508
    c7e4:	4000b000 	.word	0x4000b000
    c7e8:	4000b504 	.word	0x4000b504
    c7ec:	4001f504 	.word	0x4001f504

0000c7f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    c7f0:	4901      	ldr	r1, [pc, #4]	; (c7f8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    c7f2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    c7f6:	4770      	bx	lr
    c7f8:	20000028 	.word	0x20000028

0000c7fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    c7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c800:	f8df c0f4 	ldr.w	ip, [pc, #244]	; c8f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    c804:	f89c 4000 	ldrb.w	r4, [ip]
    c808:	2c00      	cmp	r4, #0
    c80a:	bf07      	ittee	eq
    c80c:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    c810:	2100      	moveq	r1, #0
    c812:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    c816:	2101      	movne	r1, #1
    c818:	4838      	ldr	r0, [pc, #224]	; (c8fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    c81a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    c81e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    c822:	2300      	movs	r3, #0
    c824:	2902      	cmp	r1, #2
    c826:	bf38      	it	cc
    c828:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    c82c:	d207      	bcs.n	c83e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    c82e:	bf00      	nop
    c830:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    c834:	5083      	str	r3, [r0, r2]
    c836:	1c49      	adds	r1, r1, #1
    c838:	b2c9      	uxtb	r1, r1
    c83a:	2902      	cmp	r1, #2
    c83c:	d3f8      	bcc.n	c830 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    c83e:	2c02      	cmp	r4, #2
    c840:	d004      	beq.n	c84c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    c842:	f240 31db 	movw	r1, #987	; 0x3db
    c846:	206c      	movs	r0, #108	; 0x6c
    c848:	f000 fe16 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c84c:	f3ef 8210 	mrs	r2, PRIMASK
    c850:	b672      	cpsid	i
    c852:	4c2b      	ldr	r4, [pc, #172]	; (c900 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    c854:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    c858:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    c85c:	b12d      	cbz	r5, c86a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    c85e:	68a1      	ldr	r1, [r4, #8]
    c860:	1c49      	adds	r1, r1, #1
    c862:	60a1      	str	r1, [r4, #8]
    c864:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    c868:	e7f4      	b.n	c854 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    c86a:	68a0      	ldr	r0, [r4, #8]
    c86c:	b902      	cbnz	r2, c870 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    c86e:	b662      	cpsie	i
    c870:	0a02      	lsrs	r2, r0, #8
    c872:	0600      	lsls	r0, r0, #24
    c874:	1840      	adds	r0, r0, r1
    c876:	eb42 0103 	adc.w	r1, r2, r3
    c87a:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    c87e:	1cc0      	adds	r0, r0, #3
    c880:	f141 0100 	adc.w	r1, r1, #0
    c884:	4f1f      	ldr	r7, [pc, #124]	; (c904 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    c886:	2601      	movs	r6, #1
    c888:	4d1f      	ldr	r5, [pc, #124]	; (c908 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    c88a:	ea80 0902 	eor.w	r9, r0, r2
    c88e:	ea81 0808 	eor.w	r8, r1, r8
    c892:	ea59 0808 	orrs.w	r8, r9, r8
    c896:	d00e      	beq.n	c8b6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    c898:	f8d7 8000 	ldr.w	r8, [r7]
    c89c:	eba2 0808 	sub.w	r8, r2, r8
    c8a0:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    c8a4:	f1b8 0f04 	cmp.w	r8, #4
    c8a8:	d305      	bcc.n	c8b6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    c8aa:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    c8ae:	d802      	bhi.n	c8b6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    c8b0:	f7ff fe7e 	bl	c5b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    c8b4:	e01b      	b.n	c8ee <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    c8b6:	6838      	ldr	r0, [r7, #0]
    c8b8:	1a10      	subs	r0, r2, r0
    c8ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c8be:	2802      	cmp	r0, #2
    c8c0:	d313      	bcc.n	c8ea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    c8c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    c8c6:	d810      	bhi.n	c8ea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    c8c8:	4910      	ldr	r1, [pc, #64]	; (c90c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    c8ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c8ce:	6008      	str	r0, [r1, #0]
    c8d0:	6066      	str	r6, [r4, #4]
    c8d2:	7023      	strb	r3, [r4, #0]
    c8d4:	606e      	str	r6, [r5, #4]
    c8d6:	60ee      	str	r6, [r5, #12]
    c8d8:	0040      	lsls	r0, r0, #1
    c8da:	1f09      	subs	r1, r1, #4
    c8dc:	6008      	str	r0, [r1, #0]
    c8de:	2004      	movs	r0, #4
    c8e0:	f88c 0001 	strb.w	r0, [ip, #1]
    c8e4:	f88c 6000 	strb.w	r6, [ip]
    c8e8:	e001      	b.n	c8ee <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    c8ea:	6066      	str	r6, [r4, #4]
    c8ec:	7023      	strb	r3, [r4, #0]
    c8ee:	6860      	ldr	r0, [r4, #4]
    c8f0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    c8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c8f8:	2000002a 	.word	0x2000002a
    c8fc:	4000b000 	.word	0x4000b000
    c900:	20000028 	.word	0x20000028
    c904:	4000b504 	.word	0x4000b504
    c908:	40008000 	.word	0x40008000
    c90c:	4001f508 	.word	0x4001f508

0000c910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    c910:	b410      	push	{r4}
    c912:	f3ef 8410 	mrs	r4, PRIMASK
    c916:	b672      	cpsid	i
    c918:	4a0c      	ldr	r2, [pc, #48]	; (c94c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    c91a:	490d      	ldr	r1, [pc, #52]	; (c950 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    c91c:	f04f 0c00 	mov.w	ip, #0
    c920:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    c924:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    c928:	b12b      	cbz	r3, c936 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    c92a:	6888      	ldr	r0, [r1, #8]
    c92c:	1c40      	adds	r0, r0, #1
    c92e:	6088      	str	r0, [r1, #8]
    c930:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    c934:	e7f4      	b.n	c920 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    c936:	6889      	ldr	r1, [r1, #8]
    c938:	b904      	cbnz	r4, c93c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    c93a:	b662      	cpsie	i
    c93c:	0a0a      	lsrs	r2, r1, #8
    c93e:	0609      	lsls	r1, r1, #24
    c940:	1808      	adds	r0, r1, r0
    c942:	bc10      	pop	{r4}
    c944:	eb42 010c 	adc.w	r1, r2, ip
    c948:	4770      	bx	lr
    c94a:	0000      	.short	0x0000
    c94c:	4000b000 	.word	0x4000b000
    c950:	20000028 	.word	0x20000028

0000c954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    c954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c958:	4a56      	ldr	r2, [pc, #344]	; (cab4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    c95a:	2501      	movs	r5, #1
    c95c:	2400      	movs	r4, #0
    c95e:	f892 c000 	ldrb.w	ip, [r2]
    c962:	7852      	ldrb	r2, [r2, #1]
    c964:	f44f 76a0 	mov.w	r6, #320	; 0x140
    c968:	2807      	cmp	r0, #7
    c96a:	d27d      	bcs.n	ca68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    c96c:	e8df f000 	tbb	[pc, r0]
    c970:	04040404 	.word	0x04040404
    c974:	00606060 	.word	0x00606060
    c978:	4b4f      	ldr	r3, [pc, #316]	; (cab8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    c97a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    c97e:	43ff      	mvns	r7, r7
    c980:	ea77 0708 	orns	r7, r7, r8
    c984:	bf04      	itt	eq
    c986:	785b      	ldrbeq	r3, [r3, #1]
    c988:	2b00      	cmpeq	r3, #0
    c98a:	d003      	beq.n	c994 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    c98c:	f1bc 0f02 	cmp.w	ip, #2
    c990:	d005      	beq.n	c99e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    c992:	e026      	b.n	c9e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    c994:	f44f 6186 	mov.w	r1, #1072	; 0x430
    c998:	206c      	movs	r0, #108	; 0x6c
    c99a:	f000 fd6d 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c99e:	1f13      	subs	r3, r2, #4
    c9a0:	b2db      	uxtb	r3, r3
    c9a2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    c9a6:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    c9aa:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    c9ae:	2300      	movs	r3, #0
    c9b0:	f1bc 0f01 	cmp.w	ip, #1
    c9b4:	d003      	beq.n	c9be <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    c9b6:	f1bc 0f02 	cmp.w	ip, #2
    c9ba:	d008      	beq.n	c9ce <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    c9bc:	e00e      	b.n	c9dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    c9be:	2a04      	cmp	r2, #4
    c9c0:	bf24      	itt	cs
    c9c2:	6837      	ldrcs	r7, [r6, #0]
    c9c4:	2f00      	cmpcs	r7, #0
    c9c6:	bf08      	it	eq
    c9c8:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    c9cc:	e006      	b.n	c9dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    c9ce:	2a04      	cmp	r2, #4
    c9d0:	bf24      	itt	cs
    c9d2:	6837      	ldrcs	r7, [r6, #0]
    c9d4:	2f00      	cmpcs	r7, #0
    c9d6:	bf08      	it	eq
    c9d8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    c9dc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    c9e0:	d1e5      	bne.n	c9ae <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    c9e2:	4b36      	ldr	r3, [pc, #216]	; (cabc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    c9e4:	f100 0210 	add.w	r2, r0, #16
    c9e8:	fa05 f202 	lsl.w	r2, r5, r2
    c9ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    c9f0:	f04f 0c40 	mov.w	ip, #64	; 0x40
    c9f4:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    c9f8:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    c9fc:	449c      	add	ip, r3
    c9fe:	f8cc 5000 	str.w	r5, [ip]
    ca02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    ca06:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    ca0a:	eba1 0c0c 	sub.w	ip, r1, ip
    ca0e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    ca12:	f1bc 0f03 	cmp.w	ip, #3
    ca16:	bf3e      	ittt	cc
    ca18:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    ca1c:	2000      	movcc	r0, #0
    ca1e:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca22:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    ca26:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    ca2a:	2001      	movs	r0, #1
    ca2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca30:	f1bc 0f00 	cmp.w	ip, #0
    ca34:	d006      	beq.n	ca44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    ca36:	4282      	cmp	r2, r0
    ca38:	d104      	bne.n	ca44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    ca3a:	f44f 618a 	mov.w	r1, #1104	; 0x450
    ca3e:	206c      	movs	r0, #108	; 0x6c
    ca40:	f000 fd1a 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ca44:	1f00      	subs	r0, r0, #4
    ca46:	b2c2      	uxtb	r2, r0
    ca48:	2a03      	cmp	r2, #3
    ca4a:	d304      	bcc.n	ca56 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    ca4c:	f44f 7127 	mov.w	r1, #668	; 0x29c
    ca50:	206c      	movs	r0, #108	; 0x6c
    ca52:	f000 fd11 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ca56:	4b1a      	ldr	r3, [pc, #104]	; (cac0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    ca58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ca5c:	4090      	lsls	r0, r2
    ca5e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    ca62:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    ca66:	e000      	b.n	ca6a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    ca68:	e01f      	b.n	caaa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    ca6a:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    ca6e:	f843 400c 	str.w	r4, [r3, ip]
    ca72:	f8df c050 	ldr.w	ip, [pc, #80]	; cac4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    ca76:	f8dc c000 	ldr.w	ip, [ip]
    ca7a:	eba1 0c0c 	sub.w	ip, r1, ip
    ca7e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    ca82:	f1bc 0f02 	cmp.w	ip, #2
    ca86:	d30d      	bcc.n	caa4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    ca88:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    ca8c:	d80a      	bhi.n	caa4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    ca8e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    ca92:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    ca96:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    ca9a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    ca9e:	4628      	mov	r0, r5
    caa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    caa4:	4620      	mov	r0, r4
    caa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    caaa:	f240 4154 	movw	r1, #1108	; 0x454
    caae:	206c      	movs	r0, #108	; 0x6c
    cab0:	f000 fce2 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cab4:	2000002a 	.word	0x2000002a
    cab8:	20000028 	.word	0x20000028
    cabc:	40008000 	.word	0x40008000
    cac0:	4000b000 	.word	0x4000b000
    cac4:	4000b504 	.word	0x4000b504

0000cac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    cac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    caca:	2101      	movs	r1, #1
    cacc:	2600      	movs	r6, #0
    cace:	f44f 77a0 	mov.w	r7, #320	; 0x140
    cad2:	2807      	cmp	r0, #7
    cad4:	d24a      	bcs.n	cb6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    cad6:	e8df f000 	tbb	[pc, r0]
    cada:	0404      	.short	0x0404
    cadc:	18180404 	.word	0x18180404
    cae0:	0018      	.short	0x0018
    cae2:	f100 0210 	add.w	r2, r0, #16
    cae6:	fa01 f202 	lsl.w	r2, r1, r2
    caea:	4923      	ldr	r1, [pc, #140]	; (cb78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    caec:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    caf0:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    caf4:	2200      	movs	r2, #0
    caf6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    cafa:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    cafe:	508e      	str	r6, [r1, r2]
    cb00:	491e      	ldr	r1, [pc, #120]	; (cb7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    cb02:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    cb06:	9000      	str	r0, [sp, #0]
    cb08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb0a:	4d1d      	ldr	r5, [pc, #116]	; (cb80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    cb0c:	1f01      	subs	r1, r0, #4
    cb0e:	b2cc      	uxtb	r4, r1
    cb10:	7829      	ldrb	r1, [r5, #0]
    cb12:	b181      	cbz	r1, cb36 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    cb14:	786a      	ldrb	r2, [r5, #1]
    cb16:	4282      	cmp	r2, r0
    cb18:	d10d      	bne.n	cb36 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    cb1a:	4a1a      	ldr	r2, [pc, #104]	; (cb84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    cb1c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    cb20:	6010      	str	r0, [r2, #0]
    cb22:	2901      	cmp	r1, #1
    cb24:	bf08      	it	eq
    cb26:	f7ff fd0b 	bleq	c540 <MPSL_IRQ_TIMER0_Handler+0x100>
    cb2a:	702e      	strb	r6, [r5, #0]
    cb2c:	4a16      	ldr	r2, [pc, #88]	; (cb88 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    cb2e:	f04f 30ff 	mov.w	r0, #4294967295
    cb32:	e9c2 0004 	strd	r0, r0, [r2, #16]
    cb36:	4915      	ldr	r1, [pc, #84]	; (cb8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    cb38:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    cb3c:	40a0      	lsls	r0, r4
    cb3e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    cb42:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    cb46:	00a0      	lsls	r0, r4, #2
    cb48:	4408      	add	r0, r1
    cb4a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    cb4e:	4a10      	ldr	r2, [pc, #64]	; (cb90 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    cb50:	6812      	ldr	r2, [r2, #0]
    cb52:	1a80      	subs	r0, r0, r2
    cb54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cb58:	2802      	cmp	r0, #2
    cb5a:	bf24      	itt	cs
    cb5c:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    cb60:	500e      	strcs	r6, [r1, r0]
    cb62:	480c      	ldr	r0, [pc, #48]	; (cb94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    cb64:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    cb68:	9000      	str	r0, [sp, #0]
    cb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb6c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    cb70:	206c      	movs	r0, #108	; 0x6c
    cb72:	f000 fc81 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cb76:	0000      	.short	0x0000
    cb78:	40008000 	.word	0x40008000
    cb7c:	40008140 	.word	0x40008140
    cb80:	2000002a 	.word	0x2000002a
    cb84:	4001f508 	.word	0x4001f508
    cb88:	20000028 	.word	0x20000028
    cb8c:	4000b000 	.word	0x4000b000
    cb90:	4000b504 	.word	0x4000b504
    cb94:	4000b140 	.word	0x4000b140

0000cb98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    cb98:	481a      	ldr	r0, [pc, #104]	; (cc04 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    cb9a:	7800      	ldrb	r0, [r0, #0]
    cb9c:	2800      	cmp	r0, #0
    cb9e:	bf07      	ittee	eq
    cba0:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    cba4:	2100      	moveq	r1, #0
    cba6:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    cbaa:	2101      	movne	r1, #1
    cbac:	4a16      	ldr	r2, [pc, #88]	; (cc08 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    cbae:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    cbb2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    cbb6:	2000      	movs	r0, #0
    cbb8:	2902      	cmp	r1, #2
    cbba:	bf38      	it	cc
    cbbc:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    cbc0:	d207      	bcs.n	cbd2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    cbc2:	bf00      	nop
    cbc4:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    cbc8:	50d0      	str	r0, [r2, r3]
    cbca:	1c49      	adds	r1, r1, #1
    cbcc:	b2c9      	uxtb	r1, r1
    cbce:	2902      	cmp	r1, #2
    cbd0:	d3f8      	bcc.n	cbc4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    cbd2:	490e      	ldr	r1, [pc, #56]	; (cc0c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    cbd4:	f04f 32ff 	mov.w	r2, #4294967295
    cbd8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    cbdc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    cbe0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    cbe4:	1d0a      	adds	r2, r1, #4
    cbe6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    cbea:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    cbee:	1d12      	adds	r2, r2, #4
    cbf0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    cbf4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    cbf8:	1d12      	adds	r2, r2, #4
    cbfa:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    cbfe:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    cc02:	4770      	bx	lr
    cc04:	2000002a 	.word	0x2000002a
    cc08:	4000b000 	.word	0x4000b000
    cc0c:	40008000 	.word	0x40008000

0000cc10 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    cc10:	b570      	push	{r4, r5, r6, lr}
    cc12:	f3ef 8110 	mrs	r1, PRIMASK
    cc16:	b672      	cpsid	i
    cc18:	2400      	movs	r4, #0
    cc1a:	4b0d      	ldr	r3, [pc, #52]	; (cc50 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    cc1c:	4a0d      	ldr	r2, [pc, #52]	; (cc54 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    cc1e:	bf00      	nop
    cc20:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    cc24:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    cc28:	f1bc 0f00 	cmp.w	ip, #0
    cc2c:	d005      	beq.n	cc3a <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    cc2e:	6890      	ldr	r0, [r2, #8]
    cc30:	1c40      	adds	r0, r0, #1
    cc32:	6090      	str	r0, [r2, #8]
    cc34:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    cc38:	e7f2      	b.n	cc20 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    cc3a:	6895      	ldr	r5, [r2, #8]
    cc3c:	b901      	cbnz	r1, cc40 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    cc3e:	b662      	cpsie	i
    cc40:	f004 ff91 	bl	11b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    cc44:	4a04      	ldr	r2, [pc, #16]	; (cc58 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    cc46:	4621      	mov	r1, r4
    cc48:	fbe5 0102 	umlal	r0, r1, r5, r2
    cc4c:	bd70      	pop	{r4, r5, r6, pc}
    cc4e:	0000      	.short	0x0000
    cc50:	4000b000 	.word	0x4000b000
    cc54:	20000028 	.word	0x20000028
    cc58:	1e848000 	.word	0x1e848000

0000cc5c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    cc5c:	b510      	push	{r4, lr}
    cc5e:	2807      	cmp	r0, #7
    cc60:	d20d      	bcs.n	cc7e <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    cc62:	e8df f000 	tbb	[pc, r0]
    cc66:	0404      	.short	0x0404
    cc68:	06060404 	.word	0x06060404
    cc6c:	0006      	.short	0x0006
    cc6e:	4906      	ldr	r1, [pc, #24]	; (cc88 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    cc70:	e002      	b.n	cc78 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    cc72:	1f00      	subs	r0, r0, #4
    cc74:	4905      	ldr	r1, [pc, #20]	; (cc8c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    cc76:	b2c0      	uxtb	r0, r0
    cc78:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    cc7c:	bd10      	pop	{r4, pc}
    cc7e:	f240 417b 	movw	r1, #1147	; 0x47b
    cc82:	206c      	movs	r0, #108	; 0x6c
    cc84:	f000 fbf8 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cc88:	40008140 	.word	0x40008140
    cc8c:	4000b140 	.word	0x4000b140

0000cc90 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    cc90:	b570      	push	{r4, r5, r6, lr}
    cc92:	481b      	ldr	r0, [pc, #108]	; (cd00 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    cc94:	2400      	movs	r4, #0
    cc96:	2104      	movs	r1, #4
    cc98:	7004      	strb	r4, [r0, #0]
    cc9a:	1e80      	subs	r0, r0, #2
    cc9c:	7001      	strb	r1, [r0, #0]
    cc9e:	1f49      	subs	r1, r1, #5
    cca0:	e9c0 1104 	strd	r1, r1, [r0, #16]
    cca4:	6084      	str	r4, [r0, #8]
    cca6:	f7ff fc4b 	bl	c540 <MPSL_IRQ_TIMER0_Handler+0x100>
    ccaa:	2501      	movs	r5, #1
    ccac:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    ccb0:	02eb      	lsls	r3, r5, #11
    ccb2:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    ccb6:	f3bf 8f4f 	dsb	sy
    ccba:	f3bf 8f6f 	isb	sy
    ccbe:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    ccc2:	4a10      	ldr	r2, [pc, #64]	; (cd04 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    ccc4:	6055      	str	r5, [r2, #4]
    ccc6:	6095      	str	r5, [r2, #8]
    ccc8:	480f      	ldr	r0, [pc, #60]	; (cd08 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    ccca:	6801      	ldr	r1, [r0, #0]
    cccc:	2900      	cmp	r1, #0
    ccce:	d1fc      	bne.n	ccca <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    ccd0:	480e      	ldr	r0, [pc, #56]	; (cd0c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    ccd2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    ccd6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    ccda:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    ccde:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    cce2:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    cce6:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    ccea:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    ccee:	6015      	str	r5, [r2, #0]
    ccf0:	f44f 7082 	mov.w	r0, #260	; 0x104
    ccf4:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    ccf8:	2002      	movs	r0, #2
    ccfa:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    ccfe:	bd70      	pop	{r4, r5, r6, pc}
    cd00:	2000002a 	.word	0x2000002a
    cd04:	4000b000 	.word	0x4000b000
    cd08:	4000b504 	.word	0x4000b504
    cd0c:	00070002 	.word	0x00070002

0000cd10 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    cd10:	4808      	ldr	r0, [pc, #32]	; (cd34 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    cd12:	f990 0000 	ldrsb.w	r0, [r0]
    cd16:	2800      	cmp	r0, #0
    cd18:	bfb8      	it	lt
    cd1a:	4770      	bxlt	lr
    cd1c:	f000 011f 	and.w	r1, r0, #31
    cd20:	2201      	movs	r2, #1
    cd22:	fa02 f101 	lsl.w	r1, r2, r1
    cd26:	0940      	lsrs	r0, r0, #5
    cd28:	0080      	lsls	r0, r0, #2
    cd2a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cd2e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    cd32:	4770      	bx	lr
    cd34:	20000388 	.word	0x20000388

0000cd38 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    cd38:	4803      	ldr	r0, [pc, #12]	; (cd48 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    cd3a:	7800      	ldrb	r0, [r0, #0]
    cd3c:	2803      	cmp	r0, #3
    cd3e:	bf0c      	ite	eq
    cd40:	2001      	moveq	r0, #1
    cd42:	2000      	movne	r0, #0
    cd44:	4770      	bx	lr
    cd46:	0000      	.short	0x0000
    cd48:	20000360 	.word	0x20000360

0000cd4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    cd4c:	4801      	ldr	r0, [pc, #4]	; (cd54 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    cd4e:	8840      	ldrh	r0, [r0, #2]
    cd50:	4770      	bx	lr
    cd52:	0000      	.short	0x0000
    cd54:	20000360 	.word	0x20000360

0000cd58 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    cd58:	4803      	ldr	r0, [pc, #12]	; (cd68 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    cd5a:	7800      	ldrb	r0, [r0, #0]
    cd5c:	2802      	cmp	r0, #2
    cd5e:	bf16      	itet	ne
    cd60:	2803      	cmpne	r0, #3
    cd62:	2001      	moveq	r0, #1
    cd64:	2000      	movne	r0, #0
    cd66:	4770      	bx	lr
    cd68:	20000360 	.word	0x20000360

0000cd6c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    cd6c:	4802      	ldr	r0, [pc, #8]	; (cd78 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    cd6e:	2100      	movs	r1, #0
    cd70:	7001      	strb	r1, [r0, #0]
    cd72:	8041      	strh	r1, [r0, #2]
    cd74:	4770      	bx	lr
    cd76:	0000      	.short	0x0000
    cd78:	20000360 	.word	0x20000360

0000cd7c <MPSL_IRQ_CLOCK_Handler>:
    cd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd80:	4c16      	ldr	r4, [pc, #88]	; (cddc <MPSL_IRQ_CLOCK_Handler+0x60>)
    cd82:	7a60      	ldrb	r0, [r4, #9]
    cd84:	2800      	cmp	r0, #0
    cd86:	d027      	beq.n	cdd8 <MPSL_IRQ_CLOCK_Handler+0x5c>
    cd88:	f44f 7180 	mov.w	r1, #256	; 0x100
    cd8c:	058d      	lsls	r5, r1, #22
    cd8e:	4628      	mov	r0, r5
    cd90:	f004 ff14 	bl	11bbc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    cd94:	4680      	mov	r8, r0
    cd96:	f44f 7182 	mov.w	r1, #260	; 0x104
    cd9a:	4628      	mov	r0, r5
    cd9c:	f004 ff0e 	bl	11bbc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    cda0:	2600      	movs	r6, #0
    cda2:	4607      	mov	r7, r0
    cda4:	f1b8 0f00 	cmp.w	r8, #0
    cda8:	d009      	beq.n	cdbe <MPSL_IRQ_CLOCK_Handler+0x42>
    cdaa:	2001      	movs	r0, #1
    cdac:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    cdb0:	7920      	ldrb	r0, [r4, #4]
    cdb2:	b120      	cbz	r0, cdbe <MPSL_IRQ_CLOCK_Handler+0x42>
    cdb4:	7126      	strb	r6, [r4, #4]
    cdb6:	69e0      	ldr	r0, [r4, #28]
    cdb8:	b108      	cbz	r0, cdbe <MPSL_IRQ_CLOCK_Handler+0x42>
    cdba:	4780      	blx	r0
    cdbc:	61e6      	str	r6, [r4, #28]
    cdbe:	b137      	cbz	r7, cdce <MPSL_IRQ_CLOCK_Handler+0x52>
    cdc0:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    cdc4:	2002      	movs	r0, #2
    cdc6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    cdca:	f000 fa75 	bl	d2b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    cdce:	4640      	mov	r0, r8
    cdd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cdd4:	f000 b858 	b.w	ce88 <MPSL_IRQ_CLOCK_Handler+0x10c>
    cdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cddc:	20000318 	.word	0x20000318
    cde0:	b510      	push	{r4, lr}
    cde2:	f004 ff95 	bl	11d10 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    cde6:	b930      	cbnz	r0, cdf6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    cde8:	f004 ffb3 	bl	11d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cdec:	b918      	cbnz	r0, cdf6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    cdee:	f004 ffe6 	bl	11dbe <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    cdf2:	2800      	cmp	r0, #0
    cdf4:	d002      	beq.n	cdfc <MPSL_IRQ_CLOCK_Handler+0x80>
    cdf6:	4902      	ldr	r1, [pc, #8]	; (ce00 <MPSL_IRQ_CLOCK_Handler+0x84>)
    cdf8:	2002      	movs	r0, #2
    cdfa:	6008      	str	r0, [r1, #0]
    cdfc:	bd10      	pop	{r4, pc}
    cdfe:	0000      	.short	0x0000
    ce00:	40000c34 	.word	0x40000c34
    ce04:	b570      	push	{r4, r5, r6, lr}
    ce06:	f000 f99b 	bl	d140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    ce0a:	f000 fabd 	bl	d388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    ce0e:	4c09      	ldr	r4, [pc, #36]	; (ce34 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    ce10:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    ce14:	b130      	cbz	r0, ce24 <MPSL_IRQ_CLOCK_Handler+0xa8>
    ce16:	f7ff ffe3 	bl	cde0 <MPSL_IRQ_CLOCK_Handler+0x64>
    ce1a:	2001      	movs	r0, #1
    ce1c:	6128      	str	r0, [r5, #16]
    ce1e:	2004      	movs	r0, #4
    ce20:	72a0      	strb	r0, [r4, #10]
    ce22:	e004      	b.n	ce2e <MPSL_IRQ_CLOCK_Handler+0xb2>
    ce24:	2003      	movs	r0, #3
    ce26:	72a0      	strb	r0, [r4, #10]
    ce28:	2001      	movs	r0, #1
    ce2a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    ce2e:	2000      	movs	r0, #0
    ce30:	71e0      	strb	r0, [r4, #7]
    ce32:	bd70      	pop	{r4, r5, r6, pc}
    ce34:	20000318 	.word	0x20000318
    ce38:	b570      	push	{r4, r5, r6, lr}
    ce3a:	4c12      	ldr	r4, [pc, #72]	; (ce84 <MPSL_IRQ_CLOCK_Handler+0x108>)
    ce3c:	79a0      	ldrb	r0, [r4, #6]
    ce3e:	b1e0      	cbz	r0, ce7a <MPSL_IRQ_CLOCK_Handler+0xfe>
    ce40:	79e1      	ldrb	r1, [r4, #7]
    ce42:	1e40      	subs	r0, r0, #1
    ce44:	4281      	cmp	r1, r0
    ce46:	da18      	bge.n	ce7a <MPSL_IRQ_CLOCK_Handler+0xfe>
    ce48:	f000 fa9e 	bl	d388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    ce4c:	4605      	mov	r5, r0
    ce4e:	f000 fb87 	bl	d560 <mpsl_temperature_get>
    ce52:	79a1      	ldrb	r1, [r4, #6]
    ce54:	2901      	cmp	r1, #1
    ce56:	d902      	bls.n	ce5e <MPSL_IRQ_CLOCK_Handler+0xe2>
    ce58:	79e1      	ldrb	r1, [r4, #7]
    ce5a:	1c49      	adds	r1, r1, #1
    ce5c:	71e1      	strb	r1, [r4, #7]
    ce5e:	b10d      	cbz	r5, ce64 <MPSL_IRQ_CLOCK_Handler+0xe8>
    ce60:	6961      	ldr	r1, [r4, #20]
    ce62:	e000      	b.n	ce66 <MPSL_IRQ_CLOCK_Handler+0xea>
    ce64:	6921      	ldr	r1, [r4, #16]
    ce66:	1a41      	subs	r1, r0, r1
    ce68:	2902      	cmp	r1, #2
    ce6a:	da02      	bge.n	ce72 <MPSL_IRQ_CLOCK_Handler+0xf6>
    ce6c:	f111 0f02 	cmn.w	r1, #2
    ce70:	dc07      	bgt.n	ce82 <MPSL_IRQ_CLOCK_Handler+0x106>
    ce72:	b10d      	cbz	r5, ce78 <MPSL_IRQ_CLOCK_Handler+0xfc>
    ce74:	6160      	str	r0, [r4, #20]
    ce76:	e000      	b.n	ce7a <MPSL_IRQ_CLOCK_Handler+0xfe>
    ce78:	6120      	str	r0, [r4, #16]
    ce7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ce7e:	f7ff bfc1 	b.w	ce04 <MPSL_IRQ_CLOCK_Handler+0x88>
    ce82:	bd70      	pop	{r4, r5, r6, pc}
    ce84:	20000318 	.word	0x20000318
    ce88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce8c:	4606      	mov	r6, r0
    ce8e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    ce92:	f44f 7186 	mov.w	r1, #268	; 0x10c
    ce96:	4628      	mov	r0, r5
    ce98:	f004 fe90 	bl	11bbc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    ce9c:	4680      	mov	r8, r0
    ce9e:	f44f 7188 	mov.w	r1, #272	; 0x110
    cea2:	4628      	mov	r0, r5
    cea4:	f004 fe8a 	bl	11bbc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    cea8:	4c27      	ldr	r4, [pc, #156]	; (cf48 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    ceaa:	4682      	mov	sl, r0
    ceac:	7827      	ldrb	r7, [r4, #0]
    ceae:	f104 0008 	add.w	r0, r4, #8
    ceb2:	f004 fef7 	bl	11ca4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    ceb6:	b110      	cbz	r0, cebe <MPSL_IRQ_CLOCK_Handler+0x142>
    ceb8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    cebc:	e016      	b.n	ceec <MPSL_IRQ_CLOCK_Handler+0x170>
    cebe:	f04f 0901 	mov.w	r9, #1
    cec2:	b146      	cbz	r6, ced6 <MPSL_IRQ_CLOCK_Handler+0x15a>
    cec4:	7aa0      	ldrb	r0, [r4, #10]
    cec6:	2803      	cmp	r0, #3
    cec8:	d105      	bne.n	ced6 <MPSL_IRQ_CLOCK_Handler+0x15a>
    ceca:	2004      	movs	r0, #4
    cecc:	72a0      	strb	r0, [r4, #10]
    cece:	f7ff ff87 	bl	cde0 <MPSL_IRQ_CLOCK_Handler+0x64>
    ced2:	f8c5 9010 	str.w	r9, [r5, #16]
    ced6:	2600      	movs	r6, #0
    ced8:	f1b8 0f00 	cmp.w	r8, #0
    cedc:	d018      	beq.n	cf10 <MPSL_IRQ_CLOCK_Handler+0x194>
    cede:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    cee2:	7aa0      	ldrb	r0, [r4, #10]
    cee4:	2804      	cmp	r0, #4
    cee6:	d004      	beq.n	cef2 <MPSL_IRQ_CLOCK_Handler+0x176>
    cee8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    ceec:	206d      	movs	r0, #109	; 0x6d
    ceee:	f000 fac3 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cef2:	f004 ff0d 	bl	11d10 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    cef6:	b928      	cbnz	r0, cf04 <MPSL_IRQ_CLOCK_Handler+0x188>
    cef8:	f004 ff2b 	bl	11d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cefc:	b910      	cbnz	r0, cf04 <MPSL_IRQ_CLOCK_Handler+0x188>
    cefe:	f004 ff5e 	bl	11dbe <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    cf02:	b108      	cbz	r0, cf08 <MPSL_IRQ_CLOCK_Handler+0x18c>
    cf04:	4811      	ldr	r0, [pc, #68]	; (cf4c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    cf06:	6006      	str	r6, [r0, #0]
    cf08:	2002      	movs	r0, #2
    cf0a:	72a0      	strb	r0, [r4, #10]
    cf0c:	f000 f8fc 	bl	d108 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    cf10:	f1ba 0f00 	cmp.w	sl, #0
    cf14:	d008      	beq.n	cf28 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    cf16:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    cf1a:	7aa0      	ldrb	r0, [r4, #10]
    cf1c:	2802      	cmp	r0, #2
    cf1e:	d101      	bne.n	cf24 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    cf20:	f7ff ff8a 	bl	ce38 <MPSL_IRQ_CLOCK_Handler+0xbc>
    cf24:	f8c5 9014 	str.w	r9, [r5, #20]
    cf28:	b13f      	cbz	r7, cf3a <MPSL_IRQ_CLOCK_Handler+0x1be>
    cf2a:	7026      	strb	r6, [r4, #0]
    cf2c:	7aa0      	ldrb	r0, [r4, #10]
    cf2e:	2802      	cmp	r0, #2
    cf30:	d101      	bne.n	cf36 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    cf32:	f7ff ff67 	bl	ce04 <MPSL_IRQ_CLOCK_Handler+0x88>
    cf36:	f000 f8e7 	bl	d108 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    cf3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf3e:	4802      	ldr	r0, [pc, #8]	; (cf48 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    cf40:	3008      	adds	r0, #8
    cf42:	f004 bec6 	b.w	11cd2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    cf46:	0000      	.short	0x0000
    cf48:	20000318 	.word	0x20000318
    cf4c:	40000c34 	.word	0x40000c34
    cf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf54:	4c49      	ldr	r4, [pc, #292]	; (d07c <MPSL_IRQ_CLOCK_Handler+0x300>)
    cf56:	2700      	movs	r7, #0
    cf58:	4606      	mov	r6, r0
    cf5a:	61a7      	str	r7, [r4, #24]
    cf5c:	7842      	ldrb	r2, [r0, #1]
    cf5e:	7881      	ldrb	r1, [r0, #2]
    cf60:	7800      	ldrb	r0, [r0, #0]
    cf62:	72e0      	strb	r0, [r4, #11]
    cf64:	7162      	strb	r2, [r4, #5]
    cf66:	71a1      	strb	r1, [r4, #6]
    cf68:	71e7      	strb	r7, [r4, #7]
    cf6a:	f04f 0801 	mov.w	r8, #1
    cf6e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    cf72:	2805      	cmp	r0, #5
    cf74:	d225      	bcs.n	cfc2 <MPSL_IRQ_CLOCK_Handler+0x246>
    cf76:	e8df f000 	tbb	[pc, r0]
    cf7a:	0310      	.short	0x0310
    cf7c:	00222006 	.word	0x00222006
    cf80:	f8c4 8018 	str.w	r8, [r4, #24]
    cf84:	e009      	b.n	cf9a <MPSL_IRQ_CLOCK_Handler+0x21e>
    cf86:	f000 f8db 	bl	d140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    cf8a:	2101      	movs	r1, #1
    cf8c:	4628      	mov	r0, r5
    cf8e:	f004 fe1a 	bl	11bc6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    cf92:	2800      	cmp	r0, #0
    cf94:	d0f9      	beq.n	cf8a <MPSL_IRQ_CLOCK_Handler+0x20e>
    cf96:	2002      	movs	r0, #2
    cf98:	61a0      	str	r0, [r4, #24]
    cf9a:	f004 fe40 	bl	11c1e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    cf9e:	b1c0      	cbz	r0, cfd2 <MPSL_IRQ_CLOCK_Handler+0x256>
    cfa0:	f000 fa0c 	bl	d3bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    cfa4:	7e21      	ldrb	r1, [r4, #24]
    cfa6:	f001 0103 	and.w	r1, r1, #3
    cfaa:	4288      	cmp	r0, r1
    cfac:	d111      	bne.n	cfd2 <MPSL_IRQ_CLOCK_Handler+0x256>
    cfae:	79b0      	ldrb	r0, [r6, #6]
    cfb0:	b160      	cbz	r0, cfcc <MPSL_IRQ_CLOCK_Handler+0x250>
    cfb2:	2002      	movs	r0, #2
    cfb4:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    cfb8:	e044      	b.n	d044 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    cfba:	4831      	ldr	r0, [pc, #196]	; (d080 <MPSL_IRQ_CLOCK_Handler+0x304>)
    cfbc:	e7ec      	b.n	cf98 <MPSL_IRQ_CLOCK_Handler+0x21c>
    cfbe:	4831      	ldr	r0, [pc, #196]	; (d084 <MPSL_IRQ_CLOCK_Handler+0x308>)
    cfc0:	e7ea      	b.n	cf98 <MPSL_IRQ_CLOCK_Handler+0x21c>
    cfc2:	f240 313d 	movw	r1, #829	; 0x33d
    cfc6:	206d      	movs	r0, #109	; 0x6d
    cfc8:	f000 fa56 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cfcc:	f000 f9ca 	bl	d364 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    cfd0:	e038      	b.n	d044 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    cfd2:	f8c5 800c 	str.w	r8, [r5, #12]
    cfd6:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    cfda:	69a0      	ldr	r0, [r4, #24]
    cfdc:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    cfe0:	f004 fe82 	bl	11ce8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    cfe4:	b940      	cbnz	r0, cff8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    cfe6:	f004 fe89 	bl	11cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    cfea:	b928      	cbnz	r0, cff8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    cfec:	f004 fe9d 	bl	11d2a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    cff0:	b910      	cbnz	r0, cff8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    cff2:	f004 feae 	bl	11d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cff6:	b138      	cbz	r0, d008 <MPSL_IRQ_CLOCK_Handler+0x28c>
    cff8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cffc:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    d000:	4921      	ldr	r1, [pc, #132]	; (d088 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    d002:	f3c0 3042 	ubfx	r0, r0, #13, #3
    d006:	6008      	str	r0, [r1, #0]
    d008:	f004 fe6e 	bl	11ce8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    d00c:	b940      	cbnz	r0, d020 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    d00e:	f004 fe75 	bl	11cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d012:	b928      	cbnz	r0, d020 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    d014:	f004 fe89 	bl	11d2a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    d018:	b910      	cbnz	r0, d020 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    d01a:	f004 fe9a 	bl	11d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d01e:	b118      	cbz	r0, d028 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    d020:	4919      	ldr	r1, [pc, #100]	; (d088 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    d022:	3110      	adds	r1, #16
    d024:	f8c1 8000 	str.w	r8, [r1]
    d028:	f8c5 8008 	str.w	r8, [r5, #8]
    d02c:	2002      	movs	r0, #2
    d02e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    d032:	79b0      	ldrb	r0, [r6, #6]
    d034:	b930      	cbnz	r0, d044 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    d036:	f000 f829 	bl	d08c <MPSL_IRQ_CLOCK_Handler+0x310>
    d03a:	2002      	movs	r0, #2
    d03c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    d040:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    d044:	79a0      	ldrb	r0, [r4, #6]
    d046:	b170      	cbz	r0, d066 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    d048:	7830      	ldrb	r0, [r6, #0]
    d04a:	b960      	cbnz	r0, d066 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    d04c:	f000 f99c 	bl	d388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    d050:	4606      	mov	r6, r0
    d052:	f000 fa85 	bl	d560 <mpsl_temperature_get>
    d056:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d05a:	b116      	cbz	r6, d062 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    d05c:	e9c4 1004 	strd	r1, r0, [r4, #16]
    d060:	e001      	b.n	d066 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    d062:	e9c4 0104 	strd	r0, r1, [r4, #16]
    d066:	2101      	movs	r1, #1
    d068:	4628      	mov	r0, r5
    d06a:	f004 fdac 	bl	11bc6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    d06e:	b108      	cbz	r0, d074 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    d070:	f000 f984 	bl	d37c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    d074:	72a7      	strb	r7, [r4, #10]
    d076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d07a:	0000      	.short	0x0000
    d07c:	20000318 	.word	0x20000318
    d080:	00020001 	.word	0x00020001
    d084:	00030001 	.word	0x00030001
    d088:	4000053c 	.word	0x4000053c
    d08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d090:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    d094:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    d098:	f010 0f02 	tst.w	r0, #2
    d09c:	d011      	beq.n	d0c2 <MPSL_IRQ_CLOCK_Handler+0x346>
    d09e:	4c16      	ldr	r4, [pc, #88]	; (d0f8 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    d0a0:	6820      	ldr	r0, [r4, #0]
    d0a2:	43c0      	mvns	r0, r0
    d0a4:	f340 1600 	sbfx	r6, r0, #4, #1
    d0a8:	6820      	ldr	r0, [r4, #0]
    d0aa:	f040 0010 	orr.w	r0, r0, #16
    d0ae:	6020      	str	r0, [r4, #0]
    d0b0:	f44f 7782 	mov.w	r7, #260	; 0x104
    d0b4:	4639      	mov	r1, r7
    d0b6:	4628      	mov	r0, r5
    d0b8:	1c76      	adds	r6, r6, #1
    d0ba:	f004 fd7f 	bl	11bbc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    d0be:	b128      	cbz	r0, d0cc <MPSL_IRQ_CLOCK_Handler+0x350>
    d0c0:	e00a      	b.n	d0d8 <MPSL_IRQ_CLOCK_Handler+0x35c>
    d0c2:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    d0c6:	206d      	movs	r0, #109	; 0x6d
    d0c8:	f000 f9d6 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d0cc:	f004 fe83 	bl	11dd6 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    d0d0:	e002      	b.n	d0d8 <MPSL_IRQ_CLOCK_Handler+0x35c>
    d0d2:	bf00      	nop
    d0d4:	f004 fe7d 	bl	11dd2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    d0d8:	4639      	mov	r1, r7
    d0da:	4628      	mov	r0, r5
    d0dc:	f004 fd6e 	bl	11bbc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    d0e0:	2800      	cmp	r0, #0
    d0e2:	d0f7      	beq.n	d0d4 <MPSL_IRQ_CLOCK_Handler+0x358>
    d0e4:	f000 f93e 	bl	d364 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    d0e8:	2e00      	cmp	r6, #0
    d0ea:	d103      	bne.n	d0f4 <MPSL_IRQ_CLOCK_Handler+0x378>
    d0ec:	6820      	ldr	r0, [r4, #0]
    d0ee:	f020 0010 	bic.w	r0, r0, #16
    d0f2:	6020      	str	r0, [r4, #0]
    d0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0f8:	e000ed10 	.word	0xe000ed10

0000d0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    d0fc:	4801      	ldr	r0, [pc, #4]	; (d104 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    d0fe:	89c0      	ldrh	r0, [r0, #14]
    d100:	4770      	bx	lr
    d102:	0000      	.short	0x0000
    d104:	20000318 	.word	0x20000318

0000d108 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    d108:	b510      	push	{r4, lr}
    d10a:	f3ef 8410 	mrs	r4, PRIMASK
    d10e:	b672      	cpsid	i
    d110:	480a      	ldr	r0, [pc, #40]	; (d13c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    d112:	7841      	ldrb	r1, [r0, #1]
    d114:	b129      	cbz	r1, d122 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    d116:	7841      	ldrb	r1, [r0, #1]
    d118:	1e49      	subs	r1, r1, #1
    d11a:	7041      	strb	r1, [r0, #1]
    d11c:	7841      	ldrb	r1, [r0, #1]
    d11e:	b129      	cbz	r1, d12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    d120:	e008      	b.n	d134 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    d122:	f240 1119 	movw	r1, #281	; 0x119
    d126:	206d      	movs	r0, #109	; 0x6d
    d128:	f000 f9a6 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d12c:	7880      	ldrb	r0, [r0, #2]
    d12e:	b908      	cbnz	r0, d134 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    d130:	f000 f938 	bl	d3a4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    d134:	2c00      	cmp	r4, #0
    d136:	d100      	bne.n	d13a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    d138:	b662      	cpsie	i
    d13a:	bd10      	pop	{r4, pc}
    d13c:	20000318 	.word	0x20000318

0000d140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    d140:	b510      	push	{r4, lr}
    d142:	f3ef 8410 	mrs	r4, PRIMASK
    d146:	b672      	cpsid	i
    d148:	4806      	ldr	r0, [pc, #24]	; (d164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    d14a:	7841      	ldrb	r1, [r0, #1]
    d14c:	1c49      	adds	r1, r1, #1
    d14e:	7041      	strb	r1, [r0, #1]
    d150:	7840      	ldrb	r0, [r0, #1]
    d152:	2801      	cmp	r0, #1
    d154:	d101      	bne.n	d15a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    d156:	f004 fd4d 	bl	11bf4 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    d15a:	2c00      	cmp	r4, #0
    d15c:	d100      	bne.n	d160 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    d15e:	b662      	cpsie	i
    d160:	bd10      	pop	{r4, pc}
    d162:	0000      	.short	0x0000
    d164:	20000318 	.word	0x20000318

0000d168 <mpsl_clock_hfclk_release>:
    d168:	4805      	ldr	r0, [pc, #20]	; (d180 <mpsl_clock_hfclk_release+0x18>)
    d16a:	b510      	push	{r4, lr}
    d16c:	78c1      	ldrb	r1, [r0, #3]
    d16e:	b121      	cbz	r1, d17a <mpsl_clock_hfclk_release+0x12>
    d170:	2100      	movs	r1, #0
    d172:	7101      	strb	r1, [r0, #4]
    d174:	70c1      	strb	r1, [r0, #3]
    d176:	f7ff ffc7 	bl	d108 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    d17a:	2000      	movs	r0, #0
    d17c:	bd10      	pop	{r4, pc}
    d17e:	0000      	.short	0x0000
    d180:	20000318 	.word	0x20000318

0000d184 <mpsl_clock_hfclk_request>:
    d184:	b570      	push	{r4, r5, r6, lr}
    d186:	4c0c      	ldr	r4, [pc, #48]	; (d1b8 <mpsl_clock_hfclk_request+0x34>)
    d188:	78e1      	ldrb	r1, [r4, #3]
    d18a:	b961      	cbnz	r1, d1a6 <mpsl_clock_hfclk_request+0x22>
    d18c:	2501      	movs	r5, #1
    d18e:	70e5      	strb	r5, [r4, #3]
    d190:	61e0      	str	r0, [r4, #28]
    d192:	f7ff ffd5 	bl	d140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    d196:	f000 f8f7 	bl	d388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    d19a:	b130      	cbz	r0, d1aa <mpsl_clock_hfclk_request+0x26>
    d19c:	69e0      	ldr	r0, [r4, #28]
    d19e:	b110      	cbz	r0, d1a6 <mpsl_clock_hfclk_request+0x22>
    d1a0:	4780      	blx	r0
    d1a2:	2000      	movs	r0, #0
    d1a4:	61e0      	str	r0, [r4, #28]
    d1a6:	2000      	movs	r0, #0
    d1a8:	bd70      	pop	{r4, r5, r6, pc}
    d1aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d1ae:	7125      	strb	r5, [r4, #4]
    d1b0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    d1b4:	e7f7      	b.n	d1a6 <mpsl_clock_hfclk_request+0x22>
    d1b6:	0000      	.short	0x0000
    d1b8:	20000318 	.word	0x20000318

0000d1bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    d1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1c0:	0005      	movs	r5, r0
    d1c2:	f06f 0015 	mvn.w	r0, #21
    d1c6:	d03f      	beq.n	d248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    d1c8:	7829      	ldrb	r1, [r5, #0]
    d1ca:	2904      	cmp	r1, #4
    d1cc:	d83c      	bhi.n	d248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    d1ce:	2900      	cmp	r1, #0
    d1d0:	7869      	ldrb	r1, [r5, #1]
    d1d2:	d03b      	beq.n	d24c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    d1d4:	2900      	cmp	r1, #0
    d1d6:	d137      	bne.n	d248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    d1d8:	78a9      	ldrb	r1, [r5, #2]
    d1da:	2900      	cmp	r1, #0
    d1dc:	d134      	bne.n	d248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    d1de:	2000      	movs	r0, #0
    d1e0:	f004 fcdb 	bl	11b9a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    d1e4:	2000      	movs	r0, #0
    d1e6:	f004 fccb 	bl	11b80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    d1ea:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    d1ee:	f04f 31ff 	mov.w	r1, #4294967295
    d1f2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    d1f6:	2600      	movs	r6, #0
    d1f8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    d1fc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    d200:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    d204:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    d208:	4c14      	ldr	r4, [pc, #80]	; (d25c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    d20a:	7066      	strb	r6, [r4, #1]
    d20c:	88a8      	ldrh	r0, [r5, #4]
    d20e:	81a0      	strh	r0, [r4, #12]
    d210:	f004 fce7 	bl	11be2 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    d214:	2701      	movs	r7, #1
    d216:	b108      	cbz	r0, d21c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    d218:	70e7      	strb	r7, [r4, #3]
    d21a:	7067      	strb	r7, [r4, #1]
    d21c:	2101      	movs	r1, #1
    d21e:	4640      	mov	r0, r8
    d220:	f004 fcd1 	bl	11bc6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    d224:	b108      	cbz	r0, d22a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    d226:	f000 f8a9 	bl	d37c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    d22a:	f240 50f5 	movw	r0, #1525	; 0x5f5
    d22e:	81e0      	strh	r0, [r4, #14]
    d230:	4628      	mov	r0, r5
    d232:	f7ff fe8d 	bl	cf50 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    d236:	7267      	strb	r7, [r4, #9]
    d238:	2000      	movs	r0, #0
    d23a:	f004 fca1 	bl	11b80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    d23e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d242:	4630      	mov	r0, r6
    d244:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    d248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d24c:	2900      	cmp	r1, #0
    d24e:	d0fb      	beq.n	d248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    d250:	2920      	cmp	r1, #32
    d252:	d8f9      	bhi.n	d248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    d254:	78a9      	ldrb	r1, [r5, #2]
    d256:	2921      	cmp	r1, #33	; 0x21
    d258:	d9c1      	bls.n	d1de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    d25a:	e7f5      	b.n	d248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    d25c:	20000318 	.word	0x20000318

0000d260 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    d260:	4801      	ldr	r0, [pc, #4]	; (d268 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    d262:	8980      	ldrh	r0, [r0, #12]
    d264:	4770      	bx	lr
    d266:	0000      	.short	0x0000
    d268:	20000318 	.word	0x20000318

0000d26c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    d26c:	b510      	push	{r4, lr}
    d26e:	480d      	ldr	r0, [pc, #52]	; (d2a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    d270:	f004 fd18 	bl	11ca4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    d274:	490b      	ldr	r1, [pc, #44]	; (d2a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    d276:	3908      	subs	r1, #8
    d278:	b148      	cbz	r0, d28e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    d27a:	2001      	movs	r0, #1
    d27c:	7008      	strb	r0, [r1, #0]
    d27e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d282:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    d286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d28a:	f7ff bf59 	b.w	d140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    d28e:	7a88      	ldrb	r0, [r1, #10]
    d290:	2802      	cmp	r0, #2
    d292:	d101      	bne.n	d298 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    d294:	f7ff fdb6 	bl	ce04 <MPSL_IRQ_CLOCK_Handler+0x88>
    d298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d29c:	4801      	ldr	r0, [pc, #4]	; (d2a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    d29e:	f004 bd18 	b.w	11cd2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    d2a2:	0000      	.short	0x0000
    d2a4:	20000320 	.word	0x20000320

0000d2a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    d2a8:	4802      	ldr	r0, [pc, #8]	; (d2b4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    d2aa:	7a80      	ldrb	r0, [r0, #10]
    d2ac:	2800      	cmp	r0, #0
    d2ae:	d000      	beq.n	d2b2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    d2b0:	2001      	movs	r0, #1
    d2b2:	4770      	bx	lr
    d2b4:	20000318 	.word	0x20000318

0000d2b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    d2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d2ba:	4d1f      	ldr	r5, [pc, #124]	; (d338 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    d2bc:	7ae8      	ldrb	r0, [r5, #11]
    d2be:	2800      	cmp	r0, #0
    d2c0:	d10f      	bne.n	d2e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    d2c2:	7e28      	ldrb	r0, [r5, #24]
    d2c4:	f000 0003 	and.w	r0, r0, #3
    d2c8:	f004 fc99 	bl	11bfe <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    d2cc:	2800      	cmp	r0, #0
    d2ce:	d008      	beq.n	d2e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    d2d0:	f3ef 8110 	mrs	r1, PRIMASK
    d2d4:	b672      	cpsid	i
    d2d6:	f7ff ffe7 	bl	d2a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    d2da:	b118      	cbz	r0, d2e4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    d2dc:	2900      	cmp	r1, #0
    d2de:	d100      	bne.n	d2e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    d2e0:	b662      	cpsie	i
    d2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2e4:	2601      	movs	r6, #1
    d2e6:	72ae      	strb	r6, [r5, #10]
    d2e8:	b901      	cbnz	r1, d2ec <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    d2ea:	b662      	cpsie	i
    d2ec:	2018      	movs	r0, #24
    d2ee:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    d2f2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    d2f6:	61a6      	str	r6, [r4, #24]
    d2f8:	f44f 7020 	mov.w	r0, #640	; 0x280
    d2fc:	f8ad 0000 	strh.w	r0, [sp]
    d300:	f8bd 0000 	ldrh.w	r0, [sp]
    d304:	1e41      	subs	r1, r0, #1
    d306:	f8ad 1000 	strh.w	r1, [sp]
    d30a:	d2f9      	bcs.n	d300 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    d30c:	2700      	movs	r7, #0
    d30e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    d312:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    d316:	4808      	ldr	r0, [pc, #32]	; (d338 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    d318:	3008      	adds	r0, #8
    d31a:	f004 fcd6 	bl	11cca <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    d31e:	702f      	strb	r7, [r5, #0]
    d320:	f7ff fd70 	bl	ce04 <MPSL_IRQ_CLOCK_Handler+0x88>
    d324:	6166      	str	r6, [r4, #20]
    d326:	7968      	ldrb	r0, [r5, #5]
    d328:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    d32c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    d330:	2018      	movs	r0, #24
    d332:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    d336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d338:	20000318 	.word	0x20000318

0000d33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    d33c:	4602      	mov	r2, r0
    d33e:	b510      	push	{r4, lr}
    d340:	2000      	movs	r0, #0
    d342:	2900      	cmp	r1, #0
    d344:	d00a      	beq.n	d35c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    d346:	2a00      	cmp	r2, #0
    d348:	d008      	beq.n	d35c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    d34a:	fba2 0101 	umull	r0, r1, r2, r1
    d34e:	1e40      	subs	r0, r0, #1
    d350:	4a03      	ldr	r2, [pc, #12]	; (d360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    d352:	f141 31ff 	adc.w	r1, r1, #4294967295
    d356:	f004 fd40 	bl	11dda <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    d35a:	1c40      	adds	r0, r0, #1
    d35c:	bd10      	pop	{r4, pc}
    d35e:	0000      	.short	0x0000
    d360:	000f4240 	.word	0x000f4240

0000d364 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    d364:	b510      	push	{r4, lr}
    d366:	4c04      	ldr	r4, [pc, #16]	; (d378 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    d368:	7e20      	ldrb	r0, [r4, #24]
    d36a:	f000 0003 	and.w	r0, r0, #3
    d36e:	f004 fc46 	bl	11bfe <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    d372:	2800      	cmp	r0, #0
    d374:	d0f8      	beq.n	d368 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    d376:	bd10      	pop	{r4, pc}
    d378:	20000318 	.word	0x20000318

0000d37c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    d37c:	4901      	ldr	r1, [pc, #4]	; (d384 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    d37e:	2001      	movs	r0, #1
    d380:	7008      	strb	r0, [r1, #0]
    d382:	4770      	bx	lr
    d384:	20000389 	.word	0x20000389

0000d388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    d388:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d38c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    d390:	b918      	cbnz	r0, d39a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    d392:	4803      	ldr	r0, [pc, #12]	; (d3a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    d394:	7800      	ldrb	r0, [r0, #0]
    d396:	2800      	cmp	r0, #0
    d398:	d000      	beq.n	d39c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    d39a:	2001      	movs	r0, #1
    d39c:	4770      	bx	lr
    d39e:	0000      	.short	0x0000
    d3a0:	20000389 	.word	0x20000389

0000d3a4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    d3a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d3a8:	2101      	movs	r1, #1
    d3aa:	6041      	str	r1, [r0, #4]
    d3ac:	2100      	movs	r1, #0
    d3ae:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    d3b2:	4801      	ldr	r0, [pc, #4]	; (d3b8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    d3b4:	7001      	strb	r1, [r0, #0]
    d3b6:	4770      	bx	lr
    d3b8:	20000389 	.word	0x20000389

0000d3bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    d3bc:	4802      	ldr	r0, [pc, #8]	; (d3c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    d3be:	6800      	ldr	r0, [r0, #0]
    d3c0:	f000 0003 	and.w	r0, r0, #3
    d3c4:	4770      	bx	lr
    d3c6:	0000      	.short	0x0000
    d3c8:	4000041c 	.word	0x4000041c
    d3cc:	b510      	push	{r4, lr}
    d3ce:	b131      	cbz	r1, d3de <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    d3d0:	2901      	cmp	r1, #1
    d3d2:	d007      	beq.n	d3e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    d3d4:	f240 3102 	movw	r1, #770	; 0x302
    d3d8:	a005      	add	r0, pc, #20	; (adr r0, d3f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    d3da:	f000 f821 	bl	d420 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    d3de:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    d3e2:	e001      	b.n	d3e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    d3e4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    d3e8:	f000 0001 	and.w	r0, r0, #1
    d3ec:	bd10      	pop	{r4, pc}
    d3ee:	0000      	.short	0x0000
    d3f0:	5f66726e 	.word	0x5f66726e
    d3f4:	636f6c63 	.word	0x636f6c63
    d3f8:	00682e6b 	.word	0x00682e6b
    d3fc:	f3bf 8f4f 	dsb	sy
    d400:	4805      	ldr	r0, [pc, #20]	; (d418 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    d402:	6801      	ldr	r1, [r0, #0]
    d404:	4a05      	ldr	r2, [pc, #20]	; (d41c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    d406:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    d40a:	4311      	orrs	r1, r2
    d40c:	6001      	str	r1, [r0, #0]
    d40e:	f3bf 8f4f 	dsb	sy
    d412:	bf00      	nop
    d414:	e7fd      	b.n	d412 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    d416:	0000      	.short	0x0000
    d418:	e000ed0c 	.word	0xe000ed0c
    d41c:	05fa0004 	.word	0x05fa0004

0000d420 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    d420:	b672      	cpsid	i
    d422:	4a03      	ldr	r2, [pc, #12]	; (d430 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    d424:	6852      	ldr	r2, [r2, #4]
    d426:	b102      	cbz	r2, d42a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    d428:	4790      	blx	r2
    d42a:	f7ff ffe7 	bl	d3fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    d42e:	0000      	.short	0x0000
    d430:	20000338 	.word	0x20000338
    d434:	4806      	ldr	r0, [pc, #24]	; (d450 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    d436:	b510      	push	{r4, lr}
    d438:	2100      	movs	r1, #0
    d43a:	6001      	str	r1, [r0, #0]
    d43c:	2101      	movs	r1, #1
    d43e:	6001      	str	r1, [r0, #0]
    d440:	4608      	mov	r0, r1
    d442:	f004 fc03 	bl	11c4c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    d446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d44a:	2001      	movs	r0, #1
    d44c:	f004 bbf1 	b.w	11c32 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    d450:	40001ffc 	.word	0x40001ffc
    d454:	4807      	ldr	r0, [pc, #28]	; (d474 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    d456:	b510      	push	{r4, lr}
    d458:	2101      	movs	r1, #1
    d45a:	6041      	str	r1, [r0, #4]
    d45c:	1e89      	subs	r1, r1, #2
    d45e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    d462:	200c      	movs	r0, #12
    d464:	f004 fbf2 	bl	11c4c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    d468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d46c:	200c      	movs	r0, #12
    d46e:	f004 bbe0 	b.w	11c32 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    d472:	0000      	.short	0x0000
    d474:	4000c000 	.word	0x4000c000

0000d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    d478:	b50e      	push	{r1, r2, r3, lr}
    d47a:	b672      	cpsid	i
    d47c:	4a0f      	ldr	r2, [pc, #60]	; (d4bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    d47e:	6855      	ldr	r5, [r2, #4]
    d480:	b1d5      	cbz	r5, d4b8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    d482:	2200      	movs	r2, #0
    d484:	4603      	mov	r3, r0
    d486:	466e      	mov	r6, sp
    d488:	240a      	movs	r4, #10
    d48a:	e003      	b.n	d494 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    d48c:	fbb0 f0f4 	udiv	r0, r0, r4
    d490:	1c52      	adds	r2, r2, #1
    d492:	b2d2      	uxtb	r2, r2
    d494:	2800      	cmp	r0, #0
    d496:	d1f9      	bne.n	d48c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    d498:	54b0      	strb	r0, [r6, r2]
    d49a:	e009      	b.n	d4b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    d49c:	fbb3 f0f4 	udiv	r0, r3, r4
    d4a0:	fb04 3010 	mls	r0, r4, r0, r3
    d4a4:	fbb3 f3f4 	udiv	r3, r3, r4
    d4a8:	1e52      	subs	r2, r2, #1
    d4aa:	b2d2      	uxtb	r2, r2
    d4ac:	3030      	adds	r0, #48	; 0x30
    d4ae:	54b0      	strb	r0, [r6, r2]
    d4b0:	2a00      	cmp	r2, #0
    d4b2:	d1f3      	bne.n	d49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    d4b4:	4630      	mov	r0, r6
    d4b6:	47a8      	blx	r5
    d4b8:	f7ff ffa0 	bl	d3fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    d4bc:	20000338 	.word	0x20000338

0000d4c0 <mpsl_init>:
    d4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4c4:	4c18      	ldr	r4, [pc, #96]	; (d528 <mpsl_init+0x68>)
    d4c6:	4606      	mov	r6, r0
    d4c8:	4617      	mov	r7, r2
    d4ca:	7860      	ldrb	r0, [r4, #1]
    d4cc:	460d      	mov	r5, r1
    d4ce:	b118      	cbz	r0, d4d8 <mpsl_init+0x18>
    d4d0:	f04f 30ff 	mov.w	r0, #4294967295
    d4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4d8:	f7fc f9b0 	bl	983c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    d4dc:	b906      	cbnz	r6, d4e0 <mpsl_init+0x20>
    d4de:	4e13      	ldr	r6, [pc, #76]	; (d52c <mpsl_init+0x6c>)
    d4e0:	6067      	str	r7, [r4, #4]
    d4e2:	7025      	strb	r5, [r4, #0]
    d4e4:	f7ff ffa6 	bl	d434 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    d4e8:	f7ff ffb4 	bl	d454 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    d4ec:	4630      	mov	r0, r6
    d4ee:	f7ff fe65 	bl	d1bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    d4f2:	0006      	movs	r6, r0
    d4f4:	d1ee      	bne.n	d4d4 <mpsl_init+0x14>
    d4f6:	f7fe fe29 	bl	c14c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    d4fa:	f7ff fedd 	bl	d2b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    d4fe:	f004 fa8a 	bl	11a16 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    d502:	4628      	mov	r0, r5
    d504:	f004 fb95 	bl	11c32 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    d508:	2001      	movs	r0, #1
    d50a:	2d00      	cmp	r5, #0
    d50c:	db09      	blt.n	d522 <mpsl_init+0x62>
    d50e:	f005 011f 	and.w	r1, r5, #31
    d512:	fa00 f101 	lsl.w	r1, r0, r1
    d516:	096a      	lsrs	r2, r5, #5
    d518:	0092      	lsls	r2, r2, #2
    d51a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    d51e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    d522:	7060      	strb	r0, [r4, #1]
    d524:	4630      	mov	r0, r6
    d526:	e7d5      	b.n	d4d4 <mpsl_init+0x14>
    d528:	20000338 	.word	0x20000338
    d52c:	00011c6e 	.word	0x00011c6e

0000d530 <mpsl_is_initialized>:
    d530:	4801      	ldr	r0, [pc, #4]	; (d538 <mpsl_is_initialized+0x8>)
    d532:	7840      	ldrb	r0, [r0, #1]
    d534:	4770      	bx	lr
    d536:	0000      	.short	0x0000
    d538:	20000338 	.word	0x20000338

0000d53c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    d53c:	4807      	ldr	r0, [pc, #28]	; (d55c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    d53e:	f990 0000 	ldrsb.w	r0, [r0]
    d542:	2800      	cmp	r0, #0
    d544:	db09      	blt.n	d55a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    d546:	f000 021f 	and.w	r2, r0, #31
    d54a:	2101      	movs	r1, #1
    d54c:	4091      	lsls	r1, r2
    d54e:	0940      	lsrs	r0, r0, #5
    d550:	0080      	lsls	r0, r0, #2
    d552:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d556:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d55a:	4770      	bx	lr
    d55c:	20000338 	.word	0x20000338

0000d560 <mpsl_temperature_get>:
    d560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d564:	2501      	movs	r5, #1
    d566:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    d56a:	0329      	lsls	r1, r5, #12
    d56c:	f04f 0800 	mov.w	r8, #0
    d570:	4640      	mov	r0, r8
    d572:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    d576:	f3bf 8f4f 	dsb	sy
    d57a:	f3bf 8f6f 	isb	sy
    d57e:	4c16      	ldr	r4, [pc, #88]	; (d5d8 <mpsl_temperature_get+0x78>)
    d580:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    d584:	200c      	movs	r0, #12
    d586:	f004 fb80 	bl	11c8a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    d58a:	4e14      	ldr	r6, [pc, #80]	; (d5dc <mpsl_temperature_get+0x7c>)
    d58c:	6830      	ldr	r0, [r6, #0]
    d58e:	43c0      	mvns	r0, r0
    d590:	f340 1700 	sbfx	r7, r0, #4, #1
    d594:	6830      	ldr	r0, [r6, #0]
    d596:	f040 0010 	orr.w	r0, r0, #16
    d59a:	6030      	str	r0, [r6, #0]
    d59c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    d5a0:	6025      	str	r5, [r4, #0]
    d5a2:	1c7f      	adds	r7, r7, #1
    d5a4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    d5a8:	b108      	cbz	r0, d5ae <mpsl_temperature_get+0x4e>
    d5aa:	b11f      	cbz	r7, d5b4 <mpsl_temperature_get+0x54>
    d5ac:	e006      	b.n	d5bc <mpsl_temperature_get+0x5c>
    d5ae:	f004 fc10 	bl	11dd2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    d5b2:	e7f7      	b.n	d5a4 <mpsl_temperature_get+0x44>
    d5b4:	6830      	ldr	r0, [r6, #0]
    d5b6:	f020 0010 	bic.w	r0, r0, #16
    d5ba:	6030      	str	r0, [r6, #0]
    d5bc:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    d5c0:	6065      	str	r5, [r4, #4]
    d5c2:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    d5c6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    d5ca:	200c      	movs	r0, #12
    d5cc:	f004 fb5d 	bl	11c8a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    d5d0:	4630      	mov	r0, r6
    d5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d5d6:	0000      	.short	0x0000
    d5d8:	4000c000 	.word	0x4000c000
    d5dc:	e000ed10 	.word	0xe000ed10

0000d5e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    d5e0:	b510      	push	{r4, lr}
    d5e2:	4602      	mov	r2, r0
    d5e4:	2005      	movs	r0, #5
    d5e6:	490c      	ldr	r1, [pc, #48]	; (d618 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    d5e8:	e004      	b.n	d5f4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    d5ea:	bf00      	nop
    d5ec:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    d5f0:	791b      	ldrb	r3, [r3, #4]
    d5f2:	b133      	cbz	r3, d602 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    d5f4:	1e40      	subs	r0, r0, #1
    d5f6:	b2c0      	uxtb	r0, r0
    d5f8:	d2f8      	bcs.n	d5ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    d5fa:	2148      	movs	r1, #72	; 0x48
    d5fc:	2069      	movs	r0, #105	; 0x69
    d5fe:	f7ff ff3b 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d602:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    d606:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    d60a:	2200      	movs	r2, #0
    d60c:	714a      	strb	r2, [r1, #5]
    d60e:	718a      	strb	r2, [r1, #6]
    d610:	2201      	movs	r2, #1
    d612:	710a      	strb	r2, [r1, #4]
    d614:	bd10      	pop	{r4, pc}
    d616:	0000      	.short	0x0000
    d618:	20001718 	.word	0x20001718

0000d61c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    d61c:	b510      	push	{r4, lr}
    d61e:	2805      	cmp	r0, #5
    d620:	d301      	bcc.n	d626 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    d622:	2158      	movs	r1, #88	; 0x58
    d624:	e006      	b.n	d634 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    d626:	490a      	ldr	r1, [pc, #40]	; (d650 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    d628:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    d62c:	7901      	ldrb	r1, [r0, #4]
    d62e:	2901      	cmp	r1, #1
    d630:	d003      	beq.n	d63a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    d632:	2159      	movs	r1, #89	; 0x59
    d634:	2069      	movs	r0, #105	; 0x69
    d636:	f7ff ff1f 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d63a:	7941      	ldrb	r1, [r0, #5]
    d63c:	7982      	ldrb	r2, [r0, #6]
    d63e:	1c49      	adds	r1, r1, #1
    d640:	b2c9      	uxtb	r1, r1
    d642:	428a      	cmp	r2, r1
    d644:	d000      	beq.n	d648 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    d646:	7141      	strb	r1, [r0, #5]
    d648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d64c:	f7ff bf76 	b.w	d53c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    d650:	20001718 	.word	0x20001718

0000d654 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    d654:	b510      	push	{r4, lr}
    d656:	2805      	cmp	r0, #5
    d658:	d303      	bcc.n	d662 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    d65a:	214f      	movs	r1, #79	; 0x4f
    d65c:	2069      	movs	r0, #105	; 0x69
    d65e:	f7ff ff0b 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d662:	4a03      	ldr	r2, [pc, #12]	; (d670 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    d664:	2100      	movs	r1, #0
    d666:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    d66a:	7101      	strb	r1, [r0, #4]
    d66c:	bd10      	pop	{r4, pc}
    d66e:	0000      	.short	0x0000
    d670:	20001718 	.word	0x20001718

0000d674 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    d674:	b570      	push	{r4, r5, r6, lr}
    d676:	2505      	movs	r5, #5
    d678:	4e0e      	ldr	r6, [pc, #56]	; (d6b4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    d67a:	4c0f      	ldr	r4, [pc, #60]	; (d6b8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    d67c:	e016      	b.n	d6ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    d67e:	7821      	ldrb	r1, [r4, #0]
    d680:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    d684:	7902      	ldrb	r2, [r0, #4]
    d686:	2a01      	cmp	r2, #1
    d688:	d108      	bne.n	d69c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    d68a:	7942      	ldrb	r2, [r0, #5]
    d68c:	7983      	ldrb	r3, [r0, #6]
    d68e:	429a      	cmp	r2, r3
    d690:	d004      	beq.n	d69c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    d692:	7942      	ldrb	r2, [r0, #5]
    d694:	7182      	strb	r2, [r0, #6]
    d696:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    d69a:	4780      	blx	r0
    d69c:	7820      	ldrb	r0, [r4, #0]
    d69e:	1c40      	adds	r0, r0, #1
    d6a0:	b2c0      	uxtb	r0, r0
    d6a2:	7020      	strb	r0, [r4, #0]
    d6a4:	2805      	cmp	r0, #5
    d6a6:	d301      	bcc.n	d6ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    d6a8:	2000      	movs	r0, #0
    d6aa:	7020      	strb	r0, [r4, #0]
    d6ac:	1e6d      	subs	r5, r5, #1
    d6ae:	b2ed      	uxtb	r5, r5
    d6b0:	d2e5      	bcs.n	d67e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    d6b2:	bd70      	pop	{r4, r5, r6, pc}
    d6b4:	20001718 	.word	0x20001718
    d6b8:	2000038a 	.word	0x2000038a

0000d6bc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    d6bc:	b500      	push	{lr}
    d6be:	f004 fb13 	bl	11ce8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    d6c2:	b940      	cbnz	r0, d6d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    d6c4:	f004 fb1a 	bl	11cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d6c8:	b928      	cbnz	r0, d6d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    d6ca:	f004 fb2e 	bl	11d2a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    d6ce:	b910      	cbnz	r0, d6d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    d6d0:	f004 fb3f 	bl	11d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d6d4:	b108      	cbz	r0, d6da <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    d6d6:	4802      	ldr	r0, [pc, #8]	; (d6e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    d6d8:	bd00      	pop	{pc}
    d6da:	4802      	ldr	r0, [pc, #8]	; (d6e4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    d6dc:	bd00      	pop	{pc}
    d6de:	0000      	.short	0x0000
    d6e0:	4000050c 	.word	0x4000050c
    d6e4:	4001e700 	.word	0x4001e700
    d6e8:	b510      	push	{r4, lr}
    d6ea:	f004 fb32 	bl	11d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d6ee:	b330      	cbz	r0, d73e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    d6f0:	f3ef 8010 	mrs	r0, PRIMASK
    d6f4:	b1c8      	cbz	r0, d72a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    d6f6:	2100      	movs	r1, #0
    d6f8:	b672      	cpsid	i
    d6fa:	4812      	ldr	r0, [pc, #72]	; (d744 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    d6fc:	6802      	ldr	r2, [r0, #0]
    d6fe:	6803      	ldr	r3, [r0, #0]
    d700:	f3c2 1200 	ubfx	r2, r2, #4, #1
    d704:	f043 0310 	orr.w	r3, r3, #16
    d708:	6003      	str	r3, [r0, #0]
    d70a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    d70e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    d712:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    d716:	431c      	orrs	r4, r3
    d718:	d000      	beq.n	d71c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    d71a:	bf40      	sev
    d71c:	bf20      	wfe
    d71e:	bf00      	nop
    d720:	bf00      	nop
    d722:	bf00      	nop
    d724:	bf00      	nop
    d726:	b112      	cbz	r2, d72e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    d728:	e005      	b.n	d736 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    d72a:	2101      	movs	r1, #1
    d72c:	e7e4      	b.n	d6f8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    d72e:	6802      	ldr	r2, [r0, #0]
    d730:	f022 0210 	bic.w	r2, r2, #16
    d734:	6002      	str	r2, [r0, #0]
    d736:	2900      	cmp	r1, #0
    d738:	d000      	beq.n	d73c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    d73a:	b662      	cpsie	i
    d73c:	bd10      	pop	{r4, pc}
    d73e:	bf20      	wfe
    d740:	bd10      	pop	{r4, pc}
    d742:	0000      	.short	0x0000
    d744:	e000ed10 	.word	0xe000ed10

0000d748 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    d748:	4901      	ldr	r1, [pc, #4]	; (d750 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    d74a:	2001      	movs	r0, #1
    d74c:	7088      	strb	r0, [r1, #2]
    d74e:	4770      	bx	lr
    d750:	20000340 	.word	0x20000340

0000d754 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    d754:	00012053 0001208b 00012075 00012063     S ... ..u ..c ..
    d764:	0001206f 0001205d 00012051 0001204f     o ..] ..Q ..O ..
    d774:	00012087 0001207b 00012069 00012057     . ..{ ..i ..W ..
    d784:	00012049 00012041 00012045 0001203b     I ..A ..E ..; ..

0000d794 <mpsl_fem_disable>:
    d794:	4801      	ldr	r0, [pc, #4]	; (d79c <mpsl_fem_disable+0x8>)
    d796:	6800      	ldr	r0, [r0, #0]
    d798:	6800      	ldr	r0, [r0, #0]
    d79a:	4700      	bx	r0
    d79c:	20000354 	.word	0x20000354

0000d7a0 <mpsl_fem_lna_configuration_clear>:
    d7a0:	4801      	ldr	r0, [pc, #4]	; (d7a8 <mpsl_fem_lna_configuration_clear+0x8>)
    d7a2:	6800      	ldr	r0, [r0, #0]
    d7a4:	6940      	ldr	r0, [r0, #20]
    d7a6:	4700      	bx	r0
    d7a8:	20000354 	.word	0x20000354

0000d7ac <mpsl_fem_lna_configuration_set>:
    d7ac:	4a01      	ldr	r2, [pc, #4]	; (d7b4 <mpsl_fem_lna_configuration_set+0x8>)
    d7ae:	6812      	ldr	r2, [r2, #0]
    d7b0:	68d2      	ldr	r2, [r2, #12]
    d7b2:	4710      	bx	r2
    d7b4:	20000354 	.word	0x20000354

0000d7b8 <mpsl_fem_lna_is_configured>:
    d7b8:	4901      	ldr	r1, [pc, #4]	; (d7c0 <mpsl_fem_lna_is_configured+0x8>)
    d7ba:	6809      	ldr	r1, [r1, #0]
    d7bc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    d7be:	4708      	bx	r1
    d7c0:	20000354 	.word	0x20000354

0000d7c4 <mpsl_fem_pa_configuration_clear>:
    d7c4:	4801      	ldr	r0, [pc, #4]	; (d7cc <mpsl_fem_pa_configuration_clear+0x8>)
    d7c6:	6800      	ldr	r0, [r0, #0]
    d7c8:	6900      	ldr	r0, [r0, #16]
    d7ca:	4700      	bx	r0
    d7cc:	20000354 	.word	0x20000354

0000d7d0 <mpsl_fem_pa_configuration_set>:
    d7d0:	4a01      	ldr	r2, [pc, #4]	; (d7d8 <mpsl_fem_pa_configuration_set+0x8>)
    d7d2:	6812      	ldr	r2, [r2, #0]
    d7d4:	6892      	ldr	r2, [r2, #8]
    d7d6:	4710      	bx	r2
    d7d8:	20000354 	.word	0x20000354

0000d7dc <mpsl_fem_pa_gain_set>:
    d7dc:	4901      	ldr	r1, [pc, #4]	; (d7e4 <mpsl_fem_pa_gain_set+0x8>)
    d7de:	6809      	ldr	r1, [r1, #0]
    d7e0:	6a49      	ldr	r1, [r1, #36]	; 0x24
    d7e2:	4708      	bx	r1
    d7e4:	20000354 	.word	0x20000354

0000d7e8 <mpsl_fem_pa_is_configured>:
    d7e8:	4901      	ldr	r1, [pc, #4]	; (d7f0 <mpsl_fem_pa_is_configured+0x8>)
    d7ea:	6809      	ldr	r1, [r1, #0]
    d7ec:	6a89      	ldr	r1, [r1, #40]	; 0x28
    d7ee:	4708      	bx	r1
    d7f0:	20000354 	.word	0x20000354

0000d7f4 <mpsl_fem_tx_power_split>:
    d7f4:	b430      	push	{r4, r5}
    d7f6:	4c03      	ldr	r4, [pc, #12]	; (d804 <mpsl_fem_tx_power_split+0x10>)
    d7f8:	6824      	ldr	r4, [r4, #0]
    d7fa:	6864      	ldr	r4, [r4, #4]
    d7fc:	46a4      	mov	ip, r4
    d7fe:	bc30      	pop	{r4, r5}
    d800:	4760      	bx	ip
    d802:	0000      	.short	0x0000
    d804:	20000354 	.word	0x20000354

0000d808 <mpsl_fem_device_config_254_apply_get>:
    d808:	4801      	ldr	r0, [pc, #4]	; (d810 <mpsl_fem_device_config_254_apply_get+0x8>)
    d80a:	7800      	ldrb	r0, [r0, #0]
    d80c:	4770      	bx	lr
    d80e:	0000      	.short	0x0000
    d810:	2000038b 	.word	0x2000038b

0000d814 <__udivmoddi4>:
    d814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d818:	4686      	mov	lr, r0
    d81a:	468c      	mov	ip, r1
    d81c:	4608      	mov	r0, r1
    d81e:	9e08      	ldr	r6, [sp, #32]
    d820:	4615      	mov	r5, r2
    d822:	4674      	mov	r4, lr
    d824:	4619      	mov	r1, r3
    d826:	2b00      	cmp	r3, #0
    d828:	f040 80c2 	bne.w	d9b0 <__udivmoddi4+0x19c>
    d82c:	4285      	cmp	r5, r0
    d82e:	fab2 f282 	clz	r2, r2
    d832:	d945      	bls.n	d8c0 <__udivmoddi4+0xac>
    d834:	b14a      	cbz	r2, d84a <__udivmoddi4+0x36>
    d836:	f1c2 0320 	rsb	r3, r2, #32
    d83a:	fa00 fc02 	lsl.w	ip, r0, r2
    d83e:	fa2e f303 	lsr.w	r3, lr, r3
    d842:	4095      	lsls	r5, r2
    d844:	ea43 0c0c 	orr.w	ip, r3, ip
    d848:	4094      	lsls	r4, r2
    d84a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d84e:	b2a8      	uxth	r0, r5
    d850:	fbbc f8fe 	udiv	r8, ip, lr
    d854:	0c23      	lsrs	r3, r4, #16
    d856:	fb0e cc18 	mls	ip, lr, r8, ip
    d85a:	fb08 f900 	mul.w	r9, r8, r0
    d85e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    d862:	4599      	cmp	r9, r3
    d864:	d928      	bls.n	d8b8 <__udivmoddi4+0xa4>
    d866:	18eb      	adds	r3, r5, r3
    d868:	f108 37ff 	add.w	r7, r8, #4294967295
    d86c:	d204      	bcs.n	d878 <__udivmoddi4+0x64>
    d86e:	4599      	cmp	r9, r3
    d870:	d902      	bls.n	d878 <__udivmoddi4+0x64>
    d872:	f1a8 0702 	sub.w	r7, r8, #2
    d876:	442b      	add	r3, r5
    d878:	eba3 0309 	sub.w	r3, r3, r9
    d87c:	b2a4      	uxth	r4, r4
    d87e:	fbb3 fcfe 	udiv	ip, r3, lr
    d882:	fb0e 331c 	mls	r3, lr, ip, r3
    d886:	fb0c f000 	mul.w	r0, ip, r0
    d88a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    d88e:	42a0      	cmp	r0, r4
    d890:	d914      	bls.n	d8bc <__udivmoddi4+0xa8>
    d892:	192c      	adds	r4, r5, r4
    d894:	f10c 33ff 	add.w	r3, ip, #4294967295
    d898:	d204      	bcs.n	d8a4 <__udivmoddi4+0x90>
    d89a:	42a0      	cmp	r0, r4
    d89c:	d902      	bls.n	d8a4 <__udivmoddi4+0x90>
    d89e:	f1ac 0302 	sub.w	r3, ip, #2
    d8a2:	442c      	add	r4, r5
    d8a4:	1a24      	subs	r4, r4, r0
    d8a6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    d8aa:	b11e      	cbz	r6, d8b4 <__udivmoddi4+0xa0>
    d8ac:	40d4      	lsrs	r4, r2
    d8ae:	2300      	movs	r3, #0
    d8b0:	6034      	str	r4, [r6, #0]
    d8b2:	6073      	str	r3, [r6, #4]
    d8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d8b8:	4647      	mov	r7, r8
    d8ba:	e7dd      	b.n	d878 <__udivmoddi4+0x64>
    d8bc:	4663      	mov	r3, ip
    d8be:	e7f1      	b.n	d8a4 <__udivmoddi4+0x90>
    d8c0:	bb92      	cbnz	r2, d928 <__udivmoddi4+0x114>
    d8c2:	1b43      	subs	r3, r0, r5
    d8c4:	2101      	movs	r1, #1
    d8c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d8ca:	b2af      	uxth	r7, r5
    d8cc:	fbb3 fcfe 	udiv	ip, r3, lr
    d8d0:	0c20      	lsrs	r0, r4, #16
    d8d2:	fb0e 331c 	mls	r3, lr, ip, r3
    d8d6:	fb0c f807 	mul.w	r8, ip, r7
    d8da:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    d8de:	4598      	cmp	r8, r3
    d8e0:	d962      	bls.n	d9a8 <__udivmoddi4+0x194>
    d8e2:	18eb      	adds	r3, r5, r3
    d8e4:	f10c 30ff 	add.w	r0, ip, #4294967295
    d8e8:	d204      	bcs.n	d8f4 <__udivmoddi4+0xe0>
    d8ea:	4598      	cmp	r8, r3
    d8ec:	d902      	bls.n	d8f4 <__udivmoddi4+0xe0>
    d8ee:	f1ac 0002 	sub.w	r0, ip, #2
    d8f2:	442b      	add	r3, r5
    d8f4:	eba3 0308 	sub.w	r3, r3, r8
    d8f8:	b2a4      	uxth	r4, r4
    d8fa:	fbb3 fcfe 	udiv	ip, r3, lr
    d8fe:	fb0e 331c 	mls	r3, lr, ip, r3
    d902:	fb0c f707 	mul.w	r7, ip, r7
    d906:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    d90a:	42a7      	cmp	r7, r4
    d90c:	d94e      	bls.n	d9ac <__udivmoddi4+0x198>
    d90e:	192c      	adds	r4, r5, r4
    d910:	f10c 33ff 	add.w	r3, ip, #4294967295
    d914:	d204      	bcs.n	d920 <__udivmoddi4+0x10c>
    d916:	42a7      	cmp	r7, r4
    d918:	d902      	bls.n	d920 <__udivmoddi4+0x10c>
    d91a:	f1ac 0302 	sub.w	r3, ip, #2
    d91e:	442c      	add	r4, r5
    d920:	1be4      	subs	r4, r4, r7
    d922:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    d926:	e7c0      	b.n	d8aa <__udivmoddi4+0x96>
    d928:	f1c2 0320 	rsb	r3, r2, #32
    d92c:	fa20 f103 	lsr.w	r1, r0, r3
    d930:	4095      	lsls	r5, r2
    d932:	4090      	lsls	r0, r2
    d934:	fa2e f303 	lsr.w	r3, lr, r3
    d938:	4303      	orrs	r3, r0
    d93a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d93e:	b2af      	uxth	r7, r5
    d940:	fbb1 fcfe 	udiv	ip, r1, lr
    d944:	fb0e 101c 	mls	r0, lr, ip, r1
    d948:	0c19      	lsrs	r1, r3, #16
    d94a:	fb0c f807 	mul.w	r8, ip, r7
    d94e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    d952:	4588      	cmp	r8, r1
    d954:	fa04 f402 	lsl.w	r4, r4, r2
    d958:	d922      	bls.n	d9a0 <__udivmoddi4+0x18c>
    d95a:	1869      	adds	r1, r5, r1
    d95c:	f10c 30ff 	add.w	r0, ip, #4294967295
    d960:	d204      	bcs.n	d96c <__udivmoddi4+0x158>
    d962:	4588      	cmp	r8, r1
    d964:	d902      	bls.n	d96c <__udivmoddi4+0x158>
    d966:	f1ac 0002 	sub.w	r0, ip, #2
    d96a:	4429      	add	r1, r5
    d96c:	eba1 0108 	sub.w	r1, r1, r8
    d970:	b29b      	uxth	r3, r3
    d972:	fbb1 fcfe 	udiv	ip, r1, lr
    d976:	fb0e 111c 	mls	r1, lr, ip, r1
    d97a:	fb0c f707 	mul.w	r7, ip, r7
    d97e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    d982:	429f      	cmp	r7, r3
    d984:	d90e      	bls.n	d9a4 <__udivmoddi4+0x190>
    d986:	18eb      	adds	r3, r5, r3
    d988:	f10c 31ff 	add.w	r1, ip, #4294967295
    d98c:	d204      	bcs.n	d998 <__udivmoddi4+0x184>
    d98e:	429f      	cmp	r7, r3
    d990:	d902      	bls.n	d998 <__udivmoddi4+0x184>
    d992:	f1ac 0102 	sub.w	r1, ip, #2
    d996:	442b      	add	r3, r5
    d998:	1bdb      	subs	r3, r3, r7
    d99a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    d99e:	e792      	b.n	d8c6 <__udivmoddi4+0xb2>
    d9a0:	4660      	mov	r0, ip
    d9a2:	e7e3      	b.n	d96c <__udivmoddi4+0x158>
    d9a4:	4661      	mov	r1, ip
    d9a6:	e7f7      	b.n	d998 <__udivmoddi4+0x184>
    d9a8:	4660      	mov	r0, ip
    d9aa:	e7a3      	b.n	d8f4 <__udivmoddi4+0xe0>
    d9ac:	4663      	mov	r3, ip
    d9ae:	e7b7      	b.n	d920 <__udivmoddi4+0x10c>
    d9b0:	4283      	cmp	r3, r0
    d9b2:	d906      	bls.n	d9c2 <__udivmoddi4+0x1ae>
    d9b4:	b916      	cbnz	r6, d9bc <__udivmoddi4+0x1a8>
    d9b6:	2100      	movs	r1, #0
    d9b8:	4608      	mov	r0, r1
    d9ba:	e77b      	b.n	d8b4 <__udivmoddi4+0xa0>
    d9bc:	e9c6 e000 	strd	lr, r0, [r6]
    d9c0:	e7f9      	b.n	d9b6 <__udivmoddi4+0x1a2>
    d9c2:	fab3 f783 	clz	r7, r3
    d9c6:	b98f      	cbnz	r7, d9ec <__udivmoddi4+0x1d8>
    d9c8:	4283      	cmp	r3, r0
    d9ca:	d301      	bcc.n	d9d0 <__udivmoddi4+0x1bc>
    d9cc:	4572      	cmp	r2, lr
    d9ce:	d808      	bhi.n	d9e2 <__udivmoddi4+0x1ce>
    d9d0:	ebbe 0402 	subs.w	r4, lr, r2
    d9d4:	eb60 0303 	sbc.w	r3, r0, r3
    d9d8:	2001      	movs	r0, #1
    d9da:	469c      	mov	ip, r3
    d9dc:	b91e      	cbnz	r6, d9e6 <__udivmoddi4+0x1d2>
    d9de:	2100      	movs	r1, #0
    d9e0:	e768      	b.n	d8b4 <__udivmoddi4+0xa0>
    d9e2:	4638      	mov	r0, r7
    d9e4:	e7fa      	b.n	d9dc <__udivmoddi4+0x1c8>
    d9e6:	e9c6 4c00 	strd	r4, ip, [r6]
    d9ea:	e7f8      	b.n	d9de <__udivmoddi4+0x1ca>
    d9ec:	f1c7 0c20 	rsb	ip, r7, #32
    d9f0:	40bb      	lsls	r3, r7
    d9f2:	fa22 f40c 	lsr.w	r4, r2, ip
    d9f6:	431c      	orrs	r4, r3
    d9f8:	fa2e f10c 	lsr.w	r1, lr, ip
    d9fc:	fa20 f30c 	lsr.w	r3, r0, ip
    da00:	40b8      	lsls	r0, r7
    da02:	4301      	orrs	r1, r0
    da04:	ea4f 4914 	mov.w	r9, r4, lsr #16
    da08:	fa0e f507 	lsl.w	r5, lr, r7
    da0c:	fbb3 f8f9 	udiv	r8, r3, r9
    da10:	fa1f fe84 	uxth.w	lr, r4
    da14:	fb09 3018 	mls	r0, r9, r8, r3
    da18:	0c0b      	lsrs	r3, r1, #16
    da1a:	fb08 fa0e 	mul.w	sl, r8, lr
    da1e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    da22:	459a      	cmp	sl, r3
    da24:	fa02 f207 	lsl.w	r2, r2, r7
    da28:	d940      	bls.n	daac <__udivmoddi4+0x298>
    da2a:	18e3      	adds	r3, r4, r3
    da2c:	f108 30ff 	add.w	r0, r8, #4294967295
    da30:	d204      	bcs.n	da3c <__udivmoddi4+0x228>
    da32:	459a      	cmp	sl, r3
    da34:	d902      	bls.n	da3c <__udivmoddi4+0x228>
    da36:	f1a8 0002 	sub.w	r0, r8, #2
    da3a:	4423      	add	r3, r4
    da3c:	eba3 030a 	sub.w	r3, r3, sl
    da40:	b289      	uxth	r1, r1
    da42:	fbb3 f8f9 	udiv	r8, r3, r9
    da46:	fb09 3318 	mls	r3, r9, r8, r3
    da4a:	fb08 fe0e 	mul.w	lr, r8, lr
    da4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    da52:	458e      	cmp	lr, r1
    da54:	d92c      	bls.n	dab0 <__udivmoddi4+0x29c>
    da56:	1861      	adds	r1, r4, r1
    da58:	f108 33ff 	add.w	r3, r8, #4294967295
    da5c:	d204      	bcs.n	da68 <__udivmoddi4+0x254>
    da5e:	458e      	cmp	lr, r1
    da60:	d902      	bls.n	da68 <__udivmoddi4+0x254>
    da62:	f1a8 0302 	sub.w	r3, r8, #2
    da66:	4421      	add	r1, r4
    da68:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    da6c:	fba0 9802 	umull	r9, r8, r0, r2
    da70:	eba1 010e 	sub.w	r1, r1, lr
    da74:	4541      	cmp	r1, r8
    da76:	46ce      	mov	lr, r9
    da78:	4643      	mov	r3, r8
    da7a:	d302      	bcc.n	da82 <__udivmoddi4+0x26e>
    da7c:	d106      	bne.n	da8c <__udivmoddi4+0x278>
    da7e:	454d      	cmp	r5, r9
    da80:	d204      	bcs.n	da8c <__udivmoddi4+0x278>
    da82:	ebb9 0e02 	subs.w	lr, r9, r2
    da86:	eb68 0304 	sbc.w	r3, r8, r4
    da8a:	3801      	subs	r0, #1
    da8c:	2e00      	cmp	r6, #0
    da8e:	d0a6      	beq.n	d9de <__udivmoddi4+0x1ca>
    da90:	ebb5 020e 	subs.w	r2, r5, lr
    da94:	eb61 0103 	sbc.w	r1, r1, r3
    da98:	fa01 fc0c 	lsl.w	ip, r1, ip
    da9c:	fa22 f307 	lsr.w	r3, r2, r7
    daa0:	ea4c 0303 	orr.w	r3, ip, r3
    daa4:	40f9      	lsrs	r1, r7
    daa6:	e9c6 3100 	strd	r3, r1, [r6]
    daaa:	e798      	b.n	d9de <__udivmoddi4+0x1ca>
    daac:	4640      	mov	r0, r8
    daae:	e7c5      	b.n	da3c <__udivmoddi4+0x228>
    dab0:	4643      	mov	r3, r8
    dab2:	e7d9      	b.n	da68 <__udivmoddi4+0x254>
    dab4:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    dab8:	4681      	mov	r9, r0
    daba:	f100 0007 	add.w	r0, r0, #7
    dabe:	f020 0007 	bic.w	r0, r0, #7
    dac2:	ea5f 0802 	movs.w	r8, r2
    dac6:	9000      	str	r0, [sp, #0]
    dac8:	784a      	ldrb	r2, [r1, #1]
    daca:	f88d 2004 	strb.w	r2, [sp, #4]
    dace:	788a      	ldrb	r2, [r1, #2]
    dad0:	460c      	mov	r4, r1
    dad2:	f88d 2005 	strb.w	r2, [sp, #5]
    dad6:	d000      	beq.n	dada <__udivmoddi4+0x2c6>
    dad8:	2000      	movs	r0, #0
    dada:	a901      	add	r1, sp, #4
    dadc:	f7f4 faaa 	bl	2034 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    dae0:	9900      	ldr	r1, [sp, #0]
    dae2:	2600      	movs	r6, #0
    dae4:	4408      	add	r0, r1
    dae6:	9000      	str	r0, [sp, #0]
    dae8:	7820      	ldrb	r0, [r4, #0]
    daea:	7861      	ldrb	r1, [r4, #1]
    daec:	4635      	mov	r5, r6
    daee:	4408      	add	r0, r1
    daf0:	b2c7      	uxtb	r7, r0
    daf2:	e008      	b.n	db06 <__udivmoddi4+0x2f2>
    daf4:	7a23      	ldrb	r3, [r4, #8]
    daf6:	79e2      	ldrb	r2, [r4, #7]
    daf8:	79a1      	ldrb	r1, [r4, #6]
    dafa:	7960      	ldrb	r0, [r4, #5]
    dafc:	f000 fe55 	bl	e7aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    db00:	1c6d      	adds	r5, r5, #1
    db02:	4406      	add	r6, r0
    db04:	b2ed      	uxtb	r5, r5
    db06:	42bd      	cmp	r5, r7
    db08:	d3f4      	bcc.n	daf4 <__udivmoddi4+0x2e0>
    db0a:	9800      	ldr	r0, [sp, #0]
    db0c:	1cc0      	adds	r0, r0, #3
    db0e:	f020 0003 	bic.w	r0, r0, #3
    db12:	9000      	str	r0, [sp, #0]
    db14:	f1b8 0f00 	cmp.w	r8, #0
    db18:	d000      	beq.n	db1c <__udivmoddi4+0x308>
    db1a:	2000      	movs	r0, #0
    db1c:	4632      	mov	r2, r6
    db1e:	4639      	mov	r1, r7
    db20:	f7f4 fbc2 	bl	22a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    db24:	9900      	ldr	r1, [sp, #0]
    db26:	4642      	mov	r2, r8
    db28:	4408      	add	r0, r1
    db2a:	9000      	str	r0, [sp, #0]
    db2c:	4621      	mov	r1, r4
    db2e:	4668      	mov	r0, sp
    db30:	f000 f805 	bl	db3e <__udivmoddi4+0x32a>
    db34:	9900      	ldr	r1, [sp, #0]
    db36:	eba1 0009 	sub.w	r0, r1, r9
    db3a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    db3e:	b570      	push	{r4, r5, r6, lr}
    db40:	4605      	mov	r5, r0
    db42:	7888      	ldrb	r0, [r1, #2]
    db44:	4616      	mov	r6, r2
    db46:	460c      	mov	r4, r1
    db48:	b188      	cbz	r0, db6e <__udivmoddi4+0x35a>
    db4a:	6828      	ldr	r0, [r5, #0]
    db4c:	1cc0      	adds	r0, r0, #3
    db4e:	f020 0003 	bic.w	r0, r0, #3
    db52:	6028      	str	r0, [r5, #0]
    db54:	7de1      	ldrb	r1, [r4, #23]
    db56:	78e2      	ldrb	r2, [r4, #3]
    db58:	8a63      	ldrh	r3, [r4, #18]
    db5a:	4411      	add	r1, r2
    db5c:	b2ca      	uxtb	r2, r1
    db5e:	78a1      	ldrb	r1, [r4, #2]
    db60:	b106      	cbz	r6, db64 <__udivmoddi4+0x350>
    db62:	2000      	movs	r0, #0
    db64:	f7f4 fc54 	bl	2410 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    db68:	6829      	ldr	r1, [r5, #0]
    db6a:	4408      	add	r0, r1
    db6c:	6028      	str	r0, [r5, #0]
    db6e:	7d20      	ldrb	r0, [r4, #20]
    db70:	2800      	cmp	r0, #0
    db72:	d00f      	beq.n	db94 <__udivmoddi4+0x380>
    db74:	78a0      	ldrb	r0, [r4, #2]
    db76:	2800      	cmp	r0, #0
    db78:	d00c      	beq.n	db94 <__udivmoddi4+0x380>
    db7a:	6828      	ldr	r0, [r5, #0]
    db7c:	1dc0      	adds	r0, r0, #7
    db7e:	f020 0007 	bic.w	r0, r0, #7
    db82:	6028      	str	r0, [r5, #0]
    db84:	7d21      	ldrb	r1, [r4, #20]
    db86:	b106      	cbz	r6, db8a <__udivmoddi4+0x376>
    db88:	2000      	movs	r0, #0
    db8a:	f7f6 fc49 	bl	4420 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
    db8e:	6829      	ldr	r1, [r5, #0]
    db90:	4408      	add	r0, r1
    db92:	6028      	str	r0, [r5, #0]
    db94:	bd70      	pop	{r4, r5, r6, pc}

0000db96 <sdc_soc_ecb_block_encrypt>:
    db96:	b530      	push	{r4, r5, lr}
    db98:	460d      	mov	r5, r1
    db9a:	b08d      	sub	sp, #52	; 0x34
    db9c:	4614      	mov	r4, r2
    db9e:	4601      	mov	r1, r0
    dba0:	2210      	movs	r2, #16
    dba2:	4668      	mov	r0, sp
    dba4:	f004 f96f 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dba8:	2210      	movs	r2, #16
    dbaa:	4629      	mov	r1, r5
    dbac:	a804      	add	r0, sp, #16
    dbae:	f004 f96a 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dbb2:	4668      	mov	r0, sp
    dbb4:	f000 ff7e 	bl	eab4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    dbb8:	b118      	cbz	r0, dbc2 <sdc_soc_ecb_block_encrypt+0x2c>
    dbba:	f06f 0015 	mvn.w	r0, #21
    dbbe:	b00d      	add	sp, #52	; 0x34
    dbc0:	bd30      	pop	{r4, r5, pc}
    dbc2:	2210      	movs	r2, #16
    dbc4:	4620      	mov	r0, r4
    dbc6:	a908      	add	r1, sp, #32
    dbc8:	f004 f95d 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dbcc:	2000      	movs	r0, #0
    dbce:	e7f6      	b.n	dbbe <sdc_soc_ecb_block_encrypt+0x28>

0000dbd0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    dbd0:	b50e      	push	{r1, r2, r3, lr}
    dbd2:	4601      	mov	r1, r0
    dbd4:	4668      	mov	r0, sp
    dbd6:	f000 f818 	bl	dc0a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    dbda:	4668      	mov	r0, sp
    dbdc:	f001 fbee 	bl	f3bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    dbe0:	bd0e      	pop	{r1, r2, r3, pc}
    dbe2:	b570      	push	{r4, r5, r6, lr}
    dbe4:	460c      	mov	r4, r1
    dbe6:	4605      	mov	r5, r0
    dbe8:	f7f4 f862 	bl	1cb0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    dbec:	2800      	cmp	r0, #0
    dbee:	d002      	beq.n	dbf6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    dbf0:	2d3e      	cmp	r5, #62	; 0x3e
    dbf2:	d001      	beq.n	dbf8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    dbf4:	2001      	movs	r0, #1
    dbf6:	bd70      	pop	{r4, r5, r6, pc}
    dbf8:	2c12      	cmp	r4, #18
    dbfa:	d004      	beq.n	dc06 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    dbfc:	4620      	mov	r0, r4
    dbfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dc02:	f7f4 b867 	b.w	1cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    dc06:	2000      	movs	r0, #0
    dc08:	bd70      	pop	{r4, r5, r6, pc}

0000dc0a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    dc0a:	880a      	ldrh	r2, [r1, #0]
    dc0c:	f3c2 020b 	ubfx	r2, r2, #0, #12
    dc10:	8082      	strh	r2, [r0, #4]
    dc12:	884a      	ldrh	r2, [r1, #2]
    dc14:	80c2      	strh	r2, [r0, #6]
    dc16:	784a      	ldrb	r2, [r1, #1]
    dc18:	0993      	lsrs	r3, r2, #6
    dc1a:	2200      	movs	r2, #0
    dc1c:	7242      	strb	r2, [r0, #9]
    dc1e:	784b      	ldrb	r3, [r1, #1]
    dc20:	f3c3 1301 	ubfx	r3, r3, #4, #2
    dc24:	b11b      	cbz	r3, dc2e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    dc26:	2b01      	cmp	r3, #1
    dc28:	d005      	beq.n	dc36 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    dc2a:	2b02      	cmp	r3, #2
    dc2c:	d005      	beq.n	dc3a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    dc2e:	7202      	strb	r2, [r0, #8]
    dc30:	1d09      	adds	r1, r1, #4
    dc32:	6001      	str	r1, [r0, #0]
    dc34:	4770      	bx	lr
    dc36:	2201      	movs	r2, #1
    dc38:	e7f9      	b.n	dc2e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    dc3a:	2202      	movs	r2, #2
    dc3c:	e7f7      	b.n	dc2e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000dc3e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    dc3e:	b510      	push	{r4, lr}
    dc40:	460c      	mov	r4, r1
    dc42:	7909      	ldrb	r1, [r1, #4]
    dc44:	7001      	strb	r1, [r0, #0]
    dc46:	7841      	ldrb	r1, [r0, #1]
    dc48:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    dc4c:	7041      	strb	r1, [r0, #1]
    dc4e:	88a2      	ldrh	r2, [r4, #4]
    dc50:	f3c2 2203 	ubfx	r2, r2, #8, #4
    dc54:	4311      	orrs	r1, r2
    dc56:	7041      	strb	r1, [r0, #1]
    dc58:	79a2      	ldrb	r2, [r4, #6]
    dc5a:	7082      	strb	r2, [r0, #2]
    dc5c:	88e2      	ldrh	r2, [r4, #6]
    dc5e:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    dc62:	0a12      	lsrs	r2, r2, #8
    dc64:	70c2      	strb	r2, [r0, #3]
    dc66:	7041      	strb	r1, [r0, #1]
    dc68:	7a22      	ldrb	r2, [r4, #8]
    dc6a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    dc6e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    dc72:	7041      	strb	r1, [r0, #1]
    dc74:	7a62      	ldrb	r2, [r4, #9]
    dc76:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    dc7a:	7041      	strb	r1, [r0, #1]
    dc7c:	6821      	ldr	r1, [r4, #0]
    dc7e:	1d02      	adds	r2, r0, #4
    dc80:	4291      	cmp	r1, r2
    dc82:	d006      	beq.n	dc92 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    dc84:	88e2      	ldrh	r2, [r4, #6]
    dc86:	2afb      	cmp	r2, #251	; 0xfb
    dc88:	d300      	bcc.n	dc8c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    dc8a:	22fb      	movs	r2, #251	; 0xfb
    dc8c:	1d00      	adds	r0, r0, #4
    dc8e:	f004 f8fa 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dc92:	79a0      	ldrb	r0, [r4, #6]
    dc94:	1d00      	adds	r0, r0, #4
    dc96:	b2c0      	uxtb	r0, r0
    dc98:	bd10      	pop	{r4, pc}

0000dc9a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    dc9a:	b430      	push	{r4, r5}
    dc9c:	790a      	ldrb	r2, [r1, #4]
    dc9e:	7002      	strb	r2, [r0, #0]
    dca0:	7842      	ldrb	r2, [r0, #1]
    dca2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    dca6:	7042      	strb	r2, [r0, #1]
    dca8:	888b      	ldrh	r3, [r1, #4]
    dcaa:	f3c3 2303 	ubfx	r3, r3, #8, #4
    dcae:	431a      	orrs	r2, r3
    dcb0:	7042      	strb	r2, [r0, #1]
    dcb2:	798b      	ldrb	r3, [r1, #6]
    dcb4:	7083      	strb	r3, [r0, #2]
    dcb6:	78c3      	ldrb	r3, [r0, #3]
    dcb8:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    dcbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    dcc0:	70c3      	strb	r3, [r0, #3]
    dcc2:	88cc      	ldrh	r4, [r1, #6]
    dcc4:	f3c4 2405 	ubfx	r4, r4, #8, #6
    dcc8:	4323      	orrs	r3, r4
    dcca:	70c3      	strb	r3, [r0, #3]
    dccc:	7042      	strb	r2, [r0, #1]
    dcce:	7a0c      	ldrb	r4, [r1, #8]
    dcd0:	f004 0403 	and.w	r4, r4, #3
    dcd4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    dcd8:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    dcdc:	7042      	strb	r2, [r0, #1]
    dcde:	7a4c      	ldrb	r4, [r1, #9]
    dce0:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    dce4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    dce8:	7042      	strb	r2, [r0, #1]
    dcea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    dcee:	70c2      	strb	r2, [r0, #3]
    dcf0:	680b      	ldr	r3, [r1, #0]
    dcf2:	1d02      	adds	r2, r0, #4
    dcf4:	4293      	cmp	r3, r2
    dcf6:	d005      	beq.n	dd04 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    dcf8:	88ca      	ldrh	r2, [r1, #6]
    dcfa:	bc30      	pop	{r4, r5}
    dcfc:	4619      	mov	r1, r3
    dcfe:	1d00      	adds	r0, r0, #4
    dd00:	f004 b8c1 	b.w	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd04:	bc30      	pop	{r4, r5}
    dd06:	4770      	bx	lr

0000dd08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    dd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd0c:	460d      	mov	r5, r1
    dd0e:	4604      	mov	r4, r0
    dd10:	f891 c000 	ldrb.w	ip, [r1]
    dd14:	2000      	movs	r0, #0
    dd16:	230c      	movs	r3, #12
    dd18:	2705      	movs	r7, #5
    dd1a:	2203      	movs	r2, #3
    dd1c:	263e      	movs	r6, #62	; 0x3e
    dd1e:	21ff      	movs	r1, #255	; 0xff
    dd20:	f1bc 0f1e 	cmp.w	ip, #30
    dd24:	d27e      	bcs.n	de24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
    dd26:	e8df f00c 	tbb	[pc, ip]
    dd2a:	29e7      	.short	0x29e7
    dd2c:	63e74240 	.word	0x63e74240
    dd30:	ac99806d 	.word	0xac99806d
    dd34:	dfc4b9ae 	.word	0xdfc4b9ae
    dd38:	e7e70ff3 	.word	0xe7e70ff3
    dd3c:	fcd2cf48 	.word	0xfcd2cf48
    dd40:	edeeeff0 	.word	0xedeeeff0
    dd44:	e9eaebec 	.word	0xe9eaebec
    dd48:	200e      	movs	r0, #14
    dd4a:	7020      	strb	r0, [r4, #0]
    dd4c:	7968      	ldrb	r0, [r5, #5]
    dd4e:	70e0      	strb	r0, [r4, #3]
    dd50:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    dd54:	0a00      	lsrs	r0, r0, #8
    dd56:	7120      	strb	r0, [r4, #4]
    dd58:	7928      	ldrb	r0, [r5, #4]
    dd5a:	70a0      	strb	r0, [r4, #2]
    dd5c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    dd60:	3883      	subs	r0, #131	; 0x83
    dd62:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    dd66:	d003      	beq.n	dd70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x68>
    dd68:	2136      	movs	r1, #54	; 0x36
    dd6a:	20c7      	movs	r0, #199	; 0xc7
    dd6c:	f7f3 fe20 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd70:	1de9      	adds	r1, r5, #7
    dd72:	1d60      	adds	r0, r4, #5
    dd74:	f004 f887 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd78:	2007      	movs	r0, #7
    dd7a:	e0bb      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    dd7c:	7023      	strb	r3, [r4, #0]
    dd7e:	7928      	ldrb	r0, [r5, #4]
    dd80:	70a0      	strb	r0, [r4, #2]
    dd82:	7968      	ldrb	r0, [r5, #5]
    dd84:	70e0      	strb	r0, [r4, #3]
    dd86:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    dd8a:	0a00      	lsrs	r0, r0, #8
    dd8c:	7120      	strb	r0, [r4, #4]
    dd8e:	79e8      	ldrb	r0, [r5, #7]
    dd90:	7160      	strb	r0, [r4, #5]
    dd92:	7a28      	ldrb	r0, [r5, #8]
    dd94:	71a0      	strb	r0, [r4, #6]
    dd96:	8928      	ldrh	r0, [r5, #8]
    dd98:	0a00      	lsrs	r0, r0, #8
    dd9a:	71e0      	strb	r0, [r4, #7]
    dd9c:	7aa8      	ldrb	r0, [r5, #10]
    dd9e:	7220      	strb	r0, [r4, #8]
    dda0:	8968      	ldrh	r0, [r5, #10]
    dda2:	0a00      	lsrs	r0, r0, #8
    dda4:	7260      	strb	r0, [r4, #9]
    dda6:	2008      	movs	r0, #8
    dda8:	e0a4      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ddaa:	2010      	movs	r0, #16
    ddac:	e000      	b.n	ddb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    ddae:	201a      	movs	r0, #26
    ddb0:	7020      	strb	r0, [r4, #0]
    ddb2:	7928      	ldrb	r0, [r5, #4]
    ddb4:	70a0      	strb	r0, [r4, #2]
    ddb6:	2001      	movs	r0, #1
    ddb8:	e09c      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ddba:	2029      	movs	r0, #41	; 0x29
    ddbc:	f7f3 ff8a 	bl	1cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    ddc0:	b148      	cbz	r0, ddd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xce>
    ddc2:	7026      	strb	r6, [r4, #0]
    ddc4:	2029      	movs	r0, #41	; 0x29
    ddc6:	70a0      	strb	r0, [r4, #2]
    ddc8:	2221      	movs	r2, #33	; 0x21
    ddca:	1d29      	adds	r1, r5, #4
    ddcc:	1ce0      	adds	r0, r4, #3
    ddce:	f004 f85a 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ddd2:	2022      	movs	r0, #34	; 0x22
    ddd4:	e08e      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ddd6:	200a      	movs	r0, #10
    ddd8:	f7f3 ff7c 	bl	1cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    dddc:	2800      	cmp	r0, #0
    ddde:	4629      	mov	r1, r5
    dde0:	4620      	mov	r0, r4
    dde2:	d002      	beq.n	ddea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xe2>
    dde4:	f000 f95b 	bl	e09e <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    dde8:	e082      	b.n	def0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    ddea:	f000 f92f 	bl	e04c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    ddee:	e07f      	b.n	def0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    ddf0:	7026      	strb	r6, [r4, #0]
    ddf2:	2014      	movs	r0, #20
    ddf4:	70a0      	strb	r0, [r4, #2]
    ddf6:	7928      	ldrb	r0, [r5, #4]
    ddf8:	70e0      	strb	r0, [r4, #3]
    ddfa:	88a8      	ldrh	r0, [r5, #4]
    ddfc:	0a00      	lsrs	r0, r0, #8
    ddfe:	7120      	strb	r0, [r4, #4]
    de00:	79a8      	ldrb	r0, [r5, #6]
    de02:	e0c0      	b.n	df86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    de04:	223e      	movs	r2, #62	; 0x3e
    de06:	7022      	strb	r2, [r4, #0]
    de08:	2204      	movs	r2, #4
    de0a:	70a2      	strb	r2, [r4, #2]
    de0c:	6868      	ldr	r0, [r5, #4]
    de0e:	f8c4 0003 	str.w	r0, [r4, #3]
    de12:	68a8      	ldr	r0, [r5, #8]
    de14:	f8c4 0007 	str.w	r0, [r4, #7]
    de18:	89a8      	ldrh	r0, [r5, #12]
    de1a:	f8a4 000b 	strh.w	r0, [r4, #11]
    de1e:	7ba8      	ldrb	r0, [r5, #14]
    de20:	7360      	strb	r0, [r4, #13]
    de22:	e000      	b.n	de26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
    de24:	e068      	b.n	def8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    de26:	200c      	movs	r0, #12
    de28:	e064      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    de2a:	7026      	strb	r6, [r4, #0]
    de2c:	70a2      	strb	r2, [r4, #2]
    de2e:	7928      	ldrb	r0, [r5, #4]
    de30:	70e0      	strb	r0, [r4, #3]
    de32:	79a8      	ldrb	r0, [r5, #6]
    de34:	7120      	strb	r0, [r4, #4]
    de36:	88e8      	ldrh	r0, [r5, #6]
    de38:	0a00      	lsrs	r0, r0, #8
    de3a:	7160      	strb	r0, [r4, #5]
    de3c:	7a28      	ldrb	r0, [r5, #8]
    de3e:	71a0      	strb	r0, [r4, #6]
    de40:	8928      	ldrh	r0, [r5, #8]
    de42:	0a00      	lsrs	r0, r0, #8
    de44:	71e0      	strb	r0, [r4, #7]
    de46:	7aa8      	ldrb	r0, [r5, #10]
    de48:	7220      	strb	r0, [r4, #8]
    de4a:	8968      	ldrh	r0, [r5, #10]
    de4c:	0a00      	lsrs	r0, r0, #8
    de4e:	7260      	strb	r0, [r4, #9]
    de50:	7b28      	ldrb	r0, [r5, #12]
    de52:	72a0      	strb	r0, [r4, #10]
    de54:	89a8      	ldrh	r0, [r5, #12]
    de56:	0a00      	lsrs	r0, r0, #8
    de58:	72e0      	strb	r0, [r4, #11]
    de5a:	e0d1      	b.n	e000 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f8>
    de5c:	7026      	strb	r6, [r4, #0]
    de5e:	70a7      	strb	r7, [r4, #2]
    de60:	7928      	ldrb	r0, [r5, #4]
    de62:	70e0      	strb	r0, [r4, #3]
    de64:	88a8      	ldrh	r0, [r5, #4]
    de66:	0a00      	lsrs	r0, r0, #8
    de68:	7120      	strb	r0, [r4, #4]
    de6a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    de6e:	f8c4 0005 	str.w	r0, [r4, #5]
    de72:	f8d5 000a 	ldr.w	r0, [r5, #10]
    de76:	f8c4 0009 	str.w	r0, [r4, #9]
    de7a:	89e8      	ldrh	r0, [r5, #14]
    de7c:	f8a4 000d 	strh.w	r0, [r4, #13]
    de80:	e0e2      	b.n	e048 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
    de82:	2011      	movs	r0, #17
    de84:	e045      	b.n	df12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20a>
    de86:	7027      	strb	r7, [r4, #0]
    de88:	7928      	ldrb	r0, [r5, #4]
    de8a:	70a0      	strb	r0, [r4, #2]
    de8c:	7968      	ldrb	r0, [r5, #5]
    de8e:	70e0      	strb	r0, [r4, #3]
    de90:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    de94:	0a00      	lsrs	r0, r0, #8
    de96:	7120      	strb	r0, [r4, #4]
    de98:	79e8      	ldrb	r0, [r5, #7]
    de9a:	e074      	b.n	df86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    de9c:	2008      	movs	r0, #8
    de9e:	7020      	strb	r0, [r4, #0]
    dea0:	7928      	ldrb	r0, [r5, #4]
    dea2:	70a0      	strb	r0, [r4, #2]
    dea4:	79a8      	ldrb	r0, [r5, #6]
    dea6:	70e0      	strb	r0, [r4, #3]
    dea8:	88e8      	ldrh	r0, [r5, #6]
    deaa:	0a00      	lsrs	r0, r0, #8
    deac:	7120      	strb	r0, [r4, #4]
    deae:	7a28      	ldrb	r0, [r5, #8]
    deb0:	e069      	b.n	df86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    deb2:	2030      	movs	r0, #48	; 0x30
    deb4:	7020      	strb	r0, [r4, #0]
    deb6:	7928      	ldrb	r0, [r5, #4]
    deb8:	70a0      	strb	r0, [r4, #2]
    deba:	79a8      	ldrb	r0, [r5, #6]
    debc:	70e0      	strb	r0, [r4, #3]
    debe:	88e8      	ldrh	r0, [r5, #6]
    dec0:	0a00      	lsrs	r0, r0, #8
    dec2:	7120      	strb	r0, [r4, #4]
    dec4:	2003      	movs	r0, #3
    dec6:	e015      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    dec8:	7026      	strb	r6, [r4, #0]
    deca:	2007      	movs	r0, #7
    decc:	e060      	b.n	df90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    dece:	7026      	strb	r6, [r4, #0]
    ded0:	70a3      	strb	r3, [r4, #2]
    ded2:	7928      	ldrb	r0, [r5, #4]
    ded4:	70e0      	strb	r0, [r4, #3]
    ded6:	79a8      	ldrb	r0, [r5, #6]
    ded8:	7120      	strb	r0, [r4, #4]
    deda:	88e8      	ldrh	r0, [r5, #6]
    dedc:	0a00      	lsrs	r0, r0, #8
    dede:	7160      	strb	r0, [r4, #5]
    dee0:	7a28      	ldrb	r0, [r5, #8]
    dee2:	71a0      	strb	r0, [r4, #6]
    dee4:	7a68      	ldrb	r0, [r5, #9]
    dee6:	e029      	b.n	df3c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    dee8:	1d29      	adds	r1, r5, #4
    deea:	4620      	mov	r0, r4
    deec:	f7f3 feb2 	bl	1c54 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>
    def0:	2800      	cmp	r0, #0
    def2:	d001      	beq.n	def8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    def4:	7060      	strb	r0, [r4, #1]
    def6:	1c80      	adds	r0, r0, #2
    def8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    defc:	e08f      	b.n	e01e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    defe:	e063      	b.n	dfc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    df00:	e044      	b.n	df8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    df02:	e06f      	b.n	dfe4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    df04:	e07e      	b.n	e004 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fc>
    df06:	e036      	b.n	df76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    df08:	e01e      	b.n	df48 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    df0a:	e01a      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    df0c:	e009      	b.n	df22 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
    df0e:	e7ff      	b.n	df10 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    df10:	2057      	movs	r0, #87	; 0x57
    df12:	7020      	strb	r0, [r4, #0]
    df14:	7928      	ldrb	r0, [r5, #4]
    df16:	70a0      	strb	r0, [r4, #2]
    df18:	88a8      	ldrh	r0, [r5, #4]
    df1a:	0a00      	lsrs	r0, r0, #8
    df1c:	70e0      	strb	r0, [r4, #3]
    df1e:	2002      	movs	r0, #2
    df20:	e7e8      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    df22:	7026      	strb	r6, [r4, #0]
    df24:	2012      	movs	r0, #18
    df26:	70a0      	strb	r0, [r4, #2]
    df28:	7928      	ldrb	r0, [r5, #4]
    df2a:	70e0      	strb	r0, [r4, #3]
    df2c:	7968      	ldrb	r0, [r5, #5]
    df2e:	7120      	strb	r0, [r4, #4]
    df30:	79a8      	ldrb	r0, [r5, #6]
    df32:	7160      	strb	r0, [r4, #5]
    df34:	88e8      	ldrh	r0, [r5, #6]
    df36:	0a00      	lsrs	r0, r0, #8
    df38:	71a0      	strb	r0, [r4, #6]
    df3a:	7a28      	ldrb	r0, [r5, #8]
    df3c:	71e0      	strb	r0, [r4, #7]
    df3e:	2006      	movs	r0, #6
    df40:	e7d8      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    df42:	7026      	strb	r6, [r4, #0]
    df44:	2020      	movs	r0, #32
    df46:	e041      	b.n	dfcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    df48:	7026      	strb	r6, [r4, #0]
    df4a:	2021      	movs	r0, #33	; 0x21
    df4c:	70a0      	strb	r0, [r4, #2]
    df4e:	7928      	ldrb	r0, [r5, #4]
    df50:	70e0      	strb	r0, [r4, #3]
    df52:	7968      	ldrb	r0, [r5, #5]
    df54:	7120      	strb	r0, [r4, #4]
    df56:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    df5a:	0a00      	lsrs	r0, r0, #8
    df5c:	7160      	strb	r0, [r4, #5]
    df5e:	79e8      	ldrb	r0, [r5, #7]
    df60:	71a0      	strb	r0, [r4, #6]
    df62:	7a28      	ldrb	r0, [r5, #8]
    df64:	71e0      	strb	r0, [r4, #7]
    df66:	7a68      	ldrb	r0, [r5, #9]
    df68:	7220      	strb	r0, [r4, #8]
    df6a:	7aa8      	ldrb	r0, [r5, #10]
    df6c:	7260      	strb	r0, [r4, #9]
    df6e:	7ae8      	ldrb	r0, [r5, #11]
    df70:	72a0      	strb	r0, [r4, #10]
    df72:	2009      	movs	r0, #9
    df74:	e7be      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    df76:	7021      	strb	r1, [r4, #0]
    df78:	20a1      	movs	r0, #161	; 0xa1
    df7a:	70a0      	strb	r0, [r4, #2]
    df7c:	7928      	ldrb	r0, [r5, #4]
    df7e:	70e0      	strb	r0, [r4, #3]
    df80:	7968      	ldrb	r0, [r5, #5]
    df82:	7120      	strb	r0, [r4, #4]
    df84:	2000      	movs	r0, #0
    df86:	7160      	strb	r0, [r4, #5]
    df88:	2004      	movs	r0, #4
    df8a:	e7b3      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    df8c:	7021      	strb	r1, [r4, #0]
    df8e:	20a2      	movs	r0, #162	; 0xa2
    df90:	70a0      	strb	r0, [r4, #2]
    df92:	7928      	ldrb	r0, [r5, #4]
    df94:	70e0      	strb	r0, [r4, #3]
    df96:	88a8      	ldrh	r0, [r5, #4]
    df98:	0a00      	lsrs	r0, r0, #8
    df9a:	7120      	strb	r0, [r4, #4]
    df9c:	79a8      	ldrb	r0, [r5, #6]
    df9e:	7160      	strb	r0, [r4, #5]
    dfa0:	88e8      	ldrh	r0, [r5, #6]
    dfa2:	0a00      	lsrs	r0, r0, #8
    dfa4:	71a0      	strb	r0, [r4, #6]
    dfa6:	7a28      	ldrb	r0, [r5, #8]
    dfa8:	71e0      	strb	r0, [r4, #7]
    dfaa:	8928      	ldrh	r0, [r5, #8]
    dfac:	0a00      	lsrs	r0, r0, #8
    dfae:	7220      	strb	r0, [r4, #8]
    dfb0:	7aa8      	ldrb	r0, [r5, #10]
    dfb2:	7260      	strb	r0, [r4, #9]
    dfb4:	8968      	ldrh	r0, [r5, #10]
    dfb6:	0a00      	lsrs	r0, r0, #8
    dfb8:	72a0      	strb	r0, [r4, #10]
    dfba:	7b28      	ldrb	r0, [r5, #12]
    dfbc:	72e0      	strb	r0, [r4, #11]
    dfbe:	89a8      	ldrh	r0, [r5, #12]
    dfc0:	0a00      	lsrs	r0, r0, #8
    dfc2:	7320      	strb	r0, [r4, #12]
    dfc4:	200b      	movs	r0, #11
    dfc6:	e795      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    dfc8:	7021      	strb	r1, [r4, #0]
    dfca:	20a3      	movs	r0, #163	; 0xa3
    dfcc:	70a0      	strb	r0, [r4, #2]
    dfce:	7928      	ldrb	r0, [r5, #4]
    dfd0:	70e0      	strb	r0, [r4, #3]
    dfd2:	88a8      	ldrh	r0, [r5, #4]
    dfd4:	0a00      	lsrs	r0, r0, #8
    dfd6:	7120      	strb	r0, [r4, #4]
    dfd8:	79a8      	ldrb	r0, [r5, #6]
    dfda:	7160      	strb	r0, [r4, #5]
    dfdc:	79e8      	ldrb	r0, [r5, #7]
    dfde:	71a0      	strb	r0, [r4, #6]
    dfe0:	2005      	movs	r0, #5
    dfe2:	e787      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    dfe4:	7026      	strb	r6, [r4, #0]
    dfe6:	2013      	movs	r0, #19
    dfe8:	70a0      	strb	r0, [r4, #2]
    dfea:	7928      	ldrb	r0, [r5, #4]
    dfec:	70e0      	strb	r0, [r4, #3]
    dfee:	7968      	ldrb	r0, [r5, #5]
    dff0:	7120      	strb	r0, [r4, #4]
    dff2:	f8d5 0006 	ldr.w	r0, [r5, #6]
    dff6:	f8c4 0005 	str.w	r0, [r4, #5]
    dffa:	8968      	ldrh	r0, [r5, #10]
    dffc:	f8a4 0009 	strh.w	r0, [r4, #9]
    e000:	200a      	movs	r0, #10
    e002:	e777      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    e004:	7021      	strb	r1, [r4, #0]
    e006:	20a4      	movs	r0, #164	; 0xa4
    e008:	70a0      	strb	r0, [r4, #2]
    e00a:	7928      	ldrb	r0, [r5, #4]
    e00c:	70e0      	strb	r0, [r4, #3]
    e00e:	88a8      	ldrh	r0, [r5, #4]
    e010:	0a00      	lsrs	r0, r0, #8
    e012:	7120      	strb	r0, [r4, #4]
    e014:	79a8      	ldrb	r0, [r5, #6]
    e016:	7160      	strb	r0, [r4, #5]
    e018:	79e8      	ldrb	r0, [r5, #7]
    e01a:	71a0      	strb	r0, [r4, #6]
    e01c:	e6ac      	b.n	dd78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    e01e:	7021      	strb	r1, [r4, #0]
    e020:	2080      	movs	r0, #128	; 0x80
    e022:	70a0      	strb	r0, [r4, #2]
    e024:	88a9      	ldrh	r1, [r5, #4]
    e026:	f8a4 1003 	strh.w	r1, [r4, #3]
    e02a:	88e9      	ldrh	r1, [r5, #6]
    e02c:	f8a4 1005 	strh.w	r1, [r4, #5]
    e030:	7a29      	ldrb	r1, [r5, #8]
    e032:	71e1      	strb	r1, [r4, #7]
    e034:	8969      	ldrh	r1, [r5, #10]
    e036:	8121      	strh	r1, [r4, #8]
    e038:	89a9      	ldrh	r1, [r5, #12]
    e03a:	8161      	strh	r1, [r4, #10]
    e03c:	89e9      	ldrh	r1, [r5, #14]
    e03e:	81a1      	strh	r1, [r4, #12]
    e040:	7c29      	ldrb	r1, [r5, #16]
    e042:	f001 0101 	and.w	r1, r1, #1
    e046:	73a1      	strb	r1, [r4, #14]
    e048:	200d      	movs	r0, #13
    e04a:	e753      	b.n	def4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>

0000e04c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    e04c:	223e      	movs	r2, #62	; 0x3e
    e04e:	7002      	strb	r2, [r0, #0]
    e050:	2201      	movs	r2, #1
    e052:	7082      	strb	r2, [r0, #2]
    e054:	790a      	ldrb	r2, [r1, #4]
    e056:	70c2      	strb	r2, [r0, #3]
    e058:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    e05c:	7102      	strb	r2, [r0, #4]
    e05e:	880a      	ldrh	r2, [r1, #0]
    e060:	0a12      	lsrs	r2, r2, #8
    e062:	7142      	strb	r2, [r0, #5]
    e064:	788a      	ldrb	r2, [r1, #2]
    e066:	7182      	strb	r2, [r0, #6]
    e068:	78ca      	ldrb	r2, [r1, #3]
    e06a:	71c2      	strb	r2, [r0, #7]
    e06c:	684a      	ldr	r2, [r1, #4]
    e06e:	6082      	str	r2, [r0, #8]
    e070:	890a      	ldrh	r2, [r1, #8]
    e072:	8182      	strh	r2, [r0, #12]
    e074:	7d8a      	ldrb	r2, [r1, #22]
    e076:	7382      	strb	r2, [r0, #14]
    e078:	8aca      	ldrh	r2, [r1, #22]
    e07a:	0a12      	lsrs	r2, r2, #8
    e07c:	73c2      	strb	r2, [r0, #15]
    e07e:	7e0a      	ldrb	r2, [r1, #24]
    e080:	7402      	strb	r2, [r0, #16]
    e082:	8b0a      	ldrh	r2, [r1, #24]
    e084:	0a12      	lsrs	r2, r2, #8
    e086:	7442      	strb	r2, [r0, #17]
    e088:	7e8a      	ldrb	r2, [r1, #26]
    e08a:	7482      	strb	r2, [r0, #18]
    e08c:	8b4a      	ldrh	r2, [r1, #26]
    e08e:	0a12      	lsrs	r2, r2, #8
    e090:	74c2      	strb	r2, [r0, #19]
    e092:	7f09      	ldrb	r1, [r1, #28]
    e094:	7501      	strb	r1, [r0, #20]
    e096:	2113      	movs	r1, #19
    e098:	7041      	strb	r1, [r0, #1]
    e09a:	4608      	mov	r0, r1
    e09c:	4770      	bx	lr
    e09e:	223e      	movs	r2, #62	; 0x3e
    e0a0:	7002      	strb	r2, [r0, #0]
    e0a2:	220a      	movs	r2, #10
    e0a4:	7082      	strb	r2, [r0, #2]
    e0a6:	790a      	ldrb	r2, [r1, #4]
    e0a8:	70c2      	strb	r2, [r0, #3]
    e0aa:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    e0ae:	7102      	strb	r2, [r0, #4]
    e0b0:	880a      	ldrh	r2, [r1, #0]
    e0b2:	0a12      	lsrs	r2, r2, #8
    e0b4:	7142      	strb	r2, [r0, #5]
    e0b6:	788a      	ldrb	r2, [r1, #2]
    e0b8:	7182      	strb	r2, [r0, #6]
    e0ba:	78ca      	ldrb	r2, [r1, #3]
    e0bc:	71c2      	strb	r2, [r0, #7]
    e0be:	684a      	ldr	r2, [r1, #4]
    e0c0:	6082      	str	r2, [r0, #8]
    e0c2:	890a      	ldrh	r2, [r1, #8]
    e0c4:	8182      	strh	r2, [r0, #12]
    e0c6:	f8d1 200a 	ldr.w	r2, [r1, #10]
    e0ca:	f8c0 200e 	str.w	r2, [r0, #14]
    e0ce:	89ca      	ldrh	r2, [r1, #14]
    e0d0:	8242      	strh	r2, [r0, #18]
    e0d2:	690a      	ldr	r2, [r1, #16]
    e0d4:	6142      	str	r2, [r0, #20]
    e0d6:	8a8a      	ldrh	r2, [r1, #20]
    e0d8:	8302      	strh	r2, [r0, #24]
    e0da:	7d8a      	ldrb	r2, [r1, #22]
    e0dc:	7682      	strb	r2, [r0, #26]
    e0de:	8aca      	ldrh	r2, [r1, #22]
    e0e0:	0a12      	lsrs	r2, r2, #8
    e0e2:	76c2      	strb	r2, [r0, #27]
    e0e4:	7e0a      	ldrb	r2, [r1, #24]
    e0e6:	7702      	strb	r2, [r0, #28]
    e0e8:	8b0a      	ldrh	r2, [r1, #24]
    e0ea:	0a12      	lsrs	r2, r2, #8
    e0ec:	7742      	strb	r2, [r0, #29]
    e0ee:	7e8a      	ldrb	r2, [r1, #26]
    e0f0:	7782      	strb	r2, [r0, #30]
    e0f2:	8b4a      	ldrh	r2, [r1, #26]
    e0f4:	0a12      	lsrs	r2, r2, #8
    e0f6:	77c2      	strb	r2, [r0, #31]
    e0f8:	7f09      	ldrb	r1, [r1, #28]
    e0fa:	f880 1020 	strb.w	r1, [r0, #32]
    e0fe:	211f      	movs	r1, #31
    e100:	7041      	strb	r1, [r0, #1]
    e102:	4608      	mov	r0, r1
    e104:	4770      	bx	lr
    e106:	094a      	lsrs	r2, r1, #5
    e108:	f001 011f 	and.w	r1, r1, #31
    e10c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    e110:	40c8      	lsrs	r0, r1
    e112:	f000 0001 	and.w	r0, r0, #1
    e116:	4770      	bx	lr

0000e118 <sdc_hci_data_put>:
    e118:	b510      	push	{r4, lr}
    e11a:	f06f 0415 	mvn.w	r4, #21
    e11e:	b120      	cbz	r0, e12a <sdc_hci_data_put+0x12>
    e120:	f7ff fd56 	bl	dbd0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    e124:	b108      	cbz	r0, e12a <sdc_hci_data_put+0x12>
    e126:	2000      	movs	r0, #0
    e128:	bd10      	pop	{r4, pc}
    e12a:	4620      	mov	r0, r4
    e12c:	bd10      	pop	{r4, pc}

0000e12e <sdc_hci_get>:
    e12e:	b510      	push	{r4, lr}
    e130:	460c      	mov	r4, r1
    e132:	b130      	cbz	r0, e142 <sdc_hci_get+0x14>
    e134:	b12c      	cbz	r4, e142 <sdc_hci_get+0x14>
    e136:	f7f3 fd37 	bl	1ba8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    e13a:	b128      	cbz	r0, e148 <sdc_hci_get+0x1a>
    e13c:	7020      	strb	r0, [r4, #0]
    e13e:	2000      	movs	r0, #0
    e140:	bd10      	pop	{r4, pc}
    e142:	f06f 0015 	mvn.w	r0, #21
    e146:	bd10      	pop	{r4, pc}
    e148:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e14c:	bd10      	pop	{r4, pc}

0000e14e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    e14e:	f003 b800 	b.w	11152 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000e152 <sdc_hci_cmd_cb_read_transmit_power_level>:
    e152:	f003 b81b 	b.w	1118c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000e156 <sdc_hci_cmd_cb_set_event_mask>:
    e156:	b510      	push	{r4, lr}
    e158:	f7f3 fdcc 	bl	1cf4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    e15c:	2000      	movs	r0, #0
    e15e:	bd10      	pop	{r4, pc}

0000e160 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    e160:	b510      	push	{r4, lr}
    e162:	f7f3 fdd7 	bl	1d14 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    e166:	2000      	movs	r0, #0
    e168:	bd10      	pop	{r4, pc}

0000e16a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    e16a:	f003 b830 	b.w	111ce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000e16e <sdc_hci_cmd_vs_conn_event_extend>:
    e16e:	b508      	push	{r3, lr}
    e170:	7800      	ldrb	r0, [r0, #0]
    e172:	f88d 0000 	strb.w	r0, [sp]
    e176:	4668      	mov	r0, sp
    e178:	f002 ff0c 	bl	10f94 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    e17c:	bd08      	pop	{r3, pc}

0000e17e <sdc_hci_cmd_vs_conn_update>:
    e17e:	2001      	movs	r0, #1
    e180:	4770      	bx	lr

0000e182 <sdc_hci_cmd_vs_event_length_set>:
    e182:	f7f9 be13 	b.w	7dac <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000e186 <sdc_hci_cmd_vs_llpm_mode_set>:
    e186:	2001      	movs	r0, #1
    e188:	4770      	bx	lr

0000e18a <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    e18a:	7881      	ldrb	r1, [r0, #2]
    e18c:	8800      	ldrh	r0, [r0, #0]
    e18e:	f002 beb1 	b.w	10ef4 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000e192 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    e192:	7800      	ldrb	r0, [r0, #0]
    e194:	b100      	cbz	r0, e198 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    e196:	2001      	movs	r0, #1
    e198:	f002 bea7 	b.w	10eea <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000e19c <sdc_hci_cmd_vs_set_adv_randomness>:
    e19c:	f002 bed4 	b.w	10f48 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000e1a0 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    e1a0:	b510      	push	{r4, lr}
    e1a2:	4604      	mov	r4, r0
    e1a4:	f7ff f9dc 	bl	d560 <mpsl_temperature_get>
    e1a8:	17c1      	asrs	r1, r0, #31
    e1aa:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    e1ae:	1080      	asrs	r0, r0, #2
    e1b0:	287f      	cmp	r0, #127	; 0x7f
    e1b2:	dd01      	ble.n	e1b8 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    e1b4:	207f      	movs	r0, #127	; 0x7f
    e1b6:	e004      	b.n	e1c2 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    e1b8:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    e1bc:	4288      	cmp	r0, r1
    e1be:	da00      	bge.n	e1c2 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    e1c0:	4608      	mov	r0, r1
    e1c2:	7020      	strb	r0, [r4, #0]
    e1c4:	2000      	movs	r0, #0
    e1c6:	bd10      	pop	{r4, pc}

0000e1c8 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    e1c8:	f002 bed3 	b.w	10f72 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000e1cc <sdc_hci_cmd_ip_read_bd_addr>:
    e1cc:	f002 bfd2 	b.w	11174 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000e1d0 <sdc_hci_cmd_ip_read_local_version_information>:
    e1d0:	f7f9 bdfa 	b.w	7dc8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000e1d4 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    e1d4:	f002 bc09 	b.w	109ea <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000e1d8 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    e1d8:	f002 bbdd 	b.w	10996 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000e1dc <sdc_hci_cmd_le_clear_filter_accept_list>:
    e1dc:	f002 bc29 	b.w	10a32 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000e1e0 <sdc_hci_cmd_le_clear_resolving_list>:
    e1e0:	f002 bc1a 	b.w	10a18 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000e1e4 <sdc_hci_cmd_le_encrypt>:
    e1e4:	f002 bc32 	b.w	10a4c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000e1e8 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    e1e8:	8802      	ldrh	r2, [r0, #0]
    e1ea:	800a      	strh	r2, [r1, #0]
    e1ec:	f002 bc37 	b.w	10a5e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000e1f0 <sdc_hci_cmd_le_long_term_key_request_reply>:
    e1f0:	8802      	ldrh	r2, [r0, #0]
    e1f2:	800a      	strh	r2, [r1, #0]
    e1f4:	f002 bc4c 	b.w	10a90 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000e1f8 <sdc_hci_cmd_le_rand>:
    e1f8:	f002 bc74 	b.w	10ae4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000e1fc <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    e1fc:	f002 bc78 	b.w	10af0 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000e200 <sdc_hci_cmd_le_read_buffer_size>:
    e200:	f7f9 bce2 	b.w	7bc8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000e204 <sdc_hci_cmd_le_read_channel_map>:
    e204:	f7f9 bcea 	b.w	7bdc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000e208 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    e208:	f002 bcb6 	b.w	10b78 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000e20c <sdc_hci_cmd_le_read_max_data_length>:
    e20c:	f002 bc7b 	b.w	10b06 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000e210 <sdc_hci_cmd_le_read_phy>:
    e210:	f7f9 bd0c 	b.w	7c2c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000e214 <sdc_hci_cmd_le_read_remote_features>:
    e214:	f002 bc80 	b.w	10b18 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000e218 <sdc_hci_cmd_le_read_resolving_list_size>:
    e218:	f002 bc9a 	b.w	10b50 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000e21c <sdc_hci_cmd_le_read_suggested_default_data_length>:
    e21c:	f7f9 bd2c 	b.w	7c78 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000e220 <sdc_hci_cmd_le_read_transmit_power>:
    e220:	f002 bc9a 	b.w	10b58 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000e224 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    e224:	f002 bcc8 	b.w	10bb8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000e228 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    e228:	f002 bcad 	b.w	10b86 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000e22c <sdc_hci_cmd_le_set_address_resolution_enable>:
    e22c:	f002 bcd9 	b.w	10be2 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000e230 <sdc_hci_cmd_le_set_adv_data>:
    e230:	f002 bce5 	b.w	10bfe <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000e234 <sdc_hci_cmd_le_set_adv_enable>:
    e234:	f002 bcf8 	b.w	10c28 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000e238 <sdc_hci_cmd_le_set_adv_params>:
    e238:	f002 bd29 	b.w	10c8e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000e23c <sdc_hci_cmd_le_set_data_length>:
    e23c:	f002 bdbc 	b.w	10db8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000e240 <sdc_hci_cmd_le_set_data_related_address_changes>:
    e240:	f002 bdda 	b.w	10df8 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000e244 <sdc_hci_cmd_le_set_default_phy>:
    e244:	f7f9 bd22 	b.w	7c8c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000e248 <sdc_hci_cmd_le_set_event_mask>:
    e248:	b510      	push	{r4, lr}
    e24a:	f7f3 fd4b 	bl	1ce4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    e24e:	2000      	movs	r0, #0
    e250:	bd10      	pop	{r4, pc}

0000e252 <sdc_hci_cmd_le_set_phy>:
    e252:	f002 bdde 	b.w	10e12 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000e256 <sdc_hci_cmd_le_set_privacy_mode>:
    e256:	f002 bdf5 	b.w	10e44 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000e25a <sdc_hci_cmd_le_set_random_address>:
    e25a:	f002 be09 	b.w	10e70 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000e25e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    e25e:	f002 be15 	b.w	10e8c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000e262 <sdc_hci_cmd_le_set_scan_response_data>:
    e262:	f002 be1c 	b.w	10e9e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000e266 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    e266:	f002 be2f 	b.w	10ec8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000e26a <sdc_hci_cmd_lc_disconnect>:
    e26a:	f002 bb46 	b.w	108fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000e26e <sdc_hci_cmd_lc_read_remote_version_information>:
    e26e:	f7f9 bdb5 	b.w	7ddc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    e272:	b570      	push	{r4, r5, r6, lr}
    e274:	880b      	ldrh	r3, [r1, #0]
    e276:	7cc4      	ldrb	r4, [r0, #19]
    e278:	f100 0518 	add.w	r5, r0, #24
    e27c:	f3c3 060e 	ubfx	r6, r3, #0, #15
    e280:	8802      	ldrh	r2, [r0, #0]
    e282:	4435      	add	r5, r6
    e284:	1d64      	adds	r4, r4, #5
    e286:	882d      	ldrh	r5, [r5, #0]
    e288:	4422      	add	r2, r4
    e28a:	b292      	uxth	r2, r2
    e28c:	4425      	add	r5, r4
    e28e:	1e54      	subs	r4, r2, #1
    e290:	442c      	add	r4, r5
    e292:	fb94 f4f2 	sdiv	r4, r4, r2
    e296:	fb02 6204 	mla	r2, r2, r4, r6
    e29a:	8840      	ldrh	r0, [r0, #2]
    e29c:	b292      	uxth	r2, r2
    e29e:	4290      	cmp	r0, r2
    e2a0:	d903      	bls.n	e2aa <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    e2a2:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    e2a6:	4310      	orrs	r0, r2
    e2a8:	e002      	b.n	e2b0 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    e2aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    e2ae:	4398      	bics	r0, r3
    e2b0:	8008      	strh	r0, [r1, #0]
    e2b2:	bd70      	pop	{r4, r5, r6, pc}
    e2b4:	0442      	lsls	r2, r0, #17
    e2b6:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    e2ba:	d107      	bne.n	e2cc <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    e2bc:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    e2c0:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    e2c4:	4288      	cmp	r0, r1
    e2c6:	d001      	beq.n	e2cc <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    e2c8:	2001      	movs	r0, #1
    e2ca:	4770      	bx	lr
    e2cc:	2000      	movs	r0, #0
    e2ce:	4770      	bx	lr

0000e2d0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    e2d0:	8881      	ldrh	r1, [r0, #4]
    e2d2:	88c0      	ldrh	r0, [r0, #6]
    e2d4:	4288      	cmp	r0, r1
    e2d6:	d101      	bne.n	e2dc <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    e2d8:	2001      	movs	r0, #1
    e2da:	4770      	bx	lr
    e2dc:	2000      	movs	r0, #0
    e2de:	4770      	bx	lr

0000e2e0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    e2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2e4:	460f      	mov	r7, r1
    e2e6:	4604      	mov	r4, r0
    e2e8:	f100 0118 	add.w	r1, r0, #24
    e2ec:	8880      	ldrh	r0, [r0, #4]
    e2ee:	2600      	movs	r6, #0
    e2f0:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e2f4:	1845      	adds	r5, r0, r1
    e2f6:	603e      	str	r6, [r7, #0]
    e2f8:	89e0      	ldrh	r0, [r4, #14]
    e2fa:	2800      	cmp	r0, #0
    e2fc:	d016      	beq.n	e32c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    e2fe:	8961      	ldrh	r1, [r4, #10]
    e300:	4408      	add	r0, r1
    e302:	b280      	uxth	r0, r0
    e304:	8160      	strh	r0, [r4, #10]
    e306:	8829      	ldrh	r1, [r5, #0]
    e308:	4288      	cmp	r0, r1
    e30a:	d905      	bls.n	e318 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    e30c:	f240 1151 	movw	r1, #337	; 0x151
    e310:	f04f 0014 	mov.w	r0, #20
    e314:	f7f3 fb4c 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e318:	d106      	bne.n	e328 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    e31a:	f104 0104 	add.w	r1, r4, #4
    e31e:	4620      	mov	r0, r4
    e320:	f7ff ffa7 	bl	e272 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e324:	8166      	strh	r6, [r4, #10]
    e326:	603d      	str	r5, [r7, #0]
    e328:	81e6      	strh	r6, [r4, #14]
    e32a:	2001      	movs	r0, #1
    e32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e330 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    e330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e334:	4604      	mov	r4, r0
    e336:	f100 0318 	add.w	r3, r0, #24
    e33a:	88c0      	ldrh	r0, [r0, #6]
    e33c:	460e      	mov	r6, r1
    e33e:	f3c0 070e 	ubfx	r7, r0, #0, #15
    e342:	8a20      	ldrh	r0, [r4, #16]
    e344:	19d9      	adds	r1, r3, r7
    e346:	b108      	cbz	r0, e34c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    e348:	42b0      	cmp	r0, r6
    e34a:	d202      	bcs.n	e352 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    e34c:	2000      	movs	r0, #0
    e34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e352:	89a0      	ldrh	r0, [r4, #12]
    e354:	2500      	movs	r5, #0
    e356:	b140      	cbz	r0, e36a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    e358:	f8b1 c000 	ldrh.w	ip, [r1]
    e35c:	4560      	cmp	r0, ip
    e35e:	d006      	beq.n	e36e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    e360:	f44f 7101 	mov.w	r1, #516	; 0x204
    e364:	2014      	movs	r0, #20
    e366:	f7f3 fb23 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e36a:	800d      	strh	r5, [r1, #0]
    e36c:	e00e      	b.n	e38c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    e36e:	f894 c013 	ldrb.w	ip, [r4, #19]
    e372:	4418      	add	r0, r3
    e374:	f10c 0c05 	add.w	ip, ip, #5
    e378:	44bc      	add	ip, r7
    e37a:	4460      	add	r0, ip
    e37c:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    e380:	f820 cc03 	strh.w	ip, [r0, #-3]
    e384:	f894 c016 	ldrb.w	ip, [r4, #22]
    e388:	f800 cc01 	strb.w	ip, [r0, #-1]
    e38c:	89a0      	ldrh	r0, [r4, #12]
    e38e:	4430      	add	r0, r6
    e390:	81a0      	strh	r0, [r4, #12]
    e392:	8808      	ldrh	r0, [r1, #0]
    e394:	4430      	add	r0, r6
    e396:	8008      	strh	r0, [r1, #0]
    e398:	b12a      	cbz	r2, e3a6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    e39a:	1da1      	adds	r1, r4, #6
    e39c:	4620      	mov	r0, r4
    e39e:	f7ff ff68 	bl	e272 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e3a2:	81a5      	strh	r5, [r4, #12]
    e3a4:	e00a      	b.n	e3bc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    e3a6:	7ce0      	ldrb	r0, [r4, #19]
    e3a8:	89a1      	ldrh	r1, [r4, #12]
    e3aa:	1d40      	adds	r0, r0, #5
    e3ac:	4438      	add	r0, r7
    e3ae:	4419      	add	r1, r3
    e3b0:	4408      	add	r0, r1
    e3b2:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    e3b6:	82a1      	strh	r1, [r4, #20]
    e3b8:	7880      	ldrb	r0, [r0, #2]
    e3ba:	75a0      	strb	r0, [r4, #22]
    e3bc:	8225      	strh	r5, [r4, #16]
    e3be:	2001      	movs	r0, #1
    e3c0:	e7c5      	b.n	e34e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000e3c2 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    e3c2:	1c80      	adds	r0, r0, #2
    e3c4:	4770      	bx	lr

0000e3c6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    e3c6:	b510      	push	{r4, lr}
    e3c8:	4604      	mov	r4, r0
    e3ca:	88c0      	ldrh	r0, [r0, #6]
    e3cc:	88a1      	ldrh	r1, [r4, #4]
    e3ce:	4281      	cmp	r1, r0
    e3d0:	d003      	beq.n	e3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    e3d2:	8960      	ldrh	r0, [r4, #10]
    e3d4:	b908      	cbnz	r0, e3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    e3d6:	89e0      	ldrh	r0, [r4, #14]
    e3d8:	b108      	cbz	r0, e3de <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    e3da:	2000      	movs	r0, #0
    e3dc:	bd10      	pop	{r4, pc}
    e3de:	1d21      	adds	r1, r4, #4
    e3e0:	4620      	mov	r0, r4
    e3e2:	f7ff ff46 	bl	e272 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e3e6:	2000      	movs	r0, #0
    e3e8:	81e0      	strh	r0, [r4, #14]
    e3ea:	2001      	movs	r0, #1
    e3ec:	bd10      	pop	{r4, pc}

0000e3ee <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    e3ee:	b510      	push	{r4, lr}
    e3f0:	4604      	mov	r4, r0
    e3f2:	f100 0218 	add.w	r2, r0, #24
    e3f6:	88c0      	ldrh	r0, [r0, #6]
    e3f8:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e3fc:	4402      	add	r2, r0
    e3fe:	8820      	ldrh	r0, [r4, #0]
    e400:	2845      	cmp	r0, #69	; 0x45
    e402:	d200      	bcs.n	e406 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    e404:	2045      	movs	r0, #69	; 0x45
    e406:	4288      	cmp	r0, r1
    e408:	d204      	bcs.n	e414 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    e40a:	f44f 7182 	mov.w	r1, #260	; 0x104
    e40e:	2014      	movs	r0, #20
    e410:	f7f3 face 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e414:	7ca0      	ldrb	r0, [r4, #18]
    e416:	2800      	cmp	r0, #0
    e418:	d003      	beq.n	e422 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    e41a:	8810      	ldrh	r0, [r2, #0]
    e41c:	4288      	cmp	r0, r1
    e41e:	d201      	bcs.n	e424 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    e420:	2000      	movs	r0, #0
    e422:	bd10      	pop	{r4, pc}
    e424:	8011      	strh	r1, [r2, #0]
    e426:	1da1      	adds	r1, r4, #6
    e428:	4620      	mov	r0, r4
    e42a:	f7ff ff22 	bl	e272 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e42e:	2000      	movs	r0, #0
    e430:	74a0      	strb	r0, [r4, #18]
    e432:	2001      	movs	r0, #1
    e434:	bd10      	pop	{r4, pc}

0000e436 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    e436:	b510      	push	{r4, lr}
    e438:	88c4      	ldrh	r4, [r0, #6]
    e43a:	8883      	ldrh	r3, [r0, #4]
    e43c:	4601      	mov	r1, r0
    e43e:	f100 0218 	add.w	r2, r0, #24
    e442:	f3c3 000e 	ubfx	r0, r3, #0, #15
    e446:	4410      	add	r0, r2
    e448:	42a3      	cmp	r3, r4
    e44a:	d002      	beq.n	e452 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    e44c:	8949      	ldrh	r1, [r1, #10]
    e44e:	2900      	cmp	r1, #0
    e450:	d000      	beq.n	e454 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    e452:	2000      	movs	r0, #0
    e454:	bd10      	pop	{r4, pc}

0000e456 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    e456:	8803      	ldrh	r3, [r0, #0]
    e458:	2b45      	cmp	r3, #69	; 0x45
    e45a:	d200      	bcs.n	e45e <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    e45c:	2345      	movs	r3, #69	; 0x45
    e45e:	8013      	strh	r3, [r2, #0]
    e460:	88c2      	ldrh	r2, [r0, #6]
    e462:	f3c2 030e 	ubfx	r3, r2, #0, #15
    e466:	f100 0218 	add.w	r2, r0, #24
    e46a:	441a      	add	r2, r3
    e46c:	600a      	str	r2, [r1, #0]
    e46e:	8980      	ldrh	r0, [r0, #12]
    e470:	4770      	bx	lr

0000e472 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    e472:	7cc0      	ldrb	r0, [r0, #19]
    e474:	1d40      	adds	r0, r0, #5
    e476:	4408      	add	r0, r1
    e478:	1ec0      	subs	r0, r0, #3
    e47a:	6010      	str	r0, [r2, #0]
    e47c:	8808      	ldrh	r0, [r1, #0]
    e47e:	4770      	bx	lr

0000e480 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    e480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e484:	460e      	mov	r6, r1
    e486:	88c1      	ldrh	r1, [r0, #6]
    e488:	8902      	ldrh	r2, [r0, #8]
    e48a:	4604      	mov	r4, r0
    e48c:	f100 0818 	add.w	r8, r0, #24
    e490:	8800      	ldrh	r0, [r0, #0]
    e492:	f3c1 050e 	ubfx	r5, r1, #0, #15
    e496:	f3c2 070e 	ubfx	r7, r2, #0, #15
    e49a:	2845      	cmp	r0, #69	; 0x45
    e49c:	d200      	bcs.n	e4a0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    e49e:	2045      	movs	r0, #69	; 0x45
    e4a0:	42b0      	cmp	r0, r6
    e4a2:	d203      	bcs.n	e4ac <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    e4a4:	21c6      	movs	r1, #198	; 0xc6
    e4a6:	2014      	movs	r0, #20
    e4a8:	f7f3 fa82 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4ac:	4610      	mov	r0, r2
    e4ae:	f7ff ff01 	bl	e2b4 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e4b2:	b110      	cbz	r0, e4ba <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    e4b4:	2000      	movs	r0, #0
    e4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4ba:	42af      	cmp	r7, r5
    e4bc:	d908      	bls.n	e4d0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e4be:	7ce1      	ldrb	r1, [r4, #19]
    e4c0:	1b78      	subs	r0, r7, r5
    e4c2:	1a40      	subs	r0, r0, r1
    e4c4:	1f40      	subs	r0, r0, #5
    e4c6:	4286      	cmp	r6, r0
    e4c8:	dd02      	ble.n	e4d0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e4ca:	2000      	movs	r0, #0
    e4cc:	74a0      	strb	r0, [r4, #18]
    e4ce:	e7f1      	b.n	e4b4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    e4d0:	eb08 0005 	add.w	r0, r8, r5
    e4d4:	2101      	movs	r1, #1
    e4d6:	8006      	strh	r6, [r0, #0]
    e4d8:	74a1      	strb	r1, [r4, #18]
    e4da:	e7ec      	b.n	e4b6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000e4dc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    e4dc:	b538      	push	{r3, r4, r5, lr}
    e4de:	88c4      	ldrh	r4, [r0, #6]
    e4e0:	8881      	ldrh	r1, [r0, #4]
    e4e2:	f100 0218 	add.w	r2, r0, #24
    e4e6:	f3c1 030e 	ubfx	r3, r1, #0, #15
    e4ea:	441a      	add	r2, r3
    e4ec:	42a1      	cmp	r1, r4
    e4ee:	d010      	beq.n	e512 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e4f0:	8943      	ldrh	r3, [r0, #10]
    e4f2:	89c5      	ldrh	r5, [r0, #14]
    e4f4:	8812      	ldrh	r2, [r2, #0]
    e4f6:	442b      	add	r3, r5
    e4f8:	4293      	cmp	r3, r2
    e4fa:	d308      	bcc.n	e50e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    e4fc:	f8ad 1000 	strh.w	r1, [sp]
    e500:	4669      	mov	r1, sp
    e502:	f7ff feb6 	bl	e272 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e506:	f8bd 0000 	ldrh.w	r0, [sp]
    e50a:	42a0      	cmp	r0, r4
    e50c:	d001      	beq.n	e512 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e50e:	2001      	movs	r0, #1
    e510:	bd38      	pop	{r3, r4, r5, pc}
    e512:	2000      	movs	r0, #0
    e514:	bd38      	pop	{r3, r4, r5, pc}

0000e516 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    e516:	b570      	push	{r4, r5, r6, lr}
    e518:	88c6      	ldrh	r6, [r0, #6]
    e51a:	8885      	ldrh	r5, [r0, #4]
    e51c:	4603      	mov	r3, r0
    e51e:	f100 0418 	add.w	r4, r0, #24
    e522:	f3c5 000e 	ubfx	r0, r5, #0, #15
    e526:	4420      	add	r0, r4
    e528:	42b5      	cmp	r5, r6
    e52a:	d102      	bne.n	e532 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    e52c:	2000      	movs	r0, #0
    e52e:	81d8      	strh	r0, [r3, #14]
    e530:	bd70      	pop	{r4, r5, r6, pc}
    e532:	8804      	ldrh	r4, [r0, #0]
    e534:	895d      	ldrh	r5, [r3, #10]
    e536:	7cde      	ldrb	r6, [r3, #19]
    e538:	1b64      	subs	r4, r4, r5
    e53a:	4435      	add	r5, r6
    e53c:	4428      	add	r0, r5
    e53e:	880d      	ldrh	r5, [r1, #0]
    e540:	b2a4      	uxth	r4, r4
    e542:	1c80      	adds	r0, r0, #2
    e544:	42a5      	cmp	r5, r4
    e546:	d900      	bls.n	e54a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    e548:	800c      	strh	r4, [r1, #0]
    e54a:	895c      	ldrh	r4, [r3, #10]
    e54c:	b124      	cbz	r4, e558 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    e54e:	2400      	movs	r4, #0
    e550:	7014      	strb	r4, [r2, #0]
    e552:	8809      	ldrh	r1, [r1, #0]
    e554:	81d9      	strh	r1, [r3, #14]
    e556:	bd70      	pop	{r4, r5, r6, pc}
    e558:	2401      	movs	r4, #1
    e55a:	e7f9      	b.n	e550 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000e55c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    e55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e560:	461d      	mov	r5, r3
    e562:	4616      	mov	r6, r2
    e564:	9f06      	ldr	r7, [sp, #24]
    e566:	460b      	mov	r3, r1
    e568:	4604      	mov	r4, r0
    e56a:	463a      	mov	r2, r7
    e56c:	4629      	mov	r1, r5
    e56e:	4630      	mov	r0, r6
    e570:	f000 f839 	bl	e5e6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e574:	4283      	cmp	r3, r0
    e576:	d201      	bcs.n	e57c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    e578:	219e      	movs	r1, #158	; 0x9e
    e57a:	e012      	b.n	e5a2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    e57c:	07a0      	lsls	r0, r4, #30
    e57e:	d001      	beq.n	e584 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    e580:	219f      	movs	r1, #159	; 0x9f
    e582:	e00e      	b.n	e5a2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    e584:	2218      	movs	r2, #24
    e586:	2100      	movs	r1, #0
    e588:	4620      	mov	r0, r4
    e58a:	f003 fcf6 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e58e:	19a8      	adds	r0, r5, r6
    e590:	1d40      	adds	r0, r0, #5
    e592:	4378      	muls	r0, r7
    e594:	b280      	uxth	r0, r0
    e596:	74e5      	strb	r5, [r4, #19]
    e598:	8060      	strh	r0, [r4, #2]
    e59a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    e59e:	d903      	bls.n	e5a8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    e5a0:	21a4      	movs	r1, #164	; 0xa4
    e5a2:	2014      	movs	r0, #20
    e5a4:	f7f3 fa04 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5a8:	8026      	strh	r6, [r4, #0]
    e5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e5ae <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    e5ae:	b570      	push	{r4, r5, r6, lr}
    e5b0:	460b      	mov	r3, r1
    e5b2:	4604      	mov	r4, r0
    e5b4:	f100 0118 	add.w	r1, r0, #24
    e5b8:	8902      	ldrh	r2, [r0, #8]
    e5ba:	8880      	ldrh	r0, [r0, #4]
    e5bc:	f3c2 050e 	ubfx	r5, r2, #0, #15
    e5c0:	440d      	add	r5, r1
    e5c2:	4282      	cmp	r2, r0
    e5c4:	d101      	bne.n	e5ca <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    e5c6:	2000      	movs	r0, #0
    e5c8:	bd70      	pop	{r4, r5, r6, pc}
    e5ca:	b123      	cbz	r3, e5d6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    e5cc:	7ce2      	ldrb	r2, [r4, #19]
    e5ce:	1ca9      	adds	r1, r5, #2
    e5d0:	4618      	mov	r0, r3
    e5d2:	f003 fc58 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e5d6:	882d      	ldrh	r5, [r5, #0]
    e5d8:	f104 0108 	add.w	r1, r4, #8
    e5dc:	4620      	mov	r0, r4
    e5de:	f7ff fe48 	bl	e272 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e5e2:	4628      	mov	r0, r5
    e5e4:	bd70      	pop	{r4, r5, r6, pc}

0000e5e6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    e5e6:	4401      	add	r1, r0
    e5e8:	1d49      	adds	r1, r1, #5
    e5ea:	4351      	muls	r1, r2
    e5ec:	b28a      	uxth	r2, r1
    e5ee:	2100      	movs	r1, #0
    e5f0:	2845      	cmp	r0, #69	; 0x45
    e5f2:	d202      	bcs.n	e5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    e5f4:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    e5f8:	b281      	uxth	r1, r0
    e5fa:	3218      	adds	r2, #24
    e5fc:	1850      	adds	r0, r2, r1
    e5fe:	b280      	uxth	r0, r0
    e600:	4770      	bx	lr

0000e602 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    e602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e606:	4688      	mov	r8, r1
    e608:	88c1      	ldrh	r1, [r0, #6]
    e60a:	4604      	mov	r4, r0
    e60c:	8900      	ldrh	r0, [r0, #8]
    e60e:	f3c1 060e 	ubfx	r6, r1, #0, #15
    e612:	f104 0518 	add.w	r5, r4, #24
    e616:	f3c0 070e 	ubfx	r7, r0, #0, #15
    e61a:	eb05 0906 	add.w	r9, r5, r6
    e61e:	f7ff fe49 	bl	e2b4 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e622:	2200      	movs	r2, #0
    e624:	b998      	cbnz	r0, e64e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    e626:	8820      	ldrh	r0, [r4, #0]
    e628:	2845      	cmp	r0, #69	; 0x45
    e62a:	d200      	bcs.n	e62e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    e62c:	2045      	movs	r0, #69	; 0x45
    e62e:	42b7      	cmp	r7, r6
    e630:	d906      	bls.n	e640 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e632:	7ce3      	ldrb	r3, [r4, #19]
    e634:	1bb9      	subs	r1, r7, r6
    e636:	1ac9      	subs	r1, r1, r3
    e638:	1f49      	subs	r1, r1, #5
    e63a:	4281      	cmp	r1, r0
    e63c:	da00      	bge.n	e640 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e63e:	4608      	mov	r0, r1
    e640:	89a1      	ldrh	r1, [r4, #12]
    e642:	b111      	cbz	r1, e64a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    e644:	f8b9 3000 	ldrh.w	r3, [r9]
    e648:	1ac0      	subs	r0, r0, r3
    e64a:	4540      	cmp	r0, r8
    e64c:	da03      	bge.n	e656 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    e64e:	8222      	strh	r2, [r4, #16]
    e650:	2000      	movs	r0, #0
    e652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e656:	7ce0      	ldrb	r0, [r4, #19]
    e658:	4429      	add	r1, r5
    e65a:	1d40      	adds	r0, r0, #5
    e65c:	4430      	add	r0, r6
    e65e:	4408      	add	r0, r1
    e660:	f8a4 8010 	strh.w	r8, [r4, #16]
    e664:	1ec0      	subs	r0, r0, #3
    e666:	e7f4      	b.n	e652 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000e668 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    e668:	b570      	push	{r4, r5, r6, lr}
    e66a:	2300      	movs	r3, #0
    e66c:	f1a1 0208 	sub.w	r2, r1, #8
    e670:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    e674:	42a2      	cmp	r2, r4
    e676:	d304      	bcc.n	e682 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    e678:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    e67c:	2015      	movs	r0, #21
    e67e:	f7f3 f997 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e682:	6802      	ldr	r2, [r0, #0]
    e684:	b90a      	cbnz	r2, e68a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    e686:	e01e      	b.n	e6c6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    e688:	4610      	mov	r0, r2
    e68a:	6802      	ldr	r2, [r0, #0]
    e68c:	8893      	ldrh	r3, [r2, #4]
    e68e:	428b      	cmp	r3, r1
    e690:	d002      	beq.n	e698 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    e692:	6813      	ldr	r3, [r2, #0]
    e694:	2b00      	cmp	r3, #0
    e696:	d1f7      	bne.n	e688 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    e698:	8894      	ldrh	r4, [r2, #4]
    e69a:	4613      	mov	r3, r2
    e69c:	428c      	cmp	r4, r1
    e69e:	d101      	bne.n	e6a4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    e6a0:	6811      	ldr	r1, [r2, #0]
    e6a2:	e00d      	b.n	e6c0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    e6a4:	f101 0508 	add.w	r5, r1, #8
    e6a8:	b2ae      	uxth	r6, r5
    e6aa:	2500      	movs	r5, #0
    e6ac:	42b4      	cmp	r4, r6
    e6ae:	d309      	bcc.n	e6c4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    e6b0:	1a64      	subs	r4, r4, r1
    e6b2:	4411      	add	r1, r2
    e6b4:	600d      	str	r5, [r1, #0]
    e6b6:	808c      	strh	r4, [r1, #4]
    e6b8:	6802      	ldr	r2, [r0, #0]
    e6ba:	6812      	ldr	r2, [r2, #0]
    e6bc:	6002      	str	r2, [r0, #0]
    e6be:	600a      	str	r2, [r1, #0]
    e6c0:	6001      	str	r1, [r0, #0]
    e6c2:	e000      	b.n	e6c6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    e6c4:	2300      	movs	r3, #0
    e6c6:	4618      	mov	r0, r3
    e6c8:	bd70      	pop	{r4, r5, r6, pc}

0000e6ca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    e6ca:	b510      	push	{r4, lr}
    e6cc:	000c      	movs	r4, r1
    e6ce:	d004      	beq.n	e6da <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    e6d0:	2c08      	cmp	r4, #8
    e6d2:	d207      	bcs.n	e6e4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    e6d4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    e6d8:	e00a      	b.n	e6f0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    e6da:	b108      	cbz	r0, e6e0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    e6dc:	2100      	movs	r1, #0
    e6de:	6001      	str	r1, [r0, #0]
    e6e0:	2000      	movs	r0, #0
    e6e2:	bd10      	pop	{r4, pc}
    e6e4:	b158      	cbz	r0, e6fe <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    e6e6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    e6ea:	d304      	bcc.n	e6f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    e6ec:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    e6f0:	2015      	movs	r0, #21
    e6f2:	f7f3 f95d 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6f6:	b2a1      	uxth	r1, r4
    e6f8:	6800      	ldr	r0, [r0, #0]
    e6fa:	f000 f814 	bl	e726 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    e6fe:	1d20      	adds	r0, r4, #4
    e700:	bd10      	pop	{r4, pc}

0000e702 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    e702:	2100      	movs	r1, #0
    e704:	6802      	ldr	r2, [r0, #0]
    e706:	e003      	b.n	e710 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    e708:	8893      	ldrh	r3, [r2, #4]
    e70a:	6812      	ldr	r2, [r2, #0]
    e70c:	4419      	add	r1, r3
    e70e:	b289      	uxth	r1, r1
    e710:	2a00      	cmp	r2, #0
    e712:	d1f9      	bne.n	e708 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    e714:	f000 b807 	b.w	e726 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000e718 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    e718:	2300      	movs	r3, #0
    e71a:	600b      	str	r3, [r1, #0]
    e71c:	808a      	strh	r2, [r1, #4]
    e71e:	6802      	ldr	r2, [r0, #0]
    e720:	600a      	str	r2, [r1, #0]
    e722:	6001      	str	r1, [r0, #0]
    e724:	4770      	bx	lr
    e726:	2300      	movs	r3, #0
    e728:	6043      	str	r3, [r0, #4]
    e72a:	1d02      	adds	r2, r0, #4
    e72c:	8101      	strh	r1, [r0, #8]
    e72e:	6002      	str	r2, [r0, #0]
    e730:	4770      	bx	lr
    e732:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    e736:	8159      	strh	r1, [r3, #10]
    e738:	4611      	mov	r1, r2
    e73a:	f000 b814 	b.w	e766 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    e73e:	b170      	cbz	r0, e75e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    e740:	7882      	ldrb	r2, [r0, #2]
    e742:	fbb1 f3f2 	udiv	r3, r1, r2
    e746:	fb02 1213 	mls	r2, r2, r3, r1
    e74a:	b2d2      	uxtb	r2, r2
    e74c:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    e750:	895b      	ldrh	r3, [r3, #10]
    e752:	428b      	cmp	r3, r1
    e754:	d101      	bne.n	e75a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    e756:	4610      	mov	r0, r2
    e758:	4770      	bx	lr
    e75a:	78c3      	ldrb	r3, [r0, #3]
    e75c:	b10b      	cbz	r3, e762 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    e75e:	20ff      	movs	r0, #255	; 0xff
    e760:	4770      	bx	lr
    e762:	f7f3 bc07 	b.w	1f74 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    e766:	8802      	ldrh	r2, [r0, #0]
    e768:	fb01 0102 	mla	r1, r1, r2, r0
    e76c:	7880      	ldrb	r0, [r0, #2]
    e76e:	220a      	movs	r2, #10
    e770:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    e774:	4408      	add	r0, r1
    e776:	4770      	bx	lr

0000e778 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    e778:	b51c      	push	{r2, r3, r4, lr}
    e77a:	4604      	mov	r4, r0
    e77c:	2000      	movs	r0, #0
    e77e:	9001      	str	r0, [sp, #4]
    e780:	9000      	str	r0, [sp, #0]
    e782:	f88d 4006 	strb.w	r4, [sp, #6]
    e786:	e00a      	b.n	e79e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    e788:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    e78c:	4621      	mov	r1, r4
    e78e:	f7f3 fcdf 	bl	2150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e792:	b120      	cbz	r0, e79e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    e794:	f240 217e 	movw	r1, #638	; 0x27e
    e798:	2017      	movs	r0, #23
    e79a:	f7f3 f909 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e79e:	4668      	mov	r0, sp
    e7a0:	f7f3 fc86 	bl	20b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e7a4:	2800      	cmp	r0, #0
    e7a6:	d0ef      	beq.n	e788 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    e7a8:	bd1c      	pop	{r2, r3, r4, pc}

0000e7aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e7aa:	b570      	push	{r4, r5, r6, lr}
    e7ac:	460e      	mov	r6, r1
    e7ae:	461d      	mov	r5, r3
    e7b0:	4611      	mov	r1, r2
    e7b2:	f000 f813 	bl	e7dc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    e7b6:	4604      	mov	r4, r0
    e7b8:	4629      	mov	r1, r5
    e7ba:	4630      	mov	r0, r6
    e7bc:	f000 f804 	bl	e7c8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    e7c0:	4420      	add	r0, r4
    e7c2:	1d00      	adds	r0, r0, #4
    e7c4:	b280      	uxth	r0, r0
    e7c6:	bd70      	pop	{r4, r5, r6, pc}
    e7c8:	b510      	push	{r4, lr}
    e7ca:	460a      	mov	r2, r1
    e7cc:	2109      	movs	r1, #9
    e7ce:	f7ff ff0a 	bl	e5e6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e7d2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e7d6:	1cc0      	adds	r0, r0, #3
    e7d8:	4008      	ands	r0, r1
    e7da:	bd10      	pop	{r4, pc}
    e7dc:	b510      	push	{r4, lr}
    e7de:	460a      	mov	r2, r1
    e7e0:	210a      	movs	r1, #10
    e7e2:	f7ff ff00 	bl	e5e6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e7e6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e7ea:	1cc0      	adds	r0, r0, #3
    e7ec:	4008      	ands	r0, r1
    e7ee:	bd10      	pop	{r4, pc}
    e7f0:	b109      	cbz	r1, e7f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    e7f2:	2100      	movs	r1, #0
    e7f4:	e000      	b.n	e7f8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    e7f6:	2102      	movs	r1, #2
    e7f8:	1843      	adds	r3, r0, r1
    e7fa:	7d1a      	ldrb	r2, [r3, #20]
    e7fc:	2a02      	cmp	r2, #2
    e7fe:	d008      	beq.n	e812 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    e800:	7d5b      	ldrb	r3, [r3, #21]
    e802:	2b02      	cmp	r3, #2
    e804:	d009      	beq.n	e81a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    e806:	2a03      	cmp	r2, #3
    e808:	d003      	beq.n	e812 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    e80a:	2b03      	cmp	r3, #3
    e80c:	d005      	beq.n	e81a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    e80e:	2000      	movs	r0, #0
    e810:	4770      	bx	lr
    e812:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e816:	8b00      	ldrh	r0, [r0, #24]
    e818:	4770      	bx	lr
    e81a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e81e:	8b40      	ldrh	r0, [r0, #26]
    e820:	4770      	bx	lr
    e822:	b109      	cbz	r1, e828 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    e824:	2100      	movs	r1, #0
    e826:	e000      	b.n	e82a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    e828:	2102      	movs	r1, #2
    e82a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e82e:	8b01      	ldrh	r1, [r0, #24]
    e830:	b911      	cbnz	r1, e838 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    e832:	8b40      	ldrh	r0, [r0, #26]
    e834:	2800      	cmp	r0, #0
    e836:	d000      	beq.n	e83a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    e838:	2001      	movs	r0, #1
    e83a:	4770      	bx	lr
    e83c:	b538      	push	{r3, r4, r5, lr}
    e83e:	7883      	ldrb	r3, [r0, #2]
    e840:	f88d 3000 	strb.w	r3, [sp]
    e844:	9b00      	ldr	r3, [sp, #0]
    e846:	9300      	str	r3, [sp, #0]
    e848:	f89d 3000 	ldrb.w	r3, [sp]
    e84c:	b95b      	cbnz	r3, e866 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    e84e:	2400      	movs	r4, #0
    e850:	b10a      	cbz	r2, e856 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    e852:	2300      	movs	r3, #0
    e854:	e000      	b.n	e858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    e856:	2302      	movs	r3, #2
    e858:	18c2      	adds	r2, r0, r3
    e85a:	7d15      	ldrb	r5, [r2, #20]
    e85c:	2d02      	cmp	r5, #2
    e85e:	d004      	beq.n	e86a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    e860:	7d52      	ldrb	r2, [r2, #21]
    e862:	2a02      	cmp	r2, #2
    e864:	d004      	beq.n	e870 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    e866:	2000      	movs	r0, #0
    e868:	bd38      	pop	{r3, r4, r5, pc}
    e86a:	461a      	mov	r2, r3
    e86c:	1c5b      	adds	r3, r3, #1
    e86e:	e000      	b.n	e872 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    e870:	1c5a      	adds	r2, r3, #1
    e872:	b179      	cbz	r1, e894 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    e874:	18c5      	adds	r5, r0, r3
    e876:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e87a:	752c      	strb	r4, [r5, #20]
    e87c:	831c      	strh	r4, [r3, #24]
    e87e:	2303      	movs	r3, #3
    e880:	1884      	adds	r4, r0, r2
    e882:	7523      	strb	r3, [r4, #20]
    e884:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e888:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    e88c:	685b      	ldr	r3, [r3, #4]
    e88e:	600b      	str	r3, [r1, #0]
    e890:	8b00      	ldrh	r0, [r0, #24]
    e892:	8088      	strh	r0, [r1, #4]
    e894:	2001      	movs	r0, #1
    e896:	bd38      	pop	{r3, r4, r5, pc}
    e898:	b510      	push	{r4, lr}
    e89a:	b109      	cbz	r1, e8a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    e89c:	2100      	movs	r1, #0
    e89e:	e000      	b.n	e8a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    e8a0:	2102      	movs	r1, #2
    e8a2:	1843      	adds	r3, r0, r1
    e8a4:	7d1c      	ldrb	r4, [r3, #20]
    e8a6:	4294      	cmp	r4, r2
    e8a8:	d103      	bne.n	e8b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    e8aa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e8ae:	8b00      	ldrh	r0, [r0, #24]
    e8b0:	bd10      	pop	{r4, pc}
    e8b2:	7d5b      	ldrb	r3, [r3, #21]
    e8b4:	4293      	cmp	r3, r2
    e8b6:	d103      	bne.n	e8c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    e8b8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e8bc:	8b40      	ldrh	r0, [r0, #26]
    e8be:	bd10      	pop	{r4, pc}
    e8c0:	2000      	movs	r0, #0
    e8c2:	bd10      	pop	{r4, pc}
    e8c4:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    e8c8:	d201      	bcs.n	e8ce <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    e8ca:	0841      	lsrs	r1, r0, #1
    e8cc:	e000      	b.n	e8d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    e8ce:	21ff      	movs	r1, #255	; 0xff
    e8d0:	1a40      	subs	r0, r0, r1
    e8d2:	f240 6172 	movw	r1, #1650	; 0x672
    e8d6:	4288      	cmp	r0, r1
    e8d8:	db00      	blt.n	e8dc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    e8da:	4608      	mov	r0, r1
    e8dc:	b280      	uxth	r0, r0
    e8de:	4770      	bx	lr

0000e8e0 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    e8e0:	2101      	movs	r1, #1
    e8e2:	f7ff bf85 	b.w	e7f0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000e8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    e8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8ea:	4606      	mov	r6, r0
    e8ec:	f342 0780 	sbfx	r7, r2, #2, #1
    e8f0:	7848      	ldrb	r0, [r1, #1]
    e8f2:	460c      	mov	r4, r1
    e8f4:	f022 0504 	bic.w	r5, r2, #4
    e8f8:	1c7f      	adds	r7, r7, #1
    e8fa:	b100      	cbz	r0, e8fe <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    e8fc:	b90d      	cbnz	r5, e902 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    e8fe:	4328      	orrs	r0, r5
    e900:	d104      	bne.n	e90c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    e902:	b145      	cbz	r5, e916 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    e904:	2100      	movs	r1, #0
    e906:	4620      	mov	r0, r4
    e908:	f7f3 fd42 	bl	2390 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    e90c:	20ff      	movs	r0, #255	; 0xff
    e90e:	70a0      	strb	r0, [r4, #2]
    e910:	b11f      	cbz	r7, e91a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    e912:	2000      	movs	r0, #0
    e914:	e002      	b.n	e91c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    e916:	2101      	movs	r1, #1
    e918:	e7f5      	b.n	e906 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    e91a:	2002      	movs	r0, #2
    e91c:	1821      	adds	r1, r4, r0
    e91e:	7d09      	ldrb	r1, [r1, #20]
    e920:	2903      	cmp	r1, #3
    e922:	d102      	bne.n	e92a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e924:	2d02      	cmp	r5, #2
    e926:	d000      	beq.n	e92a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e928:	1c40      	adds	r0, r0, #1
    e92a:	1822      	adds	r2, r4, r0
    e92c:	2101      	movs	r1, #1
    e92e:	7511      	strb	r1, [r2, #20]
    e930:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    e934:	2200      	movs	r2, #0
    e936:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e93a:	830a      	strh	r2, [r1, #24]
    e93c:	6840      	ldr	r0, [r0, #4]
    e93e:	70a2      	strb	r2, [r4, #2]
    e940:	4631      	mov	r1, r6
    e942:	f362 010f 	bfi	r1, r2, #0, #16
    e946:	e9c6 0100 	strd	r0, r1, [r6]
    e94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e94e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    e94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e952:	461e      	mov	r6, r3
    e954:	4613      	mov	r3, r2
    e956:	4604      	mov	r4, r0
    e958:	b109      	cbz	r1, e95e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    e95a:	2000      	movs	r0, #0
    e95c:	e000      	b.n	e960 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    e95e:	2002      	movs	r0, #2
    e960:	21ff      	movs	r1, #255	; 0xff
    e962:	70a1      	strb	r1, [r4, #2]
    e964:	1821      	adds	r1, r4, r0
    e966:	7d0a      	ldrb	r2, [r1, #20]
    e968:	2a01      	cmp	r2, #1
    e96a:	d003      	beq.n	e974 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    e96c:	7d49      	ldrb	r1, [r1, #21]
    e96e:	2901      	cmp	r1, #1
    e970:	d10c      	bne.n	e98c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    e972:	1c40      	adds	r0, r0, #1
    e974:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    e978:	2700      	movs	r7, #0
    e97a:	8b29      	ldrh	r1, [r5, #24]
    e97c:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    e980:	198a      	adds	r2, r1, r6
    e982:	4562      	cmp	r2, ip
    e984:	d905      	bls.n	e992 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    e986:	4420      	add	r0, r4
    e988:	832f      	strh	r7, [r5, #24]
    e98a:	7507      	strb	r7, [r0, #20]
    e98c:	2000      	movs	r0, #0
    e98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e992:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e996:	4632      	mov	r2, r6
    e998:	6840      	ldr	r0, [r0, #4]
    e99a:	4408      	add	r0, r1
    e99c:	4619      	mov	r1, r3
    e99e:	f003 fa72 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e9a2:	8b28      	ldrh	r0, [r5, #24]
    e9a4:	4430      	add	r0, r6
    e9a6:	8328      	strh	r0, [r5, #24]
    e9a8:	70a7      	strb	r7, [r4, #2]
    e9aa:	2001      	movs	r0, #1
    e9ac:	e7ef      	b.n	e98e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000e9ae <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    e9ae:	b510      	push	{r4, lr}
    e9b0:	2101      	movs	r1, #1
    e9b2:	f7ff ff36 	bl	e822 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    e9b6:	2800      	cmp	r0, #0
    e9b8:	d000      	beq.n	e9bc <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    e9ba:	2001      	movs	r0, #1
    e9bc:	bd10      	pop	{r4, pc}

0000e9be <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    e9be:	2201      	movs	r2, #1
    e9c0:	f7ff bf3c 	b.w	e83c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000e9c4 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    e9c4:	2200      	movs	r2, #0
    e9c6:	f7ff bf39 	b.w	e83c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000e9ca <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    e9ca:	b510      	push	{r4, lr}
    e9cc:	2100      	movs	r1, #0
    e9ce:	f7ff ff28 	bl	e822 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    e9d2:	2800      	cmp	r0, #0
    e9d4:	d000      	beq.n	e9d8 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    e9d6:	2001      	movs	r0, #1
    e9d8:	bd10      	pop	{r4, pc}

0000e9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    e9da:	b570      	push	{r4, r5, r6, lr}
    e9dc:	b109      	cbz	r1, e9e2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    e9de:	2300      	movs	r3, #0
    e9e0:	e000      	b.n	e9e4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    e9e2:	2302      	movs	r3, #2
    e9e4:	21ff      	movs	r1, #255	; 0xff
    e9e6:	7081      	strb	r1, [r0, #2]
    e9e8:	18c1      	adds	r1, r0, r3
    e9ea:	2402      	movs	r4, #2
    e9ec:	7d0d      	ldrb	r5, [r1, #20]
    e9ee:	2d01      	cmp	r5, #1
    e9f0:	d007      	beq.n	ea02 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    e9f2:	7d4d      	ldrb	r5, [r1, #21]
    e9f4:	2d01      	cmp	r5, #1
    e9f6:	d009      	beq.n	ea0c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    e9f8:	f44f 718b 	mov.w	r1, #278	; 0x116
    e9fc:	2009      	movs	r0, #9
    e9fe:	f7f2 ffd7 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea02:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    ea06:	831a      	strh	r2, [r3, #24]
    ea08:	750c      	strb	r4, [r1, #20]
    ea0a:	e003      	b.n	ea14 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    ea0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    ea10:	835a      	strh	r2, [r3, #26]
    ea12:	754c      	strb	r4, [r1, #21]
    ea14:	2100      	movs	r1, #0
    ea16:	7081      	strb	r1, [r0, #2]
    ea18:	bd70      	pop	{r4, r5, r6, pc}

0000ea1a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    ea1a:	2101      	movs	r1, #1
    ea1c:	7001      	strb	r1, [r0, #0]
    ea1e:	4770      	bx	lr

0000ea20 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    ea20:	2201      	movs	r2, #1
    ea22:	4611      	mov	r1, r2
    ea24:	f7ff bf38 	b.w	e898 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000ea28 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    ea28:	2201      	movs	r2, #1
    ea2a:	2100      	movs	r1, #0
    ea2c:	f7ff bf34 	b.w	e898 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000ea30 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    ea30:	2100      	movs	r1, #0
    ea32:	f7ff bedd 	b.w	e7f0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    ea36:	2800      	cmp	r0, #0
    ea38:	db09      	blt.n	ea4e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    ea3a:	f000 021f 	and.w	r2, r0, #31
    ea3e:	2101      	movs	r1, #1
    ea40:	4091      	lsls	r1, r2
    ea42:	0940      	lsrs	r0, r0, #5
    ea44:	0080      	lsls	r0, r0, #2
    ea46:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ea4a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ea4e:	4770      	bx	lr
    ea50:	2800      	cmp	r0, #0
    ea52:	db0d      	blt.n	ea70 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    ea54:	f000 021f 	and.w	r2, r0, #31
    ea58:	2101      	movs	r1, #1
    ea5a:	4091      	lsls	r1, r2
    ea5c:	0940      	lsrs	r0, r0, #5
    ea5e:	0080      	lsls	r0, r0, #2
    ea60:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ea64:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ea68:	f3bf 8f4f 	dsb	sy
    ea6c:	f3bf 8f6f 	isb	sy
    ea70:	4770      	bx	lr
    ea72:	b510      	push	{r4, lr}
    ea74:	200e      	movs	r0, #14
    ea76:	f7ff ffeb 	bl	ea50 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    ea7a:	200e      	movs	r0, #14
    ea7c:	f7ff ffdb 	bl	ea36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    ea80:	200f      	movs	r0, #15
    ea82:	f7ff ffe5 	bl	ea50 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    ea86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea8a:	200f      	movs	r0, #15
    ea8c:	f7ff bfd3 	b.w	ea36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    ea90:	2800      	cmp	r0, #0
    ea92:	db09      	blt.n	eaa8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    ea94:	f000 021f 	and.w	r2, r0, #31
    ea98:	2101      	movs	r1, #1
    ea9a:	4091      	lsls	r1, r2
    ea9c:	0940      	lsrs	r0, r0, #5
    ea9e:	0080      	lsls	r0, r0, #2
    eaa0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    eaa4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    eaa8:	4770      	bx	lr
    eaaa:	5840      	ldr	r0, [r0, r1]
    eaac:	2800      	cmp	r0, #0
    eaae:	d000      	beq.n	eab2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    eab0:	2001      	movs	r0, #1
    eab2:	4770      	bx	lr

0000eab4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    eab4:	b510      	push	{r4, lr}
    eab6:	4604      	mov	r4, r0
    eab8:	4620      	mov	r0, r4
    eaba:	f7f3 fd71 	bl	25a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    eabe:	2811      	cmp	r0, #17
    eac0:	d0fa      	beq.n	eab8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    eac2:	bd10      	pop	{r4, pc}

0000eac4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    eac4:	b510      	push	{r4, lr}
    eac6:	f7ff fff5 	bl	eab4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    eaca:	2800      	cmp	r0, #0
    eacc:	d003      	beq.n	ead6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    eace:	21a9      	movs	r1, #169	; 0xa9
    ead0:	201d      	movs	r0, #29
    ead2:	f7f2 ff6d 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ead6:	bd10      	pop	{r4, pc}

0000ead8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    ead8:	f7f3 bec0 	b.w	285c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000eadc <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    eadc:	f7f3 beae 	b.w	283c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000eae0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    eae0:	b510      	push	{r4, lr}
    eae2:	4050      	eors	r0, r2
    eae4:	780a      	ldrb	r2, [r1, #0]
    eae6:	781c      	ldrb	r4, [r3, #0]
    eae8:	4062      	eors	r2, r4
    eaea:	4410      	add	r0, r2
    eaec:	784a      	ldrb	r2, [r1, #1]
    eaee:	785c      	ldrb	r4, [r3, #1]
    eaf0:	4062      	eors	r2, r4
    eaf2:	4410      	add	r0, r2
    eaf4:	788a      	ldrb	r2, [r1, #2]
    eaf6:	789c      	ldrb	r4, [r3, #2]
    eaf8:	4062      	eors	r2, r4
    eafa:	4410      	add	r0, r2
    eafc:	78ca      	ldrb	r2, [r1, #3]
    eafe:	78dc      	ldrb	r4, [r3, #3]
    eb00:	4062      	eors	r2, r4
    eb02:	4410      	add	r0, r2
    eb04:	790a      	ldrb	r2, [r1, #4]
    eb06:	791c      	ldrb	r4, [r3, #4]
    eb08:	7949      	ldrb	r1, [r1, #5]
    eb0a:	4062      	eors	r2, r4
    eb0c:	4410      	add	r0, r2
    eb0e:	795a      	ldrb	r2, [r3, #5]
    eb10:	4051      	eors	r1, r2
    eb12:	42c1      	cmn	r1, r0
    eb14:	d101      	bne.n	eb1a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    eb16:	2001      	movs	r0, #1
    eb18:	bd10      	pop	{r4, pc}
    eb1a:	2000      	movs	r0, #0
    eb1c:	bd10      	pop	{r4, pc}

0000eb1e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    eb1e:	b510      	push	{r4, lr}
    eb20:	2900      	cmp	r1, #0
    eb22:	4604      	mov	r4, r0
    eb24:	f04f 0106 	mov.w	r1, #6
    eb28:	d002      	beq.n	eb30 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    eb2a:	f7f2 ffe3 	bl	1af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    eb2e:	e001      	b.n	eb34 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    eb30:	f7f2 ffee 	bl	1b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    eb34:	7960      	ldrb	r0, [r4, #5]
    eb36:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    eb3a:	7160      	strb	r0, [r4, #5]
    eb3c:	bd10      	pop	{r4, pc}

0000eb3e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    eb3e:	4770      	bx	lr

0000eb40 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    eb40:	b530      	push	{r4, r5, lr}
    eb42:	460c      	mov	r4, r1
    eb44:	4605      	mov	r5, r0
    eb46:	b08d      	sub	sp, #52	; 0x34
    eb48:	f04f 0103 	mov.w	r1, #3
    eb4c:	f104 0003 	add.w	r0, r4, #3
    eb50:	b112      	cbz	r2, eb58 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    eb52:	f7f2 ffcf 	bl	1af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    eb56:	e001      	b.n	eb5c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    eb58:	f7f2 ffda 	bl	1b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    eb5c:	7960      	ldrb	r0, [r4, #5]
    eb5e:	220d      	movs	r2, #13
    eb60:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    eb64:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    eb68:	7160      	strb	r0, [r4, #5]
    eb6a:	2100      	movs	r1, #0
    eb6c:	a804      	add	r0, sp, #16
    eb6e:	f003 fa04 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eb72:	78e0      	ldrb	r0, [r4, #3]
    eb74:	f88d 001f 	strb.w	r0, [sp, #31]
    eb78:	7920      	ldrb	r0, [r4, #4]
    eb7a:	f88d 001e 	strb.w	r0, [sp, #30]
    eb7e:	7960      	ldrb	r0, [r4, #5]
    eb80:	f88d 001d 	strb.w	r0, [sp, #29]
    eb84:	2210      	movs	r2, #16
    eb86:	4629      	mov	r1, r5
    eb88:	4668      	mov	r0, sp
    eb8a:	f003 f97c 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb8e:	4668      	mov	r0, sp
    eb90:	f7ff ff98 	bl	eac4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    eb94:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    eb98:	7020      	strb	r0, [r4, #0]
    eb9a:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    eb9e:	7060      	strb	r0, [r4, #1]
    eba0:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    eba4:	70a0      	strb	r0, [r4, #2]
    eba6:	b00d      	add	sp, #52	; 0x34
    eba8:	bd30      	pop	{r4, r5, pc}

0000ebaa <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>:
    ebaa:	f7f4 b9c1 	b.w	2f30 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    ebae:	07c1      	lsls	r1, r0, #31
    ebb0:	d001      	beq.n	ebb6 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0xc>
    ebb2:	2001      	movs	r0, #1
    ebb4:	4770      	bx	lr
    ebb6:	0780      	lsls	r0, r0, #30
    ebb8:	d501      	bpl.n	ebbe <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x14>
    ebba:	2002      	movs	r0, #2
    ebbc:	4770      	bx	lr
    ebbe:	2000      	movs	r0, #0
    ebc0:	4770      	bx	lr
    ebc2:	b510      	push	{r4, lr}
    ebc4:	2801      	cmp	r0, #1
    ebc6:	d008      	beq.n	ebda <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
    ebc8:	2802      	cmp	r0, #2
    ebca:	d004      	beq.n	ebd6 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x2c>
    ebcc:	f240 4121 	movw	r1, #1057	; 0x421
    ebd0:	2006      	movs	r0, #6
    ebd2:	f7f2 feed 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebd6:	2001      	movs	r0, #1
    ebd8:	bd10      	pop	{r4, pc}
    ebda:	2000      	movs	r0, #0
    ebdc:	bd10      	pop	{r4, pc}
    ebde:	2900      	cmp	r1, #0
    ebe0:	d004      	beq.n	ebec <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x42>
    ebe2:	2801      	cmp	r0, #1
    ebe4:	d003      	beq.n	ebee <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    ebe6:	2901      	cmp	r1, #1
    ebe8:	d001      	beq.n	ebee <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    ebea:	2002      	movs	r0, #2
    ebec:	4770      	bx	lr
    ebee:	2001      	movs	r0, #1
    ebf0:	4770      	bx	lr
    ebf2:	f7ff bc90 	b.w	e516 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000ebf6 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    ebf6:	2101      	movs	r1, #1
    ebf8:	f7f4 bcb8 	b.w	356c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000ebfc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    ebfc:	b510      	push	{r4, lr}
    ebfe:	f002 fde3 	bl	117c8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    ec02:	b118      	cbz	r0, ec0c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    ec04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec08:	f7f9 bd08 	b.w	861c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    ec0c:	20ff      	movs	r0, #255	; 0xff
    ec0e:	bd10      	pop	{r4, pc}

0000ec10 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    ec10:	b510      	push	{r4, lr}
    ec12:	f7f4 fcd7 	bl	35c4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    ec16:	2808      	cmp	r0, #8
    ec18:	d003      	beq.n	ec22 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    ec1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec1e:	f7f4 bcbd 	b.w	359c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    ec22:	bd10      	pop	{r4, pc}

0000ec24 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    ec24:	b510      	push	{r4, lr}
    ec26:	f7f4 fccd 	bl	35c4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    ec2a:	2808      	cmp	r0, #8
    ec2c:	d007      	beq.n	ec3e <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    ec2e:	f7f4 fcb5 	bl	359c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    ec32:	2808      	cmp	r0, #8
    ec34:	d003      	beq.n	ec3e <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    ec36:	f7f4 fd27 	bl	3688 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x128>
    ec3a:	2001      	movs	r0, #1
    ec3c:	bd10      	pop	{r4, pc}
    ec3e:	2000      	movs	r0, #0
    ec40:	bd10      	pop	{r4, pc}

0000ec42 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    ec42:	b570      	push	{r4, r5, r6, lr}
    ec44:	460e      	mov	r6, r1
    ec46:	b08c      	sub	sp, #48	; 0x30
    ec48:	4614      	mov	r4, r2
    ec4a:	4601      	mov	r1, r0
    ec4c:	461d      	mov	r5, r3
    ec4e:	2210      	movs	r2, #16
    ec50:	4668      	mov	r0, sp
    ec52:	f000 f929 	bl	eea8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ec56:	2210      	movs	r2, #16
    ec58:	4631      	mov	r1, r6
    ec5a:	a804      	add	r0, sp, #16
    ec5c:	f000 f924 	bl	eea8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ec60:	4668      	mov	r0, sp
    ec62:	f7ff ff2f 	bl	eac4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ec66:	a908      	add	r1, sp, #32
    ec68:	f04f 0210 	mov.w	r2, #16
    ec6c:	4628      	mov	r0, r5
    ec6e:	b11c      	cbz	r4, ec78 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    ec70:	f000 f91a 	bl	eea8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ec74:	b00c      	add	sp, #48	; 0x30
    ec76:	bd70      	pop	{r4, r5, r6, pc}
    ec78:	f003 f905 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ec7c:	e7fa      	b.n	ec74 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    ec7e:	b510      	push	{r4, lr}
    ec80:	460c      	mov	r4, r1
    ec82:	2100      	movs	r1, #0
    ec84:	f7f3 f9c2 	bl	200c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ec88:	6060      	str	r0, [r4, #4]
    ec8a:	b118      	cbz	r0, ec94 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    ec8c:	2001      	movs	r0, #1
    ec8e:	7020      	strb	r0, [r4, #0]
    ec90:	2000      	movs	r0, #0
    ec92:	bd10      	pop	{r4, pc}
    ec94:	2002      	movs	r0, #2
    ec96:	bd10      	pop	{r4, pc}

0000ec98 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    ec98:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ec9c:	4348      	muls	r0, r1
    ec9e:	4770      	bx	lr

0000eca0 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    eca0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    eca4:	fbb0 f0f1 	udiv	r0, r0, r1
    eca8:	b280      	uxth	r0, r0
    ecaa:	4770      	bx	lr

0000ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    ecac:	b510      	push	{r4, lr}
    ecae:	f1a2 0310 	sub.w	r3, r2, #16
    ecb2:	290d      	cmp	r1, #13
    ecb4:	d24d      	bcs.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ecb6:	e8df f001 	tbb	[pc, r1]
    ecba:	0907      	.short	0x0907
    ecbc:	1d1a150e 	.word	0x1d1a150e
    ecc0:	4e2c2921 	.word	0x4e2c2921
    ecc4:	0048362f 	.word	0x0048362f
    ecc8:	b3f2      	cbz	r2, ed48 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    ecca:	e042      	b.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    eccc:	2a06      	cmp	r2, #6
    ecce:	d03e      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ecd0:	2a07      	cmp	r2, #7
    ecd2:	d03c      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ecd4:	e03d      	b.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ecd6:	2a0b      	cmp	r2, #11
    ecd8:	d039      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ecda:	2a0c      	cmp	r2, #12
    ecdc:	d037      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ecde:	2a0a      	cmp	r2, #10
    ece0:	d035      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ece2:	e036      	b.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ece4:	2a0d      	cmp	r2, #13
    ece6:	d032      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ece8:	2a0e      	cmp	r2, #14
    ecea:	d030      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ecec:	e031      	b.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ecee:	2b0c      	cmp	r3, #12
    ecf0:	d92d      	bls.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ecf2:	e02e      	b.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ecf4:	3a11      	subs	r2, #17
    ecf6:	2a0b      	cmp	r2, #11
    ecf8:	d929      	bls.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ecfa:	e02a      	b.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ecfc:	2b03      	cmp	r3, #3
    ecfe:	d926      	bls.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed00:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    ed04:	b1f8      	cbz	r0, ed46 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    ed06:	2a1c      	cmp	r2, #28
    ed08:	d921      	bls.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed0a:	e022      	b.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ed0c:	2a04      	cmp	r2, #4
    ed0e:	d01e      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed10:	e01f      	b.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ed12:	2a01      	cmp	r2, #1
    ed14:	d01b      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed16:	e01c      	b.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ed18:	2a1d      	cmp	r2, #29
    ed1a:	d018      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed1c:	2a1e      	cmp	r2, #30
    ed1e:	d016      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed20:	2a1f      	cmp	r2, #31
    ed22:	d014      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed24:	e015      	b.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ed26:	2a20      	cmp	r2, #32
    ed28:	d011      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed2a:	2a21      	cmp	r2, #33	; 0x21
    ed2c:	d00f      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed2e:	2a22      	cmp	r2, #34	; 0x22
    ed30:	d00d      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed32:	2a23      	cmp	r2, #35	; 0x23
    ed34:	d00b      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed36:	2a24      	cmp	r2, #36	; 0x24
    ed38:	d009      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed3a:	2a25      	cmp	r2, #37	; 0x25
    ed3c:	d007      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed3e:	2a26      	cmp	r2, #38	; 0x26
    ed40:	d005      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed42:	2a2e      	cmp	r2, #46	; 0x2e
    ed44:	d003      	beq.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed46:	e004      	b.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ed48:	e001      	b.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ed4a:	2a28      	cmp	r2, #40	; 0x28
    ed4c:	d101      	bne.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ed4e:	2001      	movs	r0, #1
    ed50:	bd10      	pop	{r4, pc}
    ed52:	2000      	movs	r0, #0
    ed54:	bd10      	pop	{r4, pc}
    ed56:	2a0f      	cmp	r2, #15
    ed58:	d1fb      	bne.n	ed52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ed5a:	e7f8      	b.n	ed4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000ed5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ed5c:	280b      	cmp	r0, #11
    ed5e:	d019      	beq.n	ed94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ed60:	280c      	cmp	r0, #12
    ed62:	d017      	beq.n	ed94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ed64:	280a      	cmp	r0, #10
    ed66:	d015      	beq.n	ed94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ed68:	280d      	cmp	r0, #13
    ed6a:	d013      	beq.n	ed94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ed6c:	280e      	cmp	r0, #14
    ed6e:	d011      	beq.n	ed94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ed70:	2820      	cmp	r0, #32
    ed72:	d00f      	beq.n	ed94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ed74:	2821      	cmp	r0, #33	; 0x21
    ed76:	d00d      	beq.n	ed94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ed78:	2822      	cmp	r0, #34	; 0x22
    ed7a:	d00b      	beq.n	ed94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ed7c:	2823      	cmp	r0, #35	; 0x23
    ed7e:	d009      	beq.n	ed94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ed80:	2824      	cmp	r0, #36	; 0x24
    ed82:	d007      	beq.n	ed94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ed84:	2825      	cmp	r0, #37	; 0x25
    ed86:	d005      	beq.n	ed94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ed88:	2826      	cmp	r0, #38	; 0x26
    ed8a:	d003      	beq.n	ed94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ed8c:	282e      	cmp	r0, #46	; 0x2e
    ed8e:	d001      	beq.n	ed94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ed90:	2000      	movs	r0, #0
    ed92:	4770      	bx	lr
    ed94:	2001      	movs	r0, #1
    ed96:	4770      	bx	lr

0000ed98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ed98:	f011 0f0c 	tst.w	r1, #12
    ed9c:	d018      	beq.n	edd0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    ed9e:	074a      	lsls	r2, r1, #29
    eda0:	f44f 7116 	mov.w	r1, #600	; 0x258
    eda4:	2a00      	cmp	r2, #0
    eda6:	da02      	bge.n	edae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    eda8:	f04f 0210 	mov.w	r2, #16
    edac:	e001      	b.n	edb2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    edae:	f04f 0240 	mov.w	r2, #64	; 0x40
    edb2:	da01      	bge.n	edb8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    edb4:	f04f 0196 	mov.w	r1, #150	; 0x96
    edb8:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    edbc:	eba0 0301 	sub.w	r3, r0, r1
    edc0:	4288      	cmp	r0, r1
    edc2:	d903      	bls.n	edcc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    edc4:	fb93 f0f2 	sdiv	r0, r3, r2
    edc8:	b280      	uxth	r0, r0
    edca:	4770      	bx	lr
    edcc:	2000      	movs	r0, #0
    edce:	4770      	bx	lr
    edd0:	2902      	cmp	r1, #2
    edd2:	d008      	beq.n	ede6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    edd4:	2870      	cmp	r0, #112	; 0x70
    edd6:	d9f9      	bls.n	edcc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    edd8:	3870      	subs	r0, #112	; 0x70
    edda:	17c1      	asrs	r1, r0, #31
    eddc:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    ede0:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    ede4:	4770      	bx	lr
    ede6:	283c      	cmp	r0, #60	; 0x3c
    ede8:	d9f0      	bls.n	edcc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    edea:	383c      	subs	r0, #60	; 0x3c
    edec:	17c1      	asrs	r1, r0, #31
    edee:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    edf2:	f3c0 008f 	ubfx	r0, r0, #2, #16
    edf6:	4770      	bx	lr

0000edf8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    edf8:	6809      	ldr	r1, [r1, #0]
    edfa:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    edfe:	4770      	bx	lr

0000ee00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    ee00:	07c1      	lsls	r1, r0, #31
    ee02:	d001      	beq.n	ee08 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    ee04:	2001      	movs	r0, #1
    ee06:	4770      	bx	lr
    ee08:	0781      	lsls	r1, r0, #30
    ee0a:	d501      	bpl.n	ee10 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    ee0c:	2002      	movs	r0, #2
    ee0e:	4770      	bx	lr
    ee10:	0740      	lsls	r0, r0, #29
    ee12:	d501      	bpl.n	ee18 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    ee14:	2008      	movs	r0, #8
    ee16:	4770      	bx	lr
    ee18:	2000      	movs	r0, #0
    ee1a:	4770      	bx	lr

0000ee1c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    ee1c:	b510      	push	{r4, lr}
    ee1e:	f640 12c4 	movw	r2, #2500	; 0x9c4
    ee22:	2901      	cmp	r1, #1
    ee24:	d006      	beq.n	ee34 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    ee26:	2902      	cmp	r1, #2
    ee28:	d005      	beq.n	ee36 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    ee2a:	f44f 7168 	mov.w	r1, #928	; 0x3a0
    ee2e:	2029      	movs	r0, #41	; 0x29
    ee30:	f7f2 fdbe 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee34:	b108      	cbz	r0, ee3a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    ee36:	4610      	mov	r0, r2
    ee38:	bd10      	pop	{r4, pc}
    ee3a:	f240 40e2 	movw	r0, #1250	; 0x4e2
    ee3e:	bd10      	pop	{r4, pc}

0000ee40 <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>:
    ee40:	f880 106e 	strb.w	r1, [r0, #110]	; 0x6e
    ee44:	f001 bcf8 	b.w	10838 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>

0000ee48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    ee48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee4c:	4607      	mov	r7, r0
    ee4e:	460e      	mov	r6, r1
    ee50:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    ee54:	f7fc fba2 	bl	b59c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    ee58:	b198      	cbz	r0, ee82 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    ee5a:	b31e      	cbz	r6, eea4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    ee5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    ee60:	1b40      	subs	r0, r0, r5
    ee62:	2300      	movs	r3, #0
    ee64:	eb61 0104 	sbc.w	r1, r1, r4
    ee68:	461a      	mov	r2, r3
    ee6a:	1a1b      	subs	r3, r3, r0
    ee6c:	418a      	sbcs	r2, r1
    ee6e:	da19      	bge.n	eea4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    ee70:	1c42      	adds	r2, r0, #1
    ee72:	f171 0100 	sbcs.w	r1, r1, #0
    ee76:	db07      	blt.n	ee88 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    ee78:	f240 211a 	movw	r1, #538	; 0x21a
    ee7c:	2029      	movs	r0, #41	; 0x29
    ee7e:	f7f2 fd97 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee82:	f44f 7104 	mov.w	r1, #528	; 0x210
    ee86:	e7f9      	b.n	ee7c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    ee88:	4430      	add	r0, r6
    ee8a:	1e40      	subs	r0, r0, #1
    ee8c:	fbb0 f1f6 	udiv	r1, r0, r6
    ee90:	fb01 f006 	mul.w	r0, r1, r6
    ee94:	1828      	adds	r0, r5, r0
    ee96:	f144 0400 	adc.w	r4, r4, #0
    ee9a:	e9c7 0404 	strd	r0, r4, [r7, #16]
    ee9e:	4608      	mov	r0, r1
    eea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eea4:	2000      	movs	r0, #0
    eea6:	e7fb      	b.n	eea0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000eea8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    eea8:	b530      	push	{r4, r5, lr}
    eeaa:	4613      	mov	r3, r2
    eeac:	e006      	b.n	eebc <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    eeae:	18cc      	adds	r4, r1, r3
    eeb0:	1ad5      	subs	r5, r2, r3
    eeb2:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    eeb6:	1e5b      	subs	r3, r3, #1
    eeb8:	5544      	strb	r4, [r0, r5]
    eeba:	b2db      	uxtb	r3, r3
    eebc:	2b00      	cmp	r3, #0
    eebe:	d1f6      	bne.n	eeae <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    eec0:	bd30      	pop	{r4, r5, pc}

0000eec2 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    eec2:	2300      	movs	r3, #0
    eec4:	6403      	str	r3, [r0, #64]	; 0x40
    eec6:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    eeca:	f240 2371 	movw	r3, #625	; 0x271
    eece:	435a      	muls	r2, r3
    eed0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    eed4:	1e52      	subs	r2, r2, #1
    eed6:	fbb2 f1f1 	udiv	r1, r2, r1
    eeda:	6441      	str	r1, [r0, #68]	; 0x44
    eedc:	4770      	bx	lr

0000eede <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    eede:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    eee2:	4607      	mov	r7, r0
    eee4:	4690      	mov	r8, r2
    eee6:	468b      	mov	fp, r1
    eee8:	2601      	movs	r6, #1
    eeea:	4608      	mov	r0, r1
    eeec:	f000 f9e5 	bl	f2ba <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    eef0:	4682      	mov	sl, r0
    eef2:	4658      	mov	r0, fp
    eef4:	f000 f9e3 	bl	f2be <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    eef8:	4681      	mov	r9, r0
    eefa:	f7ff ff81 	bl	ee00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    eefe:	4604      	mov	r4, r0
    ef00:	4650      	mov	r0, sl
    ef02:	f7ff ff7d 	bl	ee00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    ef06:	4605      	mov	r5, r0
    ef08:	ea54 0005 	orrs.w	r0, r4, r5
    ef0c:	d100      	bne.n	ef10 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    ef0e:	2600      	movs	r6, #0
    ef10:	f7f9 faac 	bl	846c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ef14:	ea10 0f09 	tst.w	r0, r9
    ef18:	d100      	bne.n	ef1c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    ef1a:	2400      	movs	r4, #0
    ef1c:	f7f9 faa6 	bl	846c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ef20:	ea10 0f0a 	tst.w	r0, sl
    ef24:	d100      	bne.n	ef28 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    ef26:	2500      	movs	r5, #0
    ef28:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    ef2c:	42a0      	cmp	r0, r4
    ef2e:	d100      	bne.n	ef32 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    ef30:	2400      	movs	r4, #0
    ef32:	f888 4000 	strb.w	r4, [r8]
    ef36:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    ef3a:	42a8      	cmp	r0, r5
    ef3c:	d100      	bne.n	ef40 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    ef3e:	2500      	movs	r5, #0
    ef40:	f888 5001 	strb.w	r5, [r8, #1]
    ef44:	b974      	cbnz	r4, ef64 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    ef46:	b96d      	cbnz	r5, ef64 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    ef48:	4658      	mov	r0, fp
    ef4a:	f000 f9a4 	bl	f296 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    ef4e:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
    ef52:	1a40      	subs	r0, r0, r1
    ef54:	b200      	sxth	r0, r0
    ef56:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    ef5a:	4288      	cmp	r0, r1
    ef5c:	dc01      	bgt.n	ef62 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    ef5e:	2800      	cmp	r0, #0
    ef60:	dc00      	bgt.n	ef64 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    ef62:	2600      	movs	r6, #0
    ef64:	4630      	mov	r0, r6
    ef66:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000ef6a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    ef6a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ef6e:	4348      	muls	r0, r1
    ef70:	4770      	bx	lr

0000ef72 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    ef72:	f240 2171 	movw	r1, #625	; 0x271
    ef76:	fb10 f001 	smulbb	r0, r0, r1
    ef7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ef7e:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    ef82:	4770      	bx	lr

0000ef84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    ef84:	b510      	push	{r4, lr}
    ef86:	2300      	movs	r3, #0
    ef88:	461a      	mov	r2, r3
    ef8a:	e003      	b.n	ef94 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    ef8c:	5c84      	ldrb	r4, [r0, r2]
    ef8e:	4323      	orrs	r3, r4
    ef90:	1c52      	adds	r2, r2, #1
    ef92:	b2d2      	uxtb	r2, r2
    ef94:	428a      	cmp	r2, r1
    ef96:	d3f9      	bcc.n	ef8c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    ef98:	b10b      	cbz	r3, ef9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    ef9a:	2000      	movs	r0, #0
    ef9c:	bd10      	pop	{r4, pc}
    ef9e:	2001      	movs	r0, #1
    efa0:	bd10      	pop	{r4, pc}

0000efa2 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    efa2:	2100      	movs	r1, #0
    efa4:	4608      	mov	r0, r1
    efa6:	f7f4 bc65 	b.w	3874 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    efaa:	4401      	add	r1, r0
    efac:	2914      	cmp	r1, #20
    efae:	dd01      	ble.n	efb4 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    efb0:	2014      	movs	r0, #20
    efb2:	4770      	bx	lr
    efb4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    efb8:	4281      	cmp	r1, r0
    efba:	dbfa      	blt.n	efb2 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    efbc:	b248      	sxtb	r0, r1
    efbe:	4770      	bx	lr

0000efc0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    efc0:	b570      	push	{r4, r5, r6, lr}
    efc2:	4605      	mov	r5, r0
    efc4:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    efc8:	b286      	uxth	r6, r0
    efca:	4610      	mov	r0, r2
    efcc:	7aec      	ldrb	r4, [r5, #11]
    efce:	4631      	mov	r1, r6
    efd0:	f000 f863 	bl	f09a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    efd4:	4070      	eors	r0, r6
    efd6:	2125      	movs	r1, #37	; 0x25
    efd8:	fbb0 f2f1 	udiv	r2, r0, r1
    efdc:	fb01 0112 	mls	r1, r1, r2, r0
    efe0:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    efe4:	f001 0307 	and.w	r3, r1, #7
    efe8:	7852      	ldrb	r2, [r2, #1]
    efea:	2601      	movs	r6, #1
    efec:	409e      	lsls	r6, r3
    efee:	4232      	tst	r2, r6
    eff0:	d001      	beq.n	eff6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    eff2:	4608      	mov	r0, r1
    eff4:	bd70      	pop	{r4, r5, r6, pc}
    eff6:	4344      	muls	r4, r0
    eff8:	0c21      	lsrs	r1, r4, #16
    effa:	4628      	mov	r0, r5
    effc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f000:	f7f4 bc86 	b.w	3910 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x9c>

0000f004 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    f004:	b510      	push	{r4, lr}
    f006:	4604      	mov	r4, r0
    f008:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    f00c:	b108      	cbz	r0, f012 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    f00e:	2825      	cmp	r0, #37	; 0x25
    f010:	d901      	bls.n	f016 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    f012:	2012      	movs	r0, #18
    f014:	bd10      	pop	{r4, pc}
    f016:	b132      	cbz	r2, f026 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    f018:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    f01c:	b128      	cbz	r0, f02a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    f01e:	2801      	cmp	r0, #1
    f020:	d009      	beq.n	f036 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    f022:	201f      	movs	r0, #31
    f024:	bd10      	pop	{r4, pc}
    f026:	2000      	movs	r0, #0
    f028:	bd10      	pop	{r4, pc}
    f02a:	4620      	mov	r0, r4
    f02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f030:	4611      	mov	r1, r2
    f032:	f7f4 bc25 	b.w	3880 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc>
    f036:	8aa2      	ldrh	r2, [r4, #20]
    f038:	6949      	ldr	r1, [r1, #20]
    f03a:	f104 0025 	add.w	r0, r4, #37	; 0x25
    f03e:	f7ff ffbf 	bl	efc0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    f042:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    f046:	e7ee      	b.n	f026 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000f048 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    f048:	b570      	push	{r4, r5, r6, lr}
    f04a:	4604      	mov	r4, r0
    f04c:	1c40      	adds	r0, r0, #1
    f04e:	4288      	cmp	r0, r1
    f050:	d004      	beq.n	f05c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    f052:	6808      	ldr	r0, [r1, #0]
    f054:	f8c4 0001 	str.w	r0, [r4, #1]
    f058:	7908      	ldrb	r0, [r1, #4]
    f05a:	7160      	strb	r0, [r4, #5]
    f05c:	7960      	ldrb	r0, [r4, #5]
    f05e:	f000 001f 	and.w	r0, r0, #31
    f062:	7160      	strb	r0, [r4, #5]
    f064:	2000      	movs	r0, #0
    f066:	72e0      	strb	r0, [r4, #11]
    f068:	4605      	mov	r5, r0
    f06a:	1966      	adds	r6, r4, r5
    f06c:	7870      	ldrb	r0, [r6, #1]
    f06e:	f000 faed 	bl	f64c <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    f072:	71b0      	strb	r0, [r6, #6]
    f074:	7ae1      	ldrb	r1, [r4, #11]
    f076:	1c6d      	adds	r5, r5, #1
    f078:	4408      	add	r0, r1
    f07a:	b2ed      	uxtb	r5, r5
    f07c:	72e0      	strb	r0, [r4, #11]
    f07e:	2d05      	cmp	r5, #5
    f080:	d3f3      	bcc.n	f06a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    f082:	bd70      	pop	{r4, r5, r6, pc}
    f084:	b2c1      	uxtb	r1, r0
    f086:	fa91 f1a1 	rbit	r1, r1
    f08a:	0a00      	lsrs	r0, r0, #8
    f08c:	0e09      	lsrs	r1, r1, #24
    f08e:	fa90 f0a0 	rbit	r0, r0
    f092:	0e00      	lsrs	r0, r0, #24
    f094:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    f098:	4770      	bx	lr
    f09a:	b570      	push	{r4, r5, r6, lr}
    f09c:	460d      	mov	r5, r1
    f09e:	4048      	eors	r0, r1
    f0a0:	2400      	movs	r4, #0
    f0a2:	f7ff ffef 	bl	f084 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    f0a6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    f0aa:	1c64      	adds	r4, r4, #1
    f0ac:	4428      	add	r0, r5
    f0ae:	b2e4      	uxtb	r4, r4
    f0b0:	b280      	uxth	r0, r0
    f0b2:	2c03      	cmp	r4, #3
    f0b4:	d3f5      	bcc.n	f0a2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    f0b6:	bd70      	pop	{r4, r5, r6, pc}

0000f0b8 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    f0b8:	7802      	ldrb	r2, [r0, #0]
    f0ba:	f002 020f 	and.w	r2, r2, #15
    f0be:	2a03      	cmp	r2, #3
    f0c0:	d003      	beq.n	f0ca <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    f0c2:	2a05      	cmp	r2, #5
    f0c4:	d104      	bne.n	f0d0 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    f0c6:	f000 b92e 	b.w	f326 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    f0ca:	7840      	ldrb	r0, [r0, #1]
    f0cc:	280c      	cmp	r0, #12
    f0ce:	d001      	beq.n	f0d4 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    f0d0:	2000      	movs	r0, #0
    f0d2:	4770      	bx	lr
    f0d4:	2001      	movs	r0, #1
    f0d6:	4770      	bx	lr

0000f0d8 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    f0d8:	b570      	push	{r4, r5, r6, lr}
    f0da:	4614      	mov	r4, r2
    f0dc:	4605      	mov	r5, r0
    f0de:	2a1f      	cmp	r2, #31
    f0e0:	d903      	bls.n	f0ea <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    f0e2:	21ee      	movs	r1, #238	; 0xee
    f0e4:	202a      	movs	r0, #42	; 0x2a
    f0e6:	f7f2 fc63 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0ea:	f105 0009 	add.w	r0, r5, #9
    f0ee:	f002 feca 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f0f2:	1da4      	adds	r4, r4, #6
    f0f4:	706c      	strb	r4, [r5, #1]
    f0f6:	bd70      	pop	{r4, r5, r6, pc}

0000f0f8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    f0f8:	b510      	push	{r4, lr}
    f0fa:	7802      	ldrb	r2, [r0, #0]
    f0fc:	f001 030f 	and.w	r3, r1, #15
    f100:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    f104:	431a      	orrs	r2, r3
    f106:	7002      	strb	r2, [r0, #0]
    f108:	2907      	cmp	r1, #7
    f10a:	d20c      	bcs.n	f126 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    f10c:	e8df f001 	tbb	[pc, r1]
    f110:	06040604 	.word	0x06040604
    f114:	00040804 	.word	0x00040804
    f118:	2106      	movs	r1, #6
    f11a:	e002      	b.n	f122 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    f11c:	210c      	movs	r1, #12
    f11e:	e000      	b.n	f122 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    f120:	2122      	movs	r1, #34	; 0x22
    f122:	7041      	strb	r1, [r0, #1]
    f124:	bd10      	pop	{r4, pc}
    f126:	21a8      	movs	r1, #168	; 0xa8
    f128:	202a      	movs	r0, #42	; 0x2a
    f12a:	f7f2 fc41 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f12e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    f12e:	680a      	ldr	r2, [r1, #0]
    f130:	f840 2f09 	str.w	r2, [r0, #9]!
    f134:	8889      	ldrh	r1, [r1, #4]
    f136:	8081      	strh	r1, [r0, #4]
    f138:	4770      	bx	lr

0000f13a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    f13a:	7802      	ldrb	r2, [r0, #0]
    f13c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f140:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    f144:	7002      	strb	r2, [r0, #0]
    f146:	4770      	bx	lr

0000f148 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    f148:	680a      	ldr	r2, [r1, #0]
    f14a:	f840 2f03 	str.w	r2, [r0, #3]!
    f14e:	8889      	ldrh	r1, [r1, #4]
    f150:	8081      	strh	r1, [r0, #4]
    f152:	4770      	bx	lr

0000f154 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    f154:	7802      	ldrb	r2, [r0, #0]
    f156:	2340      	movs	r3, #64	; 0x40
    f158:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    f15c:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    f160:	430a      	orrs	r2, r1
    f162:	7002      	strb	r2, [r0, #0]
    f164:	4770      	bx	lr

0000f166 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    f166:	b570      	push	{r4, r5, r6, lr}
    f168:	4614      	mov	r4, r2
    f16a:	4605      	mov	r5, r0
    f16c:	2a1f      	cmp	r2, #31
    f16e:	d904      	bls.n	f17a <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    f170:	f44f 7188 	mov.w	r1, #272	; 0x110
    f174:	202a      	movs	r0, #42	; 0x2a
    f176:	f7f2 fc1b 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f17a:	f105 0009 	add.w	r0, r5, #9
    f17e:	f002 fe82 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f182:	1da4      	adds	r4, r4, #6
    f184:	706c      	strb	r4, [r5, #1]
    f186:	bd70      	pop	{r4, r5, r6, pc}

0000f188 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    f188:	6842      	ldr	r2, [r0, #4]
    f18a:	600a      	str	r2, [r1, #0]
    f18c:	7a00      	ldrb	r0, [r0, #8]
    f18e:	7108      	strb	r0, [r1, #4]
    f190:	4770      	bx	lr

0000f192 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    f192:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    f196:	4770      	bx	lr

0000f198 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    f198:	b570      	push	{r4, r5, r6, lr}
    f19a:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    f19e:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    f1a2:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    f1a6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    f1aa:	88c0      	ldrh	r0, [r0, #6]
    f1ac:	b131      	cbz	r1, f1bc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    f1ae:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    f1b2:	d903      	bls.n	f1bc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    f1b4:	f640 5107 	movw	r1, #3335	; 0xd07
    f1b8:	428a      	cmp	r2, r1
    f1ba:	d90b      	bls.n	f1d4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    f1bc:	1f91      	subs	r1, r2, #6
    f1be:	f640 467a 	movw	r6, #3194	; 0xc7a
    f1c2:	42b1      	cmp	r1, r6
    f1c4:	d810      	bhi.n	f1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    f1c6:	b17b      	cbz	r3, f1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    f1c8:	2b08      	cmp	r3, #8
    f1ca:	d80d      	bhi.n	f1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    f1cc:	4293      	cmp	r3, r2
    f1ce:	d20b      	bcs.n	f1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    f1d0:	4295      	cmp	r5, r2
    f1d2:	d809      	bhi.n	f1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    f1d4:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    f1d8:	d206      	bcs.n	f1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    f1da:	f640 4176 	movw	r1, #3190	; 0xc76
    f1de:	380a      	subs	r0, #10
    f1e0:	4288      	cmp	r0, r1
    f1e2:	d801      	bhi.n	f1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    f1e4:	2001      	movs	r0, #1
    f1e6:	bd70      	pop	{r4, r5, r6, pc}
    f1e8:	2000      	movs	r0, #0
    f1ea:	bd70      	pop	{r4, r5, r6, pc}

0000f1ec <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    f1ec:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    f1f0:	4770      	bx	lr

0000f1f2 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    f1f2:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    f1f6:	4770      	bx	lr

0000f1f8 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    f1f8:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    f1fc:	4770      	bx	lr

0000f1fe <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    f1fe:	b510      	push	{r4, lr}
    f200:	29fb      	cmp	r1, #251	; 0xfb
    f202:	d904      	bls.n	f20e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    f204:	f240 61a1 	movw	r1, #1697	; 0x6a1
    f208:	202a      	movs	r0, #42	; 0x2a
    f20a:	f7f2 fbd1 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f20e:	7041      	strb	r1, [r0, #1]
    f210:	bd10      	pop	{r4, pc}

0000f212 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    f212:	8980      	ldrh	r0, [r0, #12]
    f214:	8008      	strh	r0, [r1, #0]
    f216:	4770      	bx	lr

0000f218 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    f218:	f8d0 0016 	ldr.w	r0, [r0, #22]
    f21c:	6008      	str	r0, [r1, #0]
    f21e:	4770      	bx	lr

0000f220 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    f220:	6842      	ldr	r2, [r0, #4]
    f222:	600a      	str	r2, [r1, #0]
    f224:	6880      	ldr	r0, [r0, #8]
    f226:	6048      	str	r0, [r1, #4]
    f228:	4770      	bx	lr

0000f22a <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    f22a:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    f22e:	600a      	str	r2, [r1, #0]
    f230:	6840      	ldr	r0, [r0, #4]
    f232:	6048      	str	r0, [r1, #4]
    f234:	4770      	bx	lr

0000f236 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    f236:	6809      	ldr	r1, [r1, #0]
    f238:	60c1      	str	r1, [r0, #12]
    f23a:	4770      	bx	lr

0000f23c <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    f23c:	680a      	ldr	r2, [r1, #0]
    f23e:	6042      	str	r2, [r0, #4]
    f240:	6849      	ldr	r1, [r1, #4]
    f242:	6081      	str	r1, [r0, #8]
    f244:	4770      	bx	lr

0000f246 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    f246:	7800      	ldrb	r0, [r0, #0]
    f248:	f000 0003 	and.w	r0, r0, #3
    f24c:	4770      	bx	lr

0000f24e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    f24e:	8880      	ldrh	r0, [r0, #4]
    f250:	4770      	bx	lr

0000f252 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    f252:	88c0      	ldrh	r0, [r0, #6]
    f254:	4770      	bx	lr

0000f256 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    f256:	8900      	ldrh	r0, [r0, #8]
    f258:	4770      	bx	lr

0000f25a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    f25a:	8940      	ldrh	r0, [r0, #10]
    f25c:	4770      	bx	lr

0000f25e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    f25e:	8901      	ldrh	r1, [r0, #8]
    f260:	291b      	cmp	r1, #27
    f262:	d30c      	bcc.n	f27e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    f264:	8941      	ldrh	r1, [r0, #10]
    f266:	f44f 72a4 	mov.w	r2, #328	; 0x148
    f26a:	4291      	cmp	r1, r2
    f26c:	d307      	bcc.n	f27e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    f26e:	8881      	ldrh	r1, [r0, #4]
    f270:	291b      	cmp	r1, #27
    f272:	d304      	bcc.n	f27e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    f274:	88c0      	ldrh	r0, [r0, #6]
    f276:	4290      	cmp	r0, r2
    f278:	d301      	bcc.n	f27e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    f27a:	2001      	movs	r0, #1
    f27c:	4770      	bx	lr
    f27e:	2000      	movs	r0, #0
    f280:	4770      	bx	lr

0000f282 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    f282:	7901      	ldrb	r1, [r0, #4]
    f284:	0749      	lsls	r1, r1, #29
    f286:	d004      	beq.n	f292 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    f288:	7940      	ldrb	r0, [r0, #5]
    f28a:	0740      	lsls	r0, r0, #29
    f28c:	d001      	beq.n	f292 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    f28e:	2001      	movs	r0, #1
    f290:	4770      	bx	lr
    f292:	2000      	movs	r0, #0
    f294:	4770      	bx	lr

0000f296 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    f296:	88c0      	ldrh	r0, [r0, #6]
    f298:	4770      	bx	lr

0000f29a <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    f29a:	7901      	ldrb	r1, [r0, #4]
    f29c:	7940      	ldrb	r0, [r0, #5]
    f29e:	f001 0107 	and.w	r1, r1, #7
    f2a2:	1e4a      	subs	r2, r1, #1
    f2a4:	f000 0007 	and.w	r0, r0, #7
    f2a8:	4011      	ands	r1, r2
    f2aa:	1e42      	subs	r2, r0, #1
    f2ac:	4010      	ands	r0, r2
    f2ae:	4301      	orrs	r1, r0
    f2b0:	d001      	beq.n	f2b6 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    f2b2:	2000      	movs	r0, #0
    f2b4:	4770      	bx	lr
    f2b6:	2001      	movs	r0, #1
    f2b8:	4770      	bx	lr

0000f2ba <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    f2ba:	7900      	ldrb	r0, [r0, #4]
    f2bc:	4770      	bx	lr

0000f2be <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    f2be:	7940      	ldrb	r0, [r0, #5]
    f2c0:	4770      	bx	lr

0000f2c2 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    f2c2:	7900      	ldrb	r0, [r0, #4]
    f2c4:	4770      	bx	lr

0000f2c6 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    f2c6:	7101      	strb	r1, [r0, #4]
    f2c8:	4770      	bx	lr

0000f2ca <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    f2ca:	7940      	ldrb	r0, [r0, #5]
    f2cc:	4770      	bx	lr

0000f2ce <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    f2ce:	7141      	strb	r1, [r0, #5]
    f2d0:	4770      	bx	lr

0000f2d2 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    f2d2:	b510      	push	{r4, lr}
    f2d4:	2a1b      	cmp	r2, #27
    f2d6:	d904      	bls.n	f2e2 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    f2d8:	f240 417e 	movw	r1, #1150	; 0x47e
    f2dc:	202a      	movs	r0, #42	; 0x2a
    f2de:	f7f2 fb67 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2e2:	7042      	strb	r2, [r0, #1]
    f2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2e8:	1cc0      	adds	r0, r0, #3
    f2ea:	f002 bdcc 	b.w	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000f2ee <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    f2ee:	7802      	ldrb	r2, [r0, #0]
    f2f0:	f001 0103 	and.w	r1, r1, #3
    f2f4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    f2f8:	430a      	orrs	r2, r1
    f2fa:	7002      	strb	r2, [r0, #0]
    f2fc:	4770      	bx	lr

0000f2fe <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    f2fe:	7101      	strb	r1, [r0, #4]
    f300:	0a09      	lsrs	r1, r1, #8
    f302:	7141      	strb	r1, [r0, #5]
    f304:	4770      	bx	lr

0000f306 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    f306:	7181      	strb	r1, [r0, #6]
    f308:	0a09      	lsrs	r1, r1, #8
    f30a:	71c1      	strb	r1, [r0, #7]
    f30c:	4770      	bx	lr

0000f30e <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    f30e:	7201      	strb	r1, [r0, #8]
    f310:	0a09      	lsrs	r1, r1, #8
    f312:	7241      	strb	r1, [r0, #9]
    f314:	4770      	bx	lr

0000f316 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    f316:	7281      	strb	r1, [r0, #10]
    f318:	0a09      	lsrs	r1, r1, #8
    f31a:	72c1      	strb	r1, [r0, #11]
    f31c:	4770      	bx	lr

0000f31e <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    f31e:	7900      	ldrb	r0, [r0, #4]
    f320:	4770      	bx	lr

0000f322 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    f322:	7900      	ldrb	r0, [r0, #4]
    f324:	4770      	bx	lr
    f326:	b570      	push	{r4, r5, r6, lr}
    f328:	f8d0 201f 	ldr.w	r2, [r0, #31]
    f32c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    f330:	f012 0fff 	tst.w	r2, #255	; 0xff
    f334:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    f338:	d108      	bne.n	f34c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    f33a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    f33e:	b92c      	cbnz	r4, f34c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    f340:	f3c2 4407 	ubfx	r4, r2, #16, #8
    f344:	b914      	cbnz	r4, f34c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    f346:	0e12      	lsrs	r2, r2, #24
    f348:	d100      	bne.n	f34c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    f34a:	b34b      	cbz	r3, f3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    f34c:	7846      	ldrb	r6, [r0, #1]
    f34e:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    f352:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    f356:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    f35a:	7d83      	ldrb	r3, [r0, #22]
    f35c:	2e22      	cmp	r6, #34	; 0x22
    f35e:	d11f      	bne.n	f3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    f360:	b131      	cbz	r1, f370 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    f362:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    f366:	d903      	bls.n	f370 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    f368:	f640 5107 	movw	r1, #3335	; 0xd07
    f36c:	428a      	cmp	r2, r1
    f36e:	d90b      	bls.n	f388 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    f370:	1f91      	subs	r1, r2, #6
    f372:	f640 467a 	movw	r6, #3194	; 0xc7a
    f376:	42b1      	cmp	r1, r6
    f378:	d812      	bhi.n	f3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    f37a:	b18b      	cbz	r3, f3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    f37c:	2b08      	cmp	r3, #8
    f37e:	d80f      	bhi.n	f3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    f380:	4293      	cmp	r3, r2
    f382:	d20d      	bcs.n	f3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    f384:	4295      	cmp	r5, r2
    f386:	d80b      	bhi.n	f3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    f388:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    f38c:	d208      	bcs.n	f3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    f38e:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    f392:	f640 4176 	movw	r1, #3190	; 0xc76
    f396:	380a      	subs	r0, #10
    f398:	4288      	cmp	r0, r1
    f39a:	d801      	bhi.n	f3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    f39c:	2001      	movs	r0, #1
    f39e:	bd70      	pop	{r4, r5, r6, pc}
    f3a0:	2000      	movs	r0, #0
    f3a2:	bd70      	pop	{r4, r5, r6, pc}

0000f3a4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    f3a4:	6841      	ldr	r1, [r0, #4]
    f3a6:	2200      	movs	r2, #0
    f3a8:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    f3ac:	2b00      	cmp	r3, #0
    f3ae:	d004      	beq.n	f3ba <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    f3b0:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    f3b4:	6840      	ldr	r0, [r0, #4]
    f3b6:	f000 bdfc 	b.w	ffb2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    f3ba:	4770      	bx	lr

0000f3bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    f3bc:	b510      	push	{r4, lr}
    f3be:	7a01      	ldrb	r1, [r0, #8]
    f3c0:	b119      	cbz	r1, f3ca <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    f3c2:	2901      	cmp	r1, #1
    f3c4:	d006      	beq.n	f3d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    f3c6:	2000      	movs	r0, #0
    f3c8:	bd10      	pop	{r4, pc}
    f3ca:	88c2      	ldrh	r2, [r0, #6]
    f3cc:	6803      	ldr	r3, [r0, #0]
    f3ce:	8880      	ldrh	r0, [r0, #4]
    f3d0:	2102      	movs	r1, #2
    f3d2:	e003      	b.n	f3dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    f3d4:	88c2      	ldrh	r2, [r0, #6]
    f3d6:	6803      	ldr	r3, [r0, #0]
    f3d8:	8880      	ldrh	r0, [r0, #4]
    f3da:	2101      	movs	r1, #1
    f3dc:	f7f4 fb02 	bl	39e4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    f3e0:	b908      	cbnz	r0, f3e6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    f3e2:	f7f4 fb4f 	bl	3a84 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    f3e6:	2001      	movs	r0, #1
    f3e8:	bd10      	pop	{r4, pc}

0000f3ea <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>:
    f3ea:	2203      	movs	r2, #3
    f3ec:	f000 b806 	b.w	f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>

0000f3f0 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>:
    f3f0:	2203      	movs	r2, #3
    f3f2:	f000 b817 	b.w	f424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000f3f6 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>:
    f3f6:	2204      	movs	r2, #4
    f3f8:	f000 b814 	b.w	f424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000f3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    f3fc:	b508      	push	{r3, lr}
    f3fe:	7a03      	ldrb	r3, [r0, #8]
    f400:	f88d 3000 	strb.w	r3, [sp]
    f404:	9b00      	ldr	r3, [sp, #0]
    f406:	9300      	str	r3, [sp, #0]
    f408:	f89d 3000 	ldrb.w	r3, [sp]
    f40c:	b123      	cbz	r3, f418 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    f40e:	f240 21c2 	movw	r1, #706	; 0x2c2
    f412:	2010      	movs	r0, #16
    f414:	f7f2 facc 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f41c:	f7f4 bca4 	b.w	3d68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>

0000f420 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    f420:	f7f4 bcd0 	b.w	3dc4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>

0000f424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    f424:	7a03      	ldrb	r3, [r0, #8]
    f426:	b082      	sub	sp, #8
    f428:	f88d 3000 	strb.w	r3, [sp]
    f42c:	9b00      	ldr	r3, [sp, #0]
    f42e:	9300      	str	r3, [sp, #0]
    f430:	f89d 3000 	ldrb.w	r3, [sp]
    f434:	b113      	cbz	r3, f43c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x18>
    f436:	7202      	strb	r2, [r0, #8]
    f438:	b002      	add	sp, #8
    f43a:	4770      	bx	lr
    f43c:	b002      	add	sp, #8
    f43e:	f7f4 bc93 	b.w	3d68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    f442:	2000      	movs	r0, #0
    f444:	7048      	strb	r0, [r1, #1]
    f446:	2003      	movs	r0, #3
    f448:	7008      	strb	r0, [r1, #0]
    f44a:	2001      	movs	r0, #1
    f44c:	7108      	strb	r0, [r1, #4]
    f44e:	4770      	bx	lr

0000f450 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    f450:	b510      	push	{r4, lr}
    f452:	888c      	ldrh	r4, [r1, #4]
    f454:	890a      	ldrh	r2, [r1, #8]
    f456:	884b      	ldrh	r3, [r1, #2]
    f458:	88c9      	ldrh	r1, [r1, #6]
    f45a:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    f45e:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    f462:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    f466:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    f46a:	bd10      	pop	{r4, pc}

0000f46c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    f46c:	b570      	push	{r4, r5, r6, lr}
    f46e:	4615      	mov	r5, r2
    f470:	460c      	mov	r4, r1
    f472:	f000 f8b8 	bl	f5e6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    f476:	3096      	adds	r0, #150	; 0x96
    f478:	4428      	add	r0, r5
    f47a:	42a0      	cmp	r0, r4
    f47c:	d801      	bhi.n	f482 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    f47e:	1a20      	subs	r0, r4, r0
    f480:	bd70      	pop	{r4, r5, r6, pc}
    f482:	2000      	movs	r0, #0
    f484:	bd70      	pop	{r4, r5, r6, pc}

0000f486 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    f486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f48a:	4604      	mov	r4, r0
    f48c:	f000 f87f 	bl	f58e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x50>
    f490:	4680      	mov	r8, r0
    f492:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    f496:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    f49a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    f49c:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    f49e:	4285      	cmp	r5, r0
    f4a0:	d300      	bcc.n	f4a4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x1e>
    f4a2:	4605      	mov	r5, r0
    f4a4:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    f4a8:	4620      	mov	r0, r4
    f4aa:	f000 f868 	bl	f57e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    f4ae:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    f4b2:	2902      	cmp	r1, #2
    f4b4:	d108      	bne.n	f4c8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    f4b6:	42af      	cmp	r7, r5
    f4b8:	d200      	bcs.n	f4bc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    f4ba:	463d      	mov	r5, r7
    f4bc:	4286      	cmp	r6, r0
    f4be:	d200      	bcs.n	f4c2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    f4c0:	4630      	mov	r0, r6
    f4c2:	2100      	movs	r1, #0
    f4c4:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    f4c8:	86a5      	strh	r5, [r4, #52]	; 0x34
    f4ca:	8720      	strh	r0, [r4, #56]	; 0x38
    f4cc:	42bd      	cmp	r5, r7
    f4ce:	d101      	bne.n	f4d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    f4d0:	42b0      	cmp	r0, r6
    f4d2:	d001      	beq.n	f4d8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    f4d4:	2001      	movs	r0, #1
    f4d6:	e000      	b.n	f4da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    f4d8:	2000      	movs	r0, #0
    f4da:	ea40 0008 	orr.w	r0, r0, r8
    f4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f4e2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    f4e2:	221b      	movs	r2, #27
    f4e4:	8402      	strh	r2, [r0, #32]
    f4e6:	8382      	strh	r2, [r0, #28]
    f4e8:	82c2      	strh	r2, [r0, #22]
    f4ea:	8282      	strh	r2, [r0, #20]
    f4ec:	8142      	strh	r2, [r0, #10]
    f4ee:	8202      	strh	r2, [r0, #16]
    f4f0:	8102      	strh	r2, [r0, #8]
    f4f2:	8542      	strh	r2, [r0, #42]	; 0x2a
    f4f4:	8582      	strh	r2, [r0, #44]	; 0x2c
    f4f6:	8482      	strh	r2, [r0, #36]	; 0x24
    f4f8:	2900      	cmp	r1, #0
    f4fa:	d10a      	bne.n	f512 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    f4fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f500:	8441      	strh	r1, [r0, #34]	; 0x22
    f502:	83c1      	strh	r1, [r0, #30]
    f504:	8341      	strh	r1, [r0, #26]
    f506:	8301      	strh	r1, [r0, #24]
    f508:	81c1      	strh	r1, [r0, #14]
    f50a:	8241      	strh	r1, [r0, #18]
    f50c:	8181      	strh	r1, [r0, #12]
    f50e:	85c1      	strh	r1, [r0, #46]	; 0x2e
    f510:	8601      	strh	r1, [r0, #48]	; 0x30
    f512:	4770      	bx	lr

0000f514 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    f514:	6800      	ldr	r0, [r0, #0]
    f516:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    f51a:	4290      	cmp	r0, r2
    f51c:	d903      	bls.n	f526 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    f51e:	1a40      	subs	r0, r0, r1
    f520:	389c      	subs	r0, #156	; 0x9c
    f522:	0840      	lsrs	r0, r0, #1
    f524:	4770      	bx	lr
    f526:	2000      	movs	r0, #0
    f528:	4770      	bx	lr

0000f52a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>:
    f52a:	6840      	ldr	r0, [r0, #4]
    f52c:	4770      	bx	lr

0000f52e <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>:
    f52e:	b570      	push	{r4, r5, r6, lr}
    f530:	460c      	mov	r4, r1
    f532:	4605      	mov	r5, r0
    f534:	f000 f857 	bl	f5e6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    f538:	4420      	add	r0, r4
    f53a:	6328      	str	r0, [r5, #48]	; 0x30
    f53c:	bd70      	pop	{r4, r5, r6, pc}

0000f53e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    f53e:	b510      	push	{r4, lr}
    f540:	9c02      	ldr	r4, [sp, #8]
    f542:	8281      	strh	r1, [r0, #20]
    f544:	82c2      	strh	r2, [r0, #22]
    f546:	8303      	strh	r3, [r0, #24]
    f548:	8344      	strh	r4, [r0, #26]
    f54a:	bd10      	pop	{r4, pc}
    f54c:	1d00      	adds	r0, r0, #4
    f54e:	b510      	push	{r4, lr}
    f550:	b280      	uxth	r0, r0
    f552:	2901      	cmp	r1, #1
    f554:	d006      	beq.n	f564 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    f556:	2902      	cmp	r1, #2
    f558:	d007      	beq.n	f56a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    f55a:	f240 2123 	movw	r1, #547	; 0x223
    f55e:	2006      	movs	r0, #6
    f560:	f7f2 fa26 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f564:	00c0      	lsls	r0, r0, #3
    f566:	3050      	adds	r0, #80	; 0x50
    f568:	e001      	b.n	f56e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    f56a:	0080      	lsls	r0, r0, #2
    f56c:	302c      	adds	r0, #44	; 0x2c
    f56e:	b280      	uxth	r0, r0
    f570:	bd10      	pop	{r4, pc}
    f572:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    f574:	8b00      	ldrh	r0, [r0, #24]
    f576:	4281      	cmp	r1, r0
    f578:	d200      	bcs.n	f57c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    f57a:	4608      	mov	r0, r1
    f57c:	4770      	bx	lr
    f57e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    f582:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    f586:	4281      	cmp	r1, r0
    f588:	d200      	bcs.n	f58c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    f58a:	4608      	mov	r0, r1
    f58c:	4770      	bx	lr
    f58e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f592:	4606      	mov	r6, r0
    f594:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
    f598:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
    f59c:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
    f5a0:	f8b6 4040 	ldrh.w	r4, [r6, #64]	; 0x40
    f5a4:	42a0      	cmp	r0, r4
    f5a6:	d200      	bcs.n	f5aa <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x6c>
    f5a8:	4604      	mov	r4, r0
    f5aa:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    f5ae:	4605      	mov	r5, r0
    f5b0:	f7ff ffdf 	bl	f572 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    f5b4:	4607      	mov	r7, r0
    f5b6:	4628      	mov	r0, r5
    f5b8:	f7ff ffdb 	bl	f572 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    f5bc:	816c      	strh	r4, [r5, #10]
    f5be:	81ef      	strh	r7, [r5, #14]
    f5c0:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
    f5c2:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
    f5c4:	42a1      	cmp	r1, r4
    f5c6:	d200      	bcs.n	f5ca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x8c>
    f5c8:	4621      	mov	r1, r4
    f5ca:	4282      	cmp	r2, r0
    f5cc:	d300      	bcc.n	f5d0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x92>
    f5ce:	4610      	mov	r0, r2
    f5d0:	8229      	strh	r1, [r5, #16]
    f5d2:	8268      	strh	r0, [r5, #18]
    f5d4:	454c      	cmp	r4, r9
    f5d6:	d101      	bne.n	f5dc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x9e>
    f5d8:	4547      	cmp	r7, r8
    f5da:	d002      	beq.n	f5e2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa4>
    f5dc:	2001      	movs	r0, #1
    f5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f5e2:	2000      	movs	r0, #0
    f5e4:	e7fb      	b.n	f5de <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa0>
    f5e6:	2196      	movs	r1, #150	; 0x96
    f5e8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    f5ec:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    f5f0:	f000 b800 	b.w	f5f4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xb6>
    f5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5f8:	460d      	mov	r5, r1
    f5fa:	4606      	mov	r6, r0
    f5fc:	4698      	mov	r8, r3
    f5fe:	4617      	mov	r7, r2
    f600:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    f602:	4611      	mov	r1, r2
    f604:	f7ff ffa2 	bl	f54c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    f608:	4604      	mov	r4, r0
    f60a:	4639      	mov	r1, r7
    f60c:	4630      	mov	r0, r6
    f60e:	f7ff ffb6 	bl	f57e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    f612:	42a0      	cmp	r0, r4
    f614:	d200      	bcs.n	f618 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xda>
    f616:	4604      	mov	r4, r0
    f618:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    f61a:	4641      	mov	r1, r8
    f61c:	f7ff ff96 	bl	f54c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    f620:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
    f622:	4281      	cmp	r1, r0
    f624:	d200      	bcs.n	f628 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    f626:	4608      	mov	r0, r1
    f628:	4420      	add	r0, r4
    f62a:	4428      	add	r0, r5
    f62c:	1d80      	adds	r0, r0, #6
    f62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f632:	b510      	push	{r4, lr}
    f634:	4604      	mov	r4, r0
    f636:	2108      	movs	r1, #8
    f638:	4620      	mov	r0, r4
    f63a:	f7f2 fa69 	bl	1b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f63e:	6820      	ldr	r0, [r4, #0]
    f640:	2800      	cmp	r0, #0
    f642:	d102      	bne.n	f64a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x10c>
    f644:	6860      	ldr	r0, [r4, #4]
    f646:	2800      	cmp	r0, #0
    f648:	d0f5      	beq.n	f636 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf8>
    f64a:	bd10      	pop	{r4, pc}

0000f64c <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    f64c:	f000 0155 	and.w	r1, r0, #85	; 0x55
    f650:	2255      	movs	r2, #85	; 0x55
    f652:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    f656:	4408      	add	r0, r1
    f658:	f000 0133 	and.w	r1, r0, #51	; 0x33
    f65c:	2233      	movs	r2, #51	; 0x33
    f65e:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    f662:	4408      	add	r0, r1
    f664:	f000 010f 	and.w	r1, r0, #15
    f668:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    f66c:	4770      	bx	lr

0000f66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>:
    f66e:	6840      	ldr	r0, [r0, #4]
    f670:	2100      	movs	r1, #0
    f672:	f820 1fd8 	strh.w	r1, [r0, #216]!
    f676:	7881      	ldrb	r1, [r0, #2]
    f678:	1c49      	adds	r1, r1, #1
    f67a:	7081      	strb	r1, [r0, #2]
    f67c:	4770      	bx	lr

0000f67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>:
    f67e:	b510      	push	{r4, lr}
    f680:	6840      	ldr	r0, [r0, #4]
    f682:	f810 1fda 	ldrb.w	r1, [r0, #218]!
    f686:	1e49      	subs	r1, r1, #1
    f688:	b249      	sxtb	r1, r1
    f68a:	7001      	strb	r1, [r0, #0]
    f68c:	2900      	cmp	r1, #0
    f68e:	da03      	bge.n	f698 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA+0x1a>
    f690:	2135      	movs	r1, #53	; 0x35
    f692:	204a      	movs	r0, #74	; 0x4a
    f694:	f7f2 f98c 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f698:	bd10      	pop	{r4, pc}

0000f69a <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>:
    f69a:	6840      	ldr	r0, [r0, #4]
    f69c:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
    f6a0:	f880 2122 	strb.w	r2, [r0, #290]	; 0x122
    f6a4:	4770      	bx	lr

0000f6a6 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>:
    f6a6:	6840      	ldr	r0, [r0, #4]
    f6a8:	2100      	movs	r1, #0
    f6aa:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    f6ae:	f880 10d6 	strb.w	r1, [r0, #214]	; 0xd6
    f6b2:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    f6b6:	4770      	bx	lr

0000f6b8 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    f6b8:	b510      	push	{r4, lr}
    f6ba:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    f6be:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    f6c2:	2000      	movs	r0, #0
    f6c4:	7048      	strb	r0, [r1, #1]
    f6c6:	230a      	movs	r3, #10
    f6c8:	700b      	strb	r3, [r1, #0]
    f6ca:	7108      	strb	r0, [r1, #4]
    f6cc:	f8a1 4005 	strh.w	r4, [r1, #5]
    f6d0:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    f6d4:	71c8      	strb	r0, [r1, #7]
    f6d6:	4620      	mov	r0, r4
    f6d8:	f7f2 fe2c 	bl	2334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f6dc:	f7fe fdf8 	bl	e2d0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    f6e0:	b140      	cbz	r0, f6f4 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    f6e2:	4620      	mov	r0, r4
    f6e4:	f7ff f9f8 	bl	ead8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f6e8:	4620      	mov	r0, r4
    f6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6ee:	2100      	movs	r1, #0
    f6f0:	f7f2 bd2e 	b.w	2150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f6f4:	2173      	movs	r1, #115	; 0x73
    f6f6:	2063      	movs	r0, #99	; 0x63
    f6f8:	f7f2 f95a 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f6fc <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>:
    f6fc:	b570      	push	{r4, r5, r6, lr}
    f6fe:	6844      	ldr	r4, [r0, #4]
    f700:	460d      	mov	r5, r1
    f702:	7803      	ldrb	r3, [r0, #0]
    f704:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    f708:	3480      	adds	r4, #128	; 0x80
    f70a:	2101      	movs	r1, #1
    f70c:	4620      	mov	r0, r4
    f70e:	f7ff facd 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f712:	b108      	cbz	r0, f718 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x1c>
    f714:	2000      	movs	r0, #0
    f716:	bd70      	pop	{r4, r5, r6, pc}
    f718:	4628      	mov	r0, r5
    f71a:	f7ff fe00 	bl	f31e <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    f71e:	f884 0020 	strb.w	r0, [r4, #32]
    f722:	2006      	movs	r0, #6
    f724:	77e0      	strb	r0, [r4, #31]
    f726:	e7f5      	b.n	f714 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x18>

0000f728 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA>:
    f728:	b510      	push	{r4, lr}
    f72a:	6844      	ldr	r4, [r0, #4]
    f72c:	7803      	ldrb	r3, [r0, #0]
    f72e:	2101      	movs	r1, #1
    f730:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    f734:	3480      	adds	r4, #128	; 0x80
    f736:	4620      	mov	r0, r4
    f738:	f7ff fab8 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f73c:	2800      	cmp	r0, #0
    f73e:	d101      	bne.n	f744 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA+0x1c>
    f740:	2007      	movs	r0, #7
    f742:	77e0      	strb	r0, [r4, #31]
    f744:	bd10      	pop	{r4, pc}

0000f746 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    f746:	2200      	movs	r2, #0
    f748:	704a      	strb	r2, [r1, #1]
    f74a:	2307      	movs	r3, #7
    f74c:	700b      	strb	r3, [r1, #0]
    f74e:	f100 030a 	add.w	r3, r0, #10
    f752:	f5a0 70df 	sub.w	r0, r0, #446	; 0x1be
    f756:	84c2      	strh	r2, [r0, #38]	; 0x26
    f758:	6818      	ldr	r0, [r3, #0]
    f75a:	6048      	str	r0, [r1, #4]
    f75c:	6858      	ldr	r0, [r3, #4]
    f75e:	6088      	str	r0, [r1, #8]
    f760:	8918      	ldrh	r0, [r3, #8]
    f762:	8188      	strh	r0, [r1, #12]
    f764:	710a      	strb	r2, [r1, #4]
    f766:	4770      	bx	lr

0000f768 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI>:
    f768:	b510      	push	{r4, lr}
    f76a:	6844      	ldr	r4, [r0, #4]
    f76c:	7803      	ldrb	r3, [r0, #0]
    f76e:	2100      	movs	r1, #0
    f770:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    f774:	3480      	adds	r4, #128	; 0x80
    f776:	4620      	mov	r0, r4
    f778:	f7ff fa98 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f77c:	b110      	cbz	r0, f784 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI+0x1c>
    f77e:	201d      	movs	r0, #29
    f780:	7760      	strb	r0, [r4, #29]
    f782:	bd10      	pop	{r4, pc}
    f784:	2122      	movs	r1, #34	; 0x22
    f786:	2045      	movs	r0, #69	; 0x45
    f788:	f7f2 f912 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f78c <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>:
    f78c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f790:	4606      	mov	r6, r0
    f792:	7803      	ldrb	r3, [r0, #0]
    f794:	6840      	ldr	r0, [r0, #4]
    f796:	468b      	mov	fp, r1
    f798:	f100 0480 	add.w	r4, r0, #128	; 0x80
    f79c:	4605      	mov	r5, r0
    f79e:	2700      	movs	r7, #0
    f7a0:	7f62      	ldrb	r2, [r4, #29]
    f7a2:	210a      	movs	r1, #10
    f7a4:	4620      	mov	r0, r4
    f7a6:	f7ff fa81 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f7aa:	b358      	cbz	r0, f804 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x78>
    f7ac:	4658      	mov	r0, fp
    f7ae:	f7ff fd56 	bl	f25e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    f7b2:	b1f0      	cbz	r0, f7f2 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x66>
    f7b4:	4658      	mov	r0, fp
    f7b6:	f7ff fd4c 	bl	f252 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    f7ba:	4682      	mov	sl, r0
    f7bc:	4658      	mov	r0, fp
    f7be:	f7ff fd4c 	bl	f25a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    f7c2:	4681      	mov	r9, r0
    f7c4:	4658      	mov	r0, fp
    f7c6:	f7ff fd42 	bl	f24e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    f7ca:	4680      	mov	r8, r0
    f7cc:	4658      	mov	r0, fp
    f7ce:	f7ff fd42 	bl	f256 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    f7d2:	4601      	mov	r1, r0
    f7d4:	464b      	mov	r3, r9
    f7d6:	4642      	mov	r2, r8
    f7d8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    f7dc:	f8cd a000 	str.w	sl, [sp]
    f7e0:	f7ff fead 	bl	f53e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    f7e4:	4628      	mov	r0, r5
    f7e6:	f7ff fe4e 	bl	f486 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    f7ea:	2105      	movs	r1, #5
    f7ec:	6870      	ldr	r0, [r6, #4]
    f7ee:	f7f5 fed5 	bl	559c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f7f2:	f884 7056 	strb.w	r7, [r4, #86]	; 0x56
    f7f6:	7767      	strb	r7, [r4, #29]
    f7f8:	4630      	mov	r0, r6
    f7fa:	f000 f805 	bl	f808 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    f7fe:	2000      	movs	r0, #0
    f800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f804:	2001      	movs	r0, #1
    f806:	e7fb      	b.n	f800 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x74>

0000f808 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>:
    f808:	6841      	ldr	r1, [r0, #4]
    f80a:	f501 72a5 	add.w	r2, r1, #330	; 0x14a
    f80e:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    f812:	2801      	cmp	r0, #1
    f814:	d004      	beq.n	f820 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA+0x18>
    f816:	f831 0b2c 	ldrh.w	r0, [r1], #44
    f81a:	3218      	adds	r2, #24
    f81c:	f7f4 bae8 	b.w	3df0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    f820:	2002      	movs	r0, #2
    f822:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    f826:	4770      	bx	lr

0000f828 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    f828:	2200      	movs	r2, #0
    f82a:	704a      	strb	r2, [r1, #1]
    f82c:	220b      	movs	r2, #11
    f82e:	700a      	strb	r2, [r1, #0]
    f830:	f100 020a 	add.w	r2, r0, #10
    f834:	7a83      	ldrb	r3, [r0, #10]
    f836:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    f83a:	710b      	strb	r3, [r1, #4]
    f83c:	8800      	ldrh	r0, [r0, #0]
    f83e:	80c8      	strh	r0, [r1, #6]
    f840:	7910      	ldrb	r0, [r2, #4]
    f842:	7208      	strb	r0, [r1, #8]
    f844:	4770      	bx	lr

0000f846 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    f846:	2200      	movs	r2, #0
    f848:	704a      	strb	r2, [r1, #1]
    f84a:	220c      	movs	r2, #12
    f84c:	700a      	strb	r2, [r1, #0]
    f84e:	7a82      	ldrb	r2, [r0, #10]
    f850:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    f854:	710a      	strb	r2, [r1, #4]
    f856:	8800      	ldrh	r0, [r0, #0]
    f858:	80c8      	strh	r0, [r1, #6]
    f85a:	4770      	bx	lr

0000f85c <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    f85c:	2200      	movs	r2, #0
    f85e:	704a      	strb	r2, [r1, #1]
    f860:	2208      	movs	r2, #8
    f862:	700a      	strb	r2, [r1, #0]
    f864:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    f868:	8812      	ldrh	r2, [r2, #0]
    f86a:	808a      	strh	r2, [r1, #4]
    f86c:	68c2      	ldr	r2, [r0, #12]
    f86e:	f8c1 2006 	str.w	r2, [r1, #6]
    f872:	6902      	ldr	r2, [r0, #16]
    f874:	f8c1 200a 	str.w	r2, [r1, #10]
    f878:	8a80      	ldrh	r0, [r0, #20]
    f87a:	81c8      	strh	r0, [r1, #14]
    f87c:	4770      	bx	lr
    f87e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f882:	f001 0307 	and.w	r3, r1, #7
    f886:	7802      	ldrb	r2, [r0, #0]
    f888:	2101      	movs	r1, #1
    f88a:	4099      	lsls	r1, r3
    f88c:	430a      	orrs	r2, r1
    f88e:	7002      	strb	r2, [r0, #0]
    f890:	4770      	bx	lr

0000f892 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    f892:	b510      	push	{r4, lr}
    f894:	6844      	ldr	r4, [r0, #4]
    f896:	7803      	ldrb	r3, [r0, #0]
    f898:	2100      	movs	r1, #0
    f89a:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    f89e:	3480      	adds	r4, #128	; 0x80
    f8a0:	4620      	mov	r0, r4
    f8a2:	f7ff fa03 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f8a6:	b110      	cbz	r0, f8ae <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    f8a8:	2004      	movs	r0, #4
    f8aa:	7760      	strb	r0, [r4, #29]
    f8ac:	bd10      	pop	{r4, pc}
    f8ae:	21ab      	movs	r1, #171	; 0xab
    f8b0:	201c      	movs	r0, #28
    f8b2:	f7f2 f87d 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f8b6 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    f8b6:	b510      	push	{r4, lr}
    f8b8:	6841      	ldr	r1, [r0, #4]
    f8ba:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    f8be:	07d2      	lsls	r2, r2, #31
    f8c0:	d00b      	beq.n	f8da <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    f8c2:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    f8c6:	1e52      	subs	r2, r2, #1
    f8c8:	b252      	sxtb	r2, r2
    f8ca:	700a      	strb	r2, [r1, #0]
    f8cc:	6840      	ldr	r0, [r0, #4]
    f8ce:	2a00      	cmp	r2, #0
    f8d0:	da05      	bge.n	f8de <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    f8d2:	21ba      	movs	r1, #186	; 0xba
    f8d4:	201c      	movs	r0, #28
    f8d6:	f7f2 f86b 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8da:	21b8      	movs	r1, #184	; 0xb8
    f8dc:	e7fa      	b.n	f8d4 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    f8de:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    f8e2:	f021 0101 	bic.w	r1, r1, #1
    f8e6:	6001      	str	r1, [r0, #0]
    f8e8:	bd10      	pop	{r4, pc}
    f8ea:	2200      	movs	r2, #0
    f8ec:	704a      	strb	r2, [r1, #1]
    f8ee:	2206      	movs	r2, #6
    f8f0:	700a      	strb	r2, [r1, #0]
    f8f2:	f850 2f09 	ldr.w	r2, [r0, #9]!
    f8f6:	604a      	str	r2, [r1, #4]
    f8f8:	6842      	ldr	r2, [r0, #4]
    f8fa:	608a      	str	r2, [r1, #8]
    f8fc:	8902      	ldrh	r2, [r0, #8]
    f8fe:	818a      	strh	r2, [r1, #12]
    f900:	7a80      	ldrb	r0, [r0, #10]
    f902:	7388      	strb	r0, [r1, #14]
    f904:	4770      	bx	lr

0000f906 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    f906:	2200      	movs	r2, #0
    f908:	704a      	strb	r2, [r1, #1]
    f90a:	220e      	movs	r2, #14
    f90c:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    f910:	700a      	strb	r2, [r1, #0]
    f912:	8800      	ldrh	r0, [r0, #0]
    f914:	8088      	strh	r0, [r1, #4]
    f916:	4770      	bx	lr

0000f918 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA>:
    f918:	b510      	push	{r4, lr}
    f91a:	6844      	ldr	r4, [r0, #4]
    f91c:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    f920:	3480      	adds	r4, #128	; 0x80
    f922:	f011 0f04 	tst.w	r1, #4
    f926:	d001      	beq.n	f92c <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA+0x14>
    f928:	2001      	movs	r0, #1
    f92a:	bd10      	pop	{r4, pc}
    f92c:	f7ff fe9f 	bl	f66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    f930:	68e0      	ldr	r0, [r4, #12]
    f932:	f040 0004 	orr.w	r0, r0, #4
    f936:	60e0      	str	r0, [r4, #12]
    f938:	2000      	movs	r0, #0
    f93a:	bd10      	pop	{r4, pc}

0000f93c <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA>:
    f93c:	b510      	push	{r4, lr}
    f93e:	6844      	ldr	r4, [r0, #4]
    f940:	7803      	ldrb	r3, [r0, #0]
    f942:	2100      	movs	r1, #0
    f944:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    f948:	3480      	adds	r4, #128	; 0x80
    f94a:	4620      	mov	r0, r4
    f94c:	f7ff f9ae 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f950:	b110      	cbz	r0, f958 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA+0x1c>
    f952:	200f      	movs	r0, #15
    f954:	7760      	strb	r0, [r4, #29]
    f956:	bd10      	pop	{r4, pc}
    f958:	216e      	movs	r1, #110	; 0x6e
    f95a:	204b      	movs	r0, #75	; 0x4b
    f95c:	f7f2 f828 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f960 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>:
    f960:	b510      	push	{r4, lr}
    f962:	6844      	ldr	r4, [r0, #4]
    f964:	7803      	ldrb	r3, [r0, #0]
    f966:	2109      	movs	r1, #9
    f968:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    f96c:	3480      	adds	r4, #128	; 0x80
    f96e:	4620      	mov	r0, r4
    f970:	f7ff f99c 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f974:	2800      	cmp	r0, #0
    f976:	d005      	beq.n	f984 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ+0x24>
    f978:	2000      	movs	r0, #0
    f97a:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
    f97e:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    f982:	7760      	strb	r0, [r4, #29]
    f984:	bd10      	pop	{r4, pc}

0000f986 <sym_E2LE5OMX5VGHQ6BJ4G7CNEBI3KUUYONP2PS2EJQ>:
    f986:	6841      	ldr	r1, [r0, #4]
    f988:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    f98c:	f022 0204 	bic.w	r2, r2, #4
    f990:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    f994:	f7ff be73 	b.w	f67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>

0000f998 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    f998:	b510      	push	{r4, lr}
    f99a:	2300      	movs	r3, #0
    f99c:	704b      	strb	r3, [r1, #1]
    f99e:	2401      	movs	r4, #1
    f9a0:	700c      	strb	r4, [r1, #0]
    f9a2:	f100 0209 	add.w	r2, r0, #9
    f9a6:	710b      	strb	r3, [r1, #4]
    f9a8:	f830 0cde 	ldrh.w	r0, [r0, #-222]
    f9ac:	f8a1 0005 	strh.w	r0, [r1, #5]
    f9b0:	f812 0b01 	ldrb.w	r0, [r2], #1
    f9b4:	71c8      	strb	r0, [r1, #7]
    f9b6:	8810      	ldrh	r0, [r2, #0]
    f9b8:	8108      	strh	r0, [r1, #8]
    f9ba:	8850      	ldrh	r0, [r2, #2]
    f9bc:	8148      	strh	r0, [r1, #10]
    f9be:	bd10      	pop	{r4, pc}

0000f9c0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    f9c0:	b570      	push	{r4, r5, r6, lr}
    f9c2:	7803      	ldrb	r3, [r0, #0]
    f9c4:	6840      	ldr	r0, [r0, #4]
    f9c6:	2500      	movs	r5, #0
    f9c8:	f100 0480 	add.w	r4, r0, #128	; 0x80
    f9cc:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    f9d0:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f9d4:	0789      	lsls	r1, r1, #30
    f9d6:	d40e      	bmi.n	f9f6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    f9d8:	7f62      	ldrb	r2, [r4, #29]
    f9da:	2100      	movs	r1, #0
    f9dc:	4620      	mov	r0, r4
    f9de:	f7ff f965 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f9e2:	b130      	cbz	r0, f9f2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    f9e4:	2001      	movs	r0, #1
    f9e6:	7760      	strb	r0, [r4, #29]
    f9e8:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    f9ec:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    f9f0:	bd70      	pop	{r4, r5, r6, pc}
    f9f2:	216e      	movs	r1, #110	; 0x6e
    f9f4:	e00b      	b.n	fa0e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    f9f6:	7b21      	ldrb	r1, [r4, #12]
    f9f8:	0789      	lsls	r1, r1, #30
    f9fa:	d50f      	bpl.n	fa1c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    f9fc:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    fa00:	1e49      	subs	r1, r1, #1
    fa02:	b249      	sxtb	r1, r1
    fa04:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    fa08:	2900      	cmp	r1, #0
    fa0a:	da03      	bge.n	fa14 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    fa0c:	2180      	movs	r1, #128	; 0x80
    fa0e:	2040      	movs	r0, #64	; 0x40
    fa10:	f7f1 ffce 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa14:	68e1      	ldr	r1, [r4, #12]
    fa16:	f021 0102 	bic.w	r1, r1, #2
    fa1a:	60e1      	str	r1, [r4, #12]
    fa1c:	7485      	strb	r5, [r0, #18]
    fa1e:	bd70      	pop	{r4, r5, r6, pc}
    fa20:	2200      	movs	r2, #0
    fa22:	704a      	strb	r2, [r1, #1]
    fa24:	2219      	movs	r2, #25
    fa26:	700a      	strb	r2, [r1, #0]
    fa28:	f8d0 000a 	ldr.w	r0, [r0, #10]
    fa2c:	6048      	str	r0, [r1, #4]
    fa2e:	4770      	bx	lr
    fa30:	b510      	push	{r4, lr}
    fa32:	4604      	mov	r4, r0
    fa34:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    fa38:	e9d4 1000 	ldrd	r1, r0, [r4]
    fa3c:	4050      	eors	r0, r2
    fa3e:	ea70 0101 	orns	r1, r0, r1
    fa42:	d008      	beq.n	fa56 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    fa44:	f002 f88d 	bl	11b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    fa48:	e9d4 2300 	ldrd	r2, r3, [r4]
    fa4c:	1a80      	subs	r0, r0, r2
    fa4e:	4199      	sbcs	r1, r3
    fa50:	d301      	bcc.n	fa56 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    fa52:	2001      	movs	r0, #1
    fa54:	bd10      	pop	{r4, pc}
    fa56:	2000      	movs	r0, #0
    fa58:	bd10      	pop	{r4, pc}

0000fa5a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    fa5a:	b508      	push	{r3, lr}
    fa5c:	f000 f804 	bl	fa68 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    fa60:	466a      	mov	r2, sp
    fa62:	f7f4 fd1b 	bl	449c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    fa66:	bd08      	pop	{r3, pc}
    fa68:	b530      	push	{r4, r5, lr}
    fa6a:	784c      	ldrb	r4, [r1, #1]
    fa6c:	4603      	mov	r3, r0
    fa6e:	7808      	ldrb	r0, [r1, #0]
    fa70:	788d      	ldrb	r5, [r1, #2]
    fa72:	0e22      	lsrs	r2, r4, #24
    fa74:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    fa78:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    fa7c:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    fa80:	78cd      	ldrb	r5, [r1, #3]
    fa82:	790c      	ldrb	r4, [r1, #4]
    fa84:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    fa88:	4322      	orrs	r2, r4
    fa8a:	7949      	ldrb	r1, [r1, #5]
    fa8c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    fa90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fa94:	4611      	mov	r1, r2
    fa96:	2b01      	cmp	r3, #1
    fa98:	d101      	bne.n	fa9e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    fa9a:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    fa9e:	bd30      	pop	{r4, r5, pc}
    faa0:	2801      	cmp	r0, #1
    faa2:	d102      	bne.n	faaa <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    faa4:	7948      	ldrb	r0, [r1, #5]
    faa6:	0980      	lsrs	r0, r0, #6
    faa8:	d001      	beq.n	faae <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    faaa:	2000      	movs	r0, #0
    faac:	4770      	bx	lr
    faae:	2001      	movs	r0, #1
    fab0:	4770      	bx	lr
    fab2:	2801      	cmp	r0, #1
    fab4:	d106      	bne.n	fac4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    fab6:	7948      	ldrb	r0, [r1, #5]
    fab8:	2101      	movs	r1, #1
    faba:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    fabe:	d101      	bne.n	fac4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    fac0:	2001      	movs	r0, #1
    fac2:	4770      	bx	lr
    fac4:	2000      	movs	r0, #0
    fac6:	4770      	bx	lr
    fac8:	2802      	cmp	r0, #2
    faca:	d003      	beq.n	fad4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    facc:	2803      	cmp	r0, #3
    face:	d001      	beq.n	fad4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    fad0:	2000      	movs	r0, #0
    fad2:	4770      	bx	lr
    fad4:	2001      	movs	r0, #1
    fad6:	4770      	bx	lr

0000fad8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    fad8:	b510      	push	{r4, lr}
    fada:	4604      	mov	r4, r0
    fadc:	7c00      	ldrb	r0, [r0, #16]
    fade:	f7ff fff3 	bl	fac8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    fae2:	b148      	cbz	r0, faf8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    fae4:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    fae8:	f104 0158 	add.w	r1, r4, #88	; 0x58
    faec:	f7ff f890 	bl	ec10 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    faf0:	2808      	cmp	r0, #8
    faf2:	d001      	beq.n	faf8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    faf4:	2001      	movs	r0, #1
    faf6:	bd10      	pop	{r4, pc}
    faf8:	7c20      	ldrb	r0, [r4, #16]
    fafa:	b118      	cbz	r0, fb04 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    fafc:	2802      	cmp	r0, #2
    fafe:	d001      	beq.n	fb04 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    fb00:	7de0      	ldrb	r0, [r4, #23]
    fb02:	bd10      	pop	{r4, pc}
    fb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb08:	2000      	movs	r0, #0
    fb0a:	f7f2 bee1 	b.w	28d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000fb0e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    fb0e:	b508      	push	{r3, lr}
    fb10:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    fb14:	f88d 1000 	strb.w	r1, [sp]
    fb18:	9900      	ldr	r1, [sp, #0]
    fb1a:	9100      	str	r1, [sp, #0]
    fb1c:	f89d 1000 	ldrb.w	r1, [sp]
    fb20:	b941      	cbnz	r1, fb34 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    fb22:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    fb26:	f88d 1000 	strb.w	r1, [sp]
    fb2a:	9900      	ldr	r1, [sp, #0]
    fb2c:	9100      	str	r1, [sp, #0]
    fb2e:	f89d 1000 	ldrb.w	r1, [sp]
    fb32:	b109      	cbz	r1, fb38 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    fb34:	2001      	movs	r0, #1
    fb36:	bd08      	pop	{r3, pc}
    fb38:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    fb3c:	f88d 0000 	strb.w	r0, [sp]
    fb40:	9800      	ldr	r0, [sp, #0]
    fb42:	9000      	str	r0, [sp, #0]
    fb44:	f89d 0000 	ldrb.w	r0, [sp]
    fb48:	2000      	movs	r0, #0
    fb4a:	bd08      	pop	{r3, pc}

0000fb4c <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    fb4c:	20ff      	movs	r0, #255	; 0xff
    fb4e:	7008      	strb	r0, [r1, #0]
    fb50:	6b48      	ldr	r0, [r1, #52]	; 0x34
    fb52:	f7fe bf62 	b.w	ea1a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000fb56 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    fb56:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fb58:	460d      	mov	r5, r1
    fb5a:	4604      	mov	r4, r0
    fb5c:	f44f 728c 	mov.w	r2, #280	; 0x118
    fb60:	2100      	movs	r1, #0
    fb62:	f002 fa0a 	bl	11f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    fb66:	20ff      	movs	r0, #255	; 0xff
    fb68:	7020      	strb	r0, [r4, #0]
    fb6a:	207f      	movs	r0, #127	; 0x7f
    fb6c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    fb70:	2013      	movs	r0, #19
    fb72:	8060      	strh	r0, [r4, #2]
    fb74:	f242 7010 	movw	r0, #10000	; 0x2710
    fb78:	8460      	strh	r0, [r4, #34]	; 0x22
    fb7a:	f7f2 fc99 	bl	24b0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    fb7e:	4601      	mov	r1, r0
    fb80:	6360      	str	r0, [r4, #52]	; 0x34
    fb82:	2200      	movs	r2, #0
    fb84:	4668      	mov	r0, sp
    fb86:	f7fe feae 	bl	e8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fb8a:	2200      	movs	r2, #0
    fb8c:	2101      	movs	r1, #1
    fb8e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fb90:	f7fe ff23 	bl	e9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fb94:	2204      	movs	r2, #4
    fb96:	4668      	mov	r0, sp
    fb98:	6b61      	ldr	r1, [r4, #52]	; 0x34
    fb9a:	f7fe fea4 	bl	e8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fb9e:	2200      	movs	r2, #0
    fba0:	4611      	mov	r1, r2
    fba2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fba4:	f7fe ff19 	bl	e9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fba8:	73a5      	strb	r5, [r4, #14]
    fbaa:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fbae:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    fbb2:	f000 b958 	b.w	fe66 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000fbb6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    fbb6:	7880      	ldrb	r0, [r0, #2]
    fbb8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    fbbc:	b108      	cbz	r0, fbc2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    fbbe:	2000      	movs	r0, #0
    fbc0:	4770      	bx	lr
    fbc2:	201f      	movs	r0, #31
    fbc4:	4770      	bx	lr

0000fbc6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    fbc6:	f7f5 b9cf 	b.w	4f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>

0000fbca <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    fbca:	6880      	ldr	r0, [r0, #8]
    fbcc:	4770      	bx	lr

0000fbce <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    fbce:	2001      	movs	r0, #1
    fbd0:	4770      	bx	lr

0000fbd2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    fbd2:	b510      	push	{r4, lr}
    fbd4:	4604      	mov	r4, r0
    fbd6:	3028      	adds	r0, #40	; 0x28
    fbd8:	f000 f905 	bl	fde6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    fbdc:	8861      	ldrh	r1, [r4, #2]
    fbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbe2:	2228      	movs	r2, #40	; 0x28
    fbe4:	f7f5 bb90 	b.w	5308 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000fbe8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    fbe8:	2200      	movs	r2, #0
    fbea:	8602      	strh	r2, [r0, #48]	; 0x30
    fbec:	8843      	ldrh	r3, [r0, #2]
    fbee:	2b1d      	cmp	r3, #29
    fbf0:	d001      	beq.n	fbf6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    fbf2:	7341      	strb	r1, [r0, #13]
    fbf4:	4770      	bx	lr
    fbf6:	7342      	strb	r2, [r0, #13]
    fbf8:	4770      	bx	lr

0000fbfa <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    fbfa:	b510      	push	{r4, lr}
    fbfc:	2400      	movs	r4, #0
    fbfe:	6b40      	ldr	r0, [r0, #52]	; 0x34
    fc00:	f7fe fee3 	bl	e9ca <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    fc04:	4384      	bics	r4, r0
    fc06:	f084 0001 	eor.w	r0, r4, #1
    fc0a:	bd10      	pop	{r4, pc}

0000fc0c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    fc0c:	2000      	movs	r0, #0
    fc0e:	4770      	bx	lr

0000fc10 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    fc10:	7880      	ldrb	r0, [r0, #2]
    fc12:	f000 0001 	and.w	r0, r0, #1
    fc16:	4770      	bx	lr

0000fc18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    fc18:	7880      	ldrb	r0, [r0, #2]
    fc1a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    fc1e:	4770      	bx	lr

0000fc20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    fc20:	2001      	movs	r0, #1
    fc22:	4770      	bx	lr

0000fc24 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    fc24:	7880      	ldrb	r0, [r0, #2]
    fc26:	f3c0 0040 	ubfx	r0, r0, #1, #1
    fc2a:	4770      	bx	lr

0000fc2c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    fc2c:	f990 000e 	ldrsb.w	r0, [r0, #14]
    fc30:	4770      	bx	lr

0000fc32 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    fc32:	7800      	ldrb	r0, [r0, #0]
    fc34:	28ff      	cmp	r0, #255	; 0xff
    fc36:	d001      	beq.n	fc3c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    fc38:	2001      	movs	r0, #1
    fc3a:	4770      	bx	lr
    fc3c:	2000      	movs	r0, #0
    fc3e:	4770      	bx	lr

0000fc40 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    fc40:	f800 1f20 	strb.w	r1, [r0, #32]!
    fc44:	7042      	strb	r2, [r0, #1]
    fc46:	4770      	bx	lr

0000fc48 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    fc48:	680a      	ldr	r2, [r1, #0]
    fc4a:	f840 2f11 	str.w	r2, [r0, #17]!
    fc4e:	8889      	ldrh	r1, [r1, #4]
    fc50:	8081      	strh	r1, [r0, #4]
    fc52:	2101      	movs	r1, #1
    fc54:	7181      	strb	r1, [r0, #6]
    fc56:	4770      	bx	lr

0000fc58 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    fc58:	7b00      	ldrb	r0, [r0, #12]
    fc5a:	4770      	bx	lr

0000fc5c <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    fc5c:	2001      	movs	r0, #1
    fc5e:	4770      	bx	lr

0000fc60 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    fc60:	61c1      	str	r1, [r0, #28]
    fc62:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    fc66:	724a      	strb	r2, [r1, #9]
    fc68:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    fc6c:	f8c1 200a 	str.w	r2, [r1, #10]
    fc70:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    fc74:	81c8      	strh	r0, [r1, #14]
    fc76:	4770      	bx	lr

0000fc78 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    fc78:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    fc7c:	4770      	bx	lr

0000fc7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    fc7e:	7bc0      	ldrb	r0, [r0, #15]
    fc80:	2800      	cmp	r0, #0
    fc82:	d000      	beq.n	fc86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    fc84:	2001      	movs	r0, #1
    fc86:	4770      	bx	lr
    fc88:	7802      	ldrb	r2, [r0, #0]
    fc8a:	2320      	movs	r3, #32
    fc8c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    fc90:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    fc94:	430a      	orrs	r2, r1
    fc96:	7002      	strb	r2, [r0, #0]
    fc98:	4770      	bx	lr
    fc9a:	2101      	movs	r1, #1
    fc9c:	f7f4 bdb4 	b.w	4808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    fca0:	2101      	movs	r1, #1
    fca2:	f7f4 bdb1 	b.w	4808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    fca6:	2200      	movs	r2, #0
    fca8:	704a      	strb	r2, [r1, #1]
    fcaa:	2205      	movs	r2, #5
    fcac:	700a      	strb	r2, [r1, #0]
    fcae:	f8d0 000a 	ldr.w	r0, [r0, #10]
    fcb2:	6048      	str	r0, [r1, #4]
    fcb4:	4770      	bx	lr
    fcb6:	b510      	push	{r4, lr}
    fcb8:	460c      	mov	r4, r1
    fcba:	2100      	movs	r1, #0
    fcbc:	7061      	strb	r1, [r4, #1]
    fcbe:	2112      	movs	r1, #18
    fcc0:	7021      	strb	r1, [r4, #0]
    fcc2:	f100 0109 	add.w	r1, r0, #9
    fcc6:	2221      	movs	r2, #33	; 0x21
    fcc8:	1d20      	adds	r0, r4, #4
    fcca:	f002 f8dc 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fcce:	2001      	movs	r0, #1
    fcd0:	71e0      	strb	r0, [r4, #7]
    fcd2:	7920      	ldrb	r0, [r4, #4]
    fcd4:	2800      	cmp	r0, #0
    fcd6:	d015      	beq.n	fd04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    fcd8:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    fcdc:	2100      	movs	r1, #0
    fcde:	4620      	mov	r0, r4
    fce0:	f7f2 f994 	bl	200c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fce4:	2800      	cmp	r0, #0
    fce6:	d00d      	beq.n	fd04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    fce8:	8800      	ldrh	r0, [r0, #0]
    fcea:	f7fe fef5 	bl	ead8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fcee:	2100      	movs	r1, #0
    fcf0:	4620      	mov	r0, r4
    fcf2:	f7f2 fa2d 	bl	2150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fcf6:	2800      	cmp	r0, #0
    fcf8:	d004      	beq.n	fd04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    fcfa:	f240 2151 	movw	r1, #593	; 0x251
    fcfe:	202d      	movs	r0, #45	; 0x2d
    fd00:	f7f1 fe56 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd04:	bd10      	pop	{r4, pc}
    fd06:	2200      	movs	r2, #0
    fd08:	704a      	strb	r2, [r1, #1]
    fd0a:	221a      	movs	r2, #26
    fd0c:	700a      	strb	r2, [r1, #0]
    fd0e:	f850 2f09 	ldr.w	r2, [r0, #9]!
    fd12:	604a      	str	r2, [r1, #4]
    fd14:	6842      	ldr	r2, [r0, #4]
    fd16:	608a      	str	r2, [r1, #8]
    fd18:	7a00      	ldrb	r0, [r0, #8]
    fd1a:	7308      	strb	r0, [r1, #12]
    fd1c:	4770      	bx	lr
    fd1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd22:	4604      	mov	r4, r0
    fd24:	460f      	mov	r7, r1
    fd26:	7e40      	ldrb	r0, [r0, #25]
    fd28:	f7f3 fb0e 	bl	3348 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    fd2c:	4606      	mov	r6, r0
    fd2e:	7e20      	ldrb	r0, [r4, #24]
    fd30:	f104 0551 	add.w	r5, r4, #81	; 0x51
    fd34:	b120      	cbz	r0, fd40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    fd36:	b11e      	cbz	r6, fd40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    fd38:	7e60      	ldrb	r0, [r4, #25]
    fd3a:	f7f3 faf9 	bl	3330 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    fd3e:	b1a0      	cbz	r0, fd6a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xec>
    fd40:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    fd44:	2800      	cmp	r0, #0
    fd46:	d024      	beq.n	fd92 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    fd48:	7ea0      	ldrb	r0, [r4, #26]
    fd4a:	2800      	cmp	r0, #0
    fd4c:	d021      	beq.n	fd92 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    fd4e:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    fd52:	4629      	mov	r1, r5
    fd54:	f7ff fead 	bl	fab2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    fd58:	b1a8      	cbz	r0, fd86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    fd5a:	f7f3 fae5 	bl	3328 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    fd5e:	463a      	mov	r2, r7
    fd60:	4629      	mov	r1, r5
    fd62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fd66:	f7fe beeb 	b.w	eb40 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    fd6a:	2001      	movs	r0, #1
    fd6c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    fd70:	463a      	mov	r2, r7
    fd72:	4629      	mov	r1, r5
    fd74:	4630      	mov	r0, r6
    fd76:	f7fe fee3 	bl	eb40 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    fd7a:	7e61      	ldrb	r1, [r4, #25]
    fd7c:	4628      	mov	r0, r5
    fd7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fd82:	f7f3 baed 	b.w	3360 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    fd86:	4639      	mov	r1, r7
    fd88:	4628      	mov	r0, r5
    fd8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fd8e:	f7fe bec6 	b.w	eb1e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    fd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd96:	b510      	push	{r4, lr}
    fd98:	4604      	mov	r4, r0
    fd9a:	4608      	mov	r0, r1
    fd9c:	f7f9 f964 	bl	9068 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    fda0:	7921      	ldrb	r1, [r4, #4]
    fda2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fda6:	2025      	movs	r0, #37	; 0x25
    fda8:	f7f9 b934 	b.w	9014 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    fdac:	b570      	push	{r4, r5, r6, lr}
    fdae:	4614      	mov	r4, r2
    fdb0:	461d      	mov	r5, r3
    fdb2:	4606      	mov	r6, r0
    fdb4:	f001 fed5 	bl	11b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    fdb8:	1900      	adds	r0, r0, r4
    fdba:	4169      	adcs	r1, r5
    fdbc:	e9c6 0100 	strd	r0, r1, [r6]
    fdc0:	bd70      	pop	{r4, r5, r6, pc}

0000fdc2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    fdc2:	b570      	push	{r4, r5, r6, lr}
    fdc4:	7001      	strb	r1, [r0, #0]
    fdc6:	7042      	strb	r2, [r0, #1]
    fdc8:	4614      	mov	r4, r2
    fdca:	460d      	mov	r5, r1
    fdcc:	7880      	ldrb	r0, [r0, #2]
    fdce:	f000 f87f 	bl	fed0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fdd2:	fb10 f005 	smulbb	r0, r0, r5
    fdd6:	4360      	muls	r0, r4
    fdd8:	28ff      	cmp	r0, #255	; 0xff
    fdda:	d303      	bcc.n	fde4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    fddc:	215c      	movs	r1, #92	; 0x5c
    fdde:	202e      	movs	r0, #46	; 0x2e
    fde0:	f7f1 fde6 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fde4:	bd70      	pop	{r4, r5, r6, pc}

0000fde6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    fde6:	b510      	push	{r4, lr}
    fde8:	4604      	mov	r4, r0
    fdea:	7880      	ldrb	r0, [r0, #2]
    fdec:	f000 f870 	bl	fed0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fdf0:	7861      	ldrb	r1, [r4, #1]
    fdf2:	7822      	ldrb	r2, [r4, #0]
    fdf4:	fb11 f102 	smulbb	r1, r1, r2
    fdf8:	4348      	muls	r0, r1
    fdfa:	b2c0      	uxtb	r0, r0
    fdfc:	bd10      	pop	{r4, pc}

0000fdfe <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    fdfe:	b510      	push	{r4, lr}
    fe00:	4604      	mov	r4, r0
    fe02:	f000 f84d 	bl	fea0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    fe06:	7961      	ldrb	r1, [r4, #5]
    fe08:	1c49      	adds	r1, r1, #1
    fe0a:	b2c9      	uxtb	r1, r1
    fe0c:	7161      	strb	r1, [r4, #5]
    fe0e:	7862      	ldrb	r2, [r4, #1]
    fe10:	4291      	cmp	r1, r2
    fe12:	d10b      	bne.n	fe2c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    fe14:	2200      	movs	r2, #0
    fe16:	7162      	strb	r2, [r4, #5]
    fe18:	78e1      	ldrb	r1, [r4, #3]
    fe1a:	4301      	orrs	r1, r0
    fe1c:	70e1      	strb	r1, [r4, #3]
    fe1e:	78a3      	ldrb	r3, [r4, #2]
    fe20:	4299      	cmp	r1, r3
    fe22:	d103      	bne.n	fe2c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    fe24:	70e2      	strb	r2, [r4, #3]
    fe26:	7921      	ldrb	r1, [r4, #4]
    fe28:	1c49      	adds	r1, r1, #1
    fe2a:	7121      	strb	r1, [r4, #4]
    fe2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe30:	f000 b825 	b.w	fe7e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000fe34 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    fe34:	7081      	strb	r1, [r0, #2]
    fe36:	4770      	bx	lr

0000fe38 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    fe38:	b570      	push	{r4, r5, r6, lr}
    fe3a:	4604      	mov	r4, r0
    fe3c:	7880      	ldrb	r0, [r0, #2]
    fe3e:	f000 f847 	bl	fed0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fe42:	7861      	ldrb	r1, [r4, #1]
    fe44:	fb11 f500 	smulbb	r5, r1, r0
    fe48:	78e0      	ldrb	r0, [r4, #3]
    fe4a:	f000 f841 	bl	fed0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fe4e:	7861      	ldrb	r1, [r4, #1]
    fe50:	7962      	ldrb	r2, [r4, #5]
    fe52:	fb10 2001 	smlabb	r0, r0, r1, r2
    fe56:	7821      	ldrb	r1, [r4, #0]
    fe58:	7922      	ldrb	r2, [r4, #4]
    fe5a:	1a89      	subs	r1, r1, r2
    fe5c:	fb11 f105 	smulbb	r1, r1, r5
    fe60:	1a08      	subs	r0, r1, r0
    fe62:	b2c0      	uxtb	r0, r0
    fe64:	bd70      	pop	{r4, r5, r6, pc}

0000fe66 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    fe66:	2100      	movs	r1, #0
    fe68:	6001      	str	r1, [r0, #0]
    fe6a:	8081      	strh	r1, [r0, #4]
    fe6c:	2101      	movs	r1, #1
    fe6e:	7041      	strb	r1, [r0, #1]
    fe70:	7001      	strb	r1, [r0, #0]
    fe72:	4770      	bx	lr

0000fe74 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    fe74:	2100      	movs	r1, #0
    fe76:	70c1      	strb	r1, [r0, #3]
    fe78:	7141      	strb	r1, [r0, #5]
    fe7a:	7101      	strb	r1, [r0, #4]
    fe7c:	4770      	bx	lr
    fe7e:	b510      	push	{r4, lr}
    fe80:	2801      	cmp	r0, #1
    fe82:	d007      	beq.n	fe94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    fe84:	2802      	cmp	r0, #2
    fe86:	d007      	beq.n	fe98 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    fe88:	2804      	cmp	r0, #4
    fe8a:	d007      	beq.n	fe9c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    fe8c:	2139      	movs	r1, #57	; 0x39
    fe8e:	202e      	movs	r0, #46	; 0x2e
    fe90:	f7f1 fd8e 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe94:	2025      	movs	r0, #37	; 0x25
    fe96:	bd10      	pop	{r4, pc}
    fe98:	2026      	movs	r0, #38	; 0x26
    fe9a:	bd10      	pop	{r4, pc}
    fe9c:	2027      	movs	r0, #39	; 0x27
    fe9e:	bd10      	pop	{r4, pc}
    fea0:	4601      	mov	r1, r0
    fea2:	2000      	movs	r0, #0
    fea4:	788a      	ldrb	r2, [r1, #2]
    fea6:	07d3      	lsls	r3, r2, #31
    fea8:	d002      	beq.n	feb0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    feaa:	78cb      	ldrb	r3, [r1, #3]
    feac:	07db      	lsls	r3, r3, #31
    feae:	d006      	beq.n	febe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    feb0:	0793      	lsls	r3, r2, #30
    feb2:	d506      	bpl.n	fec2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    feb4:	78cb      	ldrb	r3, [r1, #3]
    feb6:	079b      	lsls	r3, r3, #30
    feb8:	d403      	bmi.n	fec2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    feba:	2002      	movs	r0, #2
    febc:	4770      	bx	lr
    febe:	2001      	movs	r0, #1
    fec0:	4770      	bx	lr
    fec2:	0752      	lsls	r2, r2, #29
    fec4:	d5fc      	bpl.n	fec0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    fec6:	78c9      	ldrb	r1, [r1, #3]
    fec8:	0749      	lsls	r1, r1, #29
    feca:	d4f9      	bmi.n	fec0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    fecc:	2004      	movs	r0, #4
    fece:	4770      	bx	lr
    fed0:	f3c0 0180 	ubfx	r1, r0, #2, #1
    fed4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    fed8:	4411      	add	r1, r2
    feda:	f000 0001 	and.w	r0, r0, #1
    fede:	4408      	add	r0, r1
    fee0:	4770      	bx	lr

0000fee2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    fee2:	f240 315a 	movw	r1, #858	; 0x35a
    fee6:	4348      	muls	r0, r1
    fee8:	4770      	bx	lr

0000feea <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    feea:	f240 20ef 	movw	r0, #751	; 0x2ef
    feee:	4770      	bx	lr
    fef0:	041c020e 	.word	0x041c020e
    fef4:	0c600630 	.word	0x0c600630
    fef8:	06b4035a 	.word	0x06b4035a
    fefc:	0bf505c5 	.word	0x0bf505c5
    ff00:	01a31225 	.word	0x01a31225
    ff04:	05bf03b1 	.word	0x05bf03b1
    ff08:	064902ef 	.word	0x064902ef
    ff0c:	09a3      	.short	0x09a3

0000ff0e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    ff0e:	b510      	push	{r4, lr}
    ff10:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    ff14:	b109      	cbz	r1, ff1a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ff16:	2000      	movs	r0, #0
    ff18:	bd10      	pop	{r4, pc}
    ff1a:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    ff1e:	b131      	cbz	r1, ff2e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ff20:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    ff24:	428a      	cmp	r2, r1
    ff26:	d902      	bls.n	ff2e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ff28:	f7f4 fc56 	bl	47d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ff2c:	e7f3      	b.n	ff16 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    ff2e:	2001      	movs	r0, #1
    ff30:	bd10      	pop	{r4, pc}

0000ff32 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    ff32:	b510      	push	{r4, lr}
    ff34:	b131      	cbz	r1, ff44 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    ff36:	2901      	cmp	r1, #1
    ff38:	d008      	beq.n	ff4c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    ff3a:	f240 71d3 	movw	r1, #2003	; 0x7d3
    ff3e:	2030      	movs	r0, #48	; 0x30
    ff40:	f7f1 fd36 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff48:	f000 b9c7 	b.w	102da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    ff4c:	2100      	movs	r1, #0
    ff4e:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    ff52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff56:	f000 b923 	b.w	101a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>

0000ff5a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    ff5a:	b510      	push	{r4, lr}
    ff5c:	4604      	mov	r4, r0
    ff5e:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ff62:	2800      	cmp	r0, #0
    ff64:	d019      	beq.n	ff9a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    ff66:	2001      	movs	r0, #1
    ff68:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    ff6c:	4601      	mov	r1, r0
    ff6e:	4620      	mov	r0, r4
    ff70:	f7ff fe82 	bl	fc78 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ff74:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    ff78:	b170      	cbz	r0, ff98 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    ff7a:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ff7e:	f7fb fcc7 	bl	b910 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ff82:	7820      	ldrb	r0, [r4, #0]
    ff84:	f7fb fe3c 	bl	bc00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ff88:	f814 09c8 	ldrb.w	r0, [r4], #-200
    ff8c:	f7fb fe16 	bl	bbbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ff90:	b120      	cbz	r0, ff9c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    ff92:	2000      	movs	r0, #0
    ff94:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    ff98:	2000      	movs	r0, #0
    ff9a:	bd10      	pop	{r4, pc}
    ff9c:	f240 210b 	movw	r1, #523	; 0x20b
    ffa0:	2030      	movs	r0, #48	; 0x30
    ffa2:	f7f1 fd05 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ffa6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    ffa6:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    ffaa:	4770      	bx	lr

0000ffac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    ffac:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ffb0:	4770      	bx	lr

0000ffb2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    ffb2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ffb4:	4604      	mov	r4, r0
    ffb6:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    ffba:	2800      	cmp	r0, #0
    ffbc:	d15f      	bne.n	1007e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ffbe:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    ffc2:	2803      	cmp	r0, #3
    ffc4:	d15b      	bne.n	1007e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ffc6:	f001 fdcc 	bl	11b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ffca:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    ffce:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    ffd2:	1ac0      	subs	r0, r0, r3
    ffd4:	eb61 0102 	sbc.w	r1, r1, r2
    ffd8:	2300      	movs	r3, #0
    ffda:	461a      	mov	r2, r3
    ffdc:	1a1b      	subs	r3, r3, r0
    ffde:	418a      	sbcs	r2, r1
    ffe0:	da4d      	bge.n	1007e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ffe2:	1c42      	adds	r2, r0, #1
    ffe4:	f171 0100 	sbcs.w	r1, r1, #0
    ffe8:	db02      	blt.n	fff0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    ffea:	f240 610b 	movw	r1, #1547	; 0x60b
    ffee:	e036      	b.n	1005e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    fff0:	6921      	ldr	r1, [r4, #16]
    fff2:	b111      	cbz	r1, fffa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    fff4:	fbb0 f0f1 	udiv	r0, r0, r1
    fff8:	e000      	b.n	fffc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    fffa:	2000      	movs	r0, #0
    fffc:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
   10000:	1c40      	adds	r0, r0, #1
   10002:	4408      	add	r0, r1
   10004:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
   10008:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
   1000c:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
   10010:	1a08      	subs	r0, r1, r0
   10012:	b200      	sxth	r0, r0
   10014:	2800      	cmp	r0, #0
   10016:	dd32      	ble.n	1007e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   10018:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
   1001c:	f7fb fc78 	bl	b910 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   10020:	2800      	cmp	r0, #0
   10022:	d02c      	beq.n	1007e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   10024:	20ff      	movs	r0, #255	; 0xff
   10026:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
   1002a:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
   1002e:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
   10032:	ae01      	add	r6, sp, #4
   10034:	1a40      	subs	r0, r0, r1
   10036:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
   1003a:	1e40      	subs	r0, r0, #1
   1003c:	4408      	add	r0, r1
   1003e:	b285      	uxth	r5, r0
   10040:	e017      	b.n	10072 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
   10042:	9600      	str	r6, [sp, #0]
   10044:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
   10048:	2300      	movs	r3, #0
   1004a:	2201      	movs	r2, #1
   1004c:	4620      	mov	r0, r4
   1004e:	f7f5 fc63 	bl	5918 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
   10052:	2800      	cmp	r0, #0
   10054:	d013      	beq.n	1007e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   10056:	2801      	cmp	r0, #1
   10058:	d004      	beq.n	10064 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
   1005a:	f240 6144 	movw	r1, #1604	; 0x644
   1005e:	2030      	movs	r0, #48	; 0x30
   10060:	f7f1 fca6 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10064:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
   10068:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1006c:	4408      	add	r0, r1
   1006e:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
   10072:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
   10076:	1a28      	subs	r0, r5, r0
   10078:	b200      	sxth	r0, r0
   1007a:	2800      	cmp	r0, #0
   1007c:	dae1      	bge.n	10042 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
   1007e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10080:	2000      	movs	r0, #0
   10082:	4770      	bx	lr
   10084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10088:	4604      	mov	r4, r0
   1008a:	f000 f8ff 	bl	1028c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
   1008e:	2700      	movs	r7, #0
   10090:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
   10094:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
   10098:	2601      	movs	r6, #1
   1009a:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3
   1009e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   100a0:	463d      	mov	r5, r7
   100a2:	b130      	cbz	r0, 100b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x100>
   100a4:	f001 fd5d 	bl	11b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   100a8:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   100aa:	fbb0 f2f1 	udiv	r2, r0, r1
   100ae:	fb01 0512 	mls	r5, r1, r2, r0
   100b2:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   100b6:	2100      	movs	r1, #0
   100b8:	4680      	mov	r8, r0
   100ba:	f7fe fec5 	bl	ee48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   100be:	e9f4 103e 	ldrd	r1, r0, [r4, #248]!	; 0xf8
   100c2:	1949      	adds	r1, r1, r5
   100c4:	4178      	adcs	r0, r7
   100c6:	e9c4 1000 	strd	r1, r0, [r4]
   100ca:	8920      	ldrh	r0, [r4, #8]
   100cc:	3cf8      	subs	r4, #248	; 0xf8
   100ce:	1c40      	adds	r0, r0, #1
   100d0:	280a      	cmp	r0, #10
   100d2:	d201      	bcs.n	100d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x126>
   100d4:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
   100d8:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   100dc:	b138      	cbz	r0, 100ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
   100de:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
   100e2:	1c40      	adds	r0, r0, #1
   100e4:	280a      	cmp	r0, #10
   100e6:	d302      	bcc.n	100ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
   100e8:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
   100ec:	e002      	b.n	100f4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x142>
   100ee:	2002      	movs	r0, #2
   100f0:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
   100f4:	4620      	mov	r0, r4
   100f6:	f000 f823 	bl	10140 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
   100fa:	b120      	cbz	r0, 10106 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x154>
   100fc:	4620      	mov	r0, r4
   100fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10102:	f000 b80e 	b.w	10122 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
   10106:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
   1010a:	4641      	mov	r1, r8
   1010c:	f000 f8bc 	bl	10288 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
   10110:	2800      	cmp	r0, #0
   10112:	d104      	bne.n	1011e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16c>
   10114:	f240 61e7 	movw	r1, #1767	; 0x6e7
   10118:	2030      	movs	r0, #48	; 0x30
   1011a:	f7f1 fc49 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1011e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10122:	b510      	push	{r4, lr}
   10124:	4604      	mov	r4, r0
   10126:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
   1012a:	f7fb fd47 	bl	bbbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   1012e:	2000      	movs	r0, #0
   10130:	7620      	strb	r0, [r4, #24]
   10132:	bd10      	pop	{r4, pc}
   10134:	b510      	push	{r4, lr}
   10136:	f7ff fd4c 	bl	fbd2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   1013a:	f200 1015 	addw	r0, r0, #277	; 0x115
   1013e:	bd10      	pop	{r4, pc}
   10140:	b570      	push	{r4, r5, r6, lr}
   10142:	4605      	mov	r5, r0
   10144:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
   10148:	b108      	cbz	r0, 1014e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
   1014a:	2001      	movs	r0, #1
   1014c:	bd70      	pop	{r4, r5, r6, pc}
   1014e:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
   10152:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   10156:	4050      	eors	r0, r2
   10158:	ea70 0101 	orns	r1, r0, r1
   1015c:	d012      	beq.n	10184 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
   1015e:	2400      	movs	r4, #0
   10160:	4621      	mov	r1, r4
   10162:	4628      	mov	r0, r5
   10164:	f7ff ffe6 	bl	10134 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
   10168:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
   1016c:	1840      	adds	r0, r0, r1
   1016e:	4154      	adcs	r4, r2
   10170:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
   10174:	3df8      	subs	r5, #248	; 0xf8
   10176:	1a10      	subs	r0, r2, r0
   10178:	41a1      	sbcs	r1, r4
   1017a:	d503      	bpl.n	10184 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
   1017c:	4628      	mov	r0, r5
   1017e:	f7f4 fb2b 	bl	47d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   10182:	e7e2      	b.n	1014a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x198>
   10184:	2000      	movs	r0, #0
   10186:	bd70      	pop	{r4, r5, r6, pc}
   10188:	b510      	push	{r4, lr}
   1018a:	4604      	mov	r4, r0
   1018c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   10190:	f000 f988 	bl	104a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
   10194:	4601      	mov	r1, r0
   10196:	4620      	mov	r0, r4
   10198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1019c:	f7ff b9c7 	b.w	f52e <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>
   101a0:	b510      	push	{r4, lr}
   101a2:	f7f8 fd93 	bl	8ccc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   101a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101aa:	f7fb be65 	b.w	be78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   101ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   101b2:	4604      	mov	r4, r0
   101b4:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
   101b8:	2800      	cmp	r0, #0
   101ba:	d051      	beq.n	10260 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
   101bc:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
   101c0:	2803      	cmp	r0, #3
   101c2:	d14d      	bne.n	10260 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
   101c4:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
   101c8:	f001 fab2 	bl	11730 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   101cc:	4605      	mov	r5, r0
   101ce:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
   101d2:	f7f5 fa6d 	bl	56b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
   101d6:	4428      	add	r0, r5
   101d8:	b286      	uxth	r6, r0
   101da:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
   101de:	f7f5 fa67 	bl	56b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
   101e2:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
   101e6:	fa1f f880 	uxth.w	r8, r0
   101ea:	4648      	mov	r0, r9
   101ec:	f7f8 fe2c 	bl	8e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   101f0:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
   101f4:	1a0d      	subs	r5, r1, r0
   101f6:	4648      	mov	r0, r9
   101f8:	f7f8 fe52 	bl	8ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   101fc:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   10200:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10204:	fbb0 f0fa 	udiv	r0, r0, sl
   10208:	1a2d      	subs	r5, r5, r0
   1020a:	4648      	mov	r0, r9
   1020c:	f7f8 fe1c 	bl	8e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10210:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
   10214:	1a0f      	subs	r7, r1, r0
   10216:	4648      	mov	r0, r9
   10218:	f7f8 fe42 	bl	8ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1021c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   10220:	4401      	add	r1, r0
   10222:	fbb1 f0fa 	udiv	r0, r1, sl
   10226:	1a39      	subs	r1, r7, r0
   10228:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
   1022c:	4370      	muls	r0, r6
   1022e:	fbb0 f2f8 	udiv	r2, r0, r8
   10232:	2029      	movs	r0, #41	; 0x29
   10234:	eb00 0051 	add.w	r0, r0, r1, lsr #1
   10238:	3260      	adds	r2, #96	; 0x60
   1023a:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
   1023e:	eb00 0052 	add.w	r0, r0, r2, lsr #1
   10242:	42a9      	cmp	r1, r5
   10244:	d801      	bhi.n	1024a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x298>
   10246:	4285      	cmp	r5, r0
   10248:	d901      	bls.n	1024e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29c>
   1024a:	f7fd f80f 	bl	d26c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
   1024e:	4631      	mov	r1, r6
   10250:	6920      	ldr	r0, [r4, #16]
   10252:	f7fd f873 	bl	d33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   10256:	2100      	movs	r1, #0
   10258:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
   1025c:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
   10260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10264:	b570      	push	{r4, r5, r6, lr}
   10266:	460c      	mov	r4, r1
   10268:	4605      	mov	r5, r0
   1026a:	f7f8 fe19 	bl	8ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1026e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   10272:	4408      	add	r0, r1
   10274:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10278:	fbb0 f6f1 	udiv	r6, r0, r1
   1027c:	4628      	mov	r0, r5
   1027e:	f7f8 fde3 	bl	8e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10282:	4430      	add	r0, r6
   10284:	4420      	add	r0, r4
   10286:	bd70      	pop	{r4, r5, r6, pc}
   10288:	f7fa bee4 	b.w	b054 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   1028c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1028e:	4604      	mov	r4, r0
   10290:	f7ff fcc6 	bl	fc20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10294:	b1f8      	cbz	r0, 102d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x324>
   10296:	4620      	mov	r0, r4
   10298:	f7ff fcba 	bl	fc10 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1029c:	b918      	cbnz	r0, 102a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f4>
   1029e:	4620      	mov	r0, r4
   102a0:	f7ff fcc0 	bl	fc24 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   102a4:	b140      	cbz	r0, 102b8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x306>
   102a6:	245a      	movs	r4, #90	; 0x5a
   102a8:	4668      	mov	r0, sp
   102aa:	f7fd fa9d 	bl	d7e8 <mpsl_fem_pa_is_configured>
   102ae:	f89d 0000 	ldrb.w	r0, [sp]
   102b2:	b118      	cbz	r0, 102bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
   102b4:	2501      	movs	r5, #1
   102b6:	e002      	b.n	102be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
   102b8:	2450      	movs	r4, #80	; 0x50
   102ba:	e7f5      	b.n	102a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
   102bc:	2500      	movs	r5, #0
   102be:	a801      	add	r0, sp, #4
   102c0:	f7fd fa7a 	bl	d7b8 <mpsl_fem_lna_is_configured>
   102c4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   102c8:	b100      	cbz	r0, 102cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x31a>
   102ca:	2001      	movs	r0, #1
   102cc:	4305      	orrs	r5, r0
   102ce:	d000      	beq.n	102d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
   102d0:	340a      	adds	r4, #10
   102d2:	4620      	mov	r0, r4
   102d4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   102d6:	2061      	movs	r0, #97	; 0x61
   102d8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   102da:	b570      	push	{r4, r5, r6, lr}
   102dc:	4604      	mov	r4, r0
   102de:	8c40      	ldrh	r0, [r0, #34]	; 0x22
   102e0:	2500      	movs	r5, #0
   102e2:	b130      	cbz	r0, 102f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
   102e4:	f7f3 fe66 	bl	3fb4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   102e8:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   102ea:	fbb0 f2f1 	udiv	r2, r0, r1
   102ee:	fb01 0512 	mls	r5, r1, r2, r0
   102f2:	4620      	mov	r0, r4
   102f4:	f7ff fc69 	bl	fbca <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   102f8:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
   102fc:	4428      	add	r0, r5
   102fe:	34e8      	adds	r4, #232	; 0xe8
   10300:	2500      	movs	r5, #0
   10302:	1882      	adds	r2, r0, r2
   10304:	eb45 0001 	adc.w	r0, r5, r1
   10308:	e9c4 2004 	strd	r2, r0, [r4, #16]
   1030c:	f804 5b0b 	strb.w	r5, [r4], #11
   10310:	2001      	movs	r0, #1
   10312:	f804 0901 	strb.w	r0, [r4], #-1
   10316:	2002      	movs	r0, #2
   10318:	f804 09f2 	strb.w	r0, [r4], #-242
   1031c:	4620      	mov	r0, r4
   1031e:	f7ff ffb5 	bl	1028c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
   10322:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
   10326:	4620      	mov	r0, r4
   10328:	f7ff ff0a 	bl	10140 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
   1032c:	b930      	cbnz	r0, 1033c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x38a>
   1032e:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
   10332:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
   10336:	f7ff ffa7 	bl	10288 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
   1033a:	b128      	cbz	r0, 10348 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x396>
   1033c:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
   10340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10344:	f7ff bf2c 	b.w	101a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
   10348:	f240 712d 	movw	r1, #1837	; 0x72d
   1034c:	2030      	movs	r0, #48	; 0x30
   1034e:	f7f1 fb2f 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10352:	b510      	push	{r4, lr}
   10354:	4604      	mov	r4, r0
   10356:	2000      	movs	r0, #0
   10358:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
   1035c:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
   10360:	f7fb fc2c 	bl	bbbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   10364:	2020      	movs	r0, #32
   10366:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
   1036a:	bd10      	pop	{r4, pc}
   1036c:	b510      	push	{r4, lr}
   1036e:	b140      	cbz	r0, 10382 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3d0>
   10370:	2909      	cmp	r1, #9
   10372:	d22f      	bcs.n	103d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x422>
   10374:	e8df f001 	tbb	[pc, r1]
   10378:	1e1e1607 	.word	0x1e1e1607
   1037c:	26222e1a 	.word	0x26222e1a
   10380:	002a      	.short	0x002a
   10382:	21cd      	movs	r1, #205	; 0xcd
   10384:	e023      	b.n	103ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
   10386:	4604      	mov	r4, r0
   10388:	f7f4 f9f6 	bl	4778 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
   1038c:	b110      	cbz	r0, 10394 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e2>
   1038e:	f240 2187 	movw	r1, #647	; 0x287
   10392:	e01c      	b.n	103ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
   10394:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   10398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1039c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
   103a0:	f7fb be46 	b.w	c030 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   103a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   103a8:	f000 b8b1 	b.w	1050e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x55c>
   103ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   103b0:	f7f8 be60 	b.w	9074 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   103b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   103b8:	f7ff be64 	b.w	10084 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
   103bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   103c0:	f7ff bc01 	b.w	fbc6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   103c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   103c8:	f7ff beab 	b.w	10122 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
   103cc:	21ed      	movs	r1, #237	; 0xed
   103ce:	2030      	movs	r0, #48	; 0x30
   103d0:	f7f1 faee 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103d4:	21f1      	movs	r1, #241	; 0xf1
   103d6:	e7fa      	b.n	103ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
   103d8:	b510      	push	{r4, lr}
   103da:	0004      	movs	r4, r0
   103dc:	d009      	beq.n	103f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
   103de:	2200      	movs	r2, #0
   103e0:	2909      	cmp	r1, #9
   103e2:	d25d      	bcs.n	104a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ee>
   103e4:	e8df f001 	tbb	[pc, r1]
   103e8:	43433b07 	.word	0x43433b07
   103ec:	4f485c3f 	.word	0x4f485c3f
   103f0:	0058      	.short	0x0058
   103f2:	2196      	movs	r1, #150	; 0x96
   103f4:	e051      	b.n	1049a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
   103f6:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
   103fa:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
   103fe:	4620      	mov	r0, r4
   10400:	b189      	cbz	r1, 10426 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x474>
   10402:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
   10406:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
   1040a:	428a      	cmp	r2, r1
   1040c:	d106      	bne.n	1041c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x46a>
   1040e:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
   10412:	1a51      	subs	r1, r2, r1
   10414:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
   10418:	4611      	mov	r1, r2
   1041a:	e00d      	b.n	10438 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
   1041c:	1a51      	subs	r1, r2, r1
   1041e:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
   10422:	b291      	uxth	r1, r2
   10424:	e008      	b.n	10438 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
   10426:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
   1042a:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
   1042e:	1a89      	subs	r1, r1, r2
   10430:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
   10434:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
   10438:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
   1043c:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
   10440:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
   10444:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
   10448:	f7f5 fe00 	bl	604c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
   1044c:	f894 022b 	ldrb.w	r0, [r4, #555]	; 0x22b
   10450:	2800      	cmp	r0, #0
   10452:	d020      	beq.n	10496 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e4>
   10454:	4620      	mov	r0, r4
   10456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1045a:	f7f5 b9e1 	b.w	5820 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
   1045e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10462:	f000 b8a0 	b.w	105a6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
   10466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1046a:	f7f8 be03 	b.w	9074 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   1046e:	4620      	mov	r0, r4
   10470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10474:	f7f5 bc5a 	b.w	5d2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x70c>
   10478:	2001      	movs	r0, #1
   1047a:	f7fa fb93 	bl	aba4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
   1047e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10482:	f7fe bb92 	b.w	ebaa <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>
   10486:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
   1048a:	2804      	cmp	r0, #4
   1048c:	d001      	beq.n	10492 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e0>
   1048e:	21bb      	movs	r1, #187	; 0xbb
   10490:	e003      	b.n	1049a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
   10492:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
   10496:	bd10      	pop	{r4, pc}
   10498:	21c1      	movs	r1, #193	; 0xc1
   1049a:	2030      	movs	r0, #48	; 0x30
   1049c:	f7f1 fa88 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104a0:	21c5      	movs	r1, #197	; 0xc5
   104a2:	e7fa      	b.n	1049a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
   104a4:	b510      	push	{r4, lr}
   104a6:	f7f8 fcfb 	bl	8ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   104aa:	f64d 7141 	movw	r1, #57153	; 0xdf41
   104ae:	4408      	add	r0, r1
   104b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   104b4:	fbb0 f0f1 	udiv	r0, r0, r1
   104b8:	f500 70bf 	add.w	r0, r0, #382	; 0x17e
   104bc:	bd10      	pop	{r4, pc}
   104be:	b538      	push	{r3, r4, r5, lr}
   104c0:	2500      	movs	r5, #0
   104c2:	4604      	mov	r4, r0
   104c4:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
   104c8:	f8a0 52a0 	strh.w	r5, [r0, #672]	; 0x2a0
   104cc:	462b      	mov	r3, r5
   104ce:	462a      	mov	r2, r5
   104d0:	4629      	mov	r1, r5
   104d2:	9500      	str	r5, [sp, #0]
   104d4:	f7f5 fa20 	bl	5918 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
   104d8:	b120      	cbz	r0, 104e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x532>
   104da:	f240 211f 	movw	r1, #543	; 0x21f
   104de:	2030      	movs	r0, #48	; 0x30
   104e0:	f7f1 fa66 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104e4:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
   104e8:	2001      	movs	r0, #1
   104ea:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
   104ee:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
   104f2:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
   104f6:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
   104fa:	3494      	adds	r4, #148	; 0x94
   104fc:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
   10500:	8820      	ldrh	r0, [r4, #0]
   10502:	1e40      	subs	r0, r0, #1
   10504:	8020      	strh	r0, [r4, #0]
   10506:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
   1050a:	2000      	movs	r0, #0
   1050c:	bd38      	pop	{r3, r4, r5, pc}
   1050e:	b570      	push	{r4, r5, r6, lr}
   10510:	4605      	mov	r5, r0
   10512:	f7ff fb81 	bl	fc18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   10516:	b9c8      	cbnz	r0, 1054c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59a>
   10518:	2100      	movs	r1, #0
   1051a:	4628      	mov	r0, r5
   1051c:	f7ff fe0a 	bl	10134 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
   10520:	4604      	mov	r4, r0
   10522:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   10526:	42a0      	cmp	r0, r4
   10528:	d20e      	bcs.n	10548 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
   1052a:	1a20      	subs	r0, r4, r0
   1052c:	2867      	cmp	r0, #103	; 0x67
   1052e:	d200      	bcs.n	10532 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x580>
   10530:	2067      	movs	r0, #103	; 0x67
   10532:	2103      	movs	r1, #3
   10534:	f7fa fb46 	bl	abc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   10538:	b130      	cbz	r0, 10548 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
   1053a:	4628      	mov	r0, r5
   1053c:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
   10540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10544:	f7ff bb3f 	b.w	fbc6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   10548:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
   1054c:	4628      	mov	r0, r5
   1054e:	f7f4 f92f 	bl	47b0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
   10552:	2800      	cmp	r0, #0
   10554:	d004      	beq.n	10560 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ae>
   10556:	f240 21bd 	movw	r1, #701	; 0x2bd
   1055a:	2030      	movs	r0, #48	; 0x30
   1055c:	f7f1 fa28 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10560:	bd70      	pop	{r4, r5, r6, pc}
   10562:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10566:	f001 0307 	and.w	r3, r1, #7
   1056a:	7802      	ldrb	r2, [r0, #0]
   1056c:	2101      	movs	r1, #1
   1056e:	4099      	lsls	r1, r3
   10570:	438a      	bics	r2, r1
   10572:	7002      	strb	r2, [r0, #0]
   10574:	4770      	bx	lr

00010576 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   10576:	b510      	push	{r4, lr}
   10578:	460c      	mov	r4, r1
   1057a:	f7f1 fe69 	bl	2250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   1057e:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
   10582:	2820      	cmp	r0, #32
   10584:	d00c      	beq.n	105a0 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
   10586:	f7fb fb3b 	bl	bc00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   1058a:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
   1058e:	f7fb fb15 	bl	bbbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   10592:	2800      	cmp	r0, #0
   10594:	d104      	bne.n	105a0 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
   10596:	f640 4129 	movw	r1, #3113	; 0xc29
   1059a:	2031      	movs	r0, #49	; 0x31
   1059c:	f7f1 fa08 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105a0:	bd10      	pop	{r4, pc}

000105a2 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
   105a2:	2000      	movs	r0, #0
   105a4:	4770      	bx	lr

000105a6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
   105a6:	f7f2 bae7 	b.w	2b78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>

000105aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   105aa:	2100      	movs	r1, #0
   105ac:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
   105b0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   105b4:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
   105b8:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
   105bc:	b109      	cbz	r1, 105c2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
   105be:	2102      	movs	r1, #2
   105c0:	e000      	b.n	105c4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   105c2:	2103      	movs	r1, #3
   105c4:	f7f4 bfea 	b.w	559c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   105c8:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
   105cc:	28fe      	cmp	r0, #254	; 0xfe
   105ce:	d001      	beq.n	105d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
   105d0:	2001      	movs	r0, #1
   105d2:	4770      	bx	lr
   105d4:	2000      	movs	r0, #0
   105d6:	4770      	bx	lr
   105d8:	b510      	push	{r4, lr}
   105da:	2801      	cmp	r0, #1
   105dc:	d006      	beq.n	105ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   105de:	2802      	cmp	r0, #2
   105e0:	d004      	beq.n	105ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   105e2:	f240 21d7 	movw	r1, #727	; 0x2d7
   105e6:	2006      	movs	r0, #6
   105e8:	f7f1 f9e2 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105ec:	bd10      	pop	{r4, pc}
   105ee:	2801      	cmp	r0, #1
   105f0:	d002      	beq.n	105f8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
   105f2:	2802      	cmp	r0, #2
   105f4:	d105      	bne.n	10602 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   105f6:	e002      	b.n	105fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
   105f8:	2901      	cmp	r1, #1
   105fa:	d004      	beq.n	10606 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   105fc:	e001      	b.n	10602 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   105fe:	2902      	cmp	r1, #2
   10600:	d001      	beq.n	10606 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   10602:	2000      	movs	r0, #0
   10604:	4770      	bx	lr
   10606:	2001      	movs	r0, #1
   10608:	4770      	bx	lr
   1060a:	1a40      	subs	r0, r0, r1
   1060c:	b200      	sxth	r0, r0
   1060e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   10612:	4288      	cmp	r0, r1
   10614:	dc01      	bgt.n	1061a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
   10616:	2800      	cmp	r0, #0
   10618:	dc01      	bgt.n	1061e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
   1061a:	2001      	movs	r0, #1
   1061c:	4770      	bx	lr
   1061e:	2000      	movs	r0, #0
   10620:	4770      	bx	lr
   10622:	6840      	ldr	r0, [r0, #4]
   10624:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   10628:	2912      	cmp	r1, #18
   1062a:	d001      	beq.n	10630 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
   1062c:	2002      	movs	r0, #2
   1062e:	4770      	bx	lr
   10630:	2113      	movs	r1, #19
   10632:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   10636:	2000      	movs	r0, #0
   10638:	4770      	bx	lr
   1063a:	b510      	push	{r4, lr}
   1063c:	6843      	ldr	r3, [r0, #4]
   1063e:	4604      	mov	r4, r0
   10640:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
   10644:	2808      	cmp	r0, #8
   10646:	d20d      	bcs.n	10664 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xba>
   10648:	f500 7210 	add.w	r2, r0, #576	; 0x240
   1064c:	f1c0 0008 	rsb	r0, r0, #8
   10650:	b2c1      	uxtb	r1, r0
   10652:	1898      	adds	r0, r3, r2
   10654:	f7f1 fa4e 	bl	1af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   10658:	6861      	ldr	r1, [r4, #4]
   1065a:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
   1065e:	4410      	add	r0, r2
   10660:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
   10664:	6862      	ldr	r2, [r4, #4]
   10666:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
   1066a:	3908      	subs	r1, #8
   1066c:	2904      	cmp	r1, #4
   1066e:	d20d      	bcs.n	1068c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe2>
   10670:	f501 708e 	add.w	r0, r1, #284	; 0x11c
   10674:	f1c1 0104 	rsb	r1, r1, #4
   10678:	b2c9      	uxtb	r1, r1
   1067a:	4410      	add	r0, r2
   1067c:	f7f1 fa3a 	bl	1af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   10680:	6861      	ldr	r1, [r4, #4]
   10682:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
   10686:	4410      	add	r0, r2
   10688:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
   1068c:	6860      	ldr	r0, [r4, #4]
   1068e:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
   10692:	290c      	cmp	r1, #12
   10694:	d30f      	bcc.n	106b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10c>
   10696:	d005      	beq.n	106a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xfa>
   10698:	f640 01c2 	movw	r1, #2242	; 0x8c2
   1069c:	f04f 0031 	mov.w	r0, #49	; 0x31
   106a0:	f7f1 f986 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   106a4:	2100      	movs	r1, #0
   106a6:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
   106aa:	2101      	movs	r1, #1
   106ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   106b0:	2004      	movs	r0, #4
   106b2:	f7f6 bb57 	b.w	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   106b6:	bd10      	pop	{r4, pc}
   106b8:	6842      	ldr	r2, [r0, #4]
   106ba:	2131      	movs	r1, #49	; 0x31
   106bc:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
   106c0:	6840      	ldr	r0, [r0, #4]
   106c2:	2100      	movs	r1, #0
   106c4:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
   106c8:	4770      	bx	lr
   106ca:	b510      	push	{r4, lr}
   106cc:	6841      	ldr	r1, [r0, #4]
   106ce:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
   106d2:	2a15      	cmp	r2, #21
   106d4:	d004      	beq.n	106e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
   106d6:	f240 7183 	movw	r1, #1923	; 0x783
   106da:	2031      	movs	r0, #49	; 0x31
   106dc:	f7f1 f968 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   106e0:	2201      	movs	r2, #1
   106e2:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
   106e6:	6840      	ldr	r0, [r0, #4]
   106e8:	2116      	movs	r1, #22
   106ea:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   106ee:	bd10      	pop	{r4, pc}
   106f0:	f7ff b8e1 	b.w	f8b6 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
   106f4:	b510      	push	{r4, lr}
   106f6:	6841      	ldr	r1, [r0, #4]
   106f8:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
   106fc:	2a11      	cmp	r2, #17
   106fe:	d004      	beq.n	1070a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x160>
   10700:	f240 717b 	movw	r1, #1915	; 0x77b
   10704:	2031      	movs	r0, #49	; 0x31
   10706:	f7f1 f953 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1070a:	2201      	movs	r2, #1
   1070c:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
   10710:	6840      	ldr	r0, [r0, #4]
   10712:	2112      	movs	r1, #18
   10714:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   10718:	bd10      	pop	{r4, pc}
   1071a:	b510      	push	{r4, lr}
   1071c:	6841      	ldr	r1, [r0, #4]
   1071e:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
   10722:	2822      	cmp	r0, #34	; 0x22
   10724:	d005      	beq.n	10732 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
   10726:	b120      	cbz	r0, 10732 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
   10728:	f240 71e7 	movw	r1, #2023	; 0x7e7
   1072c:	2031      	movs	r0, #49	; 0x31
   1072e:	f7f1 f93f 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10732:	2023      	movs	r0, #35	; 0x23
   10734:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
   10738:	bd10      	pop	{r4, pc}
   1073a:	b510      	push	{r4, lr}
   1073c:	6840      	ldr	r0, [r0, #4]
   1073e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   10742:	2916      	cmp	r1, #22
   10744:	d004      	beq.n	10750 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a6>
   10746:	f44f 61f2 	mov.w	r1, #1936	; 0x790
   1074a:	2031      	movs	r0, #49	; 0x31
   1074c:	f7f1 f930 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10750:	211a      	movs	r1, #26
   10752:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   10756:	bd10      	pop	{r4, pc}
   10758:	f7ff b89b 	b.w	f892 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
   1075c:	b510      	push	{r4, lr}
   1075e:	6840      	ldr	r0, [r0, #4]
   10760:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   10764:	2916      	cmp	r1, #22
   10766:	d004      	beq.n	10772 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1c8>
   10768:	f240 718a 	movw	r1, #1930	; 0x78a
   1076c:	2031      	movs	r0, #49	; 0x31
   1076e:	f7f1 f91f 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10772:	2118      	movs	r1, #24
   10774:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   10778:	bd10      	pop	{r4, pc}
   1077a:	f7ff b921 	b.w	f9c0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
   1077e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10782:	f001 0107 	and.w	r1, r1, #7
   10786:	7800      	ldrb	r0, [r0, #0]
   10788:	40c8      	lsrs	r0, r1
   1078a:	f000 0001 	and.w	r0, r0, #1
   1078e:	4770      	bx	lr

00010790 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
   10790:	b510      	push	{r4, lr}
   10792:	2801      	cmp	r0, #1
   10794:	d006      	beq.n	107a4 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
   10796:	2802      	cmp	r0, #2
   10798:	d006      	beq.n	107a8 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
   1079a:	f240 2175 	movw	r1, #629	; 0x275
   1079e:	2078      	movs	r0, #120	; 0x78
   107a0:	f7f1 f906 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107a4:	2000      	movs	r0, #0
   107a6:	bd10      	pop	{r4, pc}
   107a8:	2001      	movs	r0, #1
   107aa:	bd10      	pop	{r4, pc}

000107ac <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
   107ac:	207f      	movs	r0, #127	; 0x7f
   107ae:	f000 b88c 	b.w	108ca <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

000107b2 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
   107b2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   107b6:	f000 b888 	b.w	108ca <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

000107ba <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
   107ba:	b510      	push	{r4, lr}
   107bc:	4604      	mov	r4, r0
   107be:	f7f7 fe4f 	bl	8460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   107c2:	1e64      	subs	r4, r4, #1
   107c4:	b2e2      	uxtb	r2, r4
   107c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107ca:	f000 b85b 	b.w	10884 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>

000107ce <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
   107ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   107d2:	4607      	mov	r7, r0
   107d4:	461e      	mov	r6, r3
   107d6:	4690      	mov	r8, r2
   107d8:	460c      	mov	r4, r1
   107da:	4608      	mov	r0, r1
   107dc:	f7ff ffed 	bl	107ba <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
   107e0:	b1e8      	cbz	r0, 1081e <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
   107e2:	687d      	ldr	r5, [r7, #4]
   107e4:	2121      	movs	r1, #33	; 0x21
   107e6:	f105 00ec 	add.w	r0, r5, #236	; 0xec
   107ea:	3580      	adds	r5, #128	; 0x80
   107ec:	f7ff ffc7 	bl	1077e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d4>
   107f0:	b1b8      	cbz	r0, 10822 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
   107f2:	1e64      	subs	r4, r4, #1
   107f4:	6f29      	ldr	r1, [r5, #112]	; 0x70
   107f6:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   107f8:	b2e2      	uxtb	r2, r4
   107fa:	f000 f843 	bl	10884 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
   107fe:	b180      	cbz	r0, 10822 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
   10800:	6878      	ldr	r0, [r7, #4]
   10802:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
   10806:	f88d 1000 	strb.w	r1, [sp]
   1080a:	9900      	ldr	r1, [sp, #0]
   1080c:	9100      	str	r1, [sp, #0]
   1080e:	f89d 1000 	ldrb.w	r1, [sp]
   10812:	f200 1047 	addw	r0, r0, #327	; 0x147
   10816:	b131      	cbz	r1, 10826 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
   10818:	203a      	movs	r0, #58	; 0x3a
   1081a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1081e:	2011      	movs	r0, #17
   10820:	e7fb      	b.n	1081a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
   10822:	201a      	movs	r0, #26
   10824:	e7f9      	b.n	1081a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
   10826:	1c81      	adds	r1, r0, #2
   10828:	700e      	strb	r6, [r1, #0]
   1082a:	2101      	movs	r1, #1
   1082c:	40a1      	lsls	r1, r4
   1082e:	7001      	strb	r1, [r0, #0]
   10830:	f880 8001 	strb.w	r8, [r0, #1]
   10834:	2000      	movs	r0, #0
   10836:	e7f0      	b.n	1081a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

00010838 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
   10838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1083c:	460d      	mov	r5, r1
   1083e:	4606      	mov	r6, r0
   10840:	f7ff ffb4 	bl	107ac <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
   10844:	4607      	mov	r7, r0
   10846:	f7ff ffb4 	bl	107b2 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
   1084a:	2400      	movs	r4, #0
   1084c:	4285      	cmp	r5, r0
   1084e:	d100      	bne.n	10852 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
   10850:	2401      	movs	r4, #1
   10852:	42bd      	cmp	r5, r7
   10854:	d101      	bne.n	1085a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
   10856:	f044 0402 	orr.w	r4, r4, #2
   1085a:	f000 f826 	bl	108aa <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x72>
   1085e:	2200      	movs	r2, #0
   10860:	4601      	mov	r1, r0
   10862:	2301      	movs	r3, #1
   10864:	fa03 f002 	lsl.w	r0, r3, r2
   10868:	4208      	tst	r0, r1
   1086a:	d005      	beq.n	10878 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
   1086c:	eb06 0042 	add.w	r0, r6, r2, lsl #1
   10870:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
   10874:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
   10878:	1c52      	adds	r2, r2, #1
   1087a:	b2d2      	uxtb	r2, r2
   1087c:	2a02      	cmp	r2, #2
   1087e:	d3f1      	bcc.n	10864 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
   10880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10884:	b510      	push	{r4, lr}
   10886:	4614      	mov	r4, r2
   10888:	4602      	mov	r2, r0
   1088a:	2000      	movs	r0, #0
   1088c:	4603      	mov	r3, r0
   1088e:	2c02      	cmp	r4, #2
   10890:	d205      	bcs.n	1089e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>
   10892:	4610      	mov	r0, r2
   10894:	f000 f810 	bl	108b8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
   10898:	2101      	movs	r1, #1
   1089a:	40a1      	lsls	r1, r4
   1089c:	b2cb      	uxtb	r3, r1
   1089e:	4203      	tst	r3, r0
   108a0:	d001      	beq.n	108a6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6e>
   108a2:	2001      	movs	r0, #1
   108a4:	bd10      	pop	{r4, pc}
   108a6:	2000      	movs	r0, #0
   108a8:	bd10      	pop	{r4, pc}
   108aa:	b510      	push	{r4, lr}
   108ac:	f7f7 fdd8 	bl	8460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   108b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   108b4:	f000 b800 	b.w	108b8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
   108b8:	0a00      	lsrs	r0, r0, #8
   108ba:	2201      	movs	r2, #1
   108bc:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   108c0:	07c0      	lsls	r0, r0, #31
   108c2:	d000      	beq.n	108c6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x8e>
   108c4:	2203      	movs	r2, #3
   108c6:	4610      	mov	r0, r2
   108c8:	4770      	bx	lr
   108ca:	b508      	push	{r3, lr}
   108cc:	2301      	movs	r3, #1
   108ce:	f640 1288 	movw	r2, #2440	; 0x988
   108d2:	4669      	mov	r1, sp
   108d4:	f7fc ff8e 	bl	d7f4 <mpsl_fem_tx_power_split>
   108d8:	bd08      	pop	{r3, pc}
   108da:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   108de:	f001 0107 	and.w	r1, r1, #7
   108e2:	7800      	ldrb	r0, [r0, #0]
   108e4:	40c8      	lsrs	r0, r1
   108e6:	f000 0001 	and.w	r0, r0, #1
   108ea:	4770      	bx	lr
   108ec:	b118      	cbz	r0, 108f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
   108ee:	2802      	cmp	r0, #2
   108f0:	d001      	beq.n	108f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
   108f2:	2001      	movs	r0, #1
   108f4:	4770      	bx	lr
   108f6:	2000      	movs	r0, #0
   108f8:	4770      	bx	lr

000108fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   108fa:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   108fc:	7881      	ldrb	r1, [r0, #2]
   108fe:	2500      	movs	r5, #0
   10900:	4604      	mov	r4, r0
   10902:	291a      	cmp	r1, #26
   10904:	d024      	beq.n	10950 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   10906:	dc0e      	bgt.n	10926 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
   10908:	2916      	cmp	r1, #22
   1090a:	d22b      	bcs.n	10964 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   1090c:	e8df f001 	tbb	[pc, r1]
   10910:	2a2a2a2a 	.word	0x2a2a2a2a
   10914:	2a2a202a 	.word	0x2a2a202a
   10918:	2a2a2a2a 	.word	0x2a2a2a2a
   1091c:	2a2a2a2a 	.word	0x2a2a2a2a
   10920:	202a2a2a 	.word	0x202a2a2a
   10924:	2020      	.short	0x2020
   10926:	292a      	cmp	r1, #42	; 0x2a
   10928:	d01c      	beq.n	10964 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   1092a:	dc0b      	bgt.n	10944 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
   1092c:	f1a1 011e 	sub.w	r1, r1, #30
   10930:	290c      	cmp	r1, #12
   10932:	d217      	bcs.n	10964 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10934:	e8df f001 	tbb	[pc, r1]
   10938:	16161616 	.word	0x16161616
   1093c:	16161616 	.word	0x16161616
   10940:	0c161616 	.word	0x0c161616
   10944:	393a      	subs	r1, #58	; 0x3a
   10946:	2902      	cmp	r1, #2
   10948:	d20c      	bcs.n	10964 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   1094a:	e8df f001 	tbb	[pc, r1]
   1094e:	010b      	.short	0x010b
   10950:	8820      	ldrh	r0, [r4, #0]
   10952:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   10956:	d205      	bcs.n	10964 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10958:	4669      	mov	r1, sp
   1095a:	f7fe f990 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1095e:	b118      	cbz	r0, 10968 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
   10960:	2002      	movs	r0, #2
   10962:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10964:	2012      	movs	r0, #18
   10966:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10968:	9901      	ldr	r1, [sp, #4]
   1096a:	4668      	mov	r0, sp
   1096c:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
   10970:	f88d 2008 	strb.w	r2, [sp, #8]
   10974:	9a02      	ldr	r2, [sp, #8]
   10976:	9202      	str	r2, [sp, #8]
   10978:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1097c:	f501 7198 	add.w	r1, r1, #304	; 0x130
   10980:	b10a      	cbz	r2, 10986 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
   10982:	200c      	movs	r0, #12
   10984:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10986:	78a2      	ldrb	r2, [r4, #2]
   10988:	704a      	strb	r2, [r1, #1]
   1098a:	22ff      	movs	r2, #255	; 0xff
   1098c:	700a      	strb	r2, [r1, #0]
   1098e:	f7fe fd09 	bl	f3a4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10992:	4628      	mov	r0, r5
   10994:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010996 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   10996:	b510      	push	{r4, lr}
   10998:	4604      	mov	r4, r0
   1099a:	7800      	ldrb	r0, [r0, #0]
   1099c:	b108      	cbz	r0, 109a2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0xc>
   1099e:	2801      	cmp	r0, #1
   109a0:	d116      	bne.n	109d0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3a>
   109a2:	f000 fe0c 	bl	115be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
   109a6:	b120      	cbz	r0, 109b2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x1c>
   109a8:	f7f2 fd34 	bl	3414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   109ac:	b108      	cbz	r0, 109b2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x1c>
   109ae:	200c      	movs	r0, #12
   109b0:	bd10      	pop	{r4, pc}
   109b2:	7820      	ldrb	r0, [r4, #0]
   109b4:	f7ff ff9a 	bl	108ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
   109b8:	2801      	cmp	r0, #1
   109ba:	d10b      	bne.n	109d4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3e>
   109bc:	7820      	ldrb	r0, [r4, #0]
   109be:	f7ff ff95 	bl	108ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
   109c2:	2801      	cmp	r0, #1
   109c4:	d104      	bne.n	109d0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3a>
   109c6:	79a0      	ldrb	r0, [r4, #6]
   109c8:	2103      	movs	r1, #3
   109ca:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
   109ce:	d001      	beq.n	109d4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3e>
   109d0:	2012      	movs	r0, #18
   109d2:	bd10      	pop	{r4, pc}
   109d4:	7820      	ldrb	r0, [r4, #0]
   109d6:	f7ff ff89 	bl	108ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
   109da:	1de2      	adds	r2, r4, #7
   109dc:	f104 0317 	add.w	r3, r4, #23
   109e0:	1c61      	adds	r1, r4, #1
   109e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   109e6:	f7f2 bd35 	b.w	3454 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

000109ea <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   109ea:	b510      	push	{r4, lr}
   109ec:	4604      	mov	r4, r0
   109ee:	f7f7 fc61 	bl	82b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
   109f2:	b108      	cbz	r0, 109f8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   109f4:	200c      	movs	r0, #12
   109f6:	bd10      	pop	{r4, pc}
   109f8:	7820      	ldrb	r0, [r4, #0]
   109fa:	b118      	cbz	r0, 10a04 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   109fc:	2801      	cmp	r0, #1
   109fe:	d001      	beq.n	10a04 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   10a00:	2012      	movs	r0, #18
   10a02:	bd10      	pop	{r4, pc}
   10a04:	f7ff ff72 	bl	108ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
   10a08:	1c61      	adds	r1, r4, #1
   10a0a:	f7f3 fcdd 	bl	43c8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
   10a0e:	b108      	cbz	r0, 10a14 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
   10a10:	2000      	movs	r0, #0
   10a12:	bd10      	pop	{r4, pc}
   10a14:	2007      	movs	r0, #7
   10a16:	bd10      	pop	{r4, pc}

00010a18 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   10a18:	b510      	push	{r4, lr}
   10a1a:	f000 fdd0 	bl	115be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
   10a1e:	b120      	cbz	r0, 10a2a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   10a20:	f7f2 fcf8 	bl	3414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   10a24:	b108      	cbz	r0, 10a2a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   10a26:	200c      	movs	r0, #12
   10a28:	bd10      	pop	{r4, pc}
   10a2a:	f7f2 fd67 	bl	34fc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   10a2e:	2000      	movs	r0, #0
   10a30:	bd10      	pop	{r4, pc}

00010a32 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   10a32:	b510      	push	{r4, lr}
   10a34:	f7f7 fc3e 	bl	82b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
   10a38:	b108      	cbz	r0, 10a3e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   10a3a:	200c      	movs	r0, #12
   10a3c:	bd10      	pop	{r4, pc}
   10a3e:	f7f3 fd21 	bl	4484 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
   10a42:	2000      	movs	r0, #0
   10a44:	f7f2 fd8c 	bl	3560 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   10a48:	2000      	movs	r0, #0
   10a4a:	bd10      	pop	{r4, pc}

00010a4c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   10a4c:	b510      	push	{r4, lr}
   10a4e:	460b      	mov	r3, r1
   10a50:	2201      	movs	r2, #1
   10a52:	f100 0110 	add.w	r1, r0, #16
   10a56:	f7fe f8f4 	bl	ec42 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   10a5a:	2000      	movs	r0, #0
   10a5c:	bd10      	pop	{r4, pc}

00010a5e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   10a5e:	b510      	push	{r4, lr}
   10a60:	8800      	ldrh	r0, [r0, #0]
   10a62:	2100      	movs	r1, #0
   10a64:	f7f1 fad2 	bl	200c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10a68:	b118      	cbz	r0, 10a72 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   10a6a:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
   10a6e:	b111      	cbz	r1, 10a76 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   10a70:	e007      	b.n	10a82 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   10a72:	2002      	movs	r0, #2
   10a74:	bd10      	pop	{r4, pc}
   10a76:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   10a7a:	2915      	cmp	r1, #21
   10a7c:	d003      	beq.n	10a86 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   10a7e:	2916      	cmp	r1, #22
   10a80:	d001      	beq.n	10a86 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   10a82:	200c      	movs	r0, #12
   10a84:	bd10      	pop	{r4, pc}
   10a86:	2102      	movs	r1, #2
   10a88:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
   10a8c:	2000      	movs	r0, #0
   10a8e:	bd10      	pop	{r4, pc}

00010a90 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   10a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a92:	4605      	mov	r5, r0
   10a94:	8800      	ldrh	r0, [r0, #0]
   10a96:	2100      	movs	r1, #0
   10a98:	f7f1 fab8 	bl	200c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10a9c:	0004      	movs	r4, r0
   10a9e:	d003      	beq.n	10aa8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   10aa0:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
   10aa4:	b110      	cbz	r0, 10aac <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   10aa6:	e011      	b.n	10acc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   10aa8:	2002      	movs	r0, #2
   10aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10aac:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
   10ab0:	2815      	cmp	r0, #21
   10ab2:	d001      	beq.n	10ab8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   10ab4:	2816      	cmp	r0, #22
   10ab6:	d109      	bne.n	10acc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   10ab8:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
   10abc:	f88d 0000 	strb.w	r0, [sp]
   10ac0:	9800      	ldr	r0, [sp, #0]
   10ac2:	9000      	str	r0, [sp, #0]
   10ac4:	f89d 0000 	ldrb.w	r0, [sp]
   10ac8:	2601      	movs	r6, #1
   10aca:	b108      	cbz	r0, 10ad0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
   10acc:	200c      	movs	r0, #12
   10ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ad0:	2210      	movs	r2, #16
   10ad2:	1ca9      	adds	r1, r5, #2
   10ad4:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
   10ad8:	f001 f9d5 	bl	11e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10adc:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
   10ae0:	2000      	movs	r0, #0
   10ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010ae4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   10ae4:	b510      	push	{r4, lr}
   10ae6:	2108      	movs	r1, #8
   10ae8:	f7f1 f812 	bl	1b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   10aec:	2000      	movs	r0, #0
   10aee:	bd10      	pop	{r4, pc}

00010af0 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   10af0:	b510      	push	{r4, lr}
   10af2:	4604      	mov	r4, r0
   10af4:	f7f7 fabc 	bl	8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
   10af8:	f7ff f898 	bl	fc2c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   10afc:	f7f2 fe9c 	bl	3838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   10b00:	7020      	strb	r0, [r4, #0]
   10b02:	2000      	movs	r0, #0
   10b04:	bd10      	pop	{r4, pc}

00010b06 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   10b06:	21fb      	movs	r1, #251	; 0xfb
   10b08:	8001      	strh	r1, [r0, #0]
   10b0a:	f640 0248 	movw	r2, #2120	; 0x848
   10b0e:	8042      	strh	r2, [r0, #2]
   10b10:	8081      	strh	r1, [r0, #4]
   10b12:	80c2      	strh	r2, [r0, #6]
   10b14:	2000      	movs	r0, #0
   10b16:	4770      	bx	lr

00010b18 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   10b18:	b51c      	push	{r2, r3, r4, lr}
   10b1a:	8800      	ldrh	r0, [r0, #0]
   10b1c:	4669      	mov	r1, sp
   10b1e:	f7fe f8ae 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10b22:	2800      	cmp	r0, #0
   10b24:	d10d      	bne.n	10b42 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
   10b26:	f89d 0000 	ldrb.w	r0, [sp]
   10b2a:	9c01      	ldr	r4, [sp, #4]
   10b2c:	2801      	cmp	r0, #1
   10b2e:	f504 7498 	add.w	r4, r4, #304	; 0x130
   10b32:	d103      	bne.n	10b3c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
   10b34:	9801      	ldr	r0, [sp, #4]
   10b36:	f000 fd2c 	bl	11592 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
   10b3a:	b118      	cbz	r0, 10b44 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
   10b3c:	7ce0      	ldrb	r0, [r4, #19]
   10b3e:	b118      	cbz	r0, 10b48 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
   10b40:	203a      	movs	r0, #58	; 0x3a
   10b42:	bd1c      	pop	{r2, r3, r4, pc}
   10b44:	2002      	movs	r0, #2
   10b46:	bd1c      	pop	{r2, r3, r4, pc}
   10b48:	2001      	movs	r0, #1
   10b4a:	74e0      	strb	r0, [r4, #19]
   10b4c:	2000      	movs	r0, #0
   10b4e:	bd1c      	pop	{r2, r3, r4, pc}

00010b50 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   10b50:	2108      	movs	r1, #8
   10b52:	7001      	strb	r1, [r0, #0]
   10b54:	2000      	movs	r0, #0
   10b56:	4770      	bx	lr

00010b58 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   10b58:	b510      	push	{r4, lr}
   10b5a:	4604      	mov	r4, r0
   10b5c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   10b60:	f000 fd5a 	bl	11618 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
   10b64:	f7f2 fe68 	bl	3838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   10b68:	7020      	strb	r0, [r4, #0]
   10b6a:	f000 fd0f 	bl	1158c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   10b6e:	f7f2 fe63 	bl	3838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   10b72:	7060      	strb	r0, [r4, #1]
   10b74:	2000      	movs	r0, #0
   10b76:	bd10      	pop	{r4, pc}

00010b78 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   10b78:	b510      	push	{r4, lr}
   10b7a:	4604      	mov	r4, r0
   10b7c:	f7f3 fc88 	bl	4490 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
   10b80:	7020      	strb	r0, [r4, #0]
   10b82:	2000      	movs	r0, #0
   10b84:	bd10      	pop	{r4, pc}

00010b86 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   10b86:	b510      	push	{r4, lr}
   10b88:	4604      	mov	r4, r0
   10b8a:	7800      	ldrb	r0, [r0, #0]
   10b8c:	b108      	cbz	r0, 10b92 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   10b8e:	2801      	cmp	r0, #1
   10b90:	d110      	bne.n	10bb4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   10b92:	f000 fd14 	bl	115be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
   10b96:	b120      	cbz	r0, 10ba2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   10b98:	f7f2 fc3c 	bl	3414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   10b9c:	b108      	cbz	r0, 10ba2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   10b9e:	200c      	movs	r0, #12
   10ba0:	bd10      	pop	{r4, pc}
   10ba2:	7820      	ldrb	r0, [r4, #0]
   10ba4:	f7ff fea2 	bl	108ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
   10ba8:	1c61      	adds	r1, r4, #1
   10baa:	f7fe f83b 	bl	ec24 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   10bae:	b108      	cbz	r0, 10bb4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   10bb0:	2000      	movs	r0, #0
   10bb2:	bd10      	pop	{r4, pc}
   10bb4:	2012      	movs	r0, #18
   10bb6:	bd10      	pop	{r4, pc}

00010bb8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   10bb8:	b510      	push	{r4, lr}
   10bba:	4604      	mov	r4, r0
   10bbc:	f7f7 fb7a 	bl	82b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
   10bc0:	b108      	cbz	r0, 10bc6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   10bc2:	200c      	movs	r0, #12
   10bc4:	bd10      	pop	{r4, pc}
   10bc6:	7820      	ldrb	r0, [r4, #0]
   10bc8:	b108      	cbz	r0, 10bce <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   10bca:	2801      	cmp	r0, #1
   10bcc:	d107      	bne.n	10bde <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10bce:	f7ff fe8d 	bl	108ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
   10bd2:	1c61      	adds	r1, r4, #1
   10bd4:	f7f3 fc36 	bl	4444 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
   10bd8:	b108      	cbz	r0, 10bde <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10bda:	2000      	movs	r0, #0
   10bdc:	bd10      	pop	{r4, pc}
   10bde:	2012      	movs	r0, #18
   10be0:	bd10      	pop	{r4, pc}

00010be2 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   10be2:	b510      	push	{r4, lr}
   10be4:	4604      	mov	r4, r0
   10be6:	f000 fcea 	bl	115be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
   10bea:	b108      	cbz	r0, 10bf0 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   10bec:	200c      	movs	r0, #12
   10bee:	bd10      	pop	{r4, pc}
   10bf0:	7820      	ldrb	r0, [r4, #0]
   10bf2:	b100      	cbz	r0, 10bf6 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0x14>
   10bf4:	2001      	movs	r0, #1
   10bf6:	f7f2 fc07 	bl	3408 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   10bfa:	2000      	movs	r0, #0
   10bfc:	bd10      	pop	{r4, pc}

00010bfe <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   10bfe:	b51c      	push	{r2, r3, r4, lr}
   10c00:	4604      	mov	r4, r0
   10c02:	f7f7 fa35 	bl	8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
   10c06:	2000      	movs	r0, #0
   10c08:	f88d 0002 	strb.w	r0, [sp, #2]
   10c0c:	2103      	movs	r1, #3
   10c0e:	f88d 1001 	strb.w	r1, [sp, #1]
   10c12:	f814 1b01 	ldrb.w	r1, [r4], #1
   10c16:	f88d 1003 	strb.w	r1, [sp, #3]
   10c1a:	f88d 0000 	strb.w	r0, [sp]
   10c1e:	4668      	mov	r0, sp
   10c20:	9401      	str	r4, [sp, #4]
   10c22:	f000 f9c1 	bl	10fa8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   10c26:	bd1c      	pop	{r2, r3, r4, pc}

00010c28 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   10c28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10c2a:	4605      	mov	r5, r0
   10c2c:	f7f7 fa20 	bl	8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
   10c30:	4606      	mov	r6, r0
   10c32:	7828      	ldrb	r0, [r5, #0]
   10c34:	2400      	movs	r4, #0
   10c36:	b160      	cbz	r0, 10c52 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   10c38:	f88d 4000 	strb.w	r4, [sp]
   10c3c:	2001      	movs	r0, #1
   10c3e:	f10d 0101 	add.w	r1, sp, #1
   10c42:	f7f1 fe19 	bl	2878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10c46:	b120      	cbz	r0, 10c52 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   10c48:	4668      	mov	r0, sp
   10c4a:	f000 f897 	bl	10d7c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   10c4e:	2800      	cmp	r0, #0
   10c50:	d112      	bne.n	10c78 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   10c52:	f88d 400c 	strb.w	r4, [sp, #12]
   10c56:	4630      	mov	r0, r6
   10c58:	f7fe ffde 	bl	fc18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   10c5c:	b118      	cbz	r0, 10c66 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   10c5e:	2080      	movs	r0, #128	; 0x80
   10c60:	f8ad 000d 	strh.w	r0, [sp, #13]
   10c64:	e001      	b.n	10c6a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   10c66:	f8ad 400d 	strh.w	r4, [sp, #13]
   10c6a:	f88d 400f 	strb.w	r4, [sp, #15]
   10c6e:	7828      	ldrb	r0, [r5, #0]
   10c70:	2801      	cmp	r0, #1
   10c72:	d003      	beq.n	10c7c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   10c74:	b138      	cbz	r0, 10c86 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   10c76:	2012      	movs	r0, #18
   10c78:	b004      	add	sp, #16
   10c7a:	bd70      	pop	{r4, r5, r6, pc}
   10c7c:	a903      	add	r1, sp, #12
   10c7e:	4630      	mov	r0, r6
   10c80:	f7f7 fa12 	bl	80a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   10c84:	e7f8      	b.n	10c78 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   10c86:	4630      	mov	r0, r6
   10c88:	f000 fca0 	bl	115cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2c8>
   10c8c:	e7f4      	b.n	10c78 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00010c8e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   10c8e:	b530      	push	{r4, r5, lr}
   10c90:	b08b      	sub	sp, #44	; 0x2c
   10c92:	4604      	mov	r4, r0
   10c94:	f7f7 f9ec 	bl	8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
   10c98:	4602      	mov	r2, r0
   10c9a:	7920      	ldrb	r0, [r4, #4]
   10c9c:	2804      	cmp	r0, #4
   10c9e:	d803      	bhi.n	10ca8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   10ca0:	8860      	ldrh	r0, [r4, #2]
   10ca2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   10ca6:	d902      	bls.n	10cae <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   10ca8:	2012      	movs	r0, #18
   10caa:	b00b      	add	sp, #44	; 0x2c
   10cac:	bd30      	pop	{r4, r5, pc}
   10cae:	2500      	movs	r5, #0
   10cb0:	f88d 5004 	strb.w	r5, [sp, #4]
   10cb4:	7921      	ldrb	r1, [r4, #4]
   10cb6:	9500      	str	r5, [sp, #0]
   10cb8:	f89d 0000 	ldrb.w	r0, [sp]
   10cbc:	2905      	cmp	r1, #5
   10cbe:	f040 0010 	orr.w	r0, r0, #16
   10cc2:	f88d 0000 	strb.w	r0, [sp]
   10cc6:	d254      	bcs.n	10d72 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   10cc8:	e8df f001 	tbb	[pc, r1]
   10ccc:	11050803 	.word	0x11050803
   10cd0:	000b      	.short	0x000b
   10cd2:	f040 0001 	orr.w	r0, r0, #1
   10cd6:	f040 0002 	orr.w	r0, r0, #2
   10cda:	e006      	b.n	10cea <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   10cdc:	f040 0009 	orr.w	r0, r0, #9
   10ce0:	e001      	b.n	10ce6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   10ce2:	f040 0001 	orr.w	r0, r0, #1
   10ce6:	f040 0004 	orr.w	r0, r0, #4
   10cea:	f88d 0000 	strb.w	r0, [sp]
   10cee:	f8bd 0000 	ldrh.w	r0, [sp]
   10cf2:	9000      	str	r0, [sp, #0]
   10cf4:	f8bd 0000 	ldrh.w	r0, [sp]
   10cf8:	f8ad 0005 	strh.w	r0, [sp, #5]
   10cfc:	8821      	ldrh	r1, [r4, #0]
   10cfe:	f8dd 0006 	ldr.w	r0, [sp, #6]
   10d02:	f361 201f 	bfi	r0, r1, #8, #24
   10d06:	f8cd 0006 	str.w	r0, [sp, #6]
   10d0a:	8861      	ldrh	r1, [r4, #2]
   10d0c:	f8dd 0009 	ldr.w	r0, [sp, #9]
   10d10:	f361 201f 	bfi	r0, r1, #8, #24
   10d14:	f8cd 0009 	str.w	r0, [sp, #9]
   10d18:	7b60      	ldrb	r0, [r4, #13]
   10d1a:	f88d 000d 	strb.w	r0, [sp, #13]
   10d1e:	7960      	ldrb	r0, [r4, #5]
   10d20:	f88d 000e 	strb.w	r0, [sp, #14]
   10d24:	79a0      	ldrb	r0, [r4, #6]
   10d26:	f88d 000f 	strb.w	r0, [sp, #15]
   10d2a:	f8d4 0007 	ldr.w	r0, [r4, #7]
   10d2e:	9004      	str	r0, [sp, #16]
   10d30:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   10d34:	f8ad 0014 	strh.w	r0, [sp, #20]
   10d38:	7ba0      	ldrb	r0, [r4, #14]
   10d3a:	f88d 0016 	strb.w	r0, [sp, #22]
   10d3e:	207f      	movs	r0, #127	; 0x7f
   10d40:	f88d 0017 	strb.w	r0, [sp, #23]
   10d44:	2001      	movs	r0, #1
   10d46:	f88d 0018 	strb.w	r0, [sp, #24]
   10d4a:	f88d 5019 	strb.w	r5, [sp, #25]
   10d4e:	f88d 001a 	strb.w	r0, [sp, #26]
   10d52:	f88d 501b 	strb.w	r5, [sp, #27]
   10d56:	4610      	mov	r0, r2
   10d58:	f7fe ff7e 	bl	fc58 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   10d5c:	f88d 001c 	strb.w	r0, [sp, #28]
   10d60:	f88d 501d 	strb.w	r5, [sp, #29]
   10d64:	f88d 501e 	strb.w	r5, [sp, #30]
   10d68:	a909      	add	r1, sp, #36	; 0x24
   10d6a:	a801      	add	r0, sp, #4
   10d6c:	f7f6 ffb6 	bl	7cdc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   10d70:	e79b      	b.n	10caa <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   10d72:	f241 31a9 	movw	r1, #5033	; 0x13a9
   10d76:	2039      	movs	r0, #57	; 0x39
   10d78:	f7f0 fe1a 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010d7c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   10d7c:	b570      	push	{r4, r5, r6, lr}
   10d7e:	4604      	mov	r4, r0
   10d80:	7800      	ldrb	r0, [r0, #0]
   10d82:	2101      	movs	r1, #1
   10d84:	f7f1 f942 	bl	200c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10d88:	0005      	movs	r5, r0
   10d8a:	d007      	beq.n	10d9c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   10d8c:	f7ff f90e 	bl	ffac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10d90:	b160      	cbz	r0, 10dac <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10d92:	4628      	mov	r0, r5
   10d94:	f7fe ff46 	bl	fc24 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10d98:	b110      	cbz	r0, 10da0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   10d9a:	e005      	b.n	10da8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   10d9c:	2042      	movs	r0, #66	; 0x42
   10d9e:	bd70      	pop	{r4, r5, r6, pc}
   10da0:	4628      	mov	r0, r5
   10da2:	f7fe ff35 	bl	fc10 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10da6:	b108      	cbz	r0, 10dac <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10da8:	200c      	movs	r0, #12
   10daa:	bd70      	pop	{r4, r5, r6, pc}
   10dac:	1c61      	adds	r1, r4, #1
   10dae:	4628      	mov	r0, r5
   10db0:	f7fe ff4a 	bl	fc48 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   10db4:	2000      	movs	r0, #0
   10db6:	bd70      	pop	{r4, r5, r6, pc}

00010db8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   10db8:	b50e      	push	{r1, r2, r3, lr}
   10dba:	8882      	ldrh	r2, [r0, #4]
   10dbc:	f244 2390 	movw	r3, #17040	; 0x4290
   10dc0:	429a      	cmp	r2, r3
   10dc2:	d901      	bls.n	10dc8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   10dc4:	2012      	movs	r0, #18
   10dc6:	bd0e      	pop	{r1, r2, r3, pc}
   10dc8:	f640 0348 	movw	r3, #2120	; 0x848
   10dcc:	429a      	cmp	r2, r3
   10dce:	d300      	bcc.n	10dd2 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   10dd0:	461a      	mov	r2, r3
   10dd2:	8803      	ldrh	r3, [r0, #0]
   10dd4:	f8ad 3000 	strh.w	r3, [sp]
   10dd8:	8843      	ldrh	r3, [r0, #2]
   10dda:	f8ad 3002 	strh.w	r3, [sp, #2]
   10dde:	f8ad 2004 	strh.w	r2, [sp, #4]
   10de2:	8843      	ldrh	r3, [r0, #2]
   10de4:	f8ad 3006 	strh.w	r3, [sp, #6]
   10de8:	f8ad 2008 	strh.w	r2, [sp, #8]
   10dec:	8800      	ldrh	r0, [r0, #0]
   10dee:	8008      	strh	r0, [r1, #0]
   10df0:	4668      	mov	r0, sp
   10df2:	f7f7 f9db 	bl	81ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
   10df6:	bd0e      	pop	{r1, r2, r3, pc}

00010df8 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
   10df8:	b510      	push	{r4, lr}
   10dfa:	4604      	mov	r4, r0
   10dfc:	f7f7 f938 	bl	8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
   10e00:	7861      	ldrb	r1, [r4, #1]
   10e02:	f3c1 0240 	ubfx	r2, r1, #1, #1
   10e06:	f001 0101 	and.w	r1, r1, #1
   10e0a:	f7fe ff19 	bl	fc40 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
   10e0e:	2000      	movs	r0, #0
   10e10:	bd10      	pop	{r4, pc}

00010e12 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   10e12:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10e14:	4604      	mov	r4, r0
   10e16:	f10d 0007 	add.w	r0, sp, #7
   10e1a:	9000      	str	r0, [sp, #0]
   10e1c:	7922      	ldrb	r2, [r4, #4]
   10e1e:	78e1      	ldrb	r1, [r4, #3]
   10e20:	78a0      	ldrb	r0, [r4, #2]
   10e22:	f10d 0306 	add.w	r3, sp, #6
   10e26:	f000 fbff 	bl	11628 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x324>
   10e2a:	2800      	cmp	r0, #0
   10e2c:	d109      	bne.n	10e42 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   10e2e:	8820      	ldrh	r0, [r4, #0]
   10e30:	f8ad 0004 	strh.w	r0, [sp, #4]
   10e34:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   10e38:	f8ad 0008 	strh.w	r0, [sp, #8]
   10e3c:	a801      	add	r0, sp, #4
   10e3e:	f000 f96e 	bl	1111e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   10e42:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010e44 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   10e44:	b510      	push	{r4, lr}
   10e46:	4604      	mov	r4, r0
   10e48:	f000 fbb9 	bl	115be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
   10e4c:	b120      	cbz	r0, 10e58 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   10e4e:	f7f2 fae1 	bl	3414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   10e52:	b108      	cbz	r0, 10e58 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   10e54:	200c      	movs	r0, #12
   10e56:	bd10      	pop	{r4, pc}
   10e58:	7820      	ldrb	r0, [r4, #0]
   10e5a:	f7ff fd47 	bl	108ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
   10e5e:	79e2      	ldrb	r2, [r4, #7]
   10e60:	1c61      	adds	r1, r4, #1
   10e62:	f7f2 fa8b 	bl	337c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   10e66:	b108      	cbz	r0, 10e6c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   10e68:	2000      	movs	r0, #0
   10e6a:	bd10      	pop	{r4, pc}
   10e6c:	2002      	movs	r0, #2
   10e6e:	bd10      	pop	{r4, pc}

00010e70 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   10e70:	b510      	push	{r4, lr}
   10e72:	4604      	mov	r4, r0
   10e74:	2001      	movs	r0, #1
   10e76:	f000 fa67 	bl	11348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   10e7a:	b128      	cbz	r0, 10e88 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   10e7c:	4621      	mov	r1, r4
   10e7e:	2001      	movs	r0, #1
   10e80:	f7f1 fd12 	bl	28a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10e84:	2000      	movs	r0, #0
   10e86:	bd10      	pop	{r4, pc}
   10e88:	200c      	movs	r0, #12
   10e8a:	bd10      	pop	{r4, pc}

00010e8c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   10e8c:	b510      	push	{r4, lr}
   10e8e:	8800      	ldrh	r0, [r0, #0]
   10e90:	f7f2 fb4a 	bl	3528 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   10e94:	b108      	cbz	r0, 10e9a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   10e96:	2000      	movs	r0, #0
   10e98:	bd10      	pop	{r4, pc}
   10e9a:	2030      	movs	r0, #48	; 0x30
   10e9c:	bd10      	pop	{r4, pc}

00010e9e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   10e9e:	b51c      	push	{r2, r3, r4, lr}
   10ea0:	4604      	mov	r4, r0
   10ea2:	f7f7 f8e5 	bl	8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
   10ea6:	2000      	movs	r0, #0
   10ea8:	f88d 0000 	strb.w	r0, [sp]
   10eac:	f88d 0002 	strb.w	r0, [sp, #2]
   10eb0:	2003      	movs	r0, #3
   10eb2:	f88d 0001 	strb.w	r0, [sp, #1]
   10eb6:	f814 0b01 	ldrb.w	r0, [r4], #1
   10eba:	f88d 0003 	strb.w	r0, [sp, #3]
   10ebe:	4668      	mov	r0, sp
   10ec0:	9401      	str	r4, [sp, #4]
   10ec2:	f000 f8da 	bl	1107a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   10ec6:	bd1c      	pop	{r2, r3, r4, pc}

00010ec8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   10ec8:	b51c      	push	{r2, r3, r4, lr}
   10eca:	8801      	ldrh	r1, [r0, #0]
   10ecc:	f8ad 1000 	strh.w	r1, [sp]
   10ed0:	8841      	ldrh	r1, [r0, #2]
   10ed2:	f8ad 1002 	strh.w	r1, [sp, #2]
   10ed6:	8801      	ldrh	r1, [r0, #0]
   10ed8:	f8ad 1004 	strh.w	r1, [sp, #4]
   10edc:	8840      	ldrh	r0, [r0, #2]
   10ede:	f8ad 0006 	strh.w	r0, [sp, #6]
   10ee2:	4668      	mov	r0, sp
   10ee4:	f7f7 fa02 	bl	82ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x244>
   10ee8:	bd1c      	pop	{r2, r3, r4, pc}

00010eea <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10eea:	b510      	push	{r4, lr}
   10eec:	f7f1 fd00 	bl	28f0 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
   10ef0:	2000      	movs	r0, #0
   10ef2:	bd10      	pop	{r4, pc}

00010ef4 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   10ef4:	b510      	push	{r4, lr}
   10ef6:	460c      	mov	r4, r1
   10ef8:	2100      	movs	r1, #0
   10efa:	f7f1 f887 	bl	200c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10efe:	b118      	cbz	r0, 10f08 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   10f00:	2c02      	cmp	r4, #2
   10f02:	d903      	bls.n	10f0c <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   10f04:	2012      	movs	r0, #18
   10f06:	bd10      	pop	{r4, pc}
   10f08:	2002      	movs	r0, #2
   10f0a:	bd10      	pop	{r4, pc}
   10f0c:	f014 0101 	ands.w	r1, r4, #1
   10f10:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
   10f14:	f3c4 0240 	ubfx	r2, r4, #1, #1
   10f18:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
   10f1c:	d004      	beq.n	10f28 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   10f1e:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
   10f22:	b109      	cbz	r1, 10f28 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   10f24:	f7ff f845 	bl	ffb2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   10f28:	2000      	movs	r0, #0
   10f2a:	bd10      	pop	{r4, pc}

00010f2c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   10f2c:	b51c      	push	{r2, r3, r4, lr}
   10f2e:	460c      	mov	r4, r1
   10f30:	4669      	mov	r1, sp
   10f32:	f7fd fea4 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10f36:	2800      	cmp	r0, #0
   10f38:	d105      	bne.n	10f46 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   10f3a:	2100      	movs	r1, #0
   10f3c:	4622      	mov	r2, r4
   10f3e:	9801      	ldr	r0, [sp, #4]
   10f40:	f000 face 	bl	114e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
   10f44:	2000      	movs	r0, #0
   10f46:	bd1c      	pop	{r2, r3, r4, pc}

00010f48 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
   10f48:	b510      	push	{r4, lr}
   10f4a:	4604      	mov	r4, r0
   10f4c:	7800      	ldrb	r0, [r0, #0]
   10f4e:	28ff      	cmp	r0, #255	; 0xff
   10f50:	d009      	beq.n	10f66 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
   10f52:	2101      	movs	r1, #1
   10f54:	f7f1 f85a 	bl	200c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10f58:	b118      	cbz	r0, 10f62 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
   10f5a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   10f5e:	8441      	strh	r1, [r0, #34]	; 0x22
   10f60:	e005      	b.n	10f6e <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
   10f62:	2042      	movs	r0, #66	; 0x42
   10f64:	bd10      	pop	{r4, pc}
   10f66:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10f6a:	f7f4 fac3 	bl	54f4 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
   10f6e:	2000      	movs	r0, #0
   10f70:	bd10      	pop	{r4, pc}

00010f72 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   10f72:	b510      	push	{r4, lr}
   10f74:	4604      	mov	r4, r0
   10f76:	f7f7 f9f9 	bl	836c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
   10f7a:	b118      	cbz	r0, 10f84 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
   10f7c:	2000      	movs	r0, #0
   10f7e:	f000 f9e3 	bl	11348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   10f82:	b128      	cbz	r0, 10f90 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
   10f84:	4621      	mov	r1, r4
   10f86:	2000      	movs	r0, #0
   10f88:	f7f1 fc8e 	bl	28a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10f8c:	2000      	movs	r0, #0
   10f8e:	bd10      	pop	{r4, pc}
   10f90:	200c      	movs	r0, #12
   10f92:	bd10      	pop	{r4, pc}

00010f94 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   10f94:	b510      	push	{r4, lr}
   10f96:	7800      	ldrb	r0, [r0, #0]
   10f98:	b100      	cbz	r0, 10f9c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   10f9a:	2001      	movs	r0, #1
   10f9c:	f7f4 fad4 	bl	5548 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   10fa0:	2000      	movs	r0, #0
   10fa2:	bd10      	pop	{r4, pc}

00010fa4 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   10fa4:	f7f7 b902 	b.w	81ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>

00010fa8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   10fa8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10fac:	4606      	mov	r6, r0
   10fae:	7845      	ldrb	r5, [r0, #1]
   10fb0:	7800      	ldrb	r0, [r0, #0]
   10fb2:	2101      	movs	r1, #1
   10fb4:	f7f1 f82a 	bl	200c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10fb8:	0004      	movs	r4, r0
   10fba:	d01e      	beq.n	10ffa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   10fbc:	f7fe fdfb 	bl	fbb6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   10fc0:	78f1      	ldrb	r1, [r6, #3]
   10fc2:	4281      	cmp	r1, r0
   10fc4:	d800      	bhi.n	10fc8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   10fc6:	4608      	mov	r0, r1
   10fc8:	4607      	mov	r7, r0
   10fca:	2d04      	cmp	r5, #4
   10fcc:	d018      	beq.n	11000 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   10fce:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10fd0:	f7fd fd26 	bl	ea20 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10fd4:	4438      	add	r0, r7
   10fd6:	b281      	uxth	r1, r0
   10fd8:	4620      	mov	r0, r4
   10fda:	2201      	movs	r2, #1
   10fdc:	f000 f9c6 	bl	1136c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   10fe0:	2800      	cmp	r0, #0
   10fe2:	d10b      	bne.n	10ffc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10fe4:	2d03      	cmp	r5, #3
   10fe6:	d000      	beq.n	10fea <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10fe8:	b1df      	cbz	r7, 11022 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10fea:	4620      	mov	r0, r4
   10fec:	f7fe fe18 	bl	fc20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10ff0:	7871      	ldrb	r1, [r6, #1]
   10ff2:	2903      	cmp	r1, #3
   10ff4:	d010      	beq.n	11018 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10ff6:	b9a0      	cbnz	r0, 11022 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10ff8:	e004      	b.n	11004 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   10ffa:	2042      	movs	r0, #66	; 0x42
   10ffc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   11000:	b97f      	cbnz	r7, 11022 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   11002:	e7f2      	b.n	10fea <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   11004:	2904      	cmp	r1, #4
   11006:	d107      	bne.n	11018 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   11008:	4620      	mov	r0, r4
   1100a:	f7fe ffcf 	bl	ffac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1100e:	b140      	cbz	r0, 11022 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   11010:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11012:	f7fd fccc 	bl	e9ae <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   11016:	b120      	cbz	r0, 11022 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   11018:	2d01      	cmp	r5, #1
   1101a:	d004      	beq.n	11026 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   1101c:	2d03      	cmp	r5, #3
   1101e:	d002      	beq.n	11026 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   11020:	e00e      	b.n	11040 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   11022:	2012      	movs	r0, #18
   11024:	e7ea      	b.n	10ffc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   11026:	4620      	mov	r0, r4
   11028:	f7fe fdfa 	bl	fc20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1102c:	b108      	cbz	r0, 11032 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   1102e:	2200      	movs	r2, #0
   11030:	e002      	b.n	11038 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   11032:	2d01      	cmp	r5, #1
   11034:	d013      	beq.n	1105e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   11036:	2201      	movs	r2, #1
   11038:	4668      	mov	r0, sp
   1103a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1103c:	f7fd fc53 	bl	e8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   11040:	2d04      	cmp	r5, #4
   11042:	d018      	beq.n	11076 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   11044:	6872      	ldr	r2, [r6, #4]
   11046:	463b      	mov	r3, r7
   11048:	2101      	movs	r1, #1
   1104a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1104c:	f7fd fc7f 	bl	e94e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   11050:	b138      	cbz	r0, 11062 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   11052:	7870      	ldrb	r0, [r6, #1]
   11054:	2802      	cmp	r0, #2
   11056:	d006      	beq.n	11066 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   11058:	2803      	cmp	r0, #3
   1105a:	d004      	beq.n	11066 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1105c:	e00b      	b.n	11076 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   1105e:	2202      	movs	r2, #2
   11060:	e7ea      	b.n	11038 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   11062:	2007      	movs	r0, #7
   11064:	e7ca      	b.n	10ffc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   11066:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11068:	f7fd fcda 	bl	ea20 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1106c:	4602      	mov	r2, r0
   1106e:	2101      	movs	r1, #1
   11070:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11072:	f7fd fcb2 	bl	e9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   11076:	2000      	movs	r0, #0
   11078:	e7c0      	b.n	10ffc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0001107a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   1107a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1107e:	4607      	mov	r7, r0
   11080:	7845      	ldrb	r5, [r0, #1]
   11082:	78c6      	ldrb	r6, [r0, #3]
   11084:	7800      	ldrb	r0, [r0, #0]
   11086:	2101      	movs	r1, #1
   11088:	f7f0 ffc0 	bl	200c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1108c:	0004      	movs	r4, r0
   1108e:	d003      	beq.n	11098 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   11090:	f7fe fdc8 	bl	fc24 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   11094:	b118      	cbz	r0, 1109e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   11096:	e003      	b.n	110a0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   11098:	2042      	movs	r0, #66	; 0x42
   1109a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1109e:	2600      	movs	r6, #0
   110a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
   110a2:	f7fd fcc1 	bl	ea28 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   110a6:	4430      	add	r0, r6
   110a8:	b281      	uxth	r1, r0
   110aa:	4688      	mov	r8, r1
   110ac:	4620      	mov	r0, r4
   110ae:	2201      	movs	r2, #1
   110b0:	f000 f95c 	bl	1136c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   110b4:	2800      	cmp	r0, #0
   110b6:	d1f0      	bne.n	1109a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   110b8:	2d04      	cmp	r5, #4
   110ba:	d008      	beq.n	110ce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   110bc:	2d03      	cmp	r5, #3
   110be:	d00a      	beq.n	110d6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   110c0:	b12e      	cbz	r6, 110ce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   110c2:	4620      	mov	r0, r4
   110c4:	f7fe ff72 	bl	ffac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   110c8:	b118      	cbz	r0, 110d2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   110ca:	200c      	movs	r0, #12
   110cc:	e7e5      	b.n	1109a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   110ce:	2012      	movs	r0, #18
   110d0:	e7e3      	b.n	1109a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   110d2:	2d01      	cmp	r5, #1
   110d4:	d10c      	bne.n	110f0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   110d6:	4620      	mov	r0, r4
   110d8:	f7fe fda2 	bl	fc20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   110dc:	b108      	cbz	r0, 110e2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   110de:	2204      	movs	r2, #4
   110e0:	e002      	b.n	110e8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   110e2:	2d01      	cmp	r5, #1
   110e4:	d010      	beq.n	11108 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   110e6:	2205      	movs	r2, #5
   110e8:	4668      	mov	r0, sp
   110ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
   110ec:	f7fd fbfb 	bl	e8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   110f0:	687a      	ldr	r2, [r7, #4]
   110f2:	4633      	mov	r3, r6
   110f4:	2100      	movs	r1, #0
   110f6:	6b60      	ldr	r0, [r4, #52]	; 0x34
   110f8:	f7fd fc29 	bl	e94e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   110fc:	b130      	cbz	r0, 1110c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   110fe:	2d02      	cmp	r5, #2
   11100:	d006      	beq.n	11110 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   11102:	2d03      	cmp	r5, #3
   11104:	d004      	beq.n	11110 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   11106:	e008      	b.n	1111a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   11108:	2206      	movs	r2, #6
   1110a:	e7ed      	b.n	110e8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1110c:	2007      	movs	r0, #7
   1110e:	e7c4      	b.n	1109a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   11110:	4642      	mov	r2, r8
   11112:	2100      	movs	r1, #0
   11114:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11116:	f7fd fc60 	bl	e9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1111a:	2000      	movs	r0, #0
   1111c:	e7bd      	b.n	1109a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0001111e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   1111e:	b510      	push	{r4, lr}
   11120:	4604      	mov	r4, r0
   11122:	8880      	ldrh	r0, [r0, #4]
   11124:	b128      	cbz	r0, 11132 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11126:	2801      	cmp	r0, #1
   11128:	d003      	beq.n	11132 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1112a:	2802      	cmp	r0, #2
   1112c:	d001      	beq.n	11132 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1112e:	2012      	movs	r0, #18
   11130:	bd10      	pop	{r4, pc}
   11132:	78e0      	ldrb	r0, [r4, #3]
   11134:	f000 f9b1 	bl	1149a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   11138:	b148      	cbz	r0, 1114e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1113a:	78a0      	ldrb	r0, [r4, #2]
   1113c:	f000 f9ad 	bl	1149a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   11140:	b128      	cbz	r0, 1114e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   11142:	4620      	mov	r0, r4
   11144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11148:	2101      	movs	r1, #1
   1114a:	f000 b862 	b.w	11212 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1114e:	2011      	movs	r0, #17
   11150:	bd10      	pop	{r4, pc}

00011152 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   11152:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11154:	460c      	mov	r4, r1
   11156:	4605      	mov	r5, r0
   11158:	8800      	ldrh	r0, [r0, #0]
   1115a:	4669      	mov	r1, sp
   1115c:	f7fd fd8f 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11160:	2800      	cmp	r0, #0
   11162:	d106      	bne.n	11172 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   11164:	9801      	ldr	r0, [sp, #4]
   11166:	8829      	ldrh	r1, [r5, #0]
   11168:	8021      	strh	r1, [r4, #0]
   1116a:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
   1116e:	8060      	strh	r0, [r4, #2]
   11170:	2000      	movs	r0, #0
   11172:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00011174 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   11174:	b510      	push	{r4, lr}
   11176:	4604      	mov	r4, r0
   11178:	4601      	mov	r1, r0
   1117a:	2000      	movs	r0, #0
   1117c:	f7f1 fb7c 	bl	2878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   11180:	b910      	cbnz	r0, 11188 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   11182:	2000      	movs	r0, #0
   11184:	6020      	str	r0, [r4, #0]
   11186:	80a0      	strh	r0, [r4, #4]
   11188:	2000      	movs	r0, #0
   1118a:	bd10      	pop	{r4, pc}

0001118c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1118c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1118e:	460c      	mov	r4, r1
   11190:	4605      	mov	r5, r0
   11192:	8800      	ldrh	r0, [r0, #0]
   11194:	4669      	mov	r1, sp
   11196:	f7fd fd72 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1119a:	b108      	cbz	r0, 111a0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1119c:	2002      	movs	r0, #2
   1119e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   111a0:	78a8      	ldrb	r0, [r5, #2]
   111a2:	b158      	cbz	r0, 111bc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   111a4:	f000 f9f2 	bl	1158c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   111a8:	70a0      	strb	r0, [r4, #2]
   111aa:	8828      	ldrh	r0, [r5, #0]
   111ac:	8020      	strh	r0, [r4, #0]
   111ae:	f994 0002 	ldrsb.w	r0, [r4, #2]
   111b2:	f7f2 fb41 	bl	3838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   111b6:	70a0      	strb	r0, [r4, #2]
   111b8:	2000      	movs	r0, #0
   111ba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   111bc:	9801      	ldr	r0, [sp, #4]
   111be:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   111c2:	e7f1      	b.n	111a8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

000111c4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   111c4:	b510      	push	{r4, lr}
   111c6:	f7f7 f8d7 	bl	8378 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   111ca:	2000      	movs	r0, #0
   111cc:	bd10      	pop	{r4, pc}

000111ce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   111ce:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   111d2:	4604      	mov	r4, r0
   111d4:	8840      	ldrh	r0, [r0, #2]
   111d6:	460d      	mov	r5, r1
   111d8:	b1b8      	cbz	r0, 1120a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   111da:	8820      	ldrh	r0, [r4, #0]
   111dc:	4669      	mov	r1, sp
   111de:	f7fd fd4e 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   111e2:	2800      	cmp	r0, #0
   111e4:	d10f      	bne.n	11206 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   111e6:	8820      	ldrh	r0, [r4, #0]
   111e8:	8028      	strh	r0, [r5, #0]
   111ea:	9e01      	ldr	r6, [sp, #4]
   111ec:	f106 0510 	add.w	r5, r6, #16
   111f0:	3680      	adds	r6, #128	; 0x80
   111f2:	682f      	ldr	r7, [r5, #0]
   111f4:	8862      	ldrh	r2, [r4, #2]
   111f6:	4639      	mov	r1, r7
   111f8:	4630      	mov	r0, r6
   111fa:	f7fd fe62 	bl	eec2 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   111fe:	6828      	ldr	r0, [r5, #0]
   11200:	42b8      	cmp	r0, r7
   11202:	d1f6      	bne.n	111f2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   11204:	2000      	movs	r0, #0
   11206:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1120a:	2012      	movs	r0, #18
   1120c:	e7fb      	b.n	11206 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0001120e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   1120e:	f000 b868 	b.w	112e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00011212 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   11212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11216:	b085      	sub	sp, #20
   11218:	4688      	mov	r8, r1
   1121a:	4606      	mov	r6, r0
   1121c:	8800      	ldrh	r0, [r0, #0]
   1121e:	a901      	add	r1, sp, #4
   11220:	f7fd fd2d 	bl	ec7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11224:	2800      	cmp	r0, #0
   11226:	d13b      	bne.n	112a0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   11228:	9802      	ldr	r0, [sp, #8]
   1122a:	4601      	mov	r1, r0
   1122c:	468a      	mov	sl, r1
   1122e:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
   11232:	f500 7498 	add.w	r4, r0, #304	; 0x130
   11236:	f88d 1000 	strb.w	r1, [sp]
   1123a:	9900      	ldr	r1, [sp, #0]
   1123c:	9100      	str	r1, [sp, #0]
   1123e:	f89d 1000 	ldrb.w	r1, [sp]
   11242:	f04f 0900 	mov.w	r9, #0
   11246:	3080      	adds	r0, #128	; 0x80
   11248:	b121      	cbz	r1, 11254 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   1124a:	f1b8 0f02 	cmp.w	r8, #2
   1124e:	d001      	beq.n	11254 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   11250:	2701      	movs	r7, #1
   11252:	e000      	b.n	11256 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   11254:	2700      	movs	r7, #0
   11256:	7f81      	ldrb	r1, [r0, #30]
   11258:	2922      	cmp	r1, #34	; 0x22
   1125a:	d100      	bne.n	1125e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
   1125c:	b13f      	cbz	r7, 1126e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   1125e:	2500      	movs	r5, #0
   11260:	306c      	adds	r0, #108	; 0x6c
   11262:	2108      	movs	r1, #8
   11264:	4683      	mov	fp, r0
   11266:	f7ff fb38 	bl	108da <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   1126a:	b110      	cbz	r0, 11272 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x60>
   1126c:	e007      	b.n	1127e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   1126e:	2501      	movs	r5, #1
   11270:	e7f6      	b.n	11260 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   11272:	210b      	movs	r1, #11
   11274:	4658      	mov	r0, fp
   11276:	f7ff fb30 	bl	108da <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   1127a:	b900      	cbnz	r0, 1127e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   1127c:	b17d      	cbz	r5, 1129e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
   1127e:	a804      	add	r0, sp, #16
   11280:	9000      	str	r0, [sp, #0]
   11282:	f89d 0004 	ldrb.w	r0, [sp, #4]
   11286:	ab03      	add	r3, sp, #12
   11288:	4632      	mov	r2, r6
   1128a:	4651      	mov	r1, sl
   1128c:	f000 f95e 	bl	1154c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   11290:	0005      	movs	r5, r0
   11292:	d105      	bne.n	112a0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   11294:	340c      	adds	r4, #12
   11296:	20ff      	movs	r0, #255	; 0xff
   11298:	7060      	strb	r0, [r4, #1]
   1129a:	b937      	cbnz	r7, 112aa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
   1129c:	e003      	b.n	112a6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   1129e:	201a      	movs	r0, #26
   112a0:	b005      	add	sp, #20
   112a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112a6:	7820      	ldrb	r0, [r4, #0]
   112a8:	b108      	cbz	r0, 112ae <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   112aa:	253a      	movs	r5, #58	; 0x3a
   112ac:	e012      	b.n	112d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
   112ae:	f884 8000 	strb.w	r8, [r4]
   112b2:	f89d 000c 	ldrb.w	r0, [sp, #12]
   112b6:	70a0      	strb	r0, [r4, #2]
   112b8:	f89d 1010 	ldrb.w	r1, [sp, #16]
   112bc:	70e1      	strb	r1, [r4, #3]
   112be:	f88d 0000 	strb.w	r0, [sp]
   112c2:	f88d 1001 	strb.w	r1, [sp, #1]
   112c6:	88b0      	ldrh	r0, [r6, #4]
   112c8:	f8ad 0002 	strh.w	r0, [sp, #2]
   112cc:	4669      	mov	r1, sp
   112ce:	4650      	mov	r0, sl
   112d0:	f7fd fd92 	bl	edf8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   112d4:	f884 9001 	strb.w	r9, [r4, #1]
   112d8:	4628      	mov	r0, r5
   112da:	e7e1      	b.n	112a0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

000112dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   112dc:	2008      	movs	r0, #8
   112de:	f7f7 b8b3 	b.w	8448 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

000112e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   112e2:	b510      	push	{r4, lr}
   112e4:	f7fd fc2b 	bl	eb3e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   112e8:	f7f2 f87a 	bl	33e0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   112ec:	f7f7 f8ce 	bl	848c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   112f0:	f7fe f896 	bl	f420 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   112f4:	f7fd fe55 	bl	efa2 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
   112f8:	f7f3 f8c4 	bl	4484 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
   112fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11300:	f7f6 be96 	b.w	8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>

00011304 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   11304:	f7f4 be8a 	b.w	601c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   11308:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1130c:	4288      	cmp	r0, r1
   1130e:	d303      	bcc.n	11318 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   11310:	f640 0148 	movw	r1, #2120	; 0x848
   11314:	4288      	cmp	r0, r1
   11316:	d300      	bcc.n	1131a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   11318:	4608      	mov	r0, r1
   1131a:	b280      	uxth	r0, r0
   1131c:	4770      	bx	lr
   1131e:	07c1      	lsls	r1, r0, #31
   11320:	d001      	beq.n	11326 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   11322:	2001      	movs	r0, #1
   11324:	4770      	bx	lr
   11326:	0780      	lsls	r0, r0, #30
   11328:	d501      	bpl.n	1132e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   1132a:	2002      	movs	r0, #2
   1132c:	4770      	bx	lr
   1132e:	2000      	movs	r0, #0
   11330:	4770      	bx	lr
   11332:	b510      	push	{r4, lr}
   11334:	2801      	cmp	r0, #1
   11336:	d006      	beq.n	11346 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   11338:	2802      	cmp	r0, #2
   1133a:	d004      	beq.n	11346 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   1133c:	f240 21d7 	movw	r1, #727	; 0x2d7
   11340:	2006      	movs	r0, #6
   11342:	f7f0 fb35 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11346:	bd10      	pop	{r4, pc}
   11348:	b510      	push	{r4, lr}
   1134a:	f7f6 fe5b 	bl	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
   1134e:	b158      	cbz	r0, 11368 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   11350:	f7f6 fe8e 	bl	8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
   11354:	4604      	mov	r4, r0
   11356:	f7fe fc65 	bl	fc24 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1135a:	b918      	cbnz	r0, 11364 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   1135c:	4620      	mov	r0, r4
   1135e:	f7fe fc57 	bl	fc10 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   11362:	b108      	cbz	r0, 11368 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   11364:	2000      	movs	r0, #0
   11366:	bd10      	pop	{r4, pc}
   11368:	2001      	movs	r0, #1
   1136a:	bd10      	pop	{r4, pc}
   1136c:	b570      	push	{r4, r5, r6, lr}
   1136e:	460c      	mov	r4, r1
   11370:	4605      	mov	r5, r0
   11372:	b112      	cbz	r2, 1137a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   11374:	291f      	cmp	r1, #31
   11376:	d80c      	bhi.n	11392 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   11378:	e016      	b.n	113a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   1137a:	f7f1 f8bd 	bl	24f8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1137e:	42a0      	cmp	r0, r4
   11380:	d201      	bcs.n	11386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   11382:	2007      	movs	r0, #7
   11384:	bd70      	pop	{r4, r5, r6, pc}
   11386:	4628      	mov	r0, r5
   11388:	f7fe fc4a 	bl	fc20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1138c:	b118      	cbz	r0, 11396 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   1138e:	2c1f      	cmp	r4, #31
   11390:	d901      	bls.n	11396 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   11392:	2012      	movs	r0, #18
   11394:	bd70      	pop	{r4, r5, r6, pc}
   11396:	4628      	mov	r0, r5
   11398:	f7fe fc4b 	bl	fc32 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1139c:	b130      	cbz	r0, 113ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   1139e:	4621      	mov	r1, r4
   113a0:	4628      	mov	r0, r5
   113a2:	f7fe fc14 	bl	fbce <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   113a6:	b118      	cbz	r0, 113b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   113a8:	2000      	movs	r0, #0
   113aa:	bd70      	pop	{r4, r5, r6, pc}
   113ac:	2042      	movs	r0, #66	; 0x42
   113ae:	bd70      	pop	{r4, r5, r6, pc}
   113b0:	2045      	movs	r0, #69	; 0x45
   113b2:	bd70      	pop	{r4, r5, r6, pc}
   113b4:	b510      	push	{r4, lr}
   113b6:	4604      	mov	r4, r0
   113b8:	7840      	ldrb	r0, [r0, #1]
   113ba:	06c1      	lsls	r1, r0, #27
   113bc:	d51c      	bpl.n	113f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   113be:	07c0      	lsls	r0, r0, #31
   113c0:	d00b      	beq.n	113da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   113c2:	f7f7 f815 	bl	83f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   113c6:	b1b8      	cbz	r0, 113f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   113c8:	7860      	ldrb	r0, [r4, #1]
   113ca:	06c1      	lsls	r1, r0, #27
   113cc:	d405      	bmi.n	113da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   113ce:	0700      	lsls	r0, r0, #28
   113d0:	d503      	bpl.n	113da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   113d2:	7d20      	ldrb	r0, [r4, #20]
   113d4:	2802      	cmp	r0, #2
   113d6:	d10f      	bne.n	113f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   113d8:	e010      	b.n	113fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   113da:	7d20      	ldrb	r0, [r4, #20]
   113dc:	2802      	cmp	r0, #2
   113de:	d001      	beq.n	113e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   113e0:	7ea0      	ldrb	r0, [r4, #26]
   113e2:	b948      	cbnz	r0, 113f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   113e4:	7860      	ldrb	r0, [r4, #1]
   113e6:	0700      	lsls	r0, r0, #28
   113e8:	d408      	bmi.n	113fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   113ea:	f8d4 0005 	ldr.w	r0, [r4, #5]
   113ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   113f2:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   113f6:	d201      	bcs.n	113fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   113f8:	2011      	movs	r0, #17
   113fa:	bd10      	pop	{r4, pc}
   113fc:	2000      	movs	r0, #0
   113fe:	bd10      	pop	{r4, pc}
   11400:	b538      	push	{r3, r4, r5, lr}
   11402:	4604      	mov	r4, r0
   11404:	7800      	ldrb	r0, [r0, #0]
   11406:	28ef      	cmp	r0, #239	; 0xef
   11408:	d843      	bhi.n	11492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1140a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1140e:	f8ad 0000 	strh.w	r0, [sp]
   11412:	9800      	ldr	r0, [sp, #0]
   11414:	f000 f91f 	bl	11656 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
   11418:	b3a0      	cbz	r0, 11484 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   1141a:	7861      	ldrb	r1, [r4, #1]
   1141c:	0708      	lsls	r0, r1, #28
   1141e:	d40b      	bmi.n	11438 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   11420:	f8d4 0002 	ldr.w	r0, [r4, #2]
   11424:	f8d4 3005 	ldr.w	r3, [r4, #5]
   11428:	0a02      	lsrs	r2, r0, #8
   1142a:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   1142e:	d830      	bhi.n	11492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   11430:	2220      	movs	r2, #32
   11432:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   11436:	d82c      	bhi.n	11492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   11438:	7a60      	ldrb	r0, [r4, #9]
   1143a:	b318      	cbz	r0, 11484 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   1143c:	2807      	cmp	r0, #7
   1143e:	d828      	bhi.n	11492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   11440:	7aa0      	ldrb	r0, [r4, #10]
   11442:	b128      	cbz	r0, 11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   11444:	2801      	cmp	r0, #1
   11446:	d003      	beq.n	11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   11448:	2802      	cmp	r0, #2
   1144a:	d001      	beq.n	11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   1144c:	2803      	cmp	r0, #3
   1144e:	d120      	bne.n	11492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   11450:	074a      	lsls	r2, r1, #29
   11452:	d403      	bmi.n	1145c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   11454:	2802      	cmp	r0, #2
   11456:	d001      	beq.n	1145c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   11458:	2803      	cmp	r0, #3
   1145a:	d105      	bne.n	11468 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   1145c:	7ae0      	ldrb	r0, [r4, #11]
   1145e:	b108      	cbz	r0, 11464 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   11460:	2801      	cmp	r0, #1
   11462:	d116      	bne.n	11492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   11464:	0748      	lsls	r0, r1, #29
   11466:	d407      	bmi.n	11478 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   11468:	7ca0      	ldrb	r0, [r4, #18]
   1146a:	b128      	cbz	r0, 11478 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   1146c:	2801      	cmp	r0, #1
   1146e:	d003      	beq.n	11478 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   11470:	2802      	cmp	r0, #2
   11472:	d001      	beq.n	11478 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   11474:	2803      	cmp	r0, #3
   11476:	d10c      	bne.n	11492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   11478:	06c8      	lsls	r0, r1, #27
   1147a:	7d20      	ldrb	r0, [r4, #20]
   1147c:	d503      	bpl.n	11486 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   1147e:	2801      	cmp	r0, #1
   11480:	d107      	bne.n	11492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   11482:	e002      	b.n	1148a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   11484:	e005      	b.n	11492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   11486:	2802      	cmp	r0, #2
   11488:	d003      	beq.n	11492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1148a:	7e20      	ldrb	r0, [r4, #24]
   1148c:	b118      	cbz	r0, 11496 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   1148e:	2801      	cmp	r0, #1
   11490:	d001      	beq.n	11496 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   11492:	2012      	movs	r0, #18
   11494:	bd38      	pop	{r3, r4, r5, pc}
   11496:	2000      	movs	r0, #0
   11498:	bd38      	pop	{r3, r4, r5, pc}
   1149a:	b510      	push	{r4, lr}
   1149c:	0004      	movs	r4, r0
   1149e:	d005      	beq.n	114ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   114a0:	f7f6 ffe4 	bl	846c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   114a4:	4384      	bics	r4, r0
   114a6:	d001      	beq.n	114ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   114a8:	2000      	movs	r0, #0
   114aa:	bd10      	pop	{r4, pc}
   114ac:	2001      	movs	r0, #1
   114ae:	bd10      	pop	{r4, pc}
   114b0:	28fb      	cmp	r0, #251	; 0xfb
   114b2:	d803      	bhi.n	114bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   114b4:	f640 0048 	movw	r0, #2120	; 0x848
   114b8:	4281      	cmp	r1, r0
   114ba:	d901      	bls.n	114c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   114bc:	2011      	movs	r0, #17
   114be:	4770      	bx	lr
   114c0:	2000      	movs	r0, #0
   114c2:	4770      	bx	lr
   114c4:	381b      	subs	r0, #27
   114c6:	28e1      	cmp	r0, #225	; 0xe1
   114c8:	d206      	bcs.n	114d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   114ca:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   114ce:	d303      	bcc.n	114d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   114d0:	f244 2090 	movw	r0, #17040	; 0x4290
   114d4:	4281      	cmp	r1, r0
   114d6:	d901      	bls.n	114dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   114d8:	2012      	movs	r0, #18
   114da:	4770      	bx	lr
   114dc:	2000      	movs	r0, #0
   114de:	4770      	bx	lr
   114e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114e4:	4606      	mov	r6, r0
   114e6:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   114ea:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   114ee:	4615      	mov	r5, r2
   114f0:	302c      	adds	r0, #44	; 0x2c
   114f2:	f7f4 f82f 	bl	5554 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   114f6:	4680      	mov	r8, r0
   114f8:	2102      	movs	r1, #2
   114fa:	f7fd fc4d 	bl	ed98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   114fe:	4287      	cmp	r7, r0
   11500:	d200      	bcs.n	11504 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   11502:	4638      	mov	r0, r7
   11504:	4607      	mov	r7, r0
   11506:	2102      	movs	r1, #2
   11508:	4640      	mov	r0, r8
   1150a:	f7fd fc45 	bl	ed98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1150e:	4284      	cmp	r4, r0
   11510:	d200      	bcs.n	11514 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   11512:	4620      	mov	r0, r4
   11514:	8831      	ldrh	r1, [r6, #0]
   11516:	8029      	strh	r1, [r5, #0]
   11518:	2f1b      	cmp	r7, #27
   1151a:	d913      	bls.n	11544 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   1151c:	2ffb      	cmp	r7, #251	; 0xfb
   1151e:	d300      	bcc.n	11522 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   11520:	27fb      	movs	r7, #251	; 0xfb
   11522:	806f      	strh	r7, [r5, #2]
   11524:	281b      	cmp	r0, #27
   11526:	d90f      	bls.n	11548 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   11528:	28fb      	cmp	r0, #251	; 0xfb
   1152a:	d300      	bcc.n	1152e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   1152c:	20fb      	movs	r0, #251	; 0xfb
   1152e:	80e8      	strh	r0, [r5, #6]
   11530:	4640      	mov	r0, r8
   11532:	f7ff fee9 	bl	11308 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   11536:	80a8      	strh	r0, [r5, #4]
   11538:	4640      	mov	r0, r8
   1153a:	f7ff fee5 	bl	11308 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   1153e:	8128      	strh	r0, [r5, #8]
   11540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11544:	271b      	movs	r7, #27
   11546:	e7ec      	b.n	11522 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   11548:	201b      	movs	r0, #27
   1154a:	e7f0      	b.n	1152e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   1154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11550:	7890      	ldrb	r0, [r2, #2]
   11552:	9e06      	ldr	r6, [sp, #24]
   11554:	461d      	mov	r5, r3
   11556:	4614      	mov	r4, r2
   11558:	b908      	cbnz	r0, 1155e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   1155a:	f7f6 ff87 	bl	846c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1155e:	78e4      	ldrb	r4, [r4, #3]
   11560:	4607      	mov	r7, r0
   11562:	b914      	cbnz	r4, 1156a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   11564:	f7f6 ff82 	bl	846c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11568:	4604      	mov	r4, r0
   1156a:	b16f      	cbz	r7, 11588 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1156c:	b164      	cbz	r4, 11588 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1156e:	4638      	mov	r0, r7
   11570:	f7ff fed5 	bl	1131e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   11574:	4620      	mov	r0, r4
   11576:	f7ff fed2 	bl	1131e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   1157a:	b12f      	cbz	r7, 11588 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1157c:	b124      	cbz	r4, 11588 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1157e:	702f      	strb	r7, [r5, #0]
   11580:	7034      	strb	r4, [r6, #0]
   11582:	2000      	movs	r0, #0
   11584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11588:	2009      	movs	r0, #9
   1158a:	e7fb      	b.n	11584 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   1158c:	207f      	movs	r0, #127	; 0x7f
   1158e:	f000 b843 	b.w	11618 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
   11592:	b508      	push	{r3, lr}
   11594:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
   11598:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
   1159c:	f88d 0000 	strb.w	r0, [sp]
   115a0:	9800      	ldr	r0, [sp, #0]
   115a2:	9000      	str	r0, [sp, #0]
   115a4:	f89d 0000 	ldrb.w	r0, [sp]
   115a8:	b100      	cbz	r0, 115ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   115aa:	2001      	movs	r0, #1
   115ac:	1e40      	subs	r0, r0, #1
   115ae:	4208      	tst	r0, r1
   115b0:	d003      	beq.n	115ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   115b2:	2904      	cmp	r1, #4
   115b4:	d001      	beq.n	115ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   115b6:	2001      	movs	r0, #1
   115b8:	bd08      	pop	{r3, pc}
   115ba:	2000      	movs	r0, #0
   115bc:	bd08      	pop	{r3, pc}
   115be:	b510      	push	{r4, lr}
   115c0:	f7f6 fd20 	bl	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
   115c4:	2800      	cmp	r0, #0
   115c6:	d000      	beq.n	115ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2c6>
   115c8:	2001      	movs	r0, #1
   115ca:	bd10      	pop	{r4, pc}
   115cc:	b570      	push	{r4, r5, r6, lr}
   115ce:	4605      	mov	r5, r0
   115d0:	f7fe fb2f 	bl	fc32 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   115d4:	b170      	cbz	r0, 115f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f0>
   115d6:	4628      	mov	r0, r5
   115d8:	f7fe fce8 	bl	ffac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   115dc:	2800      	cmp	r0, #0
   115de:	d008      	beq.n	115f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ee>
   115e0:	4628      	mov	r0, r5
   115e2:	f7fe fce0 	bl	ffa6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   115e6:	4604      	mov	r4, r0
   115e8:	4628      	mov	r0, r5
   115ea:	f7fe fcb6 	bl	ff5a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   115ee:	b118      	cbz	r0, 115f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f4>
   115f0:	200c      	movs	r0, #12
   115f2:	bd70      	pop	{r4, r5, r6, pc}
   115f4:	2042      	movs	r0, #66	; 0x42
   115f6:	bd70      	pop	{r4, r5, r6, pc}
   115f8:	b164      	cbz	r4, 11614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   115fa:	8820      	ldrh	r0, [r4, #0]
   115fc:	f7fd fa6c 	bl	ead8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   11600:	8820      	ldrh	r0, [r4, #0]
   11602:	2100      	movs	r1, #0
   11604:	f7f0 fda4 	bl	2150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   11608:	b120      	cbz	r0, 11614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   1160a:	f241 71ae 	movw	r1, #6062	; 0x17ae
   1160e:	2039      	movs	r0, #57	; 0x39
   11610:	f7f0 f9ce 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11614:	2000      	movs	r0, #0
   11616:	bd70      	pop	{r4, r5, r6, pc}
   11618:	b508      	push	{r3, lr}
   1161a:	f640 1288 	movw	r2, #2440	; 0x988
   1161e:	2300      	movs	r3, #0
   11620:	4669      	mov	r1, sp
   11622:	f7fc f8e7 	bl	d7f4 <mpsl_fem_tx_power_split>
   11626:	bd08      	pop	{r3, pc}
   11628:	b530      	push	{r4, r5, lr}
   1162a:	f340 0400 	sbfx	r4, r0, #0, #1
   1162e:	f340 0040 	sbfx	r0, r0, #1, #1
   11632:	1c40      	adds	r0, r0, #1
   11634:	9d03      	ldr	r5, [sp, #12]
   11636:	1c64      	adds	r4, r4, #1
   11638:	d000      	beq.n	1163c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
   1163a:	b119      	cbz	r1, 11644 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   1163c:	b100      	cbz	r0, 11640 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33c>
   1163e:	b10a      	cbz	r2, 11644 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   11640:	b91c      	cbnz	r4, 1164a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x346>
   11642:	e001      	b.n	11648 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   11644:	2011      	movs	r0, #17
   11646:	bd30      	pop	{r4, r5, pc}
   11648:	2100      	movs	r1, #0
   1164a:	7019      	strb	r1, [r3, #0]
   1164c:	b900      	cbnz	r0, 11650 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x34c>
   1164e:	2200      	movs	r2, #0
   11650:	702a      	strb	r2, [r5, #0]
   11652:	2000      	movs	r0, #0
   11654:	bd30      	pop	{r4, r5, pc}
   11656:	b2c0      	uxtb	r0, r0
   11658:	06c1      	lsls	r1, r0, #27
   1165a:	d40c      	bmi.n	11676 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x372>
   1165c:	0681      	lsls	r1, r0, #26
   1165e:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   11662:	d503      	bpl.n	1166c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x368>
   11664:	b9d1      	cbnz	r1, 1169c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   11666:	0781      	lsls	r1, r0, #30
   11668:	d418      	bmi.n	1169c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   1166a:	e001      	b.n	11670 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36c>
   1166c:	2900      	cmp	r1, #0
   1166e:	d1fa      	bne.n	11666 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x362>
   11670:	0700      	lsls	r0, r0, #28
   11672:	d413      	bmi.n	1169c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   11674:	e010      	b.n	11698 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x394>
   11676:	0641      	lsls	r1, r0, #25
   11678:	d410      	bmi.n	1169c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   1167a:	0681      	lsls	r1, r0, #26
   1167c:	d40e      	bmi.n	1169c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   1167e:	07c1      	lsls	r1, r0, #31
   11680:	ea4f 7180 	mov.w	r1, r0, lsl #30
   11684:	d004      	beq.n	11690 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   11686:	2900      	cmp	r1, #0
   11688:	db02      	blt.n	11690 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   1168a:	0740      	lsls	r0, r0, #29
   1168c:	d404      	bmi.n	11698 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x394>
   1168e:	e005      	b.n	1169c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   11690:	0701      	lsls	r1, r0, #28
   11692:	d403      	bmi.n	1169c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   11694:	0740      	lsls	r0, r0, #29
   11696:	d401      	bmi.n	1169c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   11698:	2001      	movs	r0, #1
   1169a:	4770      	bx	lr
   1169c:	2000      	movs	r0, #0
   1169e:	4770      	bx	lr
   116a0:	b510      	push	{r4, lr}
   116a2:	f7f3 ff3b 	bl	551c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   116a6:	b110      	cbz	r0, 116ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
   116a8:	f44f 7188 	mov.w	r1, #272	; 0x110
   116ac:	e004      	b.n	116b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
   116ae:	f7f3 f86b 	bl	4788 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   116b2:	b120      	cbz	r0, 116be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   116b4:	f240 1115 	movw	r1, #277	; 0x115
   116b8:	2001      	movs	r0, #1
   116ba:	f7f0 f979 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   116be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   116c2:	2001      	movs	r0, #1
   116c4:	f7fd b858 	b.w	e778 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   116c8:	6802      	ldr	r2, [r0, #0]
   116ca:	b912      	cbnz	r2, 116d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
   116cc:	6001      	str	r1, [r0, #0]
   116ce:	4770      	bx	lr
   116d0:	4602      	mov	r2, r0
   116d2:	6850      	ldr	r0, [r2, #4]
   116d4:	b108      	cbz	r0, 116da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d6>
   116d6:	428a      	cmp	r2, r1
   116d8:	d1fa      	bne.n	116d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3cc>
   116da:	428a      	cmp	r2, r1
   116dc:	d0f7      	beq.n	116ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   116de:	6051      	str	r1, [r2, #4]
   116e0:	4770      	bx	lr
   116e2:	b510      	push	{r4, lr}
   116e4:	4604      	mov	r4, r0
   116e6:	e002      	b.n	116ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ea>
   116e8:	6820      	ldr	r0, [r4, #0]
   116ea:	4780      	blx	r0
   116ec:	6864      	ldr	r4, [r4, #4]
   116ee:	2c00      	cmp	r4, #0
   116f0:	d1fa      	bne.n	116e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e4>
   116f2:	bd10      	pop	{r4, pc}
   116f4:	b510      	push	{r4, lr}
   116f6:	2000      	movs	r0, #0
   116f8:	f7fd f83e 	bl	e778 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   116fc:	f7f0 fe06 	bl	230c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   11700:	f7f1 f89c 	bl	283c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   11704:	f7f1 fa2a 	bl	2b5c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
   11708:	2800      	cmp	r0, #0
   1170a:	d003      	beq.n	11714 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
   1170c:	21f2      	movs	r1, #242	; 0xf2
   1170e:	2001      	movs	r0, #1
   11710:	f7f0 f94e 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11714:	bd10      	pop	{r4, pc}
   11716:	b510      	push	{r4, lr}
   11718:	f7ff ffc2 	bl	116a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39c>
   1171c:	f7fe ff41 	bl	105a2 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   11720:	2800      	cmp	r0, #0
   11722:	d004      	beq.n	1172e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42a>
   11724:	f44f 7195 	mov.w	r1, #298	; 0x12a
   11728:	2001      	movs	r0, #1
   1172a:	f7f0 f941 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1172e:	bd10      	pop	{r4, pc}

00011730 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   11730:	f7fb bd96 	b.w	d260 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   11734:	000b0001 	.word	0x000b0001
   11738:	000a0002 	.word	0x000a0002
   1173c:	00090005 	.word	0x00090005
   11740:	0008000a 	.word	0x0008000a
   11744:	00070014 	.word	0x00070014
   11748:	0006001e 	.word	0x0006001e
   1174c:	00050032 	.word	0x00050032
   11750:	0004004b 	.word	0x0004004b
   11754:	00030064 	.word	0x00030064
   11758:	00020096 	.word	0x00020096
   1175c:	000100fa 	.word	0x000100fa
   11760:	000001f4 	.word	0x000001f4

00011764 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI>:
   11764:	b510      	push	{r4, lr}
   11766:	6844      	ldr	r4, [r0, #4]
   11768:	7803      	ldrb	r3, [r0, #0]
   1176a:	2100      	movs	r1, #0
   1176c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   11770:	3480      	adds	r4, #128	; 0x80
   11772:	4620      	mov	r0, r4
   11774:	f7fd fa9a 	bl	ecac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   11778:	b110      	cbz	r0, 11780 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI+0x1c>
   1177a:	2020      	movs	r0, #32
   1177c:	7760      	strb	r0, [r4, #29]
   1177e:	bd10      	pop	{r4, pc}
   11780:	2180      	movs	r1, #128	; 0x80
   11782:	207e      	movs	r0, #126	; 0x7e
   11784:	f7f0 f914 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011788 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   11788:	2200      	movs	r2, #0
   1178a:	704a      	strb	r2, [r1, #1]
   1178c:	2214      	movs	r2, #20
   1178e:	700a      	strb	r2, [r1, #0]
   11790:	f8d0 200a 	ldr.w	r2, [r0, #10]
   11794:	604a      	str	r2, [r1, #4]
   11796:	89c0      	ldrh	r0, [r0, #14]
   11798:	8108      	strh	r0, [r1, #8]
   1179a:	4770      	bx	lr
   1179c:	b510      	push	{r4, lr}
   1179e:	2801      	cmp	r0, #1
   117a0:	d006      	beq.n	117b0 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   117a2:	2802      	cmp	r0, #2
   117a4:	d004      	beq.n	117b0 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   117a6:	f240 21d7 	movw	r1, #727	; 0x2d7
   117aa:	2006      	movs	r0, #6
   117ac:	f7f0 f900 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   117b0:	bd10      	pop	{r4, pc}

000117b2 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   117b2:	b510      	push	{r4, lr}
   117b4:	f7f7 fa48 	bl	8c48 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   117b8:	f000 f81d 	bl	117f6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   117bc:	f7f6 ff24 	bl	8608 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   117c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   117c4:	f7f7 b81e 	b.w	8804 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000117c8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   117c8:	b510      	push	{r4, lr}
   117ca:	24c8      	movs	r4, #200	; 0xc8
   117cc:	1e64      	subs	r4, r4, #1
   117ce:	b2e4      	uxtb	r4, r4
   117d0:	f7f6 ff38 	bl	8644 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   117d4:	2802      	cmp	r0, #2
   117d6:	d003      	beq.n	117e0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   117d8:	2801      	cmp	r0, #1
   117da:	d000      	beq.n	117de <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   117dc:	2000      	movs	r0, #0
   117de:	bd10      	pop	{r4, pc}
   117e0:	2c00      	cmp	r4, #0
   117e2:	d1f3      	bne.n	117cc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   117e4:	21ed      	movs	r1, #237	; 0xed
   117e6:	203b      	movs	r0, #59	; 0x3b
   117e8:	f7f0 f8e2 	bl	19b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   117ec:	5840      	ldr	r0, [r0, r1]
   117ee:	2800      	cmp	r0, #0
   117f0:	d000      	beq.n	117f4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   117f2:	2001      	movs	r0, #1
   117f4:	4770      	bx	lr

000117f6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   117f6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   117fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   117fe:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   11802:	f3bf 8f4f 	dsb	sy
   11806:	f3bf 8f6f 	isb	sy
   1180a:	f7f7 b895 	b.w	8938 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   1180e:	2800      	cmp	r0, #0
   11810:	db09      	blt.n	11826 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   11812:	f000 021f 	and.w	r2, r0, #31
   11816:	2101      	movs	r1, #1
   11818:	4091      	lsls	r1, r2
   1181a:	0940      	lsrs	r0, r0, #5
   1181c:	0080      	lsls	r0, r0, #2
   1181e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   11822:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   11826:	4770      	bx	lr
   11828:	2800      	cmp	r0, #0
   1182a:	db0d      	blt.n	11848 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   1182c:	f000 021f 	and.w	r2, r0, #31
   11830:	2101      	movs	r1, #1
   11832:	4091      	lsls	r1, r2
   11834:	0940      	lsrs	r0, r0, #5
   11836:	0080      	lsls	r0, r0, #2
   11838:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1183c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   11840:	f3bf 8f4f 	dsb	sy
   11844:	f3bf 8f6f 	isb	sy
   11848:	4770      	bx	lr
   1184a:	5840      	ldr	r0, [r0, r1]
   1184c:	2800      	cmp	r0, #0
   1184e:	d000      	beq.n	11852 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   11850:	2001      	movs	r0, #1
   11852:	4770      	bx	lr
   11854:	5840      	ldr	r0, [r0, r1]
   11856:	2800      	cmp	r0, #0
   11858:	d000      	beq.n	1185c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   1185a:	2001      	movs	r0, #1
   1185c:	4770      	bx	lr

0001185e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   1185e:	b510      	push	{r4, lr}
   11860:	4604      	mov	r4, r0
   11862:	4608      	mov	r0, r1
   11864:	f7f7 fb1c 	bl	8ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11868:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1186c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   11870:	fbb0 f0f1 	udiv	r0, r0, r1
   11874:	1a20      	subs	r0, r4, r0
   11876:	1e80      	subs	r0, r0, #2
   11878:	bd10      	pop	{r4, pc}

0001187a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1187a:	b510      	push	{r4, lr}
   1187c:	4604      	mov	r4, r0
   1187e:	4608      	mov	r0, r1
   11880:	f7f7 fb0e 	bl	8ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11888:	fbb0 f0f1 	udiv	r0, r0, r1
   1188c:	1a20      	subs	r0, r4, r0
   1188e:	bd10      	pop	{r4, pc}
   11890:	2804      	cmp	r0, #4
   11892:	d202      	bcs.n	1189a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   11894:	f04f 0028 	mov.w	r0, #40	; 0x28
   11898:	4770      	bx	lr
   1189a:	d102      	bne.n	118a2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   1189c:	f04f 0010 	mov.w	r0, #16
   118a0:	4770      	bx	lr
   118a2:	f04f 0000 	mov.w	r0, #0
   118a6:	4770      	bx	lr
   118a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118ac:	000d      	movs	r5, r1
   118ae:	4604      	mov	r4, r0
   118b0:	f04f 0602 	mov.w	r6, #2
   118b4:	f04f 0701 	mov.w	r7, #1
   118b8:	d008      	beq.n	118cc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x52>
   118ba:	7828      	ldrb	r0, [r5, #0]
   118bc:	b1d0      	cbz	r0, 118f4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   118be:	2801      	cmp	r0, #1
   118c0:	d007      	beq.n	118d2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x58>
   118c2:	2802      	cmp	r0, #2
   118c4:	d014      	beq.n	118f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   118c6:	2803      	cmp	r0, #3
   118c8:	d13e      	bne.n	11948 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
   118ca:	e016      	b.n	118fa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x80>
   118cc:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
   118d0:	e00e      	b.n	118f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   118d2:	6868      	ldr	r0, [r5, #4]
   118d4:	28c8      	cmp	r0, #200	; 0xc8
   118d6:	d303      	bcc.n	118e0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x66>
   118d8:	2103      	movs	r1, #3
   118da:	f7f9 f973 	bl	abc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   118de:	b108      	cbz	r0, 118e4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x6a>
   118e0:	2600      	movs	r6, #0
   118e2:	e007      	b.n	118f4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   118e4:	4620      	mov	r0, r4
   118e6:	6869      	ldr	r1, [r5, #4]
   118e8:	f000 f833 	bl	11952 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
   118ec:	2601      	movs	r6, #1
   118ee:	e001      	b.n	118f4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   118f0:	f7f8 f974 	bl	9bdc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
   118f4:	4630      	mov	r0, r6
   118f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   118fa:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   118fe:	2800      	cmp	r0, #0
   11900:	d1f6      	bne.n	118f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   11902:	6868      	ldr	r0, [r5, #4]
   11904:	f7f8 f93c 	bl	9b80 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   11908:	b1f0      	cbz	r0, 11948 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
   1190a:	6869      	ldr	r1, [r5, #4]
   1190c:	7808      	ldrb	r0, [r1, #0]
   1190e:	b130      	cbz	r0, 1191e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xa4>
   11910:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   11914:	2805      	cmp	r0, #5
   11916:	d008      	beq.n	1192a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xb0>
   11918:	f44f 71be 	mov.w	r1, #380	; 0x17c
   1191c:	e011      	b.n	11942 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xc8>
   1191e:	4620      	mov	r0, r4
   11920:	f000 f81f 	bl	11962 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xe8>
   11924:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
   11928:	e7e2      	b.n	118f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   1192a:	4620      	mov	r0, r4
   1192c:	f000 f832 	bl	11994 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x11a>
   11930:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   11934:	4621      	mov	r1, r4
   11936:	f000 f80a 	bl	1194e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
   1193a:	2800      	cmp	r0, #0
   1193c:	d1d8      	bne.n	118f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   1193e:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   11942:	206a      	movs	r0, #106	; 0x6a
   11944:	f7fb fd98 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   11948:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
   1194c:	e7d0      	b.n	118f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   1194e:	f7f9 bb81 	b.w	b054 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   11952:	4602      	mov	r2, r0
   11954:	7803      	ldrb	r3, [r0, #0]
   11956:	6840      	ldr	r0, [r0, #4]
   11958:	4408      	add	r0, r1
   1195a:	6050      	str	r0, [r2, #4]
   1195c:	3862      	subs	r0, #98	; 0x62
   1195e:	f7fa bb67 	b.w	c030 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   11962:	2201      	movs	r2, #1
   11964:	7002      	strb	r2, [r0, #0]
   11966:	2200      	movs	r2, #0
   11968:	72c2      	strb	r2, [r0, #11]
   1196a:	790a      	ldrb	r2, [r1, #4]
   1196c:	b172      	cbz	r2, 1198c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x112>
   1196e:	2200      	movs	r2, #0
   11970:	8102      	strh	r2, [r0, #8]
   11972:	794a      	ldrb	r2, [r1, #5]
   11974:	b162      	cbz	r2, 11990 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x116>
   11976:	2203      	movs	r2, #3
   11978:	7282      	strb	r2, [r0, #10]
   1197a:	688a      	ldr	r2, [r1, #8]
   1197c:	3273      	adds	r2, #115	; 0x73
   1197e:	6042      	str	r2, [r0, #4]
   11980:	68c9      	ldr	r1, [r1, #12]
   11982:	6101      	str	r1, [r0, #16]
   11984:	2103      	movs	r1, #3
   11986:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1198a:	4770      	bx	lr
   1198c:	222b      	movs	r2, #43	; 0x2b
   1198e:	e7ef      	b.n	11970 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xf6>
   11990:	2202      	movs	r2, #2
   11992:	e7f1      	b.n	11978 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xfe>
   11994:	b510      	push	{r4, lr}
   11996:	2200      	movs	r2, #0
   11998:	7002      	strb	r2, [r0, #0]
   1199a:	72c2      	strb	r2, [r0, #11]
   1199c:	790a      	ldrb	r2, [r1, #4]
   1199e:	b1a2      	cbz	r2, 119ca <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x150>
   119a0:	2200      	movs	r2, #0
   119a2:	8102      	strh	r2, [r0, #8]
   119a4:	794a      	ldrb	r2, [r1, #5]
   119a6:	b192      	cbz	r2, 119ce <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x154>
   119a8:	2203      	movs	r2, #3
   119aa:	7282      	strb	r2, [r0, #10]
   119ac:	68ca      	ldr	r2, [r1, #12]
   119ae:	3273      	adds	r2, #115	; 0x73
   119b0:	6042      	str	r2, [r0, #4]
   119b2:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
   119b6:	6889      	ldr	r1, [r1, #8]
   119b8:	17cb      	asrs	r3, r1, #31
   119ba:	1861      	adds	r1, r4, r1
   119bc:	415a      	adcs	r2, r3
   119be:	e9c0 1204 	strd	r1, r2, [r0, #16]
   119c2:	2104      	movs	r1, #4
   119c4:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   119c8:	bd10      	pop	{r4, pc}
   119ca:	222b      	movs	r2, #43	; 0x2b
   119cc:	e7e9      	b.n	119a2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x128>
   119ce:	2202      	movs	r2, #2
   119d0:	e7eb      	b.n	119aa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x130>
   119d2:	b570      	push	{r4, r5, r6, lr}
   119d4:	4605      	mov	r5, r0
   119d6:	460c      	mov	r4, r1
   119d8:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
   119dc:	f7fa f8ee 	bl	bbbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   119e0:	b178      	cbz	r0, 11a02 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x188>
   119e2:	4620      	mov	r0, r4
   119e4:	f000 f810 	bl	11a08 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
   119e8:	6a22      	ldr	r2, [r4, #32]
   119ea:	2109      	movs	r1, #9
   119ec:	4628      	mov	r0, r5
   119ee:	4790      	blx	r2
   119f0:	2800      	cmp	r0, #0
   119f2:	d008      	beq.n	11a06 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18c>
   119f4:	7800      	ldrb	r0, [r0, #0]
   119f6:	2800      	cmp	r0, #0
   119f8:	d005      	beq.n	11a06 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18c>
   119fa:	21dc      	movs	r1, #220	; 0xdc
   119fc:	206a      	movs	r0, #106	; 0x6a
   119fe:	f7fb fd3b 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   11a02:	21d8      	movs	r1, #216	; 0xd8
   11a04:	e7fa      	b.n	119fc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x182>
   11a06:	bd70      	pop	{r4, r5, r6, pc}
   11a08:	2100      	movs	r1, #0
   11a0a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   11a0e:	f800 1f24 	strb.w	r1, [r0, #36]!
   11a12:	7041      	strb	r1, [r0, #1]
   11a14:	4770      	bx	lr

00011a16 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   11a16:	b570      	push	{r4, r5, r6, lr}
   11a18:	f7f8 f93c 	bl	9c94 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   11a1c:	4605      	mov	r5, r0
   11a1e:	2400      	movs	r4, #0
   11a20:	e006      	b.n	11a30 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   11a22:	4620      	mov	r0, r4
   11a24:	f7f8 f93c 	bl	9ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   11a28:	f7ff ffee 	bl	11a08 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
   11a2c:	1c64      	adds	r4, r4, #1
   11a2e:	b2e4      	uxtb	r4, r4
   11a30:	42ac      	cmp	r4, r5
   11a32:	d3f6      	bcc.n	11a22 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   11a34:	bd70      	pop	{r4, r5, r6, pc}

00011a36 <mpsl_timeslot_request>:
   11a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a3a:	460d      	mov	r5, r1
   11a3c:	f7f8 f930 	bl	9ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   11a40:	0004      	movs	r4, r0
   11a42:	d008      	beq.n	11a56 <mpsl_timeslot_request+0x20>
   11a44:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   11a48:	f06f 0622 	mvn.w	r6, #34	; 0x22
   11a4c:	2801      	cmp	r0, #1
   11a4e:	d006      	beq.n	11a5e <mpsl_timeslot_request+0x28>
   11a50:	2802      	cmp	r0, #2
   11a52:	d111      	bne.n	11a78 <mpsl_timeslot_request+0x42>
   11a54:	e003      	b.n	11a5e <mpsl_timeslot_request+0x28>
   11a56:	f06f 0001 	mvn.w	r0, #1
   11a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a5e:	f06f 0715 	mvn.w	r7, #21
   11a62:	b15d      	cbz	r5, 11a7c <mpsl_timeslot_request+0x46>
   11a64:	4628      	mov	r0, r5
   11a66:	f7f8 f88b 	bl	9b80 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   11a6a:	b138      	cbz	r0, 11a7c <mpsl_timeslot_request+0x46>
   11a6c:	7828      	ldrb	r0, [r5, #0]
   11a6e:	b138      	cbz	r0, 11a80 <mpsl_timeslot_request+0x4a>
   11a70:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   11a74:	2802      	cmp	r0, #2
   11a76:	d008      	beq.n	11a8a <mpsl_timeslot_request+0x54>
   11a78:	4630      	mov	r0, r6
   11a7a:	e7ee      	b.n	11a5a <mpsl_timeslot_request+0x24>
   11a7c:	4638      	mov	r0, r7
   11a7e:	e7ec      	b.n	11a5a <mpsl_timeslot_request+0x24>
   11a80:	4629      	mov	r1, r5
   11a82:	4620      	mov	r0, r4
   11a84:	f7ff ff6d 	bl	11962 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xe8>
   11a88:	e003      	b.n	11a92 <mpsl_timeslot_request+0x5c>
   11a8a:	4629      	mov	r1, r5
   11a8c:	4620      	mov	r0, r4
   11a8e:	f7ff ff81 	bl	11994 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x11a>
   11a92:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   11a96:	4621      	mov	r1, r4
   11a98:	f7ff ff59 	bl	1194e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
   11a9c:	b108      	cbz	r0, 11aa2 <mpsl_timeslot_request+0x6c>
   11a9e:	2000      	movs	r0, #0
   11aa0:	e7db      	b.n	11a5a <mpsl_timeslot_request+0x24>
   11aa2:	f240 21b1 	movw	r1, #689	; 0x2b1
   11aa6:	206a      	movs	r0, #106	; 0x6a
   11aa8:	f7fb fce6 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

00011aac <mpsl_timeslot_session_close>:
   11aac:	b510      	push	{r4, lr}
   11aae:	4604      	mov	r4, r0
   11ab0:	f7f8 f8f6 	bl	9ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   11ab4:	0001      	movs	r1, r0
   11ab6:	d005      	beq.n	11ac4 <mpsl_timeslot_session_close+0x18>
   11ab8:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
   11abc:	f06f 0222 	mvn.w	r2, #34	; 0x22
   11ac0:	b978      	cbnz	r0, 11ae2 <mpsl_timeslot_session_close+0x36>
   11ac2:	e002      	b.n	11aca <mpsl_timeslot_session_close+0x1e>
   11ac4:	f06f 0001 	mvn.w	r0, #1
   11ac8:	bd10      	pop	{r4, pc}
   11aca:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
   11ace:	b140      	cbz	r0, 11ae2 <mpsl_timeslot_session_close+0x36>
   11ad0:	2802      	cmp	r0, #2
   11ad2:	d008      	beq.n	11ae6 <mpsl_timeslot_session_close+0x3a>
   11ad4:	2801      	cmp	r0, #1
   11ad6:	d006      	beq.n	11ae6 <mpsl_timeslot_session_close+0x3a>
   11ad8:	2001      	movs	r0, #1
   11ada:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
   11ade:	2000      	movs	r0, #0
   11ae0:	bd10      	pop	{r4, pc}
   11ae2:	4610      	mov	r0, r2
   11ae4:	bd10      	pop	{r4, pc}
   11ae6:	4620      	mov	r0, r4
   11ae8:	f7ff ff73 	bl	119d2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
   11aec:	e7f7      	b.n	11ade <mpsl_timeslot_session_close+0x32>

00011aee <mpsl_timeslot_session_count_set>:
   11aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11af2:	460e      	mov	r6, r1
   11af4:	4607      	mov	r7, r0
   11af6:	f7f8 f8cd 	bl	9c94 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   11afa:	4605      	mov	r5, r0
   11afc:	2400      	movs	r4, #0
   11afe:	e00b      	b.n	11b18 <mpsl_timeslot_session_count_set+0x2a>
   11b00:	4620      	mov	r0, r4
   11b02:	f7f8 f8cd 	bl	9ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   11b06:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   11b0a:	b118      	cbz	r0, 11b14 <mpsl_timeslot_session_count_set+0x26>
   11b0c:	f04f 30ff 	mov.w	r0, #4294967295
   11b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11b14:	1c64      	adds	r4, r4, #1
   11b16:	b2e4      	uxtb	r4, r4
   11b18:	42ac      	cmp	r4, r5
   11b1a:	d3f1      	bcc.n	11b00 <mpsl_timeslot_session_count_set+0x12>
   11b1c:	2e08      	cmp	r6, #8
   11b1e:	d902      	bls.n	11b26 <mpsl_timeslot_session_count_set+0x38>
   11b20:	f06f 0015 	mvn.w	r0, #21
   11b24:	e7f4      	b.n	11b10 <mpsl_timeslot_session_count_set+0x22>
   11b26:	b117      	cbz	r7, 11b2e <mpsl_timeslot_session_count_set+0x40>
   11b28:	4631      	mov	r1, r6
   11b2a:	4638      	mov	r0, r7
   11b2c:	e001      	b.n	11b32 <mpsl_timeslot_session_count_set+0x44>
   11b2e:	2100      	movs	r1, #0
   11b30:	4608      	mov	r0, r1
   11b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11b36:	f7f8 b899 	b.w	9c6c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

00011b3a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   11b3a:	f7fa bd33 	b.w	c5a4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00011b3e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   11b3e:	b510      	push	{r4, lr}
   11b40:	2000      	movs	r0, #0
   11b42:	f7fb f88b 	bl	cc5c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   11b46:	6800      	ldr	r0, [r0, #0]
   11b48:	2800      	cmp	r0, #0
   11b4a:	bf18      	it	ne
   11b4c:	2001      	movne	r0, #1
   11b4e:	bd10      	pop	{r4, pc}

00011b50 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   11b50:	b510      	push	{r4, lr}
   11b52:	f7fb f8fb 	bl	cd4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   11b56:	f7fa fbdf 	bl	c318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   11b5a:	f000 f804 	bl	11b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   11b5e:	b280      	uxth	r0, r0
   11b60:	bd10      	pop	{r4, pc}

00011b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
   11b62:	f7fb b855 	b.w	cc10 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

00011b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   11b66:	0a41      	lsrs	r1, r0, #9
   11b68:	f643 5209 	movw	r2, #15625	; 0x3d09
   11b6c:	4351      	muls	r1, r2
   11b6e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   11b72:	fb10 f002 	smulbb	r0, r0, r2
   11b76:	f500 7080 	add.w	r0, r0, #256	; 0x100
   11b7a:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   11b7e:	4770      	bx	lr
   11b80:	2800      	cmp	r0, #0
   11b82:	db09      	blt.n	11b98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   11b84:	f000 021f 	and.w	r2, r0, #31
   11b88:	2101      	movs	r1, #1
   11b8a:	4091      	lsls	r1, r2
   11b8c:	0940      	lsrs	r0, r0, #5
   11b8e:	0080      	lsls	r0, r0, #2
   11b90:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   11b94:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   11b98:	4770      	bx	lr
   11b9a:	2800      	cmp	r0, #0
   11b9c:	db0d      	blt.n	11bba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   11b9e:	f000 021f 	and.w	r2, r0, #31
   11ba2:	2101      	movs	r1, #1
   11ba4:	4091      	lsls	r1, r2
   11ba6:	0940      	lsrs	r0, r0, #5
   11ba8:	0080      	lsls	r0, r0, #2
   11baa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   11bae:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   11bb2:	f3bf 8f4f 	dsb	sy
   11bb6:	f3bf 8f6f 	isb	sy
   11bba:	4770      	bx	lr
   11bbc:	5840      	ldr	r0, [r0, r1]
   11bbe:	2800      	cmp	r0, #0
   11bc0:	d000      	beq.n	11bc4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   11bc2:	2001      	movs	r0, #1
   11bc4:	4770      	bx	lr
   11bc6:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   11bca:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   11bce:	f002 0201 	and.w	r2, r2, #1
   11bd2:	03c0      	lsls	r0, r0, #15
   11bd4:	d503      	bpl.n	11bde <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   11bd6:	428a      	cmp	r2, r1
   11bd8:	d101      	bne.n	11bde <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   11bda:	2001      	movs	r0, #1
   11bdc:	4770      	bx	lr
   11bde:	2000      	movs	r0, #0
   11be0:	4770      	bx	lr

00011be2 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   11be2:	b510      	push	{r4, lr}
   11be4:	2101      	movs	r1, #1
   11be6:	0788      	lsls	r0, r1, #30
   11be8:	f7fb fbf0 	bl	d3cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   11bec:	2800      	cmp	r0, #0
   11bee:	d000      	beq.n	11bf2 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   11bf0:	2001      	movs	r0, #1
   11bf2:	bd10      	pop	{r4, pc}

00011bf4 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   11bf4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   11bf8:	2101      	movs	r1, #1
   11bfa:	6001      	str	r1, [r0, #0]
   11bfc:	4770      	bx	lr

00011bfe <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   11bfe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   11c02:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   11c06:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   11c0a:	f002 0203 	and.w	r2, r2, #3
   11c0e:	03c9      	lsls	r1, r1, #15
   11c10:	d503      	bpl.n	11c1a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   11c12:	4282      	cmp	r2, r0
   11c14:	d101      	bne.n	11c1a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   11c16:	2001      	movs	r0, #1
   11c18:	4770      	bx	lr
   11c1a:	2000      	movs	r0, #0
   11c1c:	4770      	bx	lr

00011c1e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   11c1e:	b510      	push	{r4, lr}
   11c20:	2100      	movs	r1, #0
   11c22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   11c26:	f7fb fbd1 	bl	d3cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   11c2a:	2800      	cmp	r0, #0
   11c2c:	d000      	beq.n	11c30 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   11c2e:	2001      	movs	r0, #1
   11c30:	bd10      	pop	{r4, pc}
   11c32:	2800      	cmp	r0, #0
   11c34:	db09      	blt.n	11c4a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   11c36:	f000 021f 	and.w	r2, r0, #31
   11c3a:	2101      	movs	r1, #1
   11c3c:	4091      	lsls	r1, r2
   11c3e:	0940      	lsrs	r0, r0, #5
   11c40:	0080      	lsls	r0, r0, #2
   11c42:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   11c46:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   11c4a:	4770      	bx	lr
   11c4c:	2800      	cmp	r0, #0
   11c4e:	db0d      	blt.n	11c6c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   11c50:	f000 021f 	and.w	r2, r0, #31
   11c54:	2101      	movs	r1, #1
   11c56:	4091      	lsls	r1, r2
   11c58:	0940      	lsrs	r0, r0, #5
   11c5a:	0080      	lsls	r0, r0, #2
   11c5c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   11c60:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   11c64:	f3bf 8f4f 	dsb	sy
   11c68:	f3bf 8f6f 	isb	sy
   11c6c:	4770      	bx	lr
   11c6e:	1000      	.short	0x1000
   11c70:	00fa0002 	.word	0x00fa0002
   11c74:	e8ff0000 	.word	0xe8ff0000
   11c78:	95775fae 	.word	0x95775fae
   11c7c:	6227c87c 	.word	0x6227c87c
   11c80:	eae61814 	.word	0xeae61814
   11c84:	3992c65d 	.word	0x3992c65d
   11c88:	3a72      	.short	0x3a72
   11c8a:	2800      	cmp	r0, #0
   11c8c:	db09      	blt.n	11ca2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   11c8e:	f000 021f 	and.w	r2, r0, #31
   11c92:	2101      	movs	r1, #1
   11c94:	4091      	lsls	r1, r2
   11c96:	0940      	lsrs	r0, r0, #5
   11c98:	0080      	lsls	r0, r0, #2
   11c9a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   11c9e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   11ca2:	4770      	bx	lr

00011ca4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   11ca4:	f3ef 8110 	mrs	r1, PRIMASK
   11ca8:	b672      	cpsid	i
   11caa:	7802      	ldrb	r2, [r0, #0]
   11cac:	2a01      	cmp	r2, #1
   11cae:	d001      	beq.n	11cb4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   11cb0:	2201      	movs	r2, #1
   11cb2:	e000      	b.n	11cb6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   11cb4:	2200      	movs	r2, #0
   11cb6:	2301      	movs	r3, #1
   11cb8:	7003      	strb	r3, [r0, #0]
   11cba:	b901      	cbnz	r1, 11cbe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   11cbc:	b662      	cpsie	i
   11cbe:	b10a      	cbz	r2, 11cc4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   11cc0:	2000      	movs	r0, #0
   11cc2:	4770      	bx	lr
   11cc4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11cc8:	4770      	bx	lr

00011cca <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   11cca:	2100      	movs	r1, #0
   11ccc:	7001      	strb	r1, [r0, #0]
   11cce:	4608      	mov	r0, r1
   11cd0:	4770      	bx	lr

00011cd2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   11cd2:	f3ef 8110 	mrs	r1, PRIMASK
   11cd6:	b672      	cpsid	i
   11cd8:	2200      	movs	r2, #0
   11cda:	7002      	strb	r2, [r0, #0]
   11cdc:	b901      	cbnz	r1, 11ce0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   11cde:	b662      	cpsie	i
   11ce0:	2000      	movs	r0, #0
   11ce2:	4770      	bx	lr

00011ce4 <mpsl_low_priority_process>:
   11ce4:	f7fb bcc6 	b.w	d674 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00011ce8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   11ce8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   11cec:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   11cf0:	280f      	cmp	r0, #15
   11cf2:	d001      	beq.n	11cf8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   11cf4:	2000      	movs	r0, #0
   11cf6:	4770      	bx	lr
   11cf8:	2001      	movs	r0, #1
   11cfa:	4770      	bx	lr

00011cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   11cfc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   11d00:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   11d04:	280a      	cmp	r0, #10
   11d06:	d001      	beq.n	11d0c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   11d08:	2000      	movs	r0, #0
   11d0a:	4770      	bx	lr
   11d0c:	2001      	movs	r0, #1
   11d0e:	4770      	bx	lr

00011d10 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   11d10:	b500      	push	{lr}
   11d12:	f7ff fff3 	bl	11cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   11d16:	b120      	cbz	r0, 11d22 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   11d18:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   11d1c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   11d20:	b108      	cbz	r0, 11d26 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   11d22:	2000      	movs	r0, #0
   11d24:	bd00      	pop	{pc}
   11d26:	2001      	movs	r0, #1
   11d28:	bd00      	pop	{pc}

00011d2a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   11d2a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   11d2e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   11d32:	280e      	cmp	r0, #14
   11d34:	d001      	beq.n	11d3a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   11d36:	2000      	movs	r0, #0
   11d38:	4770      	bx	lr
   11d3a:	2001      	movs	r0, #1
   11d3c:	4770      	bx	lr

00011d3e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   11d3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   11d42:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   11d46:	2810      	cmp	r0, #16
   11d48:	d001      	beq.n	11d4e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   11d4a:	2000      	movs	r0, #0
   11d4c:	4770      	bx	lr
   11d4e:	2001      	movs	r0, #1
   11d50:	4770      	bx	lr

00011d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   11d52:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   11d56:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   11d5a:	2806      	cmp	r0, #6
   11d5c:	d003      	beq.n	11d66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   11d5e:	1c40      	adds	r0, r0, #1
   11d60:	d001      	beq.n	11d66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   11d62:	2000      	movs	r0, #0
   11d64:	4770      	bx	lr
   11d66:	2001      	movs	r0, #1
   11d68:	4770      	bx	lr

00011d6a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   11d6a:	b500      	push	{lr}
   11d6c:	f7ff fff1 	bl	11d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   11d70:	b148      	cbz	r0, 11d86 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   11d72:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   11d76:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   11d7a:	2806      	cmp	r0, #6
   11d7c:	d303      	bcc.n	11d86 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   11d7e:	1c40      	adds	r0, r0, #1
   11d80:	d001      	beq.n	11d86 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   11d82:	2001      	movs	r0, #1
   11d84:	bd00      	pop	{pc}
   11d86:	2000      	movs	r0, #0
   11d88:	bd00      	pop	{pc}

00011d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   11d8a:	b500      	push	{lr}
   11d8c:	f7ff ffe1 	bl	11d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   11d90:	b138      	cbz	r0, 11da2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   11d92:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   11d96:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   11d9a:	2806      	cmp	r0, #6
   11d9c:	d303      	bcc.n	11da6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   11d9e:	1c40      	adds	r0, r0, #1
   11da0:	d001      	beq.n	11da6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   11da2:	2000      	movs	r0, #0
   11da4:	bd00      	pop	{pc}
   11da6:	2001      	movs	r0, #1
   11da8:	bd00      	pop	{pc}

00011daa <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   11daa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   11dae:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   11db2:	280d      	cmp	r0, #13
   11db4:	d001      	beq.n	11dba <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   11db6:	2000      	movs	r0, #0
   11db8:	4770      	bx	lr
   11dba:	2001      	movs	r0, #1
   11dbc:	4770      	bx	lr

00011dbe <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   11dbe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   11dc2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   11dc6:	2808      	cmp	r0, #8
   11dc8:	d001      	beq.n	11dce <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   11dca:	2000      	movs	r0, #0
   11dcc:	4770      	bx	lr
   11dce:	2001      	movs	r0, #1
   11dd0:	4770      	bx	lr

00011dd2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   11dd2:	f7fb bc89 	b.w	d6e8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00011dd6 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   11dd6:	f7fb bc87 	b.w	d6e8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00011dda <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   11dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11dde:	428a      	cmp	r2, r1
   11de0:	d803      	bhi.n	11dea <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   11de2:	2179      	movs	r1, #121	; 0x79
   11de4:	2096      	movs	r0, #150	; 0x96
   11de6:	f7fb fb47 	bl	d478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   11dea:	fab2 f382 	clz	r3, r2
   11dee:	b143      	cbz	r3, 11e02 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
   11df0:	4099      	lsls	r1, r3
   11df2:	f1c3 0c20 	rsb	ip, r3, #32
   11df6:	fa20 fc0c 	lsr.w	ip, r0, ip
   11dfa:	4098      	lsls	r0, r3
   11dfc:	ea41 010c 	orr.w	r1, r1, ip
   11e00:	409a      	lsls	r2, r3
   11e02:	0c13      	lsrs	r3, r2, #16
   11e04:	fbb1 f5f3 	udiv	r5, r1, r3
   11e08:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   11e0c:	b287      	uxth	r7, r0
   11e0e:	fbb1 f0f3 	udiv	r0, r1, r3
   11e12:	fb03 1615 	mls	r6, r3, r5, r1
   11e16:	b294      	uxth	r4, r2
   11e18:	fb00 f504 	mul.w	r5, r0, r4
   11e1c:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
   11e20:	42b5      	cmp	r5, r6
   11e22:	d905      	bls.n	11e30 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   11e24:	1bad      	subs	r5, r5, r6
   11e26:	4295      	cmp	r5, r2
   11e28:	bf94      	ite	ls
   11e2a:	2501      	movls	r5, #1
   11e2c:	2502      	movhi	r5, #2
   11e2e:	1b40      	subs	r0, r0, r5
   11e30:	0409      	lsls	r1, r1, #16
   11e32:	0405      	lsls	r5, r0, #16
   11e34:	eb11 010c 	adds.w	r1, r1, ip
   11e38:	fba0 0c02 	umull	r0, ip, r0, r2
   11e3c:	1a09      	subs	r1, r1, r0
   11e3e:	fbb1 f0f3 	udiv	r0, r1, r3
   11e42:	fbb1 fcf3 	udiv	ip, r1, r3
   11e46:	fb03 131c 	mls	r3, r3, ip, r1
   11e4a:	fb00 f104 	mul.w	r1, r0, r4
   11e4e:	eb07 4303 	add.w	r3, r7, r3, lsl #16
   11e52:	4299      	cmp	r1, r3
   11e54:	d905      	bls.n	11e62 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   11e56:	1ac9      	subs	r1, r1, r3
   11e58:	4291      	cmp	r1, r2
   11e5a:	bf94      	ite	ls
   11e5c:	2101      	movls	r1, #1
   11e5e:	2102      	movhi	r1, #2
   11e60:	1a40      	subs	r0, r0, r1
   11e62:	4328      	orrs	r0, r5
   11e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011e68 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
   11e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e6c:	461e      	mov	r6, r3
   11e6e:	4615      	mov	r5, r2
   11e70:	4604      	mov	r4, r0
   11e72:	9f06      	ldr	r7, [sp, #24]
   11e74:	f7ff ffb1 	bl	11dda <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
   11e78:	6030      	str	r0, [r6, #0]
   11e7a:	fba0 0105 	umull	r0, r1, r0, r5
   11e7e:	1a20      	subs	r0, r4, r0
   11e80:	6038      	str	r0, [r7, #0]
   11e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   11e86:	b4f0      	push	{r4, r5, r6, r7}
   11e88:	ea80 0c01 	eor.w	ip, r0, r1
   11e8c:	4603      	mov	r3, r0
   11e8e:	f01c 0f03 	tst.w	ip, #3
   11e92:	d13c      	bne.n	11f0e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   11e94:	f013 0f03 	tst.w	r3, #3
   11e98:	d00b      	beq.n	11eb2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   11e9a:	2a00      	cmp	r2, #0
   11e9c:	bf04      	itt	eq
   11e9e:	bcf0      	popeq	{r4, r5, r6, r7}
   11ea0:	4770      	bxeq	lr
   11ea2:	f811 cb01 	ldrb.w	ip, [r1], #1
   11ea6:	f803 cb01 	strb.w	ip, [r3], #1
   11eaa:	1e52      	subs	r2, r2, #1
   11eac:	f013 0f03 	tst.w	r3, #3
   11eb0:	d1f3      	bne.n	11e9a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   11eb2:	2a03      	cmp	r2, #3
   11eb4:	d94f      	bls.n	11f56 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   11eb6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   11eba:	d24c      	bcs.n	11f56 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   11ebc:	f1c2 0c00 	rsb	ip, r2, #0
   11ec0:	ea4f 74ec 	mov.w	r4, ip, asr #31
   11ec4:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   11ec8:	ea4f 0cac 	mov.w	ip, ip, asr #2
   11ecc:	f1cc 0c00 	rsb	ip, ip, #0
   11ed0:	f1bc 0f00 	cmp.w	ip, #0
   11ed4:	dd1b      	ble.n	11f0e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   11ed6:	1f0d      	subs	r5, r1, #4
   11ed8:	1f1c      	subs	r4, r3, #4
   11eda:	f01c 0f01 	tst.w	ip, #1
   11ede:	d003      	beq.n	11ee8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   11ee0:	f855 6f04 	ldr.w	r6, [r5, #4]!
   11ee4:	f844 6f04 	str.w	r6, [r4, #4]!
   11ee8:	ea5f 066c 	movs.w	r6, ip, asr #1
   11eec:	d007      	beq.n	11efe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   11eee:	686f      	ldr	r7, [r5, #4]
   11ef0:	6067      	str	r7, [r4, #4]
   11ef2:	f855 7f08 	ldr.w	r7, [r5, #8]!
   11ef6:	f844 7f08 	str.w	r7, [r4, #8]!
   11efa:	1e76      	subs	r6, r6, #1
   11efc:	d1f7      	bne.n	11eee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   11efe:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   11f02:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   11f06:	f1cc 0c00 	rsb	ip, ip, #0
   11f0a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   11f0e:	2a00      	cmp	r2, #0
   11f10:	bf04      	itt	eq
   11f12:	bcf0      	popeq	{r4, r5, r6, r7}
   11f14:	4770      	bxeq	lr
   11f16:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   11f1a:	d226      	bcs.n	11f6a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   11f1c:	2a00      	cmp	r2, #0
   11f1e:	bfdc      	itt	le
   11f20:	bcf0      	pople	{r4, r5, r6, r7}
   11f22:	4770      	bxle	lr
   11f24:	1e49      	subs	r1, r1, #1
   11f26:	1e5b      	subs	r3, r3, #1
   11f28:	f012 0f01 	tst.w	r2, #1
   11f2c:	d003      	beq.n	11f36 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   11f2e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   11f32:	f803 cf01 	strb.w	ip, [r3, #1]!
   11f36:	1052      	asrs	r2, r2, #1
   11f38:	bf04      	itt	eq
   11f3a:	bcf0      	popeq	{r4, r5, r6, r7}
   11f3c:	4770      	bxeq	lr
   11f3e:	f891 c001 	ldrb.w	ip, [r1, #1]
   11f42:	f883 c001 	strb.w	ip, [r3, #1]
   11f46:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   11f4a:	f803 cf02 	strb.w	ip, [r3, #2]!
   11f4e:	1e52      	subs	r2, r2, #1
   11f50:	d1f5      	bne.n	11f3e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   11f52:	bcf0      	pop	{r4, r5, r6, r7}
   11f54:	4770      	bx	lr
   11f56:	2a04      	cmp	r2, #4
   11f58:	d3d9      	bcc.n	11f0e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   11f5a:	f851 cb04 	ldr.w	ip, [r1], #4
   11f5e:	1f12      	subs	r2, r2, #4
   11f60:	f843 cb04 	str.w	ip, [r3], #4
   11f64:	2a04      	cmp	r2, #4
   11f66:	d2f8      	bcs.n	11f5a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   11f68:	e7d1      	b.n	11f0e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   11f6a:	f811 cb01 	ldrb.w	ip, [r1], #1
   11f6e:	f803 cb01 	strb.w	ip, [r3], #1
   11f72:	1e52      	subs	r2, r2, #1
   11f74:	d1f9      	bne.n	11f6a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   11f76:	bcf0      	pop	{r4, r5, r6, r7}
   11f78:	4770      	bx	lr

00011f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   11f7a:	b470      	push	{r4, r5, r6}
   11f7c:	4603      	mov	r3, r0
   11f7e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   11f82:	f010 0f03 	tst.w	r0, #3
   11f86:	d009      	beq.n	11f9c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   11f88:	2a00      	cmp	r2, #0
   11f8a:	bf04      	itt	eq
   11f8c:	bc70      	popeq	{r4, r5, r6}
   11f8e:	4770      	bxeq	lr
   11f90:	f803 cb01 	strb.w	ip, [r3], #1
   11f94:	1e52      	subs	r2, r2, #1
   11f96:	f013 0f03 	tst.w	r3, #3
   11f9a:	d1f5      	bne.n	11f88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   11f9c:	b2c9      	uxtb	r1, r1
   11f9e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   11fa2:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   11fa6:	2a03      	cmp	r2, #3
   11fa8:	d939      	bls.n	1201e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   11faa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   11fae:	d236      	bcs.n	1201e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   11fb0:	4251      	negs	r1, r2
   11fb2:	17cc      	asrs	r4, r1, #31
   11fb4:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   11fb8:	1089      	asrs	r1, r1, #2
   11fba:	424e      	negs	r6, r1
   11fbc:	2e00      	cmp	r6, #0
   11fbe:	dd11      	ble.n	11fe4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   11fc0:	1f19      	subs	r1, r3, #4
   11fc2:	f016 0f01 	tst.w	r6, #1
   11fc6:	bf18      	it	ne
   11fc8:	f841 5f04 	strne.w	r5, [r1, #4]!
   11fcc:	1074      	asrs	r4, r6, #1
   11fce:	d004      	beq.n	11fda <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   11fd0:	604d      	str	r5, [r1, #4]
   11fd2:	f841 5f08 	str.w	r5, [r1, #8]!
   11fd6:	1e64      	subs	r4, r4, #1
   11fd8:	d1fa      	bne.n	11fd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   11fda:	4271      	negs	r1, r6
   11fdc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   11fe0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   11fe4:	2a00      	cmp	r2, #0
   11fe6:	bf04      	itt	eq
   11fe8:	bc70      	popeq	{r4, r5, r6}
   11fea:	4770      	bxeq	lr
   11fec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   11ff0:	d21d      	bcs.n	1202e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   11ff2:	2a00      	cmp	r2, #0
   11ff4:	bfdc      	itt	le
   11ff6:	bc70      	pople	{r4, r5, r6}
   11ff8:	4770      	bxle	lr
   11ffa:	1e59      	subs	r1, r3, #1
   11ffc:	f012 0f01 	tst.w	r2, #1
   12000:	bf18      	it	ne
   12002:	f801 cf01 	strbne.w	ip, [r1, #1]!
   12006:	1052      	asrs	r2, r2, #1
   12008:	bf04      	itt	eq
   1200a:	bc70      	popeq	{r4, r5, r6}
   1200c:	4770      	bxeq	lr
   1200e:	f881 c001 	strb.w	ip, [r1, #1]
   12012:	f801 cf02 	strb.w	ip, [r1, #2]!
   12016:	1e52      	subs	r2, r2, #1
   12018:	d1f9      	bne.n	1200e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   1201a:	bc70      	pop	{r4, r5, r6}
   1201c:	4770      	bx	lr
   1201e:	2a04      	cmp	r2, #4
   12020:	d3e0      	bcc.n	11fe4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   12022:	1f12      	subs	r2, r2, #4
   12024:	f843 5b04 	str.w	r5, [r3], #4
   12028:	2a04      	cmp	r2, #4
   1202a:	d2fa      	bcs.n	12022 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   1202c:	e7da      	b.n	11fe4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   1202e:	f803 cb01 	strb.w	ip, [r3], #1
   12032:	1e52      	subs	r2, r2, #1
   12034:	d1fb      	bne.n	1202e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   12036:	bc70      	pop	{r4, r5, r6}
   12038:	4770      	bx	lr
   1203a:	f04f 30ff 	mov.w	r0, #4294967295
   1203e:	4770      	bx	lr
   12040:	2000      	movs	r0, #0
   12042:	4770      	bx	lr
   12044:	2000      	movs	r0, #0
   12046:	4770      	bx	lr
   12048:	f04f 30ff 	mov.w	r0, #4294967295
   1204c:	4770      	bx	lr
   1204e:	4770      	bx	lr
   12050:	4770      	bx	lr
   12052:	2000      	movs	r0, #0
   12054:	4770      	bx	lr
   12056:	2100      	movs	r1, #0
   12058:	7001      	strb	r1, [r0, #0]
   1205a:	4770      	bx	lr
   1205c:	f04f 30ff 	mov.w	r0, #4294967295
   12060:	4770      	bx	lr
   12062:	f04f 30ff 	mov.w	r0, #4294967295
   12066:	4770      	bx	lr
   12068:	2100      	movs	r1, #0
   1206a:	7001      	strb	r1, [r0, #0]
   1206c:	4770      	bx	lr
   1206e:	f04f 30ff 	mov.w	r0, #4294967295
   12072:	4770      	bx	lr
   12074:	f04f 30ff 	mov.w	r0, #4294967295
   12078:	4770      	bx	lr
   1207a:	7800      	ldrb	r0, [r0, #0]
   1207c:	2800      	cmp	r0, #0
   1207e:	d001      	beq.n	12084 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   12080:	f06f 0015 	mvn.w	r0, #21
   12084:	4770      	bx	lr
   12086:	2000      	movs	r0, #0
   12088:	4770      	bx	lr
   1208a:	2200      	movs	r2, #0
   1208c:	f000 b802 	b.w	12094 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00012090 <mpsl_fem_init>:
   12090:	f7f7 bbd4 	b.w	983c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00012094 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   12094:	b570      	push	{r4, r5, r6, lr}
   12096:	4614      	mov	r4, r2
   12098:	460d      	mov	r5, r1
   1209a:	1b00      	subs	r0, r0, r4
   1209c:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   120a0:	4288      	cmp	r0, r1
   120a2:	da01      	bge.n	120a8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   120a4:	4608      	mov	r0, r1
   120a6:	e002      	b.n	120ae <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   120a8:	287f      	cmp	r0, #127	; 0x7f
   120aa:	dd00      	ble.n	120ae <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   120ac:	207f      	movs	r0, #127	; 0x7f
   120ae:	4619      	mov	r1, r3
   120b0:	b240      	sxtb	r0, r0
   120b2:	f7f7 fbf7 	bl	98a4 <mpsl_tx_power_radio_supported_power_adjust>
   120b6:	7028      	strb	r0, [r5, #0]
   120b8:	706c      	strb	r4, [r5, #1]
   120ba:	2100      	movs	r1, #0
   120bc:	4420      	add	r0, r4
   120be:	70a9      	strb	r1, [r5, #2]
   120c0:	b240      	sxtb	r0, r0
   120c2:	bd70      	pop	{r4, r5, r6, pc}
   120c4:	1702080c 	.word	0x1702080c
   120c8:	0201010d 	.word	0x0201010d
   120cc:	01010909 	.word	0x01010909
   120d0:	18090206 	.word	0x18090206
   120d4:	01010318 	.word	0x01010318
   120d8:	03030909 	.word	0x03030909
   120dc:	01020305 	.word	0x01020305
   120e0:	24020223 	.word	0x24020223
   120e4:	04041009 	.word	0x04041009
   120e8:	0b0b0505 	.word	0x0b0b0505
   120ec:	0b04      	.short	0x0b04
   120ee:	2b          	.byte	0x2b
   120ef:	d8          	.byte	0xd8
   120f0:	f8f4f0ec 	.word	0xf8f4f0ec
   120f4:	030200fc 	.word	0x030200fc
   120f8:	07060504 	.word	0x07060504
   120fc:	00000008 	.word	0x00000008
	...
   12110:	01010100 	.word	0x01010100
   12114:	02020201 	.word	0x02020201
   12118:	03030302 	.word	0x03030302
   1211c:	04040403 	.word	0x04040403
   12120:	05050504 	.word	0x05050504
   12124:	07060605 	.word	0x07060605
   12128:	0b0a0908 	.word	0x0b0a0908
   1212c:	00000d0c 	.word	0x00000d0c
	...
   12140:	01010000 	.word	0x01010000
   12144:	02020101 	.word	0x02020101
   12148:	03030202 	.word	0x03030202
   1214c:	04040303 	.word	0x04040303
   12150:	05050404 	.word	0x05050404
   12154:	06060505 	.word	0x06060505
   12158:	00090806 	.word	0x00090806
   1215c:	00000000 	.word	0x00000000

00012160 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   12160:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   12162:	4d42      	ldr	r5, [pc, #264]	; (1226c <bt_init+0x10c>)
{
   12164:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   12166:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   1216a:	6899      	ldr	r1, [r3, #8]
   1216c:	f011 0101 	ands.w	r1, r1, #1
{
   12170:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   12172:	d120      	bne.n	121b6 <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   12174:	f107 0208 	add.w	r2, r7, #8
   12178:	f640 4003 	movw	r0, #3075	; 0xc03
   1217c:	f006 fc0a 	bl	18994 <bt_hci_cmd_send_sync>
		if (err) {
   12180:	4604      	mov	r4, r0
   12182:	2800      	cmp	r0, #0
   12184:	d16e      	bne.n	12264 <bt_init+0x104>
		hci_reset_complete(rsp);
   12186:	68ba      	ldr	r2, [r7, #8]
	uint8_t status = buf->data[0];
   12188:	68d3      	ldr	r3, [r2, #12]
	if (status) {
   1218a:	781b      	ldrb	r3, [r3, #0]
   1218c:	b983      	cbnz	r3, 121b0 <bt_init+0x50>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1218e:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
   12192:	4618      	mov	r0, r3
   12194:	f01a f9ca 	bl	2c52c <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12198:	f3bf 8f5b 	dmb	ish
   1219c:	f000 0009 	and.w	r0, r0, #9
   121a0:	e853 1f00 	ldrex	r1, [r3]
   121a4:	e843 0400 	strex	r4, r0, [r3]
   121a8:	2c00      	cmp	r4, #0
   121aa:	d1f9      	bne.n	121a0 <bt_init+0x40>
   121ac:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   121b0:	4610      	mov	r0, r2
   121b2:	f00e fcc7 	bl	20b44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   121b6:	f107 0208 	add.w	r2, r7, #8
   121ba:	2100      	movs	r1, #0
   121bc:	f241 0003 	movw	r0, #4099	; 0x1003
   121c0:	f006 fbe8 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   121c4:	4604      	mov	r4, r0
   121c6:	2800      	cmp	r0, #0
   121c8:	d14c      	bne.n	12264 <bt_init+0x104>
	read_local_features_complete(rsp);
   121ca:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   121cc:	4828      	ldr	r0, [pc, #160]	; (12270 <bt_init+0x110>)
   121ce:	68f1      	ldr	r1, [r6, #12]
   121d0:	2208      	movs	r2, #8
   121d2:	3101      	adds	r1, #1
   121d4:	f01a f883 	bl	2c2de <memcpy>
	net_buf_unref(rsp);
   121d8:	4630      	mov	r0, r6
   121da:	f00e fcb3 	bl	20b44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   121de:	4621      	mov	r1, r4
   121e0:	f107 0208 	add.w	r2, r7, #8
   121e4:	f241 0001 	movw	r0, #4097	; 0x1001
   121e8:	f006 fbd4 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   121ec:	4604      	mov	r4, r0
   121ee:	2800      	cmp	r0, #0
   121f0:	d138      	bne.n	12264 <bt_init+0x104>
	read_local_ver_complete(rsp);
   121f2:	68b8      	ldr	r0, [r7, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   121f4:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   121f6:	785a      	ldrb	r2, [r3, #1]
   121f8:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   121fc:	885a      	ldrh	r2, [r3, #2]
   121fe:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   12202:	791a      	ldrb	r2, [r3, #4]
   12204:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   12208:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   1220c:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   12210:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   12214:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
   12218:	f00e fc94 	bl	20b44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1221c:	4621      	mov	r1, r4
   1221e:	f107 0208 	add.w	r2, r7, #8
   12222:	f241 0002 	movw	r0, #4098	; 0x1002
   12226:	f006 fbb5 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   1222a:	4604      	mov	r4, r0
   1222c:	b9d0      	cbnz	r0, 12264 <bt_init+0x104>
	read_supported_commands_complete(rsp);
   1222e:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   12230:	4810      	ldr	r0, [pc, #64]	; (12274 <bt_init+0x114>)
   12232:	68f1      	ldr	r1, [r6, #12]
   12234:	2240      	movs	r2, #64	; 0x40
   12236:	3101      	adds	r1, #1
   12238:	f01a f851 	bl	2c2de <memcpy>
	net_buf_unref(rsp);
   1223c:	4630      	mov	r0, r6
   1223e:	f00e fc81 	bl	20b44 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   12242:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   12246:	065a      	lsls	r2, r3, #25
   12248:	d41a      	bmi.n	12280 <bt_init+0x120>
		LOG_ERR("Non-LE capable controller detected!");
   1224a:	4b0b      	ldr	r3, [pc, #44]	; (12278 <bt_init+0x118>)
   1224c:	61fb      	str	r3, [r7, #28]
   1224e:	2302      	movs	r3, #2
   12250:	480a      	ldr	r0, [pc, #40]	; (1227c <bt_init+0x11c>)
   12252:	61bb      	str	r3, [r7, #24]
   12254:	f107 0218 	add.w	r2, r7, #24
   12258:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1225c:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
   12260:	f01a f981 	bl	2c566 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   12264:	4620      	mov	r0, r4
   12266:	3724      	adds	r7, #36	; 0x24
   12268:	46bd      	mov	sp, r7
   1226a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1226c:	200004f0 	.word	0x200004f0
   12270:	20000568 	.word	0x20000568
   12274:	20000570 	.word	0x20000570
   12278:	00032318 	.word	0x00032318
   1227c:	000302b4 	.word	0x000302b4
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   12280:	4621      	mov	r1, r4
   12282:	f107 0208 	add.w	r2, r7, #8
   12286:	f242 0003 	movw	r0, #8195	; 0x2003
   1228a:	f006 fb83 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   1228e:	4604      	mov	r4, r0
   12290:	2800      	cmp	r0, #0
   12292:	d1e7      	bne.n	12264 <bt_init+0x104>
	read_le_features_complete(rsp);
   12294:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   12296:	48b8      	ldr	r0, [pc, #736]	; (12578 <bt_init+0x418>)
   12298:	68f1      	ldr	r1, [r6, #12]
   1229a:	2208      	movs	r2, #8
   1229c:	3101      	adds	r1, #1
   1229e:	f01a f81e 	bl	2c2de <memcpy>
	net_buf_unref(rsp);
   122a2:	4630      	mov	r0, r6
   122a4:	f00e fc4e 	bl	20b44 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   122a8:	4621      	mov	r1, r4
   122aa:	f107 0208 	add.w	r2, r7, #8
   122ae:	f242 0002 	movw	r0, #8194	; 0x2002
   122b2:	f006 fb6f 	bl	18994 <bt_hci_cmd_send_sync>
		if (err) {
   122b6:	4604      	mov	r4, r0
   122b8:	2800      	cmp	r0, #0
   122ba:	d1d3      	bne.n	12264 <bt_init+0x104>
		le_read_buffer_size_complete(rsp);
   122bc:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   122be:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   122c0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   122c4:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   122c6:	b141      	cbz	r1, 122da <bt_init+0x17a>
   122c8:	78d9      	ldrb	r1, [r3, #3]
   122ca:	b131      	cbz	r1, 122da <bt_init+0x17a>
	bt_dev.le.acl_mtu = acl_mtu;
   122cc:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   122d0:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   122d2:	48aa      	ldr	r0, [pc, #680]	; (1257c <bt_init+0x41c>)
   122d4:	4611      	mov	r1, r2
   122d6:	f01d f99c 	bl	2f612 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   122da:	4620      	mov	r0, r4
   122dc:	f00e fc32 	bl	20b44 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   122e0:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
   122e4:	f016 0620 	ands.w	r6, r6, #32
   122e8:	d118      	bne.n	1231c <bt_init+0x1bc>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   122ea:	2102      	movs	r1, #2
   122ec:	f640 406d 	movw	r0, #3181	; 0xc6d
   122f0:	f006 fb16 	bl	18920 <bt_hci_cmd_create>
		if (!buf) {
   122f4:	4604      	mov	r4, r0
   122f6:	2800      	cmp	r0, #0
   122f8:	f000 80e6 	beq.w	124c8 <bt_init+0x368>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   122fc:	2102      	movs	r1, #2
   122fe:	300c      	adds	r0, #12
   12300:	f01c f9ff 	bl	2e702 <net_buf_simple_add>
		cp_le->le = 0x01;
   12304:	2301      	movs	r3, #1
   12306:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   12308:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1230a:	4621      	mov	r1, r4
   1230c:	4632      	mov	r2, r6
   1230e:	f640 406d 	movw	r0, #3181	; 0xc6d
   12312:	f006 fb3f 	bl	18994 <bt_hci_cmd_send_sync>
		if (err) {
   12316:	4604      	mov	r4, r0
   12318:	2800      	cmp	r0, #0
   1231a:	d1a3      	bne.n	12264 <bt_init+0x104>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1231c:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   12320:	071b      	lsls	r3, r3, #28
   12322:	d513      	bpl.n	1234c <bt_init+0x1ec>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   12324:	f107 0208 	add.w	r2, r7, #8
   12328:	2100      	movs	r1, #0
   1232a:	f242 001c 	movw	r0, #8220	; 0x201c
   1232e:	f006 fb31 	bl	18994 <bt_hci_cmd_send_sync>
		if (err) {
   12332:	4604      	mov	r4, r0
   12334:	2800      	cmp	r0, #0
   12336:	d195      	bne.n	12264 <bt_init+0x104>
		le_read_supp_states_complete(rsp);
   12338:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1233a:	68c3      	ldr	r3, [r0, #12]
   1233c:	f8d3 2001 	ldr.w	r2, [r3, #1]
   12340:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   12344:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
   12348:	f00e fbfc 	bl	20b44 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1234c:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   12350:	069e      	lsls	r6, r3, #26
   12352:	d521      	bpl.n	12398 <bt_init+0x238>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12354:	1d39      	adds	r1, r7, #4
   12356:	1cb8      	adds	r0, r7, #2
   12358:	f006 fb9c 	bl	18a94 <hci_le_read_max_data_len>
		if (err) {
   1235c:	4604      	mov	r4, r0
   1235e:	2800      	cmp	r0, #0
   12360:	d180      	bne.n	12264 <bt_init+0x104>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   12362:	2104      	movs	r1, #4
   12364:	f242 0024 	movw	r0, #8228	; 0x2024
   12368:	f006 fada 	bl	18920 <bt_hci_cmd_create>
		if (!buf) {
   1236c:	4606      	mov	r6, r0
   1236e:	2800      	cmp	r0, #0
   12370:	f000 80aa 	beq.w	124c8 <bt_init+0x368>
   12374:	2104      	movs	r1, #4
   12376:	300c      	adds	r0, #12
   12378:	f01c f9c3 	bl	2e702 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1237c:	887b      	ldrh	r3, [r7, #2]
   1237e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   12380:	88bb      	ldrh	r3, [r7, #4]
   12382:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   12384:	4622      	mov	r2, r4
   12386:	4631      	mov	r1, r6
   12388:	f242 0024 	movw	r0, #8228	; 0x2024
   1238c:	f006 fb02 	bl	18994 <bt_hci_cmd_send_sync>
		if (err) {
   12390:	4604      	mov	r4, r0
   12392:	2800      	cmp	r0, #0
   12394:	f47f af66 	bne.w	12264 <bt_init+0x104>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   12398:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   1239c:	065c      	lsls	r4, r3, #25
   1239e:	d52b      	bpl.n	123f8 <bt_init+0x298>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
   123a0:	2102      	movs	r1, #2
   123a2:	f242 002e 	movw	r0, #8238	; 0x202e
   123a6:	f006 fabb 	bl	18920 <bt_hci_cmd_create>
		if (!buf) {
   123aa:	4604      	mov	r4, r0
   123ac:	2800      	cmp	r0, #0
   123ae:	f000 808b 	beq.w	124c8 <bt_init+0x368>
   123b2:	2102      	movs	r1, #2
   123b4:	300c      	adds	r0, #12
   123b6:	f01c f9a4 	bl	2e702 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(bt_dev.rpa_timeout);
   123ba:	f8b5 31a8 	ldrh.w	r3, [r5, #424]	; 0x1a8
   123be:	8003      	strh	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
   123c0:	4621      	mov	r1, r4
   123c2:	2200      	movs	r2, #0
   123c4:	f242 002e 	movw	r0, #8238	; 0x202e
   123c8:	f006 fae4 	bl	18994 <bt_hci_cmd_send_sync>
		if (err) {
   123cc:	4604      	mov	r4, r0
   123ce:	2800      	cmp	r0, #0
   123d0:	f47f af48 	bne.w	12264 <bt_init+0x104>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   123d4:	4601      	mov	r1, r0
   123d6:	f107 0208 	add.w	r2, r7, #8
   123da:	f242 002a 	movw	r0, #8234	; 0x202a
   123de:	f006 fad9 	bl	18994 <bt_hci_cmd_send_sync>
		if (err) {
   123e2:	4604      	mov	r4, r0
   123e4:	2800      	cmp	r0, #0
   123e6:	f47f af3d 	bne.w	12264 <bt_init+0x104>
		le_read_resolving_list_size_complete(rsp);
   123ea:	68b8      	ldr	r0, [r7, #8]
	bt_dev.le.rl_size = rp->rl_size;
   123ec:	68c3      	ldr	r3, [r0, #12]
   123ee:	785b      	ldrb	r3, [r3, #1]
   123f0:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
		net_buf_unref(rsp);
   123f4:	f00e fba6 	bl	20b44 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   123f8:	2108      	movs	r1, #8
   123fa:	f242 0001 	movw	r0, #8193	; 0x2001
   123fe:	f006 fa8f 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   12402:	4604      	mov	r4, r0
   12404:	2800      	cmp	r0, #0
   12406:	d05f      	beq.n	124c8 <bt_init+0x368>
   12408:	2108      	movs	r1, #8
   1240a:	300c      	adds	r0, #12
   1240c:	f01c f979 	bl	2e702 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   12410:	f895 10d8 	ldrb.w	r1, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   12414:	f011 0f40 	tst.w	r1, #64	; 0x40
   12418:	4602      	mov	r2, r0
   1241a:	f240 2302 	movw	r3, #514	; 0x202
   1241e:	bf08      	it	eq
   12420:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   12422:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   12424:	bf4c      	ite	mi
   12426:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1242a:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1242e:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   12430:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   12434:	bf48      	it	mi
   12436:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1243a:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1243e:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   12442:	bf18      	it	ne
   12444:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   12448:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1244c:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   1244e:	bf48      	it	mi
   12450:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   12454:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   12456:	bf08      	it	eq
   12458:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   1245c:	2100      	movs	r1, #0
   1245e:	f01a f891 	bl	2c584 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   12462:	4621      	mov	r1, r4
   12464:	2200      	movs	r2, #0
   12466:	f242 0001 	movw	r0, #8193	; 0x2001
   1246a:	f006 fa93 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   1246e:	4604      	mov	r4, r0
   12470:	2800      	cmp	r0, #0
   12472:	f47f aef7 	bne.w	12264 <bt_init+0x104>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   12476:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
   1247a:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1247e:	0698      	lsls	r0, r3, #26
   12480:	d425      	bmi.n	124ce <bt_init+0x36e>
	if (bt_dev.le.acl_mtu) {
   12482:	b9d1      	cbnz	r1, 124ba <bt_init+0x35a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   12484:	f107 0208 	add.w	r2, r7, #8
   12488:	f241 0005 	movw	r0, #4101	; 0x1005
   1248c:	f006 fa82 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   12490:	4604      	mov	r4, r0
   12492:	2800      	cmp	r0, #0
   12494:	f47f aee6 	bne.w	12264 <bt_init+0x104>
	if (bt_dev.le.acl_mtu) {
   12498:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
   1249c:	68bc      	ldr	r4, [r7, #8]
	if (bt_dev.le.acl_mtu) {
   1249e:	b94b      	cbnz	r3, 124b4 <bt_init+0x354>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   124a0:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   124a2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   124a6:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   124aa:	889a      	ldrh	r2, [r3, #4]
   124ac:	4833      	ldr	r0, [pc, #204]	; (1257c <bt_init+0x41c>)
   124ae:	4611      	mov	r1, r2
   124b0:	f01d f8af 	bl	2f612 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   124b4:	4620      	mov	r0, r4
   124b6:	f00e fb45 	bl	20b44 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   124ba:	2108      	movs	r1, #8
   124bc:	f640 4001 	movw	r0, #3073	; 0xc01
   124c0:	f006 fa2e 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   124c4:	4604      	mov	r4, r0
   124c6:	b990      	cbnz	r0, 124ee <bt_init+0x38e>
		return -ENOBUFS;
   124c8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   124cc:	e6ca      	b.n	12264 <bt_init+0x104>
	else if (!bt_dev.le.acl_mtu) {
   124ce:	2900      	cmp	r1, #0
   124d0:	d1f3      	bne.n	124ba <bt_init+0x35a>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   124d2:	4b2b      	ldr	r3, [pc, #172]	; (12580 <bt_init+0x420>)
   124d4:	61fb      	str	r3, [r7, #28]
   124d6:	2302      	movs	r3, #2
   124d8:	482a      	ldr	r0, [pc, #168]	; (12584 <bt_init+0x424>)
   124da:	61bb      	str	r3, [r7, #24]
   124dc:	f107 0218 	add.w	r2, r7, #24
   124e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   124e4:	f01a f83f 	bl	2c566 <z_log_msg_static_create.constprop.0>
		return -EIO;
   124e8:	f06f 0404 	mvn.w	r4, #4
   124ec:	e6ba      	b.n	12264 <bt_init+0x104>
   124ee:	2108      	movs	r1, #8
   124f0:	300c      	adds	r0, #12
   124f2:	f01c f906 	bl	2e702 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   124f6:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   124fa:	07d9      	lsls	r1, r3, #31
   124fc:	4602      	mov	r2, r0
   124fe:	d430      	bmi.n	12562 <bt_init+0x402>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   12500:	4821      	ldr	r0, [pc, #132]	; (12588 <bt_init+0x428>)
   12502:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   12506:	f01a f83d 	bl	2c584 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1250a:	4621      	mov	r1, r4
   1250c:	2200      	movs	r2, #0
   1250e:	f640 4001 	movw	r0, #3073	; 0xc01
   12512:	f006 fa3f 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   12516:	4604      	mov	r4, r0
   12518:	2800      	cmp	r0, #0
   1251a:	f47f aea3 	bne.w	12264 <bt_init+0x104>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1251e:	4601      	mov	r1, r0
   12520:	1d3a      	adds	r2, r7, #4
   12522:	f64f 4001 	movw	r0, #64513	; 0xfc01
   12526:	f006 fa35 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   1252a:	b388      	cbz	r0, 12590 <bt_init+0x430>
		LOG_WRN("Vendor HCI extensions not available");
   1252c:	4b17      	ldr	r3, [pc, #92]	; (1258c <bt_init+0x42c>)
			LOG_WRN("Failed to read supported vendor features");
   1252e:	61fb      	str	r3, [r7, #28]
   12530:	2302      	movs	r3, #2
   12532:	4814      	ldr	r0, [pc, #80]	; (12584 <bt_init+0x424>)
   12534:	61bb      	str	r3, [r7, #24]
   12536:	f107 0218 	add.w	r2, r7, #24
   1253a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1253e:	f01a f812 	bl	2c566 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   12542:	f007 ff27 	bl	1a394 <bt_id_init>
	if (err) {
   12546:	4604      	mov	r4, r0
   12548:	2800      	cmp	r0, #0
   1254a:	f47f ae8b 	bne.w	12264 <bt_init+0x104>
		err = bt_conn_init();
   1254e:	f009 faa7 	bl	1baa0 <bt_conn_init>
		if (err) {
   12552:	4604      	mov	r4, r0
   12554:	2800      	cmp	r0, #0
   12556:	f47f ae85 	bne.w	12264 <bt_init+0x104>
   1255a:	f007 f8b3 	bl	196c4 <bt_init.part.0>
   1255e:	4604      	mov	r4, r0
   12560:	e680      	b.n	12264 <bt_init+0x104>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   12562:	a103      	add	r1, pc, #12	; (adr r1, 12570 <bt_init+0x410>)
   12564:	e9d1 0100 	ldrd	r0, r1, [r1]
   12568:	e7cd      	b.n	12506 <bt_init+0x3a6>
   1256a:	bf00      	nop
   1256c:	f3af 8000 	nop.w
   12570:	02008890 	.word	0x02008890
   12574:	20008000 	.word	0x20008000
   12578:	200005c8 	.word	0x200005c8
   1257c:	200005f8 	.word	0x200005f8
   12580:	0003233c 	.word	0x0003233c
   12584:	000302b4 	.word	0x000302b4
   12588:	02008810 	.word	0x02008810
   1258c:	0003235f 	.word	0x0003235f
	rp.info = (void *)rsp->data;
   12590:	687b      	ldr	r3, [r7, #4]
   12592:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   12594:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   12598:	2b03      	cmp	r3, #3
		return plat_str[platform];
   1259a:	bf96      	itet	ls
   1259c:	4a45      	ldrls	r2, [pc, #276]	; (126b4 <bt_init+0x554>)
	return "unknown";
   1259e:	4946      	ldrhi	r1, [pc, #280]	; (126b8 <bt_init+0x558>)
		return plat_str[platform];
   125a0:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   125a4:	466e      	mov	r6, sp
   125a6:	b08a      	sub	sp, #40	; 0x28
   125a8:	466a      	mov	r2, sp
   125aa:	4844      	ldr	r0, [pc, #272]	; (126bc <bt_init+0x55c>)
   125ac:	61d3      	str	r3, [r2, #28]
   125ae:	f44f 7300 	mov.w	r3, #512	; 0x200
   125b2:	8413      	strh	r3, [r2, #32]
   125b4:	4b42      	ldr	r3, [pc, #264]	; (126c0 <bt_init+0x560>)
   125b6:	e9c2 0105 	strd	r0, r1, [r2, #20]
   125ba:	f842 3f10 	str.w	r3, [r2, #16]!
   125be:	4841      	ldr	r0, [pc, #260]	; (126c4 <bt_init+0x564>)
   125c0:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   125c4:	f019 ffcf 	bl	2c566 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   125c8:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
   125cc:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   125d0:	2a02      	cmp	r2, #2
   125d2:	46b5      	mov	sp, r6
   125d4:	d149      	bne.n	1266a <bt_init+0x50a>
	if (variant < ARRAY_SIZE(nordic_str)) {
   125d6:	2b03      	cmp	r3, #3
   125d8:	d847      	bhi.n	1266a <bt_init+0x50a>
		return nordic_str[variant];
   125da:	4a3b      	ldr	r2, [pc, #236]	; (126c8 <bt_init+0x568>)
   125dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   125e0:	466e      	mov	r6, sp
   125e2:	b08a      	sub	sp, #40	; 0x28
   125e4:	466a      	mov	r2, sp
   125e6:	4839      	ldr	r0, [pc, #228]	; (126cc <bt_init+0x56c>)
   125e8:	61d3      	str	r3, [r2, #28]
   125ea:	f44f 7300 	mov.w	r3, #512	; 0x200
   125ee:	8413      	strh	r3, [r2, #32]
   125f0:	4b33      	ldr	r3, [pc, #204]	; (126c0 <bt_init+0x560>)
   125f2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   125f6:	f842 3f10 	str.w	r3, [r2, #16]!
   125fa:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   125fe:	4831      	ldr	r0, [pc, #196]	; (126c4 <bt_init+0x564>)
   12600:	f019 ffb1 	bl	2c566 <z_log_msg_static_create.constprop.0>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   12604:	7963      	ldrb	r3, [r4, #5]
   12606:	f894 c006 	ldrb.w	ip, [r4, #6]
   1260a:	f8d4 0009 	ldr.w	r0, [r4, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   1260e:	2b03      	cmp	r3, #3
   12610:	46b5      	mov	sp, r6
		return var_str[variant];
   12612:	bf98      	it	ls
   12614:	4a2e      	ldrls	r2, [pc, #184]	; (126d0 <bt_init+0x570>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   12616:	f8b4 6007 	ldrh.w	r6, [r4, #7]
		return var_str[variant];
   1261a:	bf94      	ite	ls
   1261c:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
   12620:	4925      	ldrhi	r1, [pc, #148]	; (126b8 <bt_init+0x558>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   12622:	466c      	mov	r4, sp
   12624:	b08c      	sub	sp, #48	; 0x30
   12626:	466a      	mov	r2, sp
   12628:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 126d4 <bt_init+0x574>
   1262c:	e9c2 3c07 	strd	r3, ip, [r2, #28]
   12630:	f44f 7300 	mov.w	r3, #512	; 0x200
   12634:	8593      	strh	r3, [r2, #44]	; 0x2c
   12636:	4b28      	ldr	r3, [pc, #160]	; (126d8 <bt_init+0x578>)
   12638:	e9c2 e105 	strd	lr, r1, [r2, #20]
   1263c:	e9c2 6009 	strd	r6, r0, [r2, #36]	; 0x24
   12640:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   12644:	f842 3f10 	str.w	r3, [r2, #16]!
   12648:	481e      	ldr	r0, [pc, #120]	; (126c4 <bt_init+0x564>)
   1264a:	f019 ff8c 	bl	2c566 <z_log_msg_static_create.constprop.0>
   1264e:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
   12650:	6878      	ldr	r0, [r7, #4]
   12652:	f00e fa77 	bl	20b44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   12656:	1d3a      	adds	r2, r7, #4
   12658:	2100      	movs	r1, #0
   1265a:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1265e:	f006 f999 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   12662:	4604      	mov	r4, r0
   12664:	b118      	cbz	r0, 1266e <bt_init+0x50e>
		LOG_WRN("Failed to read supported vendor commands");
   12666:	4b1d      	ldr	r3, [pc, #116]	; (126dc <bt_init+0x57c>)
   12668:	e761      	b.n	1252e <bt_init+0x3ce>
		return "unknown";
   1266a:	4913      	ldr	r1, [pc, #76]	; (126b8 <bt_init+0x558>)
   1266c:	e7b8      	b.n	125e0 <bt_init+0x480>
	rp.cmds = (void *)rsp->data;
   1266e:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   12670:	481b      	ldr	r0, [pc, #108]	; (126e0 <bt_init+0x580>)
   12672:	68f1      	ldr	r1, [r6, #12]
   12674:	2202      	movs	r2, #2
   12676:	3101      	adds	r1, #1
   12678:	f019 fe31 	bl	2c2de <memcpy>
	net_buf_unref(rsp);
   1267c:	4630      	mov	r0, r6
   1267e:	f00e fa61 	bl	20b44 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   12682:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   12686:	075b      	lsls	r3, r3, #29
   12688:	f57f af5b 	bpl.w	12542 <bt_init+0x3e2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1268c:	1d3a      	adds	r2, r7, #4
   1268e:	4621      	mov	r1, r4
   12690:	f64f 4003 	movw	r0, #64515	; 0xfc03
   12694:	f006 f97e 	bl	18994 <bt_hci_cmd_send_sync>
		if (err) {
   12698:	b108      	cbz	r0, 1269e <bt_init+0x53e>
			LOG_WRN("Failed to read supported vendor features");
   1269a:	4b12      	ldr	r3, [pc, #72]	; (126e4 <bt_init+0x584>)
   1269c:	e747      	b.n	1252e <bt_init+0x3ce>
		rp.feat = (void *)rsp->data;
   1269e:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   126a0:	4811      	ldr	r0, [pc, #68]	; (126e8 <bt_init+0x588>)
   126a2:	68e1      	ldr	r1, [r4, #12]
   126a4:	2201      	movs	r2, #1
   126a6:	4411      	add	r1, r2
   126a8:	f019 fe19 	bl	2c2de <memcpy>
		net_buf_unref(rsp);
   126ac:	4620      	mov	r0, r4
   126ae:	f00e fa49 	bl	20b44 <net_buf_unref>
   126b2:	e746      	b.n	12542 <bt_init+0x3e2>
   126b4:	000307ac 	.word	0x000307ac
   126b8:	00031db1 	.word	0x00031db1
   126bc:	00032383 	.word	0x00032383
   126c0:	01000004 	.word	0x01000004
   126c4:	000302b4 	.word	0x000302b4
   126c8:	0003079c 	.word	0x0003079c
   126cc:	0003239c 	.word	0x0003239c
   126d0:	0003078c 	.word	0x0003078c
   126d4:	000323b4 	.word	0x000323b4
   126d8:	01000007 	.word	0x01000007
   126dc:	000323e1 	.word	0x000323e1
   126e0:	200005b1 	.word	0x200005b1
   126e4:	0003240a 	.word	0x0003240a
   126e8:	200005b0 	.word	0x200005b0

000126ec <main>:
		k_sleep(K_MSEC(SYNC_INTERVAL));
	}
}

void main(void)
{
   126ec:	b510      	push	{r4, lr}
   126ee:	b086      	sub	sp, #24
	int err;

	LOG_INF("Starting DCLK Controller \n");
   126f0:	4b18      	ldr	r3, [pc, #96]	; (12754 <main+0x68>)
   126f2:	9305      	str	r3, [sp, #20]
   126f4:	2402      	movs	r4, #2
   126f6:	9404      	str	r4, [sp, #16]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   126f8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   126fc:	4816      	ldr	r0, [pc, #88]	; (12758 <main+0x6c>)
   126fe:	2300      	movs	r3, #0
   12700:	aa04      	add	r2, sp, #16
   12702:	f002 fa5f 	bl	14bc4 <z_impl_z_log_msg_static_create>

	err = interface_init(&inter_callbacks);
   12706:	4815      	ldr	r0, [pc, #84]	; (1275c <main+0x70>)
   12708:	f000 fb42 	bl	12d90 <interface_init>
   1270c:	4601      	mov	r1, r0
	if (err)
   1270e:	b128      	cbz	r0, 1271c <main+0x30>
	{
		printk("Interface init failed (err %d)\n", err);
   12710:	4813      	ldr	r0, [pc, #76]	; (12760 <main+0x74>)
	for (;;)
	{
		//dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
   12712:	b006      	add	sp, #24
   12714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Failed to init LBS (err:%d)\n", err);
   12718:	f017 bf1b 	b.w	2a552 <printk>
	err= bt_unpair(BT_ID_DEFAULT,BT_ADDR_LE_ANY);
   1271c:	4911      	ldr	r1, [pc, #68]	; (12764 <main+0x78>)
   1271e:	f006 fbd5 	bl	18ecc <bt_unpair>
	err = dclk_init(&app_callbacks);
   12722:	4811      	ldr	r0, [pc, #68]	; (12768 <main+0x7c>)
   12724:	f000 fa06 	bl	12b34 <dclk_init>
	if (err)
   12728:	4603      	mov	r3, r0
   1272a:	b110      	cbz	r0, 12732 <main+0x46>
		printk("Failed to init LBS (err:%d)\n", err);
   1272c:	4601      	mov	r1, r0
   1272e:	480f      	ldr	r0, [pc, #60]	; (1276c <main+0x80>)
   12730:	e7ef      	b.n	12712 <main+0x26>
	LOG_INF("Bluetooth initialized\n");
   12732:	4a0f      	ldr	r2, [pc, #60]	; (12770 <main+0x84>)
   12734:	e9cd 4204 	strd	r4, r2, [sp, #16]
   12738:	4807      	ldr	r0, [pc, #28]	; (12758 <main+0x6c>)
   1273a:	aa04      	add	r2, sp, #16
   1273c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   12740:	f002 fa40 	bl	14bc4 <z_impl_z_log_msg_static_create>
	start_advertising();
   12744:	f000 fa22 	bl	12b8c <start_advertising>
	return z_impl_k_sleep(timeout);
   12748:	2100      	movs	r1, #0
   1274a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1274e:	f014 faa5 	bl	26c9c <z_impl_k_sleep>
	for (;;)
   12752:	e7f9      	b.n	12748 <main+0x5c>
   12754:	00030fd4 	.word	0x00030fd4
   12758:	0003025c 	.word	0x0003025c
   1275c:	200006a0 	.word	0x200006a0
   12760:	00030fef 	.word	0x00030fef
   12764:	00031bf1 	.word	0x00031bf1
   12768:	200006a8 	.word	0x200006a8
   1276c:	0003100f 	.word	0x0003100f
   12770:	0003102c 	.word	0x0003102c

00012774 <dclk_ccc_state_cfg_changed>:


/* state configuration change callback function */
static void dclk_ccc_state_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	notify_state_enabled = (value == BT_GATT_CCC_NOTIFY);
   12774:	1e4b      	subs	r3, r1, #1
   12776:	4259      	negs	r1, r3
   12778:	4159      	adcs	r1, r3
   1277a:	4b01      	ldr	r3, [pc, #4]	; (12780 <dclk_ccc_state_cfg_changed+0xc>)
   1277c:	7019      	strb	r1, [r3, #0]
}
   1277e:	4770      	bx	lr
   12780:	200055e2 	.word	0x200055e2

00012784 <dclk_ccc_clock_cfg_changed>:

/* clock configuration change callback function */
static void dclk_ccc_clock_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	notify_clock_enabled = (value == BT_GATT_CCC_NOTIFY);
   12784:	1e4b      	subs	r3, r1, #1
   12786:	4259      	negs	r1, r3
   12788:	4159      	adcs	r1, r3
   1278a:	4b01      	ldr	r3, [pc, #4]	; (12790 <dclk_ccc_clock_cfg_changed+0xc>)
   1278c:	7019      	strb	r1, [r3, #0]
}
   1278e:	4770      	bx	lr
   12790:	200055e1 	.word	0x200055e1

00012794 <read_clock>:
	return 0;
}

static ssize_t read_clock(struct bt_conn *conn, const struct bt_gatt_attr *attr, void *buf,
						  uint16_t len, uint16_t offset)
{
   12794:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12798:	461f      	mov	r7, r3
	// get a pointer to state which is passed in the BT_GATT_CHARACTERISTIC() and stored in attr->user_data
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, (void *)conn);

	if (dclk_cb.clock_cb)
   1279a:	4b0d      	ldr	r3, [pc, #52]	; (127d0 <read_clock+0x3c>)
{
   1279c:	4605      	mov	r5, r0
	if (dclk_cb.clock_cb)
   1279e:	6818      	ldr	r0, [r3, #0]
{
   127a0:	460c      	mov	r4, r1
   127a2:	4616      	mov	r6, r2
	if (dclk_cb.clock_cb)
   127a4:	b180      	cbz	r0, 127c8 <read_clock+0x34>
	const char *value = attr->user_data;
   127a6:	f8d1 800c 	ldr.w	r8, [r1, #12]
	{
		// Call the application callback function to update the get the current value of the button
		clock = dclk_cb.clock_cb();
   127aa:	4780      	blx	r0
   127ac:	4b09      	ldr	r3, [pc, #36]	; (127d4 <read_clock+0x40>)
   127ae:	6018      	str	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(*value));
   127b0:	2301      	movs	r3, #1
   127b2:	e9cd 8301 	strd	r8, r3, [sp, #4]
   127b6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   127ba:	9300      	str	r3, [sp, #0]
   127bc:	4632      	mov	r2, r6
   127be:	463b      	mov	r3, r7
   127c0:	4621      	mov	r1, r4
   127c2:	4628      	mov	r0, r5
   127c4:	f01b f9d5 	bl	2db72 <bt_gatt_attr_read>
	}

	return 0;
}
   127c8:	b004      	add	sp, #16
   127ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   127ce:	bf00      	nop
   127d0:	200032b0 	.word	0x200032b0
   127d4:	200032b8 	.word	0x200032b8

000127d8 <read_state>:
{
   127d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   127dc:	461f      	mov	r7, r3
	if (dclk_cb.state_cb)
   127de:	4b0d      	ldr	r3, [pc, #52]	; (12814 <read_state+0x3c>)
{
   127e0:	4605      	mov	r5, r0
	if (dclk_cb.state_cb)
   127e2:	6858      	ldr	r0, [r3, #4]
{
   127e4:	460c      	mov	r4, r1
   127e6:	4616      	mov	r6, r2
	if (dclk_cb.state_cb)
   127e8:	b180      	cbz	r0, 1280c <read_state+0x34>
	const char *value = attr->user_data;
   127ea:	f8d1 800c 	ldr.w	r8, [r1, #12]
		state = dclk_cb.state_cb();
   127ee:	4780      	blx	r0
   127f0:	4b09      	ldr	r3, [pc, #36]	; (12818 <read_state+0x40>)
   127f2:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(*value));
   127f4:	2301      	movs	r3, #1
   127f6:	e9cd 8301 	strd	r8, r3, [sp, #4]
   127fa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   127fe:	9300      	str	r3, [sp, #0]
   12800:	4632      	mov	r2, r6
   12802:	463b      	mov	r3, r7
   12804:	4621      	mov	r1, r4
   12806:	4628      	mov	r0, r5
   12808:	f01b f9b3 	bl	2db72 <bt_gatt_attr_read>
}
   1280c:	b004      	add	sp, #16
   1280e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12812:	bf00      	nop
   12814:	200032b0 	.word	0x200032b0
   12818:	200055e0 	.word	0x200055e0

0001281c <on_disconnected>:
{
   1281c:	b598      	push	{r3, r4, r7, lr}
   1281e:	af00      	add	r7, sp, #0
	LOG_INF("Disconnected (reason %u)\n", reason);
   12820:	466c      	mov	r4, sp
   12822:	b088      	sub	sp, #32
   12824:	466a      	mov	r2, sp
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <on_disconnected+0x2c>)
   12828:	4808      	ldr	r0, [pc, #32]	; (1284c <on_disconnected+0x30>)
   1282a:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1282e:	2303      	movs	r3, #3
   12830:	f842 3f10 	str.w	r3, [r2, #16]!
   12834:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   12838:	f017 fd78 	bl	2a32c <z_log_msg_static_create.constprop.0>
	k_work_submit(&advertise_acceptlist_work);
   1283c:	4804      	ldr	r0, [pc, #16]	; (12850 <on_disconnected+0x34>)
   1283e:	46a5      	mov	sp, r4
   12840:	f013 fec8 	bl	265d4 <k_work_submit>
}
   12844:	46bd      	mov	sp, r7
   12846:	bd98      	pop	{r3, r4, r7, pc}
   12848:	0003105a 	.word	0x0003105a
   1284c:	0003025c 	.word	0x0003025c
   12850:	2000070c 	.word	0x2000070c

00012854 <on_connected.part.0>:
static void on_connected(struct bt_conn *conn, uint8_t err)
   12854:	b580      	push	{r7, lr}
   12856:	af00      	add	r7, sp, #0
		LOG_INF("Connection failed (err %u)\n", err);
   12858:	b088      	sub	sp, #32
   1285a:	466a      	mov	r2, sp
   1285c:	4b06      	ldr	r3, [pc, #24]	; (12878 <on_connected.part.0+0x24>)
   1285e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12862:	2303      	movs	r3, #3
   12864:	f842 3f10 	str.w	r3, [r2, #16]!
   12868:	4804      	ldr	r0, [pc, #16]	; (1287c <on_connected.part.0+0x28>)
   1286a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1286e:	f017 fd5d 	bl	2a32c <z_log_msg_static_create.constprop.0>
}
   12872:	46bd      	mov	sp, r7
   12874:	bd80      	pop	{r7, pc}
   12876:	bf00      	nop
   12878:	00031074 	.word	0x00031074
   1287c:	0003025c 	.word	0x0003025c

00012880 <on_connected>:
{
   12880:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (err)
   12882:	4608      	mov	r0, r1
   12884:	b121      	cbz	r1, 12890 <on_connected+0x10>
}
   12886:	b007      	add	sp, #28
   12888:	f85d eb04 	ldr.w	lr, [sp], #4
   1288c:	f7ff bfe2 	b.w	12854 <on_connected.part.0>
	LOG_INF("Connected\n");
   12890:	4b06      	ldr	r3, [pc, #24]	; (128ac <on_connected+0x2c>)
   12892:	9305      	str	r3, [sp, #20]
   12894:	4806      	ldr	r0, [pc, #24]	; (128b0 <on_connected+0x30>)
   12896:	2302      	movs	r3, #2
   12898:	aa04      	add	r2, sp, #16
   1289a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1289e:	9304      	str	r3, [sp, #16]
   128a0:	f017 fd44 	bl	2a32c <z_log_msg_static_create.constprop.0>
}
   128a4:	b007      	add	sp, #28
   128a6:	f85d fb04 	ldr.w	pc, [sp], #4
   128aa:	bf00      	nop
   128ac:	00031090 	.word	0x00031090
   128b0:	0003025c 	.word	0x0003025c

000128b4 <setup_accept_list_cb.part.0>:
static void setup_accept_list_cb(const struct bt_bond_info *info, void *user_data)
   128b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   128b6:	af00      	add	r7, sp, #0
   128b8:	4606      	mov	r6, r0
   128ba:	460c      	mov	r4, r1
	int err = bt_le_filter_accept_list_add(&info->addr);
   128bc:	f006 ffd2 	bl	19864 <bt_le_filter_accept_list_add>
	LOG_INF("Added following peer to accept list: %x %x\n", info->addr.a.val[0],
   128c0:	7871      	ldrb	r1, [r6, #1]
   128c2:	78b3      	ldrb	r3, [r6, #2]
   128c4:	466e      	mov	r6, sp
   128c6:	b088      	sub	sp, #32
	int err = bt_le_filter_accept_list_add(&info->addr);
   128c8:	4605      	mov	r5, r0
	LOG_INF("Added following peer to accept list: %x %x\n", info->addr.a.val[0],
   128ca:	466a      	mov	r2, sp
   128cc:	4811      	ldr	r0, [pc, #68]	; (12914 <setup_accept_list_cb.part.0+0x60>)
   128ce:	61d3      	str	r3, [r2, #28]
   128d0:	2304      	movs	r3, #4
   128d2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   128d6:	f842 3f10 	str.w	r3, [r2, #16]!
   128da:	480f      	ldr	r0, [pc, #60]	; (12918 <setup_accept_list_cb.part.0+0x64>)
   128dc:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
   128e0:	f017 fd24 	bl	2a32c <z_log_msg_static_create.constprop.0>
   128e4:	46b5      	mov	sp, r6
	if (err)
   128e6:	b195      	cbz	r5, 1290e <setup_accept_list_cb.part.0+0x5a>
		LOG_INF("Cannot add peer to filter accept list (err: %d)\n", err);
   128e8:	b088      	sub	sp, #32
   128ea:	466a      	mov	r2, sp
   128ec:	4b0b      	ldr	r3, [pc, #44]	; (1291c <setup_accept_list_cb.part.0+0x68>)
   128ee:	480a      	ldr	r0, [pc, #40]	; (12918 <setup_accept_list_cb.part.0+0x64>)
   128f0:	e9c2 3505 	strd	r3, r5, [r2, #20]
   128f4:	2303      	movs	r3, #3
   128f6:	f842 3f10 	str.w	r3, [r2, #16]!
   128fa:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   128fe:	f017 fd15 	bl	2a32c <z_log_msg_static_create.constprop.0>
   12902:	f06f 0304 	mvn.w	r3, #4
   12906:	46b5      	mov	sp, r6
		(*bond_cnt) = -EIO;
   12908:	6023      	str	r3, [r4, #0]
}
   1290a:	46bd      	mov	sp, r7
   1290c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		(*bond_cnt)++;
   1290e:	6823      	ldr	r3, [r4, #0]
   12910:	3301      	adds	r3, #1
   12912:	e7f9      	b.n	12908 <setup_accept_list_cb.part.0+0x54>
   12914:	0003109b 	.word	0x0003109b
   12918:	0003025c 	.word	0x0003025c
   1291c:	000310c7 	.word	0x000310c7

00012920 <advertise_with_acceptlist>:
{
   12920:	b5f0      	push	{r4, r5, r6, r7, lr}
   12922:	b089      	sub	sp, #36	; 0x24
   12924:	af02      	add	r7, sp, #8
	int err = bt_le_filter_accept_list_clear();
   12926:	f006 ffd5 	bl	198d4 <bt_le_filter_accept_list_clear>
	if (err)
   1292a:	4604      	mov	r4, r0
   1292c:	b310      	cbz	r0, 12974 <advertise_with_acceptlist+0x54>
		LOG_INF("Cannot clear accept list (err: %d)\n", err);
   1292e:	466d      	mov	r5, sp
   12930:	b088      	sub	sp, #32
   12932:	aa02      	add	r2, sp, #8
   12934:	4b38      	ldr	r3, [pc, #224]	; (12a18 <advertise_with_acceptlist+0xf8>)
   12936:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1293a:	2303      	movs	r3, #3
   1293c:	f842 3f10 	str.w	r3, [r2, #16]!
   12940:	4836      	ldr	r0, [pc, #216]	; (12a1c <advertise_with_acceptlist+0xfc>)
   12942:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   12946:	f017 fcf1 	bl	2a32c <z_log_msg_static_create.constprop.0>
	if (allowed_cnt < 0)
   1294a:	2c00      	cmp	r4, #0
   1294c:	46ad      	mov	sp, r5
   1294e:	da44      	bge.n	129da <advertise_with_acceptlist+0xba>
		LOG_INF("Acceptlist setup failed (err:%d)\n", allowed_cnt);
   12950:	466d      	mov	r5, sp
   12952:	b088      	sub	sp, #32
   12954:	aa02      	add	r2, sp, #8
   12956:	4b32      	ldr	r3, [pc, #200]	; (12a20 <advertise_with_acceptlist+0x100>)
   12958:	4830      	ldr	r0, [pc, #192]	; (12a1c <advertise_with_acceptlist+0xfc>)
   1295a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1295e:	2303      	movs	r3, #3
   12960:	f842 3f10 	str.w	r3, [r2, #16]!
   12964:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   12968:	f017 fce0 	bl	2a32c <z_log_msg_static_create.constprop.0>
   1296c:	46ad      	mov	sp, r5
}
   1296e:	371c      	adds	r7, #28
   12970:	46bd      	mov	sp, r7
   12972:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_foreach_bond(local_id, setup_accept_list_cb, &bond_cnt);
   12974:	492b      	ldr	r1, [pc, #172]	; (12a24 <advertise_with_acceptlist+0x104>)
	int bond_cnt = 0;
   12976:	6038      	str	r0, [r7, #0]
	bt_foreach_bond(local_id, setup_accept_list_cb, &bond_cnt);
   12978:	463a      	mov	r2, r7
   1297a:	f00d fd75 	bl	20468 <bt_foreach_bond>
	return bond_cnt;
   1297e:	683c      	ldr	r4, [r7, #0]
	if (allowed_cnt < 0)
   12980:	2c00      	cmp	r4, #0
   12982:	dbe5      	blt.n	12950 <advertise_with_acceptlist+0x30>
		if (allowed_cnt == 0)
   12984:	d129      	bne.n	129da <advertise_with_acceptlist+0xba>
			LOG_INF("Advertising with no Accept list \n");
   12986:	4b28      	ldr	r3, [pc, #160]	; (12a28 <advertise_with_acceptlist+0x108>)
			err = bt_le_adv_start(BT_LE_ADV_CONN_NO_ACCEPT_LIST, ad, ARRAY_SIZE(ad), sd,
   12988:	4d28      	ldr	r5, [pc, #160]	; (12a2c <advertise_with_acceptlist+0x10c>)
			LOG_INF("Advertising with no Accept list \n");
   1298a:	4824      	ldr	r0, [pc, #144]	; (12a1c <advertise_with_acceptlist+0xfc>)
   1298c:	617b      	str	r3, [r7, #20]
   1298e:	2602      	movs	r6, #2
   12990:	613e      	str	r6, [r7, #16]
   12992:	f107 0210 	add.w	r2, r7, #16
   12996:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
			err = bt_le_adv_start(BT_LE_ADV_CONN_NO_ACCEPT_LIST, ad, ARRAY_SIZE(ad), sd,
   1299a:	463c      	mov	r4, r7
			LOG_INF("Advertising with no Accept list \n");
   1299c:	f017 fcc6 	bl	2a32c <z_log_msg_static_create.constprop.0>
			err = bt_le_adv_start(BT_LE_ADV_CONN_ACCEPT_LIST, ad, ARRAY_SIZE(ad), sd,
   129a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   129a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   129a4:	682b      	ldr	r3, [r5, #0]
   129a6:	6023      	str	r3, [r4, #0]
   129a8:	2301      	movs	r3, #1
   129aa:	9300      	str	r3, [sp, #0]
   129ac:	4920      	ldr	r1, [pc, #128]	; (12a30 <advertise_with_acceptlist+0x110>)
   129ae:	4b21      	ldr	r3, [pc, #132]	; (12a34 <advertise_with_acceptlist+0x114>)
   129b0:	2202      	movs	r2, #2
   129b2:	4638      	mov	r0, r7
   129b4:	f007 ff3e 	bl	1a834 <bt_le_adv_start>
		if (err)
   129b8:	b308      	cbz	r0, 129fe <advertise_with_acceptlist+0xde>
			LOG_INF("Advertising failed to start (err %d)\n", err);
   129ba:	466c      	mov	r4, sp
   129bc:	b088      	sub	sp, #32
   129be:	aa02      	add	r2, sp, #8
   129c0:	4b1d      	ldr	r3, [pc, #116]	; (12a38 <advertise_with_acceptlist+0x118>)
   129c2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   129c6:	2303      	movs	r3, #3
   129c8:	f842 3f10 	str.w	r3, [r2, #16]!
   129cc:	4813      	ldr	r0, [pc, #76]	; (12a1c <advertise_with_acceptlist+0xfc>)
   129ce:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   129d2:	f017 fcab 	bl	2a32c <z_log_msg_static_create.constprop.0>
   129d6:	46a5      	mov	sp, r4
			return;
   129d8:	e7c9      	b.n	1296e <advertise_with_acceptlist+0x4e>
			LOG_INF("Acceptlist setup number  = %d \n", allowed_cnt);
   129da:	466d      	mov	r5, sp
   129dc:	b088      	sub	sp, #32
   129de:	aa02      	add	r2, sp, #8
   129e0:	4b16      	ldr	r3, [pc, #88]	; (12a3c <advertise_with_acceptlist+0x11c>)
   129e2:	480e      	ldr	r0, [pc, #56]	; (12a1c <advertise_with_acceptlist+0xfc>)
   129e4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   129e8:	2303      	movs	r3, #3
   129ea:	f842 3f10 	str.w	r3, [r2, #16]!
   129ee:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   129f2:	f017 fc9b 	bl	2a32c <z_log_msg_static_create.constprop.0>
			err = bt_le_adv_start(BT_LE_ADV_CONN_ACCEPT_LIST, ad, ARRAY_SIZE(ad), sd,
   129f6:	463c      	mov	r4, r7
   129f8:	46ad      	mov	sp, r5
   129fa:	4d11      	ldr	r5, [pc, #68]	; (12a40 <advertise_with_acceptlist+0x120>)
   129fc:	e7d0      	b.n	129a0 <advertise_with_acceptlist+0x80>
		LOG_INF("Advertising successfully started\n");
   129fe:	4b11      	ldr	r3, [pc, #68]	; (12a44 <advertise_with_acceptlist+0x124>)
   12a00:	617b      	str	r3, [r7, #20]
   12a02:	2302      	movs	r3, #2
   12a04:	4805      	ldr	r0, [pc, #20]	; (12a1c <advertise_with_acceptlist+0xfc>)
   12a06:	613b      	str	r3, [r7, #16]
   12a08:	f107 0210 	add.w	r2, r7, #16
   12a0c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   12a10:	f017 fc8c 	bl	2a32c <z_log_msg_static_create.constprop.0>
   12a14:	e7ab      	b.n	1296e <advertise_with_acceptlist+0x4e>
   12a16:	bf00      	nop
   12a18:	000310f8 	.word	0x000310f8
   12a1c:	0003025c 	.word	0x0003025c
   12a20:	0003111c 	.word	0x0003111c
   12a24:	0002a333 	.word	0x0002a333
   12a28:	0003113e 	.word	0x0003113e
   12a2c:	00030450 	.word	0x00030450
   12a30:	000305cc 	.word	0x000305cc
   12a34:	000305c4 	.word	0x000305c4
   12a38:	00031180 	.word	0x00031180
   12a3c:	00031160 	.word	0x00031160
   12a40:	00030464 	.word	0x00030464
   12a44:	000311a6 	.word	0x000311a6

00012a48 <on_security_changed>:
{
   12a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12a4c:	b093      	sub	sp, #76	; 0x4c
   12a4e:	af06      	add	r7, sp, #24
   12a50:	4689      	mov	r9, r1
   12a52:	4690      	mov	r8, r2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   12a54:	f01a f982 	bl	2cd5c <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   12a58:	7803      	ldrb	r3, [r0, #0]
   12a5a:	4605      	mov	r5, r0
   12a5c:	1d3e      	adds	r6, r7, #4
   12a5e:	2b03      	cmp	r3, #3
   12a60:	d83b      	bhi.n	12ada <on_security_changed+0x92>
   12a62:	e8df f003 	tbb	[pc, r3]
   12a66:	3402      	.short	0x3402
   12a68:	3836      	.short	0x3836
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   12a6a:	4927      	ldr	r1, [pc, #156]	; (12b08 <on_security_changed+0xc0>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   12a6c:	4630      	mov	r0, r6
   12a6e:	f019 fbd5 	bl	2c21c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   12a72:	79ab      	ldrb	r3, [r5, #6]
   12a74:	9605      	str	r6, [sp, #20]
   12a76:	786a      	ldrb	r2, [r5, #1]
   12a78:	9204      	str	r2, [sp, #16]
   12a7a:	78aa      	ldrb	r2, [r5, #2]
   12a7c:	9203      	str	r2, [sp, #12]
   12a7e:	78ea      	ldrb	r2, [r5, #3]
   12a80:	9202      	str	r2, [sp, #8]
   12a82:	792a      	ldrb	r2, [r5, #4]
   12a84:	9201      	str	r2, [sp, #4]
   12a86:	796a      	ldrb	r2, [r5, #5]
   12a88:	9200      	str	r2, [sp, #0]
   12a8a:	f107 0410 	add.w	r4, r7, #16
   12a8e:	4a1f      	ldr	r2, [pc, #124]	; (12b0c <on_security_changed+0xc4>)
   12a90:	211e      	movs	r1, #30
   12a92:	4620      	mov	r0, r4
   12a94:	f017 fd6a 	bl	2a56c <snprintk>
		LOG_INF("Security changed: %s level %u\n", addr, level);
   12a98:	466d      	mov	r5, sp
	if (!err)
   12a9a:	f1b8 0f00 	cmp.w	r8, #0
   12a9e:	d122      	bne.n	12ae6 <on_security_changed+0x9e>
		LOG_INF("Security changed: %s level %u\n", addr, level);
   12aa0:	b08a      	sub	sp, #40	; 0x28
   12aa2:	aa06      	add	r2, sp, #24
   12aa4:	4b1a      	ldr	r3, [pc, #104]	; (12b10 <on_security_changed+0xc8>)
   12aa6:	f8c2 901c 	str.w	r9, [r2, #28]
   12aaa:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12aae:	f44f 7300 	mov.w	r3, #512	; 0x200
   12ab2:	8413      	strh	r3, [r2, #32]
   12ab4:	4b17      	ldr	r3, [pc, #92]	; (12b14 <on_security_changed+0xcc>)
   12ab6:	f842 3f10 	str.w	r3, [r2, #16]!
   12aba:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
		LOG_INF("Security failed: %s level %u err %d\n", addr, level, err);
   12abe:	4816      	ldr	r0, [pc, #88]	; (12b18 <on_security_changed+0xd0>)
   12ac0:	f017 fc34 	bl	2a32c <z_log_msg_static_create.constprop.0>
}
   12ac4:	3734      	adds	r7, #52	; 0x34
   12ac6:	46ad      	mov	sp, r5
   12ac8:	46bd      	mov	sp, r7
   12aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		strcpy(type, "random");
   12ace:	4913      	ldr	r1, [pc, #76]	; (12b1c <on_security_changed+0xd4>)
   12ad0:	e7cc      	b.n	12a6c <on_security_changed+0x24>
		strcpy(type, "public-id");
   12ad2:	4913      	ldr	r1, [pc, #76]	; (12b20 <on_security_changed+0xd8>)
   12ad4:	e7ca      	b.n	12a6c <on_security_changed+0x24>
		strcpy(type, "random-id");
   12ad6:	4913      	ldr	r1, [pc, #76]	; (12b24 <on_security_changed+0xdc>)
   12ad8:	e7c8      	b.n	12a6c <on_security_changed+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   12ada:	4a13      	ldr	r2, [pc, #76]	; (12b28 <on_security_changed+0xe0>)
   12adc:	210a      	movs	r1, #10
   12ade:	4630      	mov	r0, r6
   12ae0:	f017 fd44 	bl	2a56c <snprintk>
		break;
   12ae4:	e7c5      	b.n	12a72 <on_security_changed+0x2a>
		LOG_INF("Security failed: %s level %u err %d\n", addr, level, err);
   12ae6:	b08a      	sub	sp, #40	; 0x28
   12ae8:	aa06      	add	r2, sp, #24
   12aea:	4b10      	ldr	r3, [pc, #64]	; (12b2c <on_security_changed+0xe4>)
   12aec:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12af0:	f44f 7300 	mov.w	r3, #512	; 0x200
   12af4:	8493      	strh	r3, [r2, #36]	; 0x24
   12af6:	4b0e      	ldr	r3, [pc, #56]	; (12b30 <on_security_changed+0xe8>)
   12af8:	e9c2 9807 	strd	r9, r8, [r2, #28]
   12afc:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   12b00:	f842 3f10 	str.w	r3, [r2, #16]!
   12b04:	e7db      	b.n	12abe <on_security_changed+0x76>
   12b06:	bf00      	nop
   12b08:	000311c8 	.word	0x000311c8
   12b0c:	000311ea 	.word	0x000311ea
   12b10:	0003120d 	.word	0x0003120d
   12b14:	01000004 	.word	0x01000004
   12b18:	0003025c 	.word	0x0003025c
   12b1c:	000311cf 	.word	0x000311cf
   12b20:	000311d6 	.word	0x000311d6
   12b24:	000311e0 	.word	0x000311e0
   12b28:	00033964 	.word	0x00033964
   12b2c:	0003122c 	.word	0x0003122c
   12b30:	01000005 	.word	0x01000005

00012b34 <dclk_init>:

);

/* A function to register application callbacks for the LED and Button characteristics  */
int dclk_init(struct dclk_cb *callbacks)
{
   12b34:	b598      	push	{r3, r4, r7, lr}
   12b36:	4604      	mov	r4, r0
   12b38:	af00      	add	r7, sp, #0
	int err;

	bt_conn_cb_register(&connection_callbacks);
   12b3a:	4810      	ldr	r0, [pc, #64]	; (12b7c <dclk_init+0x48>)
   12b3c:	f008 fdba 	bl	1b6b4 <bt_conn_cb_register>

	err = bt_enable(NULL);
   12b40:	2000      	movs	r0, #0
   12b42:	f006 fdeb 	bl	1971c <bt_enable>
	if (err)
   12b46:	b170      	cbz	r0, 12b66 <dclk_init+0x32>
	{
		LOG_ERR("Bluetooth init failed (err %d)\n", err);
   12b48:	b088      	sub	sp, #32
   12b4a:	466a      	mov	r2, sp
   12b4c:	4b0c      	ldr	r3, [pc, #48]	; (12b80 <dclk_init+0x4c>)
   12b4e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12b52:	2303      	movs	r3, #3
   12b54:	480b      	ldr	r0, [pc, #44]	; (12b84 <dclk_init+0x50>)
   12b56:	f842 3f10 	str.w	r3, [r2, #16]!
   12b5a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12b5e:	f017 fbe5 	bl	2a32c <z_log_msg_static_create.constprop.0>
		dclk_cb.clock_cb = callbacks->clock_cb;
		dclk_cb.state_cb = callbacks->state_cb;
	}

	return 0;
}
   12b62:	46bd      	mov	sp, r7
   12b64:	bd98      	pop	{r3, r4, r7, pc}
	settings_load();
   12b66:	f018 ffa8 	bl	2baba <settings_load>
	if (callbacks)
   12b6a:	b124      	cbz	r4, 12b76 <dclk_init+0x42>
		dclk_cb.clock_cb = callbacks->clock_cb;
   12b6c:	4b06      	ldr	r3, [pc, #24]	; (12b88 <dclk_init+0x54>)
   12b6e:	6822      	ldr	r2, [r4, #0]
   12b70:	601a      	str	r2, [r3, #0]
		dclk_cb.state_cb = callbacks->state_cb;
   12b72:	6862      	ldr	r2, [r4, #4]
   12b74:	605a      	str	r2, [r3, #4]
	return 0;
   12b76:	2000      	movs	r0, #0
   12b78:	e7f3      	b.n	12b62 <dclk_init+0x2e>
   12b7a:	bf00      	nop
   12b7c:	200006f0 	.word	0x200006f0
   12b80:	00031251 	.word	0x00031251
   12b84:	0003025c 	.word	0x0003025c
   12b88:	200032b0 	.word	0x200032b0

00012b8c <start_advertising>:

void start_advertising(void)
{
	k_work_submit(&advertise_acceptlist_work);
   12b8c:	4801      	ldr	r0, [pc, #4]	; (12b94 <start_advertising+0x8>)
   12b8e:	f013 bd21 	b.w	265d4 <k_work_submit>
   12b92:	bf00      	nop
   12b94:	2000070c 	.word	0x2000070c

00012b98 <start_pairing>:
}

int start_pairing(void)
{
   12b98:	b590      	push	{r4, r7, lr}
   12b9a:	b087      	sub	sp, #28
	int err = bt_unpair(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   12b9c:	4911      	ldr	r1, [pc, #68]	; (12be4 <start_pairing+0x4c>)
{
   12b9e:	af00      	add	r7, sp, #0
	int err = bt_unpair(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   12ba0:	2000      	movs	r0, #0
   12ba2:	f006 f993 	bl	18ecc <bt_unpair>
	if (err)
   12ba6:	b188      	cbz	r0, 12bcc <start_pairing+0x34>
	{
		LOG_INF("Cannot delete bond (err: %d)\n", err);
   12ba8:	466c      	mov	r4, sp
   12baa:	b088      	sub	sp, #32
   12bac:	466a      	mov	r2, sp
   12bae:	4b0e      	ldr	r3, [pc, #56]	; (12be8 <start_pairing+0x50>)
   12bb0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12bb4:	2303      	movs	r3, #3
   12bb6:	f842 3f10 	str.w	r3, [r2, #16]!
   12bba:	480c      	ldr	r0, [pc, #48]	; (12bec <start_pairing+0x54>)
   12bbc:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   12bc0:	f017 fbb4 	bl	2a32c <z_log_msg_static_create.constprop.0>
   12bc4:	46a5      	mov	sp, r4
	}
	else
	{
		LOG_INF("Bond deleted succesfully \n");
	}
}
   12bc6:	371c      	adds	r7, #28
   12bc8:	46bd      	mov	sp, r7
   12bca:	bd90      	pop	{r4, r7, pc}
		LOG_INF("Bond deleted succesfully \n");
   12bcc:	4b08      	ldr	r3, [pc, #32]	; (12bf0 <start_pairing+0x58>)
   12bce:	617b      	str	r3, [r7, #20]
   12bd0:	4806      	ldr	r0, [pc, #24]	; (12bec <start_pairing+0x54>)
   12bd2:	2302      	movs	r3, #2
   12bd4:	f107 0210 	add.w	r2, r7, #16
   12bd8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   12bdc:	613b      	str	r3, [r7, #16]
   12bde:	f017 fba5 	bl	2a32c <z_log_msg_static_create.constprop.0>
   12be2:	e7f0      	b.n	12bc6 <start_pairing+0x2e>
   12be4:	00031bf1 	.word	0x00031bf1
   12be8:	00031271 	.word	0x00031271
   12bec:	0003025c 	.word	0x0003025c
   12bf0:	0003128f 	.word	0x0003128f

00012bf4 <dclk_send_state_notify>:

int dclk_send_state_notify(uint8_t state)
{
   12bf4:	b500      	push	{lr}
	if (!notify_state_enabled)
   12bf6:	4b0e      	ldr	r3, [pc, #56]	; (12c30 <dclk_send_state_notify+0x3c>)
{
   12bf8:	b089      	sub	sp, #36	; 0x24
	if (!notify_state_enabled)
   12bfa:	781b      	ldrb	r3, [r3, #0]
{
   12bfc:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_state_enabled)
   12c00:	b19b      	cbz	r3, 12c2a <dclk_send_state_notify+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   12c02:	2100      	movs	r1, #0
   12c04:	2218      	movs	r2, #24
   12c06:	a802      	add	r0, sp, #8
   12c08:	f019 fb74 	bl	2c2f4 <memset>

	params.attr = attr;
   12c0c:	4b09      	ldr	r3, [pc, #36]	; (12c34 <dclk_send_state_notify+0x40>)
   12c0e:	9303      	str	r3, [sp, #12]
	params.data = data;
   12c10:	f10d 0307 	add.w	r3, sp, #7
   12c14:	9304      	str	r3, [sp, #16]
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   12c16:	a902      	add	r1, sp, #8
	params.len = len;
   12c18:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   12c1a:	2000      	movs	r0, #0
	params.len = len;
   12c1c:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   12c20:	f00b fbe6 	bl	1e3f0 <bt_gatt_notify_cb>
	{
		return -EACCES;
	}

	return bt_gatt_notify(NULL, &dclk_svc.attrs[2], &state, sizeof(state));
}
   12c24:	b009      	add	sp, #36	; 0x24
   12c26:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   12c2a:	f06f 000c 	mvn.w	r0, #12
   12c2e:	e7f9      	b.n	12c24 <dclk_send_state_notify+0x30>
   12c30:	200055e2 	.word	0x200055e2
   12c34:	00030560 	.word	0x00030560

00012c38 <dclk_send_clock_notify>:

int dclk_send_clock_notify(uint32_t clock)
{
   12c38:	b500      	push	{lr}
	if (!notify_clock_enabled)
   12c3a:	4b0d      	ldr	r3, [pc, #52]	; (12c70 <dclk_send_clock_notify+0x38>)
{
   12c3c:	b089      	sub	sp, #36	; 0x24
	if (!notify_clock_enabled)
   12c3e:	781b      	ldrb	r3, [r3, #0]
{
   12c40:	9001      	str	r0, [sp, #4]
	if (!notify_clock_enabled)
   12c42:	b193      	cbz	r3, 12c6a <dclk_send_clock_notify+0x32>
	memset(&params, 0, sizeof(params));
   12c44:	2100      	movs	r1, #0
   12c46:	2218      	movs	r2, #24
   12c48:	a802      	add	r0, sp, #8
   12c4a:	f019 fb53 	bl	2c2f4 <memset>
	params.attr = attr;
   12c4e:	4b09      	ldr	r3, [pc, #36]	; (12c74 <dclk_send_clock_notify+0x3c>)
   12c50:	9303      	str	r3, [sp, #12]
	params.data = data;
   12c52:	ab01      	add	r3, sp, #4
   12c54:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
   12c56:	a902      	add	r1, sp, #8
	params.len = len;
   12c58:	2304      	movs	r3, #4
	return bt_gatt_notify_cb(conn, &params);
   12c5a:	2000      	movs	r0, #0
	params.len = len;
   12c5c:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   12c60:	f00b fbc6 	bl	1e3f0 <bt_gatt_notify_cb>
	{
		return -EACCES;
	}
	return bt_gatt_notify(NULL, &dclk_svc.attrs[5], &clock, sizeof(clock));
}
   12c64:	b009      	add	sp, #36	; 0x24
   12c66:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   12c6a:	f06f 000c 	mvn.w	r0, #12
   12c6e:	e7f9      	b.n	12c64 <dclk_send_clock_notify+0x2c>
   12c70:	200055e1 	.word	0x200055e1
   12c74:	0003059c 	.word	0x0003059c

00012c78 <d_clock_expire>:
/*DCLOCK*/


static void d_clock_expire(struct k_timer *timer_id)
{
	d_state = 2;
   12c78:	4b03      	ldr	r3, [pc, #12]	; (12c88 <d_clock_expire+0x10>)
   12c7a:	2202      	movs	r2, #2
   12c7c:	701a      	strb	r2, [r3, #0]
	d_clock = 0;
   12c7e:	4b03      	ldr	r3, [pc, #12]	; (12c8c <d_clock_expire+0x14>)
   12c80:	2200      	movs	r2, #0
   12c82:	601a      	str	r2, [r3, #0]
}
   12c84:	4770      	bx	lr
   12c86:	bf00      	nop
   12c88:	200055e3 	.word	0x200055e3
   12c8c:	2000072c 	.word	0x2000072c

00012c90 <pair_work_cb>:

static void pair_work_cb(void)
{
	inter_cb.pair_cb();
   12c90:	4b01      	ldr	r3, [pc, #4]	; (12c98 <pair_work_cb+0x8>)
   12c92:	681b      	ldr	r3, [r3, #0]
   12c94:	4718      	bx	r3
   12c96:	bf00      	nop
   12c98:	200032bc 	.word	0x200032bc

00012c9c <gpio_add_callback.constprop.0.isra.0>:
 * handler invocation, but whether they are invoked for the current
 * GPIO event is not specified.
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
   12c9c:	4601      	mov	r1, r0
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
   12c9e:	4803      	ldr	r0, [pc, #12]	; (12cac <gpio_add_callback.constprop.0.isra.0+0x10>)
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   12ca0:	6883      	ldr	r3, [r0, #8]
   12ca2:	69db      	ldr	r3, [r3, #28]
   12ca4:	b10b      	cbz	r3, 12caa <gpio_add_callback.constprop.0.isra.0+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   12ca6:	2201      	movs	r2, #1
   12ca8:	4718      	bx	r3
}
   12caa:	4770      	bx	lr
   12cac:	0002ff78 	.word	0x0002ff78

00012cb0 <button_pressed>:
/*UI*/

static void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{

	if (pins == BIT(button0.pin))
   12cb0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
{
   12cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (pins == BIT(button0.pin))
   12cb6:	d112      	bne.n	12cde <button_pressed+0x2e>
	{
		d_state = 0;
   12cb8:	4b22      	ldr	r3, [pc, #136]	; (12d44 <button_pressed+0x94>)
   12cba:	2200      	movs	r2, #0
   12cbc:	701a      	strb	r2, [r3, #0]
		d_clock = 10000;
   12cbe:	4b22      	ldr	r3, [pc, #136]	; (12d48 <button_pressed+0x98>)
   12cc0:	f242 7210 	movw	r2, #10000	; 0x2710
   12cc4:	601a      	str	r2, [r3, #0]
	z_impl_k_timer_start(timer, duration, period);
   12cc6:	2200      	movs	r2, #0
   12cc8:	2300      	movs	r3, #0
   12cca:	e9cd 2300 	strd	r2, r3, [sp]
   12cce:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   12cd2:	2300      	movs	r3, #0
   12cd4:	481d      	ldr	r0, [pc, #116]	; (12d4c <button_pressed+0x9c>)
   12cd6:	f014 fa7d 	bl	271d4 <z_impl_k_timer_start>

	else if (pins == BIT(pairbtn.pin))
	{
		k_work_submit(&initiate_pairing);
	}
}
   12cda:	b003      	add	sp, #12
   12cdc:	bd30      	pop	{r4, r5, pc}
	else if (pins == BIT(button1.pin))
   12cde:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   12ce2:	d10b      	bne.n	12cfc <button_pressed+0x4c>
		d_state = 2;
   12ce4:	4b17      	ldr	r3, [pc, #92]	; (12d44 <button_pressed+0x94>)
   12ce6:	2202      	movs	r2, #2
   12ce8:	701a      	strb	r2, [r3, #0]
		d_clock = 0;
   12cea:	4b17      	ldr	r3, [pc, #92]	; (12d48 <button_pressed+0x98>)
   12cec:	2200      	movs	r2, #0
   12cee:	601a      	str	r2, [r3, #0]
	z_impl_k_timer_stop(timer);
   12cf0:	4816      	ldr	r0, [pc, #88]	; (12d4c <button_pressed+0x9c>)
}
   12cf2:	b003      	add	sp, #12
   12cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   12cf8:	f01c bf32 	b.w	2fb60 <z_impl_k_timer_stop>
	else if (pins == BIT(userbtn.pin))
   12cfc:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   12d00:	d116      	bne.n	12d30 <button_pressed+0x80>
		d_state = 0;
   12d02:	4b10      	ldr	r3, [pc, #64]	; (12d44 <button_pressed+0x94>)
   12d04:	2100      	movs	r1, #0
   12d06:	7019      	strb	r1, [r3, #0]
		k_timer_start(&d_timer, K_MSEC(d_clock), K_NO_WAIT);
   12d08:	4b0f      	ldr	r3, [pc, #60]	; (12d48 <button_pressed+0x98>)
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   12d0a:	681d      	ldr	r5, [r3, #0]
   12d0c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   12d10:	f240 30e7 	movw	r0, #999	; 0x3e7
   12d14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12d18:	2300      	movs	r3, #0
   12d1a:	fbe5 0104 	umlal	r0, r1, r5, r4
   12d1e:	f7ee f9ef 	bl	1100 <__aeabi_uldivmod>
   12d22:	4602      	mov	r2, r0
   12d24:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   12d26:	2000      	movs	r0, #0
   12d28:	2100      	movs	r1, #0
   12d2a:	e9cd 0100 	strd	r0, r1, [sp]
   12d2e:	e7d1      	b.n	12cd4 <button_pressed+0x24>
	else if (pins == BIT(pairbtn.pin))
   12d30:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
   12d34:	d1d1      	bne.n	12cda <button_pressed+0x2a>
		k_work_submit(&initiate_pairing);
   12d36:	4806      	ldr	r0, [pc, #24]	; (12d50 <button_pressed+0xa0>)
}
   12d38:	b003      	add	sp, #12
   12d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		k_work_submit(&initiate_pairing);
   12d3e:	f013 bc49 	b.w	265d4 <k_work_submit>
   12d42:	bf00      	nop
   12d44:	200055e3 	.word	0x200055e3
   12d48:	2000072c 	.word	0x2000072c
   12d4c:	20000ba0 	.word	0x20000ba0
   12d50:	2000071c 	.word	0x2000071c

00012d54 <get_dclock>:




uint32_t get_dclock (void)
{
   12d54:	b510      	push	{r4, lr}
	if(d_state ==0)
   12d56:	4b08      	ldr	r3, [pc, #32]	; (12d78 <get_dclock+0x24>)
   12d58:	4c08      	ldr	r4, [pc, #32]	; (12d7c <get_dclock+0x28>)
   12d5a:	781b      	ldrb	r3, [r3, #0]
   12d5c:	b953      	cbnz	r3, 12d74 <get_dclock+0x20>
__syscall k_ticks_t k_timer_remaining_ticks(const struct k_timer *timer);

static inline k_ticks_t z_impl_k_timer_remaining_ticks(
				       const struct k_timer *timer)
{
	return z_timeout_remaining(&timer->timeout);
   12d5e:	4808      	ldr	r0, [pc, #32]	; (12d80 <get_dclock+0x2c>)
   12d60:	f01c fea6 	bl	2fab0 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   12d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12d68:	fba0 0203 	umull	r0, r2, r0, r3
   12d6c:	0bc0      	lsrs	r0, r0, #15
   12d6e:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
   12d72:	6020      	str	r0, [r4, #0]
	{
		d_clock = k_timer_remaining_get(&d_timer);
	}
	return d_clock;
}
   12d74:	6820      	ldr	r0, [r4, #0]
   12d76:	bd10      	pop	{r4, pc}
   12d78:	200055e3 	.word	0x200055e3
   12d7c:	2000072c 	.word	0x2000072c
   12d80:	20000ba0 	.word	0x20000ba0

00012d84 <get_dstate>:

uint32_t get_dstate (void)
{
	return d_state;
}
   12d84:	4b01      	ldr	r3, [pc, #4]	; (12d8c <get_dstate+0x8>)
   12d86:	7818      	ldrb	r0, [r3, #0]
   12d88:	4770      	bx	lr
   12d8a:	bf00      	nop
   12d8c:	200055e3 	.word	0x200055e3

00012d90 <interface_init>:

int interface_init(struct interface_cb *app_cb)
{
   12d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d92:	4605      	mov	r5, r0
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   12d94:	482b      	ldr	r0, [pc, #172]	; (12e44 <interface_init+0xb4>)
   12d96:	f01c fab4 	bl	2f302 <z_device_is_ready>
   12d9a:	4604      	mov	r4, r0
   12d9c:	4829      	ldr	r0, [pc, #164]	; (12e44 <interface_init+0xb4>)
   12d9e:	f01c fab0 	bl	2f302 <z_device_is_ready>
   12da2:	4004      	ands	r4, r0
   12da4:	b2e4      	uxtb	r4, r4
   12da6:	4827      	ldr	r0, [pc, #156]	; (12e44 <interface_init+0xb4>)
   12da8:	f01c faab 	bl	2f302 <z_device_is_ready>
   12dac:	4004      	ands	r4, r0
   12dae:	4825      	ldr	r0, [pc, #148]	; (12e44 <interface_init+0xb4>)
   12db0:	f01c faa7 	bl	2f302 <z_device_is_ready>
	int err;
	err = device_is_ready(button0.port);
	err &= device_is_ready(button1.port);
	err &= device_is_ready(userbtn.port);
	err &= device_is_ready(pairbtn.port);
	if (!err)
   12db4:	2c00      	cmp	r4, #0
   12db6:	d042      	beq.n	12e3e <interface_init+0xae>
   12db8:	2800      	cmp	r0, #0
   12dba:	d040      	beq.n	12e3e <interface_init+0xae>
	{
		return !err;
	}

	gpio_pin_configure_dt(&button0, GPIO_INPUT);
   12dbc:	4822      	ldr	r0, [pc, #136]	; (12e48 <interface_init+0xb8>)
	callback->handler = handler;
   12dbe:	4f23      	ldr	r7, [pc, #140]	; (12e4c <interface_init+0xbc>)
   12dc0:	4e23      	ldr	r6, [pc, #140]	; (12e50 <interface_init+0xc0>)
   12dc2:	4c24      	ldr	r4, [pc, #144]	; (12e54 <interface_init+0xc4>)
   12dc4:	f017 fac8 	bl	2a358 <gpio_pin_configure_dt.constprop.0.isra.0>
	gpio_pin_configure_dt(&button1, GPIO_INPUT);
   12dc8:	4823      	ldr	r0, [pc, #140]	; (12e58 <interface_init+0xc8>)
   12dca:	f017 fac5 	bl	2a358 <gpio_pin_configure_dt.constprop.0.isra.0>
	gpio_pin_configure_dt(&userbtn, GPIO_INPUT);
   12dce:	4823      	ldr	r0, [pc, #140]	; (12e5c <interface_init+0xcc>)
   12dd0:	f017 fac2 	bl	2a358 <gpio_pin_configure_dt.constprop.0.isra.0>
	gpio_pin_configure_dt(&pairbtn, GPIO_INPUT);
   12dd4:	4822      	ldr	r0, [pc, #136]	; (12e60 <interface_init+0xd0>)
   12dd6:	f017 fabf 	bl	2a358 <gpio_pin_configure_dt.constprop.0.isra.0>

	gpio_pin_interrupt_configure_dt(&button0, GPIO_INT_EDGE_RISING);
   12dda:	481b      	ldr	r0, [pc, #108]	; (12e48 <interface_init+0xb8>)
   12ddc:	f017 faaf 	bl	2a33e <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	gpio_pin_interrupt_configure_dt(&button1, GPIO_INT_EDGE_RISING);
   12de0:	481d      	ldr	r0, [pc, #116]	; (12e58 <interface_init+0xc8>)
   12de2:	f017 faac 	bl	2a33e <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	gpio_pin_interrupt_configure_dt(&userbtn, GPIO_INT_EDGE_RISING);
   12de6:	481d      	ldr	r0, [pc, #116]	; (12e5c <interface_init+0xcc>)
   12de8:	f017 faa9 	bl	2a33e <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	gpio_pin_interrupt_configure_dt(&pairbtn, GPIO_INT_EDGE_RISING);
   12dec:	481c      	ldr	r0, [pc, #112]	; (12e60 <interface_init+0xd0>)
   12dee:	f017 faa6 	bl	2a33e <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
   12df2:	481c      	ldr	r0, [pc, #112]	; (12e64 <interface_init+0xd4>)
   12df4:	4b1c      	ldr	r3, [pc, #112]	; (12e68 <interface_init+0xd8>)
   12df6:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
   12df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12dfc:	6082      	str	r2, [r0, #8]
   12dfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	callback->handler = handler;
   12e02:	607b      	str	r3, [r7, #4]
	callback->pin_mask = pin_mask;
   12e04:	60ba      	str	r2, [r7, #8]
	callback->handler = handler;
   12e06:	6073      	str	r3, [r6, #4]
	callback->pin_mask = pin_mask;
   12e08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	callback->handler = handler;
   12e0c:	6063      	str	r3, [r4, #4]
	callback->pin_mask = pin_mask;
   12e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   12e12:	60b2      	str	r2, [r6, #8]
   12e14:	60a3      	str	r3, [r4, #8]
	gpio_init_callback(&button0_cb_data, button_pressed, BIT(button0.pin));
	gpio_init_callback(&button1_cb_data, button_pressed, BIT(button1.pin));
	gpio_init_callback(&userbtn_cb_data, button_pressed, BIT(userbtn.pin));
	gpio_init_callback(&pairbtn_cb_data, button_pressed, BIT(pairbtn.pin));

	gpio_add_callback(button0.port, &button0_cb_data);
   12e16:	f7ff ff41 	bl	12c9c <gpio_add_callback.constprop.0.isra.0>
	gpio_add_callback(button1.port, &button1_cb_data);
   12e1a:	4638      	mov	r0, r7
   12e1c:	f7ff ff3e 	bl	12c9c <gpio_add_callback.constprop.0.isra.0>
	gpio_add_callback(userbtn.port, &userbtn_cb_data);
   12e20:	4630      	mov	r0, r6
   12e22:	f7ff ff3b 	bl	12c9c <gpio_add_callback.constprop.0.isra.0>
	gpio_add_callback(pairbtn.port, &pairbtn_cb_data);
   12e26:	4620      	mov	r0, r4
   12e28:	f7ff ff38 	bl	12c9c <gpio_add_callback.constprop.0.isra.0>

	if(app_cb)
   12e2c:	b90d      	cbnz	r5, 12e32 <interface_init+0xa2>
		inter_cb.pair_cb = app_cb->pair_cb;
		inter_cb.user_cb = app_cb->user_cb;
		
	}
	
	return 0;
   12e2e:	2000      	movs	r0, #0
}
   12e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		inter_cb.pair_cb = app_cb->pair_cb;
   12e32:	4b0e      	ldr	r3, [pc, #56]	; (12e6c <interface_init+0xdc>)
   12e34:	682a      	ldr	r2, [r5, #0]
   12e36:	601a      	str	r2, [r3, #0]
		inter_cb.user_cb = app_cb->user_cb;
   12e38:	686a      	ldr	r2, [r5, #4]
   12e3a:	605a      	str	r2, [r3, #4]
   12e3c:	e7f7      	b.n	12e2e <interface_init+0x9e>
		return !err;
   12e3e:	2001      	movs	r0, #1
   12e40:	e7f6      	b.n	12e30 <interface_init+0xa0>
   12e42:	bf00      	nop
   12e44:	0002ff78 	.word	0x0002ff78
   12e48:	000305f4 	.word	0x000305f4
   12e4c:	200032dc 	.word	0x200032dc
   12e50:	200032d0 	.word	0x200032d0
   12e54:	200032c4 	.word	0x200032c4
   12e58:	000305ec 	.word	0x000305ec
   12e5c:	000305e4 	.word	0x000305e4
   12e60:	000305dc 	.word	0x000305dc
   12e64:	200032e8 	.word	0x200032e8
   12e68:	00012cb1 	.word	0x00012cb1
   12e6c:	200032bc 	.word	0x200032bc

00012e70 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   12e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e74:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   12e76:	0784      	lsls	r4, r0, #30
{
   12e78:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   12e7a:	f002 0304 	and.w	r3, r2, #4
   12e7e:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   12e80:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   12e84:	f103 0301 	add.w	r3, r3, #1
   12e88:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   12e8c:	9203      	str	r2, [sp, #12]
   12e8e:	4605      	mov	r5, r0
   12e90:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   12e92:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   12e94:	f040 81be 	bne.w	13214 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   12e98:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   12e9a:	b130      	cbz	r0, 12eaa <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   12e9c:	2907      	cmp	r1, #7
   12e9e:	d809      	bhi.n	12eb4 <cbvprintf_package+0x44>
		return -ENOSPC;
   12ea0:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   12ea4:	b011      	add	sp, #68	; 0x44
   12ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   12eaa:	f001 0607 	and.w	r6, r1, #7
   12eae:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   12eb0:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   12eb4:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   12eb6:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   12eba:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   12ebc:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   12ec0:	f04f 33ff 	mov.w	r3, #4294967295
   12ec4:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   12ec6:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   12eca:	464f      	mov	r7, r9
	bool parsing = false;
   12ecc:	46cb      	mov	fp, r9
	size = sizeof(char *);
   12ece:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   12ed0:	b10d      	cbz	r5, 12ed6 <cbvprintf_package+0x66>
				*(const char **)buf = s;
   12ed2:	9a00      	ldr	r2, [sp, #0]
   12ed4:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12ed6:	9805      	ldr	r0, [sp, #20]
   12ed8:	2800      	cmp	r0, #0
   12eda:	f300 80eb 	bgt.w	130b4 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   12ede:	489a      	ldr	r0, [pc, #616]	; (13148 <cbvprintf_package+0x2d8>)
   12ee0:	9a00      	ldr	r2, [sp, #0]
   12ee2:	4282      	cmp	r2, r0
   12ee4:	d303      	bcc.n	12eee <cbvprintf_package+0x7e>
   12ee6:	4899      	ldr	r0, [pc, #612]	; (1314c <cbvprintf_package+0x2dc>)
   12ee8:	4282      	cmp	r2, r0
   12eea:	f0c0 80e3 	bcc.w	130b4 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   12eee:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   12ef0:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   12ef4:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   12ef6:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   12efa:	f100 8106 	bmi.w	1310a <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   12efe:	2f0f      	cmp	r7, #15
   12f00:	f200 80b4 	bhi.w	1306c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   12f04:	2d00      	cmp	r5, #0
   12f06:	f000 8108 	beq.w	1311a <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
   12f0a:	f107 0240 	add.w	r2, r7, #64	; 0x40
   12f0e:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   12f12:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   12f14:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   12f18:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   12f1c:	9804      	ldr	r0, [sp, #16]
   12f1e:	3001      	adds	r0, #1
   12f20:	9004      	str	r0, [sp, #16]
   12f22:	e0ea      	b.n	130fa <cbvprintf_package+0x28a>
			switch (*fmt) {
   12f24:	287a      	cmp	r0, #122	; 0x7a
   12f26:	d860      	bhi.n	12fea <cbvprintf_package+0x17a>
   12f28:	284b      	cmp	r0, #75	; 0x4b
   12f2a:	d80e      	bhi.n	12f4a <cbvprintf_package+0xda>
   12f2c:	2847      	cmp	r0, #71	; 0x47
   12f2e:	d85c      	bhi.n	12fea <cbvprintf_package+0x17a>
   12f30:	2829      	cmp	r0, #41	; 0x29
   12f32:	d82f      	bhi.n	12f94 <cbvprintf_package+0x124>
   12f34:	2825      	cmp	r0, #37	; 0x25
   12f36:	d055      	beq.n	12fe4 <cbvprintf_package+0x174>
   12f38:	d857      	bhi.n	12fea <cbvprintf_package+0x17a>
   12f3a:	2820      	cmp	r0, #32
   12f3c:	d07d      	beq.n	1303a <cbvprintf_package+0x1ca>
   12f3e:	3823      	subs	r0, #35	; 0x23
   12f40:	f1d0 0b00 	rsbs	fp, r0, #0
   12f44:	eb4b 0b00 	adc.w	fp, fp, r0
   12f48:	e077      	b.n	1303a <cbvprintf_package+0x1ca>
   12f4a:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   12f4e:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   12f52:	d84a      	bhi.n	12fea <cbvprintf_package+0x17a>
   12f54:	e8df f00c 	tbb	[pc, ip]
   12f58:	49494971 	.word	0x49494971
   12f5c:	49494949 	.word	0x49494949
   12f60:	49494949 	.word	0x49494949
   12f64:	4949494c 	.word	0x4949494c
   12f68:	49494949 	.word	0x49494949
   12f6c:	4c495a49 	.word	0x4c495a49
   12f70:	5a5a5a4c 	.word	0x5a5a5a4c
   12f74:	496e4c71 	.word	0x496e4c71
   12f78:	4c184971 	.word	0x4c184971
   12f7c:	83494918 	.word	0x83494918
   12f80:	49494c80 	.word	0x49494c80
   12f84:	494c      	.short	0x494c
   12f86:	80          	.byte	0x80
   12f87:	00          	.byte	0x00
   12f88:	2000      	movs	r0, #0
   12f8a:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   12f8e:	f04f 0a04 	mov.w	sl, #4
   12f92:	e039      	b.n	13008 <cbvprintf_package+0x198>
			switch (*fmt) {
   12f94:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   12f98:	fa5f fc8c 	uxtb.w	ip, ip
   12f9c:	2201      	movs	r2, #1
   12f9e:	fa02 fc0c 	lsl.w	ip, r2, ip
   12fa2:	ea1c 0f0e 	tst.w	ip, lr
   12fa6:	d148      	bne.n	1303a <cbvprintf_package+0x1ca>
   12fa8:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   12fac:	d12e      	bne.n	1300c <cbvprintf_package+0x19c>
   12fae:	ea1c 0b02 	ands.w	fp, ip, r2
   12fb2:	d042      	beq.n	1303a <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
   12fb4:	3c01      	subs	r4, #1
   12fb6:	4454      	add	r4, sl
   12fb8:	f1ca 0c00 	rsb	ip, sl, #0
   12fbc:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   12fc0:	2d00      	cmp	r5, #0
   12fc2:	d061      	beq.n	13088 <cbvprintf_package+0x218>
   12fc4:	eba3 0c05 	sub.w	ip, r3, r5
   12fc8:	44a4      	add	ip, r4
   12fca:	45b4      	cmp	ip, r6
   12fcc:	f63f af68 	bhi.w	12ea0 <cbvprintf_package+0x30>
		if (is_str_arg) {
   12fd0:	2800      	cmp	r0, #0
   12fd2:	d168      	bne.n	130a6 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   12fd4:	2b04      	cmp	r3, #4
   12fd6:	d147      	bne.n	13068 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
   12fd8:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   12fdc:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   12fde:	3404      	adds	r4, #4
   12fe0:	2304      	movs	r3, #4
   12fe2:	e02a      	b.n	1303a <cbvprintf_package+0x1ca>
				arg_idx--;
   12fe4:	9a01      	ldr	r2, [sp, #4]
   12fe6:	3a01      	subs	r2, #1
   12fe8:	9201      	str	r2, [sp, #4]
				parsing = false;
   12fea:	f04f 0b00 	mov.w	fp, #0
				continue;
   12fee:	e024      	b.n	1303a <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
   12ff0:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   12ff4:	286c      	cmp	r0, #108	; 0x6c
   12ff6:	d134      	bne.n	13062 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
   12ff8:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   12ffc:	2000      	movs	r0, #0
   12ffe:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   13000:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   13002:	d1c4      	bne.n	12f8e <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
   13004:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   13008:	4653      	mov	r3, sl
   1300a:	e7d3      	b.n	12fb4 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
   1300c:	f108 0807 	add.w	r8, r8, #7
   13010:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   13014:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   13016:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   1301a:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   1301e:	b135      	cbz	r5, 1302e <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
   13020:	9806      	ldr	r0, [sp, #24]
   13022:	4420      	add	r0, r4
   13024:	42b0      	cmp	r0, r6
   13026:	f63f af3b 	bhi.w	12ea0 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   1302a:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   1302e:	3408      	adds	r4, #8
				parsing = false;
   13030:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   13034:	f04f 0a08 	mov.w	sl, #8
   13038:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   1303a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1303e:	2800      	cmp	r0, #0
   13040:	d078      	beq.n	13134 <cbvprintf_package+0x2c4>
			if (!parsing) {
   13042:	f1bb 0f00 	cmp.w	fp, #0
   13046:	f47f af6d 	bne.w	12f24 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
   1304a:	2825      	cmp	r0, #37	; 0x25
   1304c:	d1f5      	bne.n	1303a <cbvprintf_package+0x1ca>
					arg_idx++;
   1304e:	9b01      	ldr	r3, [sp, #4]
   13050:	3301      	adds	r3, #1
   13052:	9301      	str	r3, [sp, #4]
					parsing = true;
   13054:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   13058:	f04f 0a04 	mov.w	sl, #4
   1305c:	e7ec      	b.n	13038 <cbvprintf_package+0x1c8>
			switch (*fmt) {
   1305e:	4658      	mov	r0, fp
   13060:	e793      	b.n	12f8a <cbvprintf_package+0x11a>
   13062:	2000      	movs	r0, #0
				parsing = false;
   13064:	4683      	mov	fp, r0
   13066:	e7a5      	b.n	12fb4 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
   13068:	2b08      	cmp	r3, #8
   1306a:	d002      	beq.n	13072 <cbvprintf_package+0x202>
					return -EINVAL;
   1306c:	f06f 0015 	mvn.w	r0, #21
   13070:	e718      	b.n	12ea4 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
   13072:	f108 0807 	add.w	r8, r8, #7
   13076:	f028 0807 	bic.w	r8, r8, #7
   1307a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   1307e:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   13082:	3408      	adds	r4, #8
   13084:	2308      	movs	r3, #8
   13086:	e7d8      	b.n	1303a <cbvprintf_package+0x1ca>
		if (is_str_arg) {
   13088:	b968      	cbnz	r0, 130a6 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   1308a:	2b04      	cmp	r3, #4
   1308c:	d102      	bne.n	13094 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
   1308e:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   13092:	e7a4      	b.n	12fde <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
   13094:	2b08      	cmp	r3, #8
   13096:	d1e9      	bne.n	1306c <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
   13098:	f108 0807 	add.w	r8, r8, #7
   1309c:	f028 0807 	bic.w	r8, r8, #7
   130a0:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   130a4:	e7ed      	b.n	13082 <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   130a6:	9a05      	ldr	r2, [sp, #20]
   130a8:	3a01      	subs	r2, #1
   130aa:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   130ac:	f858 2b04 	ldr.w	r2, [r8], #4
   130b0:	9200      	str	r2, [sp, #0]
   130b2:	e70d      	b.n	12ed0 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   130b4:	9a03      	ldr	r2, [sp, #12]
   130b6:	0790      	lsls	r0, r2, #30
   130b8:	d520      	bpl.n	130fc <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   130ba:	eba4 0e05 	sub.w	lr, r4, r5
   130be:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   130c2:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   130c6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   130ca:	d2cf      	bcs.n	1306c <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   130cc:	2f0f      	cmp	r7, #15
   130ce:	d8cd      	bhi.n	1306c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   130d0:	b1f5      	cbz	r5, 13110 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   130d2:	f107 0240 	add.w	r2, r7, #64	; 0x40
   130d6:	eb0d 0e02 	add.w	lr, sp, r2
   130da:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   130dc:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   130de:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   130e2:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   130e6:	f1bc 0f00 	cmp.w	ip, #0
   130ea:	f43f af17 	beq.w	12f1c <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   130ee:	f060 007f 	orn	r0, r0, #127	; 0x7f
   130f2:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   130f6:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   130fa:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   130fc:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   13100:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   13102:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   13104:	f64f 7eda 	movw	lr, #65498	; 0xffda
   13108:	e797      	b.n	1303a <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1310a:	f04f 0c00 	mov.w	ip, #0
   1310e:	e7da      	b.n	130c6 <cbvprintf_package+0x256>
				} else if (is_ro) {
   13110:	f1bc 0f00 	cmp.w	ip, #0
   13114:	d001      	beq.n	1311a <cbvprintf_package+0x2aa>
					len += 1;
   13116:	3601      	adds	r6, #1
   13118:	e7ef      	b.n	130fa <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
   1311a:	9802      	ldr	r0, [sp, #8]
					len += 2;
   1311c:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   1311e:	2800      	cmp	r0, #0
   13120:	d1eb      	bne.n	130fa <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
   13122:	9800      	ldr	r0, [sp, #0]
   13124:	e9cd 3106 	strd	r3, r1, [sp, #24]
   13128:	f019 f882 	bl	2c230 <strlen>
   1312c:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   13130:	4406      	add	r6, r0
   13132:	e7e2      	b.n	130fa <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   13134:	1b63      	subs	r3, r4, r5
   13136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1313a:	d297      	bcs.n	1306c <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
   1313c:	b945      	cbnz	r5, 13150 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   1313e:	f1a6 0408 	sub.w	r4, r6, #8
   13142:	18e0      	adds	r0, r4, r3
   13144:	e6ae      	b.n	12ea4 <cbvprintf_package+0x34>
   13146:	bf00      	nop
   13148:	0002fe60 	.word	0x0002fe60
   1314c:	00033f50 	.word	0x00033f50
	if (rws_pos_en) {
   13150:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   13152:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   13154:	089b      	lsrs	r3, r3, #2
   13156:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   13158:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   1315c:	b1c2      	cbz	r2, 13190 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   1315e:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   13160:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   13164:	f1b9 0f00 	cmp.w	r9, #0
   13168:	d005      	beq.n	13176 <cbvprintf_package+0x306>
   1316a:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   1316c:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   1316e:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   13172:	4297      	cmp	r7, r2
   13174:	d10e      	bne.n	13194 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
   13176:	f1c5 0301 	rsb	r3, r5, #1
   1317a:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   1317e:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   13182:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   13184:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   13188:	4557      	cmp	r7, sl
   1318a:	d112      	bne.n	131b2 <cbvprintf_package+0x342>
	return BUF_OFFSET;
   1318c:	1b60      	subs	r0, r4, r5
   1318e:	e689      	b.n	12ea4 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   13190:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   13192:	e7e5      	b.n	13160 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   13194:	f810 3b01 	ldrb.w	r3, [r0], #1
   13198:	0619      	lsls	r1, r3, #24
   1319a:	d508      	bpl.n	131ae <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
   1319c:	eb04 0e0c 	add.w	lr, r4, ip
   131a0:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   131a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   131a6:	f63f ae7b 	bhi.w	12ea0 <cbvprintf_package+0x30>
			*buf++ = pos;
   131aa:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   131ae:	3201      	adds	r2, #1
   131b0:	e7df      	b.n	13172 <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   131b2:	f1b9 0f00 	cmp.w	r9, #0
   131b6:	d003      	beq.n	131c0 <cbvprintf_package+0x350>
   131b8:	f998 2000 	ldrsb.w	r2, [r8]
   131bc:	2a00      	cmp	r2, #0
   131be:	db17      	blt.n	131f0 <cbvprintf_package+0x380>
		if (rws_pos_en) {
   131c0:	9b02      	ldr	r3, [sp, #8]
   131c2:	b1d3      	cbz	r3, 131fa <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
   131c4:	f81a 200b 	ldrb.w	r2, [sl, fp]
   131c8:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   131cc:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   131ce:	9b01      	ldr	r3, [sp, #4]
   131d0:	1898      	adds	r0, r3, r2
   131d2:	4420      	add	r0, r4
   131d4:	42b0      	cmp	r0, r6
   131d6:	f63f ae63 	bhi.w	12ea0 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   131da:	f898 0000 	ldrb.w	r0, [r8]
   131de:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   131e2:	9900      	ldr	r1, [sp, #0]
   131e4:	9203      	str	r2, [sp, #12]
   131e6:	4620      	mov	r0, r4
   131e8:	f019 f879 	bl	2c2de <memcpy>
		buf += size;
   131ec:	9a03      	ldr	r2, [sp, #12]
   131ee:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   131f0:	f10a 0a01 	add.w	sl, sl, #1
   131f4:	f108 0801 	add.w	r8, r8, #1
   131f8:	e7c6      	b.n	13188 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   131fa:	f898 2000 	ldrb.w	r2, [r8]
   131fe:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   13202:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   13204:	9b02      	ldr	r3, [sp, #8]
   13206:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   1320a:	9800      	ldr	r0, [sp, #0]
   1320c:	f019 f810 	bl	2c230 <strlen>
   13210:	1c42      	adds	r2, r0, #1
   13212:	e7dc      	b.n	131ce <cbvprintf_package+0x35e>
		return -EFAULT;
   13214:	f06f 000d 	mvn.w	r0, #13
   13218:	e644      	b.n	12ea4 <cbvprintf_package+0x34>
   1321a:	bf00      	nop

0001321c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   1321c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13220:	b095      	sub	sp, #84	; 0x54
   13222:	af00      	add	r7, sp, #0
   13224:	4604      	mov	r4, r0
   13226:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   1322a:	61bb      	str	r3, [r7, #24]
   1322c:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   13230:	627a      	str	r2, [r7, #36]	; 0x24
   13232:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   13234:	6239      	str	r1, [r7, #32]
   13236:	b951      	cbnz	r1, 1324e <cbprintf_package_convert+0x32>
	buf += ros_nbr;
   13238:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   1323a:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   1323c:	7880      	ldrb	r0, [r0, #2]
   1323e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   13242:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
   13244:	6a3b      	ldr	r3, [r7, #32]
   13246:	429e      	cmp	r6, r3
   13248:	d81a      	bhi.n	13280 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
   1324a:	1b03      	subs	r3, r0, r4
   1324c:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   1324e:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   13252:	78e3      	ldrb	r3, [r4, #3]
   13254:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   13256:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
   13258:	f1ba 0f00 	cmp.w	sl, #0
   1325c:	d002      	beq.n	13264 <cbprintf_package_convert+0x48>
   1325e:	f01b 0f01 	tst.w	fp, #1
   13262:	d117      	bne.n	13294 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
   13264:	697b      	ldr	r3, [r7, #20]
   13266:	bb5b      	cbnz	r3, 132c0 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   13268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1326a:	b11b      	cbz	r3, 13274 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
   1326c:	69ba      	ldr	r2, [r7, #24]
   1326e:	6a39      	ldr	r1, [r7, #32]
   13270:	4620      	mov	r0, r4
   13272:	4798      	blx	r3
		}

		return in_len;
   13274:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   13276:	4628      	mov	r0, r5
   13278:	3754      	adds	r7, #84	; 0x54
   1327a:	46bd      	mov	sp, r7
   1327c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   13280:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
   13282:	4628      	mov	r0, r5
   13284:	f018 ffd4 	bl	2c230 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
   13288:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
   1328a:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
   1328c:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
   1328e:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
   13290:	623b      	str	r3, [r7, #32]
   13292:	e7d7      	b.n	13244 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
   13294:	f894 8000 	ldrb.w	r8, [r4]
   13298:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   1329a:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   1329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   1329e:	ea4f 0288 	mov.w	r2, r8, lsl #2
   132a2:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   132a4:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   132a8:	2b00      	cmp	r3, #0
   132aa:	f040 8101 	bne.w	134b0 <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
   132ae:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   132b0:	46c1      	mov	r9, r8
   132b2:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
   132b6:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   132b8:	454b      	cmp	r3, r9
   132ba:	d14e      	bne.n	1335a <cbprintf_package_convert+0x13e>
   132bc:	44d0      	add	r8, sl
   132be:	e013      	b.n	132e8 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
   132c0:	f01b 0f02 	tst.w	fp, #2
   132c4:	d0d0      	beq.n	13268 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
   132c6:	f894 8000 	ldrb.w	r8, [r4]
   132ca:	ea4f 0388 	mov.w	r3, r8, lsl #2
   132ce:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   132d0:	6863      	ldr	r3, [r4, #4]
   132d2:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   132d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   132d6:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   132da:	2b00      	cmp	r3, #0
   132dc:	d178      	bne.n	133d0 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
   132de:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   132e0:	f1ba 0f00 	cmp.w	sl, #0
   132e4:	d14e      	bne.n	13384 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
   132e6:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
   132e8:	f01b 0f05 	tst.w	fp, #5
   132ec:	bf0c      	ite	eq
   132ee:	2302      	moveq	r3, #2
   132f0:	2301      	movne	r3, #1
   132f2:	627b      	str	r3, [r7, #36]	; 0x24
   132f4:	697b      	ldr	r3, [r7, #20]
   132f6:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   132fa:	f00b 0302 	and.w	r3, fp, #2
   132fe:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
   13300:	45d0      	cmp	r8, sl
   13302:	d0b8      	beq.n	13276 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
   13304:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
   13308:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   1330c:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
   13310:	4bac      	ldr	r3, [pc, #688]	; (135c4 <cbprintf_package_convert+0x3a8>)
   13312:	4599      	cmp	r9, r3
   13314:	d302      	bcc.n	1331c <cbprintf_package_convert+0x100>
   13316:	4bac      	ldr	r3, [pc, #688]	; (135c8 <cbprintf_package_convert+0x3ac>)
   13318:	4599      	cmp	r9, r3
   1331a:	d339      	bcc.n	13390 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   1331c:	693b      	ldr	r3, [r7, #16]
   1331e:	2b00      	cmp	r3, #0
   13320:	d043      	beq.n	133aa <cbprintf_package_convert+0x18e>
   13322:	69f8      	ldr	r0, [r7, #28]
   13324:	f017 f860 	bl	2a3e8 <is_ptr>
   13328:	2800      	cmp	r0, #0
   1332a:	d03e      	beq.n	133aa <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   1332c:	46e9      	mov	r9, sp
   1332e:	b08a      	sub	sp, #40	; 0x28
   13330:	466a      	mov	r2, sp
   13332:	4ba6      	ldr	r3, [pc, #664]	; (135cc <cbprintf_package_convert+0x3b0>)
   13334:	6153      	str	r3, [r2, #20]
   13336:	69fb      	ldr	r3, [r7, #28]
   13338:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1333c:	f44f 7300 	mov.w	r3, #512	; 0x200
   13340:	8413      	strh	r3, [r2, #32]
   13342:	4ba3      	ldr	r3, [pc, #652]	; (135d0 <cbprintf_package_convert+0x3b4>)
   13344:	f842 3f10 	str.w	r3, [r2, #16]!
   13348:	48a2      	ldr	r0, [pc, #648]	; (135d4 <cbprintf_package_convert+0x3b8>)
   1334a:	2300      	movs	r3, #0
   1334c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   13350:	f001 fc38 	bl	14bc4 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   13354:	3d02      	subs	r5, #2
   13356:	46cd      	mov	sp, r9
				continue;
   13358:	e7d2      	b.n	13300 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
   1335a:	f819 2b01 	ldrb.w	r2, [r9], #1
   1335e:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   13360:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   13364:	f018 ff64 	bl	2c230 <strlen>
				if (strl && strl_cnt < strl_len) {
   13368:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   1336c:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   1336e:	b13a      	cbz	r2, 13380 <cbprintf_package_convert+0x164>
   13370:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   13374:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   13376:	bf3e      	ittt	cc
   13378:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   1337a:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   1337e:	3601      	addcc	r6, #1
				out_len += len;
   13380:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   13382:	e799      	b.n	132b8 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   13384:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   13388:	bf1c      	itt	ne
   1338a:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   1338c:	44d0      	addne	r8, sl
   1338e:	e7ab      	b.n	132e8 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   13390:	693b      	ldr	r3, [r7, #16]
   13392:	b123      	cbz	r3, 1339e <cbprintf_package_convert+0x182>
   13394:	69f8      	ldr	r0, [r7, #28]
   13396:	f017 f827 	bl	2a3e8 <is_ptr>
   1339a:	2800      	cmp	r0, #0
   1339c:	d1c6      	bne.n	1332c <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   1339e:	f01b 0f01 	tst.w	fp, #1
   133a2:	d105      	bne.n	133b0 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
   133a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   133a6:	1aed      	subs	r5, r5, r3
   133a8:	e7aa      	b.n	13300 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   133aa:	6a3b      	ldr	r3, [r7, #32]
   133ac:	2b00      	cmp	r3, #0
   133ae:	d0a7      	beq.n	13300 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
   133b0:	4648      	mov	r0, r9
   133b2:	f018 ff3d 	bl	2c230 <strlen>
				if (strl && strl_cnt < strl_len) {
   133b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   133b8:	b143      	cbz	r3, 133cc <cbprintf_package_convert+0x1b0>
   133ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   133be:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   133c0:	bf3f      	itttt	cc
   133c2:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   133c4:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   133c6:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   133ca:	3601      	addcc	r6, #1
				out_len += (len - 1);
   133cc:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
   133ce:	e797      	b.n	13300 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   133d0:	f1ba 0f00 	cmp.w	sl, #0
   133d4:	d071      	beq.n	134ba <cbprintf_package_convert+0x29e>
   133d6:	f01b 0604 	ands.w	r6, fp, #4
   133da:	d071      	beq.n	134c0 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
   133dc:	46d1      	mov	r9, sl
		scpy_cnt = 0;
   133de:	2600      	movs	r6, #0
		dst = keep_str_pos;
   133e0:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   133e4:	4652      	mov	r2, sl
   133e6:	4641      	mov	r1, r8
   133e8:	f018 ff79 	bl	2c2de <memcpy>
	str_pos += ros_nbr;
   133ec:	697b      	ldr	r3, [r7, #20]
   133ee:	005b      	lsls	r3, r3, #1
   133f0:	60bb      	str	r3, [r7, #8]
   133f2:	697b      	ldr	r3, [r7, #20]
   133f4:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
   133f6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   133fa:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   133fc:	f00b 0302 	and.w	r3, fp, #2
   13400:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   13402:	697b      	ldr	r3, [r7, #20]
   13404:	4598      	cmp	r8, r3
   13406:	d15d      	bne.n	134c4 <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
   13408:	7823      	ldrb	r3, [r4, #0]
   1340a:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1340c:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1340e:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   13412:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   13416:	bf0c      	ite	eq
   13418:	ea4f 0159 	moveq.w	r1, r9, lsr #1
   1341c:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1341e:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   13422:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   13424:	f040 809d 	bne.w	13562 <cbprintf_package_convert+0x346>
   13428:	f01b 0f04 	tst.w	fp, #4
   1342c:	bf14      	ite	ne
   1342e:	4648      	movne	r0, r9
   13430:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   13432:	f894 b002 	ldrb.w	fp, [r4, #2]
   13436:	f894 8003 	ldrb.w	r8, [r4, #3]
   1343a:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
   1343c:	7062      	strb	r2, [r4, #1]
   1343e:	70a0      	strb	r0, [r4, #2]
   13440:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   13442:	69ba      	ldr	r2, [r7, #24]
   13444:	68f9      	ldr	r1, [r7, #12]
   13446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13448:	4620      	mov	r0, r4
   1344a:	4798      	blx	r3
	if (rv < 0) {
   1344c:	1e05      	subs	r5, r0, #0
   1344e:	f6ff af12 	blt.w	13276 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
   13452:	69fb      	ldr	r3, [r7, #28]
   13454:	7023      	strb	r3, [r4, #0]
   13456:	693b      	ldr	r3, [r7, #16]
   13458:	7063      	strb	r3, [r4, #1]
   1345a:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   1345e:	69ba      	ldr	r2, [r7, #24]
   13460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   13462:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   13466:	4649      	mov	r1, r9
   13468:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1346c:	4798      	blx	r3
	if (rv < 0) {
   1346e:	f1b0 0800 	subs.w	r8, r0, #0
   13472:	f2c0 80a3 	blt.w	135bc <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   13476:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   13478:	69ba      	ldr	r2, [r7, #24]
   1347a:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   1347c:	eba3 010a 	sub.w	r1, r3, sl
   13480:	68fb      	ldr	r3, [r7, #12]
   13482:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   13484:	68bb      	ldr	r3, [r7, #8]
   13486:	1ac9      	subs	r1, r1, r3
   13488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1348a:	4798      	blx	r3
	if (rv < 0) {
   1348c:	2800      	cmp	r0, #0
   1348e:	f2c0 8097 	blt.w	135c0 <cbprintf_package_convert+0x3a4>
	out_len += rv;
   13492:	44a8      	add	r8, r5
	out_len += rv;
   13494:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   13498:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   1349c:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   134a0:	45b3      	cmp	fp, r6
   134a2:	d360      	bcc.n	13566 <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
   134a4:	2100      	movs	r1, #0
   134a6:	69ba      	ldr	r2, [r7, #24]
   134a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   134aa:	4608      	mov	r0, r1
   134ac:	4798      	blx	r3
	return out_len;
   134ae:	e6e2      	b.n	13276 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
   134b0:	f04f 0900 	mov.w	r9, #0
   134b4:	f107 0030 	add.w	r0, r7, #48	; 0x30
   134b8:	e794      	b.n	133e4 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
   134ba:	4656      	mov	r6, sl
		keep_cnt = 0;
   134bc:	46d1      	mov	r9, sl
   134be:	e795      	b.n	133ec <cbprintf_package_convert+0x1d0>
   134c0:	46b1      	mov	r9, r6
   134c2:	e793      	b.n	133ec <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
   134c4:	f818 1b02 	ldrb.w	r1, [r8], #2
   134c8:	4a3e      	ldr	r2, [pc, #248]	; (135c4 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
   134ca:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   134ce:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   134d2:	4293      	cmp	r3, r2
   134d4:	d302      	bcc.n	134dc <cbprintf_package_convert+0x2c0>
   134d6:	4a3c      	ldr	r2, [pc, #240]	; (135c8 <cbprintf_package_convert+0x3ac>)
   134d8:	4293      	cmp	r3, r2
   134da:	d31c      	bcc.n	13516 <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   134dc:	693b      	ldr	r3, [r7, #16]
   134de:	b123      	cbz	r3, 134ea <cbprintf_package_convert+0x2ce>
   134e0:	69f8      	ldr	r0, [r7, #28]
   134e2:	f016 ff81 	bl	2a3e8 <is_ptr>
   134e6:	2800      	cmp	r0, #0
   134e8:	d18b      	bne.n	13402 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   134ea:	687b      	ldr	r3, [r7, #4]
   134ec:	b9f3      	cbnz	r3, 1352c <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
   134ee:	f109 0228 	add.w	r2, r9, #40	; 0x28
   134f2:	f107 0028 	add.w	r0, r7, #40	; 0x28
   134f6:	4402      	add	r2, r0
   134f8:	f109 0301 	add.w	r3, r9, #1
   134fc:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   13500:	f107 0250 	add.w	r2, r7, #80	; 0x50
   13504:	fa52 f383 	uxtab	r3, r2, r3
   13508:	f109 0902 	add.w	r9, r9, #2
   1350c:	fa5f f989 	uxtb.w	r9, r9
   13510:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   13514:	e775      	b.n	13402 <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   13516:	693b      	ldr	r3, [r7, #16]
   13518:	b12b      	cbz	r3, 13526 <cbprintf_package_convert+0x30a>
   1351a:	69f8      	ldr	r0, [r7, #28]
   1351c:	f016 ff64 	bl	2a3e8 <is_ptr>
   13520:	2800      	cmp	r0, #0
   13522:	f47f af6e 	bne.w	13402 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   13526:	f01b 0f01 	tst.w	fp, #1
   1352a:	d009      	beq.n	13540 <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   1352c:	f106 0228 	add.w	r2, r6, #40	; 0x28
   13530:	f107 0128 	add.w	r1, r7, #40	; 0x28
   13534:	1c73      	adds	r3, r6, #1
   13536:	1856      	adds	r6, r2, r1
   13538:	f806 5c20 	strb.w	r5, [r6, #-32]
   1353c:	b2de      	uxtb	r6, r3
   1353e:	e760      	b.n	13402 <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   13540:	f01b 0f04 	tst.w	fp, #4
   13544:	f43f af5d 	beq.w	13402 <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
   13548:	f109 0228 	add.w	r2, r9, #40	; 0x28
   1354c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   13550:	f109 0301 	add.w	r3, r9, #1
   13554:	eb02 0901 	add.w	r9, r2, r1
   13558:	f809 5c10 	strb.w	r5, [r9, #-16]
   1355c:	fa5f f983 	uxtb.w	r9, r3
   13560:	e74f      	b.n	13402 <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   13562:	2000      	movs	r0, #0
   13564:	e765      	b.n	13432 <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
   13566:	f81b 300a 	ldrb.w	r3, [fp, sl]
   1356a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   1356e:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   13572:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   13574:	b1fb      	cbz	r3, 135b6 <cbprintf_package_convert+0x39a>
   13576:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   1357a:	69ba      	ldr	r2, [r7, #24]
   1357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1357e:	2101      	movs	r1, #1
   13580:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   13584:	4798      	blx	r3
		if (rv < 0) {
   13586:	2800      	cmp	r0, #0
   13588:	db1a      	blt.n	135c0 <cbprintf_package_convert+0x3a4>
		out_len += rv;
   1358a:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   1358c:	f1b8 0f00 	cmp.w	r8, #0
   13590:	d106      	bne.n	135a0 <cbprintf_package_convert+0x384>
   13592:	4648      	mov	r0, r9
   13594:	f018 fe4c 	bl	2c230 <strlen>
   13598:	f100 0801 	add.w	r8, r0, #1
   1359c:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   135a0:	69ba      	ldr	r2, [r7, #24]
   135a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   135a4:	4641      	mov	r1, r8
   135a6:	4648      	mov	r0, r9
   135a8:	4798      	blx	r3
		if (rv < 0) {
   135aa:	2800      	cmp	r0, #0
   135ac:	db08      	blt.n	135c0 <cbprintf_package_convert+0x3a4>
		out_len += rv;
   135ae:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   135b0:	f10b 0b01 	add.w	fp, fp, #1
   135b4:	e774      	b.n	134a0 <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
   135b6:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   135ba:	e7de      	b.n	1357a <cbprintf_package_convert+0x35e>
   135bc:	4645      	mov	r5, r8
   135be:	e65a      	b.n	13276 <cbprintf_package_convert+0x5a>
   135c0:	4605      	mov	r5, r0
   135c2:	e658      	b.n	13276 <cbprintf_package_convert+0x5a>
   135c4:	0002fe60 	.word	0x0002fe60
   135c8:	00033f50 	.word	0x00033f50
   135cc:	000312b1 	.word	0x000312b1
   135d0:	01000004 	.word	0x01000004
   135d4:	00030304 	.word	0x00030304

000135d8 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   135d8:	4b01      	ldr	r3, [pc, #4]	; (135e0 <__printk_hook_install+0x8>)
   135da:	6018      	str	r0, [r3, #0]
}
   135dc:	4770      	bx	lr
   135de:	bf00      	nop
   135e0:	20000730 	.word	0x20000730

000135e4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   135e4:	b530      	push	{r4, r5, lr}
   135e6:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   135e8:	2500      	movs	r5, #0
   135ea:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   135ee:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   135f0:	9500      	str	r5, [sp, #0]
   135f2:	a903      	add	r1, sp, #12
   135f4:	4805      	ldr	r0, [pc, #20]	; (1360c <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   135f6:	9505      	str	r5, [sp, #20]
   135f8:	f000 f92e 	bl	13858 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   135fc:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   13600:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   13602:	bfb8      	it	lt
   13604:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   13606:	b007      	add	sp, #28
   13608:	bd30      	pop	{r4, r5, pc}
   1360a:	bf00      	nop
   1360c:	0002a529 	.word	0x0002a529

00013610 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   13610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13614:	8b05      	ldrh	r5, [r0, #24]
{
   13616:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   13618:	0728      	lsls	r0, r5, #28
{
   1361a:	4690      	mov	r8, r2
	if (processing) {
   1361c:	d411      	bmi.n	13642 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   1361e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13620:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   13624:	f040 80cd 	bne.w	137c2 <process_event+0x1b2>
			evt = process_recheck(mgr);
   13628:	4620      	mov	r0, r4
   1362a:	f017 f996 	bl	2a95a <process_recheck>
		}

		if (evt == EVT_NOP) {
   1362e:	b178      	cbz	r0, 13650 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   13630:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13632:	8b21      	ldrh	r1, [r4, #24]
   13634:	2804      	cmp	r0, #4
   13636:	d811      	bhi.n	1365c <process_event+0x4c>
   13638:	e8df f000 	tbb	[pc, r0]
   1363c:	856d10c3 	.word	0x856d10c3
   13640:	95          	.byte	0x95
   13641:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   13642:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   13644:	bf0c      	ite	eq
   13646:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1364a:	f045 0520 	orrne.w	r5, r5, #32
   1364e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   13650:	f388 8811 	msr	BASEPRI, r8
   13654:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   13658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1365c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   13660:	45aa      	cmp	sl, r5
   13662:	f000 80a6 	beq.w	137b2 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   13666:	2700      	movs	r7, #0
   13668:	46b9      	mov	r9, r7
   1366a:	463e      	mov	r6, r7
   1366c:	68a3      	ldr	r3, [r4, #8]
   1366e:	2b00      	cmp	r3, #0
   13670:	f000 80bd 	beq.w	137ee <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   13674:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   13678:	8321      	strh	r1, [r4, #24]
   1367a:	f388 8811 	msr	BASEPRI, r8
   1367e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   13682:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13684:	2900      	cmp	r1, #0
   13686:	f000 80bb 	beq.w	13800 <process_event+0x1f0>
	return node->next;
   1368a:	680d      	ldr	r5, [r1, #0]
   1368c:	2900      	cmp	r1, #0
   1368e:	f000 80b7 	beq.w	13800 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   13692:	f8d1 8004 	ldr.w	r8, [r1, #4]
   13696:	4633      	mov	r3, r6
   13698:	4652      	mov	r2, sl
   1369a:	4620      	mov	r0, r4
   1369c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1369e:	2d00      	cmp	r5, #0
   136a0:	d076      	beq.n	13790 <process_event+0x180>
   136a2:	682b      	ldr	r3, [r5, #0]
   136a4:	4629      	mov	r1, r5
   136a6:	461d      	mov	r5, r3
   136a8:	e7f0      	b.n	1368c <process_event+0x7c>
   136aa:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   136ae:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   136b0:	2a01      	cmp	r2, #1
   136b2:	d81b      	bhi.n	136ec <process_event+0xdc>
	list->head = NULL;
   136b4:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   136b6:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   136ba:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   136bc:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   136be:	b289      	uxth	r1, r1
	list->tail = NULL;
   136c0:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   136c4:	d109      	bne.n	136da <process_event+0xca>
   136c6:	463b      	mov	r3, r7
   136c8:	e003      	b.n	136d2 <process_event+0xc2>
				mgr->refs += 1U;
   136ca:	8b62      	ldrh	r2, [r4, #26]
   136cc:	3201      	adds	r2, #1
   136ce:	8362      	strh	r2, [r4, #26]
	return node->next;
   136d0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   136d2:	2b00      	cmp	r3, #0
   136d4:	d1f9      	bne.n	136ca <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   136d6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   136da:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   136dc:	4620      	mov	r0, r4
   136de:	f017 f93c 	bl	2a95a <process_recheck>
   136e2:	2800      	cmp	r0, #0
   136e4:	d07b      	beq.n	137de <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   136e6:	f041 0120 	orr.w	r1, r1, #32
   136ea:	e077      	b.n	137dc <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   136ec:	2b04      	cmp	r3, #4
   136ee:	d10a      	bne.n	13706 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   136f0:	f021 0107 	bic.w	r1, r1, #7
   136f4:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   136f6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   136f8:	4620      	mov	r0, r4
   136fa:	f017 f92e 	bl	2a95a <process_recheck>
   136fe:	b110      	cbz	r0, 13706 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   13700:	f041 0120 	orr.w	r1, r1, #32
   13704:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13706:	8b21      	ldrh	r1, [r4, #24]
   13708:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1370c:	45aa      	cmp	sl, r5
   1370e:	d050      	beq.n	137b2 <process_event+0x1a2>
   13710:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   13712:	46b9      	mov	r9, r7
   13714:	e7aa      	b.n	1366c <process_event+0x5c>
			transit = mgr->transitions->start;
   13716:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13718:	f021 0107 	bic.w	r1, r1, #7
   1371c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   13720:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   13722:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   13726:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   13728:	d12d      	bne.n	13786 <process_event+0x176>
		    || (transit != NULL)) {
   1372a:	f1b9 0f00 	cmp.w	r9, #0
   1372e:	d040      	beq.n	137b2 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   13730:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   13734:	8321      	strh	r1, [r4, #24]
   13736:	f388 8811 	msr	BASEPRI, r8
   1373a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   1373e:	493a      	ldr	r1, [pc, #232]	; (13828 <process_event+0x218>)
   13740:	4620      	mov	r0, r4
   13742:	47c8      	blx	r9
   13744:	e029      	b.n	1379a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13746:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   1374a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1374c:	f041 0104 	orr.w	r1, r1, #4
   13750:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   13752:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   13754:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   13758:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1375a:	d0e6      	beq.n	1372a <process_event+0x11a>
   1375c:	2700      	movs	r7, #0
		res = 0;
   1375e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13760:	f04f 0a04 	mov.w	sl, #4
   13764:	e782      	b.n	1366c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13766:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   1376a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1376c:	f041 0105 	orr.w	r1, r1, #5
   13770:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   13772:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   13774:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   13778:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1377a:	d0d6      	beq.n	1372a <process_event+0x11a>
   1377c:	2700      	movs	r7, #0
		res = 0;
   1377e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13780:	f04f 0a05 	mov.w	sl, #5
   13784:	e772      	b.n	1366c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   13786:	2700      	movs	r7, #0
		res = 0;
   13788:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1378a:	f04f 0a06 	mov.w	sl, #6
   1378e:	e76d      	b.n	1366c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13790:	462b      	mov	r3, r5
   13792:	e787      	b.n	136a4 <process_event+0x94>
			if (transit != NULL) {
   13794:	f1b9 0f00 	cmp.w	r9, #0
   13798:	d1d1      	bne.n	1373e <process_event+0x12e>
	__asm__ volatile(
   1379a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1379e:	f3ef 8811 	mrs	r8, BASEPRI
   137a2:	f383 8812 	msr	BASEPRI_MAX, r3
   137a6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   137aa:	8b23      	ldrh	r3, [r4, #24]
   137ac:	f023 0308 	bic.w	r3, r3, #8
   137b0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   137b2:	8b25      	ldrh	r5, [r4, #24]
   137b4:	06ea      	lsls	r2, r5, #27
   137b6:	d52e      	bpl.n	13816 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   137b8:	f025 0310 	bic.w	r3, r5, #16
   137bc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   137be:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   137c2:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   137c4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   137c6:	2e00      	cmp	r6, #0
   137c8:	f6bf af6f 	bge.w	136aa <process_event+0x9a>
	list->head = NULL;
   137cc:	2300      	movs	r3, #0
		*clients = mgr->clients;
   137ce:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   137d0:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   137d4:	f021 0107 	bic.w	r1, r1, #7
   137d8:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   137dc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   137de:	8b21      	ldrh	r1, [r4, #24]
   137e0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   137e4:	45aa      	cmp	sl, r5
   137e6:	f04f 0900 	mov.w	r9, #0
   137ea:	f47f af3f 	bne.w	1366c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   137ee:	2f00      	cmp	r7, #0
   137f0:	d09b      	beq.n	1372a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   137f2:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   137f6:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   137f8:	f388 8811 	msr	BASEPRI, r8
   137fc:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   13800:	2f00      	cmp	r7, #0
   13802:	d0c7      	beq.n	13794 <process_event+0x184>
	return node->next;
   13804:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   13806:	4639      	mov	r1, r7
   13808:	4633      	mov	r3, r6
   1380a:	4652      	mov	r2, sl
   1380c:	4620      	mov	r0, r4
   1380e:	f017 f8d0 	bl	2a9b2 <notify_one>
	list->head = node;
   13812:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   13814:	e7f4      	b.n	13800 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   13816:	06ab      	lsls	r3, r5, #26
   13818:	f57f af1a 	bpl.w	13650 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1381c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13820:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   13822:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   13826:	e6ff      	b.n	13628 <process_event+0x18>
   13828:	0002a9df 	.word	0x0002a9df

0001382c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   1382c:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1382e:	4c09      	ldr	r4, [pc, #36]	; (13854 <crc8_ccitt+0x28>)
   13830:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   13832:	4291      	cmp	r1, r2
   13834:	d100      	bne.n	13838 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   13836:	bd10      	pop	{r4, pc}
		val ^= p[i];
   13838:	f811 3b01 	ldrb.w	r3, [r1], #1
   1383c:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1383e:	0903      	lsrs	r3, r0, #4
   13840:	0100      	lsls	r0, r0, #4
   13842:	5ce3      	ldrb	r3, [r4, r3]
   13844:	b2c0      	uxtb	r0, r0
   13846:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   13848:	0918      	lsrs	r0, r3, #4
   1384a:	011b      	lsls	r3, r3, #4
   1384c:	5c20      	ldrb	r0, [r4, r0]
   1384e:	b2db      	uxtb	r3, r3
   13850:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   13852:	e7ee      	b.n	13832 <crc8_ccitt+0x6>
   13854:	00031365 	.word	0x00031365

00013858 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   13858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1385c:	4681      	mov	r9, r0
   1385e:	b095      	sub	sp, #84	; 0x54
   13860:	468b      	mov	fp, r1
   13862:	4617      	mov	r7, r2
   13864:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   13866:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   13868:	7838      	ldrb	r0, [r7, #0]
   1386a:	b908      	cbnz	r0, 13870 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1386c:	4628      	mov	r0, r5
   1386e:	e358      	b.n	13f22 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   13870:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   13872:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   13874:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   13876:	d006      	beq.n	13886 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   13878:	4659      	mov	r1, fp
   1387a:	47c8      	blx	r9
   1387c:	2800      	cmp	r0, #0
   1387e:	f2c0 8350 	blt.w	13f22 <z_cbvprintf_impl+0x6ca>
   13882:	3501      	adds	r5, #1
		if (bps == NULL) {
   13884:	e1fb      	b.n	13c7e <z_cbvprintf_impl+0x426>
		} state = {
   13886:	2218      	movs	r2, #24
   13888:	2100      	movs	r1, #0
   1388a:	a80e      	add	r0, sp, #56	; 0x38
   1388c:	f018 fd32 	bl	2c2f4 <memset>
	if (*sp == '%') {
   13890:	787b      	ldrb	r3, [r7, #1]
   13892:	2b25      	cmp	r3, #37	; 0x25
   13894:	d07d      	beq.n	13992 <z_cbvprintf_impl+0x13a>
   13896:	2300      	movs	r3, #0
   13898:	1c78      	adds	r0, r7, #1
   1389a:	4698      	mov	r8, r3
   1389c:	469e      	mov	lr, r3
   1389e:	469c      	mov	ip, r3
   138a0:	461e      	mov	r6, r3
   138a2:	4601      	mov	r1, r0
		switch (*sp) {
   138a4:	f810 2b01 	ldrb.w	r2, [r0], #1
   138a8:	2a2b      	cmp	r2, #43	; 0x2b
   138aa:	f000 80a1 	beq.w	139f0 <z_cbvprintf_impl+0x198>
   138ae:	f200 8098 	bhi.w	139e2 <z_cbvprintf_impl+0x18a>
   138b2:	2a20      	cmp	r2, #32
   138b4:	f000 809f 	beq.w	139f6 <z_cbvprintf_impl+0x19e>
   138b8:	2a23      	cmp	r2, #35	; 0x23
   138ba:	f000 809f 	beq.w	139fc <z_cbvprintf_impl+0x1a4>
   138be:	b12b      	cbz	r3, 138cc <z_cbvprintf_impl+0x74>
   138c0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   138c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   138c8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   138cc:	f1b8 0f00 	cmp.w	r8, #0
   138d0:	d005      	beq.n	138de <z_cbvprintf_impl+0x86>
   138d2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   138d6:	f043 0320 	orr.w	r3, r3, #32
   138da:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   138de:	f1be 0f00 	cmp.w	lr, #0
   138e2:	d005      	beq.n	138f0 <z_cbvprintf_impl+0x98>
   138e4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   138e8:	f043 0310 	orr.w	r3, r3, #16
   138ec:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   138f0:	f1bc 0f00 	cmp.w	ip, #0
   138f4:	d005      	beq.n	13902 <z_cbvprintf_impl+0xaa>
   138f6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   138fa:	f043 0308 	orr.w	r3, r3, #8
   138fe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   13902:	b12e      	cbz	r6, 13910 <z_cbvprintf_impl+0xb8>
   13904:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   13908:	f043 0304 	orr.w	r3, r3, #4
   1390c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   13910:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   13914:	f003 0044 	and.w	r0, r3, #68	; 0x44
   13918:	2844      	cmp	r0, #68	; 0x44
   1391a:	d103      	bne.n	13924 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   1391c:	f36f 1386 	bfc	r3, #6, #1
   13920:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   13924:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   13928:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   1392a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1392e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   13932:	d17f      	bne.n	13a34 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   13934:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   13938:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   1393c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   1393e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   13942:	781a      	ldrb	r2, [r3, #0]
   13944:	2a2e      	cmp	r2, #46	; 0x2e
   13946:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1394a:	bf0c      	ite	eq
   1394c:	2101      	moveq	r1, #1
   1394e:	2100      	movne	r1, #0
   13950:	f361 0241 	bfi	r2, r1, #1, #1
   13954:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   13958:	d178      	bne.n	13a4c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   1395a:	785a      	ldrb	r2, [r3, #1]
   1395c:	2a2a      	cmp	r2, #42	; 0x2a
   1395e:	d06e      	beq.n	13a3e <z_cbvprintf_impl+0x1e6>
	++sp;
   13960:	3301      	adds	r3, #1
	size_t val = 0;
   13962:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   13964:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   13968:	4619      	mov	r1, r3
   1396a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1396e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   13972:	2e09      	cmp	r6, #9
   13974:	f240 8095 	bls.w	13aa2 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   13978:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   1397c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   1397e:	f3c1 0040 	ubfx	r0, r1, #1, #1
   13982:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   13986:	460a      	mov	r2, r1
   13988:	f360 0241 	bfi	r2, r0, #1, #1
   1398c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   13990:	e05c      	b.n	13a4c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   13992:	1cba      	adds	r2, r7, #2
   13994:	9203      	str	r2, [sp, #12]
   13996:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   1399a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1399e:	07da      	lsls	r2, r3, #31
   139a0:	f140 812e 	bpl.w	13c00 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   139a4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   139a8:	f1b8 0f00 	cmp.w	r8, #0
   139ac:	da07      	bge.n	139be <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   139ae:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   139b2:	f042 0204 	orr.w	r2, r2, #4
   139b6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   139ba:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   139be:	075e      	lsls	r6, r3, #29
   139c0:	f140 8127 	bpl.w	13c12 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   139c4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   139c8:	f1ba 0f00 	cmp.w	sl, #0
   139cc:	f280 8126 	bge.w	13c1c <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   139d0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   139d4:	f36f 0341 	bfc	r3, #1, #1
   139d8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   139dc:	f04f 3aff 	mov.w	sl, #4294967295
   139e0:	e11c      	b.n	13c1c <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   139e2:	2a2d      	cmp	r2, #45	; 0x2d
   139e4:	d00d      	beq.n	13a02 <z_cbvprintf_impl+0x1aa>
   139e6:	2a30      	cmp	r2, #48	; 0x30
   139e8:	f47f af69 	bne.w	138be <z_cbvprintf_impl+0x66>
   139ec:	2301      	movs	r3, #1
	} while (loop);
   139ee:	e758      	b.n	138a2 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   139f0:	f04f 0c01 	mov.w	ip, #1
   139f4:	e755      	b.n	138a2 <z_cbvprintf_impl+0x4a>
   139f6:	f04f 0e01 	mov.w	lr, #1
   139fa:	e752      	b.n	138a2 <z_cbvprintf_impl+0x4a>
   139fc:	f04f 0801 	mov.w	r8, #1
   13a00:	e74f      	b.n	138a2 <z_cbvprintf_impl+0x4a>
   13a02:	2601      	movs	r6, #1
   13a04:	e74d      	b.n	138a2 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   13a06:	fb0e 6202 	mla	r2, lr, r2, r6
   13a0a:	3a30      	subs	r2, #48	; 0x30
   13a0c:	4603      	mov	r3, r0
   13a0e:	4618      	mov	r0, r3
   13a10:	f810 6b01 	ldrb.w	r6, [r0], #1
   13a14:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   13a18:	f1bc 0f09 	cmp.w	ip, #9
   13a1c:	d9f3      	bls.n	13a06 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   13a1e:	4299      	cmp	r1, r3
   13a20:	d08f      	beq.n	13942 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   13a22:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   13a26:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   13a28:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   13a2a:	f362 0141 	bfi	r1, r2, #1, #1
   13a2e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   13a32:	e786      	b.n	13942 <z_cbvprintf_impl+0xea>
   13a34:	460b      	mov	r3, r1
	size_t val = 0;
   13a36:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   13a38:	f04f 0e0a 	mov.w	lr, #10
   13a3c:	e7e7      	b.n	13a0e <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   13a3e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   13a42:	f042 0204 	orr.w	r2, r2, #4
   13a46:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   13a4a:	3302      	adds	r3, #2
	switch (*sp) {
   13a4c:	781a      	ldrb	r2, [r3, #0]
   13a4e:	2a6c      	cmp	r2, #108	; 0x6c
   13a50:	d047      	beq.n	13ae2 <z_cbvprintf_impl+0x28a>
   13a52:	d82b      	bhi.n	13aac <z_cbvprintf_impl+0x254>
   13a54:	2a68      	cmp	r2, #104	; 0x68
   13a56:	d031      	beq.n	13abc <z_cbvprintf_impl+0x264>
   13a58:	2a6a      	cmp	r2, #106	; 0x6a
   13a5a:	d04b      	beq.n	13af4 <z_cbvprintf_impl+0x29c>
   13a5c:	2a4c      	cmp	r2, #76	; 0x4c
   13a5e:	d051      	beq.n	13b04 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   13a60:	461a      	mov	r2, r3
   13a62:	f812 3b01 	ldrb.w	r3, [r2], #1
   13a66:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   13a68:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   13a6a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   13a6e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   13a72:	f200 80be 	bhi.w	13bf2 <z_cbvprintf_impl+0x39a>
   13a76:	2b6d      	cmp	r3, #109	; 0x6d
   13a78:	d851      	bhi.n	13b1e <z_cbvprintf_impl+0x2c6>
   13a7a:	2b69      	cmp	r3, #105	; 0x69
   13a7c:	f200 80b9 	bhi.w	13bf2 <z_cbvprintf_impl+0x39a>
   13a80:	2b57      	cmp	r3, #87	; 0x57
   13a82:	d867      	bhi.n	13b54 <z_cbvprintf_impl+0x2fc>
   13a84:	2b41      	cmp	r3, #65	; 0x41
   13a86:	d003      	beq.n	13a90 <z_cbvprintf_impl+0x238>
   13a88:	3b45      	subs	r3, #69	; 0x45
   13a8a:	2b02      	cmp	r3, #2
   13a8c:	f200 80b1 	bhi.w	13bf2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   13a90:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   13a94:	2204      	movs	r2, #4
   13a96:	f362 0302 	bfi	r3, r2, #0, #3
   13a9a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   13a9e:	2301      	movs	r3, #1
			break;
   13aa0:	e073      	b.n	13b8a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   13aa2:	fb0c 0202 	mla	r2, ip, r2, r0
   13aa6:	3a30      	subs	r2, #48	; 0x30
   13aa8:	460b      	mov	r3, r1
   13aaa:	e75d      	b.n	13968 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   13aac:	2a74      	cmp	r2, #116	; 0x74
   13aae:	d025      	beq.n	13afc <z_cbvprintf_impl+0x2a4>
   13ab0:	2a7a      	cmp	r2, #122	; 0x7a
   13ab2:	d1d5      	bne.n	13a60 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   13ab4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   13ab8:	2106      	movs	r1, #6
   13aba:	e00c      	b.n	13ad6 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   13abc:	785a      	ldrb	r2, [r3, #1]
   13abe:	2a68      	cmp	r2, #104	; 0x68
   13ac0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   13ac4:	d106      	bne.n	13ad4 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   13ac6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   13ac8:	f361 02c6 	bfi	r2, r1, #3, #4
   13acc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   13ad0:	3302      	adds	r3, #2
   13ad2:	e7c5      	b.n	13a60 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   13ad4:	2102      	movs	r1, #2
   13ad6:	f361 02c6 	bfi	r2, r1, #3, #4
   13ada:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   13ade:	3301      	adds	r3, #1
   13ae0:	e7be      	b.n	13a60 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   13ae2:	785a      	ldrb	r2, [r3, #1]
   13ae4:	2a6c      	cmp	r2, #108	; 0x6c
   13ae6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   13aea:	d101      	bne.n	13af0 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   13aec:	2104      	movs	r1, #4
   13aee:	e7eb      	b.n	13ac8 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   13af0:	2103      	movs	r1, #3
   13af2:	e7f0      	b.n	13ad6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   13af4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   13af8:	2105      	movs	r1, #5
   13afa:	e7ec      	b.n	13ad6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   13afc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   13b00:	2107      	movs	r1, #7
   13b02:	e7e8      	b.n	13ad6 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   13b04:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   13b08:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   13b0c:	f022 0202 	bic.w	r2, r2, #2
   13b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   13b14:	f042 0202 	orr.w	r2, r2, #2
   13b18:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   13b1c:	e7df      	b.n	13ade <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   13b1e:	3b6e      	subs	r3, #110	; 0x6e
   13b20:	b2d9      	uxtb	r1, r3
   13b22:	2301      	movs	r3, #1
   13b24:	408b      	lsls	r3, r1
   13b26:	f240 4182 	movw	r1, #1154	; 0x482
   13b2a:	420b      	tst	r3, r1
   13b2c:	d137      	bne.n	13b9e <z_cbvprintf_impl+0x346>
   13b2e:	f013 0f24 	tst.w	r3, #36	; 0x24
   13b32:	d151      	bne.n	13bd8 <z_cbvprintf_impl+0x380>
   13b34:	07d8      	lsls	r0, r3, #31
   13b36:	d55c      	bpl.n	13bf2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   13b38:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   13b3c:	2103      	movs	r1, #3
   13b3e:	f361 0302 	bfi	r3, r1, #0, #3
   13b42:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   13b46:	f002 0378 	and.w	r3, r2, #120	; 0x78
   13b4a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   13b4e:	424b      	negs	r3, r1
   13b50:	414b      	adcs	r3, r1
   13b52:	e01a      	b.n	13b8a <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   13b54:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   13b58:	b2c9      	uxtb	r1, r1
   13b5a:	2001      	movs	r0, #1
   13b5c:	fa00 f101 	lsl.w	r1, r0, r1
   13b60:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   13b64:	d194      	bne.n	13a90 <z_cbvprintf_impl+0x238>
   13b66:	f640 0601 	movw	r6, #2049	; 0x801
   13b6a:	4231      	tst	r1, r6
   13b6c:	d11d      	bne.n	13baa <z_cbvprintf_impl+0x352>
   13b6e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   13b72:	d03e      	beq.n	13bf2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   13b74:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   13b78:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   13b7c:	f002 0278 	and.w	r2, r2, #120	; 0x78
   13b80:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   13b82:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   13b86:	d034      	beq.n	13bf2 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   13b88:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   13b8a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   13b8e:	f3c2 0140 	ubfx	r1, r2, #1, #1
   13b92:	430b      	orrs	r3, r1
   13b94:	f363 0241 	bfi	r2, r3, #1, #1
   13b98:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   13b9c:	e6fd      	b.n	1399a <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   13b9e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   13ba2:	2102      	movs	r1, #2
   13ba4:	f361 0302 	bfi	r3, r1, #0, #3
   13ba8:	e7e8      	b.n	13b7c <z_cbvprintf_impl+0x324>
   13baa:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   13bae:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   13bb0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   13bb4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   13bb8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   13bba:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   13bbe:	bf02      	ittt	eq
   13bc0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   13bc4:	f041 0101 	orreq.w	r1, r1, #1
   13bc8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   13bcc:	2b63      	cmp	r3, #99	; 0x63
   13bce:	d1db      	bne.n	13b88 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   13bd0:	1e13      	subs	r3, r2, #0
   13bd2:	bf18      	it	ne
   13bd4:	2301      	movne	r3, #1
   13bd6:	e7d8      	b.n	13b8a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   13bd8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   13bdc:	2103      	movs	r1, #3
   13bde:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   13be2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   13be6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   13bea:	bf14      	ite	ne
   13bec:	2301      	movne	r3, #1
   13bee:	2300      	moveq	r3, #0
   13bf0:	e7cb      	b.n	13b8a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   13bf2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   13bf6:	f043 0301 	orr.w	r3, r3, #1
   13bfa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   13bfe:	e7c3      	b.n	13b88 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   13c00:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   13c04:	2a00      	cmp	r2, #0
			width = conv->width_value;
   13c06:	bfb4      	ite	lt
   13c08:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   13c0c:	f04f 38ff 	movge.w	r8, #4294967295
   13c10:	e6d5      	b.n	139be <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   13c12:	0798      	lsls	r0, r3, #30
   13c14:	f57f aee2 	bpl.w	139dc <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   13c18:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   13c1c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   13c20:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   13c22:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   13c26:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   13c2a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   13c2e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   13c30:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   13c34:	d133      	bne.n	13c9e <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   13c36:	1ecb      	subs	r3, r1, #3
   13c38:	2b04      	cmp	r3, #4
   13c3a:	d804      	bhi.n	13c46 <z_cbvprintf_impl+0x3ee>
   13c3c:	e8df f003 	tbb	[pc, r3]
   13c40:	21464621 	.word	0x21464621
   13c44:	21          	.byte	0x21
   13c45:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   13c46:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   13c48:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   13c4a:	ea4f 72e3 	mov.w	r2, r3, asr #31
   13c4e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   13c52:	d11c      	bne.n	13c8e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   13c54:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   13c58:	17da      	asrs	r2, r3, #31
   13c5a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   13c5e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   13c60:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   13c64:	f013 0603 	ands.w	r6, r3, #3
   13c68:	d050      	beq.n	13d0c <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   13c6a:	9b03      	ldr	r3, [sp, #12]
   13c6c:	463a      	mov	r2, r7
   13c6e:	4659      	mov	r1, fp
   13c70:	4648      	mov	r0, r9
   13c72:	f016 ffe1 	bl	2ac38 <outs>
   13c76:	2800      	cmp	r0, #0
   13c78:	f2c0 8153 	blt.w	13f22 <z_cbvprintf_impl+0x6ca>
   13c7c:	4405      	add	r5, r0
			continue;
   13c7e:	9f03      	ldr	r7, [sp, #12]
   13c80:	e5f2      	b.n	13868 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13c82:	f854 3b04 	ldr.w	r3, [r4], #4
   13c86:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   13c88:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   13c8c:	e7e8      	b.n	13c60 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   13c8e:	2902      	cmp	r1, #2
   13c90:	d1e5      	bne.n	13c5e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   13c92:	b21a      	sxth	r2, r3
   13c94:	f343 33c0 	sbfx	r3, r3, #15, #1
   13c98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   13c9c:	e7df      	b.n	13c5e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   13c9e:	2b02      	cmp	r3, #2
   13ca0:	d124      	bne.n	13cec <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   13ca2:	1ecb      	subs	r3, r1, #3
   13ca4:	2b04      	cmp	r3, #4
   13ca6:	d804      	bhi.n	13cb2 <z_cbvprintf_impl+0x45a>
   13ca8:	e8df f003 	tbb	[pc, r3]
   13cac:	18101018 	.word	0x18101018
   13cb0:	18          	.byte	0x18
   13cb1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   13cb2:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   13cb4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   13cb8:	f04f 0200 	mov.w	r2, #0
   13cbc:	d014      	beq.n	13ce8 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   13cbe:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   13cc0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   13cc4:	d1cc      	bne.n	13c60 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   13cc6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   13cc8:	930e      	str	r3, [sp, #56]	; 0x38
   13cca:	e7c9      	b.n	13c60 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   13ccc:	3407      	adds	r4, #7
   13cce:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   13cd2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   13cd6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   13cda:	e7c1      	b.n	13c60 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   13cdc:	f854 3b04 	ldr.w	r3, [r4], #4
   13ce0:	930e      	str	r3, [sp, #56]	; 0x38
   13ce2:	2300      	movs	r3, #0
   13ce4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   13ce6:	e7bb      	b.n	13c60 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   13ce8:	b2db      	uxtb	r3, r3
   13cea:	e7cd      	b.n	13c88 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   13cec:	2b04      	cmp	r3, #4
   13cee:	d108      	bne.n	13d02 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   13cf0:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   13cf2:	f024 0407 	bic.w	r4, r4, #7
   13cf6:	e9d4 2300 	ldrd	r2, r3, [r4]
   13cfa:	3408      	adds	r4, #8
   13cfc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   13d00:	e7ae      	b.n	13c60 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   13d02:	2b03      	cmp	r3, #3
   13d04:	d1ac      	bne.n	13c60 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   13d06:	f854 3b04 	ldr.w	r3, [r4], #4
   13d0a:	e7dd      	b.n	13cc8 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   13d0c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   13d10:	2878      	cmp	r0, #120	; 0x78
   13d12:	d8b4      	bhi.n	13c7e <z_cbvprintf_impl+0x426>
   13d14:	2862      	cmp	r0, #98	; 0x62
   13d16:	d81c      	bhi.n	13d52 <z_cbvprintf_impl+0x4fa>
   13d18:	2825      	cmp	r0, #37	; 0x25
   13d1a:	f43f adad 	beq.w	13878 <z_cbvprintf_impl+0x20>
   13d1e:	2858      	cmp	r0, #88	; 0x58
   13d20:	d1ad      	bne.n	13c7e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   13d22:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   13d26:	9300      	str	r3, [sp, #0]
   13d28:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   13d2c:	ab08      	add	r3, sp, #32
   13d2e:	aa10      	add	r2, sp, #64	; 0x40
   13d30:	f016 ff3c 	bl	2abac <encode_uint>
			if (precision >= 0) {
   13d34:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   13d38:	4607      	mov	r7, r0
			if (precision >= 0) {
   13d3a:	f280 809a 	bge.w	13e72 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   13d3e:	2f00      	cmp	r7, #0
   13d40:	d09d      	beq.n	13c7e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   13d42:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   13d46:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   13d48:	2e00      	cmp	r6, #0
   13d4a:	f000 80c1 	beq.w	13ed0 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   13d4e:	3001      	adds	r0, #1
   13d50:	e0be      	b.n	13ed0 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   13d52:	3863      	subs	r0, #99	; 0x63
   13d54:	2815      	cmp	r0, #21
   13d56:	d892      	bhi.n	13c7e <z_cbvprintf_impl+0x426>
   13d58:	a201      	add	r2, pc, #4	; (adr r2, 13d60 <z_cbvprintf_impl+0x508>)
   13d5a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   13d5e:	bf00      	nop
   13d60:	00013e35 	.word	0x00013e35
   13d64:	00013e47 	.word	0x00013e47
   13d68:	00013c7f 	.word	0x00013c7f
   13d6c:	00013c7f 	.word	0x00013c7f
   13d70:	00013c7f 	.word	0x00013c7f
   13d74:	00013c7f 	.word	0x00013c7f
   13d78:	00013e47 	.word	0x00013e47
   13d7c:	00013c7f 	.word	0x00013c7f
   13d80:	00013c7f 	.word	0x00013c7f
   13d84:	00013c7f 	.word	0x00013c7f
   13d88:	00013c7f 	.word	0x00013c7f
   13d8c:	00013ed5 	.word	0x00013ed5
   13d90:	00013e6d 	.word	0x00013e6d
   13d94:	00013e93 	.word	0x00013e93
   13d98:	00013c7f 	.word	0x00013c7f
   13d9c:	00013c7f 	.word	0x00013c7f
   13da0:	00013db9 	.word	0x00013db9
   13da4:	00013c7f 	.word	0x00013c7f
   13da8:	00013e6d 	.word	0x00013e6d
   13dac:	00013c7f 	.word	0x00013c7f
   13db0:	00013c7f 	.word	0x00013c7f
   13db4:	00013e6d 	.word	0x00013e6d
			if (precision >= 0) {
   13db8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   13dbc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   13dbe:	db35      	blt.n	13e2c <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   13dc0:	4651      	mov	r1, sl
   13dc2:	4638      	mov	r0, r7
   13dc4:	f018 fa3b 	bl	2c23e <strnlen>
			bpe = bps + len;
   13dc8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   13dcc:	2f00      	cmp	r7, #0
   13dce:	f43f af56 	beq.w	13c7e <z_cbvprintf_impl+0x426>
		char sign = 0;
   13dd2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   13dd4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   13dd8:	f013 0210 	ands.w	r2, r3, #16
   13ddc:	9205      	str	r2, [sp, #20]
   13dde:	f000 8093 	beq.w	13f08 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   13de2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   13de4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   13de6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   13de8:	bf48      	it	mi
   13dea:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   13dec:	9204      	str	r2, [sp, #16]
   13dee:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   13df0:	bf48      	it	mi
   13df2:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   13df4:	f1b8 0f00 	cmp.w	r8, #0
   13df8:	f340 80a0 	ble.w	13f3c <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   13dfc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   13e00:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   13e04:	f3c2 0380 	ubfx	r3, r2, #2, #1
   13e08:	0750      	lsls	r0, r2, #29
   13e0a:	9306      	str	r3, [sp, #24]
   13e0c:	f100 8096 	bmi.w	13f3c <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   13e10:	0651      	lsls	r1, r2, #25
   13e12:	f140 8089 	bpl.w	13f28 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   13e16:	b13e      	cbz	r6, 13e28 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   13e18:	4659      	mov	r1, fp
   13e1a:	4630      	mov	r0, r6
   13e1c:	47c8      	blx	r9
   13e1e:	2800      	cmp	r0, #0
   13e20:	db7f      	blt.n	13f22 <z_cbvprintf_impl+0x6ca>
   13e22:	9b06      	ldr	r3, [sp, #24]
   13e24:	3501      	adds	r5, #1
   13e26:	461e      	mov	r6, r3
					pad = '0';
   13e28:	2230      	movs	r2, #48	; 0x30
   13e2a:	e07e      	b.n	13f2a <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   13e2c:	4638      	mov	r0, r7
   13e2e:	f018 f9ff 	bl	2c230 <strlen>
   13e32:	e7c9      	b.n	13dc8 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   13e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13e36:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   13e3a:	2600      	movs	r6, #0
			bps = buf;
   13e3c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   13e3e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   13e42:	2001      	movs	r0, #1
   13e44:	e7c6      	b.n	13dd4 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   13e46:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   13e48:	bf5c      	itt	pl
   13e4a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   13e4e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   13e50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   13e54:	bf48      	it	mi
   13e56:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   13e58:	2b00      	cmp	r3, #0
   13e5a:	f6bf af62 	bge.w	13d22 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   13e5e:	4252      	negs	r2, r2
   13e60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13e64:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   13e68:	262d      	movs	r6, #45	; 0x2d
   13e6a:	e75a      	b.n	13d22 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   13e6c:	2600      	movs	r6, #0
   13e6e:	e758      	b.n	13d22 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   13e70:	2600      	movs	r6, #0
				conv->flag_zero = false;
   13e72:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   13e76:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   13e7a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   13e7c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   13e80:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   13e82:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   13e86:	f67f af5a 	bls.w	13d3e <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   13e8a:	ebaa 0303 	sub.w	r3, sl, r3
   13e8e:	9311      	str	r3, [sp, #68]	; 0x44
   13e90:	e755      	b.n	13d3e <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   13e92:	980e      	ldr	r0, [sp, #56]	; 0x38
   13e94:	b390      	cbz	r0, 13efc <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   13e96:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   13e9a:	9300      	str	r3, [sp, #0]
   13e9c:	aa10      	add	r2, sp, #64	; 0x40
   13e9e:	ab08      	add	r3, sp, #32
   13ea0:	2100      	movs	r1, #0
   13ea2:	f016 fe83 	bl	2abac <encode_uint>
				conv->altform_0c = true;
   13ea6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   13eaa:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   13eae:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   13eb2:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   13eb6:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   13eba:	4607      	mov	r7, r0
				conv->altform_0c = true;
   13ebc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   13ec0:	dad6      	bge.n	13e70 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   13ec2:	2800      	cmp	r0, #0
   13ec4:	f43f aedb 	beq.w	13c7e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   13ec8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   13ecc:	1a18      	subs	r0, r3, r0
		char sign = 0;
   13ece:	2600      	movs	r6, #0
   13ed0:	469a      	mov	sl, r3
   13ed2:	e77f      	b.n	13dd4 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   13ed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   13ed6:	2907      	cmp	r1, #7
   13ed8:	f63f aed1 	bhi.w	13c7e <z_cbvprintf_impl+0x426>
   13edc:	e8df f001 	tbb	[pc, r1]
   13ee0:	0c06040c 	.word	0x0c06040c
   13ee4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   13ee8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   13eea:	e6c8      	b.n	13c7e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   13eec:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   13eee:	e6c6      	b.n	13c7e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   13ef0:	17ea      	asrs	r2, r5, #31
   13ef2:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   13ef6:	e6c2      	b.n	13c7e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   13ef8:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   13efa:	e6c0      	b.n	13c7e <z_cbvprintf_impl+0x426>
   13efc:	4f2e      	ldr	r7, [pc, #184]	; (13fb8 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   13efe:	4606      	mov	r6, r0
			bpe = bps + 5;
   13f00:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   13f04:	2005      	movs	r0, #5
   13f06:	e765      	b.n	13dd4 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   13f08:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   13f0a:	bf48      	it	mi
   13f0c:	3001      	addmi	r0, #1
   13f0e:	e769      	b.n	13de4 <z_cbvprintf_impl+0x58c>
   13f10:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   13f12:	4610      	mov	r0, r2
   13f14:	9206      	str	r2, [sp, #24]
   13f16:	4659      	mov	r1, fp
   13f18:	47c8      	blx	r9
   13f1a:	2800      	cmp	r0, #0
   13f1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   13f20:	da04      	bge.n	13f2c <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   13f22:	b015      	add	sp, #84	; 0x54
   13f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   13f28:	2220      	movs	r2, #32
					pad = '0';
   13f2a:	4643      	mov	r3, r8
				while (width-- > 0) {
   13f2c:	4619      	mov	r1, r3
   13f2e:	2900      	cmp	r1, #0
   13f30:	f103 33ff 	add.w	r3, r3, #4294967295
   13f34:	dcec      	bgt.n	13f10 <z_cbvprintf_impl+0x6b8>
   13f36:	4445      	add	r5, r8
   13f38:	1a6d      	subs	r5, r5, r1
   13f3a:	4698      	mov	r8, r3
		if (sign != 0) {
   13f3c:	b12e      	cbz	r6, 13f4a <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   13f3e:	4659      	mov	r1, fp
   13f40:	4630      	mov	r0, r6
   13f42:	47c8      	blx	r9
   13f44:	2800      	cmp	r0, #0
   13f46:	dbec      	blt.n	13f22 <z_cbvprintf_impl+0x6ca>
   13f48:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   13f4a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   13f4e:	06da      	lsls	r2, r3, #27
   13f50:	d401      	bmi.n	13f56 <z_cbvprintf_impl+0x6fe>
   13f52:	071b      	lsls	r3, r3, #28
   13f54:	d505      	bpl.n	13f62 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   13f56:	4659      	mov	r1, fp
   13f58:	2030      	movs	r0, #48	; 0x30
   13f5a:	47c8      	blx	r9
   13f5c:	2800      	cmp	r0, #0
   13f5e:	dbe0      	blt.n	13f22 <z_cbvprintf_impl+0x6ca>
   13f60:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   13f62:	9b05      	ldr	r3, [sp, #20]
   13f64:	b133      	cbz	r3, 13f74 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   13f66:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   13f6a:	4659      	mov	r1, fp
   13f6c:	47c8      	blx	r9
   13f6e:	2800      	cmp	r0, #0
   13f70:	dbd7      	blt.n	13f22 <z_cbvprintf_impl+0x6ca>
   13f72:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   13f74:	9e04      	ldr	r6, [sp, #16]
   13f76:	442e      	add	r6, r5
   13f78:	e005      	b.n	13f86 <z_cbvprintf_impl+0x72e>
				OUTC('0');
   13f7a:	4659      	mov	r1, fp
   13f7c:	2030      	movs	r0, #48	; 0x30
   13f7e:	47c8      	blx	r9
   13f80:	2800      	cmp	r0, #0
   13f82:	dbce      	blt.n	13f22 <z_cbvprintf_impl+0x6ca>
   13f84:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   13f86:	1b73      	subs	r3, r6, r5
   13f88:	2b00      	cmp	r3, #0
   13f8a:	dcf6      	bgt.n	13f7a <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   13f8c:	4653      	mov	r3, sl
   13f8e:	463a      	mov	r2, r7
   13f90:	4659      	mov	r1, fp
   13f92:	4648      	mov	r0, r9
   13f94:	f016 fe50 	bl	2ac38 <outs>
   13f98:	2800      	cmp	r0, #0
   13f9a:	dbc2      	blt.n	13f22 <z_cbvprintf_impl+0x6ca>
   13f9c:	4405      	add	r5, r0
		while (width > 0) {
   13f9e:	44a8      	add	r8, r5
   13fa0:	eba8 0305 	sub.w	r3, r8, r5
   13fa4:	2b00      	cmp	r3, #0
   13fa6:	f77f ae6a 	ble.w	13c7e <z_cbvprintf_impl+0x426>
			OUTC(' ');
   13faa:	4659      	mov	r1, fp
   13fac:	2020      	movs	r0, #32
   13fae:	47c8      	blx	r9
   13fb0:	2800      	cmp	r0, #0
   13fb2:	dbb6      	blt.n	13f22 <z_cbvprintf_impl+0x6ca>
   13fb4:	3501      	adds	r5, #1
			--width;
   13fb6:	e7f3      	b.n	13fa0 <z_cbvprintf_impl+0x748>
   13fb8:	00031375 	.word	0x00031375

00013fbc <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   13fbc:	b508      	push	{r3, lr}
   13fbe:	4604      	mov	r4, r0
	__asm__ volatile(
   13fc0:	f04f 0240 	mov.w	r2, #64	; 0x40
   13fc4:	f3ef 8311 	mrs	r3, BASEPRI
   13fc8:	f382 8812 	msr	BASEPRI_MAX, r2
   13fcc:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
   13fd0:	f00e ff42 	bl	22e58 <sys_clock_disable>
	}

	sys_arch_reboot(type);
   13fd4:	4620      	mov	r0, r4
   13fd6:	f003 fcf3 	bl	179c0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   13fda:	4803      	ldr	r0, [pc, #12]	; (13fe8 <sys_reboot+0x2c>)
   13fdc:	f016 fab9 	bl	2a552 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   13fe0:	f002 fe76 	bl	16cd0 <arch_cpu_idle>
   13fe4:	e7fc      	b.n	13fe0 <sys_reboot+0x24>
   13fe6:	bf00      	nop
   13fe8:	0003137b 	.word	0x0003137b

00013fec <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   13fec:	f010 b8fa 	b.w	241e4 <SystemInit>

00013ff0 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   13ff0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13ff4:	460f      	mov	r7, r1
   13ff6:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13ff8:	2108      	movs	r1, #8
   13ffa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   13ffc:	f8df 9050 	ldr.w	r9, [pc, #80]	; 14050 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   14000:	f017 f9cb 	bl	2b39a <nvs_al_size.isra.0>
	*addr -= ate_size;
   14004:	683c      	ldr	r4, [r7, #0]
   14006:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   14008:	4680      	mov	r8, r0
	*addr -= ate_size;
   1400a:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   1400c:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   14010:	42ac      	cmp	r4, r5
   14012:	d803      	bhi.n	1401c <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   14014:	2000      	movs	r0, #0
}
   14016:	b003      	add	sp, #12
   14018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1401c:	2308      	movs	r3, #8
   1401e:	466a      	mov	r2, sp
   14020:	4621      	mov	r1, r4
   14022:	4630      	mov	r0, r6
   14024:	f017 f929 	bl	2b27a <nvs_flash_rd>
		if (rc) {
   14028:	2800      	cmp	r0, #0
   1402a:	d1f4      	bne.n	14016 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   1402c:	4669      	mov	r1, sp
   1402e:	4630      	mov	r0, r6
   14030:	f017 f9bd 	bl	2b3ae <nvs_ate_valid>
   14034:	b140      	cbz	r0, 14048 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   14036:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1403a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   1403e:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   14040:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   14044:	4413      	add	r3, r2
   14046:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   14048:	eba4 0408 	sub.w	r4, r4, r8
   1404c:	e7e0      	b.n	14010 <nvs_recover_last_ate+0x20>
   1404e:	bf00      	nop
   14050:	ffff0000 	.word	0xffff0000

00014054 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   14054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14058:	b08f      	sub	sp, #60	; 0x3c
   1405a:	4604      	mov	r4, r0
   1405c:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   1405e:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
   14062:	4640      	mov	r0, r8
   14064:	f01b fa37 	bl	2f4d6 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   14068:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   1406a:	6883      	ldr	r3, [r0, #8]
   1406c:	68db      	ldr	r3, [r3, #12]
   1406e:	4798      	blx	r3
   14070:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   14072:	b988      	cbnz	r0, 14098 <nvs_mount+0x44>
		LOG_ERR("Could not obtain flash parameters");
   14074:	4b8d      	ldr	r3, [pc, #564]	; (142ac <nvs_mount+0x258>)

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
   14076:	637b      	str	r3, [r7, #52]	; 0x34
   14078:	2302      	movs	r3, #2
   1407a:	488d      	ldr	r0, [pc, #564]	; (142b0 <nvs_mount+0x25c>)
   1407c:	633b      	str	r3, [r7, #48]	; 0x30
   1407e:	f107 0230 	add.w	r2, r7, #48	; 0x30
   14082:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   14086:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Unsupported write block size");
   1408a:	f017 f983 	bl	2b394 <z_log_msg_static_create.constprop.0>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   1408e:	4628      	mov	r0, r5
   14090:	373c      	adds	r7, #60	; 0x3c
   14092:	46bd      	mov	sp, r7
   14094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   14098:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   1409a:	6883      	ldr	r3, [r0, #8]
   1409c:	68db      	ldr	r3, [r3, #12]
   1409e:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   140a0:	6803      	ldr	r3, [r0, #0]
   140a2:	3b01      	subs	r3, #1
   140a4:	2b1f      	cmp	r3, #31
   140a6:	d901      	bls.n	140ac <nvs_mount+0x58>
		LOG_ERR("Unsupported write block size");
   140a8:	4b82      	ldr	r3, [pc, #520]	; (142b4 <nvs_mount+0x260>)
   140aa:	e7e4      	b.n	14076 <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   140ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   140ae:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   140b0:	f107 0214 	add.w	r2, r7, #20
   140b4:	f01a fcd0 	bl	2ea58 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   140b8:	b108      	cbz	r0, 140be <nvs_mount+0x6a>
		LOG_ERR("Unable to get page info");
   140ba:	4b7f      	ldr	r3, [pc, #508]	; (142b8 <nvs_mount+0x264>)
   140bc:	e7db      	b.n	14076 <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
   140be:	89a5      	ldrh	r5, [r4, #12]
   140c0:	b12d      	cbz	r5, 140ce <nvs_mount+0x7a>
   140c2:	69bb      	ldr	r3, [r7, #24]
   140c4:	fbb5 f2f3 	udiv	r2, r5, r3
   140c8:	fb03 5512 	mls	r5, r3, r2, r5
   140cc:	b10d      	cbz	r5, 140d2 <nvs_mount+0x7e>
		LOG_ERR("Invalid sector size");
   140ce:	4b7b      	ldr	r3, [pc, #492]	; (142bc <nvs_mount+0x268>)
   140d0:	e7d1      	b.n	14076 <nvs_mount+0x22>
	if (fs->sector_count < 2) {
   140d2:	89e3      	ldrh	r3, [r4, #14]
   140d4:	2b01      	cmp	r3, #1
   140d6:	d801      	bhi.n	140dc <nvs_mount+0x88>
		LOG_ERR("Configuration error - sector count");
   140d8:	4b79      	ldr	r3, [pc, #484]	; (142c0 <nvs_mount+0x26c>)
   140da:	e7cc      	b.n	14076 <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   140dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   140de:	603d      	str	r5, [r7, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   140e0:	f893 a004 	ldrb.w	sl, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   140e4:	f04f 33ff 	mov.w	r3, #4294967295
   140e8:	f04f 32ff 	mov.w	r2, #4294967295
   140ec:	4640      	mov	r0, r8
   140ee:	f011 ffe9 	bl	260c4 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   140f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   140f4:	2108      	movs	r1, #8
   140f6:	f017 f950 	bl	2b39a <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   140fa:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   140fc:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   140fe:	89e3      	ldrh	r3, [r4, #14]
   14100:	fa1f fb85 	uxth.w	fp, r5
   14104:	455b      	cmp	r3, fp
   14106:	d808      	bhi.n	1411a <nvs_mount+0xc6>
	if (closed_sectors == fs->sector_count) {
   14108:	89e3      	ldrh	r3, [r4, #14]
   1410a:	454b      	cmp	r3, r9
   1410c:	d123      	bne.n	14156 <nvs_mount+0x102>
	return z_impl_k_mutex_unlock(mutex);
   1410e:	4640      	mov	r0, r8
   14110:	f012 f852 	bl	261b8 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
   14114:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   14118:	e7b9      	b.n	1408e <nvs_mount+0x3a>
		       (uint16_t)(fs->sector_size - ate_size);
   1411a:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   1411c:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   1411e:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   14120:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   14124:	4652      	mov	r2, sl
   14126:	2308      	movs	r3, #8
   14128:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   1412a:	6039      	str	r1, [r7, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1412c:	f017 f8ea 	bl	2b304 <nvs_flash_cmp_const>
		if (rc) {
   14130:	b178      	cbz	r0, 14152 <nvs_mount+0xfe>
			nvs_sector_advance(fs, &addr);
   14132:	4639      	mov	r1, r7
   14134:	4620      	mov	r0, r4
   14136:	f017 f8ae 	bl	2b296 <nvs_sector_advance>
			closed_sectors++;
   1413a:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1413e:	6839      	ldr	r1, [r7, #0]
   14140:	2308      	movs	r3, #8
   14142:	4652      	mov	r2, sl
   14144:	4620      	mov	r0, r4
			closed_sectors++;
   14146:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1414a:	f017 f8db 	bl	2b304 <nvs_flash_cmp_const>
			if (!rc) {
   1414e:	2800      	cmp	r0, #0
   14150:	d0da      	beq.n	14108 <nvs_mount+0xb4>
	for (i = 0; i < fs->sector_count; i++) {
   14152:	3501      	adds	r5, #1
   14154:	e7d3      	b.n	140fe <nvs_mount+0xaa>
	if (i == fs->sector_count) {
   14156:	455b      	cmp	r3, fp
   14158:	d10b      	bne.n	14172 <nvs_mount+0x11e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   1415a:	6839      	ldr	r1, [r7, #0]
   1415c:	2308      	movs	r3, #8
   1415e:	4652      	mov	r2, sl
   14160:	1b89      	subs	r1, r1, r6
   14162:	4620      	mov	r0, r4
   14164:	f017 f8ce 	bl	2b304 <nvs_flash_cmp_const>
		if (!rc) {
   14168:	b918      	cbnz	r0, 14172 <nvs_mount+0x11e>
			nvs_sector_advance(fs, &addr);
   1416a:	4639      	mov	r1, r7
   1416c:	4620      	mov	r0, r4
   1416e:	f017 f892 	bl	2b296 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
   14172:	4639      	mov	r1, r7
   14174:	4620      	mov	r0, r4
   14176:	f7ff ff3b 	bl	13ff0 <nvs_recover_last_ate>
	if (rc) {
   1417a:	4605      	mov	r5, r0
   1417c:	b118      	cbz	r0, 14186 <nvs_mount+0x132>
   1417e:	4640      	mov	r0, r8
   14180:	f012 f81a 	bl	261b8 <z_impl_k_mutex_unlock>
	if (rc) {
   14184:	e783      	b.n	1408e <nvs_mount+0x3a>
	fs->ate_wra = addr;
   14186:	683b      	ldr	r3, [r7, #0]
   14188:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   1418a:	ea4f 4913 	mov.w	r9, r3, lsr #16
   1418e:	ea4f 4909 	mov.w	r9, r9, lsl #16
   14192:	f8c4 9008 	str.w	r9, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   14196:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   1419a:	4299      	cmp	r1, r3
   1419c:	d30f      	bcc.n	141be <nvs_mount+0x16a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1419e:	2308      	movs	r3, #8
   141a0:	1d3a      	adds	r2, r7, #4
   141a2:	4620      	mov	r0, r4
   141a4:	f017 f869 	bl	2b27a <nvs_flash_rd>
		if (rc) {
   141a8:	4605      	mov	r5, r0
   141aa:	2800      	cmp	r0, #0
   141ac:	d1e7      	bne.n	1417e <nvs_mount+0x12a>
   141ae:	1d3b      	adds	r3, r7, #4
		if (data8[i] != value) {
   141b0:	f813 2b01 	ldrb.w	r2, [r3], #1
   141b4:	4592      	cmp	sl, r2
   141b6:	d144      	bne.n	14242 <nvs_mount+0x1ee>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   141b8:	3501      	adds	r5, #1
   141ba:	2d08      	cmp	r5, #8
   141bc:	d1f8      	bne.n	141b0 <nvs_mount+0x15c>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   141be:	6863      	ldr	r3, [r4, #4]
   141c0:	0c1b      	lsrs	r3, r3, #16
   141c2:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   141c4:	4639      	mov	r1, r7
   141c6:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
   141c8:	603b      	str	r3, [r7, #0]
	nvs_sector_advance(fs, &addr);
   141ca:	f017 f864 	bl	2b296 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   141ce:	89a3      	ldrh	r3, [r4, #12]
   141d0:	6839      	ldr	r1, [r7, #0]
   141d2:	4652      	mov	r2, sl
   141d4:	4620      	mov	r0, r4
   141d6:	f017 f895 	bl	2b304 <nvs_flash_cmp_const>
	if (rc < 0) {
   141da:	1e05      	subs	r5, r0, #0
   141dc:	dbcf      	blt.n	1417e <nvs_mount+0x12a>
		addr = fs->ate_wra + ate_size;
   141de:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   141e0:	f000 8082 	beq.w	142e8 <nvs_mount+0x294>
		addr = fs->ate_wra + ate_size;
   141e4:	eb06 0903 	add.w	r9, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   141e8:	f64f 7aff 	movw	sl, #65535	; 0xffff
   141ec:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   141ee:	f8c7 9000 	str.w	r9, [r7]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   141f2:	fa1f f289 	uxth.w	r2, r9
   141f6:	1b9b      	subs	r3, r3, r6
   141f8:	429a      	cmp	r2, r3
   141fa:	d33c      	bcc.n	14276 <nvs_mount+0x222>
		LOG_INF("No GC Done marker found: restarting gc");
   141fc:	4b31      	ldr	r3, [pc, #196]	; (142c4 <nvs_mount+0x270>)
   141fe:	637b      	str	r3, [r7, #52]	; 0x34
   14200:	2302      	movs	r3, #2
   14202:	482b      	ldr	r0, [pc, #172]	; (142b0 <nvs_mount+0x25c>)
   14204:	633b      	str	r3, [r7, #48]	; 0x30
   14206:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1420a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1420e:	f017 f8c1 	bl	2b394 <z_log_msg_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   14212:	4620      	mov	r0, r4
   14214:	6861      	ldr	r1, [r4, #4]
   14216:	f017 f89a 	bl	2b34e <nvs_flash_erase_sector>
		if (rc) {
   1421a:	4605      	mov	r5, r0
   1421c:	2800      	cmp	r0, #0
   1421e:	d1ae      	bne.n	1417e <nvs_mount+0x12a>
		fs->ate_wra &= ADDR_SECT_MASK;
   14220:	6863      	ldr	r3, [r4, #4]
   14222:	4a29      	ldr	r2, [pc, #164]	; (142c8 <nvs_mount+0x274>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   14224:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   14226:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   14228:	440b      	add	r3, r1
   1422a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   1422e:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   14230:	4013      	ands	r3, r2
   14232:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   14234:	4620      	mov	r0, r4
   14236:	f017 f99c 	bl	2b572 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
   1423a:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1423c:	2d00      	cmp	r5, #0
   1423e:	d06f      	beq.n	14320 <nvs_mount+0x2cc>
   14240:	e79d      	b.n	1417e <nvs_mount+0x12a>
		if (nvs_ate_valid(fs, &last_ate)) {
   14242:	1d39      	adds	r1, r7, #4
   14244:	4620      	mov	r0, r4
   14246:	f017 f8b2 	bl	2b3ae <nvs_ate_valid>
   1424a:	6862      	ldr	r2, [r4, #4]
   1424c:	b910      	cbnz	r0, 14254 <nvs_mount+0x200>
		fs->ate_wra -= ate_size;
   1424e:	1b92      	subs	r2, r2, r6
   14250:	6062      	str	r2, [r4, #4]
   14252:	e7a0      	b.n	14196 <nvs_mount+0x142>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   14254:	893d      	ldrh	r5, [r7, #8]
   14256:	88f9      	ldrh	r1, [r7, #6]
   14258:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   1425a:	f8c4 9008 	str.w	r9, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1425e:	4429      	add	r1, r5
   14260:	f017 f89b 	bl	2b39a <nvs_al_size.isra.0>
   14264:	4448      	add	r0, r9
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   14266:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   14268:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1426a:	d1f0      	bne.n	1424e <nvs_mount+0x1fa>
   1426c:	2d00      	cmp	r5, #0
   1426e:	d0ee      	beq.n	1424e <nvs_mount+0x1fa>
				rc = -ESPIPE;
   14270:	f06f 051c 	mvn.w	r5, #28
   14274:	e09c      	b.n	143b0 <nvs_mount+0x35c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   14276:	2308      	movs	r3, #8
   14278:	f107 020c 	add.w	r2, r7, #12
   1427c:	4649      	mov	r1, r9
   1427e:	4620      	mov	r0, r4
   14280:	f016 fffb 	bl	2b27a <nvs_flash_rd>
			if (rc) {
   14284:	4605      	mov	r5, r0
   14286:	2800      	cmp	r0, #0
   14288:	f47f af79 	bne.w	1417e <nvs_mount+0x12a>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   1428c:	f107 010c 	add.w	r1, r7, #12
   14290:	4620      	mov	r0, r4
   14292:	f017 f88c 	bl	2b3ae <nvs_ate_valid>
   14296:	b130      	cbz	r0, 142a6 <nvs_mount+0x252>
   14298:	89bb      	ldrh	r3, [r7, #12]
   1429a:	4553      	cmp	r3, sl
   1429c:	d103      	bne.n	142a6 <nvs_mount+0x252>
			    (gc_done_ate.id == 0xffff) &&
   1429e:	8a3b      	ldrh	r3, [r7, #16]
   142a0:	2b00      	cmp	r3, #0
   142a2:	f000 808b 	beq.w	143bc <nvs_mount+0x368>
			addr += ate_size;
   142a6:	44b1      	add	r9, r6
   142a8:	e7a0      	b.n	141ec <nvs_mount+0x198>
   142aa:	bf00      	nop
   142ac:	000313b8 	.word	0x000313b8
   142b0:	00030334 	.word	0x00030334
   142b4:	000313da 	.word	0x000313da
   142b8:	000313f7 	.word	0x000313f7
   142bc:	0003140f 	.word	0x0003140f
   142c0:	00031423 	.word	0x00031423
   142c4:	00031480 	.word	0x00031480
   142c8:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   142cc:	1a5b      	subs	r3, r3, r1
   142ce:	4652      	mov	r2, sl
   142d0:	4620      	mov	r0, r4
   142d2:	f017 f817 	bl	2b304 <nvs_flash_cmp_const>
		if (rc < 0) {
   142d6:	1e05      	subs	r5, r0, #0
   142d8:	f6ff af51 	blt.w	1417e <nvs_mount+0x12a>
		if (!rc) {
   142dc:	d008      	beq.n	142f0 <nvs_mount+0x29c>
		fs->data_wra += fs->flash_parameters->write_block_size;
   142de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   142e0:	68a3      	ldr	r3, [r4, #8]
   142e2:	6812      	ldr	r2, [r2, #0]
   142e4:	4413      	add	r3, r2
   142e6:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   142e8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   142ec:	428b      	cmp	r3, r1
   142ee:	d8ed      	bhi.n	142cc <nvs_mount+0x278>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   142f0:	6861      	ldr	r1, [r4, #4]
   142f2:	89a3      	ldrh	r3, [r4, #12]
   142f4:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   142f8:	429a      	cmp	r2, r3
   142fa:	d19f      	bne.n	1423c <nvs_mount+0x1e8>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   142fc:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 143ec <nvs_mount+0x398>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   14300:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   14302:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   14306:	4293      	cmp	r3, r2
   14308:	d098      	beq.n	1423c <nvs_mount+0x1e8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1430a:	4620      	mov	r0, r4
   1430c:	f017 f81f 	bl	2b34e <nvs_flash_erase_sector>
		if (rc) {
   14310:	4605      	mov	r5, r0
   14312:	2800      	cmp	r0, #0
   14314:	f47f af33 	bne.w	1417e <nvs_mount+0x12a>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   14318:	6863      	ldr	r3, [r4, #4]
   1431a:	ea03 0309 	and.w	r3, r3, r9
   1431e:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   14320:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   14322:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   14324:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   14328:	429a      	cmp	r2, r3
   1432a:	d03d      	beq.n	143a8 <nvs_mount+0x354>
   1432c:	4640      	mov	r0, r8
   1432e:	f011 ff43 	bl	261b8 <z_impl_k_mutex_unlock>
	fs->ready = true;
   14332:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   14334:	46e8      	mov	r8, sp
   14336:	b088      	sub	sp, #32
	fs->ready = true;
   14338:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   1433a:	89e2      	ldrh	r2, [r4, #14]
   1433c:	89a3      	ldrh	r3, [r4, #12]
   1433e:	466d      	mov	r5, sp
   14340:	492b      	ldr	r1, [pc, #172]	; (143f0 <nvs_mount+0x39c>)
   14342:	61eb      	str	r3, [r5, #28]
   14344:	462e      	mov	r6, r5
   14346:	f04f 0904 	mov.w	r9, #4
   1434a:	e9c5 1205 	strd	r1, r2, [r5, #20]
   1434e:	f846 9f10 	str.w	r9, [r6, #16]!
   14352:	4828      	ldr	r0, [pc, #160]	; (143f4 <nvs_mount+0x3a0>)
   14354:	4632      	mov	r2, r6
   14356:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
   1435a:	f017 f81b 	bl	2b394 <z_log_msg_static_create.constprop.0>
   1435e:	46c5      	mov	sp, r8
	LOG_INF("alloc wra: %d, %x",
   14360:	6863      	ldr	r3, [r4, #4]
   14362:	46ad      	mov	sp, r5
   14364:	4a24      	ldr	r2, [pc, #144]	; (143f8 <nvs_mount+0x3a4>)
   14366:	616a      	str	r2, [r5, #20]
   14368:	0c1a      	lsrs	r2, r3, #16
   1436a:	b29b      	uxth	r3, r3
   1436c:	61aa      	str	r2, [r5, #24]
   1436e:	61eb      	str	r3, [r5, #28]
   14370:	4820      	ldr	r0, [pc, #128]	; (143f4 <nvs_mount+0x3a0>)
   14372:	f8c5 9010 	str.w	r9, [r5, #16]
   14376:	4632      	mov	r2, r6
   14378:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
   1437c:	f017 f80a 	bl	2b394 <z_log_msg_static_create.constprop.0>
   14380:	46c5      	mov	sp, r8
	LOG_INF("data wra: %d, %x",
   14382:	68a3      	ldr	r3, [r4, #8]
   14384:	46ad      	mov	sp, r5
   14386:	4a1d      	ldr	r2, [pc, #116]	; (143fc <nvs_mount+0x3a8>)
   14388:	616a      	str	r2, [r5, #20]
   1438a:	0c1a      	lsrs	r2, r3, #16
   1438c:	b29b      	uxth	r3, r3
   1438e:	61aa      	str	r2, [r5, #24]
   14390:	61eb      	str	r3, [r5, #28]
   14392:	f8c5 9010 	str.w	r9, [r5, #16]
   14396:	4817      	ldr	r0, [pc, #92]	; (143f4 <nvs_mount+0x3a0>)
   14398:	4632      	mov	r2, r6
   1439a:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
   1439e:	f016 fff9 	bl	2b394 <z_log_msg_static_create.constprop.0>
	return 0;
   143a2:	2500      	movs	r5, #0
   143a4:	46c5      	mov	sp, r8
   143a6:	e672      	b.n	1408e <nvs_mount+0x3a>
		rc = nvs_add_gc_done_ate(fs);
   143a8:	4620      	mov	r0, r4
   143aa:	f017 f8cd 	bl	2b548 <nvs_add_gc_done_ate>
   143ae:	4605      	mov	r5, r0
   143b0:	4640      	mov	r0, r8
   143b2:	f011 ff01 	bl	261b8 <z_impl_k_mutex_unlock>
	if (rc) {
   143b6:	2d00      	cmp	r5, #0
   143b8:	d0bb      	beq.n	14332 <nvs_mount+0x2de>
   143ba:	e668      	b.n	1408e <nvs_mount+0x3a>
			LOG_INF("GC Done marker found");
   143bc:	4b10      	ldr	r3, [pc, #64]	; (14400 <nvs_mount+0x3ac>)
   143be:	637b      	str	r3, [r7, #52]	; 0x34
   143c0:	2302      	movs	r3, #2
   143c2:	633b      	str	r3, [r7, #48]	; 0x30
   143c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
   143c8:	480a      	ldr	r0, [pc, #40]	; (143f4 <nvs_mount+0x3a0>)
   143ca:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   143ce:	f016 ffe1 	bl	2b394 <z_log_msg_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   143d2:	6863      	ldr	r3, [r4, #4]
   143d4:	0c1b      	lsrs	r3, r3, #16
   143d6:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   143d8:	4639      	mov	r1, r7
   143da:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
   143dc:	603b      	str	r3, [r7, #0]
			nvs_sector_advance(fs, &addr);
   143de:	f016 ff5a 	bl	2b296 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   143e2:	6839      	ldr	r1, [r7, #0]
   143e4:	4620      	mov	r0, r4
   143e6:	f016 ffb2 	bl	2b34e <nvs_flash_erase_sector>
   143ea:	e726      	b.n	1423a <nvs_mount+0x1e6>
   143ec:	ffff0000 	.word	0xffff0000
   143f0:	00031446 	.word	0x00031446
   143f4:	00030334 	.word	0x00030334
   143f8:	0003145d 	.word	0x0003145d
   143fc:	0003146f 	.word	0x0003146f
   14400:	000314a7 	.word	0x000314a7

00014404 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   14404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14408:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   1440a:	7c03      	ldrb	r3, [r0, #16]
{
   1440c:	b08d      	sub	sp, #52	; 0x34
   1440e:	4604      	mov	r4, r0
   14410:	4689      	mov	r9, r1
   14412:	4690      	mov	r8, r2
	if (!fs->ready) {
   14414:	b97b      	cbnz	r3, 14436 <nvs_write+0x32>
		LOG_ERR("NVS not initialized");
   14416:	4b66      	ldr	r3, [pc, #408]	; (145b0 <nvs_write+0x1ac>)
   14418:	930b      	str	r3, [sp, #44]	; 0x2c
   1441a:	4866      	ldr	r0, [pc, #408]	; (145b4 <nvs_write+0x1b0>)
   1441c:	2302      	movs	r3, #2
   1441e:	aa0a      	add	r2, sp, #40	; 0x28
   14420:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EACCES;
   14424:	f06f 060c 	mvn.w	r6, #12
		LOG_ERR("NVS not initialized");
   14428:	930a      	str	r3, [sp, #40]	; 0x28
   1442a:	f016 ffb3 	bl	2b394 <z_log_msg_static_create.constprop.0>
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   1442e:	4630      	mov	r0, r6
   14430:	b00d      	add	sp, #52	; 0x34
   14432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   14436:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   14438:	2108      	movs	r1, #8
   1443a:	4610      	mov	r0, r2
   1443c:	f016 ffad 	bl	2b39a <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   14440:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   14442:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   14444:	4610      	mov	r0, r2
   14446:	f016 ffa8 	bl	2b39a <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   1444a:	89a3      	ldrh	r3, [r4, #12]
   1444c:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   14450:	42ab      	cmp	r3, r5
	data_size = nvs_al_size(fs, len);
   14452:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   14454:	f0c0 80a9 	bcc.w	145aa <nvs_write+0x1a6>
   14458:	b11d      	cbz	r5, 14462 <nvs_write+0x5e>
	    ((len > 0) && (data == NULL))) {
   1445a:	f1b8 0f00 	cmp.w	r8, #0
   1445e:	f000 80a4 	beq.w	145aa <nvs_write+0x1a6>
	wlk_addr = fs->ate_wra;
   14462:	6863      	ldr	r3, [r4, #4]
   14464:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   14466:	aa04      	add	r2, sp, #16
   14468:	a903      	add	r1, sp, #12
   1446a:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   1446c:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   14470:	f016 ffd5 	bl	2b41e <nvs_prev_ate>
		if (rc) {
   14474:	4606      	mov	r6, r0
   14476:	2800      	cmp	r0, #0
   14478:	d1d9      	bne.n	1442e <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   1447a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1447e:	454b      	cmp	r3, r9
   14480:	d005      	beq.n	1448e <nvs_write+0x8a>
		if (wlk_addr == fs->ate_wra) {
   14482:	6862      	ldr	r2, [r4, #4]
   14484:	9b03      	ldr	r3, [sp, #12]
   14486:	429a      	cmp	r2, r3
   14488:	d1ed      	bne.n	14466 <nvs_write+0x62>
		if (len == 0) {
   1448a:	b9e5      	cbnz	r5, 144c6 <nvs_write+0xc2>
   1448c:	e7cf      	b.n	1442e <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   1448e:	a904      	add	r1, sp, #16
   14490:	4620      	mov	r0, r4
   14492:	f016 ff8c 	bl	2b3ae <nvs_ate_valid>
   14496:	2800      	cmp	r0, #0
   14498:	d0f3      	beq.n	14482 <nvs_write+0x7e>
		rd_addr += wlk_ate.offset;
   1449a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
   1449e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   144a2:	b175      	cbz	r5, 144c2 <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
   144a4:	42ab      	cmp	r3, r5
   144a6:	d10e      	bne.n	144c6 <nvs_write+0xc2>
		rd_addr &= ADDR_SECT_MASK;
   144a8:	ea4f 411b 	mov.w	r1, fp, lsr #16
   144ac:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   144ae:	4401      	add	r1, r0
   144b0:	462b      	mov	r3, r5
   144b2:	4642      	mov	r2, r8
   144b4:	4620      	mov	r0, r4
   144b6:	f016 fefb 	bl	2b2b0 <nvs_flash_block_cmp>
			if (rc <= 0) {
   144ba:	2800      	cmp	r0, #0
   144bc:	dc03      	bgt.n	144c6 <nvs_write+0xc2>
   144be:	4606      	mov	r6, r0
   144c0:	e7b5      	b.n	1442e <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
   144c2:	2b00      	cmp	r3, #0
   144c4:	d0b3      	beq.n	1442e <nvs_write+0x2a>
	if (data_size) {
   144c6:	2f00      	cmp	r7, #0
   144c8:	d13e      	bne.n	14548 <nvs_write+0x144>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   144ca:	f104 0314 	add.w	r3, r4, #20
   144ce:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   144d0:	f04f 32ff 	mov.w	r2, #4294967295
   144d4:	f04f 33ff 	mov.w	r3, #4294967295
   144d8:	f104 0014 	add.w	r0, r4, #20
   144dc:	f011 fdf2 	bl	260c4 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   144e0:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 145b8 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
   144e4:	89e3      	ldrh	r3, [r4, #14]
   144e6:	429e      	cmp	r6, r3
   144e8:	d05c      	beq.n	145a4 <nvs_write+0x1a0>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   144ea:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   144ee:	18f9      	adds	r1, r7, r3
   144f0:	428a      	cmp	r2, r1
   144f2:	d32c      	bcc.n	1454e <nvs_write+0x14a>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   144f4:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   144f8:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   144fa:	23ff      	movs	r3, #255	; 0xff
   144fc:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   14500:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   14504:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
   14508:	f016 ff3b 	bl	2b382 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   1450c:	68a1      	ldr	r1, [r4, #8]
   1450e:	462b      	mov	r3, r5
   14510:	4642      	mov	r2, r8
   14512:	4620      	mov	r0, r4
   14514:	f016 ffcd 	bl	2b4b2 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   14518:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   1451a:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   1451c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1451e:	f016 ff3c 	bl	2b39a <nvs_al_size.isra.0>
   14522:	68a2      	ldr	r2, [r4, #8]
   14524:	4402      	add	r2, r0
   14526:	60a2      	str	r2, [r4, #8]
	if (rc) {
   14528:	f1ba 0f00 	cmp.w	sl, #0
   1452c:	d107      	bne.n	1453e <nvs_write+0x13a>
	rc = nvs_flash_ate_wrt(fs, &entry);
   1452e:	a906      	add	r1, sp, #24
   14530:	4620      	mov	r0, r4
   14532:	f016 fff8 	bl	2b526 <nvs_flash_ate_wrt>
	rc = len;
   14536:	2800      	cmp	r0, #0
   14538:	bf14      	ite	ne
   1453a:	4682      	movne	sl, r0
   1453c:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   1453e:	9801      	ldr	r0, [sp, #4]
   14540:	f011 fe3a 	bl	261b8 <z_impl_k_mutex_unlock>
	return rc;
   14544:	4656      	mov	r6, sl
   14546:	e772      	b.n	1442e <nvs_write+0x2a>
		required_space = data_size + ate_size;
   14548:	4457      	add	r7, sl
   1454a:	b2bf      	uxth	r7, r7
   1454c:	e7bd      	b.n	144ca <nvs_write+0xc6>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1454e:	2108      	movs	r1, #8
   14550:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   14552:	f016 ff22 	bl	2b39a <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   14556:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1455a:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   1455e:	2300      	movs	r3, #0
   14560:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   14564:	1813      	adds	r3, r2, r0
   14566:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   1456a:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   1456c:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   14570:	441a      	add	r2, r3
   14572:	1a10      	subs	r0, r2, r0
   14574:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   14576:	a806      	add	r0, sp, #24
   14578:	f016 ff03 	bl	2b382 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   1457c:	a906      	add	r1, sp, #24
   1457e:	4620      	mov	r0, r4
   14580:	f016 ffd1 	bl	2b526 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   14584:	1d21      	adds	r1, r4, #4
   14586:	4620      	mov	r0, r4
   14588:	f016 fe85 	bl	2b296 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1458c:	6863      	ldr	r3, [r4, #4]
   1458e:	ea03 030b 	and.w	r3, r3, fp
   14592:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   14594:	4620      	mov	r0, r4
   14596:	f016 ffec 	bl	2b572 <nvs_gc>
		if (rc) {
   1459a:	4682      	mov	sl, r0
   1459c:	2800      	cmp	r0, #0
   1459e:	d1ce      	bne.n	1453e <nvs_write+0x13a>
		gc_count++;
   145a0:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   145a2:	e79f      	b.n	144e4 <nvs_write+0xe0>
			rc = -ENOSPC;
   145a4:	f06f 0a1b 	mvn.w	sl, #27
   145a8:	e7c9      	b.n	1453e <nvs_write+0x13a>
		return -EINVAL;
   145aa:	f06f 0615 	mvn.w	r6, #21
   145ae:	e73e      	b.n	1442e <nvs_write+0x2a>
   145b0:	000313a4 	.word	0x000313a4
   145b4:	00030334 	.word	0x00030334
   145b8:	ffff0000 	.word	0xffff0000

000145bc <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   145bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   145c0:	461e      	mov	r6, r3
   145c2:	b088      	sub	sp, #32
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   145c4:	7c03      	ldrb	r3, [r0, #16]
{
   145c6:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
   145ca:	4604      	mov	r4, r0
   145cc:	460f      	mov	r7, r1
   145ce:	4690      	mov	r8, r2
	if (!fs->ready) {
   145d0:	b973      	cbnz	r3, 145f0 <nvs_read_hist+0x34>
		LOG_ERR("NVS not initialized");
   145d2:	4b2f      	ldr	r3, [pc, #188]	; (14690 <nvs_read_hist+0xd4>)
   145d4:	482f      	ldr	r0, [pc, #188]	; (14694 <nvs_read_hist+0xd8>)
   145d6:	9307      	str	r3, [sp, #28]
   145d8:	aa06      	add	r2, sp, #24
   145da:	2302      	movs	r3, #2
   145dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   145e0:	9306      	str	r3, [sp, #24]
   145e2:	f016 fed7 	bl	2b394 <z_log_msg_static_create.constprop.0>
		return -EACCES;
   145e6:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   145ea:	b008      	add	sp, #32
   145ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   145f0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   145f2:	2108      	movs	r1, #8
   145f4:	f016 fed1 	bl	2b39a <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   145f8:	89a3      	ldrh	r3, [r4, #12]
   145fa:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   145fe:	42b3      	cmp	r3, r6
   14600:	d343      	bcc.n	1468a <nvs_read_hist+0xce>
	wlk_addr = fs->ate_wra;
   14602:	f8d4 a004 	ldr.w	sl, [r4, #4]
   14606:	f8cd a004 	str.w	sl, [sp, #4]
	cnt_his = 0U;
   1460a:	2500      	movs	r5, #0
	while (cnt_his <= cnt) {
   1460c:	454d      	cmp	r5, r9
   1460e:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   14610:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
   14614:	d909      	bls.n	1462a <nvs_read_hist+0x6e>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   14616:	6863      	ldr	r3, [r4, #4]
   14618:	4553      	cmp	r3, sl
   1461a:	d11e      	bne.n	1465a <nvs_read_hist+0x9e>
   1461c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   14620:	42bb      	cmp	r3, r7
   14622:	d01a      	beq.n	1465a <nvs_read_hist+0x9e>
		return -ENOENT;
   14624:	f06f 0001 	mvn.w	r0, #1
   14628:	e7df      	b.n	145ea <nvs_read_hist+0x2e>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1462a:	aa02      	add	r2, sp, #8
   1462c:	a901      	add	r1, sp, #4
   1462e:	4620      	mov	r0, r4
   14630:	f016 fef5 	bl	2b41e <nvs_prev_ate>
		if (rc) {
   14634:	2800      	cmp	r0, #0
   14636:	d1d8      	bne.n	145ea <nvs_read_hist+0x2e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   14638:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1463c:	42bb      	cmp	r3, r7
   1463e:	d106      	bne.n	1464e <nvs_read_hist+0x92>
   14640:	a902      	add	r1, sp, #8
   14642:	4620      	mov	r0, r4
   14644:	f016 feb3 	bl	2b3ae <nvs_ate_valid>
   14648:	b108      	cbz	r0, 1464e <nvs_read_hist+0x92>
			cnt_his++;
   1464a:	3501      	adds	r5, #1
   1464c:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   1464e:	6862      	ldr	r2, [r4, #4]
   14650:	9b01      	ldr	r3, [sp, #4]
   14652:	429a      	cmp	r2, r3
   14654:	d1da      	bne.n	1460c <nvs_read_hist+0x50>
		rd_addr = wlk_addr;
   14656:	4651      	mov	r1, sl
   14658:	e7e0      	b.n	1461c <nvs_read_hist+0x60>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1465a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1465e:	2b00      	cmp	r3, #0
   14660:	d0e0      	beq.n	14624 <nvs_read_hist+0x68>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   14662:	45a9      	cmp	r9, r5
   14664:	d8de      	bhi.n	14624 <nvs_read_hist+0x68>
	rd_addr += wlk_ate.offset;
   14666:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   1466a:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1466c:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   1466e:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   14672:	bf28      	it	cs
   14674:	4633      	movcs	r3, r6
   14676:	4401      	add	r1, r0
   14678:	4642      	mov	r2, r8
   1467a:	4620      	mov	r0, r4
   1467c:	f016 fdfd 	bl	2b27a <nvs_flash_rd>
	if (rc) {
   14680:	2800      	cmp	r0, #0
   14682:	d1b2      	bne.n	145ea <nvs_read_hist+0x2e>
	return wlk_ate.len;
   14684:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   14688:	e7af      	b.n	145ea <nvs_read_hist+0x2e>
		return -EINVAL;
   1468a:	f06f 0015 	mvn.w	r0, #21
   1468e:	e7ac      	b.n	145ea <nvs_read_hist+0x2e>
   14690:	000313a4 	.word	0x000313a4
   14694:	00030334 	.word	0x00030334

00014698 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   14698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1469c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 146f8 <activate_foreach_backend+0x60>
{
   146a0:	4604      	mov	r4, r0
	while (mask_cpy) {
   146a2:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   146a4:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   146a8:	b914      	cbnz	r4, 146b0 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   146aa:	4638      	mov	r0, r7
   146ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   146b0:	fa94 f5a4 	rbit	r5, r4
   146b4:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   146b8:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   146bc:	012e      	lsls	r6, r5, #4
   146be:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   146c2:	ea6f 0a03 	mvn.w	sl, r3
   146c6:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   146ca:	7b2b      	ldrb	r3, [r5, #12]
   146cc:	2b00      	cmp	r3, #0
   146ce:	d0eb      	beq.n	146a8 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   146d0:	f858 3006 	ldr.w	r3, [r8, r6]
   146d4:	691b      	ldr	r3, [r3, #16]
   146d6:	b94b      	cbnz	r3, 146ec <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   146d8:	4446      	add	r6, r8
			log_backend_enable(backend,
   146da:	2204      	movs	r2, #4
   146dc:	6873      	ldr	r3, [r6, #4]
   146de:	4628      	mov	r0, r5
   146e0:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   146e2:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   146e6:	f000 fa59 	bl	14b9c <log_backend_enable>
   146ea:	e7dd      	b.n	146a8 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   146ec:	4628      	mov	r0, r5
   146ee:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   146f0:	2800      	cmp	r0, #0
   146f2:	d1d9      	bne.n	146a8 <activate_foreach_backend+0x10>
   146f4:	e7f0      	b.n	146d8 <activate_foreach_backend+0x40>
   146f6:	bf00      	nop
   146f8:	000303c4 	.word	0x000303c4

000146fc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
   146fc:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   146fe:	4910      	ldr	r1, [pc, #64]	; (14740 <enable_logger+0x44>)
   14700:	4810      	ldr	r0, [pc, #64]	; (14744 <enable_logger+0x48>)
{
   14702:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   14704:	2200      	movs	r2, #0
   14706:	f01b fa1f 	bl	2fb48 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1470a:	4d0f      	ldr	r5, [pc, #60]	; (14748 <enable_logger+0x4c>)
   1470c:	490f      	ldr	r1, [pc, #60]	; (1474c <enable_logger+0x50>)
   1470e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   14712:	2300      	movs	r3, #0
   14714:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14718:	2400      	movs	r4, #0
   1471a:	230e      	movs	r3, #14
   1471c:	e9cd 3403 	strd	r3, r4, [sp, #12]
   14720:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14724:	4b0a      	ldr	r3, [pc, #40]	; (14750 <enable_logger+0x54>)
   14726:	9400      	str	r4, [sp, #0]
   14728:	f44f 7240 	mov.w	r2, #768	; 0x300
   1472c:	4628      	mov	r0, r5
   1472e:	f011 fc25 	bl	25f7c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14732:	4908      	ldr	r1, [pc, #32]	; (14754 <enable_logger+0x58>)
   14734:	4628      	mov	r0, r5
   14736:	f01a feb8 	bl	2f4aa <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   1473a:	4620      	mov	r0, r4
   1473c:	b009      	add	sp, #36	; 0x24
   1473e:	bd30      	pop	{r4, r5, pc}
   14740:	00014759 	.word	0x00014759
   14744:	20002118 	.word	0x20002118
   14748:	20001c90 	.word	0x20001c90
   1474c:	20005c40 	.word	0x20005c40
   14750:	00014a49 	.word	0x00014a49
   14754:	000314c3 	.word	0x000314c3

00014758 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   14758:	4801      	ldr	r0, [pc, #4]	; (14760 <log_process_thread_timer_expiry_fn+0x8>)
   1475a:	f011 bd9d 	b.w	26298 <z_impl_k_sem_give>
   1475e:	bf00      	nop
   14760:	20000cd4 	.word	0x20000cd4

00014764 <z_log_init>:
{
   14764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14768:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   1476a:	481f      	ldr	r0, [pc, #124]	; (147e8 <z_log_init+0x84>)
{
   1476c:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   1476e:	f016 ffec 	bl	2b74a <atomic_inc>
   14772:	4606      	mov	r6, r0
   14774:	2800      	cmp	r0, #0
   14776:	d030      	beq.n	147da <z_log_init+0x76>
	uint32_t mask = 0;
   14778:	2500      	movs	r5, #0
}
   1477a:	4628      	mov	r0, r5
   1477c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   14780:	7b23      	ldrb	r3, [r4, #12]
   14782:	b173      	cbz	r3, 147a2 <z_log_init+0x3e>
	if (backend->api->init) {
   14784:	6823      	ldr	r3, [r4, #0]
   14786:	68db      	ldr	r3, [r3, #12]
   14788:	b10b      	cbz	r3, 1478e <z_log_init+0x2a>
		backend->api->init(backend);
   1478a:	4620      	mov	r0, r4
   1478c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   1478e:	6823      	ldr	r3, [r4, #0]
   14790:	691b      	ldr	r3, [r3, #16]
   14792:	b9d3      	cbnz	r3, 147ca <z_log_init+0x66>
				log_backend_enable(backend,
   14794:	6863      	ldr	r3, [r4, #4]
   14796:	2204      	movs	r2, #4
   14798:	6819      	ldr	r1, [r3, #0]
   1479a:	4620      	mov	r0, r4
   1479c:	f000 f9fe 	bl	14b9c <log_backend_enable>
			i++;
   147a0:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   147a2:	3410      	adds	r4, #16
   147a4:	454c      	cmp	r4, r9
   147a6:	d3eb      	bcc.n	14780 <z_log_init+0x1c>
	if (blocking) {
   147a8:	f1b8 0f00 	cmp.w	r8, #0
   147ac:	d0e5      	beq.n	1477a <z_log_init+0x16>
		while (mask) {
   147ae:	2d00      	cmp	r5, #0
   147b0:	d0e2      	beq.n	14778 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   147b2:	4628      	mov	r0, r5
   147b4:	f7ff ff70 	bl	14698 <activate_foreach_backend>
   147b8:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   147ba:	2f00      	cmp	r7, #0
   147bc:	d0f7      	beq.n	147ae <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   147be:	2100      	movs	r1, #0
   147c0:	f44f 70a4 	mov.w	r0, #328	; 0x148
   147c4:	f012 fa6a 	bl	26c9c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   147c8:	e7f1      	b.n	147ae <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   147ca:	4620      	mov	r0, r4
   147cc:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   147ce:	2800      	cmp	r0, #0
   147d0:	d0e0      	beq.n	14794 <z_log_init+0x30>
				mask |= BIT(i);
   147d2:	fa0a f306 	lsl.w	r3, sl, r6
   147d6:	431d      	orrs	r5, r3
   147d8:	e7e2      	b.n	147a0 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   147da:	4c04      	ldr	r4, [pc, #16]	; (147ec <z_log_init+0x88>)
   147dc:	f8df 9010 	ldr.w	r9, [pc, #16]	; 147f0 <z_log_init+0x8c>
	uint32_t mask = 0;
   147e0:	4605      	mov	r5, r0
				mask |= BIT(i);
   147e2:	f04f 0a01 	mov.w	sl, #1
   147e6:	e7dd      	b.n	147a4 <z_log_init+0x40>
   147e8:	20003304 	.word	0x20003304
   147ec:	000303c4 	.word	0x000303c4
   147f0:	000303d4 	.word	0x000303d4

000147f4 <log_format_func_t_get>:
}
   147f4:	4b01      	ldr	r3, [pc, #4]	; (147fc <log_format_func_t_get+0x8>)
   147f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   147fa:	4770      	bx	lr
   147fc:	00030610 	.word	0x00030610

00014800 <log_set_timestamp_func>:
{
   14800:	b508      	push	{r3, lr}
   14802:	4603      	mov	r3, r0
   14804:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   14806:	b12b      	cbz	r3, 14814 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   14808:	4a04      	ldr	r2, [pc, #16]	; (1481c <log_set_timestamp_func+0x1c>)
   1480a:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   1480c:	f000 fc78 	bl	15100 <log_output_timestamp_freq_set>
	return 0;
   14810:	2000      	movs	r0, #0
}
   14812:	bd08      	pop	{r3, pc}
		return -EINVAL;
   14814:	f06f 0015 	mvn.w	r0, #21
   14818:	e7fb      	b.n	14812 <log_set_timestamp_func+0x12>
   1481a:	bf00      	nop
   1481c:	20000734 	.word	0x20000734

00014820 <z_log_notify_backend_enabled>:
{
   14820:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   14822:	4c04      	ldr	r4, [pc, #16]	; (14834 <z_log_notify_backend_enabled+0x14>)
   14824:	7823      	ldrb	r3, [r4, #0]
   14826:	b913      	cbnz	r3, 1482e <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   14828:	4803      	ldr	r0, [pc, #12]	; (14838 <z_log_notify_backend_enabled+0x18>)
   1482a:	f011 fd35 	bl	26298 <z_impl_k_sem_give>
	backend_attached = true;
   1482e:	2301      	movs	r3, #1
   14830:	7023      	strb	r3, [r4, #0]
}
   14832:	bd10      	pop	{r4, pc}
   14834:	200055e4 	.word	0x200055e4
   14838:	20000cd4 	.word	0x20000cd4

0001483c <z_log_dropped>:
{
   1483c:	b510      	push	{r4, lr}
   1483e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   14840:	4808      	ldr	r0, [pc, #32]	; (14864 <z_log_dropped+0x28>)
   14842:	f016 ff82 	bl	2b74a <atomic_inc>
	if (buffered) {
   14846:	b15c      	cbz	r4, 14860 <z_log_dropped+0x24>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14848:	f3bf 8f5b 	dmb	ish
   1484c:	4b06      	ldr	r3, [pc, #24]	; (14868 <z_log_dropped+0x2c>)
   1484e:	e853 1f00 	ldrex	r1, [r3]
   14852:	3901      	subs	r1, #1
   14854:	e843 1200 	strex	r2, r1, [r3]
   14858:	2a00      	cmp	r2, #0
   1485a:	d1f8      	bne.n	1484e <z_log_dropped+0x12>
   1485c:	f3bf 8f5b 	dmb	ish
}
   14860:	bd10      	pop	{r4, pc}
   14862:	bf00      	nop
   14864:	200032fc 	.word	0x200032fc
   14868:	20003300 	.word	0x20003300

0001486c <z_log_dropped_read_and_clear>:
}
   1486c:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1486e:	4b06      	ldr	r3, [pc, #24]	; (14888 <z_log_dropped_read_and_clear+0x1c>)
   14870:	f3bf 8f5b 	dmb	ish
   14874:	4601      	mov	r1, r0
   14876:	e853 0f00 	ldrex	r0, [r3]
   1487a:	e843 1200 	strex	r2, r1, [r3]
   1487e:	2a00      	cmp	r2, #0
   14880:	d1f9      	bne.n	14876 <z_log_dropped_read_and_clear+0xa>
   14882:	f3bf 8f5b 	dmb	ish
   14886:	4770      	bx	lr
   14888:	200032fc 	.word	0x200032fc

0001488c <dropped_notify>:
{
   1488c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1488e:	f7ff ffed 	bl	1486c <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   14892:	4c08      	ldr	r4, [pc, #32]	; (148b4 <dropped_notify+0x28>)
   14894:	4e08      	ldr	r6, [pc, #32]	; (148b8 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   14896:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   14898:	42b4      	cmp	r4, r6
   1489a:	d300      	bcc.n	1489e <dropped_notify+0x12>
}
   1489c:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1489e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   148a0:	795b      	ldrb	r3, [r3, #5]
   148a2:	b12b      	cbz	r3, 148b0 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   148a4:	6823      	ldr	r3, [r4, #0]
   148a6:	685b      	ldr	r3, [r3, #4]
   148a8:	b113      	cbz	r3, 148b0 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   148aa:	4629      	mov	r1, r5
   148ac:	4620      	mov	r0, r4
   148ae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   148b0:	3410      	adds	r4, #16
   148b2:	e7f1      	b.n	14898 <dropped_notify+0xc>
   148b4:	000303c4 	.word	0x000303c4
   148b8:	000303d4 	.word	0x000303d4

000148bc <z_log_msg_init>:
{
   148bc:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   148be:	4c04      	ldr	r4, [pc, #16]	; (148d0 <z_log_msg_init+0x14>)
   148c0:	4904      	ldr	r1, [pc, #16]	; (148d4 <z_log_msg_init+0x18>)
   148c2:	4620      	mov	r0, r4
   148c4:	f016 fb7e 	bl	2afc4 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   148c8:	4b03      	ldr	r3, [pc, #12]	; (148d8 <z_log_msg_init+0x1c>)
   148ca:	601c      	str	r4, [r3, #0]
}
   148cc:	bd10      	pop	{r4, pc}
   148ce:	bf00      	nop
   148d0:	20000b58 	.word	0x20000b58
   148d4:	000305fc 	.word	0x000305fc
   148d8:	200032f4 	.word	0x200032f4

000148dc <log_core_init>:
	panic_mode = false;
   148dc:	4a08      	ldr	r2, [pc, #32]	; (14900 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   148de:	4809      	ldr	r0, [pc, #36]	; (14904 <log_core_init+0x28>)
{
   148e0:	b508      	push	{r3, lr}
	panic_mode = false;
   148e2:	2300      	movs	r3, #0
   148e4:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   148e6:	4a08      	ldr	r2, [pc, #32]	; (14908 <log_core_init+0x2c>)
   148e8:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
   148ea:	4a08      	ldr	r2, [pc, #32]	; (1490c <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
   148ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
   148f0:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   148f2:	f7ff ff85 	bl	14800 <log_set_timestamp_func>
}
   148f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   148fa:	f7ff bfdf 	b.w	148bc <z_log_msg_init>
   148fe:	bf00      	nop
   14900:	200055e5 	.word	0x200055e5
   14904:	0002b747 	.word	0x0002b747
   14908:	200032fc 	.word	0x200032fc
   1490c:	20003300 	.word	0x20003300

00014910 <z_log_msg_alloc>:
{
   14910:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   14912:	2200      	movs	r2, #0
   14914:	4801      	ldr	r0, [pc, #4]	; (1491c <z_log_msg_alloc+0xc>)
   14916:	2300      	movs	r3, #0
   14918:	f016 bb75 	b.w	2b006 <mpsc_pbuf_alloc>
   1491c:	20000b58 	.word	0x20000b58

00014920 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   14920:	4801      	ldr	r0, [pc, #4]	; (14928 <z_log_msg_local_claim+0x8>)
   14922:	f016 bc0e 	b.w	2b142 <mpsc_pbuf_claim>
   14926:	bf00      	nop
   14928:	20000b58 	.word	0x20000b58

0001492c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   1492c:	4b02      	ldr	r3, [pc, #8]	; (14938 <z_log_msg_free+0xc>)
{
   1492e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   14930:	6818      	ldr	r0, [r3, #0]
   14932:	f016 bc58 	b.w	2b1e6 <mpsc_pbuf_free>
   14936:	bf00      	nop
   14938:	200032f4 	.word	0x200032f4

0001493c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   1493c:	4801      	ldr	r0, [pc, #4]	; (14944 <z_log_msg_pending+0x8>)
   1493e:	f016 bc8e 	b.w	2b25e <mpsc_pbuf_is_pending>
   14942:	bf00      	nop
   14944:	20000b58 	.word	0x20000b58

00014948 <z_impl_log_process>:
{
   14948:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   1494a:	4b28      	ldr	r3, [pc, #160]	; (149ec <z_impl_log_process+0xa4>)
   1494c:	7818      	ldrb	r0, [r3, #0]
   1494e:	2800      	cmp	r0, #0
   14950:	d04b      	beq.n	149ea <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
   14952:	f7ff ffe5 	bl	14920 <z_log_msg_local_claim>
	if (msg) {
   14956:	4605      	mov	r5, r0
   14958:	b190      	cbz	r0, 14980 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1495a:	f3bf 8f5b 	dmb	ish
   1495e:	4b24      	ldr	r3, [pc, #144]	; (149f0 <z_impl_log_process+0xa8>)
   14960:	e853 1f00 	ldrex	r1, [r3]
   14964:	3901      	subs	r1, #1
   14966:	e843 1200 	strex	r2, r1, [r3]
   1496a:	2a00      	cmp	r2, #0
   1496c:	d1f8      	bne.n	14960 <z_impl_log_process+0x18>
   1496e:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   14972:	4c20      	ldr	r4, [pc, #128]	; (149f4 <z_impl_log_process+0xac>)
   14974:	4e20      	ldr	r6, [pc, #128]	; (149f8 <z_impl_log_process+0xb0>)
   14976:	42b4      	cmp	r4, r6
   14978:	d32d      	bcc.n	149d6 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
   1497a:	4628      	mov	r0, r5
   1497c:	f7ff ffd6 	bl	1492c <z_log_msg_free>
	return dropped_cnt > 0;
   14980:	4b1e      	ldr	r3, [pc, #120]	; (149fc <z_impl_log_process+0xb4>)
   14982:	4c1f      	ldr	r4, [pc, #124]	; (14a00 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
   14984:	681b      	ldr	r3, [r3, #0]
   14986:	2b00      	cmp	r3, #0
   14988:	dd19      	ble.n	149be <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
   1498a:	f01b f8b5 	bl	2faf8 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   1498e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14992:	fba0 0302 	umull	r0, r3, r0, r2
   14996:	fb02 3101 	mla	r1, r2, r1, r3
   1499a:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   1499c:	e9d4 2000 	ldrd	r2, r0, [r4]
   149a0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   149a4:	1a9b      	subs	r3, r3, r2
   149a6:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   149aa:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   149ae:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   149b2:	4293      	cmp	r3, r2
   149b4:	f171 0100 	sbcs.w	r1, r1, #0
   149b8:	d301      	bcc.n	149be <z_impl_log_process+0x76>
				dropped_notify();
   149ba:	f7ff ff67 	bl	1488c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   149be:	e9d4 3200 	ldrd	r3, r2, [r4]
   149c2:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   149c6:	f142 0200 	adc.w	r2, r2, #0
   149ca:	e9c4 3200 	strd	r3, r2, [r4]
}
   149ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   149d2:	f7ff bfb3 	b.w	1493c <z_log_msg_pending>
	return backend->cb->active;
   149d6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   149d8:	795b      	ldrb	r3, [r3, #5]
   149da:	b123      	cbz	r3, 149e6 <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
   149dc:	6823      	ldr	r3, [r4, #0]
   149de:	4629      	mov	r1, r5
   149e0:	681b      	ldr	r3, [r3, #0]
   149e2:	4620      	mov	r0, r4
   149e4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   149e6:	3410      	adds	r4, #16
   149e8:	e7c5      	b.n	14976 <z_impl_log_process+0x2e>
}
   149ea:	bd70      	pop	{r4, r5, r6, pc}
   149ec:	200055e4 	.word	0x200055e4
   149f0:	20003300 	.word	0x20003300
   149f4:	000303c4 	.word	0x000303c4
   149f8:	000303d4 	.word	0x000303d4
   149fc:	200032fc 	.word	0x200032fc
   14a00:	20002110 	.word	0x20002110

00014a04 <z_impl_log_panic>:
{
   14a04:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   14a06:	4d0d      	ldr	r5, [pc, #52]	; (14a3c <z_impl_log_panic+0x38>)
   14a08:	7829      	ldrb	r1, [r5, #0]
   14a0a:	b961      	cbnz	r1, 14a26 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   14a0c:	2001      	movs	r0, #1
   14a0e:	f7ff fea9 	bl	14764 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   14a12:	4c0b      	ldr	r4, [pc, #44]	; (14a40 <z_impl_log_panic+0x3c>)
   14a14:	4e0b      	ldr	r6, [pc, #44]	; (14a44 <z_impl_log_panic+0x40>)
   14a16:	42b4      	cmp	r4, r6
   14a18:	d306      	bcc.n	14a28 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   14a1a:	f7ff ff95 	bl	14948 <z_impl_log_process>
		while (log_process() == true) {
   14a1e:	2800      	cmp	r0, #0
   14a20:	d1fb      	bne.n	14a1a <z_impl_log_panic+0x16>
	panic_mode = true;
   14a22:	2301      	movs	r3, #1
   14a24:	702b      	strb	r3, [r5, #0]
}
   14a26:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   14a28:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   14a2a:	795b      	ldrb	r3, [r3, #5]
   14a2c:	b11b      	cbz	r3, 14a36 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   14a2e:	6823      	ldr	r3, [r4, #0]
   14a30:	4620      	mov	r0, r4
   14a32:	689b      	ldr	r3, [r3, #8]
   14a34:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   14a36:	3410      	adds	r4, #16
   14a38:	e7ed      	b.n	14a16 <z_impl_log_panic+0x12>
   14a3a:	bf00      	nop
   14a3c:	200055e5 	.word	0x200055e5
   14a40:	000303c4 	.word	0x000303c4
   14a44:	000303d4 	.word	0x000303d4

00014a48 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   14a48:	2100      	movs	r1, #0
{
   14a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   14a4e:	4608      	mov	r0, r1
   14a50:	f7ff fe88 	bl	14764 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   14a54:	4604      	mov	r4, r0
   14a56:	b348      	cbz	r0, 14aac <log_process_thread_func+0x64>
   14a58:	f240 6867 	movw	r8, #1639	; 0x667
   14a5c:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   14a60:	f012 f950 	bl	26d04 <z_impl_z_current_get>
	proc_tid = process_tid;
   14a64:	4b1a      	ldr	r3, [pc, #104]	; (14ad0 <log_process_thread_func+0x88>)
   14a66:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   14a68:	b130      	cbz	r0, 14a78 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   14a6a:	4b1a      	ldr	r3, [pc, #104]	; (14ad4 <log_process_thread_func+0x8c>)
	    process_tid &&
   14a6c:	681b      	ldr	r3, [r3, #0]
   14a6e:	2b09      	cmp	r3, #9
   14a70:	dd02      	ble.n	14a78 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   14a72:	4819      	ldr	r0, [pc, #100]	; (14ad8 <log_process_thread_func+0x90>)
   14a74:	f011 fc10 	bl	26298 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   14a78:	4f18      	ldr	r7, [pc, #96]	; (14adc <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   14a7a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 14ad8 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   14a7e:	2500      	movs	r5, #0
		if (activate_mask) {
   14a80:	b144      	cbz	r4, 14a94 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   14a82:	4620      	mov	r0, r4
   14a84:	f7ff fe08 	bl	14698 <activate_foreach_backend>
			if (!activate_mask) {
   14a88:	4604      	mov	r4, r0
   14a8a:	b918      	cbnz	r0, 14a94 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   14a8c:	f04f 38ff 	mov.w	r8, #4294967295
   14a90:	f04f 39ff 	mov.w	r9, #4294967295
   14a94:	f7ff ff58 	bl	14948 <z_impl_log_process>
		if (log_process() == false) {
   14a98:	4606      	mov	r6, r0
   14a9a:	b928      	cbnz	r0, 14aa8 <log_process_thread_func+0x60>
			if (processed_any) {
   14a9c:	b9b5      	cbnz	r5, 14acc <log_process_thread_func+0x84>
   14a9e:	4642      	mov	r2, r8
   14aa0:	464b      	mov	r3, r9
   14aa2:	4650      	mov	r0, sl
   14aa4:	f011 fc1e 	bl	262e4 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   14aa8:	4635      	mov	r5, r6
   14aaa:	e7e9      	b.n	14a80 <log_process_thread_func+0x38>
   14aac:	f04f 38ff 	mov.w	r8, #4294967295
   14ab0:	f04f 39ff 	mov.w	r9, #4294967295
   14ab4:	e7d4      	b.n	14a60 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   14ab6:	682b      	ldr	r3, [r5, #0]
   14ab8:	699b      	ldr	r3, [r3, #24]
   14aba:	b11b      	cbz	r3, 14ac4 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   14abc:	2200      	movs	r2, #0
   14abe:	4611      	mov	r1, r2
   14ac0:	4628      	mov	r0, r5
   14ac2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   14ac4:	3510      	adds	r5, #16
   14ac6:	42bd      	cmp	r5, r7
   14ac8:	d3f5      	bcc.n	14ab6 <log_process_thread_func+0x6e>
   14aca:	e7e8      	b.n	14a9e <log_process_thread_func+0x56>
   14acc:	4d04      	ldr	r5, [pc, #16]	; (14ae0 <log_process_thread_func+0x98>)
   14ace:	e7fa      	b.n	14ac6 <log_process_thread_func+0x7e>
   14ad0:	200032f8 	.word	0x200032f8
   14ad4:	20003300 	.word	0x20003300
   14ad8:	20000cd4 	.word	0x20000cd4
   14adc:	000303d4 	.word	0x000303d4
   14ae0:	000303c4 	.word	0x000303c4

00014ae4 <z_log_msg_post_finalize>:
{
   14ae4:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   14ae6:	4818      	ldr	r0, [pc, #96]	; (14b48 <z_log_msg_post_finalize+0x64>)
   14ae8:	f016 fe2f 	bl	2b74a <atomic_inc>
	if (panic_mode) {
   14aec:	4b17      	ldr	r3, [pc, #92]	; (14b4c <z_log_msg_post_finalize+0x68>)
   14aee:	781b      	ldrb	r3, [r3, #0]
   14af0:	b17b      	cbz	r3, 14b12 <z_log_msg_post_finalize+0x2e>
   14af2:	f04f 0340 	mov.w	r3, #64	; 0x40
   14af6:	f3ef 8411 	mrs	r4, BASEPRI
   14afa:	f383 8812 	msr	BASEPRI_MAX, r3
   14afe:	f3bf 8f6f 	isb	sy
   14b02:	f7ff ff21 	bl	14948 <z_impl_log_process>
	__asm__ volatile(
   14b06:	f384 8811 	msr	BASEPRI, r4
   14b0a:	f3bf 8f6f 	isb	sy
}
   14b0e:	b002      	add	sp, #8
   14b10:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   14b12:	4b0f      	ldr	r3, [pc, #60]	; (14b50 <z_log_msg_post_finalize+0x6c>)
   14b14:	681b      	ldr	r3, [r3, #0]
   14b16:	2b00      	cmp	r3, #0
   14b18:	d0f9      	beq.n	14b0e <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   14b1a:	b950      	cbnz	r0, 14b32 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   14b1c:	2200      	movs	r2, #0
   14b1e:	2300      	movs	r3, #0
   14b20:	e9cd 2300 	strd	r2, r3, [sp]
   14b24:	480b      	ldr	r0, [pc, #44]	; (14b54 <z_log_msg_post_finalize+0x70>)
   14b26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   14b2a:	2300      	movs	r3, #0
   14b2c:	f012 fb52 	bl	271d4 <z_impl_k_timer_start>
   14b30:	e7ed      	b.n	14b0e <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   14b32:	280a      	cmp	r0, #10
   14b34:	d1eb      	bne.n	14b0e <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   14b36:	4807      	ldr	r0, [pc, #28]	; (14b54 <z_log_msg_post_finalize+0x70>)
   14b38:	f01b f812 	bl	2fb60 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   14b3c:	4806      	ldr	r0, [pc, #24]	; (14b58 <z_log_msg_post_finalize+0x74>)
}
   14b3e:	b002      	add	sp, #8
   14b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14b44:	f011 bba8 	b.w	26298 <z_impl_k_sem_give>
   14b48:	20003300 	.word	0x20003300
   14b4c:	200055e5 	.word	0x200055e5
   14b50:	200032f8 	.word	0x200032f8
   14b54:	20002118 	.word	0x20002118
   14b58:	20000cd4 	.word	0x20000cd4

00014b5c <z_log_msg_commit>:
{
   14b5c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   14b5e:	4b06      	ldr	r3, [pc, #24]	; (14b78 <z_log_msg_commit+0x1c>)
   14b60:	681b      	ldr	r3, [r3, #0]
{
   14b62:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   14b64:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   14b66:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   14b68:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   14b6a:	4804      	ldr	r0, [pc, #16]	; (14b7c <z_log_msg_commit+0x20>)
   14b6c:	f016 fac9 	bl	2b102 <mpsc_pbuf_commit>
}
   14b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   14b74:	f7ff bfb6 	b.w	14ae4 <z_log_msg_post_finalize>
   14b78:	20000734 	.word	0x20000734
   14b7c:	20000b58 	.word	0x20000b58

00014b80 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   14b80:	4a04      	ldr	r2, [pc, #16]	; (14b94 <log_source_name_get+0x14>)
   14b82:	4b05      	ldr	r3, [pc, #20]	; (14b98 <log_source_name_get+0x18>)
   14b84:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   14b86:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   14b8a:	bf34      	ite	cc
   14b8c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   14b90:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   14b92:	4770      	bx	lr
   14b94:	0003025c 	.word	0x0003025c
   14b98:	000303c4 	.word	0x000303c4

00014b9c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   14b9c:	4b08      	ldr	r3, [pc, #32]	; (14bc0 <log_backend_enable+0x24>)
   14b9e:	1ac3      	subs	r3, r0, r3
{
   14ba0:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   14ba2:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
   14ba4:	6844      	ldr	r4, [r0, #4]
   14ba6:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   14ba8:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   14baa:	6843      	ldr	r3, [r0, #4]
   14bac:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   14bae:	6843      	ldr	r3, [r0, #4]
   14bb0:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   14bb2:	6843      	ldr	r3, [r0, #4]
   14bb4:	2201      	movs	r2, #1
   14bb6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   14bb8:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   14bba:	f7ff be31 	b.w	14820 <z_log_notify_backend_enabled>
   14bbe:	bf00      	nop
   14bc0:	000303c4 	.word	0x000303c4

00014bc4 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   14bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bc8:	b08f      	sub	sp, #60	; 0x3c
   14bca:	af04      	add	r7, sp, #16
   14bcc:	f3c1 284a 	ubfx	r8, r1, #9, #11
   14bd0:	60b8      	str	r0, [r7, #8]
   14bd2:	460d      	mov	r5, r1
   14bd4:	4691      	mov	r9, r2
   14bd6:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   14bd8:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   14bda:	f1b8 0f00 	cmp.w	r8, #0
   14bde:	d063      	beq.n	14ca8 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
   14be0:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
   14be2:	f107 0314 	add.w	r3, r7, #20
   14be6:	f04f 0b04 	mov.w	fp, #4
   14bea:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   14bee:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
   14bf2:	e9c7 6607 	strd	r6, r6, [r7, #28]
   14bf6:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   14bf8:	9301      	str	r3, [sp, #4]
   14bfa:	f8cd b008 	str.w	fp, [sp, #8]
   14bfe:	f8cd a000 	str.w	sl, [sp]
   14c02:	f107 031c 	add.w	r3, r7, #28
   14c06:	68f9      	ldr	r1, [r7, #12]
   14c08:	4632      	mov	r2, r6
   14c0a:	4648      	mov	r0, r9
   14c0c:	f7fe fb06 	bl	1321c <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
   14c10:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   14c14:	4603      	mov	r3, r0
   14c16:	d31c      	bcc.n	14c52 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
   14c18:	466c      	mov	r4, sp
   14c1a:	b08a      	sub	sp, #40	; 0x28
   14c1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   14c20:	ab04      	add	r3, sp, #16
   14c22:	4826      	ldr	r0, [pc, #152]	; (14cbc <z_impl_z_log_msg_static_create+0xf8>)
   14c24:	e9c3 0105 	strd	r0, r1, [r3, #20]
   14c28:	f240 71ff 	movw	r1, #2047	; 0x7ff
   14c2c:	61d9      	str	r1, [r3, #28]
   14c2e:	461a      	mov	r2, r3
   14c30:	f44f 7100 	mov.w	r1, #512	; 0x200
   14c34:	8419      	strh	r1, [r3, #32]
   14c36:	4b22      	ldr	r3, [pc, #136]	; (14cc0 <z_impl_z_log_msg_static_create+0xfc>)
   14c38:	f842 3f10 	str.w	r3, [r2, #16]!
   14c3c:	4821      	ldr	r0, [pc, #132]	; (14cc4 <z_impl_z_log_msg_static_create+0x100>)
   14c3e:	4633      	mov	r3, r6
   14c40:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   14c44:	f7ff ffbe 	bl	14bc4 <z_impl_z_log_msg_static_create>
   14c48:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
   14c4a:	372c      	adds	r7, #44	; 0x2c
   14c4c:	46bd      	mov	sp, r7
   14c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
   14c52:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   14c56:	f104 0017 	add.w	r0, r4, #23
   14c5a:	4418      	add	r0, r3
   14c5c:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   14c60:	0880      	lsrs	r0, r0, #2
   14c62:	603b      	str	r3, [r7, #0]
   14c64:	f7ff fe54 	bl	14910 <z_log_msg_alloc>
   14c68:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
   14c6c:	4604      	mov	r4, r0
   14c6e:	b190      	cbz	r0, 14c96 <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
   14c70:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
   14c72:	4a15      	ldr	r2, [pc, #84]	; (14cc8 <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
   14c74:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
   14c78:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
   14c7c:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
   14c80:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   14c82:	e9cd a300 	strd	sl, r3, [sp]
   14c86:	f8cd b008 	str.w	fp, [sp, #8]
   14c8a:	68f9      	ldr	r1, [r7, #12]
   14c8c:	f107 031c 	add.w	r3, r7, #28
   14c90:	4648      	mov	r0, r9
   14c92:	f7fe fac3 	bl	1321c <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
   14c96:	f368 2553 	bfi	r5, r8, #9, #11
   14c9a:	687b      	ldr	r3, [r7, #4]
   14c9c:	68b9      	ldr	r1, [r7, #8]
   14c9e:	462a      	mov	r2, r5
   14ca0:	4620      	mov	r0, r4
   14ca2:	f016 fd88 	bl	2b7b6 <z_log_msg_finalize>
   14ca6:	e7d0      	b.n	14c4a <z_impl_z_log_msg_static_create+0x86>
   14ca8:	f104 0017 	add.w	r0, r4, #23
   14cac:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   14cb0:	0880      	lsrs	r0, r0, #2
   14cb2:	f7ff fe2d 	bl	14910 <z_log_msg_alloc>
   14cb6:	4604      	mov	r4, r0
   14cb8:	e7ed      	b.n	14c96 <z_impl_z_log_msg_static_create+0xd2>
   14cba:	bf00      	nop
   14cbc:	000314d8 	.word	0x000314d8
   14cc0:	01000004 	.word	0x01000004
   14cc4:	0003033c 	.word	0x0003033c
   14cc8:	0002b78b 	.word	0x0002b78b

00014ccc <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   14ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cd0:	b087      	sub	sp, #28
   14cd2:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   14cd6:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   14cda:	4604      	mov	r4, r0
   14cdc:	460f      	mov	r7, r1
   14cde:	4693      	mov	fp, r2
   14ce0:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   14ce2:	b3a6      	cbz	r6, 14d4e <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   14ce4:	2110      	movs	r1, #16
   14ce6:	f8cd 9000 	str.w	r9, [sp]
   14cea:	4633      	mov	r3, r6
   14cec:	4652      	mov	r2, sl
   14cee:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   14cf0:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   14cf4:	f7fe f8bc 	bl	12e70 <cbvprintf_package>
   14cf8:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   14cfa:	f105 0017 	add.w	r0, r5, #23
   14cfe:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   14d00:	4b14      	ldr	r3, [pc, #80]	; (14d54 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   14d02:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   14d04:	f004 0407 	and.w	r4, r4, #7
   14d08:	f00b 0b07 	and.w	fp, fp, #7
   14d0c:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   14d0e:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   14d12:	ea03 2341 	and.w	r3, r3, r1, lsl #9
   14d16:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   14d1a:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   14d1c:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   14d1e:	f7ff fdf7 	bl	14910 <z_log_msg_alloc>
	struct log_msg_desc desc =
   14d22:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   14d26:	4605      	mov	r5, r0
   14d28:	b140      	cbz	r0, 14d3c <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   14d2a:	b13e      	cbz	r6, 14d3c <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   14d2c:	9903      	ldr	r1, [sp, #12]
   14d2e:	f8cd 9000 	str.w	r9, [sp]
   14d32:	4633      	mov	r3, r6
   14d34:	4652      	mov	r2, sl
   14d36:	3010      	adds	r0, #16
   14d38:	f7fe f89a 	bl	12e70 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   14d3c:	4643      	mov	r3, r8
   14d3e:	4622      	mov	r2, r4
   14d40:	4639      	mov	r1, r7
   14d42:	4628      	mov	r0, r5
	}
}
   14d44:	b007      	add	sp, #28
   14d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   14d4a:	f016 bd34 	b.w	2b7b6 <z_log_msg_finalize>
		plen = 0;
   14d4e:	4631      	mov	r1, r6
   14d50:	e7d3      	b.n	14cfa <z_impl_z_log_msg_runtime_vcreate+0x2e>
   14d52:	bf00      	nop
   14d54:	000ffe00 	.word	0x000ffe00

00014d58 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   14d58:	b40e      	push	{r1, r2, r3}
   14d5a:	b503      	push	{r0, r1, lr}
   14d5c:	ab03      	add	r3, sp, #12
   14d5e:	4601      	mov	r1, r0
   14d60:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   14d64:	4804      	ldr	r0, [pc, #16]	; (14d78 <print_formatted+0x20>)
	va_start(args, fmt);
   14d66:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   14d68:	f016 fd4b 	bl	2b802 <cbvprintf>
	va_end(args);

	return length;
}
   14d6c:	b002      	add	sp, #8
   14d6e:	f85d eb04 	ldr.w	lr, [sp], #4
   14d72:	b003      	add	sp, #12
   14d74:	4770      	bx	lr
   14d76:	bf00      	nop
   14d78:	0002b82b 	.word	0x0002b82b

00014d7c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   14d7c:	06ca      	lsls	r2, r1, #27
   14d7e:	d405      	bmi.n	14d8c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   14d80:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   14d82:	bf4c      	ite	mi
   14d84:	4902      	ldrmi	r1, [pc, #8]	; (14d90 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   14d86:	4903      	ldrpl	r1, [pc, #12]	; (14d94 <newline_print+0x18>)
   14d88:	f7ff bfe6 	b.w	14d58 <print_formatted>
	}
}
   14d8c:	4770      	bx	lr
   14d8e:	bf00      	nop
   14d90:	00031518 	.word	0x00031518
   14d94:	00031517 	.word	0x00031517

00014d98 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   14d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d9c:	b089      	sub	sp, #36	; 0x24
   14d9e:	469b      	mov	fp, r3
   14da0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   14da4:	9304      	str	r3, [sp, #16]
   14da6:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
   14daa:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   14dac:	9b04      	ldr	r3, [sp, #16]
{
   14dae:	9206      	str	r2, [sp, #24]
   14db0:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   14db4:	4604      	mov	r4, r0
   14db6:	460d      	mov	r5, r1
	if (!raw_string) {
   14db8:	2b00      	cmp	r3, #0
   14dba:	f000 8087 	beq.w	14ecc <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   14dbe:	f006 0308 	and.w	r3, r6, #8
   14dc2:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   14dc4:	f016 fcdf 	bl	2b786 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   14dc8:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   14dcc:	4602      	mov	r2, r0
   14dce:	2800      	cmp	r0, #0
   14dd0:	d04b      	beq.n	14e6a <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
   14dd2:	4986      	ldr	r1, [pc, #536]	; (14fec <log_output_process+0x254>)
   14dd4:	4620      	mov	r0, r4
   14dd6:	f7ff ffbf 	bl	14d58 <print_formatted>
   14dda:	4680      	mov	r8, r0
	if (stamp) {
   14ddc:	f1ba 0f00 	cmp.w	sl, #0
   14de0:	d008      	beq.n	14df4 <log_output_process+0x5c>
	if (!format) {
   14de2:	f016 0f44 	tst.w	r6, #68	; 0x44
   14de6:	d142      	bne.n	14e6e <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   14de8:	4981      	ldr	r1, [pc, #516]	; (14ff0 <log_output_process+0x258>)
   14dea:	462a      	mov	r2, r5
   14dec:	4620      	mov	r0, r4
   14dee:	f7ff ffb3 	bl	14d58 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   14df2:	4480      	add	r8, r0
	if (color) {
   14df4:	f006 0301 	and.w	r3, r6, #1
   14df8:	b15b      	cbz	r3, 14e12 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
   14dfa:	4b7e      	ldr	r3, [pc, #504]	; (14ff4 <log_output_process+0x25c>)
   14dfc:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   14dfe:	497e      	ldr	r1, [pc, #504]	; (14ff8 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
   14e00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   14e04:	4b7d      	ldr	r3, [pc, #500]	; (14ffc <log_output_process+0x264>)
   14e06:	4620      	mov	r0, r4
   14e08:	2a00      	cmp	r2, #0
   14e0a:	bf08      	it	eq
   14e0c:	461a      	moveq	r2, r3
   14e0e:	f7ff ffa3 	bl	14d58 <print_formatted>
	if (level_on) {
   14e12:	f006 0308 	and.w	r3, r6, #8
   14e16:	2b00      	cmp	r3, #0
   14e18:	d055      	beq.n	14ec6 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
   14e1a:	4b79      	ldr	r3, [pc, #484]	; (15000 <log_output_process+0x268>)
   14e1c:	9a04      	ldr	r2, [sp, #16]
   14e1e:	4979      	ldr	r1, [pc, #484]	; (15004 <log_output_process+0x26c>)
   14e20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14e24:	4620      	mov	r0, r4
   14e26:	f7ff ff97 	bl	14d58 <print_formatted>
   14e2a:	4605      	mov	r5, r0
	if (domain) {
   14e2c:	9b06      	ldr	r3, [sp, #24]
   14e2e:	b12b      	cbz	r3, 14e3c <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
   14e30:	4975      	ldr	r1, [pc, #468]	; (15008 <log_output_process+0x270>)
   14e32:	461a      	mov	r2, r3
   14e34:	4620      	mov	r0, r4
   14e36:	f7ff ff8f 	bl	14d58 <print_formatted>
   14e3a:	4405      	add	r5, r0
	if (source) {
   14e3c:	f1bb 0f00 	cmp.w	fp, #0
   14e40:	d005      	beq.n	14e4e <log_output_process+0xb6>
		total += print_formatted(output,
   14e42:	4972      	ldr	r1, [pc, #456]	; (1500c <log_output_process+0x274>)
   14e44:	465a      	mov	r2, fp
   14e46:	4620      	mov	r0, r4
   14e48:	f7ff ff86 	bl	14d58 <print_formatted>
   14e4c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   14e4e:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   14e50:	f1b9 0f00 	cmp.w	r9, #0
   14e54:	d149      	bne.n	14eea <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   14e56:	2f00      	cmp	r7, #0
   14e58:	d14f      	bne.n	14efa <log_output_process+0x162>
	if (color) {
   14e5a:	07f3      	lsls	r3, r6, #31
   14e5c:	f100 80c0 	bmi.w	14fe0 <log_output_process+0x248>
	newline_print(output, flags);
   14e60:	4631      	mov	r1, r6
   14e62:	4620      	mov	r0, r4
   14e64:	f7ff ff8a 	bl	14d7c <newline_print>
}
   14e68:	e0b4      	b.n	14fd4 <log_output_process+0x23c>
	uint32_t length = 0U;
   14e6a:	4680      	mov	r8, r0
   14e6c:	e7b6      	b.n	14ddc <log_output_process+0x44>
	} else if (freq != 0U) {
   14e6e:	4b68      	ldr	r3, [pc, #416]	; (15010 <log_output_process+0x278>)
   14e70:	6818      	ldr	r0, [r3, #0]
   14e72:	2800      	cmp	r0, #0
   14e74:	d0bd      	beq.n	14df2 <log_output_process+0x5a>
		timestamp /= timestamp_div;
   14e76:	4b67      	ldr	r3, [pc, #412]	; (15014 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   14e78:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   14e7c:	681b      	ldr	r3, [r3, #0]
   14e7e:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   14e82:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   14e86:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   14e8a:	fb00 5513 	mls	r5, r0, r3, r5
   14e8e:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   14e92:	fb0e f505 	mul.w	r5, lr, r5
   14e96:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   14e9a:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14e9c:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   14ea0:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14ea4:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   14ea8:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14eac:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   14eb0:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14eb2:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   14eb6:	4958      	ldr	r1, [pc, #352]	; (15018 <log_output_process+0x280>)
   14eb8:	e9cd c501 	strd	ip, r5, [sp, #4]
   14ebc:	4652      	mov	r2, sl
   14ebe:	4620      	mov	r0, r4
   14ec0:	f7ff ff4a 	bl	14d58 <print_formatted>
   14ec4:	e795      	b.n	14df2 <log_output_process+0x5a>
	int total = 0;
   14ec6:	f006 0508 	and.w	r5, r6, #8
   14eca:	e7af      	b.n	14e2c <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14ecc:	f1bb 0f01 	cmp.w	fp, #1
   14ed0:	d106      	bne.n	14ee0 <log_output_process+0x148>
	if (package) {
   14ed2:	f1b9 0f00 	cmp.w	r9, #0
   14ed6:	d164      	bne.n	14fa2 <log_output_process+0x20a>
	if (data_len) {
   14ed8:	2f00      	cmp	r7, #0
   14eda:	d07b      	beq.n	14fd4 <log_output_process+0x23c>
		prefix_offset = 0;
   14edc:	2500      	movs	r5, #0
   14ede:	e00c      	b.n	14efa <log_output_process+0x162>
	if (package) {
   14ee0:	f1b9 0f00 	cmp.w	r9, #0
   14ee4:	d0f8      	beq.n	14ed8 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14ee6:	484d      	ldr	r0, [pc, #308]	; (1501c <log_output_process+0x284>)
   14ee8:	e05c      	b.n	14fa4 <log_output_process+0x20c>
		cb = out_func;
   14eea:	484d      	ldr	r0, [pc, #308]	; (15020 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   14eec:	494d      	ldr	r1, [pc, #308]	; (15024 <log_output_process+0x28c>)
   14eee:	464b      	mov	r3, r9
   14ef0:	4622      	mov	r2, r4
   14ef2:	f015 fa48 	bl	2a386 <cbpprintf_external>
	if (data_len) {
   14ef6:	2f00      	cmp	r7, #0
   14ef8:	d068      	beq.n	14fcc <log_output_process+0x234>
		print_formatted(output, " ");
   14efa:	f8df 912c 	ldr.w	r9, [pc, #300]	; 15028 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   14efe:	f8df a12c 	ldr.w	sl, [pc, #300]	; 1502c <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   14f02:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   14f04:	4631      	mov	r1, r6
   14f06:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   14f08:	46b8      	mov	r8, r7
   14f0a:	bf28      	it	cs
   14f0c:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   14f10:	f7ff ff34 	bl	14d7c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   14f14:	f04f 0b00 	mov.w	fp, #0
   14f18:	455d      	cmp	r5, fp
   14f1a:	dc45      	bgt.n	14fa8 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
   14f1c:	9b05      	ldr	r3, [sp, #20]
   14f1e:	4651      	mov	r1, sl
   14f20:	781a      	ldrb	r2, [r3, #0]
   14f22:	4620      	mov	r0, r4
   14f24:	f7ff ff18 	bl	14d58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14f28:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   14f2c:	f01b 0f07 	tst.w	fp, #7
   14f30:	d103      	bne.n	14f3a <log_output_process+0x1a2>
			print_formatted(output, " ");
   14f32:	4649      	mov	r1, r9
   14f34:	4620      	mov	r0, r4
   14f36:	f7ff ff0f 	bl	14d58 <print_formatted>
		if (i < length) {
   14f3a:	45d8      	cmp	r8, fp
   14f3c:	d93b      	bls.n	14fb6 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
   14f3e:	9b05      	ldr	r3, [sp, #20]
   14f40:	4651      	mov	r1, sl
   14f42:	f813 200b 	ldrb.w	r2, [r3, fp]
   14f46:	4620      	mov	r0, r4
   14f48:	f7ff ff06 	bl	14d58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14f4c:	f10b 0b01 	add.w	fp, fp, #1
   14f50:	f1bb 0f10 	cmp.w	fp, #16
   14f54:	d1ea      	bne.n	14f2c <log_output_process+0x194>
	print_formatted(output, "|");
   14f56:	4936      	ldr	r1, [pc, #216]	; (15030 <log_output_process+0x298>)
   14f58:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14f5a:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   14f5e:	f7ff fefb 	bl	14d58 <print_formatted>
		if (i < length) {
   14f62:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   14f64:	9b05      	ldr	r3, [sp, #20]
   14f66:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   14f68:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   14f6c:	295f      	cmp	r1, #95	; 0x5f
   14f6e:	bf28      	it	cs
   14f70:	222e      	movcs	r2, #46	; 0x2e
   14f72:	4930      	ldr	r1, [pc, #192]	; (15034 <log_output_process+0x29c>)
   14f74:	4620      	mov	r0, r4
   14f76:	f7ff feef 	bl	14d58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14f7a:	f10b 0b01 	add.w	fp, fp, #1
   14f7e:	f1bb 0f10 	cmp.w	fp, #16
   14f82:	d01d      	beq.n	14fc0 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
   14f84:	f01b 0f07 	tst.w	fp, #7
   14f88:	d103      	bne.n	14f92 <log_output_process+0x1fa>
			print_formatted(output, " ");
   14f8a:	4649      	mov	r1, r9
   14f8c:	4620      	mov	r0, r4
   14f8e:	f7ff fee3 	bl	14d58 <print_formatted>
		if (i < length) {
   14f92:	45d8      	cmp	r8, fp
   14f94:	465a      	mov	r2, fp
   14f96:	d8e5      	bhi.n	14f64 <log_output_process+0x1cc>
			print_formatted(output, " ");
   14f98:	4649      	mov	r1, r9
   14f9a:	4620      	mov	r0, r4
   14f9c:	f7ff fedc 	bl	14d58 <print_formatted>
   14fa0:	e7eb      	b.n	14f7a <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14fa2:	481f      	ldr	r0, [pc, #124]	; (15020 <log_output_process+0x288>)
		prefix_offset = 0;
   14fa4:	9d04      	ldr	r5, [sp, #16]
   14fa6:	e7a1      	b.n	14eec <log_output_process+0x154>
		print_formatted(output, " ");
   14fa8:	4649      	mov	r1, r9
   14faa:	4620      	mov	r0, r4
   14fac:	f7ff fed4 	bl	14d58 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   14fb0:	f10b 0b01 	add.w	fp, fp, #1
   14fb4:	e7b0      	b.n	14f18 <log_output_process+0x180>
			print_formatted(output, "   ");
   14fb6:	4920      	ldr	r1, [pc, #128]	; (15038 <log_output_process+0x2a0>)
   14fb8:	4620      	mov	r0, r4
   14fba:	f7ff fecd 	bl	14d58 <print_formatted>
   14fbe:	e7c5      	b.n	14f4c <log_output_process+0x1b4>
		data += length;
   14fc0:	9b05      	ldr	r3, [sp, #20]
	} while (len);
   14fc2:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   14fc6:	4443      	add	r3, r8
   14fc8:	9305      	str	r3, [sp, #20]
	} while (len);
   14fca:	d19a      	bne.n	14f02 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   14fcc:	9b04      	ldr	r3, [sp, #16]
   14fce:	2b00      	cmp	r3, #0
   14fd0:	f47f af43 	bne.w	14e5a <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   14fd4:	4620      	mov	r0, r4
}
   14fd6:	b009      	add	sp, #36	; 0x24
   14fd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   14fdc:	f016 bc18 	b.w	2b810 <log_output_flush>
		print_formatted(output, "%s", log_color);
   14fe0:	4a06      	ldr	r2, [pc, #24]	; (14ffc <log_output_process+0x264>)
   14fe2:	4905      	ldr	r1, [pc, #20]	; (14ff8 <log_output_process+0x260>)
   14fe4:	4620      	mov	r0, r4
   14fe6:	f7ff feb7 	bl	14d58 <print_formatted>
}
   14fea:	e739      	b.n	14e60 <log_output_process+0xc8>
   14fec:	0003151f 	.word	0x0003151f
   14ff0:	00031523 	.word	0x00031523
   14ff4:	00030620 	.word	0x00030620
   14ff8:	00032283 	.word	0x00032283
   14ffc:	0003151a 	.word	0x0003151a
   15000:	00030634 	.word	0x00030634
   15004:	00031548 	.word	0x00031548
   15008:	0003154e 	.word	0x0003154e
   1500c:	00031552 	.word	0x00031552
   15010:	2000330c 	.word	0x2000330c
   15014:	20003308 	.word	0x20003308
   15018:	0003152c 	.word	0x0003152c
   1501c:	0002b861 	.word	0x0002b861
   15020:	0002b82b 	.word	0x0002b82b
   15024:	0002b803 	.word	0x0002b803
   15028:	0003155f 	.word	0x0003155f
   1502c:	00031557 	.word	0x00031557
   15030:	00031561 	.word	0x00031561
   15034:	00031563 	.word	0x00031563
   15038:	0003155d 	.word	0x0003155d

0001503c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   1503c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   15040:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   15042:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   15044:	688e      	ldr	r6, [r1, #8]
   15046:	b086      	sub	sp, #24
   15048:	4605      	mov	r5, r0
   1504a:	460c      	mov	r4, r1
   1504c:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   1504e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   15052:	b15b      	cbz	r3, 1506c <log_output_msg_process+0x30>
   15054:	4a13      	ldr	r2, [pc, #76]	; (150a4 <log_output_msg_process+0x68>)
   15056:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   15058:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1505c:	2900      	cmp	r1, #0
   1505e:	db1f      	blt.n	150a0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   15060:	7820      	ldrb	r0, [r4, #0]
   15062:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   15066:	f7ff fd8b 	bl	14b80 <log_source_name_get>
   1506a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1506c:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   1506e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   15070:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   15074:	9700      	str	r7, [sp, #0]
   15076:	f3c2 224a 	ubfx	r2, r2, #9, #11
   1507a:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   1507c:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   15080:	f3c0 100b 	ubfx	r0, r0, #4, #12
   15084:	bf08      	it	eq
   15086:	2100      	moveq	r1, #0
   15088:	e9cd 0803 	strd	r0, r8, [sp, #12]
   1508c:	e9cd 1401 	strd	r1, r4, [sp, #4]
   15090:	2200      	movs	r2, #0
   15092:	4631      	mov	r1, r6
   15094:	4628      	mov	r0, r5
   15096:	f7ff fe7f 	bl	14d98 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   1509a:	b006      	add	sp, #24
   1509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   150a0:	2300      	movs	r3, #0
   150a2:	e7e3      	b.n	1506c <log_output_msg_process+0x30>
   150a4:	0003025c 	.word	0x0003025c

000150a8 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   150a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   150aa:	f242 730f 	movw	r3, #9999	; 0x270f
   150ae:	428b      	cmp	r3, r1
   150b0:	bf28      	it	cs
   150b2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   150b4:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   150b6:	4a0f      	ldr	r2, [pc, #60]	; (150f4 <log_output_dropped_process+0x4c>)
{
   150b8:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   150ba:	2105      	movs	r1, #5
   150bc:	4668      	mov	r0, sp
   150be:	f015 fa55 	bl	2a56c <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   150c2:	6863      	ldr	r3, [r4, #4]
   150c4:	490c      	ldr	r1, [pc, #48]	; (150f8 <log_output_dropped_process+0x50>)
   150c6:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   150c8:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   150ca:	220b      	movs	r2, #11
   150cc:	4628      	mov	r0, r5
   150ce:	f016 fb8b 	bl	2b7e8 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   150d2:	6863      	ldr	r3, [r4, #4]
   150d4:	4632      	mov	r2, r6
   150d6:	4669      	mov	r1, sp
   150d8:	4628      	mov	r0, r5
   150da:	685b      	ldr	r3, [r3, #4]
   150dc:	f016 fb84 	bl	2b7e8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   150e0:	6863      	ldr	r3, [r4, #4]
   150e2:	4906      	ldr	r1, [pc, #24]	; (150fc <log_output_dropped_process+0x54>)
   150e4:	685b      	ldr	r3, [r3, #4]
   150e6:	221b      	movs	r2, #27
   150e8:	4628      	mov	r0, r5
   150ea:	f016 fb7d 	bl	2b7e8 <buffer_write>
		     output->control_block->ctx);
}
   150ee:	b002      	add	sp, #8
   150f0:	bd70      	pop	{r4, r5, r6, pc}
   150f2:	bf00      	nop
   150f4:	00033dbf 	.word	0x00033dbf
   150f8:	00031582 	.word	0x00031582
   150fc:	00031566 	.word	0x00031566

00015100 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   15100:	4a07      	ldr	r2, [pc, #28]	; (15120 <log_output_timestamp_freq_set+0x20>)
   15102:	2100      	movs	r1, #0
   15104:	2301      	movs	r3, #1
   15106:	4290      	cmp	r0, r2
   15108:	d806      	bhi.n	15118 <log_output_timestamp_freq_set+0x18>
   1510a:	4a06      	ldr	r2, [pc, #24]	; (15124 <log_output_timestamp_freq_set+0x24>)
   1510c:	b901      	cbnz	r1, 15110 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   1510e:	2301      	movs	r3, #1
   15110:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   15112:	4b05      	ldr	r3, [pc, #20]	; (15128 <log_output_timestamp_freq_set+0x28>)
   15114:	6018      	str	r0, [r3, #0]
}
   15116:	4770      	bx	lr
		frequency /= 2U;
   15118:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1511a:	005b      	lsls	r3, r3, #1
   1511c:	2101      	movs	r1, #1
   1511e:	e7f2      	b.n	15106 <log_output_timestamp_freq_set+0x6>
   15120:	000f4240 	.word	0x000f4240
   15124:	20003308 	.word	0x20003308
   15128:	2000330c 	.word	0x2000330c

0001512c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   1512c:	4b01      	ldr	r3, [pc, #4]	; (15134 <format_set+0x8>)
	return 0;
}
   1512e:	2000      	movs	r0, #0
	log_format_current = log_type;
   15130:	6019      	str	r1, [r3, #0]
}
   15132:	4770      	bx	lr
   15134:	20003324 	.word	0x20003324

00015138 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
   15138:	4b02      	ldr	r3, [pc, #8]	; (15144 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   1513a:	4803      	ldr	r0, [pc, #12]	; (15148 <panic+0x10>)
   1513c:	2201      	movs	r2, #1
   1513e:	701a      	strb	r2, [r3, #0]
   15140:	f016 bb66 	b.w	2b810 <log_output_flush>
   15144:	200055e7 	.word	0x200055e7
   15148:	00030664 	.word	0x00030664

0001514c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   1514c:	4801      	ldr	r0, [pc, #4]	; (15154 <dropped+0x8>)
   1514e:	f7ff bfab 	b.w	150a8 <log_output_dropped_process>
   15152:	bf00      	nop
   15154:	00030664 	.word	0x00030664

00015158 <process>:
{
   15158:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1515a:	4b06      	ldr	r3, [pc, #24]	; (15174 <process+0x1c>)
   1515c:	6818      	ldr	r0, [r3, #0]
{
   1515e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15160:	f7ff fb48 	bl	147f4 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   15164:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15166:	4603      	mov	r3, r0
}
   15168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   1516c:	4802      	ldr	r0, [pc, #8]	; (15178 <process+0x20>)
   1516e:	220f      	movs	r2, #15
   15170:	4718      	bx	r3
   15172:	bf00      	nop
   15174:	20003324 	.word	0x20003324
   15178:	00030664 	.word	0x00030664

0001517c <char_out>:
{
   1517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1517e:	4f07      	ldr	r7, [pc, #28]	; (1519c <char_out+0x20>)
   15180:	460d      	mov	r5, r1
   15182:	4604      	mov	r4, r0
   15184:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   15186:	42b4      	cmp	r4, r6
   15188:	d101      	bne.n	1518e <char_out+0x12>
}
   1518a:	4628      	mov	r0, r5
   1518c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   1518e:	f814 1b01 	ldrb.w	r1, [r4], #1
   15192:	68bb      	ldr	r3, [r7, #8]
   15194:	4801      	ldr	r0, [pc, #4]	; (1519c <char_out+0x20>)
   15196:	685b      	ldr	r3, [r3, #4]
   15198:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   1519a:	e7f4      	b.n	15186 <char_out+0xa>
   1519c:	0002ffd8 	.word	0x0002ffd8

000151a0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   151a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   151a4:	4605      	mov	r5, r0
	__asm__ volatile(
   151a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   151aa:	f3ef 8611 	mrs	r6, BASEPRI
   151ae:	f383 8812 	msr	BASEPRI_MAX, r3
   151b2:	f3bf 8f6f 	isb	sy
	return list->head;
   151b6:	4b0e      	ldr	r3, [pc, #56]	; (151f0 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   151b8:	4f0e      	ldr	r7, [pc, #56]	; (151f4 <pm_state_notify+0x54>)
   151ba:	681c      	ldr	r4, [r3, #0]
   151bc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 151f8 <pm_state_notify+0x58>
   151c0:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   151c4:	b92c      	cbnz	r4, 151d2 <pm_state_notify+0x32>
	__asm__ volatile(
   151c6:	f386 8811 	msr	BASEPRI, r6
   151ca:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   151ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   151d2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   151d6:	2d00      	cmp	r5, #0
   151d8:	bf18      	it	ne
   151da:	4613      	movne	r3, r2
		if (callback) {
   151dc:	b12b      	cbz	r3, 151ea <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   151de:	f898 2010 	ldrb.w	r2, [r8, #16]
   151e2:	fb09 f202 	mul.w	r2, r9, r2
   151e6:	5cb8      	ldrb	r0, [r7, r2]
   151e8:	4798      	blx	r3
	return node->next;
   151ea:	6824      	ldr	r4, [r4, #0]
   151ec:	e7ea      	b.n	151c4 <pm_state_notify+0x24>
   151ee:	bf00      	nop
   151f0:	20003340 	.word	0x20003340
   151f4:	20003334 	.word	0x20003334
   151f8:	20004a90 	.word	0x20004a90

000151fc <pm_system_resume>:

void pm_system_resume(void)
{
   151fc:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   151fe:	4b19      	ldr	r3, [pc, #100]	; (15264 <pm_system_resume+0x68>)
   15200:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15202:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   15206:	f004 031f 	and.w	r3, r4, #31
   1520a:	2201      	movs	r2, #1
   1520c:	409a      	lsls	r2, r3
   1520e:	4b16      	ldr	r3, [pc, #88]	; (15268 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15210:	0961      	lsrs	r1, r4, #5
   15212:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15216:	43d0      	mvns	r0, r2
   15218:	e853 1f00 	ldrex	r1, [r3]
   1521c:	ea01 0500 	and.w	r5, r1, r0
   15220:	e843 5600 	strex	r6, r5, [r3]
   15224:	2e00      	cmp	r6, #0
   15226:	d1f7      	bne.n	15218 <pm_system_resume+0x1c>
   15228:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1522c:	420a      	tst	r2, r1
   1522e:	d013      	beq.n	15258 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   15230:	4b0e      	ldr	r3, [pc, #56]	; (1526c <pm_system_resume+0x70>)
   15232:	4d0f      	ldr	r5, [pc, #60]	; (15270 <pm_system_resume+0x74>)
   15234:	b18b      	cbz	r3, 1525a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   15236:	230c      	movs	r3, #12
   15238:	4363      	muls	r3, r4
   1523a:	18ea      	adds	r2, r5, r3
   1523c:	5ce8      	ldrb	r0, [r5, r3]
   1523e:	7851      	ldrb	r1, [r2, #1]
   15240:	f017 f870 	bl	2c324 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   15244:	2000      	movs	r0, #0
   15246:	f7ff ffab 	bl	151a0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1524a:	230c      	movs	r3, #12
   1524c:	435c      	muls	r4, r3
   1524e:	192a      	adds	r2, r5, r4
   15250:	2300      	movs	r3, #0
   15252:	512b      	str	r3, [r5, r4]
   15254:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   15258:	bd70      	pop	{r4, r5, r6, pc}
   1525a:	f383 8811 	msr	BASEPRI, r3
   1525e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   15262:	e7ef      	b.n	15244 <pm_system_resume+0x48>
   15264:	20004a90 	.word	0x20004a90
   15268:	20003348 	.word	0x20003348
   1526c:	0002c325 	.word	0x0002c325
   15270:	20003334 	.word	0x20003334

00015274 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   15274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   15278:	4b35      	ldr	r3, [pc, #212]	; (15350 <pm_system_suspend+0xdc>)
{
   1527a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   1527c:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   1527e:	f04f 0340 	mov.w	r3, #64	; 0x40
   15282:	f3ef 8811 	mrs	r8, BASEPRI
   15286:	f383 8812 	msr	BASEPRI_MAX, r3
   1528a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   1528e:	240c      	movs	r4, #12
   15290:	4b30      	ldr	r3, [pc, #192]	; (15354 <pm_system_suspend+0xe0>)
   15292:	4e31      	ldr	r6, [pc, #196]	; (15358 <pm_system_suspend+0xe4>)
   15294:	436c      	muls	r4, r5
   15296:	191a      	adds	r2, r3, r4
   15298:	5d19      	ldrb	r1, [r3, r4]
   1529a:	2900      	cmp	r1, #0
   1529c:	d04c      	beq.n	15338 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1529e:	ca07      	ldmia	r2, {r0, r1, r2}
   152a0:	eb06 0c04 	add.w	ip, r6, r4
   152a4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   152a8:	2200      	movs	r2, #0
   152aa:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   152ac:	f388 8811 	msr	BASEPRI, r8
   152b0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   152b4:	230c      	movs	r3, #12
   152b6:	436b      	muls	r3, r5
   152b8:	18f2      	adds	r2, r6, r3
   152ba:	5cf0      	ldrb	r0, [r6, r3]
   152bc:	2800      	cmp	r0, #0
   152be:	d039      	beq.n	15334 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   152c0:	1c7b      	adds	r3, r7, #1
   152c2:	d010      	beq.n	152e6 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
   152c4:	f8d2 c008 	ldr.w	ip, [r2, #8]
   152c8:	4c24      	ldr	r4, [pc, #144]	; (1535c <pm_system_suspend+0xe8>)
   152ca:	4a25      	ldr	r2, [pc, #148]	; (15360 <pm_system_suspend+0xec>)
   152cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   152d0:	2100      	movs	r1, #0
   152d2:	fbec 4100 	umlal	r4, r1, ip, r0
   152d6:	2300      	movs	r3, #0
   152d8:	4620      	mov	r0, r4
   152da:	f7eb ff11 	bl	1100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   152de:	2101      	movs	r1, #1
   152e0:	1a38      	subs	r0, r7, r0
   152e2:	f00d fd7d 	bl	22de0 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   152e6:	f011 fc1f 	bl	26b28 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   152ea:	2001      	movs	r0, #1
   152ec:	f7ff ff58 	bl	151a0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   152f0:	f3bf 8f5b 	dmb	ish
   152f4:	4b1b      	ldr	r3, [pc, #108]	; (15364 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   152f6:	096a      	lsrs	r2, r5, #5
   152f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   152fc:	f005 011f 	and.w	r1, r5, #31
   15300:	2201      	movs	r2, #1
   15302:	408a      	lsls	r2, r1
   15304:	e853 0f00 	ldrex	r0, [r3]
   15308:	4310      	orrs	r0, r2
   1530a:	e843 0100 	strex	r1, r0, [r3]
   1530e:	2900      	cmp	r1, #0
   15310:	d1f8      	bne.n	15304 <pm_system_suspend+0x90>
   15312:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   15316:	4b14      	ldr	r3, [pc, #80]	; (15368 <pm_system_suspend+0xf4>)
   15318:	b13b      	cbz	r3, 1532a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   1531a:	230c      	movs	r3, #12
   1531c:	fb03 f005 	mul.w	r0, r3, r5
   15320:	1833      	adds	r3, r6, r0
   15322:	5c30      	ldrb	r0, [r6, r0]
   15324:	7859      	ldrb	r1, [r3, #1]
   15326:	f016 fff1 	bl	2c30c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   1532a:	f7ff ff67 	bl	151fc <pm_system_resume>
	k_sched_unlock();
   1532e:	f011 fc0f 	bl	26b50 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   15332:	2001      	movs	r0, #1
}
   15334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   15338:	4601      	mov	r1, r0
   1533a:	4628      	mov	r0, r5
   1533c:	f000 f816 	bl	1536c <pm_policy_next_state>
		if (info != NULL) {
   15340:	2800      	cmp	r0, #0
   15342:	d0b3      	beq.n	152ac <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   15344:	c807      	ldmia	r0, {r0, r1, r2}
   15346:	4434      	add	r4, r6
   15348:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   1534c:	e7ae      	b.n	152ac <pm_system_suspend+0x38>
   1534e:	bf00      	nop
   15350:	20004a90 	.word	0x20004a90
   15354:	20003328 	.word	0x20003328
   15358:	20003334 	.word	0x20003334
   1535c:	000f423f 	.word	0x000f423f
   15360:	000f4240 	.word	0x000f4240
   15364:	20003348 	.word	0x20003348
   15368:	0002c30d 	.word	0x0002c30d

0001536c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   1536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15370:	b085      	sub	sp, #20
   15372:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   15374:	a903      	add	r1, sp, #12
   15376:	f000 f843 	bl	15400 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1537a:	4b1e      	ldr	r3, [pc, #120]	; (153f4 <pm_policy_next_state+0x88>)
   1537c:	9d03      	ldr	r5, [sp, #12]
   1537e:	f8d3 a000 	ldr.w	sl, [r3]
   15382:	f8df 8074 	ldr.w	r8, [pc, #116]	; 153f8 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   15386:	1e43      	subs	r3, r0, #1
   15388:	b21b      	sxth	r3, r3
   1538a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   1538e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   15390:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   15394:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   15398:	f04f 0b00 	mov.w	fp, #0
   1539c:	b924      	cbnz	r4, 153a8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   1539e:	46a1      	mov	r9, r4
}
   153a0:	4648      	mov	r0, r9
   153a2:	b005      	add	sp, #20
   153a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153a8:	6868      	ldr	r0, [r5, #4]
   153aa:	4a14      	ldr	r2, [pc, #80]	; (153fc <pm_policy_next_state+0x90>)
   153ac:	46c4      	mov	ip, r8
   153ae:	4659      	mov	r1, fp
   153b0:	fbe0 c107 	umlal	ip, r1, r0, r7
   153b4:	2300      	movs	r3, #0
   153b6:	4660      	mov	r0, ip
   153b8:	f7eb fea2 	bl	1100 <__aeabi_uldivmod>
   153bc:	9001      	str	r0, [sp, #4]
   153be:	68a8      	ldr	r0, [r5, #8]
   153c0:	4a0e      	ldr	r2, [pc, #56]	; (153fc <pm_policy_next_state+0x90>)
   153c2:	46c4      	mov	ip, r8
   153c4:	4659      	mov	r1, fp
   153c6:	fbe0 c107 	umlal	ip, r1, r0, r7
   153ca:	2300      	movs	r3, #0
   153cc:	4660      	mov	r0, ip
   153ce:	f7eb fe97 	bl	1100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   153d2:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   153d6:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   153d8:	d001      	beq.n	153de <pm_policy_next_state+0x72>
   153da:	4582      	cmp	sl, r0
   153dc:	d905      	bls.n	153ea <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   153de:	1c73      	adds	r3, r6, #1
   153e0:	d0de      	beq.n	153a0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   153e2:	9b01      	ldr	r3, [sp, #4]
   153e4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   153e6:	42b0      	cmp	r0, r6
   153e8:	d9da      	bls.n	153a0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   153ea:	3c01      	subs	r4, #1
   153ec:	b2a4      	uxth	r4, r4
   153ee:	3d0c      	subs	r5, #12
   153f0:	e7d4      	b.n	1539c <pm_policy_next_state+0x30>
   153f2:	bf00      	nop
   153f4:	20000738 	.word	0x20000738
   153f8:	000f423f 	.word	0x000f423f
   153fc:	000f4240 	.word	0x000f4240

00015400 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   15400:	b908      	cbnz	r0, 15406 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   15402:	4b02      	ldr	r3, [pc, #8]	; (1540c <pm_state_cpu_get_all+0xc>)
   15404:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   15406:	2000      	movs	r0, #0
   15408:	4770      	bx	lr
   1540a:	bf00      	nop
   1540c:	00030674 	.word	0x00030674

00015410 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   15410:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   15412:	4b11      	ldr	r3, [pc, #68]	; (15458 <flash_area_open+0x48>)
   15414:	681c      	ldr	r4, [r3, #0]
{
   15416:	460d      	mov	r5, r1
	if (flash_map == NULL) {
   15418:	b1dc      	cbz	r4, 15452 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   1541a:	4b10      	ldr	r3, [pc, #64]	; (1545c <flash_area_open+0x4c>)
   1541c:	6819      	ldr	r1, [r3, #0]
   1541e:	2300      	movs	r3, #0
   15420:	428b      	cmp	r3, r1
   15422:	db02      	blt.n	1542a <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   15424:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   15428:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   1542a:	4622      	mov	r2, r4
   1542c:	f812 6b10 	ldrb.w	r6, [r2], #16
   15430:	4286      	cmp	r6, r0
   15432:	d002      	beq.n	1543a <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
   15434:	3301      	adds	r3, #1
   15436:	4614      	mov	r4, r2
   15438:	e7f2      	b.n	15420 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   1543a:	68e0      	ldr	r0, [r4, #12]
   1543c:	b910      	cbnz	r0, 15444 <flash_area_open+0x34>
		return -ENODEV;
   1543e:	f06f 0012 	mvn.w	r0, #18
   15442:	e7f1      	b.n	15428 <flash_area_open+0x18>
   15444:	f019 ff5d 	bl	2f302 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   15448:	2800      	cmp	r0, #0
   1544a:	d0f8      	beq.n	1543e <flash_area_open+0x2e>
	*fap = area;
   1544c:	602c      	str	r4, [r5, #0]
	return 0;
   1544e:	2000      	movs	r0, #0
   15450:	e7ea      	b.n	15428 <flash_area_open+0x18>
		return -EACCES;
   15452:	f06f 000c 	mvn.w	r0, #12
   15456:	e7e7      	b.n	15428 <flash_area_open+0x18>
   15458:	2000073c 	.word	0x2000073c
   1545c:	00030674 	.word	0x00030674

00015460 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   15460:	b570      	push	{r4, r5, r6, lr}
   15462:	b088      	sub	sp, #32
   15464:	4605      	mov	r5, r0
   15466:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   15468:	b2c0      	uxtb	r0, r0
   1546a:	4669      	mov	r1, sp
{
   1546c:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   1546e:	f7ff ffcf 	bl	15410 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   15472:	2800      	cmp	r0, #0
   15474:	db1b      	blt.n	154ae <flash_area_get_sectors+0x4e>
   15476:	9800      	ldr	r0, [sp, #0]
   15478:	b1c8      	cbz	r0, 154ae <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   1547a:	6843      	ldr	r3, [r0, #4]
   1547c:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   1547e:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   15480:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   15482:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   15484:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   15488:	2300      	movs	r3, #0
	cb_data->status = 0;
   1548a:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   1548e:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
   15490:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   15492:	f016 f9f4 	bl	2b87e <flash_area_close>
	if (flash_dev == NULL) {
   15496:	b16d      	cbz	r5, 154b4 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   15498:	4628      	mov	r0, r5
   1549a:	4908      	ldr	r1, [pc, #32]	; (154bc <flash_area_get_sectors+0x5c>)
   1549c:	aa01      	add	r2, sp, #4
   1549e:	f019 fadf 	bl	2ea60 <flash_page_foreach>
	if (cb_data->status == 0) {
   154a2:	9807      	ldr	r0, [sp, #28]
   154a4:	b908      	cbnz	r0, 154aa <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   154a6:	9b05      	ldr	r3, [sp, #20]
   154a8:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   154aa:	b008      	add	sp, #32
   154ac:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   154ae:	f06f 0015 	mvn.w	r0, #21
   154b2:	e7fa      	b.n	154aa <flash_area_get_sectors+0x4a>
		return -ENODEV;
   154b4:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   154b8:	e7f7      	b.n	154aa <flash_area_get_sectors+0x4a>
   154ba:	bf00      	nop
   154bc:	0002b881 	.word	0x0002b881

000154c0 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
   154c0:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   154c2:	4b0c      	ldr	r3, [pc, #48]	; (154f4 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   154c4:	4e0c      	ldr	r6, [pc, #48]	; (154f8 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   154c6:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   154c8:	4b0c      	ldr	r3, [pc, #48]	; (154fc <class_handler+0x3c>)
   154ca:	42b3      	cmp	r3, r6
   154cc:	d303      	bcc.n	154d6 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   154ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   154d2:	bcf0      	pop	{r4, r5, r6, r7}
   154d4:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   154d6:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   154d8:	42bd      	cmp	r5, r7
   154da:	d309      	bcc.n	154f0 <class_handler+0x30>
		if (iface->class_handler &&
   154dc:	691c      	ldr	r4, [r3, #16]
   154de:	b13c      	cbz	r4, 154f0 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   154e0:	f895 c002 	ldrb.w	ip, [r5, #2]
   154e4:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   154e6:	45ac      	cmp	ip, r5
   154e8:	d102      	bne.n	154f0 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   154ea:	4623      	mov	r3, r4
}
   154ec:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   154ee:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   154f0:	3324      	adds	r3, #36	; 0x24
   154f2:	e7ea      	b.n	154ca <class_handler+0xa>
   154f4:	2000334c 	.word	0x2000334c
   154f8:	20000fb8 	.word	0x20000fb8
   154fc:	20000f70 	.word	0x20000f70

00015500 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   15500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   15504:	4c13      	ldr	r4, [pc, #76]	; (15554 <custom_handler+0x54>)
   15506:	f8df 8050 	ldr.w	r8, [pc, #80]	; 15558 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   1550a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1555c <custom_handler+0x5c>
{
   1550e:	4605      	mov	r5, r0
   15510:	460e      	mov	r6, r1
   15512:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   15514:	4544      	cmp	r4, r8
   15516:	d303      	bcc.n	15520 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   15518:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   15520:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   15522:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   15526:	429a      	cmp	r2, r3
   15528:	d312      	bcc.n	15550 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   1552a:	69a3      	ldr	r3, [r4, #24]
   1552c:	b183      	cbz	r3, 15550 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   1552e:	7890      	ldrb	r0, [r2, #2]
   15530:	7929      	ldrb	r1, [r5, #4]
   15532:	4288      	cmp	r0, r1
   15534:	d105      	bne.n	15542 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   15536:	463a      	mov	r2, r7
   15538:	4631      	mov	r1, r6
   1553a:	4628      	mov	r0, r5
}
   1553c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   15540:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   15542:	7952      	ldrb	r2, [r2, #5]
   15544:	2a01      	cmp	r2, #1
   15546:	d103      	bne.n	15550 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   15548:	463a      	mov	r2, r7
   1554a:	4631      	mov	r1, r6
   1554c:	4628      	mov	r0, r5
   1554e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   15550:	3424      	adds	r4, #36	; 0x24
   15552:	e7df      	b.n	15514 <custom_handler+0x14>
   15554:	20000f70 	.word	0x20000f70
   15558:	20000fb8 	.word	0x20000fb8
   1555c:	2000334c 	.word	0x2000334c

00015560 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   15560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   15564:	4c0b      	ldr	r4, [pc, #44]	; (15594 <vendor_handler+0x34>)
   15566:	f8df 8030 	ldr.w	r8, [pc, #48]	; 15598 <vendor_handler+0x38>
{
   1556a:	4605      	mov	r5, r0
   1556c:	460e      	mov	r6, r1
   1556e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   15570:	4544      	cmp	r4, r8
   15572:	d302      	bcc.n	1557a <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   15574:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15578:	e009      	b.n	1558e <vendor_handler+0x2e>
		if (iface->vendor_handler) {
   1557a:	6963      	ldr	r3, [r4, #20]
   1557c:	b90b      	cbnz	r3, 15582 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   1557e:	3424      	adds	r4, #36	; 0x24
   15580:	e7f6      	b.n	15570 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
   15582:	463a      	mov	r2, r7
   15584:	4631      	mov	r1, r6
   15586:	4628      	mov	r0, r5
   15588:	4798      	blx	r3
   1558a:	2800      	cmp	r0, #0
   1558c:	d1f7      	bne.n	1557e <vendor_handler+0x1e>
}
   1558e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15592:	bf00      	nop
   15594:	20000f70 	.word	0x20000f70
   15598:	20000fb8 	.word	0x20000fb8

0001559c <disable_endpoint>:
{
   1559c:	b510      	push	{r4, lr}
   1559e:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_addr);
   155a0:	f019 f90c 	bl	2e7bc <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   155a4:	f110 0f78 	cmn.w	r0, #120	; 0x78
   155a8:	d000      	beq.n	155ac <disable_endpoint+0x10>
	} else if (ret) {
   155aa:	b950      	cbnz	r0, 155c2 <disable_endpoint+0x26>
	usb_dev.ep_bm &= ~ep_bm;
   155ac:	4a05      	ldr	r2, [pc, #20]	; (155c4 <disable_endpoint+0x28>)
	ep_bm = get_ep_bm_from_addr(ep_addr);
   155ae:	4620      	mov	r0, r4
   155b0:	f016 f988 	bl	2b8c4 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
   155b4:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   155b8:	ea23 0300 	bic.w	r3, r3, r0
   155bc:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
   155c0:	2000      	movs	r0, #0
}
   155c2:	bd10      	pop	{r4, pc}
   155c4:	2000334c 	.word	0x2000334c

000155c8 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   155c8:	4802      	ldr	r0, [pc, #8]	; (155d4 <usb_reset_alt_setting+0xc>)
   155ca:	2208      	movs	r2, #8
   155cc:	2100      	movs	r1, #0
   155ce:	f016 be91 	b.w	2c2f4 <memset>
   155d2:	bf00      	nop
   155d4:	20003407 	.word	0x20003407

000155d8 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
   155d8:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   155da:	4b0b      	ldr	r3, [pc, #44]	; (15608 <is_ep_valid.part.0+0x30>)
   155dc:	4c0b      	ldr	r4, [pc, #44]	; (1560c <is_ep_valid.part.0+0x34>)
   155de:	42a3      	cmp	r3, r4
   155e0:	d301      	bcc.n	155e6 <is_ep_valid.part.0+0xe>
	return false;
   155e2:	2000      	movs	r0, #0
}
   155e4:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   155e6:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   155e8:	7f1e      	ldrb	r6, [r3, #28]
   155ea:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   155ec:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   155ee:	b2d5      	uxtb	r5, r2
   155f0:	42ae      	cmp	r6, r5
   155f2:	d801      	bhi.n	155f8 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   155f4:	3324      	adds	r3, #36	; 0x24
   155f6:	e7f2      	b.n	155de <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
   155f8:	3201      	adds	r2, #1
   155fa:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   155fe:	4285      	cmp	r5, r0
   15600:	d1f5      	bne.n	155ee <is_ep_valid.part.0+0x16>
		return true;
   15602:	2001      	movs	r0, #1
   15604:	e7ee      	b.n	155e4 <is_ep_valid.part.0+0xc>
   15606:	bf00      	nop
   15608:	20000f70 	.word	0x20000f70
   1560c:	20000fb8 	.word	0x20000fb8

00015610 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
   15610:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
   15612:	4809      	ldr	r0, [pc, #36]	; (15638 <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
   15614:	7803      	ldrb	r3, [r0, #0]
   15616:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   1561a:	330a      	adds	r3, #10
   1561c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
   15620:	b13b      	cbz	r3, 15632 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
   15622:	f100 0208 	add.w	r2, r0, #8
   15626:	f100 0110 	add.w	r1, r0, #16
   1562a:	4798      	blx	r3
   1562c:	43c0      	mvns	r0, r0
   1562e:	0fc0      	lsrs	r0, r0, #31
}
   15630:	bd08      	pop	{r3, pc}
		return false;
   15632:	4618      	mov	r0, r3
   15634:	e7fc      	b.n	15630 <usb_handle_request.constprop.0+0x20>
   15636:	bf00      	nop
   15638:	2000334c 	.word	0x2000334c

0001563c <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   1563c:	2804      	cmp	r0, #4
{
   1563e:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15642:	f8df 9098 	ldr.w	r9, [pc, #152]	; 156dc <forward_status_cb+0xa0>
   15646:	4604      	mov	r4, r0
   15648:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
   1564a:	d016      	beq.n	1567a <forward_status_cb+0x3e>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   1564c:	2801      	cmp	r0, #1
   1564e:	d12d      	bne.n	156ac <forward_status_cb+0x70>
		if (usb_dev.configured) {
   15650:	f8df 808c 	ldr.w	r8, [pc, #140]	; 156e0 <forward_status_cb+0xa4>
   15654:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
   15658:	b343      	cbz	r3, 156ac <forward_status_cb+0x70>
			usb_cancel_transfers();
   1565a:	f000 fdbb 	bl	161d4 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   1565e:	4d21      	ldr	r5, [pc, #132]	; (156e4 <forward_status_cb+0xa8>)
   15660:	454d      	cmp	r5, r9
   15662:	d220      	bcs.n	156a6 <forward_status_cb+0x6a>
		ep_data = cfg_data->endpoint;
   15664:	f8d5 b020 	ldr.w	fp, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   15668:	f04f 0a00 	mov.w	sl, #0
   1566c:	7f2b      	ldrb	r3, [r5, #28]
   1566e:	fa5f f68a 	uxtb.w	r6, sl
   15672:	42b3      	cmp	r3, r6
   15674:	d804      	bhi.n	15680 <forward_status_cb+0x44>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   15676:	3524      	adds	r5, #36	; 0x24
   15678:	e7f2      	b.n	15660 <forward_status_cb+0x24>
		usb_reset_alt_setting();
   1567a:	f7ff ffa5 	bl	155c8 <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   1567e:	e7e7      	b.n	15650 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
   15680:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
			if (ret < 0) {
   15684:	f10a 0a01 	add.w	sl, sl, #1
	ret = usb_dc_ep_disable(ep_data->ep_addr);
   15688:	7930      	ldrb	r0, [r6, #4]
   1568a:	f019 f897 	bl	2e7bc <usb_dc_ep_disable>
   1568e:	4602      	mov	r2, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
   15690:	7930      	ldrb	r0, [r6, #4]
   15692:	f016 f917 	bl	2b8c4 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
   15696:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
   1569a:	2a00      	cmp	r2, #0
	usb_dev.ep_bm &= ~ep_bm;
   1569c:	ea23 0300 	bic.w	r3, r3, r0
   156a0:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
   156a4:	dae2      	bge.n	1566c <forward_status_cb+0x30>
			usb_dev.configured = false;
   156a6:	2300      	movs	r3, #0
   156a8:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   156ac:	4d0d      	ldr	r5, [pc, #52]	; (156e4 <forward_status_cb+0xa8>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   156ae:	454d      	cmp	r5, r9
   156b0:	d308      	bcc.n	156c4 <forward_status_cb+0x88>
	if (usb_dev.user_status_callback) {
   156b2:	4b0b      	ldr	r3, [pc, #44]	; (156e0 <forward_status_cb+0xa4>)
   156b4:	6a1b      	ldr	r3, [r3, #32]
   156b6:	b16b      	cbz	r3, 156d4 <forward_status_cb+0x98>
		usb_dev.user_status_callback(status, param);
   156b8:	4639      	mov	r1, r7
   156ba:	4620      	mov	r0, r4
}
   156bc:	b001      	add	sp, #4
   156be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
   156c2:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
   156c4:	68eb      	ldr	r3, [r5, #12]
   156c6:	b11b      	cbz	r3, 156d0 <forward_status_cb+0x94>
			cfg_data->cb_usb_status(cfg_data, status, param);
   156c8:	463a      	mov	r2, r7
   156ca:	4621      	mov	r1, r4
   156cc:	4628      	mov	r0, r5
   156ce:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   156d0:	3524      	adds	r5, #36	; 0x24
   156d2:	e7ec      	b.n	156ae <forward_status_cb+0x72>
}
   156d4:	b001      	add	sp, #4
   156d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156da:	bf00      	nop
   156dc:	20000fb8 	.word	0x20000fb8
   156e0:	2000334c 	.word	0x2000334c
   156e4:	20000f70 	.word	0x20000f70

000156e8 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   156e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   156ea:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   156ec:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   156ee:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   156f0:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   156f4:	d007      	beq.n	15706 <usb_halt_endpoint_req.isra.0+0x1e>
   156f6:	4620      	mov	r0, r4
   156f8:	f7ff ff6e 	bl	155d8 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   156fc:	b178      	cbz	r0, 1571e <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
   156fe:	4b0d      	ldr	r3, [pc, #52]	; (15734 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   15700:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   15704:	b158      	cbz	r0, 1571e <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
   15706:	4e0b      	ldr	r6, [pc, #44]	; (15734 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
   15708:	4620      	mov	r0, r4
		if (halt) {
   1570a:	b155      	cbz	r5, 15722 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
   1570c:	f00b ff3a 	bl	21584 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   15710:	69f3      	ldr	r3, [r6, #28]
   15712:	b11b      	cbz	r3, 1571c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   15714:	f10d 0107 	add.w	r1, sp, #7
   15718:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   1571a:	4798      	blx	r3
		return true;
   1571c:	2001      	movs	r0, #1
}
   1571e:	b002      	add	sp, #8
   15720:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   15722:	f00b ff69 	bl	215f8 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   15726:	69f3      	ldr	r3, [r6, #28]
   15728:	2b00      	cmp	r3, #0
   1572a:	d0f7      	beq.n	1571c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   1572c:	f10d 0107 	add.w	r1, sp, #7
   15730:	2009      	movs	r0, #9
   15732:	e7f2      	b.n	1571a <usb_halt_endpoint_req.isra.0+0x32>
   15734:	2000334c 	.word	0x2000334c

00015738 <set_endpoint>:
{
   15738:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   1573a:	7886      	ldrb	r6, [r0, #2]
   1573c:	f88d 6000 	strb.w	r6, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   15740:	7903      	ldrb	r3, [r0, #4]
   15742:	7942      	ldrb	r2, [r0, #5]
	if (ep_bm & usb_dev.ep_bm) {
   15744:	4c1c      	ldr	r4, [pc, #112]	; (157b8 <set_endpoint+0x80>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   15746:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1574a:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   1574e:	78c3      	ldrb	r3, [r0, #3]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
   15750:	4630      	mov	r0, r6
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   15752:	f003 0303 	and.w	r3, r3, #3
   15756:	f88d 3004 	strb.w	r3, [sp, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
   1575a:	f016 f8b3 	bl	2b8c4 <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
   1575e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   15762:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
   15764:	4605      	mov	r5, r0
	if (ep_bm & usb_dev.ep_bm) {
   15766:	d00b      	beq.n	15780 <set_endpoint+0x48>
	usb_cancel_transfer(ep_cfg.ep_addr);
   15768:	4630      	mov	r0, r6
   1576a:	f000 fd15 	bl	16198 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
   1576e:	4630      	mov	r0, r6
   15770:	f7ff ff14 	bl	1559c <disable_endpoint>
		if (!k_is_in_isr()) {
   15774:	f019 fe93 	bl	2f49e <k_is_in_isr>
   15778:	b910      	cbnz	r0, 15780 <set_endpoint+0x48>
	return z_impl_k_usleep(us);
   1577a:	2096      	movs	r0, #150	; 0x96
   1577c:	f011 faa8 	bl	26cd0 <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
   15780:	4668      	mov	r0, sp
   15782:	f00b fecb 	bl	2151c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   15786:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1578a:	d003      	beq.n	15794 <set_endpoint+0x5c>
	} else if (ret) {
   1578c:	b110      	cbz	r0, 15794 <set_endpoint+0x5c>
		return false;
   1578e:	2000      	movs	r0, #0
}
   15790:	b002      	add	sp, #8
   15792:	bd70      	pop	{r4, r5, r6, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   15794:	f89d 0000 	ldrb.w	r0, [sp]
   15798:	f00b ff6a 	bl	21670 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   1579c:	f110 0f78 	cmn.w	r0, #120	; 0x78
   157a0:	d001      	beq.n	157a6 <set_endpoint+0x6e>
	} else if (ret) {
   157a2:	2800      	cmp	r0, #0
   157a4:	d1f3      	bne.n	1578e <set_endpoint+0x56>
	usb_dev.ep_bm |= ep_bm;
   157a6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	usb_dev.configured = true;
   157aa:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
   157ac:	432b      	orrs	r3, r5
	usb_dev.configured = true;
   157ae:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
   157b2:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	return true;
   157b6:	e7eb      	b.n	15790 <set_endpoint+0x58>
   157b8:	2000334c 	.word	0x2000334c

000157bc <usb_handle_standard_request>:
{
   157bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   157c0:	4d92      	ldr	r5, [pc, #584]	; (15a0c <usb_handle_standard_request+0x250>)
   157c2:	69ab      	ldr	r3, [r5, #24]
{
   157c4:	4604      	mov	r4, r0
   157c6:	460e      	mov	r6, r1
   157c8:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
   157ca:	b9c3      	cbnz	r3, 157fe <usb_handle_standard_request+0x42>
	switch (setup->RequestType.recipient) {
   157cc:	7820      	ldrb	r0, [r4, #0]
   157ce:	f000 001f 	and.w	r0, r0, #31
   157d2:	2801      	cmp	r0, #1
   157d4:	d076      	beq.n	158c4 <usb_handle_standard_request+0x108>
   157d6:	2802      	cmp	r0, #2
   157d8:	f000 80dc 	beq.w	15994 <usb_handle_standard_request+0x1d8>
   157dc:	bb00      	cbnz	r0, 15820 <usb_handle_standard_request+0x64>
	if (usb_reqtype_is_to_host(setup)) {
   157de:	f994 1000 	ldrsb.w	r1, [r4]
	uint8_t *data = *data_buf;
   157e2:	683a      	ldr	r2, [r7, #0]
		switch (setup->bRequest) {
   157e4:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   157e6:	2900      	cmp	r1, #0
   157e8:	da2e      	bge.n	15848 <usb_handle_standard_request+0x8c>
		switch (setup->bRequest) {
   157ea:	2b06      	cmp	r3, #6
   157ec:	d00c      	beq.n	15808 <usb_handle_standard_request+0x4c>
   157ee:	2b08      	cmp	r3, #8
   157f0:	d025      	beq.n	1583e <usb_handle_standard_request+0x82>
   157f2:	b9ab      	cbnz	r3, 15820 <usb_handle_standard_request+0x64>
	data[1] = 0U;
   157f4:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   157f6:	2301      	movs	r3, #1
   157f8:	7013      	strb	r3, [r2, #0]
		*len = 2;
   157fa:	2302      	movs	r3, #2
   157fc:	e103      	b.n	15a06 <usb_handle_standard_request+0x24a>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   157fe:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   15800:	2800      	cmp	r0, #0
   15802:	d1e3      	bne.n	157cc <usb_handle_standard_request+0x10>
		return 0;
   15804:	2000      	movs	r0, #0
   15806:	e00d      	b.n	15824 <usb_handle_standard_request+0x68>
			return usb_get_descriptor(setup, len, data_buf);
   15808:	8863      	ldrh	r3, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   1580a:	0a19      	lsrs	r1, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   1580c:	1f0a      	subs	r2, r1, #4
   1580e:	2a01      	cmp	r2, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   15810:	468c      	mov	ip, r1
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   15812:	d905      	bls.n	15820 <usb_handle_standard_request+0x64>
   15814:	2907      	cmp	r1, #7
   15816:	d803      	bhi.n	15820 <usb_handle_standard_request+0x64>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
   15818:	b2da      	uxtb	r2, r3
	p = (uint8_t *)usb_dev.descriptors;
   1581a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
   1581c:	781c      	ldrb	r4, [r3, #0]
   1581e:	b91c      	cbnz	r4, 15828 <usb_handle_standard_request+0x6c>
			rc = -EINVAL;
   15820:	f06f 0015 	mvn.w	r0, #21
}
   15824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
   15828:	785d      	ldrb	r5, [r3, #1]
   1582a:	4565      	cmp	r5, ip
   1582c:	d103      	bne.n	15836 <usb_handle_standard_request+0x7a>
			if (cur_index == index) {
   1582e:	4282      	cmp	r2, r0
   15830:	f000 80e4 	beq.w	159fc <usb_handle_standard_request+0x240>
			cur_index++;
   15834:	3001      	adds	r0, #1
		p += p[DESC_bLength];
   15836:	4423      	add	r3, r4
   15838:	e7f0      	b.n	1581c <usb_handle_standard_request+0x60>
			*len = p[DESC_bLength];
   1583a:	781b      	ldrb	r3, [r3, #0]
   1583c:	e0e3      	b.n	15a06 <usb_handle_standard_request+0x24a>
			data[0] = usb_dev.configuration;
   1583e:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
   15842:	7013      	strb	r3, [r2, #0]
				*len = 1;
   15844:	2301      	movs	r3, #1
   15846:	e0de      	b.n	15a06 <usb_handle_standard_request+0x24a>
		switch (setup->bRequest) {
   15848:	2b05      	cmp	r3, #5
   1584a:	d011      	beq.n	15870 <usb_handle_standard_request+0xb4>
   1584c:	2b09      	cmp	r3, #9
   1584e:	d1e7      	bne.n	15820 <usb_handle_standard_request+0x64>
	if (setup->wValue == 0U) {
   15850:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   15852:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	if (setup->wValue == 0U) {
   15854:	2b00      	cmp	r3, #0
   15856:	d132      	bne.n	158be <usb_handle_standard_request+0x102>
		usb_reset_alt_setting();
   15858:	f7ff feb6 	bl	155c8 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   1585c:	8863      	ldrh	r3, [r4, #2]
   1585e:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
		if (usb_dev.status_callback) {
   15862:	69eb      	ldr	r3, [r5, #28]
   15864:	2b00      	cmp	r3, #0
   15866:	d0cd      	beq.n	15804 <usb_handle_standard_request+0x48>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   15868:	4969      	ldr	r1, [pc, #420]	; (15a10 <usb_handle_standard_request+0x254>)
   1586a:	2003      	movs	r0, #3
   1586c:	4798      	blx	r3
   1586e:	e7c9      	b.n	15804 <usb_handle_standard_request+0x48>
			return !usb_dc_set_address(setup->wValue);
   15870:	78a0      	ldrb	r0, [r4, #2]
   15872:	f00b fe0f 	bl	21494 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   15876:	2800      	cmp	r0, #0
   15878:	d0c4      	beq.n	15804 <usb_handle_standard_request+0x48>
   1587a:	e7d1      	b.n	15820 <usb_handle_standard_request+0x64>
		switch (p[DESC_bDescriptorType]) {
   1587c:	7873      	ldrb	r3, [r6, #1]
   1587e:	2b04      	cmp	r3, #4
   15880:	d010      	beq.n	158a4 <usb_handle_standard_request+0xe8>
   15882:	2b05      	cmp	r3, #5
   15884:	d011      	beq.n	158aa <usb_handle_standard_request+0xee>
   15886:	2b02      	cmp	r3, #2
   15888:	d104      	bne.n	15894 <usb_handle_standard_request+0xd8>
			cur_config = p[CONF_DESC_bConfigurationValue];
   1588a:	7977      	ldrb	r7, [r6, #5]
			if (cur_config == setup->wValue) {
   1588c:	8863      	ldrh	r3, [r4, #2]
				found = true;
   1588e:	42bb      	cmp	r3, r7
   15890:	bf08      	it	eq
   15892:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   15894:	7833      	ldrb	r3, [r6, #0]
   15896:	441e      	add	r6, r3
	while (p[DESC_bLength] != 0U) {
   15898:	7833      	ldrb	r3, [r6, #0]
   1589a:	2b00      	cmp	r3, #0
   1589c:	d1ee      	bne.n	1587c <usb_handle_standard_request+0xc0>
	if (found) {
   1589e:	2800      	cmp	r0, #0
   158a0:	d0be      	beq.n	15820 <usb_handle_standard_request+0x64>
   158a2:	e7d9      	b.n	15858 <usb_handle_standard_request+0x9c>
			cur_alt_setting =
   158a4:	f896 8003 	ldrb.w	r8, [r6, #3]
			break;
   158a8:	e7f4      	b.n	15894 <usb_handle_standard_request+0xd8>
			if ((cur_config != setup->wValue) ||
   158aa:	8863      	ldrh	r3, [r4, #2]
   158ac:	42bb      	cmp	r3, r7
   158ae:	d1f1      	bne.n	15894 <usb_handle_standard_request+0xd8>
   158b0:	f1b8 0f00 	cmp.w	r8, #0
   158b4:	d1ee      	bne.n	15894 <usb_handle_standard_request+0xd8>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   158b6:	4630      	mov	r0, r6
   158b8:	f7ff ff3e 	bl	15738 <set_endpoint>
			break;
   158bc:	e7ea      	b.n	15894 <usb_handle_standard_request+0xd8>
	uint8_t cur_config = 0xFF;
   158be:	27ff      	movs	r7, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   158c0:	46b8      	mov	r8, r7
   158c2:	e7e9      	b.n	15898 <usb_handle_standard_request+0xdc>
	if (!is_device_configured() ||
   158c4:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
   158c8:	f8d7 c000 	ldr.w	ip, [r7]
   158cc:	2b00      	cmp	r3, #0
   158ce:	d0a7      	beq.n	15820 <usb_handle_standard_request+0x64>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   158d0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   158d2:	88a2      	ldrh	r2, [r4, #4]
   158d4:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   158d8:	463b      	mov	r3, r7
	while (p[DESC_bLength] != 0U) {
   158da:	7818      	ldrb	r0, [r3, #0]
   158dc:	2800      	cmp	r0, #0
   158de:	d09f      	beq.n	15820 <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   158e0:	7859      	ldrb	r1, [r3, #1]
   158e2:	2902      	cmp	r1, #2
   158e4:	d104      	bne.n	158f0 <usb_handle_standard_request+0x134>
			if (interface < cfg_descr->bNumInterfaces) {
   158e6:	f893 8004 	ldrb.w	r8, [r3, #4]
   158ea:	45f0      	cmp	r8, lr
   158ec:	f200 8092 	bhi.w	15a14 <usb_handle_standard_request+0x258>
		p += p[DESC_bLength];
   158f0:	4403      	add	r3, r0
   158f2:	e7f2      	b.n	158da <usb_handle_standard_request+0x11e>
			data[0] = 0U;
   158f4:	f88c 3000 	strb.w	r3, [ip]
			data[1] = 0U;
   158f8:	f88c 3001 	strb.w	r3, [ip, #1]
			*len = 2;
   158fc:	6031      	str	r1, [r6, #0]
			return true;
   158fe:	e781      	b.n	15804 <usb_handle_standard_request+0x48>
		p += p[DESC_bLength];
   15900:	441f      	add	r7, r3
   15902:	e093      	b.n	15a2c <usb_handle_standard_request+0x270>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   15904:	2b0b      	cmp	r3, #11
   15906:	d18b      	bne.n	15820 <usb_handle_standard_request+0x64>
	bool ret = false;
   15908:	2600      	movs	r6, #0
	uint8_t cur_iface = 0xFF;
   1590a:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   1590e:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
   15910:	46b2      	mov	sl, r6
   15912:	e006      	b.n	15922 <usb_handle_standard_request+0x166>
		switch (p[DESC_bDescriptorType]) {
   15914:	787b      	ldrb	r3, [r7, #1]
   15916:	2b04      	cmp	r3, #4
   15918:	d00f      	beq.n	1593a <usb_handle_standard_request+0x17e>
   1591a:	2b05      	cmp	r3, #5
   1591c:	d021      	beq.n	15962 <usb_handle_standard_request+0x1a6>
		p += p[DESC_bLength];
   1591e:	783b      	ldrb	r3, [r7, #0]
   15920:	441f      	add	r7, r3
	while (p[DESC_bLength] != 0U) {
   15922:	783b      	ldrb	r3, [r7, #0]
   15924:	2b00      	cmp	r3, #0
   15926:	d1f5      	bne.n	15914 <usb_handle_standard_request+0x158>
	if (usb_dev.status_callback) {
   15928:	69eb      	ldr	r3, [r5, #28]
   1592a:	b113      	cbz	r3, 15932 <usb_handle_standard_request+0x176>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   1592c:	4651      	mov	r1, sl
   1592e:	2007      	movs	r0, #7
   15930:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   15932:	2e00      	cmp	r6, #0
   15934:	f47f af66 	bne.w	15804 <usb_handle_standard_request+0x48>
   15938:	e772      	b.n	15820 <usb_handle_standard_request+0x64>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   1593a:	f897 8002 	ldrb.w	r8, [r7, #2]
			if (cur_iface == setup->wIndex &&
   1593e:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   15940:	f897 9003 	ldrb.w	r9, [r7, #3]
			if (cur_iface == setup->wIndex &&
   15944:	4598      	cmp	r8, r3
   15946:	d1ea      	bne.n	1591e <usb_handle_standard_request+0x162>
			    cur_alt_setting == setup->wValue) {
   15948:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
   1594a:	4599      	cmp	r9, r3
   1594c:	d1e7      	bne.n	1591e <usb_handle_standard_request+0x162>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   1594e:	f1b8 0f07 	cmp.w	r8, #7
   15952:	d81c      	bhi.n	1598e <usb_handle_standard_request+0x1d2>
		usb_dev.alt_setting[iface] = alt_setting;
   15954:	eb05 0308 	add.w	r3, r5, r8
		return true;
   15958:	46ba      	mov	sl, r7
				ret = usb_set_alt_setting(setup->wIndex,
   1595a:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
   1595e:	2601      	movs	r6, #1
   15960:	e7dd      	b.n	1591e <usb_handle_standard_request+0x162>
			if (cur_iface == setup->wIndex) {
   15962:	88a3      	ldrh	r3, [r4, #4]
   15964:	4543      	cmp	r3, r8
   15966:	d1da      	bne.n	1591e <usb_handle_standard_request+0x162>
	if (cur_alt_setting != alt_setting) {
   15968:	78a3      	ldrb	r3, [r4, #2]
   1596a:	454b      	cmp	r3, r9
   1596c:	d00a      	beq.n	15984 <usb_handle_standard_request+0x1c8>
		ret = reset_endpoint(ep_desc);
   1596e:	78be      	ldrb	r6, [r7, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   15970:	4630      	mov	r0, r6
   15972:	f000 fc11 	bl	16198 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
   15976:	4630      	mov	r0, r6
   15978:	f7ff fe10 	bl	1559c <disable_endpoint>
   1597c:	fab0 f680 	clz	r6, r0
   15980:	0976      	lsrs	r6, r6, #5
   15982:	e7cc      	b.n	1591e <usb_handle_standard_request+0x162>
		ret = set_endpoint(ep_desc);
   15984:	4638      	mov	r0, r7
   15986:	f7ff fed7 	bl	15738 <set_endpoint>
   1598a:	4606      	mov	r6, r0
   1598c:	e7c7      	b.n	1591e <usb_handle_standard_request+0x162>
   1598e:	46ba      	mov	sl, r7
	return false;
   15990:	2600      	movs	r6, #0
   15992:	e7c4      	b.n	1591e <usb_handle_standard_request+0x162>
	if (usb_reqtype_is_to_host(setup)) {
   15994:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
   15998:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   1599a:	2a00      	cmp	r2, #0
   1599c:	da18      	bge.n	159d0 <usb_handle_standard_request+0x214>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   1599e:	2b00      	cmp	r3, #0
   159a0:	f47f af3e 	bne.w	15820 <usb_handle_standard_request+0x64>
	uint8_t ep = setup->wIndex;
   159a4:	7924      	ldrb	r4, [r4, #4]
   159a6:	683f      	ldr	r7, [r7, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
   159a8:	0663      	lsls	r3, r4, #25
   159aa:	d00a      	beq.n	159c2 <usb_handle_standard_request+0x206>
   159ac:	4620      	mov	r0, r4
   159ae:	f7ff fe13 	bl	155d8 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   159b2:	2800      	cmp	r0, #0
   159b4:	f43f af34 	beq.w	15820 <usb_handle_standard_request+0x64>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   159b8:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
   159bc:	2b00      	cmp	r3, #0
   159be:	f43f af2f 	beq.w	15820 <usb_handle_standard_request+0x64>
		usb_dc_ep_is_stalled(ep, &data[0]);
   159c2:	4639      	mov	r1, r7
   159c4:	4620      	mov	r0, r4
   159c6:	f00b fe37 	bl	21638 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   159ca:	2300      	movs	r3, #0
   159cc:	707b      	strb	r3, [r7, #1]
   159ce:	e714      	b.n	157fa <usb_handle_standard_request+0x3e>
		switch (setup->bRequest) {
   159d0:	2b01      	cmp	r3, #1
   159d2:	d008      	beq.n	159e6 <usb_handle_standard_request+0x22a>
   159d4:	2b03      	cmp	r3, #3
   159d6:	f47f af23 	bne.w	15820 <usb_handle_standard_request+0x64>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   159da:	8863      	ldrh	r3, [r4, #2]
   159dc:	2b00      	cmp	r3, #0
   159de:	f47f af1f 	bne.w	15820 <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
   159e2:	2101      	movs	r1, #1
   159e4:	e003      	b.n	159ee <usb_handle_standard_request+0x232>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   159e6:	8861      	ldrh	r1, [r4, #2]
   159e8:	2900      	cmp	r1, #0
   159ea:	f47f af19 	bne.w	15820 <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
   159ee:	88a0      	ldrh	r0, [r4, #4]
   159f0:	f7ff fe7a 	bl	156e8 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   159f4:	2800      	cmp	r0, #0
   159f6:	f47f af05 	bne.w	15804 <usb_handle_standard_request+0x48>
   159fa:	e711      	b.n	15820 <usb_handle_standard_request+0x64>
		if (type == USB_DESC_CONFIGURATION) {
   159fc:	2902      	cmp	r1, #2
		*data = p;
   159fe:	603b      	str	r3, [r7, #0]
		if (type == USB_DESC_CONFIGURATION) {
   15a00:	f47f af1b 	bne.w	1583a <usb_handle_standard_request+0x7e>
			*len = (p[CONF_DESC_wTotalLength]) |
   15a04:	885b      	ldrh	r3, [r3, #2]
		*len = 2;
   15a06:	6033      	str	r3, [r6, #0]
		return true;
   15a08:	e6fc      	b.n	15804 <usb_handle_standard_request+0x48>
   15a0a:	bf00      	nop
   15a0c:	2000334c 	.word	0x2000334c
   15a10:	20003406 	.word	0x20003406
	if (usb_reqtype_is_to_host(setup)) {
   15a14:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
   15a18:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   15a1a:	2800      	cmp	r0, #0
   15a1c:	f6bf af72 	bge.w	15904 <usb_handle_standard_request+0x148>
		switch (setup->bRequest) {
   15a20:	2b00      	cmp	r3, #0
   15a22:	f43f af67 	beq.w	158f4 <usb_handle_standard_request+0x138>
   15a26:	2b0a      	cmp	r3, #10
   15a28:	f47f aefa 	bne.w	15820 <usb_handle_standard_request+0x64>
	while (p[DESC_bLength] != 0U) {
   15a2c:	783b      	ldrb	r3, [r7, #0]
   15a2e:	2b00      	cmp	r3, #0
   15a30:	f43f aef6 	beq.w	15820 <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   15a34:	7879      	ldrb	r1, [r7, #1]
   15a36:	2904      	cmp	r1, #4
   15a38:	f47f af62 	bne.w	15900 <usb_handle_standard_request+0x144>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   15a3c:	78b9      	ldrb	r1, [r7, #2]
			if (cur_iface == setup->wIndex) {
   15a3e:	428a      	cmp	r2, r1
   15a40:	f47f af5e 	bne.w	15900 <usb_handle_standard_request+0x144>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   15a44:	2a07      	cmp	r2, #7
		return usb_dev.alt_setting[iface];
   15a46:	bf96      	itet	ls
   15a48:	1952      	addls	r2, r2, r5
	return 0;
   15a4a:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   15a4c:	f892 30bb 	ldrbls.w	r3, [r2, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   15a50:	f88c 3000 	strb.w	r3, [ip]
   15a54:	e6f6      	b.n	15844 <usb_handle_standard_request+0x88>
   15a56:	bf00      	nop

00015a58 <usb_data_to_host>:
{
   15a58:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   15a5a:	4c13      	ldr	r4, [pc, #76]	; (15aa8 <usb_data_to_host+0x50>)
   15a5c:	7d23      	ldrb	r3, [r4, #20]
   15a5e:	b9cb      	cbnz	r3, 15a94 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
   15a60:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   15a62:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   15a64:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   15a66:	ab01      	add	r3, sp, #4
   15a68:	2080      	movs	r0, #128	; 0x80
   15a6a:	f015 ff39 	bl	2b8e0 <usb_write>
		usb_dev.data_buf += chunk;
   15a6e:	9a01      	ldr	r2, [sp, #4]
   15a70:	68a3      	ldr	r3, [r4, #8]
   15a72:	4413      	add	r3, r2
   15a74:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   15a76:	68e3      	ldr	r3, [r4, #12]
   15a78:	1a9b      	subs	r3, r3, r2
   15a7a:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   15a7c:	b943      	cbnz	r3, 15a90 <usb_data_to_host+0x38>
   15a7e:	b13a      	cbz	r2, 15a90 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   15a80:	6923      	ldr	r3, [r4, #16]
   15a82:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   15a84:	429a      	cmp	r2, r3
   15a86:	dd03      	ble.n	15a90 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   15a88:	069b      	lsls	r3, r3, #26
   15a8a:	d101      	bne.n	15a90 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
   15a8c:	2301      	movs	r3, #1
   15a8e:	7523      	strb	r3, [r4, #20]
}
   15a90:	b002      	add	sp, #8
   15a92:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   15a94:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   15a96:	461a      	mov	r2, r3
   15a98:	4619      	mov	r1, r3
   15a9a:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   15a9c:	7523      	strb	r3, [r4, #20]
}
   15a9e:	b002      	add	sp, #8
   15aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   15aa4:	f00b be0e 	b.w	216c4 <usb_dc_ep_write>
   15aa8:	2000334c 	.word	0x2000334c

00015aac <usb_handle_control_transfer>:
{
   15aac:	b530      	push	{r4, r5, lr}
   15aae:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   15ab0:	2300      	movs	r3, #0
{
   15ab2:	4602      	mov	r2, r0
   15ab4:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
   15ab6:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   15ab8:	2800      	cmp	r0, #0
   15aba:	d158      	bne.n	15b6e <usb_handle_control_transfer+0xc2>
   15abc:	2900      	cmp	r1, #0
   15abe:	d135      	bne.n	15b2c <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   15ac0:	2208      	movs	r2, #8
   15ac2:	460b      	mov	r3, r1
   15ac4:	eb0d 0102 	add.w	r1, sp, r2
   15ac8:	f018 fe91 	bl	2e7ee <usb_dc_ep_read>
   15acc:	2800      	cmp	r0, #0
   15ace:	da04      	bge.n	15ada <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   15ad0:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   15ad2:	f00b fd57 	bl	21584 <usb_dc_ep_set_stall>
}
   15ad6:	b005      	add	sp, #20
   15ad8:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   15ada:	4c2a      	ldr	r4, [pc, #168]	; (15b84 <usb_handle_control_transfer+0xd8>)
   15adc:	9a02      	ldr	r2, [sp, #8]
   15ade:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   15ae0:	9a03      	ldr	r2, [sp, #12]
   15ae2:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
   15ae4:	f104 0238 	add.w	r2, r4, #56	; 0x38
   15ae8:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
   15aea:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   15aee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
   15af2:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
   15af4:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
   15af6:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
   15afa:	db0a      	blt.n	15b12 <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   15afc:	2b80      	cmp	r3, #128	; 0x80
   15afe:	d904      	bls.n	15b0a <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   15b00:	2080      	movs	r0, #128	; 0x80
   15b02:	f00b fd3f 	bl	21584 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   15b06:	2000      	movs	r0, #0
   15b08:	e7e3      	b.n	15ad2 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   15b0a:	b113      	cbz	r3, 15b12 <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
   15b0c:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
   15b10:	e7e1      	b.n	15ad6 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
   15b12:	f7ff fd7d 	bl	15610 <usb_handle_request.constprop.0>
   15b16:	2800      	cmp	r0, #0
   15b18:	d0da      	beq.n	15ad0 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   15b1a:	88e2      	ldrh	r2, [r4, #6]
   15b1c:	6923      	ldr	r3, [r4, #16]
   15b1e:	429a      	cmp	r2, r3
   15b20:	bfd4      	ite	le
   15b22:	60e2      	strle	r2, [r4, #12]
   15b24:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   15b26:	f7ff ff97 	bl	15a58 <usb_data_to_host>
   15b2a:	e7d4      	b.n	15ad6 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   15b2c:	4c15      	ldr	r4, [pc, #84]	; (15b84 <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   15b2e:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
   15b32:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   15b34:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   15b36:	dc04      	bgt.n	15b42 <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   15b38:	f018 fe59 	bl	2e7ee <usb_dc_ep_read>
   15b3c:	2800      	cmp	r0, #0
   15b3e:	daca      	bge.n	15ad6 <usb_handle_control_transfer+0x2a>
   15b40:	e7c6      	b.n	15ad0 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   15b42:	462a      	mov	r2, r5
   15b44:	f018 fe53 	bl	2e7ee <usb_dc_ep_read>
   15b48:	2800      	cmp	r0, #0
   15b4a:	dbd9      	blt.n	15b00 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
   15b4c:	9a01      	ldr	r2, [sp, #4]
   15b4e:	68a3      	ldr	r3, [r4, #8]
   15b50:	4413      	add	r3, r2
   15b52:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   15b54:	68e3      	ldr	r3, [r4, #12]
   15b56:	1a9b      	subs	r3, r3, r2
   15b58:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   15b5a:	2b00      	cmp	r3, #0
   15b5c:	d1bb      	bne.n	15ad6 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   15b5e:	f104 0338 	add.w	r3, r4, #56	; 0x38
   15b62:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
   15b64:	f7ff fd54 	bl	15610 <usb_handle_request.constprop.0>
   15b68:	2800      	cmp	r0, #0
   15b6a:	d1dc      	bne.n	15b26 <usb_handle_control_transfer+0x7a>
   15b6c:	e7b0      	b.n	15ad0 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   15b6e:	2880      	cmp	r0, #128	; 0x80
   15b70:	d1b1      	bne.n	15ad6 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   15b72:	4b04      	ldr	r3, [pc, #16]	; (15b84 <usb_handle_control_transfer+0xd8>)
   15b74:	68da      	ldr	r2, [r3, #12]
   15b76:	2a00      	cmp	r2, #0
   15b78:	d1d5      	bne.n	15b26 <usb_handle_control_transfer+0x7a>
   15b7a:	7d1b      	ldrb	r3, [r3, #20]
   15b7c:	2b00      	cmp	r3, #0
   15b7e:	d1d2      	bne.n	15b26 <usb_handle_control_transfer+0x7a>
   15b80:	e7a9      	b.n	15ad6 <usb_handle_control_transfer+0x2a>
   15b82:	bf00      	nop
   15b84:	2000334c 	.word	0x2000334c

00015b88 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   15b88:	4b05      	ldr	r3, [pc, #20]	; (15ba0 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   15b8a:	4a06      	ldr	r2, [pc, #24]	; (15ba4 <usb_set_config+0x1c>)
   15b8c:	629a      	str	r2, [r3, #40]	; 0x28
   15b8e:	4a06      	ldr	r2, [pc, #24]	; (15ba8 <usb_set_config+0x20>)
   15b90:	62da      	str	r2, [r3, #44]	; 0x2c
   15b92:	4a06      	ldr	r2, [pc, #24]	; (15bac <usb_set_config+0x24>)
   15b94:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   15b96:	4a06      	ldr	r2, [pc, #24]	; (15bb0 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   15b98:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   15b9a:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
   15b9c:	2000      	movs	r0, #0
   15b9e:	4770      	bx	lr
   15ba0:	2000334c 	.word	0x2000334c
   15ba4:	000157bd 	.word	0x000157bd
   15ba8:	000154c1 	.word	0x000154c1
   15bac:	00015561 	.word	0x00015561
   15bb0:	00015501 	.word	0x00015501

00015bb4 <usb_enable>:

int usb_enable(usb_dc_status_callback status_cb)
{
   15bb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15bb8:	4604      	mov	r4, r0
	 * This should only be called once.
	 */
	LOG_DBG("lock usb_enable_lock mutex");
	k_mutex_lock(&usb_enable_lock, K_FOREVER);

	if (usb_dev.enabled == true) {
   15bba:	4d3b      	ldr	r5, [pc, #236]	; (15ca8 <usb_enable+0xf4>)
	return z_impl_k_mutex_lock(mutex, timeout);
   15bbc:	483b      	ldr	r0, [pc, #236]	; (15cac <usb_enable+0xf8>)
   15bbe:	f04f 32ff 	mov.w	r2, #4294967295
   15bc2:	f04f 33ff 	mov.w	r3, #4294967295
   15bc6:	f010 fa7d 	bl	260c4 <z_impl_k_mutex_lock>
   15bca:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   15bce:	2e00      	cmp	r6, #0
   15bd0:	d167      	bne.n	15ca2 <usb_enable+0xee>
	usb_dev.status_callback = cb;
   15bd2:	4837      	ldr	r0, [pc, #220]	; (15cb0 <usb_enable+0xfc>)
	ret = usb_vbus_set(true);
	if (ret < 0) {
		goto out;
	}

	usb_dev.user_status_callback = status_cb;
   15bd4:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   15bd6:	61e8      	str	r0, [r5, #28]
	usb_register_status_callback(forward_status_cb);
	usb_dc_set_status_callback(forward_status_cb);
   15bd8:	f00b fee8 	bl	219ac <usb_dc_set_status_callback>

	ret = usb_dc_attach();
   15bdc:	f00b fc28 	bl	21430 <usb_dc_attach>
	if (ret < 0) {
   15be0:	1e04      	subs	r4, r0, #0
   15be2:	db42      	blt.n	15c6a <usb_enable+0xb6>
		goto out;
	}

	ret = usb_transfer_init();
   15be4:	f000 fb1a 	bl	1621c <usb_transfer_init>
	if (ret < 0) {
   15be8:	1e04      	subs	r4, r0, #0
   15bea:	db3e      	blt.n	15c6a <usb_enable+0xb6>
		goto out;
	}

	/* Configure control EP */
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   15bec:	2340      	movs	r3, #64	; 0x40
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;

	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
	ret = usb_dc_ep_configure(&ep0_cfg);
   15bee:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   15bf0:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   15bf4:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   15bf8:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   15bfc:	f00b fc8e 	bl	2151c <usb_dc_ep_configure>
	if (ret < 0) {
   15c00:	1e04      	subs	r4, r0, #0
   15c02:	db32      	blt.n	15c6a <usb_enable+0xb6>
		goto out;
	}

	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   15c04:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   15c06:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   15c08:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   15c0c:	f00b fc86 	bl	2151c <usb_dc_ep_configure>
	if (ret < 0) {
   15c10:	1e04      	subs	r4, r0, #0
   15c12:	db2a      	blt.n	15c6a <usb_enable+0xb6>
		goto out;
	}

	/* Register endpoint 0 handlers*/
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   15c14:	4927      	ldr	r1, [pc, #156]	; (15cb4 <usb_enable+0x100>)
   15c16:	4630      	mov	r0, r6
   15c18:	f00b feb4 	bl	21984 <usb_dc_ep_set_callback>
				     usb_handle_control_transfer);
	if (ret < 0) {
   15c1c:	1e04      	subs	r4, r0, #0
   15c1e:	db24      	blt.n	15c6a <usb_enable+0xb6>
		goto out;
	}

	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   15c20:	4924      	ldr	r1, [pc, #144]	; (15cb4 <usb_enable+0x100>)
   15c22:	4638      	mov	r0, r7
   15c24:	f00b feae 	bl	21984 <usb_dc_ep_set_callback>
				     usb_handle_control_transfer);
	if (ret < 0) {
   15c28:	1e04      	subs	r4, r0, #0
   15c2a:	db1e      	blt.n	15c6a <usb_enable+0xb6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   15c2c:	4c22      	ldr	r4, [pc, #136]	; (15cb8 <usb_enable+0x104>)
   15c2e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 15cbc <usb_enable+0x108>
   15c32:	4544      	cmp	r4, r8
   15c34:	d320      	bcc.n	15c78 <usb_enable+0xc4>
	if (ret < 0) {
		goto out;
	}

	/* Enable control EP */
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   15c36:	2000      	movs	r0, #0
   15c38:	f00b fd1a 	bl	21670 <usb_dc_ep_enable>
	if (ret < 0) {
   15c3c:	1e04      	subs	r4, r0, #0
   15c3e:	db14      	blt.n	15c6a <usb_enable+0xb6>
		goto out;
	}
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
   15c40:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4

	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   15c44:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
   15c46:	f043 0301 	orr.w	r3, r3, #1
   15c4a:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   15c4e:	f00b fd0f 	bl	21670 <usb_dc_ep_enable>
	if (ret < 0) {
   15c52:	1e04      	subs	r4, r0, #0
   15c54:	db09      	blt.n	15c6a <usb_enable+0xb6>
		goto out;
	}
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
   15c56:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   15c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   15c5e:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4

	usb_dev.enabled = true;
   15c62:	2301      	movs	r3, #1
   15c64:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   15c68:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   15c6a:	4810      	ldr	r0, [pc, #64]	; (15cac <usb_enable+0xf8>)
   15c6c:	f010 faa4 	bl	261b8 <z_impl_k_mutex_unlock>
out:
	LOG_DBG("unlock usb_enable_lock mutex");
	k_mutex_unlock(&usb_enable_lock);
	return ret;
}
   15c70:	4620      	mov	r0, r4
   15c72:	b002      	add	sp, #8
   15c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
   15c78:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   15c7a:	2600      	movs	r6, #0
   15c7c:	7f22      	ldrb	r2, [r4, #28]
   15c7e:	b2f3      	uxtb	r3, r6
   15c80:	429a      	cmp	r2, r3
   15c82:	d801      	bhi.n	15c88 <usb_enable+0xd4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   15c84:	3424      	adds	r4, #36	; 0x24
   15c86:	e7d4      	b.n	15c32 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   15c88:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   15c8c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   15c90:	7910      	ldrb	r0, [r2, #4]
   15c92:	f00b fe77 	bl	21984 <usb_dc_ep_set_callback>
   15c96:	3601      	adds	r6, #1
   15c98:	2800      	cmp	r0, #0
   15c9a:	d0ef      	beq.n	15c7c <usb_enable+0xc8>
   15c9c:	f04f 34ff 	mov.w	r4, #4294967295
   15ca0:	e7e3      	b.n	15c6a <usb_enable+0xb6>
		ret = -EALREADY;
   15ca2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15ca6:	e7e0      	b.n	15c6a <usb_enable+0xb6>
   15ca8:	2000334c 	.word	0x2000334c
   15cac:	20000cc0 	.word	0x20000cc0
   15cb0:	0001563d 	.word	0x0001563d
   15cb4:	00015aad 	.word	0x00015aad
   15cb8:	20000f70 	.word	0x20000f70
   15cbc:	20000fb8 	.word	0x20000fb8

00015cc0 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
{
   15cc0:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   15cc2:	4b0a      	ldr	r3, [pc, #40]	; (15cec <usb_device_init+0x2c>)
   15cc4:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   15cc8:	b94c      	cbnz	r4, 15cde <usb_device_init+0x1e>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   15cca:	f000 f855 	bl	15d78 <usb_get_device_descriptor>
	if (!device_descriptor) {
   15cce:	b148      	cbz	r0, 15ce4 <usb_device_init+0x24>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   15cd0:	f7ff ff5a 	bl	15b88 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
   15cd4:	4620      	mov	r0, r4
	}

	return 0;
}
   15cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return usb_enable(NULL);
   15cda:	f7ff bf6b 	b.w	15bb4 <usb_enable>
		return -EALREADY;
   15cde:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   15ce2:	bd10      	pop	{r4, pc}
		return -1;
   15ce4:	f04f 30ff 	mov.w	r0, #4294967295
   15ce8:	e7fb      	b.n	15ce2 <usb_device_init+0x22>
   15cea:	bf00      	nop
   15cec:	2000334c 	.word	0x2000334c

00015cf0 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   15cf0:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   15cf2:	4b1f      	ldr	r3, [pc, #124]	; (15d70 <usb_update_sn_string_descriptor+0x80>)
{
   15cf4:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   15cf6:	aa05      	add	r2, sp, #20
   15cf8:	f103 0510 	add.w	r5, r3, #16
   15cfc:	6818      	ldr	r0, [r3, #0]
   15cfe:	6859      	ldr	r1, [r3, #4]
   15d00:	4614      	mov	r4, r2
   15d02:	c403      	stmia	r4!, {r0, r1}
   15d04:	3308      	adds	r3, #8
   15d06:	42ab      	cmp	r3, r5
   15d08:	4622      	mov	r2, r4
   15d0a:	d1f7      	bne.n	15cfc <usb_update_sn_string_descriptor+0xc>
   15d0c:	781b      	ldrb	r3, [r3, #0]
   15d0e:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   15d10:	2210      	movs	r2, #16
   15d12:	2100      	movs	r1, #0
   15d14:	a801      	add	r0, sp, #4
   15d16:	f016 faed 	bl	2c2f4 <memset>
	memset(sn, 0, sizeof(sn));
   15d1a:	2212      	movs	r2, #18
   15d1c:	2100      	movs	r1, #0
   15d1e:	4815      	ldr	r0, [pc, #84]	; (15d74 <usb_update_sn_string_descriptor+0x84>)
   15d20:	f016 fae8 	bl	2c2f4 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   15d24:	2110      	movs	r1, #16
   15d26:	a801      	add	r0, sp, #4
   15d28:	f018 ff1b 	bl	2eb62 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   15d2c:	2800      	cmp	r0, #0
   15d2e:	dd1b      	ble.n	15d68 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   15d30:	2808      	cmp	r0, #8
   15d32:	bfb8      	it	lt
   15d34:	2008      	movlt	r0, #8
   15d36:	3809      	subs	r0, #9
   15d38:	ab01      	add	r3, sp, #4
   15d3a:	490e      	ldr	r1, [pc, #56]	; (15d74 <usb_update_sn_string_descriptor+0x84>)
   15d3c:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   15d3e:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   15d40:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   15d44:	ac0a      	add	r4, sp, #40	; 0x28
   15d46:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   15d4a:	f003 030f 	and.w	r3, r3, #15
   15d4e:	3328      	adds	r3, #40	; 0x28
   15d50:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
   15d52:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   15d54:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   15d58:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   15d5c:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
   15d5e:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   15d60:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
   15d62:	f101 0102 	add.w	r1, r1, #2
   15d66:	d1eb      	bne.n	15d40 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   15d68:	4802      	ldr	r0, [pc, #8]	; (15d74 <usb_update_sn_string_descriptor+0x84>)
   15d6a:	b00b      	add	sp, #44	; 0x2c
   15d6c:	bd30      	pop	{r4, r5, pc}
   15d6e:	bf00      	nop
   15d70:	000315d6 	.word	0x000315d6
   15d74:	200055e8 	.word	0x200055e8

00015d78 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
   15d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d7c:	4c64      	ldr	r4, [pc, #400]	; (15f10 <usb_get_device_descriptor+0x198>)
   15d7e:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
   15d80:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
   15d82:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   15d86:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
   15d88:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
   15d8a:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
   15d8c:	7823      	ldrb	r3, [r4, #0]
   15d8e:	b92b      	cbnz	r3, 15d9c <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
   15d90:	4b60      	ldr	r3, [pc, #384]	; (15f14 <usb_get_device_descriptor+0x19c>)
   15d92:	3402      	adds	r4, #2
   15d94:	429c      	cmp	r4, r3
   15d96:	d1f3      	bne.n	15d80 <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   15d98:	485d      	ldr	r0, [pc, #372]	; (15f10 <usb_get_device_descriptor+0x198>)
   15d9a:	e01c      	b.n	15dd6 <usb_get_device_descriptor+0x5e>
		switch (head->bDescriptorType) {
   15d9c:	7863      	ldrb	r3, [r4, #1]
   15d9e:	2b05      	cmp	r3, #5
   15da0:	d805      	bhi.n	15dae <usb_get_device_descriptor+0x36>
   15da2:	e8df f003 	tbb	[pc, r3]
   15da6:	047b      	.short	0x047b
   15da8:	25077b03 	.word	0x25077b03
   15dac:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   15dae:	7823      	ldrb	r3, [r4, #0]
   15db0:	441c      	add	r4, r3
   15db2:	e7eb      	b.n	15d8c <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
   15db4:	78e3      	ldrb	r3, [r4, #3]
   15db6:	2b00      	cmp	r3, #0
   15db8:	d1f9      	bne.n	15dae <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
   15dba:	78a3      	ldrb	r3, [r4, #2]
   15dbc:	b173      	cbz	r3, 15ddc <usb_get_device_descriptor+0x64>
			numof_ifaces++;
   15dbe:	f109 0901 	add.w	r9, r9, #1
   15dc2:	fa5f f989 	uxtb.w	r9, r9
			break;
   15dc6:	e7f2      	b.n	15dae <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
   15dc8:	686a      	ldr	r2, [r5, #4]
   15dca:	4294      	cmp	r4, r2
   15dcc:	d009      	beq.n	15de2 <usb_get_device_descriptor+0x6a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   15dce:	3524      	adds	r5, #36	; 0x24
   15dd0:	429d      	cmp	r5, r3
   15dd2:	d3f9      	bcc.n	15dc8 <usb_get_device_descriptor+0x50>
		return NULL;
   15dd4:	2000      	movs	r0, #0
}
   15dd6:	b005      	add	sp, #20
   15dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   15ddc:	4d4e      	ldr	r5, [pc, #312]	; (15f18 <usb_get_device_descriptor+0x1a0>)
   15dde:	4b4f      	ldr	r3, [pc, #316]	; (15f1c <usb_get_device_descriptor+0x1a4>)
   15de0:	e7f6      	b.n	15dd0 <usb_get_device_descriptor+0x58>
				if (cfg_data->interface_config) {
   15de2:	68ab      	ldr	r3, [r5, #8]
   15de4:	2b00      	cmp	r3, #0
   15de6:	d0ea      	beq.n	15dbe <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
   15de8:	4649      	mov	r1, r9
   15dea:	4620      	mov	r0, r4
   15dec:	4798      	blx	r3
   15dee:	e7e6      	b.n	15dbe <usb_get_device_descriptor+0x46>
			if (!cfg_data) {
   15df0:	2d00      	cmp	r5, #0
   15df2:	d0ef      	beq.n	15dd4 <usb_get_device_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   15df4:	2300      	movs	r3, #0
   15df6:	2101      	movs	r1, #1
   15df8:	7f2a      	ldrb	r2, [r5, #28]
   15dfa:	4293      	cmp	r3, r2
   15dfc:	d2ea      	bcs.n	15dd4 <usb_get_device_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   15dfe:	6a2a      	ldr	r2, [r5, #32]
   15e00:	78a7      	ldrb	r7, [r4, #2]
   15e02:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   15e06:	7910      	ldrb	r0, [r2, #4]
   15e08:	4287      	cmp	r7, r0
   15e0a:	d001      	beq.n	15e10 <usb_get_device_descriptor+0x98>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   15e0c:	3301      	adds	r3, #1
   15e0e:	e7f3      	b.n	15df8 <usb_get_device_descriptor+0x80>
   15e10:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   15e12:	78e0      	ldrb	r0, [r4, #3]
   15e14:	f000 0003 	and.w	r0, r0, #3
   15e18:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   15e1c:	7920      	ldrb	r0, [r4, #4]
   15e1e:	f894 c005 	ldrb.w	ip, [r4, #5]
   15e22:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   15e26:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   15e2a:	f994 0002 	ldrsb.w	r0, [r4, #2]
   15e2e:	2800      	cmp	r0, #0
   15e30:	fa5f f887 	uxtb.w	r8, r7
   15e34:	da27      	bge.n	15e86 <usb_get_device_descriptor+0x10e>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   15e36:	f107 0010 	add.w	r0, r7, #16
   15e3a:	fa01 f000 	lsl.w	r0, r1, r0
   15e3e:	ea10 0f0b 	tst.w	r0, fp
   15e42:	d127      	bne.n	15e94 <usb_get_device_descriptor+0x11c>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   15e44:	f048 0080 	orr.w	r0, r8, #128	; 0x80
   15e48:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   15e4c:	a802      	add	r0, sp, #8
   15e4e:	e9cd 3200 	strd	r3, r2, [sp]
   15e52:	f00b fb31 	bl	214b8 <usb_dc_ep_check_cap>
   15e56:	e9dd 3200 	ldrd	r3, r2, [sp]
   15e5a:	2101      	movs	r1, #1
   15e5c:	b9d0      	cbnz	r0, 15e94 <usb_get_device_descriptor+0x11c>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   15e5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15e62:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   15e64:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
   15e68:	bf18      	it	ne
   15e6a:	f108 0810 	addne.w	r8, r8, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   15e6e:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
   15e70:	bf18      	it	ne
   15e72:	fa5f f888 	uxtbne.w	r8, r8
   15e76:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
   15e78:	bf0c      	ite	eq
   15e7a:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
   15e7c:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
   15e80:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
   15e84:	e793      	b.n	15dae <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
   15e86:	fa01 f007 	lsl.w	r0, r1, r7
   15e8a:	ea10 0f0b 	tst.w	r0, fp
   15e8e:	d101      	bne.n	15e94 <usb_get_device_descriptor+0x11c>
   15e90:	4640      	mov	r0, r8
   15e92:	e7d9      	b.n	15e48 <usb_get_device_descriptor+0xd0>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   15e94:	3701      	adds	r7, #1
   15e96:	2f10      	cmp	r7, #16
   15e98:	d1bb      	bne.n	15e12 <usb_get_device_descriptor+0x9a>
   15e9a:	e7b7      	b.n	15e0c <usb_get_device_descriptor+0x94>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   15e9c:	2e03      	cmp	r6, #3
   15e9e:	d11d      	bne.n	15edc <usb_get_device_descriptor+0x164>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   15ea0:	f7ff ff26 	bl	15cf0 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   15ea4:	4607      	mov	r7, r0
   15ea6:	b168      	cbz	r0, 15ec4 <usb_get_device_descriptor+0x14c>
	runtime_sn_len = strlen(runtime_sn);
   15ea8:	f016 f9c2 	bl	2c230 <strlen>
	if (!runtime_sn_len) {
   15eac:	4680      	mov	r8, r0
   15eae:	b148      	cbz	r0, 15ec4 <usb_get_device_descriptor+0x14c>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   15eb0:	481b      	ldr	r0, [pc, #108]	; (15f20 <usb_get_device_descriptor+0x1a8>)
   15eb2:	f016 f9bd 	bl	2c230 <strlen>
	if (runtime_sn_len != default_sn_len) {
   15eb6:	4580      	cmp	r8, r0
   15eb8:	d104      	bne.n	15ec4 <usb_get_device_descriptor+0x14c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   15eba:	4642      	mov	r2, r8
   15ebc:	4639      	mov	r1, r7
   15ebe:	1ca0      	adds	r0, r4, #2
   15ec0:	f016 fa0d 	bl	2c2de <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   15ec4:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   15ec6:	f06f 0102 	mvn.w	r1, #2
   15eca:	18e2      	adds	r2, r4, r3
   15ecc:	1b09      	subs	r1, r1, r4
   15ece:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   15ed2:	42d1      	cmn	r1, r2
   15ed4:	d513      	bpl.n	15efe <usb_get_device_descriptor+0x186>
			str_descr_idx += 1U;
   15ed6:	3601      	adds	r6, #1
   15ed8:	b2f6      	uxtb	r6, r6
			break;
   15eda:	e768      	b.n	15dae <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
   15edc:	2e00      	cmp	r6, #0
   15ede:	d1f1      	bne.n	15ec4 <usb_get_device_descriptor+0x14c>
				if (!cfg_descr) {
   15ee0:	f1ba 0f00 	cmp.w	sl, #0
   15ee4:	f43f af76 	beq.w	15dd4 <usb_get_device_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   15ee8:	eba4 030a 	sub.w	r3, r4, sl
	dst[0] = val;
   15eec:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
   15ef0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15ef4:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   15ef8:	f88a 9004 	strb.w	r9, [sl, #4]
   15efc:	e7eb      	b.n	15ed6 <usb_get_device_descriptor+0x15e>
		buf[i] = 0U;
   15efe:	f04f 0000 	mov.w	r0, #0
   15f02:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   15f06:	f813 0901 	ldrb.w	r0, [r3], #-1
   15f0a:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
   15f0e:	e7e0      	b.n	15ed2 <usb_get_device_descriptor+0x15a>
   15f10:	20000e54 	.word	0x20000e54
   15f14:	20000f6d 	.word	0x20000f6d
   15f18:	20000f70 	.word	0x20000f70
   15f1c:	20000fb8 	.word	0x20000fb8
   15f20:	000315d6 	.word	0x000315d6

00015f24 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   15f24:	b510      	push	{r4, lr}
   15f26:	4b09      	ldr	r3, [pc, #36]	; (15f4c <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   15f28:	2100      	movs	r1, #0
   15f2a:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   15f2c:	781c      	ldrb	r4, [r3, #0]
   15f2e:	4284      	cmp	r4, r0
   15f30:	d105      	bne.n	15f3e <usb_ep_get_transfer+0x1a>
   15f32:	685c      	ldr	r4, [r3, #4]
   15f34:	b11c      	cbz	r4, 15f3e <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
   15f36:	2348      	movs	r3, #72	; 0x48
   15f38:	fb03 2001 	mla	r0, r3, r1, r2
		}
	}

	return NULL;
}
   15f3c:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   15f3e:	3101      	adds	r1, #1
   15f40:	2904      	cmp	r1, #4
   15f42:	f103 0348 	add.w	r3, r3, #72	; 0x48
   15f46:	d1f1      	bne.n	15f2c <usb_ep_get_transfer+0x8>
	return NULL;
   15f48:	2000      	movs	r0, #0
   15f4a:	e7f7      	b.n	15f3c <usb_ep_get_transfer+0x18>
   15f4c:	20003414 	.word	0x20003414

00015f50 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   15f50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   15f54:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
   15f58:	f810 6c34 	ldrb.w	r6, [r0, #-52]
	if (trans->status != -EBUSY) {
   15f5c:	3310      	adds	r3, #16
{
   15f5e:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   15f60:	d110      	bne.n	15f84 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   15f62:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
   15f64:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
   15f68:	0799      	lsls	r1, r3, #30
   15f6a:	d53c      	bpl.n	15fe6 <usb_transfer_work+0x96>
		if (!trans->bsize) {
   15f6c:	bb02      	cbnz	r2, 15fb0 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   15f6e:	f013 0304 	ands.w	r3, r3, #4
   15f72:	d104      	bne.n	15f7e <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   15f74:	461a      	mov	r2, r3
   15f76:	4619      	mov	r1, r3
   15f78:	4630      	mov	r0, r6
   15f7a:	f015 fcb1 	bl	2b8e0 <usb_write>
			}
			trans->status = 0;
   15f7e:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   15f80:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   15f84:	f854 3c30 	ldr.w	r3, [r4, #-48]
   15f88:	3310      	adds	r3, #16
   15f8a:	d00e      	beq.n	15faa <usb_transfer_work+0x5a>
   15f8c:	f854 5c20 	ldr.w	r5, [r4, #-32]
   15f90:	b15d      	cbz	r5, 15faa <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   15f92:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   15f96:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   15f9a:	f019 fa80 	bl	2f49e <k_is_in_isr>
   15f9e:	2800      	cmp	r0, #0
   15fa0:	d04c      	beq.n	1603c <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   15fa2:	482c      	ldr	r0, [pc, #176]	; (16054 <usb_transfer_work+0x104>)
   15fa4:	4621      	mov	r1, r4
   15fa6:	f019 fbe4 	bl	2f772 <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
   15faa:	b002      	add	sp, #8
   15fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   15fb0:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   15fb4:	ab01      	add	r3, sp, #4
   15fb6:	4630      	mov	r0, r6
   15fb8:	f015 fc92 	bl	2b8e0 <usb_write>
		if (ret) {
   15fbc:	b110      	cbz	r0, 15fc4 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   15fbe:	f06f 0315 	mvn.w	r3, #21
   15fc2:	e7dd      	b.n	15f80 <usb_transfer_work+0x30>
		trans->buffer += bytes;
   15fc4:	9a01      	ldr	r2, [sp, #4]
   15fc6:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   15fca:	4413      	add	r3, r2
   15fcc:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   15fd0:	f854 3c28 	ldr.w	r3, [r4, #-40]
   15fd4:	1a9b      	subs	r3, r3, r2
   15fd6:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   15fda:	f854 3c24 	ldr.w	r3, [r4, #-36]
   15fde:	4413      	add	r3, r2
   15fe0:	f844 3c24 	str.w	r3, [r4, #-36]
   15fe4:	e7ce      	b.n	15f84 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   15fe6:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   15fea:	ab01      	add	r3, sp, #4
   15fec:	4630      	mov	r0, r6
   15fee:	f00b fc0b 	bl	21808 <usb_dc_ep_read_wait>
		if (ret) {
   15ff2:	2800      	cmp	r0, #0
   15ff4:	d1e3      	bne.n	15fbe <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   15ff6:	9d01      	ldr	r5, [sp, #4]
   15ff8:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   15ffc:	442b      	add	r3, r5
   15ffe:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   16002:	f854 3c28 	ldr.w	r3, [r4, #-40]
   16006:	1b5b      	subs	r3, r3, r5
   16008:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   1600c:	f854 3c24 	ldr.w	r3, [r4, #-36]
   16010:	442b      	add	r3, r5
   16012:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   16016:	2d00      	cmp	r5, #0
   16018:	d0b1      	beq.n	15f7e <usb_transfer_work+0x2e>
   1601a:	4630      	mov	r0, r6
   1601c:	f00b fccc 	bl	219b8 <usb_dc_ep_mps>
   16020:	fbb5 f3f0 	udiv	r3, r5, r0
   16024:	fb03 5510 	mls	r5, r3, r0, r5
   16028:	2d00      	cmp	r5, #0
   1602a:	d1a8      	bne.n	15f7e <usb_transfer_work+0x2e>
   1602c:	f854 3c28 	ldr.w	r3, [r4, #-40]
   16030:	2b00      	cmp	r3, #0
   16032:	d0a4      	beq.n	15f7e <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   16034:	4630      	mov	r0, r6
   16036:	f00b fc4d 	bl	218d4 <usb_dc_ep_read_continue>
   1603a:	e7a3      	b.n	15f84 <usb_transfer_work+0x34>
		trans->cb = NULL;
   1603c:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
   16040:	f1a4 0018 	sub.w	r0, r4, #24
   16044:	f010 f928 	bl	26298 <z_impl_k_sem_give>
		cb(ep, tsize, priv);
   16048:	4642      	mov	r2, r8
   1604a:	4639      	mov	r1, r7
   1604c:	4630      	mov	r0, r6
   1604e:	47a8      	blx	r5
   16050:	e7ab      	b.n	15faa <usb_transfer_work+0x5a>
   16052:	bf00      	nop
   16054:	20002150 	.word	0x20002150

00016058 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   16058:	1e4b      	subs	r3, r1, #1
   1605a:	2b01      	cmp	r3, #1
{
   1605c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1605e:	4606      	mov	r6, r0
   16060:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   16062:	d80f      	bhi.n	16084 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   16064:	f7ff ff5e 	bl	15f24 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
   16068:	4604      	mov	r4, r0
   1606a:	b968      	cbnz	r0, 16088 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
   1606c:	2d01      	cmp	r5, #1
   1606e:	d109      	bne.n	16084 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
   16070:	ab01      	add	r3, sp, #4
   16072:	2201      	movs	r2, #1
   16074:	f10d 0103 	add.w	r1, sp, #3
   16078:	4630      	mov	r0, r6
   1607a:	f00b fbc5 	bl	21808 <usb_dc_ep_read_wait>
			} while (bytes);
   1607e:	9b01      	ldr	r3, [sp, #4]
   16080:	2b00      	cmp	r3, #0
   16082:	d1f5      	bne.n	16070 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
   16084:	b002      	add	sp, #8
   16086:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   16088:	f019 fa09 	bl	2f49e <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   1608c:	f104 0134 	add.w	r1, r4, #52	; 0x34
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   16090:	b108      	cbz	r0, 16096 <usb_transfer_ep_callback+0x3e>
   16092:	2d01      	cmp	r5, #1
   16094:	d105      	bne.n	160a2 <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
   16096:	4608      	mov	r0, r1
}
   16098:	b002      	add	sp, #8
   1609a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
   1609e:	f7ff bf57 	b.w	15f50 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   160a2:	4803      	ldr	r0, [pc, #12]	; (160b0 <usb_transfer_ep_callback+0x58>)
}
   160a4:	b002      	add	sp, #8
   160a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   160aa:	f019 bb62 	b.w	2f772 <k_work_submit_to_queue>
   160ae:	bf00      	nop
   160b0:	20002150 	.word	0x20002150

000160b4 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
   160b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160b8:	4680      	mov	r8, r0
   160ba:	9100      	str	r1, [sp, #0]
   160bc:	4617      	mov	r7, r2
   160be:	4699      	mov	r9, r3
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
   160c0:	f015 fc56 	bl	2b970 <usb_transfer_is_busy>
   160c4:	4604      	mov	r4, r0
   160c6:	2800      	cmp	r0, #0
   160c8:	d15d      	bne.n	16186 <usb_transfer+0xd2>
	__asm__ volatile(
   160ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   160ce:	f3ef 8b11 	mrs	fp, BASEPRI
   160d2:	f383 8812 	msr	BASEPRI_MAX, r3
   160d6:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   160da:	492c      	ldr	r1, [pc, #176]	; (1618c <usb_transfer+0xd8>)
	return z_impl_k_sem_take(sem, timeout);
   160dc:	2200      	movs	r2, #0
   160de:	4608      	mov	r0, r1
   160e0:	2300      	movs	r3, #0
   160e2:	9101      	str	r1, [sp, #4]
   160e4:	f010 f8fe 	bl	262e4 <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
   160e8:	9901      	ldr	r1, [sp, #4]
   160ea:	b968      	cbnz	r0, 16108 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
   160ec:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 16190 <usb_transfer+0xdc>
   160f0:	2248      	movs	r2, #72	; 0x48
   160f2:	4362      	muls	r2, r4
   160f4:	eb0a 0502 	add.w	r5, sl, r2
   160f8:	686e      	ldr	r6, [r5, #4]
   160fa:	f116 0f10 	cmn.w	r6, #16
   160fe:	d112      	bne.n	16126 <usb_transfer+0x72>
	z_impl_k_sem_give(sem);
   16100:	4608      	mov	r0, r1
   16102:	f010 f8c9 	bl	26298 <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
   16106:	e006      	b.n	16116 <usb_transfer+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   16108:	3401      	adds	r4, #1
   1610a:	2c04      	cmp	r4, #4
   1610c:	f101 0148 	add.w	r1, r1, #72	; 0x48
   16110:	d1e4      	bne.n	160dc <usb_transfer+0x28>
		ret = -ENOMEM;
   16112:	f06f 060b 	mvn.w	r6, #11
	__asm__ volatile(
   16116:	f38b 8811 	msr	BASEPRI, fp
   1611a:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
   1611e:	4630      	mov	r0, r6
   16120:	b003      	add	sp, #12
   16122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->ep = ep;
   16126:	f80a 8002 	strb.w	r8, [sl, r2]
	trans->cb = cb;
   1612a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	trans->buffer = data;
   1612c:	9b00      	ldr	r3, [sp, #0]
	trans->cb = cb;
   1612e:	616a      	str	r2, [r5, #20]
	trans->priv = cb_data;
   16130:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	trans->tsize = 0;
   16132:	6128      	str	r0, [r5, #16]
	trans->priv = cb_data;
   16134:	61aa      	str	r2, [r5, #24]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   16136:	4640      	mov	r0, r8
	trans->status = -EBUSY;
   16138:	f06f 020f 	mvn.w	r2, #15
	trans->bsize = dlen;
   1613c:	e9c5 3702 	strd	r3, r7, [r5, #8]
	trans->flags = flags;
   16140:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
	trans->status = -EBUSY;
   16144:	606a      	str	r2, [r5, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   16146:	f00b fc37 	bl	219b8 <usb_dc_ep_mps>
   1614a:	b158      	cbz	r0, 16164 <usb_transfer+0xb0>
   1614c:	4640      	mov	r0, r8
   1614e:	f00b fc33 	bl	219b8 <usb_dc_ep_mps>
   16152:	fbb7 f2f0 	udiv	r2, r7, r0
   16156:	fb02 7710 	mls	r7, r2, r0, r7
   1615a:	b11f      	cbz	r7, 16164 <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
   1615c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   1615e:	f042 0204 	orr.w	r2, r2, #4
   16162:	646a      	str	r2, [r5, #68]	; 0x44
	if (flags & USB_TRANS_WRITE) {
   16164:	f019 0f02 	tst.w	r9, #2
   16168:	d008      	beq.n	1617c <usb_transfer+0xc8>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   1616a:	2248      	movs	r2, #72	; 0x48
   1616c:	fb02 a104 	mla	r1, r2, r4, sl
   16170:	4808      	ldr	r0, [pc, #32]	; (16194 <usb_transfer+0xe0>)
   16172:	3134      	adds	r1, #52	; 0x34
   16174:	f019 fafd 	bl	2f772 <k_work_submit_to_queue>
	int key, ret = 0;
   16178:	2600      	movs	r6, #0
   1617a:	e7cc      	b.n	16116 <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
   1617c:	4640      	mov	r0, r8
   1617e:	f00b fba9 	bl	218d4 <usb_dc_ep_read_continue>
   16182:	4606      	mov	r6, r0
   16184:	e7c7      	b.n	16116 <usb_transfer+0x62>
		return -EBUSY;
   16186:	f06f 060f 	mvn.w	r6, #15
   1618a:	e7c8      	b.n	1611e <usb_transfer+0x6a>
   1618c:	20003430 	.word	0x20003430
   16190:	20003414 	.word	0x20003414
   16194:	20002150 	.word	0x20002150

00016198 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
   16198:	b510      	push	{r4, lr}
	__asm__ volatile(
   1619a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1619e:	f3ef 8411 	mrs	r4, BASEPRI
   161a2:	f383 8812 	msr	BASEPRI_MAX, r3
   161a6:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   161aa:	f7ff febb 	bl	15f24 <usb_ep_get_transfer>
	if (!trans) {
   161ae:	b150      	cbz	r0, 161c6 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   161b0:	6843      	ldr	r3, [r0, #4]
   161b2:	3310      	adds	r3, #16
   161b4:	d107      	bne.n	161c6 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   161b6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   161ba:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   161bc:	f100 0134 	add.w	r1, r0, #52	; 0x34
   161c0:	4803      	ldr	r0, [pc, #12]	; (161d0 <usb_cancel_transfer+0x38>)
   161c2:	f019 fad6 	bl	2f772 <k_work_submit_to_queue>
	__asm__ volatile(
   161c6:	f384 8811 	msr	BASEPRI, r4
   161ca:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   161ce:	bd10      	pop	{r4, pc}
   161d0:	20002150 	.word	0x20002150

000161d4 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   161d4:	b570      	push	{r4, r5, r6, lr}
   161d6:	4c0f      	ldr	r4, [pc, #60]	; (16214 <usb_cancel_transfers+0x40>)
   161d8:	2504      	movs	r5, #4
	__asm__ volatile(
   161da:	f04f 0340 	mov.w	r3, #64	; 0x40
   161de:	f3ef 8611 	mrs	r6, BASEPRI
   161e2:	f383 8812 	msr	BASEPRI_MAX, r3
   161e6:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
   161ea:	6863      	ldr	r3, [r4, #4]
   161ec:	3310      	adds	r3, #16
   161ee:	d107      	bne.n	16200 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
   161f0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   161f4:	4808      	ldr	r0, [pc, #32]	; (16218 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
   161f6:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   161f8:	f104 0134 	add.w	r1, r4, #52	; 0x34
   161fc:	f019 fab9 	bl	2f772 <k_work_submit_to_queue>
	__asm__ volatile(
   16200:	f386 8811 	msr	BASEPRI, r6
   16204:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   16208:	3d01      	subs	r5, #1
   1620a:	f104 0448 	add.w	r4, r4, #72	; 0x48
   1620e:	d1e4      	bne.n	161da <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   16210:	bd70      	pop	{r4, r5, r6, pc}
   16212:	bf00      	nop
   16214:	20003414 	.word	0x20003414
   16218:	20002150 	.word	0x20002150

0001621c <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   1621c:	b570      	push	{r4, r5, r6, lr}
   1621e:	4c0a      	ldr	r4, [pc, #40]	; (16248 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   16220:	4e0a      	ldr	r6, [pc, #40]	; (1624c <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   16222:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   16224:	4631      	mov	r1, r6
   16226:	4620      	mov	r0, r4
   16228:	f019 fa76 	bl	2f718 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1622c:	2201      	movs	r2, #1
   1622e:	f1a4 0018 	sub.w	r0, r4, #24
   16232:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   16234:	3501      	adds	r5, #1
   16236:	f019 f9ec 	bl	2f612 <z_impl_k_sem_init>
   1623a:	2d04      	cmp	r5, #4
   1623c:	f104 0448 	add.w	r4, r4, #72	; 0x48
   16240:	d1f0      	bne.n	16224 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   16242:	2000      	movs	r0, #0
   16244:	bd70      	pop	{r4, r5, r6, pc}
   16246:	bf00      	nop
   16248:	20003448 	.word	0x20003448
   1624c:	00015f51 	.word	0x00015f51

00016250 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
   16250:	b570      	push	{r4, r5, r6, lr}
   16252:	4604      	mov	r4, r0
   16254:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   16256:	7901      	ldrb	r1, [r0, #4]
   16258:	4812      	ldr	r0, [pc, #72]	; (162a4 <cdc_acm_class_handle_req+0x54>)
{
   1625a:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   1625c:	f015 fb64 	bl	2b928 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
   16260:	b1e8      	cbz	r0, 1629e <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
   16262:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
   16266:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
   16268:	2a00      	cmp	r2, #0
   1626a:	db11      	blt.n	16290 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
   1626c:	2b20      	cmp	r3, #32
   1626e:	d004      	beq.n	1627a <cdc_acm_class_handle_req+0x2a>
   16270:	2b22      	cmp	r3, #34	; 0x22
   16272:	d009      	beq.n	16288 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
   16274:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16278:	e005      	b.n	16286 <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
   1627a:	6829      	ldr	r1, [r5, #0]
   1627c:	2207      	movs	r2, #7
   1627e:	3810      	subs	r0, #16
   16280:	f016 f82d 	bl	2c2de <memcpy>
			return 0;
   16284:	2000      	movs	r0, #0
}
   16286:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
   16288:	8863      	ldrh	r3, [r4, #2]
   1628a:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
   1628e:	e7f9      	b.n	16284 <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
   16290:	2b21      	cmp	r3, #33	; 0x21
   16292:	d1ef      	bne.n	16274 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
   16294:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
   16296:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
   16298:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
   1629a:	6033      	str	r3, [r6, #0]
			return 0;
   1629c:	e7f2      	b.n	16284 <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
   1629e:	f06f 0012 	mvn.w	r0, #18
   162a2:	e7f0      	b.n	16286 <cdc_acm_class_handle_req+0x36>
   162a4:	20003534 	.word	0x20003534

000162a8 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
   162a8:	b508      	push	{r3, lr}
   162aa:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
   162ac:	4803      	ldr	r0, [pc, #12]	; (162bc <cdc_acm_int_in+0x14>)
   162ae:	f015 fb49 	bl	2b944 <usb_get_dev_data_by_ep>
	if (common == NULL) {
   162b2:	b110      	cbz	r0, 162ba <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
   162b4:	2301      	movs	r3, #1
   162b6:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
   162ba:	bd08      	pop	{r3, pc}
   162bc:	20003534 	.word	0x20003534

000162c0 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   162c0:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
   162c2:	2301      	movs	r3, #1
   162c4:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
   162c8:	680b      	ldr	r3, [r1, #0]
   162ca:	b133      	cbz	r3, 162da <cdc_acm_irq_rx_enable+0x1a>
   162cc:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
   162d0:	b11b      	cbz	r3, 162da <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   162d2:	4802      	ldr	r0, [pc, #8]	; (162dc <cdc_acm_irq_rx_enable+0x1c>)
   162d4:	3108      	adds	r1, #8
   162d6:	f019 ba4c 	b.w	2f772 <k_work_submit_to_queue>
	}
}
   162da:	4770      	bx	lr
   162dc:	20002150 	.word	0x20002150

000162e0 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   162e0:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
   162e2:	2301      	movs	r3, #1
   162e4:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
   162e8:	680b      	ldr	r3, [r1, #0]
   162ea:	b133      	cbz	r3, 162fa <cdc_acm_irq_tx_enable+0x1a>
   162ec:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
   162f0:	b11b      	cbz	r3, 162fa <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   162f2:	4802      	ldr	r0, [pc, #8]	; (162fc <cdc_acm_irq_tx_enable+0x1c>)
   162f4:	3108      	adds	r1, #8
   162f6:	f019 ba3c 	b.w	2f772 <k_work_submit_to_queue>
}
   162fa:	4770      	bx	lr
   162fc:	20002150 	.word	0x20002150

00016300 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
   16300:	4a0d      	ldr	r2, [pc, #52]	; (16338 <cdc_acm_reset_port+0x38>)
{
   16302:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
   16304:	2100      	movs	r1, #0
   16306:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
   1630a:	6810      	ldr	r0, [r2, #0]
   1630c:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
   16310:	8890      	ldrh	r0, [r2, #4]
   16312:	7992      	ldrb	r2, [r2, #6]
   16314:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
   16318:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
   1631c:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
   16320:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
	dev_data->configured = false;
   16324:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
	dev_data->rx_paused = false;
   16328:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
   1632c:	2240      	movs	r2, #64	; 0x40
   1632e:	f103 004c 	add.w	r0, r3, #76	; 0x4c
   16332:	f015 bfdf 	b.w	2c2f4 <memset>
   16336:	bf00      	nop
   16338:	000304e8 	.word	0x000304e8

0001633c <cdc_acm_fifo_fill>:
{
   1633c:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   1633e:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
   16340:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
   16344:	b188      	cbz	r0, 1636a <cdc_acm_fifo_fill+0x2e>
   16346:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   1634a:	b97b      	cbnz	r3, 1636c <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
   1634c:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   16350:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
   16354:	f014 fcbb 	bl	2acce <ring_buf_put>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   16358:	2200      	movs	r2, #0
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   1635a:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   1635c:	2300      	movs	r3, #0
   1635e:	4804      	ldr	r0, [pc, #16]	; (16370 <cdc_acm_fifo_fill+0x34>)
   16360:	f105 0118 	add.w	r1, r5, #24
   16364:	f010 f974 	bl	26650 <k_work_schedule_for_queue>
	return wrote;
   16368:	4620      	mov	r0, r4
}
   1636a:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   1636c:	2000      	movs	r0, #0
   1636e:	e7fc      	b.n	1636a <cdc_acm_fifo_fill+0x2e>
   16370:	20002150 	.word	0x20002150

00016374 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
   16374:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   16376:	6904      	ldr	r4, [r0, #16]
{
   16378:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
   1637c:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   16380:	b1a3      	cbz	r3, 163ac <cdc_acm_poll_out+0x38>
   16382:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   16386:	b98b      	cbnz	r3, 163ac <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   16388:	f10d 0107 	add.w	r1, sp, #7
   1638c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	dev_data->tx_ready = false;
   16390:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   16394:	2201      	movs	r2, #1
   16396:	f014 fc9a 	bl	2acce <ring_buf_put>
   1639a:	4601      	mov	r1, r0
   1639c:	b140      	cbz	r0, 163b0 <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
   1639e:	480d      	ldr	r0, [pc, #52]	; (163d4 <cdc_acm_poll_out+0x60>)
   163a0:	2221      	movs	r2, #33	; 0x21
   163a2:	2300      	movs	r3, #0
   163a4:	f104 0118 	add.w	r1, r4, #24
   163a8:	f010 f952 	bl	26650 <k_work_schedule_for_queue>
}
   163ac:	b002      	add	sp, #8
   163ae:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   163b0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   163b4:	2201      	movs	r2, #1
   163b6:	f014 fcde 	bl	2ad76 <ring_buf_get>
   163ba:	2800      	cmp	r0, #0
   163bc:	d0f6      	beq.n	163ac <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   163be:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   163c2:	2201      	movs	r2, #1
   163c4:	f10d 0107 	add.w	r1, sp, #7
   163c8:	f014 fc81 	bl	2acce <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   163cc:	2800      	cmp	r0, #0
   163ce:	d1e6      	bne.n	1639e <cdc_acm_poll_out+0x2a>
   163d0:	e7ec      	b.n	163ac <cdc_acm_poll_out+0x38>
   163d2:	bf00      	nop
   163d4:	20002150 	.word	0x20002150

000163d8 <tx_work_handler>:
{
   163d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
   163da:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
   163de:	685b      	ldr	r3, [r3, #4]
   163e0:	6a1b      	ldr	r3, [r3, #32]
   163e2:	7d1f      	ldrb	r7, [r3, #20]
{
   163e4:	b085      	sub	sp, #20
   163e6:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
   163e8:	4638      	mov	r0, r7
   163ea:	f015 fac1 	bl	2b970 <usb_transfer_is_busy>
   163ee:	4606      	mov	r6, r0
   163f0:	b9e0      	cbnz	r0, 1642c <tx_work_handler+0x54>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
   163f2:	6fa8      	ldr	r0, [r5, #120]	; 0x78
   163f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   163f8:	a903      	add	r1, sp, #12
   163fa:	f014 fc87 	bl	2ad0c <ring_buf_get_claim>
	if (!len) {
   163fe:	4604      	mov	r4, r0
   16400:	b1a0      	cbz	r0, 1642c <tx_work_handler+0x54>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
   16402:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
   16404:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
   16408:	bf08      	it	eq
   1640a:	f100 34ff 	addeq.w	r4, r0, #4294967295
	dev_data->tx_ready = false;
   1640e:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
   16412:	9301      	str	r3, [sp, #4]
   16414:	4b06      	ldr	r3, [pc, #24]	; (16430 <tx_work_handler+0x58>)
   16416:	9903      	ldr	r1, [sp, #12]
   16418:	9300      	str	r3, [sp, #0]
   1641a:	4622      	mov	r2, r4
   1641c:	2302      	movs	r3, #2
   1641e:	4638      	mov	r0, r7
   16420:	f7ff fe48 	bl	160b4 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
   16424:	6fa8      	ldr	r0, [r5, #120]	; 0x78
   16426:	4621      	mov	r1, r4
   16428:	f014 fc90 	bl	2ad4c <ring_buf_get_finish>
}
   1642c:	b005      	add	sp, #20
   1642e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16430:	00016435 	.word	0x00016435

00016434 <cdc_acm_write_cb>:
{
   16434:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
   16436:	2301      	movs	r3, #1
   16438:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
   1643c:	6813      	ldr	r3, [r2, #0]
{
   1643e:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
   16440:	b13b      	cbz	r3, 16452 <cdc_acm_write_cb+0x1e>
   16442:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
   16446:	b123      	cbz	r3, 16452 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   16448:	480a      	ldr	r0, [pc, #40]	; (16474 <cdc_acm_write_cb+0x40>)
   1644a:	f102 0108 	add.w	r1, r2, #8
   1644e:	f019 f990 	bl	2f772 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
   16452:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   16456:	689a      	ldr	r2, [r3, #8]
   16458:	691b      	ldr	r3, [r3, #16]
   1645a:	429a      	cmp	r2, r3
   1645c:	d008      	beq.n	16470 <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   1645e:	f104 0118 	add.w	r1, r4, #24
   16462:	4804      	ldr	r0, [pc, #16]	; (16474 <cdc_acm_write_cb+0x40>)
}
   16464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   16468:	2200      	movs	r2, #0
   1646a:	2300      	movs	r3, #0
   1646c:	f010 b8f0 	b.w	26650 <k_work_schedule_for_queue>
}
   16470:	bd10      	pop	{r4, pc}
   16472:	bf00      	nop
   16474:	20002150 	.word	0x20002150

00016478 <cdc_acm_init>:
{
   16478:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   1647a:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
   1647c:	2300      	movs	r3, #0
   1647e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   16482:	4b0c      	ldr	r3, [pc, #48]	; (164b4 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
   16484:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
   16488:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
   1648a:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1648e:	b969      	cbnz	r1, 164ac <cdc_acm_init+0x34>
	list->head = node;
   16490:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
   16494:	f104 0008 	add.w	r0, r4, #8
   16498:	4907      	ldr	r1, [pc, #28]	; (164b8 <cdc_acm_init+0x40>)
   1649a:	f019 f93d 	bl	2f718 <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
   1649e:	f104 0018 	add.w	r0, r4, #24
   164a2:	4906      	ldr	r1, [pc, #24]	; (164bc <cdc_acm_init+0x44>)
   164a4:	f019 f97c 	bl	2f7a0 <k_work_init_delayable>
}
   164a8:	2000      	movs	r0, #0
   164aa:	bd10      	pop	{r4, pc}
	parent->next = child;
   164ac:	600a      	str	r2, [r1, #0]
	list->tail = node;
   164ae:	605a      	str	r2, [r3, #4]
}
   164b0:	e7f0      	b.n	16494 <cdc_acm_init+0x1c>
   164b2:	bf00      	nop
   164b4:	20003534 	.word	0x20003534
   164b8:	0002b99b 	.word	0x0002b99b
   164bc:	000163d9 	.word	0x000163d9

000164c0 <cdc_acm_read_cb>:
{
   164c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   164c2:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   164c4:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
   164c8:	1e0a      	subs	r2, r1, #0
{
   164ca:	4605      	mov	r5, r0
	if (size <= 0) {
   164cc:	dd1f      	ble.n	1650e <cdc_acm_read_cb+0x4e>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   164ce:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   164d2:	4631      	mov	r1, r6
   164d4:	f014 fbfb 	bl	2acce <ring_buf_put>
	dev_data->rx_ready = true;
   164d8:	2301      	movs	r3, #1
   164da:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
   164de:	6823      	ldr	r3, [r4, #0]
   164e0:	b13b      	cbz	r3, 164f2 <cdc_acm_read_cb+0x32>
   164e2:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   164e6:	b123      	cbz	r3, 164f2 <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   164e8:	480e      	ldr	r0, [pc, #56]	; (16524 <cdc_acm_read_cb+0x64>)
   164ea:	f104 0108 	add.w	r1, r4, #8
   164ee:	f019 f940 	bl	2f772 <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
   164f2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
   164f6:	684b      	ldr	r3, [r1, #4]
   164f8:	694a      	ldr	r2, [r1, #20]
   164fa:	1a9a      	subs	r2, r3, r2
   164fc:	69cb      	ldr	r3, [r1, #28]
   164fe:	1a9b      	subs	r3, r3, r2
   16500:	2b3f      	cmp	r3, #63	; 0x3f
   16502:	d804      	bhi.n	1650e <cdc_acm_read_cb+0x4e>
		dev_data->rx_paused = true;
   16504:	2301      	movs	r3, #1
   16506:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   1650a:	b002      	add	sp, #8
   1650c:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
   1650e:	4b06      	ldr	r3, [pc, #24]	; (16528 <cdc_acm_read_cb+0x68>)
   16510:	9300      	str	r3, [sp, #0]
   16512:	9401      	str	r4, [sp, #4]
   16514:	2301      	movs	r3, #1
   16516:	2240      	movs	r2, #64	; 0x40
   16518:	4631      	mov	r1, r6
   1651a:	4628      	mov	r0, r5
   1651c:	f7ff fdca 	bl	160b4 <usb_transfer>
   16520:	e7f3      	b.n	1650a <cdc_acm_read_cb+0x4a>
   16522:	bf00      	nop
   16524:	20002150 	.word	0x20002150
   16528:	000164c1 	.word	0x000164c1

0001652c <cdc_acm_dev_status_cb>:
{
   1652c:	b538      	push	{r3, r4, r5, lr}
   1652e:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
   16530:	4601      	mov	r1, r0
   16532:	481e      	ldr	r0, [pc, #120]	; (165ac <cdc_acm_dev_status_cb+0x80>)
   16534:	f015 f9ec 	bl	2b910 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   16538:	4604      	mov	r4, r0
   1653a:	b380      	cbz	r0, 1659e <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
   1653c:	4602      	mov	r2, r0
	switch (status) {
   1653e:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
   16540:	f852 39a4 	ldr.w	r3, [r2], #-164
   16544:	685b      	ldr	r3, [r3, #4]
	switch (status) {
   16546:	2905      	cmp	r1, #5
   16548:	d829      	bhi.n	1659e <cdc_acm_dev_status_cb+0x72>
   1654a:	e8df f001 	tbb	[pc, r1]
   1654e:	2820      	.short	0x2820
   16550:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
   16554:	f814 1c06 	ldrb.w	r1, [r4, #-6]
   16558:	b931      	cbnz	r1, 16568 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
   1655a:	6a1b      	ldr	r3, [r3, #32]
   1655c:	7b18      	ldrb	r0, [r3, #12]
   1655e:	f7ff ffaf 	bl	164c0 <cdc_acm_read_cb>
			dev_data->configured = true;
   16562:	2301      	movs	r3, #1
   16564:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
   16568:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
   1656c:	b9bb      	cbnz	r3, 1659e <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
   1656e:	2301      	movs	r3, #1
   16570:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
   16574:	f854 3ca4 	ldr.w	r3, [r4, #-164]
   16578:	b18b      	cbz	r3, 1659e <cdc_acm_dev_status_cb+0x72>
   1657a:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
   1657e:	b173      	cbz	r3, 1659e <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   16580:	f1a4 019c 	sub.w	r1, r4, #156	; 0x9c
   16584:	480a      	ldr	r0, [pc, #40]	; (165b0 <cdc_acm_dev_status_cb+0x84>)
}
   16586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   1658a:	f019 b8f2 	b.w	2f772 <k_work_submit_to_queue>
}
   1658e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
   16592:	4610      	mov	r0, r2
   16594:	f7ff beb4 	b.w	16300 <cdc_acm_reset_port>
		dev_data->suspended = true;
   16598:	2301      	movs	r3, #1
			dev_data->suspended = false;
   1659a:	f804 3c05 	strb.w	r3, [r4, #-5]
}
   1659e:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
   165a0:	f814 3c05 	ldrb.w	r3, [r4, #-5]
   165a4:	2b00      	cmp	r3, #0
   165a6:	d0fa      	beq.n	1659e <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
   165a8:	2300      	movs	r3, #0
   165aa:	e7f6      	b.n	1659a <cdc_acm_dev_status_cb+0x6e>
   165ac:	20003534 	.word	0x20003534
   165b0:	20002150 	.word	0x20002150

000165b4 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
   165b4:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&z_usb_work_q,
   165b6:	4d09      	ldr	r5, [pc, #36]	; (165dc <z_usb_work_q_init+0x28>)
   165b8:	4909      	ldr	r1, [pc, #36]	; (165e0 <z_usb_work_q_init+0x2c>)
   165ba:	2400      	movs	r4, #0
   165bc:	9400      	str	r4, [sp, #0]
   165be:	f04f 33ff 	mov.w	r3, #4294967295
   165c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   165c6:	4628      	mov	r0, r5
   165c8:	f010 f80a 	bl	265e0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   165cc:	4905      	ldr	r1, [pc, #20]	; (165e4 <z_usb_work_q_init+0x30>)
   165ce:	4628      	mov	r0, r5
   165d0:	f018 ff6b 	bl	2f4aa <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
   165d4:	4620      	mov	r0, r4
   165d6:	b003      	add	sp, #12
   165d8:	bd30      	pop	{r4, r5, pc}
   165da:	bf00      	nop
   165dc:	20002150 	.word	0x20002150
   165e0:	20005f80 	.word	0x20005f80
   165e4:	0003162a 	.word	0x0003162a

000165e8 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   165e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   165ec:	4b0f      	ldr	r3, [pc, #60]	; (1662c <settings_save_one+0x44>)
   165ee:	681c      	ldr	r4, [r3, #0]
{
   165f0:	4605      	mov	r5, r0
   165f2:	460e      	mov	r6, r1
   165f4:	4617      	mov	r7, r2
	if (!cs) {
   165f6:	b1ac      	cbz	r4, 16624 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   165f8:	f04f 32ff 	mov.w	r2, #4294967295
   165fc:	f04f 33ff 	mov.w	r3, #4294967295
   16600:	480b      	ldr	r0, [pc, #44]	; (16630 <settings_save_one+0x48>)
   16602:	f00f fd5f 	bl	260c4 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   16606:	6863      	ldr	r3, [r4, #4]
   16608:	4632      	mov	r2, r6
   1660a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1660e:	4629      	mov	r1, r5
   16610:	463b      	mov	r3, r7
   16612:	4620      	mov	r0, r4
   16614:	47c0      	blx	r8
   16616:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   16618:	4805      	ldr	r0, [pc, #20]	; (16630 <settings_save_one+0x48>)
   1661a:	f00f fdcd 	bl	261b8 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   1661e:	4620      	mov	r0, r4
   16620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   16624:	f06f 0401 	mvn.w	r4, #1
   16628:	e7f9      	b.n	1661e <settings_save_one+0x36>
   1662a:	bf00      	nop
   1662c:	2000353c 	.word	0x2000353c
   16630:	20000c98 	.word	0x20000c98

00016634 <settings_src_register>:
	parent->next = child;
   16634:	2300      	movs	r3, #0
   16636:	6003      	str	r3, [r0, #0]
	return list->tail;
   16638:	4b04      	ldr	r3, [pc, #16]	; (1664c <settings_src_register+0x18>)
   1663a:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1663c:	b912      	cbnz	r2, 16644 <settings_src_register+0x10>
	list->head = node;
   1663e:	e9c3 0000 	strd	r0, r0, [r3]
}
   16642:	4770      	bx	lr
	parent->next = child;
   16644:	6010      	str	r0, [r2, #0]
	list->tail = node;
   16646:	6058      	str	r0, [r3, #4]
}
   16648:	4770      	bx	lr
   1664a:	bf00      	nop
   1664c:	20003540 	.word	0x20003540

00016650 <settings_dst_register>:
	settings_save_dst = cs;
   16650:	4b01      	ldr	r3, [pc, #4]	; (16658 <settings_dst_register+0x8>)
   16652:	6018      	str	r0, [r3, #0]
}
   16654:	4770      	bx	lr
   16656:	bf00      	nop
   16658:	2000353c 	.word	0x2000353c

0001665c <settings_load_subtree>:
{
   1665c:	b530      	push	{r4, r5, lr}
   1665e:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   16660:	2300      	movs	r3, #0
{
   16662:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   16664:	e9cd 3302 	strd	r3, r3, [sp, #8]
   16668:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   1666a:	f04f 33ff 	mov.w	r3, #4294967295
   1666e:	480c      	ldr	r0, [pc, #48]	; (166a0 <settings_load_subtree+0x44>)
   16670:	f04f 32ff 	mov.w	r2, #4294967295
   16674:	f00f fd26 	bl	260c4 <z_impl_k_mutex_lock>
	return list->head;
   16678:	4b0a      	ldr	r3, [pc, #40]	; (166a4 <settings_load_subtree+0x48>)
   1667a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1667c:	b94c      	cbnz	r4, 16692 <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   1667e:	4628      	mov	r0, r5
   16680:	f000 f8e0 	bl	16844 <settings_commit_subtree>
   16684:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   16686:	4806      	ldr	r0, [pc, #24]	; (166a0 <settings_load_subtree+0x44>)
   16688:	f00f fd96 	bl	261b8 <z_impl_k_mutex_unlock>
}
   1668c:	4620      	mov	r0, r4
   1668e:	b005      	add	sp, #20
   16690:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   16692:	6863      	ldr	r3, [r4, #4]
   16694:	4620      	mov	r0, r4
   16696:	681b      	ldr	r3, [r3, #0]
   16698:	a901      	add	r1, sp, #4
   1669a:	4798      	blx	r3
	return node->next;
   1669c:	6824      	ldr	r4, [r4, #0]
   1669e:	e7ed      	b.n	1667c <settings_load_subtree+0x20>
   166a0:	20000c98 	.word	0x20000c98
   166a4:	20003540 	.word	0x20003540

000166a8 <settings_load_subtree_direct>:
{
   166a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   166aa:	e9cd 0101 	strd	r0, r1, [sp, #4]
   166ae:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   166b0:	f04f 33ff 	mov.w	r3, #4294967295
   166b4:	480a      	ldr	r0, [pc, #40]	; (166e0 <settings_load_subtree_direct+0x38>)
   166b6:	f04f 32ff 	mov.w	r2, #4294967295
   166ba:	f00f fd03 	bl	260c4 <z_impl_k_mutex_lock>
	return list->head;
   166be:	4b09      	ldr	r3, [pc, #36]	; (166e4 <settings_load_subtree_direct+0x3c>)
   166c0:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   166c2:	b92c      	cbnz	r4, 166d0 <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   166c4:	4806      	ldr	r0, [pc, #24]	; (166e0 <settings_load_subtree_direct+0x38>)
   166c6:	f00f fd77 	bl	261b8 <z_impl_k_mutex_unlock>
}
   166ca:	4620      	mov	r0, r4
   166cc:	b004      	add	sp, #16
   166ce:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   166d0:	6863      	ldr	r3, [r4, #4]
   166d2:	4620      	mov	r0, r4
   166d4:	681b      	ldr	r3, [r3, #0]
   166d6:	a901      	add	r1, sp, #4
   166d8:	4798      	blx	r3
	return node->next;
   166da:	6824      	ldr	r4, [r4, #0]
   166dc:	e7f1      	b.n	166c2 <settings_load_subtree_direct+0x1a>
   166de:	bf00      	nop
   166e0:	20000c98 	.word	0x20000c98
   166e4:	20003540 	.word	0x20003540

000166e8 <settings_store_init>:
	list->head = NULL;
   166e8:	4b02      	ldr	r3, [pc, #8]	; (166f4 <settings_store_init+0xc>)
   166ea:	2200      	movs	r2, #0
	list->tail = NULL;
   166ec:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   166f0:	4770      	bx	lr
   166f2:	bf00      	nop
   166f4:	20003540 	.word	0x20003540

000166f8 <settings_init>:
	list->head = NULL;
   166f8:	4b02      	ldr	r3, [pc, #8]	; (16704 <settings_init+0xc>)
   166fa:	2200      	movs	r2, #0
	list->tail = NULL;
   166fc:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   16700:	f7ff bff2 	b.w	166e8 <settings_store_init>
   16704:	20003548 	.word	0x20003548

00016708 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   16708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1670c:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   1670e:	460c      	mov	r4, r1
   16710:	b109      	cbz	r1, 16716 <settings_parse_and_lookup+0xe>
		*next = NULL;
   16712:	2300      	movs	r3, #0
   16714:	600b      	str	r3, [r1, #0]
{
   16716:	4d1f      	ldr	r5, [pc, #124]	; (16794 <settings_parse_and_lookup+0x8c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   16718:	f8df 907c 	ldr.w	r9, [pc, #124]	; 16798 <settings_parse_and_lookup+0x90>
{
   1671c:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1671e:	454d      	cmp	r5, r9
   16720:	d30f      	bcc.n	16742 <settings_parse_and_lookup+0x3a>
	return list->head;
   16722:	4b1e      	ldr	r3, [pc, #120]	; (1679c <settings_parse_and_lookup+0x94>)
   16724:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   16726:	b385      	cbz	r5, 1678a <settings_parse_and_lookup+0x82>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   16728:	f855 8c14 	ldr.w	r8, [r5, #-20]
   1672c:	aa01      	add	r2, sp, #4
   1672e:	4641      	mov	r1, r8
   16730:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   16732:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   16734:	f015 f9c8 	bl	2bac8 <settings_name_steq>
   16738:	b310      	cbz	r0, 16780 <settings_parse_and_lookup+0x78>
			continue;
		}
		if (!bestmatch) {
   1673a:	b9d6      	cbnz	r6, 16772 <settings_parse_and_lookup+0x6a>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   1673c:	bb14      	cbnz	r4, 16784 <settings_parse_and_lookup+0x7c>
{
   1673e:	462e      	mov	r6, r5
   16740:	e01e      	b.n	16780 <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   16742:	f8d5 8000 	ldr.w	r8, [r5]
   16746:	aa01      	add	r2, sp, #4
   16748:	4641      	mov	r1, r8
   1674a:	4638      	mov	r0, r7
   1674c:	f015 f9bc 	bl	2bac8 <settings_name_steq>
   16750:	b150      	cbz	r0, 16768 <settings_parse_and_lookup+0x60>
		if (!bestmatch) {
   16752:	b916      	cbnz	r6, 1675a <settings_parse_and_lookup+0x52>
			if (next) {
   16754:	b954      	cbnz	r4, 1676c <settings_parse_and_lookup+0x64>
{
   16756:	462e      	mov	r6, r5
   16758:	e006      	b.n	16768 <settings_parse_and_lookup+0x60>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1675a:	6831      	ldr	r1, [r6, #0]
   1675c:	2200      	movs	r2, #0
   1675e:	4640      	mov	r0, r8
   16760:	f015 f9b2 	bl	2bac8 <settings_name_steq>
   16764:	2800      	cmp	r0, #0
   16766:	d1f5      	bne.n	16754 <settings_parse_and_lookup+0x4c>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   16768:	3514      	adds	r5, #20
   1676a:	e7d8      	b.n	1671e <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   1676c:	9b01      	ldr	r3, [sp, #4]
   1676e:	6023      	str	r3, [r4, #0]
   16770:	e7f1      	b.n	16756 <settings_parse_and_lookup+0x4e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   16772:	6831      	ldr	r1, [r6, #0]
   16774:	2200      	movs	r2, #0
   16776:	4640      	mov	r0, r8
   16778:	f015 f9a6 	bl	2bac8 <settings_name_steq>
   1677c:	2800      	cmp	r0, #0
   1677e:	d1dd      	bne.n	1673c <settings_parse_and_lookup+0x34>
	return node->next;
   16780:	696d      	ldr	r5, [r5, #20]
   16782:	e7d0      	b.n	16726 <settings_parse_and_lookup+0x1e>
				*next = tmpnext;
   16784:	9b01      	ldr	r3, [sp, #4]
   16786:	6023      	str	r3, [r4, #0]
   16788:	e7d9      	b.n	1673e <settings_parse_and_lookup+0x36>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   1678a:	4630      	mov	r0, r6
   1678c:	b003      	add	sp, #12
   1678e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16792:	bf00      	nop
   16794:	000303d4 	.word	0x000303d4
   16798:	0003044c 	.word	0x0003044c
   1679c:	20003548 	.word	0x20003548

000167a0 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   167a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   167a4:	b084      	sub	sp, #16
   167a6:	af02      	add	r7, sp, #8
   167a8:	4604      	mov	r4, r0
   167aa:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
	int rc;
	const char *name_key = name;
   167ae:	6078      	str	r0, [r7, #4]
{
   167b0:	460d      	mov	r5, r1
   167b2:	4616      	mov	r6, r2
   167b4:	4698      	mov	r8, r3

	if (load_arg && load_arg->subtree &&
   167b6:	f1b9 0f00 	cmp.w	r9, #0
   167ba:	d007      	beq.n	167cc <settings_call_set_handler+0x2c>
   167bc:	f8d9 1000 	ldr.w	r1, [r9]
   167c0:	bb31      	cbnz	r1, 16810 <settings_call_set_handler+0x70>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
   167c2:	f8d9 a004 	ldr.w	sl, [r9, #4]
   167c6:	f1ba 0f00 	cmp.w	sl, #0
   167ca:	d128      	bne.n	1681e <settings_call_set_handler+0x7e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
   167cc:	1d39      	adds	r1, r7, #4
   167ce:	4620      	mov	r0, r4
   167d0:	f7ff ff9a 	bl	16708 <settings_parse_and_lookup>
		if (!ch) {
   167d4:	b308      	cbz	r0, 1681a <settings_call_set_handler+0x7a>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   167d6:	f8d0 9008 	ldr.w	r9, [r0, #8]
   167da:	6878      	ldr	r0, [r7, #4]
   167dc:	4643      	mov	r3, r8
   167de:	4632      	mov	r2, r6
   167e0:	4629      	mov	r1, r5
   167e2:	47c8      	blx	r9

		if (rc != 0) {
   167e4:	b1c8      	cbz	r0, 1681a <settings_call_set_handler+0x7a>
			LOG_ERR("set-value failure. key: %s error(%d)",
   167e6:	466d      	mov	r5, sp
   167e8:	b08a      	sub	sp, #40	; 0x28
   167ea:	aa02      	add	r2, sp, #8
   167ec:	4b12      	ldr	r3, [pc, #72]	; (16838 <settings_call_set_handler+0x98>)
   167ee:	61d0      	str	r0, [r2, #28]
   167f0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   167f4:	f44f 7300 	mov.w	r3, #512	; 0x200
   167f8:	8413      	strh	r3, [r2, #32]
   167fa:	4b10      	ldr	r3, [pc, #64]	; (1683c <settings_call_set_handler+0x9c>)
   167fc:	f842 3f10 	str.w	r3, [r2, #16]!
   16800:	480f      	ldr	r0, [pc, #60]	; (16840 <settings_call_set_handler+0xa0>)
   16802:	2300      	movs	r3, #0
   16804:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   16808:	f7fe f9dc 	bl	14bc4 <z_impl_z_log_msg_static_create>
   1680c:	46ad      	mov	sp, r5
				name, rc);
			/* Ignoring the error */
			rc = 0;
   1680e:	e004      	b.n	1681a <settings_call_set_handler+0x7a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   16810:	1d3a      	adds	r2, r7, #4
   16812:	f015 f959 	bl	2bac8 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   16816:	2800      	cmp	r0, #0
   16818:	d1d3      	bne.n	167c2 <settings_call_set_handler+0x22>
		return 0;
   1681a:	2000      	movs	r0, #0
   1681c:	e007      	b.n	1682e <settings_call_set_handler+0x8e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   1681e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   16822:	9300      	str	r3, [sp, #0]
   16824:	6878      	ldr	r0, [r7, #4]
   16826:	4643      	mov	r3, r8
   16828:	4632      	mov	r2, r6
   1682a:	4629      	mov	r1, r5
   1682c:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   1682e:	3708      	adds	r7, #8
   16830:	46bd      	mov	sp, r7
   16832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16836:	bf00      	nop
   16838:	00031633 	.word	0x00031633
   1683c:	01000004 	.word	0x01000004
   16840:	00030384 	.word	0x00030384

00016844 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   16844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   16846:	4c18      	ldr	r4, [pc, #96]	; (168a8 <settings_commit_subtree+0x64>)
   16848:	4f18      	ldr	r7, [pc, #96]	; (168ac <settings_commit_subtree+0x68>)
{
   1684a:	4606      	mov	r6, r0
	rc = 0;
   1684c:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1684e:	42bc      	cmp	r4, r7
   16850:	d308      	bcc.n	16864 <settings_commit_subtree+0x20>
	return list->head;
   16852:	4b17      	ldr	r3, [pc, #92]	; (168b0 <settings_commit_subtree+0x6c>)
   16854:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   16856:	b32c      	cbz	r4, 168a4 <settings_commit_subtree+0x60>
   16858:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1685a:	b9b6      	cbnz	r6, 1688a <settings_commit_subtree+0x46>
			continue;
		}
		if (ch->h_commit) {
   1685c:	68e3      	ldr	r3, [r4, #12]
   1685e:	b9e3      	cbnz	r3, 1689a <settings_commit_subtree+0x56>
	return node->next;
   16860:	6964      	ldr	r4, [r4, #20]
   16862:	e7f8      	b.n	16856 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   16864:	b92e      	cbnz	r6, 16872 <settings_commit_subtree+0x2e>
		if (ch->h_commit) {
   16866:	68e3      	ldr	r3, [r4, #12]
   16868:	b95b      	cbnz	r3, 16882 <settings_commit_subtree+0x3e>
{
   1686a:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1686c:	3414      	adds	r4, #20
   1686e:	4605      	mov	r5, r0
   16870:	e7ed      	b.n	1684e <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   16872:	6820      	ldr	r0, [r4, #0]
   16874:	2200      	movs	r2, #0
   16876:	4631      	mov	r1, r6
   16878:	f015 f926 	bl	2bac8 <settings_name_steq>
   1687c:	2800      	cmp	r0, #0
   1687e:	d1f2      	bne.n	16866 <settings_commit_subtree+0x22>
   16880:	e7f3      	b.n	1686a <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   16882:	4798      	blx	r3
			if (!rc) {
   16884:	2d00      	cmp	r5, #0
   16886:	d1f0      	bne.n	1686a <settings_commit_subtree+0x26>
   16888:	e7f0      	b.n	1686c <settings_commit_subtree+0x28>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1688a:	6820      	ldr	r0, [r4, #0]
   1688c:	2200      	movs	r2, #0
   1688e:	4631      	mov	r1, r6
   16890:	f015 f91a 	bl	2bac8 <settings_name_steq>
   16894:	2800      	cmp	r0, #0
   16896:	d1e1      	bne.n	1685c <settings_commit_subtree+0x18>
   16898:	e7e2      	b.n	16860 <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   1689a:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   1689c:	2d00      	cmp	r5, #0
   1689e:	bf08      	it	eq
   168a0:	4605      	moveq	r5, r0
   168a2:	e7dd      	b.n	16860 <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   168a4:	4628      	mov	r0, r5
   168a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   168a8:	000303d4 	.word	0x000303d4
   168ac:	0003044c 	.word	0x0003044c
   168b0:	20003548 	.word	0x20003548

000168b4 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   168b4:	b538      	push	{r3, r4, r5, lr}

	int err = 0;

	k_mutex_lock(&settings_lock, K_FOREVER);

	if (!settings_subsys_initialized) {
   168b6:	4d0c      	ldr	r5, [pc, #48]	; (168e8 <settings_subsys_init+0x34>)
	return z_impl_k_mutex_lock(mutex, timeout);
   168b8:	480c      	ldr	r0, [pc, #48]	; (168ec <settings_subsys_init+0x38>)
   168ba:	f04f 33ff 	mov.w	r3, #4294967295
   168be:	f04f 32ff 	mov.w	r2, #4294967295
   168c2:	f00f fbff 	bl	260c4 <z_impl_k_mutex_lock>
   168c6:	782b      	ldrb	r3, [r5, #0]
   168c8:	b93b      	cbnz	r3, 168da <settings_subsys_init+0x26>
		settings_init();
   168ca:	f7ff ff15 	bl	166f8 <settings_init>

		err = settings_backend_init();
   168ce:	f000 f86d 	bl	169ac <settings_backend_init>

		if (!err) {
   168d2:	4604      	mov	r4, r0
   168d4:	b910      	cbnz	r0, 168dc <settings_subsys_init+0x28>
			settings_subsys_initialized = true;
   168d6:	2301      	movs	r3, #1
   168d8:	702b      	strb	r3, [r5, #0]
	int err = 0;
   168da:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   168dc:	4803      	ldr	r0, [pc, #12]	; (168ec <settings_subsys_init+0x38>)
   168de:	f00f fc6b 	bl	261b8 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&settings_lock);

	return err;
}
   168e2:	4620      	mov	r0, r4
   168e4:	bd38      	pop	{r3, r4, r5, pc}
   168e6:	bf00      	nop
   168e8:	200055fa 	.word	0x200055fa
   168ec:	20000c98 	.word	0x20000c98

000168f0 <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   168f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   168f4:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
   168f6:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 169a8 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   168fa:	3401      	adds	r4, #1
{
   168fc:	b098      	sub	sp, #96	; 0x60
   168fe:	4680      	mov	r8, r0
   16900:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   16902:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   16904:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   16908:	1e65      	subs	r5, r4, #1
   1690a:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   1690c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   16910:	d047      	beq.n	169a2 <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   16912:	234a      	movs	r3, #74	; 0x4a
   16914:	aa05      	add	r2, sp, #20
   16916:	4629      	mov	r1, r5
   16918:	4630      	mov	r0, r6
   1691a:	f014 fefb 	bl	2b714 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   1691e:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   16922:	343f      	adds	r4, #63	; 0x3f
   16924:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   16926:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   16928:	4621      	mov	r1, r4
   1692a:	2301      	movs	r3, #1
   1692c:	f10d 020b 	add.w	r2, sp, #11
   16930:	4630      	mov	r0, r6
   16932:	f014 feef 	bl	2b714 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   16936:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   16938:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1693a:	dc03      	bgt.n	16944 <settings_nvs_load+0x54>
   1693c:	2800      	cmp	r0, #0
   1693e:	dc03      	bgt.n	16948 <settings_nvs_load+0x58>
{
   16940:	462c      	mov	r4, r5
   16942:	e7e1      	b.n	16908 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   16944:	2800      	cmp	r0, #0
   16946:	dc16      	bgt.n	16976 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   16948:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   1694c:	42ab      	cmp	r3, r5
   1694e:	d109      	bne.n	16964 <settings_nvs_load+0x74>
				cf->last_name_id--;
   16950:	4642      	mov	r2, r8
   16952:	1e6b      	subs	r3, r5, #1
   16954:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   16958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1695c:	2302      	movs	r3, #2
   1695e:	4630      	mov	r0, r6
   16960:	f7fd fd50 	bl	14404 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   16964:	4629      	mov	r1, r5
   16966:	4630      	mov	r0, r6
   16968:	f014 fed0 	bl	2b70c <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   1696c:	4621      	mov	r1, r4
   1696e:	4630      	mov	r0, r6
   16970:	f014 fecc 	bl	2b70c <nvs_delete>
			continue;
   16974:	e7e4      	b.n	16940 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   16976:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1697a:	eb0d 0703 	add.w	r7, sp, r3
   1697e:	2300      	movs	r3, #0
   16980:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   16984:	4652      	mov	r2, sl
   16986:	f8cd 9000 	str.w	r9, [sp]
   1698a:	ab03      	add	r3, sp, #12
   1698c:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   1698e:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   16990:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   16994:	f7ff ff04 	bl	167a0 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   16998:	2800      	cmp	r0, #0
   1699a:	d0d1      	beq.n	16940 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   1699c:	b018      	add	sp, #96	; 0x60
   1699e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   169a2:	2000      	movs	r0, #0
	return ret;
   169a4:	e7fa      	b.n	1699c <settings_nvs_load+0xac>
   169a6:	bf00      	nop
   169a8:	0002bb39 	.word	0x0002bb39

000169ac <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   169ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   169ae:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   169b0:	4669      	mov	r1, sp
   169b2:	2003      	movs	r0, #3
	uint32_t sector_cnt = 1;
   169b4:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   169b6:	f7fe fd2b 	bl	15410 <flash_area_open>
	if (rc) {
   169ba:	4604      	mov	r4, r0
   169bc:	bb60      	cbnz	r0, 16a18 <settings_backend_init+0x6c>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   169be:	aa02      	add	r2, sp, #8
   169c0:	a901      	add	r1, sp, #4
   169c2:	2003      	movs	r0, #3
   169c4:	f7fe fd4c 	bl	15460 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc != 0 && rc != -ENOMEM) {
   169c8:	4604      	mov	r4, r0
   169ca:	b110      	cbz	r0, 169d2 <settings_backend_init+0x26>
   169cc:	f110 0f0c 	cmn.w	r0, #12
   169d0:	d122      	bne.n	16a18 <settings_backend_init+0x6c>
		return rc;
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   169d2:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   169d4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   169d8:	d223      	bcs.n	16a22 <settings_backend_init+0x76>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   169da:	9a00      	ldr	r2, [sp, #0]
   169dc:	2300      	movs	r3, #0
   169de:	6894      	ldr	r4, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   169e0:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   169e2:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   169e4:	4284      	cmp	r4, r0
   169e6:	d31a      	bcc.n	16a1e <settings_backend_init+0x72>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   169e8:	3301      	adds	r3, #1
   169ea:	2b08      	cmp	r3, #8
   169ec:	d1f9      	bne.n	169e2 <settings_backend_init+0x36>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   169ee:	4d0e      	ldr	r5, [pc, #56]	; (16a28 <settings_backend_init+0x7c>)
   169f0:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   169f2:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   169f4:	6853      	ldr	r3, [r2, #4]
   169f6:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   169f8:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   169fa:	68d3      	ldr	r3, [r2, #12]
   169fc:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   169fe:	f015 f935 	bl	2bc6c <settings_nvs_backend_init>
	if (rc) {
   16a02:	4604      	mov	r4, r0
   16a04:	b940      	cbnz	r0, 16a18 <settings_backend_init+0x6c>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   16a06:	4e09      	ldr	r6, [pc, #36]	; (16a2c <settings_backend_init+0x80>)
   16a08:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   16a0a:	4628      	mov	r0, r5
   16a0c:	f7ff fe12 	bl	16634 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   16a10:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   16a12:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   16a14:	f7ff fe1c 	bl	16650 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   16a18:	4620      	mov	r0, r4
   16a1a:	b004      	add	sp, #16
   16a1c:	bd70      	pop	{r4, r5, r6, pc}
   16a1e:	b29b      	uxth	r3, r3
   16a20:	e7e5      	b.n	169ee <settings_backend_init+0x42>
		return -EDOM;
   16a22:	f06f 0420 	mvn.w	r4, #32
   16a26:	e7f7      	b.n	16a18 <settings_backend_init+0x6c>
   16a28:	20003550 	.word	0x20003550
   16a2c:	200007f0 	.word	0x200007f0

00016a30 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   16a30:	4904      	ldr	r1, [pc, #16]	; (16a44 <sub_bytes+0x14>)
   16a32:	1e43      	subs	r3, r0, #1
   16a34:	300f      	adds	r0, #15
   16a36:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   16a3a:	5c8a      	ldrb	r2, [r1, r2]
   16a3c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   16a3e:	4283      	cmp	r3, r0
   16a40:	d1f9      	bne.n	16a36 <sub_bytes+0x6>
	}
}
   16a42:	4770      	bx	lr
   16a44:	00031658 	.word	0x00031658

00016a48 <tc_aes128_set_encrypt_key>:
{
   16a48:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   16a4a:	4e26      	ldr	r6, [pc, #152]	; (16ae4 <tc_aes128_set_encrypt_key+0x9c>)
{
   16a4c:	4607      	mov	r7, r0
   16a4e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   16a50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   16a52:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   16a54:	ad01      	add	r5, sp, #4
   16a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16a58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16a5c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   16a60:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   16a64:	4638      	mov	r0, r7
   16a66:	2f00      	cmp	r7, #0
   16a68:	d038      	beq.n	16adc <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   16a6a:	2c00      	cmp	r4, #0
   16a6c:	d038      	beq.n	16ae0 <tc_aes128_set_encrypt_key+0x98>
   16a6e:	1f38      	subs	r0, r7, #4
   16a70:	4621      	mov	r1, r4
   16a72:	4602      	mov	r2, r0
   16a74:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   16a76:	784b      	ldrb	r3, [r1, #1]
   16a78:	780d      	ldrb	r5, [r1, #0]
   16a7a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   16a7c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   16a80:	78cd      	ldrb	r5, [r1, #3]
   16a82:	432b      	orrs	r3, r5
   16a84:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   16a86:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   16a88:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   16a8c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   16a8e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   16a92:	d1f0      	bne.n	16a76 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   16a94:	4c14      	ldr	r4, [pc, #80]	; (16ae8 <tc_aes128_set_encrypt_key+0xa0>)
   16a96:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   16a98:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   16a9a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   16a9c:	d116      	bne.n	16acc <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   16a9e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   16aa2:	5ca5      	ldrb	r5, [r4, r2]
   16aa4:	0e1a      	lsrs	r2, r3, #24
   16aa6:	5ca2      	ldrb	r2, [r4, r2]
   16aa8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   16aac:	f3c3 2507 	ubfx	r5, r3, #8, #8
   16ab0:	b2db      	uxtb	r3, r3
   16ab2:	5d65      	ldrb	r5, [r4, r5]
   16ab4:	5ce3      	ldrb	r3, [r4, r3]
   16ab6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   16aba:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   16abe:	f021 0303 	bic.w	r3, r1, #3
   16ac2:	3330      	adds	r3, #48	; 0x30
   16ac4:	446b      	add	r3, sp
   16ac6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   16aca:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   16acc:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   16ad0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   16ad2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   16ad4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   16ad6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   16ad8:	d1de      	bne.n	16a98 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   16ada:	2001      	movs	r0, #1
}
   16adc:	b00d      	add	sp, #52	; 0x34
   16ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   16ae0:	4620      	mov	r0, r4
   16ae2:	e7fb      	b.n	16adc <tc_aes128_set_encrypt_key+0x94>
   16ae4:	00030478 	.word	0x00030478
   16ae8:	00031658 	.word	0x00031658

00016aec <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   16aec:	4801      	ldr	r0, [pc, #4]	; (16af4 <nrf_cc3xx_platform_abort_init+0x8>)
   16aee:	f010 bfff 	b.w	27af0 <nrf_cc3xx_platform_set_abort>
   16af2:	bf00      	nop
   16af4:	00030704 	.word	0x00030704

00016af8 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   16af8:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   16afa:	4604      	mov	r4, r0
   16afc:	b918      	cbnz	r0, 16b06 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   16afe:	4b0f      	ldr	r3, [pc, #60]	; (16b3c <mutex_free_platform+0x44>)
   16b00:	480f      	ldr	r0, [pc, #60]	; (16b40 <mutex_free_platform+0x48>)
   16b02:	685b      	ldr	r3, [r3, #4]
   16b04:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   16b06:	6861      	ldr	r1, [r4, #4]
   16b08:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   16b0c:	d00f      	beq.n	16b2e <mutex_free_platform+0x36>
   16b0e:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   16b12:	d00c      	beq.n	16b2e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   16b14:	4d0b      	ldr	r5, [pc, #44]	; (16b44 <mutex_free_platform+0x4c>)
   16b16:	42a9      	cmp	r1, r5
   16b18:	d009      	beq.n	16b2e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   16b1a:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   16b1e:	d007      	beq.n	16b30 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   16b20:	4809      	ldr	r0, [pc, #36]	; (16b48 <mutex_free_platform+0x50>)
   16b22:	4621      	mov	r1, r4
   16b24:	f018 fc92 	bl	2f44c <k_mem_slab_free>
        mutex->mutex = NULL;
   16b28:	2300      	movs	r3, #0
   16b2a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   16b2c:	6065      	str	r5, [r4, #4]
}
   16b2e:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   16b30:	6820      	ldr	r0, [r4, #0]
   16b32:	2214      	movs	r2, #20
   16b34:	f015 fbde 	bl	2c2f4 <memset>
   16b38:	e7f8      	b.n	16b2c <mutex_free_platform+0x34>
   16b3a:	bf00      	nop
   16b3c:	200009fc 	.word	0x200009fc
   16b40:	00031758 	.word	0x00031758
   16b44:	a95c5f2c 	.word	0xa95c5f2c
   16b48:	20003a90 	.word	0x20003a90

00016b4c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   16b4c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   16b4e:	b320      	cbz	r0, 16b9a <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   16b50:	6843      	ldr	r3, [r0, #4]
   16b52:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   16b56:	d110      	bne.n	16b7a <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16b58:	2201      	movs	r2, #1
   16b5a:	6803      	ldr	r3, [r0, #0]
   16b5c:	f3bf 8f5b 	dmb	ish
   16b60:	e853 1f00 	ldrex	r1, [r3]
   16b64:	2900      	cmp	r1, #0
   16b66:	d103      	bne.n	16b70 <mutex_lock_platform+0x24>
   16b68:	e843 2000 	strex	r0, r2, [r3]
   16b6c:	2800      	cmp	r0, #0
   16b6e:	d1f7      	bne.n	16b60 <mutex_lock_platform+0x14>
   16b70:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   16b74:	d10d      	bne.n	16b92 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   16b76:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   16b78:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   16b7a:	4a09      	ldr	r2, [pc, #36]	; (16ba0 <mutex_lock_platform+0x54>)
   16b7c:	4293      	cmp	r3, r2
   16b7e:	d00a      	beq.n	16b96 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   16b80:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   16b82:	f04f 32ff 	mov.w	r2, #4294967295
   16b86:	f04f 33ff 	mov.w	r3, #4294967295
   16b8a:	f00f fa9b 	bl	260c4 <z_impl_k_mutex_lock>
        if (ret == 0) {
   16b8e:	2800      	cmp	r0, #0
   16b90:	d0f1      	beq.n	16b76 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   16b92:	4804      	ldr	r0, [pc, #16]	; (16ba4 <mutex_lock_platform+0x58>)
   16b94:	e7f0      	b.n	16b78 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   16b96:	4804      	ldr	r0, [pc, #16]	; (16ba8 <mutex_lock_platform+0x5c>)
   16b98:	e7ee      	b.n	16b78 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   16b9a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   16b9e:	e7eb      	b.n	16b78 <mutex_lock_platform+0x2c>
   16ba0:	a95c5f2c 	.word	0xa95c5f2c
   16ba4:	ffff8fe9 	.word	0xffff8fe9
   16ba8:	ffff8fea 	.word	0xffff8fea

00016bac <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   16bac:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   16bae:	b1d8      	cbz	r0, 16be8 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   16bb0:	6843      	ldr	r3, [r0, #4]
   16bb2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   16bb6:	d110      	bne.n	16bda <mutex_unlock_platform+0x2e>
   16bb8:	2200      	movs	r2, #0
   16bba:	6803      	ldr	r3, [r0, #0]
   16bbc:	f3bf 8f5b 	dmb	ish
   16bc0:	e853 1f00 	ldrex	r1, [r3]
   16bc4:	2901      	cmp	r1, #1
   16bc6:	d103      	bne.n	16bd0 <mutex_unlock_platform+0x24>
   16bc8:	e843 2000 	strex	r0, r2, [r3]
   16bcc:	2800      	cmp	r0, #0
   16bce:	d1f7      	bne.n	16bc0 <mutex_unlock_platform+0x14>
   16bd0:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   16bd4:	d10b      	bne.n	16bee <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   16bd6:	2000      	movs	r0, #0
    }
}
   16bd8:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   16bda:	4a07      	ldr	r2, [pc, #28]	; (16bf8 <mutex_unlock_platform+0x4c>)
   16bdc:	4293      	cmp	r3, r2
   16bde:	d008      	beq.n	16bf2 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   16be0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   16be2:	f00f fae9 	bl	261b8 <z_impl_k_mutex_unlock>
   16be6:	e7f6      	b.n	16bd6 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   16be8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   16bec:	e7f4      	b.n	16bd8 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   16bee:	4803      	ldr	r0, [pc, #12]	; (16bfc <mutex_unlock_platform+0x50>)
   16bf0:	e7f2      	b.n	16bd8 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   16bf2:	4803      	ldr	r0, [pc, #12]	; (16c00 <mutex_unlock_platform+0x54>)
   16bf4:	e7f0      	b.n	16bd8 <mutex_unlock_platform+0x2c>
   16bf6:	bf00      	nop
   16bf8:	a95c5f2c 	.word	0xa95c5f2c
   16bfc:	ffff8fe9 	.word	0xffff8fe9
   16c00:	ffff8fea 	.word	0xffff8fea

00016c04 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   16c04:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   16c06:	4604      	mov	r4, r0
   16c08:	b918      	cbnz	r0, 16c12 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   16c0a:	4b1d      	ldr	r3, [pc, #116]	; (16c80 <mutex_init_platform+0x7c>)
   16c0c:	481d      	ldr	r0, [pc, #116]	; (16c84 <mutex_init_platform+0x80>)
   16c0e:	685b      	ldr	r3, [r3, #4]
   16c10:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   16c12:	6863      	ldr	r3, [r4, #4]
   16c14:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   16c18:	d02f      	beq.n	16c7a <mutex_init_platform+0x76>
   16c1a:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   16c1e:	d02c      	beq.n	16c7a <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   16c20:	4a19      	ldr	r2, [pc, #100]	; (16c88 <mutex_init_platform+0x84>)
   16c22:	4293      	cmp	r3, r2
   16c24:	d119      	bne.n	16c5a <mutex_init_platform+0x56>
   16c26:	6823      	ldr	r3, [r4, #0]
   16c28:	bb03      	cbnz	r3, 16c6c <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   16c2a:	4818      	ldr	r0, [pc, #96]	; (16c8c <mutex_init_platform+0x88>)
   16c2c:	f04f 32ff 	mov.w	r2, #4294967295
   16c30:	f04f 33ff 	mov.w	r3, #4294967295
   16c34:	4621      	mov	r1, r4
   16c36:	f00f f941 	bl	25ebc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   16c3a:	b908      	cbnz	r0, 16c40 <mutex_init_platform+0x3c>
   16c3c:	6823      	ldr	r3, [r4, #0]
   16c3e:	b91b      	cbnz	r3, 16c48 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   16c40:	4b0f      	ldr	r3, [pc, #60]	; (16c80 <mutex_init_platform+0x7c>)
   16c42:	4813      	ldr	r0, [pc, #76]	; (16c90 <mutex_init_platform+0x8c>)
   16c44:	685b      	ldr	r3, [r3, #4]
   16c46:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   16c48:	6820      	ldr	r0, [r4, #0]
   16c4a:	2214      	movs	r2, #20
   16c4c:	2100      	movs	r1, #0
   16c4e:	f015 fb51 	bl	2c2f4 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   16c52:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   16c56:	6063      	str	r3, [r4, #4]
   16c58:	e008      	b.n	16c6c <mutex_init_platform+0x68>
    switch(flags){
   16c5a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   16c5e:	d80d      	bhi.n	16c7c <mutex_init_platform+0x78>
   16c60:	2b3a      	cmp	r3, #58	; 0x3a
   16c62:	d003      	beq.n	16c6c <mutex_init_platform+0x68>
   16c64:	f640 62ba 	movw	r2, #3770	; 0xeba
   16c68:	4293      	cmp	r3, r2
   16c6a:	d1de      	bne.n	16c2a <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   16c6c:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   16c6e:	f018 fc32 	bl	2f4d6 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   16c72:	6863      	ldr	r3, [r4, #4]
   16c74:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   16c78:	6063      	str	r3, [r4, #4]
}
   16c7a:	bd10      	pop	{r4, pc}
    switch(flags){
   16c7c:	4a05      	ldr	r2, [pc, #20]	; (16c94 <mutex_init_platform+0x90>)
   16c7e:	e7f3      	b.n	16c68 <mutex_init_platform+0x64>
   16c80:	200009fc 	.word	0x200009fc
   16c84:	00031758 	.word	0x00031758
   16c88:	a95c5f2c 	.word	0xa95c5f2c
   16c8c:	20003a90 	.word	0x20003a90
   16c90:	0003177e 	.word	0x0003177e
   16c94:	3a00003a 	.word	0x3a00003a

00016c98 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   16c98:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   16c9a:	4906      	ldr	r1, [pc, #24]	; (16cb4 <nrf_cc3xx_platform_mutex_init+0x1c>)
   16c9c:	4806      	ldr	r0, [pc, #24]	; (16cb8 <nrf_cc3xx_platform_mutex_init+0x20>)
   16c9e:	2340      	movs	r3, #64	; 0x40
   16ca0:	2214      	movs	r2, #20
   16ca2:	f018 fbc5 	bl	2f430 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   16ca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   16caa:	4904      	ldr	r1, [pc, #16]	; (16cbc <nrf_cc3xx_platform_mutex_init+0x24>)
   16cac:	4804      	ldr	r0, [pc, #16]	; (16cc0 <nrf_cc3xx_platform_mutex_init+0x28>)
   16cae:	f010 bfe3 	b.w	27c78 <nrf_cc3xx_platform_set_mutexes>
   16cb2:	bf00      	nop
   16cb4:	20003590 	.word	0x20003590
   16cb8:	20003a90 	.word	0x20003a90
   16cbc:	0003070c 	.word	0x0003070c
   16cc0:	00030720 	.word	0x00030720

00016cc4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   16cc4:	4901      	ldr	r1, [pc, #4]	; (16ccc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   16cc6:	2210      	movs	r2, #16
	str	r2, [r1]
   16cc8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   16cca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   16ccc:	e000ed10 	.word	0xe000ed10

00016cd0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   16cd0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   16cd2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   16cd4:	f380 8811 	msr	BASEPRI, r0
	isb
   16cd8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   16cdc:	f3bf 8f4f 	dsb	sy
   16ce0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   16ce2:	b662      	cpsie	i
	isb
   16ce4:	f3bf 8f6f 	isb	sy

	bx	lr
   16ce8:	4770      	bx	lr
   16cea:	bf00      	nop

00016cec <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   16cec:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   16cee:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   16cf0:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   16cf4:	f3bf 8f4f 	dsb	sy
   16cf8:	bf20      	wfe

	msr	BASEPRI, r0
   16cfa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   16cfe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   16d00:	4770      	bx	lr
   16d02:	bf00      	nop

00016d04 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d08:	4681      	mov	r9, r0
   16d0a:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   16d0c:	460c      	mov	r4, r1
   16d0e:	2900      	cmp	r1, #0
   16d10:	d04c      	beq.n	16dac <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   16d12:	466e      	mov	r6, sp
   16d14:	b08a      	sub	sp, #40	; 0x28
   16d16:	e9d1 1200 	ldrd	r1, r2, [r1]
   16d1a:	68a3      	ldr	r3, [r4, #8]
   16d1c:	466d      	mov	r5, sp
   16d1e:	4827      	ldr	r0, [pc, #156]	; (16dbc <z_arm_fatal_error+0xb8>)
   16d20:	46a8      	mov	r8, r5
   16d22:	f04f 0a05 	mov.w	sl, #5
   16d26:	e9c5 0105 	strd	r0, r1, [r5, #20]
   16d2a:	e9c5 2307 	strd	r2, r3, [r5, #28]
   16d2e:	f848 af10 	str.w	sl, [r8, #16]!
   16d32:	4823      	ldr	r0, [pc, #140]	; (16dc0 <z_arm_fatal_error+0xbc>)
   16d34:	4642      	mov	r2, r8
   16d36:	2300      	movs	r3, #0
   16d38:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   16d3c:	f7fd ff42 	bl	14bc4 <z_impl_z_log_msg_static_create>
   16d40:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   16d42:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   16d46:	6963      	ldr	r3, [r4, #20]
   16d48:	46ad      	mov	sp, r5
   16d4a:	481e      	ldr	r0, [pc, #120]	; (16dc4 <z_arm_fatal_error+0xc0>)
   16d4c:	f8c5 a010 	str.w	sl, [r5, #16]
   16d50:	e9c5 0105 	strd	r0, r1, [r5, #20]
   16d54:	e9c5 2307 	strd	r2, r3, [r5, #28]
   16d58:	4819      	ldr	r0, [pc, #100]	; (16dc0 <z_arm_fatal_error+0xbc>)
   16d5a:	2300      	movs	r3, #0
   16d5c:	4642      	mov	r2, r8
   16d5e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   16d62:	f7fd ff2f 	bl	14bc4 <z_impl_z_log_msg_static_create>
   16d66:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   16d68:	b088      	sub	sp, #32
   16d6a:	69e3      	ldr	r3, [r4, #28]
   16d6c:	466d      	mov	r5, sp
   16d6e:	4a16      	ldr	r2, [pc, #88]	; (16dc8 <z_arm_fatal_error+0xc4>)
   16d70:	46a8      	mov	r8, r5
   16d72:	f04f 0a03 	mov.w	sl, #3
   16d76:	e9c5 2305 	strd	r2, r3, [r5, #20]
   16d7a:	f848 af10 	str.w	sl, [r8, #16]!
   16d7e:	4810      	ldr	r0, [pc, #64]	; (16dc0 <z_arm_fatal_error+0xbc>)
   16d80:	2300      	movs	r3, #0
   16d82:	4642      	mov	r2, r8
   16d84:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16d88:	f7fd ff1c 	bl	14bc4 <z_impl_z_log_msg_static_create>
   16d8c:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   16d8e:	69a3      	ldr	r3, [r4, #24]
   16d90:	46ad      	mov	sp, r5
   16d92:	4a0e      	ldr	r2, [pc, #56]	; (16dcc <z_arm_fatal_error+0xc8>)
   16d94:	f8c5 a010 	str.w	sl, [r5, #16]
   16d98:	e9c5 2305 	strd	r2, r3, [r5, #20]
   16d9c:	4808      	ldr	r0, [pc, #32]	; (16dc0 <z_arm_fatal_error+0xbc>)
   16d9e:	2300      	movs	r3, #0
   16da0:	4642      	mov	r2, r8
   16da2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16da6:	f7fd ff0d 	bl	14bc4 <z_impl_z_log_msg_static_create>
   16daa:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   16dac:	4621      	mov	r1, r4
   16dae:	4648      	mov	r0, r9
   16db0:	f00e fef0 	bl	25b94 <z_fatal_error>
}
   16db4:	46bd      	mov	sp, r7
   16db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16dba:	bf00      	nop
   16dbc:	000317ab 	.word	0x000317ab
   16dc0:	00030374 	.word	0x00030374
   16dc4:	000317da 	.word	0x000317da
   16dc8:	00031809 	.word	0x00031809
   16dcc:	00031818 	.word	0x00031818

00016dd0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   16dd0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   16dd2:	2800      	cmp	r0, #0
   16dd4:	db07      	blt.n	16de6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16dd6:	4a04      	ldr	r2, [pc, #16]	; (16de8 <arch_irq_enable+0x18>)
   16dd8:	0941      	lsrs	r1, r0, #5
   16dda:	2301      	movs	r3, #1
   16ddc:	f000 001f 	and.w	r0, r0, #31
   16de0:	4083      	lsls	r3, r0
   16de2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   16de6:	4770      	bx	lr
   16de8:	e000e100 	.word	0xe000e100

00016dec <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   16dec:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   16dee:	2800      	cmp	r0, #0
   16df0:	db0c      	blt.n	16e0c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16df2:	0943      	lsrs	r3, r0, #5
   16df4:	4906      	ldr	r1, [pc, #24]	; (16e10 <arch_irq_disable+0x24>)
   16df6:	f000 001f 	and.w	r0, r0, #31
   16dfa:	3320      	adds	r3, #32
   16dfc:	2201      	movs	r2, #1
   16dfe:	4082      	lsls	r2, r0
   16e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   16e04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16e08:	f3bf 8f6f 	isb	sy
}
   16e0c:	4770      	bx	lr
   16e0e:	bf00      	nop
   16e10:	e000e100 	.word	0xe000e100

00016e14 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   16e14:	4b05      	ldr	r3, [pc, #20]	; (16e2c <arch_irq_is_enabled+0x18>)
   16e16:	0942      	lsrs	r2, r0, #5
   16e18:	f000 001f 	and.w	r0, r0, #31
   16e1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16e20:	2301      	movs	r3, #1
   16e22:	fa03 f000 	lsl.w	r0, r3, r0
}
   16e26:	4010      	ands	r0, r2
   16e28:	4770      	bx	lr
   16e2a:	bf00      	nop
   16e2c:	e000e100 	.word	0xe000e100

00016e30 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   16e30:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   16e32:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   16e34:	bf54      	ite	pl
   16e36:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   16e38:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   16e3a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16e3c:	bfac      	ite	ge
   16e3e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16e42:	4a07      	ldrlt	r2, [pc, #28]	; (16e60 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16e44:	ea4f 1341 	mov.w	r3, r1, lsl #5
   16e48:	bfac      	ite	ge
   16e4a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16e4e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16e52:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16e54:	bfb4      	ite	lt
   16e56:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16e58:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   16e5c:	4770      	bx	lr
   16e5e:	bf00      	nop
   16e60:	e000ed14 	.word	0xe000ed14

00016e64 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   16e64:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   16e66:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   16e68:	4b04      	ldr	r3, [pc, #16]	; (16e7c <_arch_isr_direct_pm+0x18>)
   16e6a:	695a      	ldr	r2, [r3, #20]
   16e6c:	b11a      	cbz	r2, 16e76 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   16e6e:	2200      	movs	r2, #0
   16e70:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
   16e72:	f018 fb21 	bl	2f4b8 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   16e76:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   16e78:	bd08      	pop	{r3, pc}
   16e7a:	bf00      	nop
   16e7c:	20004a90 	.word	0x20004a90

00016e80 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   16e80:	bf30      	wfi
    b z_SysNmiOnReset
   16e82:	f7ff bffd 	b.w	16e80 <z_SysNmiOnReset>
   16e86:	bf00      	nop

00016e88 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   16e88:	4a0b      	ldr	r2, [pc, #44]	; (16eb8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   16e8a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   16e8c:	4b0b      	ldr	r3, [pc, #44]	; (16ebc <z_arm_prep_c+0x34>)
   16e8e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   16e92:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   16e94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16e98:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   16e9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   16ea0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   16ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   16ea8:	f00e ff30 	bl	25d0c <z_bss_zero>
	z_data_copy();
   16eac:	f00f ffa2 	bl	26df4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   16eb0:	f000 fbd6 	bl	17660 <z_arm_interrupt_init>
	z_cstart();
   16eb4:	f00e ff6e 	bl	25d94 <z_cstart>
   16eb8:	00001000 	.word	0x00001000
   16ebc:	e000ed00 	.word	0xe000ed00

00016ec0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   16ec0:	4a09      	ldr	r2, [pc, #36]	; (16ee8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   16ec2:	490a      	ldr	r1, [pc, #40]	; (16eec <arch_swap+0x2c>)
	_current->arch.basepri = key;
   16ec4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   16ec6:	6809      	ldr	r1, [r1, #0]
   16ec8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   16eca:	4909      	ldr	r1, [pc, #36]	; (16ef0 <arch_swap+0x30>)
	_current->arch.basepri = key;
   16ecc:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   16ece:	684b      	ldr	r3, [r1, #4]
   16ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   16ed4:	604b      	str	r3, [r1, #4]
   16ed6:	2300      	movs	r3, #0
   16ed8:	f383 8811 	msr	BASEPRI, r3
   16edc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   16ee0:	6893      	ldr	r3, [r2, #8]
}
   16ee2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   16ee4:	4770      	bx	lr
   16ee6:	bf00      	nop
   16ee8:	20004a90 	.word	0x20004a90
   16eec:	00030cf8 	.word	0x00030cf8
   16ef0:	e000ed00 	.word	0xe000ed00

00016ef4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   16ef4:	4912      	ldr	r1, [pc, #72]	; (16f40 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   16ef6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   16ef8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   16efc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   16efe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   16f02:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   16f06:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   16f08:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   16f0c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   16f10:	4f0c      	ldr	r7, [pc, #48]	; (16f44 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   16f12:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   16f16:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   16f18:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   16f1a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   16f1c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   16f1e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   16f20:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   16f22:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   16f26:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   16f28:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   16f2a:	f000 fc35 	bl	17798 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   16f2e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   16f32:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   16f36:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   16f3a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   16f3e:	4770      	bx	lr
    ldr r1, =_kernel
   16f40:	20004a90 	.word	0x20004a90
    ldr v4, =_SCS_ICSR
   16f44:	e000ed04 	.word	0xe000ed04

00016f48 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   16f48:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   16f4c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   16f4e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   16f52:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   16f56:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   16f58:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   16f5c:	2902      	cmp	r1, #2
    beq _oops
   16f5e:	d0ff      	beq.n	16f60 <_oops>

00016f60 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   16f60:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   16f62:	f015 f8d2 	bl	2c10a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   16f66:	bd01      	pop	{r0, pc}

00016f68 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   16f68:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   16f6c:	9b00      	ldr	r3, [sp, #0]
   16f6e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   16f72:	490a      	ldr	r1, [pc, #40]	; (16f9c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   16f74:	9b01      	ldr	r3, [sp, #4]
   16f76:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   16f7a:	9b02      	ldr	r3, [sp, #8]
   16f7c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   16f80:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   16f84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   16f88:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   16f8c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   16f90:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   16f92:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   16f94:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   16f96:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   16f98:	4770      	bx	lr
   16f9a:	bf00      	nop
   16f9c:	0002a587 	.word	0x0002a587

00016fa0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   16fa0:	4a09      	ldr	r2, [pc, #36]	; (16fc8 <z_check_thread_stack_fail+0x28>)
{
   16fa2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   16fa4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   16fa6:	b170      	cbz	r0, 16fc6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   16fa8:	f113 0f16 	cmn.w	r3, #22
   16fac:	6e80      	ldr	r0, [r0, #104]	; 0x68
   16fae:	d005      	beq.n	16fbc <z_check_thread_stack_fail+0x1c>
   16fb0:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   16fb4:	429a      	cmp	r2, r3
   16fb6:	d805      	bhi.n	16fc4 <z_check_thread_stack_fail+0x24>
   16fb8:	4283      	cmp	r3, r0
   16fba:	d203      	bcs.n	16fc4 <z_check_thread_stack_fail+0x24>
		return 0;
   16fbc:	4281      	cmp	r1, r0
   16fbe:	bf28      	it	cs
   16fc0:	2000      	movcs	r0, #0
   16fc2:	4770      	bx	lr
   16fc4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   16fc6:	4770      	bx	lr
   16fc8:	20004a90 	.word	0x20004a90

00016fcc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   16fcc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   16fce:	4b09      	ldr	r3, [pc, #36]	; (16ff4 <arch_switch_to_main_thread+0x28>)
{
   16fd0:	460d      	mov	r5, r1
   16fd2:	4614      	mov	r4, r2
	_current = main_thread;
   16fd4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   16fd6:	f000 fbdf 	bl	17798 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   16fda:	4620      	mov	r0, r4
   16fdc:	f385 8809 	msr	PSP, r5
   16fe0:	2100      	movs	r1, #0
   16fe2:	b663      	cpsie	if
   16fe4:	f381 8811 	msr	BASEPRI, r1
   16fe8:	f3bf 8f6f 	isb	sy
   16fec:	2200      	movs	r2, #0
   16fee:	2300      	movs	r3, #0
   16ff0:	f013 fac9 	bl	2a586 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   16ff4:	20004a90 	.word	0x20004a90

00016ff8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   16ff8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   16ffa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   16ffc:	4a0b      	ldr	r2, [pc, #44]	; (1702c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   16ffe:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   17000:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   17002:	bf1e      	ittt	ne
	movne	r1, #0
   17004:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   17006:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   17008:	f018 fa56 	blne	2f4b8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1700c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1700e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   17012:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   17016:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1701a:	4905      	ldr	r1, [pc, #20]	; (17030 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1701c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1701e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   17020:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   17022:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   17026:	4903      	ldr	r1, [pc, #12]	; (17034 <_isr_wrapper+0x3c>)
	bx r1
   17028:	4708      	bx	r1
   1702a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1702c:	20004a90 	.word	0x20004a90
	ldr r1, =_sw_isr_table
   17030:	00030038 	.word	0x00030038
	ldr r1, =z_arm_int_exit
   17034:	00017039 	.word	0x00017039

00017038 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   17038:	4b04      	ldr	r3, [pc, #16]	; (1704c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1703a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1703c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   1703e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   17040:	d003      	beq.n	1704a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   17042:	4903      	ldr	r1, [pc, #12]	; (17050 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   17044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   17048:	600a      	str	r2, [r1, #0]

0001704a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1704a:	4770      	bx	lr
	ldr r3, =_kernel
   1704c:	20004a90 	.word	0x20004a90
	ldr r1, =_SCS_ICSR
   17050:	e000ed04 	.word	0xe000ed04

00017054 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   17054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17058:	b086      	sub	sp, #24
   1705a:	4606      	mov	r6, r0
   1705c:	af00      	add	r7, sp, #0
   1705e:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
   17060:	4b47      	ldr	r3, [pc, #284]	; (17180 <bus_fault.constprop.0+0x12c>)
   17062:	617b      	str	r3, [r7, #20]
   17064:	2402      	movs	r4, #2
   17066:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1706a:	4846      	ldr	r0, [pc, #280]	; (17184 <bus_fault.constprop.0+0x130>)
   1706c:	613c      	str	r4, [r7, #16]
   1706e:	f107 0210 	add.w	r2, r7, #16
   17072:	f015 f859 	bl	2c128 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   17076:	4b44      	ldr	r3, [pc, #272]	; (17188 <bus_fault.constprop.0+0x134>)
   17078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1707a:	04d9      	lsls	r1, r3, #19
   1707c:	d56d      	bpl.n	1715a <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
   1707e:	4b43      	ldr	r3, [pc, #268]	; (1718c <bus_fault.constprop.0+0x138>)
   17080:	4840      	ldr	r0, [pc, #256]	; (17184 <bus_fault.constprop.0+0x130>)
   17082:	e9c7 4304 	strd	r4, r3, [r7, #16]
   17086:	f107 0210 	add.w	r2, r7, #16
   1708a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1708e:	f015 f84b 	bl	2c128 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
   17092:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   17094:	4b3c      	ldr	r3, [pc, #240]	; (17188 <bus_fault.constprop.0+0x134>)
   17096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17098:	051a      	lsls	r2, r3, #20
   1709a:	d50b      	bpl.n	170b4 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   1709c:	4b3c      	ldr	r3, [pc, #240]	; (17190 <bus_fault.constprop.0+0x13c>)
   1709e:	617b      	str	r3, [r7, #20]
   170a0:	2302      	movs	r3, #2
   170a2:	4838      	ldr	r0, [pc, #224]	; (17184 <bus_fault.constprop.0+0x130>)
   170a4:	613b      	str	r3, [r7, #16]
   170a6:	f107 0210 	add.w	r2, r7, #16
   170aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   170ae:	f015 f83b 	bl	2c128 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   170b2:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   170b4:	4c34      	ldr	r4, [pc, #208]	; (17188 <bus_fault.constprop.0+0x134>)
   170b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   170b8:	059b      	lsls	r3, r3, #22
   170ba:	d523      	bpl.n	17104 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
   170bc:	46e8      	mov	r8, sp
   170be:	4b35      	ldr	r3, [pc, #212]	; (17194 <bus_fault.constprop.0+0x140>)
   170c0:	617b      	str	r3, [r7, #20]
   170c2:	2302      	movs	r3, #2
   170c4:	482f      	ldr	r0, [pc, #188]	; (17184 <bus_fault.constprop.0+0x130>)
   170c6:	613b      	str	r3, [r7, #16]
   170c8:	f107 0210 	add.w	r2, r7, #16
   170cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   170d0:	f015 f82a 	bl	2c128 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   170d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   170d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   170d8:	0410      	lsls	r0, r2, #16
   170da:	d512      	bpl.n	17102 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   170dc:	b088      	sub	sp, #32
   170de:	466a      	mov	r2, sp
   170e0:	492d      	ldr	r1, [pc, #180]	; (17198 <bus_fault.constprop.0+0x144>)
   170e2:	4828      	ldr	r0, [pc, #160]	; (17184 <bus_fault.constprop.0+0x130>)
   170e4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   170e8:	2303      	movs	r3, #3
   170ea:	f842 3f10 	str.w	r3, [r2, #16]!
   170ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   170f2:	f015 f819 	bl	2c128 <z_log_msg_static_create.constprop.0>
   170f6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   170f8:	b11e      	cbz	r6, 17102 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   170fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   170fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   17100:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   17102:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   17104:	4b20      	ldr	r3, [pc, #128]	; (17188 <bus_fault.constprop.0+0x134>)
   17106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17108:	0559      	lsls	r1, r3, #21
   1710a:	d50b      	bpl.n	17124 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
   1710c:	4b23      	ldr	r3, [pc, #140]	; (1719c <bus_fault.constprop.0+0x148>)
   1710e:	617b      	str	r3, [r7, #20]
   17110:	2302      	movs	r3, #2
   17112:	481c      	ldr	r0, [pc, #112]	; (17184 <bus_fault.constprop.0+0x130>)
   17114:	613b      	str	r3, [r7, #16]
   17116:	f107 0210 	add.w	r2, r7, #16
   1711a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1711e:	f015 f803 	bl	2c128 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   17122:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   17124:	4b18      	ldr	r3, [pc, #96]	; (17188 <bus_fault.constprop.0+0x134>)
   17126:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   17128:	05d2      	lsls	r2, r2, #23
   1712a:	d518      	bpl.n	1715e <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
   1712c:	4b1c      	ldr	r3, [pc, #112]	; (171a0 <bus_fault.constprop.0+0x14c>)
   1712e:	617b      	str	r3, [r7, #20]
   17130:	2302      	movs	r3, #2
   17132:	4814      	ldr	r0, [pc, #80]	; (17184 <bus_fault.constprop.0+0x130>)
   17134:	613b      	str	r3, [r7, #16]
   17136:	f107 0210 	add.w	r2, r7, #16
   1713a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1713e:	f014 fff3 	bl	2c128 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   17142:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   17144:	4a10      	ldr	r2, [pc, #64]	; (17188 <bus_fault.constprop.0+0x134>)
   17146:	6a93      	ldr	r3, [r2, #40]	; 0x28
   17148:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1714c:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
   1714e:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   17150:	2300      	movs	r3, #0
   17152:	702b      	strb	r3, [r5, #0]
}
   17154:	46bd      	mov	sp, r7
   17156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   1715a:	2016      	movs	r0, #22
   1715c:	e79a      	b.n	17094 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1715e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17160:	049b      	lsls	r3, r3, #18
   17162:	d5ef      	bpl.n	17144 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   17164:	4b0f      	ldr	r3, [pc, #60]	; (171a4 <bus_fault.constprop.0+0x150>)
   17166:	617b      	str	r3, [r7, #20]
   17168:	2302      	movs	r3, #2
   1716a:	4806      	ldr	r0, [pc, #24]	; (17184 <bus_fault.constprop.0+0x130>)
   1716c:	613b      	str	r3, [r7, #16]
   1716e:	f107 0210 	add.w	r2, r7, #16
   17172:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17176:	f014 ffd7 	bl	2c128 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   1717a:	201c      	movs	r0, #28
   1717c:	e7e2      	b.n	17144 <bus_fault.constprop.0+0xf0>
   1717e:	bf00      	nop
   17180:	00031846 	.word	0x00031846
   17184:	00030374 	.word	0x00030374
   17188:	e000ed00 	.word	0xe000ed00
   1718c:	0003185c 	.word	0x0003185c
   17190:	0003186d 	.word	0x0003186d
   17194:	00031880 	.word	0x00031880
   17198:	00031899 	.word	0x00031899
   1719c:	000318ae 	.word	0x000318ae
   171a0:	000318c9 	.word	0x000318c9
   171a4:	000318e1 	.word	0x000318e1

000171a8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   171a8:	b510      	push	{r4, lr}
   171aa:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   171ac:	4b36      	ldr	r3, [pc, #216]	; (17288 <usage_fault.constprop.0+0xe0>)
   171ae:	4837      	ldr	r0, [pc, #220]	; (1728c <usage_fault.constprop.0+0xe4>)
   171b0:	9305      	str	r3, [sp, #20]
   171b2:	aa04      	add	r2, sp, #16
   171b4:	2402      	movs	r4, #2
   171b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   171ba:	9404      	str	r4, [sp, #16]
   171bc:	f014 ffb4 	bl	2c128 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   171c0:	4b33      	ldr	r3, [pc, #204]	; (17290 <usage_fault.constprop.0+0xe8>)
   171c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   171c4:	019a      	lsls	r2, r3, #6
   171c6:	d55d      	bpl.n	17284 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
   171c8:	4b32      	ldr	r3, [pc, #200]	; (17294 <usage_fault.constprop.0+0xec>)
   171ca:	4830      	ldr	r0, [pc, #192]	; (1728c <usage_fault.constprop.0+0xe4>)
   171cc:	aa04      	add	r2, sp, #16
   171ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   171d2:	e9cd 4304 	strd	r4, r3, [sp, #16]
   171d6:	f014 ffa7 	bl	2c128 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
   171da:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   171dc:	4b2c      	ldr	r3, [pc, #176]	; (17290 <usage_fault.constprop.0+0xe8>)
   171de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   171e0:	01db      	lsls	r3, r3, #7
   171e2:	d50a      	bpl.n	171fa <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
   171e4:	4b2c      	ldr	r3, [pc, #176]	; (17298 <usage_fault.constprop.0+0xf0>)
   171e6:	4829      	ldr	r0, [pc, #164]	; (1728c <usage_fault.constprop.0+0xe4>)
   171e8:	9305      	str	r3, [sp, #20]
   171ea:	aa04      	add	r2, sp, #16
   171ec:	2302      	movs	r3, #2
   171ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   171f2:	9304      	str	r3, [sp, #16]
   171f4:	f014 ff98 	bl	2c128 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   171f8:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   171fa:	4b25      	ldr	r3, [pc, #148]	; (17290 <usage_fault.constprop.0+0xe8>)
   171fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   171fe:	031c      	lsls	r4, r3, #12
   17200:	d50a      	bpl.n	17218 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
   17202:	4b26      	ldr	r3, [pc, #152]	; (1729c <usage_fault.constprop.0+0xf4>)
   17204:	4821      	ldr	r0, [pc, #132]	; (1728c <usage_fault.constprop.0+0xe4>)
   17206:	9305      	str	r3, [sp, #20]
   17208:	aa04      	add	r2, sp, #16
   1720a:	2302      	movs	r3, #2
   1720c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17210:	9304      	str	r3, [sp, #16]
   17212:	f014 ff89 	bl	2c128 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   17216:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   17218:	4b1d      	ldr	r3, [pc, #116]	; (17290 <usage_fault.constprop.0+0xe8>)
   1721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1721c:	0359      	lsls	r1, r3, #13
   1721e:	d50a      	bpl.n	17236 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   17220:	4b1f      	ldr	r3, [pc, #124]	; (172a0 <usage_fault.constprop.0+0xf8>)
   17222:	481a      	ldr	r0, [pc, #104]	; (1728c <usage_fault.constprop.0+0xe4>)
   17224:	9305      	str	r3, [sp, #20]
   17226:	aa04      	add	r2, sp, #16
   17228:	2302      	movs	r3, #2
   1722a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1722e:	9304      	str	r3, [sp, #16]
   17230:	f014 ff7a 	bl	2c128 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   17234:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   17236:	4b16      	ldr	r3, [pc, #88]	; (17290 <usage_fault.constprop.0+0xe8>)
   17238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1723a:	039a      	lsls	r2, r3, #14
   1723c:	d50a      	bpl.n	17254 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1723e:	4b19      	ldr	r3, [pc, #100]	; (172a4 <usage_fault.constprop.0+0xfc>)
   17240:	4812      	ldr	r0, [pc, #72]	; (1728c <usage_fault.constprop.0+0xe4>)
   17242:	9305      	str	r3, [sp, #20]
   17244:	aa04      	add	r2, sp, #16
   17246:	2302      	movs	r3, #2
   17248:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1724c:	9304      	str	r3, [sp, #16]
   1724e:	f014 ff6b 	bl	2c128 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   17252:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   17254:	4b0e      	ldr	r3, [pc, #56]	; (17290 <usage_fault.constprop.0+0xe8>)
   17256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17258:	03db      	lsls	r3, r3, #15
   1725a:	d50a      	bpl.n	17272 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1725c:	4b12      	ldr	r3, [pc, #72]	; (172a8 <usage_fault.constprop.0+0x100>)
   1725e:	480b      	ldr	r0, [pc, #44]	; (1728c <usage_fault.constprop.0+0xe4>)
   17260:	9305      	str	r3, [sp, #20]
   17262:	aa04      	add	r2, sp, #16
   17264:	2302      	movs	r3, #2
   17266:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1726a:	9304      	str	r3, [sp, #16]
   1726c:	f014 ff5c 	bl	2c128 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   17270:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   17272:	4a07      	ldr	r2, [pc, #28]	; (17290 <usage_fault.constprop.0+0xe8>)
   17274:	6a93      	ldr	r3, [r2, #40]	; 0x28
   17276:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1727a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1727e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   17280:	b006      	add	sp, #24
   17282:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   17284:	201d      	movs	r0, #29
   17286:	e7a9      	b.n	171dc <usage_fault.constprop.0+0x34>
   17288:	00031910 	.word	0x00031910
   1728c:	00030374 	.word	0x00030374
   17290:	e000ed00 	.word	0xe000ed00
   17294:	00031928 	.word	0x00031928
   17298:	0003193b 	.word	0x0003193b
   1729c:	00031955 	.word	0x00031955
   172a0:	00031973 	.word	0x00031973
   172a4:	00031998 	.word	0x00031998
   172a8:	000319b2 	.word	0x000319b2

000172ac <mem_manage_fault>:
{
   172ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   172b0:	b086      	sub	sp, #24
   172b2:	4681      	mov	r9, r0
   172b4:	af00      	add	r7, sp, #0
   172b6:	468a      	mov	sl, r1
   172b8:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   172ba:	4b51      	ldr	r3, [pc, #324]	; (17400 <mem_manage_fault+0x154>)
   172bc:	617b      	str	r3, [r7, #20]
   172be:	2402      	movs	r4, #2
   172c0:	4850      	ldr	r0, [pc, #320]	; (17404 <mem_manage_fault+0x158>)
   172c2:	613c      	str	r4, [r7, #16]
   172c4:	f107 0210 	add.w	r2, r7, #16
   172c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   172cc:	f014 ff2c 	bl	2c128 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   172d0:	4b4d      	ldr	r3, [pc, #308]	; (17408 <mem_manage_fault+0x15c>)
   172d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   172d4:	06de      	lsls	r6, r3, #27
   172d6:	d545      	bpl.n	17364 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
   172d8:	4b4c      	ldr	r3, [pc, #304]	; (1740c <mem_manage_fault+0x160>)
   172da:	484a      	ldr	r0, [pc, #296]	; (17404 <mem_manage_fault+0x158>)
   172dc:	e9c7 4304 	strd	r4, r3, [r7, #16]
   172e0:	f107 0210 	add.w	r2, r7, #16
   172e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
   172e8:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
   172ea:	f014 ff1d 	bl	2c128 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   172ee:	4b46      	ldr	r3, [pc, #280]	; (17408 <mem_manage_fault+0x15c>)
   172f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   172f2:	071d      	lsls	r5, r3, #28
   172f4:	d50b      	bpl.n	1730e <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
   172f6:	4b46      	ldr	r3, [pc, #280]	; (17410 <mem_manage_fault+0x164>)
   172f8:	617b      	str	r3, [r7, #20]
   172fa:	2302      	movs	r3, #2
   172fc:	4841      	ldr	r0, [pc, #260]	; (17404 <mem_manage_fault+0x158>)
   172fe:	613b      	str	r3, [r7, #16]
   17300:	f107 0210 	add.w	r2, r7, #16
   17304:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
   17308:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
   1730a:	f014 ff0d 	bl	2c128 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1730e:	4d3e      	ldr	r5, [pc, #248]	; (17408 <mem_manage_fault+0x15c>)
   17310:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17312:	0798      	lsls	r0, r3, #30
   17314:	d528      	bpl.n	17368 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
   17316:	466c      	mov	r4, sp
   17318:	4b3e      	ldr	r3, [pc, #248]	; (17414 <mem_manage_fault+0x168>)
   1731a:	617b      	str	r3, [r7, #20]
   1731c:	2302      	movs	r3, #2
   1731e:	613b      	str	r3, [r7, #16]
   17320:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17324:	4837      	ldr	r0, [pc, #220]	; (17404 <mem_manage_fault+0x158>)
   17326:	f107 0210 	add.w	r2, r7, #16
   1732a:	f014 fefd 	bl	2c128 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   1732e:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   17330:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17332:	0619      	lsls	r1, r3, #24
   17334:	d560      	bpl.n	173f8 <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   17336:	b088      	sub	sp, #32
   17338:	466a      	mov	r2, sp
   1733a:	4b37      	ldr	r3, [pc, #220]	; (17418 <mem_manage_fault+0x16c>)
   1733c:	4831      	ldr	r0, [pc, #196]	; (17404 <mem_manage_fault+0x158>)
   1733e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   17342:	2303      	movs	r3, #3
   17344:	f842 3f10 	str.w	r3, [r2, #16]!
   17348:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1734c:	f014 feec 	bl	2c128 <z_log_msg_static_create.constprop.0>
   17350:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
   17352:	f1ba 0f00 	cmp.w	sl, #0
   17356:	d003      	beq.n	17360 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   17358:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1735a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1735e:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   17360:	2413      	movs	r4, #19
   17362:	e003      	b.n	1736c <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   17364:	2410      	movs	r4, #16
   17366:	e7c2      	b.n	172ee <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
   17368:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1736c:	4b26      	ldr	r3, [pc, #152]	; (17408 <mem_manage_fault+0x15c>)
   1736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17370:	07da      	lsls	r2, r3, #31
   17372:	d50b      	bpl.n	1738c <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
   17374:	4b29      	ldr	r3, [pc, #164]	; (1741c <mem_manage_fault+0x170>)
   17376:	617b      	str	r3, [r7, #20]
   17378:	2302      	movs	r3, #2
   1737a:	4822      	ldr	r0, [pc, #136]	; (17404 <mem_manage_fault+0x158>)
   1737c:	613b      	str	r3, [r7, #16]
   1737e:	f107 0210 	add.w	r2, r7, #16
   17382:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   17386:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
   17388:	f014 fece 	bl	2c128 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1738c:	4b1e      	ldr	r3, [pc, #120]	; (17408 <mem_manage_fault+0x15c>)
   1738e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17390:	069b      	lsls	r3, r3, #26
   17392:	d50b      	bpl.n	173ac <mem_manage_fault+0x100>
		PR_FAULT_INFO(
   17394:	4b22      	ldr	r3, [pc, #136]	; (17420 <mem_manage_fault+0x174>)
   17396:	617b      	str	r3, [r7, #20]
   17398:	2302      	movs	r3, #2
   1739a:	481a      	ldr	r0, [pc, #104]	; (17404 <mem_manage_fault+0x158>)
   1739c:	613b      	str	r3, [r7, #16]
   1739e:	f107 0210 	add.w	r2, r7, #16
   173a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   173a6:	2415      	movs	r4, #21
		PR_FAULT_INFO(
   173a8:	f014 febe 	bl	2c128 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   173ac:	4b16      	ldr	r3, [pc, #88]	; (17408 <mem_manage_fault+0x15c>)
   173ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   173b0:	06d5      	lsls	r5, r2, #27
   173b2:	d402      	bmi.n	173ba <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   173b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   173b6:	0790      	lsls	r0, r2, #30
   173b8:	d50a      	bpl.n	173d0 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   173ba:	685b      	ldr	r3, [r3, #4]
   173bc:	0519      	lsls	r1, r3, #20
   173be:	d507      	bpl.n	173d0 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   173c0:	4649      	mov	r1, r9
   173c2:	4630      	mov	r0, r6
   173c4:	f7ff fdec 	bl	16fa0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   173c8:	b110      	cbz	r0, 173d0 <mem_manage_fault+0x124>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   173ca:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   173ce:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   173d0:	4b0d      	ldr	r3, [pc, #52]	; (17408 <mem_manage_fault+0x15c>)
   173d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   173d4:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   173d6:	bf42      	ittt	mi
   173d8:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   173da:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   173de:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   173e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   173e2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   173e6:	629a      	str	r2, [r3, #40]	; 0x28
}
   173e8:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
   173ea:	2300      	movs	r3, #0
}
   173ec:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   173ee:	f888 3000 	strb.w	r3, [r8]
}
   173f2:	46bd      	mov	sp, r7
   173f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
   173f8:	f06f 0615 	mvn.w	r6, #21
   173fc:	e7b0      	b.n	17360 <mem_manage_fault+0xb4>
   173fe:	bf00      	nop
   17400:	000319dd 	.word	0x000319dd
   17404:	00030374 	.word	0x00030374
   17408:	e000ed00 	.word	0xe000ed00
   1740c:	000319f3 	.word	0x000319f3
   17410:	0003186d 	.word	0x0003186d
   17414:	00031a26 	.word	0x00031a26
   17418:	00031a3e 	.word	0x00031a3e
   1741c:	00031a54 	.word	0x00031a54
   17420:	000318e1 	.word	0x000318e1

00017424 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   17424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   17428:	4b77      	ldr	r3, [pc, #476]	; (17608 <z_arm_fault+0x1e4>)
{
   1742a:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1742c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   17430:	af00      	add	r7, sp, #0
   17432:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   17434:	f3c8 0408 	ubfx	r4, r8, #0, #9
   17438:	2600      	movs	r6, #0
   1743a:	f386 8811 	msr	BASEPRI, r6
   1743e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   17442:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   17446:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1744a:	d10e      	bne.n	1746a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1744c:	f002 030c 	and.w	r3, r2, #12
   17450:	2b08      	cmp	r3, #8
   17452:	d119      	bne.n	17488 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   17454:	4b6d      	ldr	r3, [pc, #436]	; (1760c <z_arm_fault+0x1e8>)
   17456:	61fb      	str	r3, [r7, #28]
   17458:	2302      	movs	r3, #2
   1745a:	486d      	ldr	r0, [pc, #436]	; (17610 <z_arm_fault+0x1ec>)
   1745c:	61bb      	str	r3, [r7, #24]
   1745e:	f107 0218 	add.w	r2, r7, #24
   17462:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17466:	f014 fe5f 	bl	2c128 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
   1746a:	2600      	movs	r6, #0
		return NULL;
   1746c:	4635      	mov	r5, r6
	*recoverable = false;
   1746e:	2300      	movs	r3, #0
   17470:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   17472:	1ee3      	subs	r3, r4, #3
   17474:	2b09      	cmp	r3, #9
   17476:	f200 80a6 	bhi.w	175c6 <z_arm_fault+0x1a2>
   1747a:	e8df f003 	tbb	[pc, r3]
   1747e:	990a      	.short	0x990a
   17480:	a4a4959c 	.word	0xa4a4959c
   17484:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   17488:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   1748a:	bf4c      	ite	mi
   1748c:	460d      	movmi	r5, r1
			*nested_exc = true;
   1748e:	2601      	movpl	r6, #1
   17490:	e7ed      	b.n	1746e <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
   17492:	46e9      	mov	r9, sp
   17494:	4b5f      	ldr	r3, [pc, #380]	; (17614 <z_arm_fault+0x1f0>)
   17496:	61fb      	str	r3, [r7, #28]
   17498:	f04f 0802 	mov.w	r8, #2
   1749c:	f107 0218 	add.w	r2, r7, #24
   174a0:	485b      	ldr	r0, [pc, #364]	; (17610 <z_arm_fault+0x1ec>)
   174a2:	f8c7 8018 	str.w	r8, [r7, #24]
   174a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   174aa:	f014 fe3d 	bl	2c128 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   174ae:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   174b0:	4c55      	ldr	r4, [pc, #340]	; (17608 <z_arm_fault+0x1e4>)
	*recoverable = false;
   174b2:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   174b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   174b6:	079a      	lsls	r2, r3, #30
   174b8:	d50b      	bpl.n	174d2 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
   174ba:	4b57      	ldr	r3, [pc, #348]	; (17618 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
   174bc:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   174c0:	4853      	ldr	r0, [pc, #332]	; (17610 <z_arm_fault+0x1ec>)
   174c2:	f107 0218 	add.w	r2, r7, #24
   174c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   174ca:	f014 fe2d 	bl	2c128 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   174ce:	2400      	movs	r4, #0
   174d0:	e041      	b.n	17556 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   174d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   174d4:	2b00      	cmp	r3, #0
   174d6:	da01      	bge.n	174dc <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
   174d8:	4b50      	ldr	r3, [pc, #320]	; (1761c <z_arm_fault+0x1f8>)
   174da:	e7ef      	b.n	174bc <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   174dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   174de:	005b      	lsls	r3, r3, #1
   174e0:	d5f5      	bpl.n	174ce <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
   174e2:	4b4f      	ldr	r3, [pc, #316]	; (17620 <z_arm_fault+0x1fc>)
   174e4:	484a      	ldr	r0, [pc, #296]	; (17610 <z_arm_fault+0x1ec>)
   174e6:	e9c7 8306 	strd	r8, r3, [r7, #24]
   174ea:	f107 0218 	add.w	r2, r7, #24
   174ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   174f2:	f014 fe19 	bl	2c128 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   174f6:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   174f8:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   174fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   174fe:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   17500:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17504:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   17508:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1750a:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1750e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   17512:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   17514:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17518:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1751c:	f64d 7302 	movw	r3, #57090	; 0xdf02
   17520:	429a      	cmp	r2, r3
   17522:	d008      	beq.n	17536 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   17524:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17526:	b2db      	uxtb	r3, r3
   17528:	b38b      	cbz	r3, 1758e <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
   1752a:	1dfa      	adds	r2, r7, #7
   1752c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1752e:	4628      	mov	r0, r5
   17530:	f7ff febc 	bl	172ac <mem_manage_fault>
   17534:	e03a      	b.n	175ac <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   17536:	b088      	sub	sp, #32
   17538:	682b      	ldr	r3, [r5, #0]
   1753a:	466a      	mov	r2, sp
   1753c:	4939      	ldr	r1, [pc, #228]	; (17624 <z_arm_fault+0x200>)
   1753e:	4834      	ldr	r0, [pc, #208]	; (17610 <z_arm_fault+0x1ec>)
   17540:	e9c2 1305 	strd	r1, r3, [r2, #20]
   17544:	2303      	movs	r3, #3
   17546:	f842 3f10 	str.w	r3, [r2, #16]!
   1754a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1754e:	f014 fdeb 	bl	2c128 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   17552:	682c      	ldr	r4, [r5, #0]
   17554:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   17556:	79fb      	ldrb	r3, [r7, #7]
   17558:	b9ab      	cbnz	r3, 17586 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1755a:	2220      	movs	r2, #32
   1755c:	4629      	mov	r1, r5
   1755e:	f107 0008 	add.w	r0, r7, #8
   17562:	f014 febc 	bl	2c2de <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   17566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17568:	2e00      	cmp	r6, #0
   1756a:	d047      	beq.n	175fc <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1756c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   17570:	b922      	cbnz	r2, 1757c <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   17572:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   17576:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1757a:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   1757c:	f107 0108 	add.w	r1, r7, #8
   17580:	4620      	mov	r0, r4
   17582:	f7ff fbbf 	bl	16d04 <z_arm_fatal_error>
}
   17586:	372c      	adds	r7, #44	; 0x2c
   17588:	46bd      	mov	sp, r7
   1758a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1758e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17590:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   17594:	d004      	beq.n	175a0 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
   17596:	1df9      	adds	r1, r7, #7
   17598:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   1759a:	f7ff fd5b 	bl	17054 <bus_fault.constprop.0>
   1759e:	e005      	b.n	175ac <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   175a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   175a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   175a6:	d392      	bcc.n	174ce <z_arm_fault+0xaa>
			reason = usage_fault(esf);
   175a8:	f7ff fdfe 	bl	171a8 <usage_fault.constprop.0>
   175ac:	4604      	mov	r4, r0
   175ae:	e7d2      	b.n	17556 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
   175b0:	1dfa      	adds	r2, r7, #7
   175b2:	2100      	movs	r1, #0
   175b4:	e7bb      	b.n	1752e <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   175b6:	1df9      	adds	r1, r7, #7
   175b8:	2000      	movs	r0, #0
   175ba:	e7ee      	b.n	1759a <z_arm_fault+0x176>
	PR_FAULT_INFO(
   175bc:	4b1a      	ldr	r3, [pc, #104]	; (17628 <z_arm_fault+0x204>)
   175be:	61fb      	str	r3, [r7, #28]
   175c0:	2302      	movs	r3, #2
   175c2:	61bb      	str	r3, [r7, #24]
   175c4:	e77c      	b.n	174c0 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
   175c6:	4a19      	ldr	r2, [pc, #100]	; (1762c <z_arm_fault+0x208>)
   175c8:	4b19      	ldr	r3, [pc, #100]	; (17630 <z_arm_fault+0x20c>)
   175ca:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   175ce:	46e8      	mov	r8, sp
   175d0:	b08a      	sub	sp, #40	; 0x28
   175d2:	bf18      	it	ne
   175d4:	4613      	movne	r3, r2
   175d6:	466a      	mov	r2, sp
   175d8:	4916      	ldr	r1, [pc, #88]	; (17634 <z_arm_fault+0x210>)
   175da:	480d      	ldr	r0, [pc, #52]	; (17610 <z_arm_fault+0x1ec>)
   175dc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   175e0:	f44f 7300 	mov.w	r3, #512	; 0x200
   175e4:	8413      	strh	r3, [r2, #32]
   175e6:	3c10      	subs	r4, #16
   175e8:	4b13      	ldr	r3, [pc, #76]	; (17638 <z_arm_fault+0x214>)
   175ea:	61d4      	str	r4, [r2, #28]
   175ec:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   175f0:	f842 3f10 	str.w	r3, [r2, #16]!
   175f4:	f014 fd98 	bl	2c128 <z_log_msg_static_create.constprop.0>
   175f8:	46c5      	mov	sp, r8
}
   175fa:	e768      	b.n	174ce <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   175fc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   17600:	f023 0301 	bic.w	r3, r3, #1
   17604:	e7b9      	b.n	1757a <z_arm_fault+0x156>
   17606:	bf00      	nop
   17608:	e000ed00 	.word	0xe000ed00
   1760c:	00031aa1 	.word	0x00031aa1
   17610:	00030374 	.word	0x00030374
   17614:	00031acc 	.word	0x00031acc
   17618:	00031ae3 	.word	0x00031ae3
   1761c:	00031b04 	.word	0x00031b04
   17620:	00031b12 	.word	0x00031b12
   17624:	00031b31 	.word	0x00031b31
   17628:	00031b4d 	.word	0x00031b4d
   1762c:	00031a88 	.word	0x00031a88
   17630:	00031a73 	.word	0x00031a73
   17634:	00031b71 	.word	0x00031b71
   17638:	01000004 	.word	0x01000004

0001763c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1763c:	4a02      	ldr	r2, [pc, #8]	; (17648 <z_arm_fault_init+0xc>)
   1763e:	6953      	ldr	r3, [r2, #20]
   17640:	f043 0310 	orr.w	r3, r3, #16
   17644:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   17646:	4770      	bx	lr
   17648:	e000ed00 	.word	0xe000ed00

0001764c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1764c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   17650:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   17654:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   17656:	4672      	mov	r2, lr
	bl z_arm_fault
   17658:	f7ff fee4 	bl	17424 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1765c:	bd01      	pop	{r0, pc}
   1765e:	bf00      	nop

00017660 <z_arm_interrupt_init>:
   17660:	4804      	ldr	r0, [pc, #16]	; (17674 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   17662:	2300      	movs	r3, #0
   17664:	2140      	movs	r1, #64	; 0x40
   17666:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   17668:	3301      	adds	r3, #1
   1766a:	2b30      	cmp	r3, #48	; 0x30
   1766c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   17670:	d1f9      	bne.n	17666 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   17672:	4770      	bx	lr
   17674:	e000e100 	.word	0xe000e100

00017678 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   17678:	2000      	movs	r0, #0
    msr CONTROL, r0
   1767a:	f380 8814 	msr	CONTROL, r0
    isb
   1767e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   17682:	f7fc fcb3 	bl	13fec <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   17686:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   17688:	490d      	ldr	r1, [pc, #52]	; (176c0 <__start+0x48>)
    str r0, [r1]
   1768a:	6008      	str	r0, [r1, #0]
    dsb
   1768c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   17690:	480c      	ldr	r0, [pc, #48]	; (176c4 <__start+0x4c>)
    msr msp, r0
   17692:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   17696:	f000 f82b 	bl	176f0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1769a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1769c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   176a0:	4809      	ldr	r0, [pc, #36]	; (176c8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   176a2:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   176a6:	1840      	adds	r0, r0, r1
    msr PSP, r0
   176a8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   176ac:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   176b0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   176b2:	4308      	orrs	r0, r1
    msr CONTROL, r0
   176b4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   176b8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   176bc:	f7ff fbe4 	bl	16e88 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   176c0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   176c4:	200096c0 	.word	0x200096c0
    ldr r0, =z_interrupt_stacks
   176c8:	20008500 	.word	0x20008500

000176cc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   176cc:	4907      	ldr	r1, [pc, #28]	; (176ec <z_arm_clear_arm_mpu_config+0x20>)
   176ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   176d2:	2300      	movs	r3, #0
	int num_regions =
   176d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   176d8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   176da:	4293      	cmp	r3, r2
   176dc:	db00      	blt.n	176e0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   176de:	4770      	bx	lr
  MPU->RNR = rnr;
   176e0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   176e4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   176e8:	3301      	adds	r3, #1
   176ea:	e7f6      	b.n	176da <z_arm_clear_arm_mpu_config+0xe>
   176ec:	e000ed00 	.word	0xe000ed00

000176f0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   176f0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   176f2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   176f4:	2300      	movs	r3, #0
   176f6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   176fa:	f7ff ffe7 	bl	176cc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   176fe:	4b14      	ldr	r3, [pc, #80]	; (17750 <z_arm_init_arch_hw_at_boot+0x60>)
   17700:	f04f 32ff 	mov.w	r2, #4294967295
   17704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   17708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   1770c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   17710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   17714:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   17718:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   1771c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   17720:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   17724:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   17728:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1772c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   17730:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   17734:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   17738:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   1773c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   17740:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   17744:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   17746:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1774a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1774e:	bd08      	pop	{r3, pc}
   17750:	e000e100 	.word	0xe000e100

00017754 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   17754:	4b08      	ldr	r3, [pc, #32]	; (17778 <z_impl_k_thread_abort+0x24>)
   17756:	689b      	ldr	r3, [r3, #8]
   17758:	4283      	cmp	r3, r0
   1775a:	d10b      	bne.n	17774 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1775c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   17760:	b143      	cbz	r3, 17774 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   17762:	4b06      	ldr	r3, [pc, #24]	; (1777c <z_impl_k_thread_abort+0x28>)
   17764:	685a      	ldr	r2, [r3, #4]
   17766:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1776a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1776c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1776e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   17772:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   17774:	f00f bacc 	b.w	26d10 <z_thread_abort>
   17778:	20004a90 	.word	0x20004a90
   1777c:	e000ed00 	.word	0xe000ed00

00017780 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   17780:	4b02      	ldr	r3, [pc, #8]	; (1778c <z_arm_configure_static_mpu_regions+0xc>)
   17782:	4a03      	ldr	r2, [pc, #12]	; (17790 <z_arm_configure_static_mpu_regions+0x10>)
   17784:	4803      	ldr	r0, [pc, #12]	; (17794 <z_arm_configure_static_mpu_regions+0x14>)
   17786:	2101      	movs	r1, #1
   17788:	f000 b892 	b.w	178b0 <arm_core_mpu_configure_static_mpu_regions>
   1778c:	20040000 	.word	0x20040000
   17790:	20000000 	.word	0x20000000
   17794:	00030730 	.word	0x00030730

00017798 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   17798:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   1779a:	4b05      	ldr	r3, [pc, #20]	; (177b0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   1779c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   1779e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   177a0:	4a04      	ldr	r2, [pc, #16]	; (177b4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   177a2:	2140      	movs	r1, #64	; 0x40
   177a4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   177a8:	4618      	mov	r0, r3
   177aa:	2101      	movs	r1, #1
   177ac:	f000 b88a 	b.w	178c4 <arm_core_mpu_configure_dynamic_mpu_regions>
   177b0:	20003aac 	.word	0x20003aac
   177b4:	150b0000 	.word	0x150b0000

000177b8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   177b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   177bc:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 17874 <mpu_configure_regions+0xbc>
   177c0:	469c      	mov	ip, r3
   177c2:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   177c4:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   177c6:	2300      	movs	r3, #0
   177c8:	428b      	cmp	r3, r1
   177ca:	da1a      	bge.n	17802 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   177cc:	6844      	ldr	r4, [r0, #4]
   177ce:	2c00      	cmp	r4, #0
   177d0:	d04d      	beq.n	1786e <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   177d2:	f1bc 0f00 	cmp.w	ip, #0
   177d6:	d01d      	beq.n	17814 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   177d8:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   177da:	4234      	tst	r4, r6
   177dc:	d015      	beq.n	1780a <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   177de:	466c      	mov	r4, sp
   177e0:	b088      	sub	sp, #32
   177e2:	466a      	mov	r2, sp
   177e4:	4924      	ldr	r1, [pc, #144]	; (17878 <mpu_configure_regions+0xc0>)
   177e6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   177ea:	2303      	movs	r3, #3
   177ec:	f842 3f10 	str.w	r3, [r2, #16]!
   177f0:	4822      	ldr	r0, [pc, #136]	; (1787c <mpu_configure_regions+0xc4>)
   177f2:	2300      	movs	r3, #0
   177f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   177f8:	f7fd f9e4 	bl	14bc4 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   177fc:	f06f 0515 	mvn.w	r5, #21
   17800:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   17802:	4628      	mov	r0, r5
   17804:	46bd      	mov	sp, r7
   17806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   1780a:	2c1f      	cmp	r4, #31
   1780c:	d9e7      	bls.n	177de <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   1780e:	6802      	ldr	r2, [r0, #0]
		&&
   17810:	4216      	tst	r6, r2
   17812:	d1e4      	bne.n	177de <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   17814:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   17816:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   17818:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1781a:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   1781e:	d914      	bls.n	1784a <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
   17820:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   17824:	d813      	bhi.n	1784e <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   17826:	3c01      	subs	r4, #1
   17828:	fab4 f484 	clz	r4, r4
   1782c:	f1c4 041f 	rsb	r4, r4, #31
   17830:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   17832:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   17836:	ea46 0604 	orr.w	r6, r6, r4
   1783a:	d90a      	bls.n	17852 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1783c:	466c      	mov	r4, sp
   1783e:	b088      	sub	sp, #32
   17840:	466a      	mov	r2, sp
   17842:	4b0f      	ldr	r3, [pc, #60]	; (17880 <mpu_configure_regions+0xc8>)
   17844:	e9c2 3505 	strd	r3, r5, [r2, #20]
   17848:	e7cf      	b.n	177ea <mpu_configure_regions+0x32>
		return REGION_32B;
   1784a:	2408      	movs	r4, #8
   1784c:	e7f1      	b.n	17832 <mpu_configure_regions+0x7a>
		return REGION_4G;
   1784e:	243e      	movs	r4, #62	; 0x3e
   17850:	e7ef      	b.n	17832 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   17852:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   17856:	432a      	orrs	r2, r5
   17858:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1785c:	f046 0601 	orr.w	r6, r6, #1
   17860:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   17864:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   17868:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1786a:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   1786e:	3301      	adds	r3, #1
   17870:	300c      	adds	r0, #12
   17872:	e7a9      	b.n	177c8 <mpu_configure_regions+0x10>
   17874:	e000ed00 	.word	0xe000ed00
   17878:	00031b88 	.word	0x00031b88
   1787c:	0003035c 	.word	0x0003035c
   17880:	00031bab 	.word	0x00031bab

00017884 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   17884:	4b04      	ldr	r3, [pc, #16]	; (17898 <arm_core_mpu_enable+0x14>)
   17886:	2205      	movs	r2, #5
   17888:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1788c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17890:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   17894:	4770      	bx	lr
   17896:	bf00      	nop
   17898:	e000ed00 	.word	0xe000ed00

0001789c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1789c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   178a0:	4b02      	ldr	r3, [pc, #8]	; (178ac <arm_core_mpu_disable+0x10>)
   178a2:	2200      	movs	r2, #0
   178a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   178a8:	4770      	bx	lr
   178aa:	bf00      	nop
   178ac:	e000ed00 	.word	0xe000ed00

000178b0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   178b0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   178b2:	4c03      	ldr	r4, [pc, #12]	; (178c0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   178b4:	2301      	movs	r3, #1
   178b6:	7822      	ldrb	r2, [r4, #0]
   178b8:	f7ff ff7e 	bl	177b8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   178bc:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   178be:	bd10      	pop	{r4, pc}
   178c0:	200055fb 	.word	0x200055fb

000178c4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   178c4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   178c6:	4a09      	ldr	r2, [pc, #36]	; (178ec <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   178c8:	2300      	movs	r3, #0
   178ca:	7812      	ldrb	r2, [r2, #0]
   178cc:	f7ff ff74 	bl	177b8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   178d0:	f110 0f16 	cmn.w	r0, #22
   178d4:	d003      	beq.n	178de <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   178d6:	4b06      	ldr	r3, [pc, #24]	; (178f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   178d8:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   178da:	2807      	cmp	r0, #7
   178dc:	dd00      	ble.n	178e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   178de:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   178e0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   178e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   178e8:	3001      	adds	r0, #1
   178ea:	e7f6      	b.n	178da <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   178ec:	200055fb 	.word	0x200055fb
   178f0:	e000ed00 	.word	0xe000ed00

000178f4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   178f4:	4914      	ldr	r1, [pc, #80]	; (17948 <z_arm_mpu_init+0x54>)
   178f6:	6808      	ldr	r0, [r1, #0]
   178f8:	2808      	cmp	r0, #8
{
   178fa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   178fc:	d821      	bhi.n	17942 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   178fe:	f7ff ffcd 	bl	1789c <arm_core_mpu_disable>
   17902:	4c12      	ldr	r4, [pc, #72]	; (1794c <z_arm_mpu_init+0x58>)
   17904:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   17906:	2200      	movs	r2, #0
   17908:	4290      	cmp	r0, r2
   1790a:	f101 010c 	add.w	r1, r1, #12
   1790e:	d105      	bne.n	1791c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   17910:	4b0f      	ldr	r3, [pc, #60]	; (17950 <z_arm_mpu_init+0x5c>)
   17912:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   17914:	f7ff ffb6 	bl	17884 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   17918:	2000      	movs	r0, #0
}
   1791a:	bd10      	pop	{r4, pc}
   1791c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   17920:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   17924:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   17928:	4313      	orrs	r3, r2
   1792a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1792e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   17932:	f851 3c04 	ldr.w	r3, [r1, #-4]
   17936:	f043 0301 	orr.w	r3, r3, #1
   1793a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1793e:	3201      	adds	r2, #1
   17940:	e7e2      	b.n	17908 <z_arm_mpu_init+0x14>
		return -1;
   17942:	f04f 30ff 	mov.w	r0, #4294967295
   17946:	e7e8      	b.n	1791a <z_arm_mpu_init+0x26>
   17948:	0003073c 	.word	0x0003073c
   1794c:	e000ed00 	.word	0xe000ed00
   17950:	200055fb 	.word	0x200055fb

00017954 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   17954:	4b01      	ldr	r3, [pc, #4]	; (1795c <__stdout_hook_install+0x8>)
   17956:	6018      	str	r0, [r3, #0]
}
   17958:	4770      	bx	lr
   1795a:	bf00      	nop
   1795c:	20000824 	.word	0x20000824

00017960 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
   17960:	b510      	push	{r4, lr}
	__asm__ volatile(
   17962:	f04f 0340 	mov.w	r3, #64	; 0x40
   17966:	f3ef 8011 	mrs	r0, BASEPRI
   1796a:	f383 8812 	msr	BASEPRI_MAX, r3
   1796e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   17972:	4a11      	ldr	r2, [pc, #68]	; (179b8 <nordicsemi_nrf52_init+0x58>)
   17974:	2301      	movs	r3, #1
   17976:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1797a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1797e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   17982:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   17986:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   1798a:	2c08      	cmp	r4, #8
   1798c:	d108      	bne.n	179a0 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1798e:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   17992:	2905      	cmp	r1, #5
   17994:	d804      	bhi.n	179a0 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   17996:	4c09      	ldr	r4, [pc, #36]	; (179bc <nordicsemi_nrf52_init+0x5c>)
   17998:	5c61      	ldrb	r1, [r4, r1]
   1799a:	b109      	cbz	r1, 179a0 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   1799c:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   179a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   179a4:	2201      	movs	r2, #1
   179a6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   179aa:	f380 8811 	msr	BASEPRI, r0
   179ae:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   179b2:	2000      	movs	r0, #0
   179b4:	bd10      	pop	{r4, pc}
   179b6:	bf00      	nop
   179b8:	4001e000 	.word	0x4001e000
   179bc:	00031be0 	.word	0x00031be0

000179c0 <sys_arch_reboot>:
    *p_gpregret = val;
   179c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   179c4:	b2c0      	uxtb	r0, r0
   179c6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   179ca:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   179ce:	4905      	ldr	r1, [pc, #20]	; (179e4 <sys_arch_reboot+0x24>)
   179d0:	4b05      	ldr	r3, [pc, #20]	; (179e8 <sys_arch_reboot+0x28>)
   179d2:	68ca      	ldr	r2, [r1, #12]
   179d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   179d8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   179da:	60cb      	str	r3, [r1, #12]
   179dc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   179e0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   179e2:	e7fd      	b.n	179e0 <sys_arch_reboot+0x20>
   179e4:	e000ed00 	.word	0xe000ed00
   179e8:	05fa0004 	.word	0x05fa0004

000179ec <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   179ec:	b120      	cbz	r0, 179f8 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   179ee:	4b03      	ldr	r3, [pc, #12]	; (179fc <arch_busy_wait+0x10>)
   179f0:	0180      	lsls	r0, r0, #6
   179f2:	f043 0301 	orr.w	r3, r3, #1
   179f6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   179f8:	4770      	bx	lr
   179fa:	bf00      	nop
   179fc:	00030530 	.word	0x00030530

00017a00 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
   17a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17a04:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
   17a08:	07db      	lsls	r3, r3, #31
   17a0a:	d52e      	bpl.n	17a6a <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
   17a0c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   17a10:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   17a14:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
   17a18:	2b07      	cmp	r3, #7
   17a1a:	d126      	bne.n	17a6a <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   17a1c:	4a14      	ldr	r2, [pc, #80]	; (17a70 <board_nrf52840dongle_nrf52840_init+0x70>)
   17a1e:	2301      	movs	r3, #1
   17a20:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   17a24:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   17a28:	2b00      	cmp	r3, #0
   17a2a:	d0fb      	beq.n	17a24 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
   17a2c:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   17a30:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
   17a34:	f023 0307 	bic.w	r3, r3, #7
   17a38:	f043 0304 	orr.w	r3, r3, #4
		NRF_UICR->REGOUT0 =
   17a3c:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   17a40:	2300      	movs	r3, #0
   17a42:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   17a46:	4a0a      	ldr	r2, [pc, #40]	; (17a70 <board_nrf52840dongle_nrf52840_init+0x70>)
   17a48:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   17a4c:	2b00      	cmp	r3, #0
   17a4e:	d0fb      	beq.n	17a48 <board_nrf52840dongle_nrf52840_init+0x48>
   17a50:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   17a54:	4907      	ldr	r1, [pc, #28]	; (17a74 <board_nrf52840dongle_nrf52840_init+0x74>)
   17a56:	4b08      	ldr	r3, [pc, #32]	; (17a78 <board_nrf52840dongle_nrf52840_init+0x78>)
   17a58:	68ca      	ldr	r2, [r1, #12]
   17a5a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   17a5e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   17a60:	60cb      	str	r3, [r1, #12]
   17a62:	f3bf 8f4f 	dsb	sy
    __NOP();
   17a66:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   17a68:	e7fd      	b.n	17a66 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
   17a6a:	2000      	movs	r0, #0
   17a6c:	4770      	bx	lr
   17a6e:	bf00      	nop
   17a70:	4001e000 	.word	0x4001e000
   17a74:	e000ed00 	.word	0xe000ed00
   17a78:	05fa0004 	.word	0x05fa0004

00017a7c <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
   17a7c:	b508      	push	{r3, lr}
   17a7e:	4804      	ldr	r0, [pc, #16]	; (17a90 <xoshiro128_initialize+0x14>)
   17a80:	f017 fc3f 	bl	2f302 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   17a84:	2800      	cmp	r0, #0
}
   17a86:	bf0c      	ite	eq
   17a88:	f06f 0012 	mvneq.w	r0, #18
   17a8c:	2000      	movne	r0, #0
   17a8e:	bd08      	pop	{r3, pc}
   17a90:	0002ffc0 	.word	0x0002ffc0

00017a94 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   17a94:	4b0e      	ldr	r3, [pc, #56]	; (17ad0 <bt_hex+0x3c>)
   17a96:	2940      	cmp	r1, #64	; 0x40
{
   17a98:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   17a9a:	bf28      	it	cs
   17a9c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   17a9e:	4c0d      	ldr	r4, [pc, #52]	; (17ad4 <bt_hex+0x40>)
   17aa0:	1846      	adds	r6, r0, r1
   17aa2:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   17aa4:	42b0      	cmp	r0, r6
   17aa6:	f103 0302 	add.w	r3, r3, #2
   17aaa:	d104      	bne.n	17ab6 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   17aac:	2300      	movs	r3, #0
   17aae:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   17ab2:	4807      	ldr	r0, [pc, #28]	; (17ad0 <bt_hex+0x3c>)
   17ab4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   17ab6:	7802      	ldrb	r2, [r0, #0]
   17ab8:	0912      	lsrs	r2, r2, #4
   17aba:	5ca2      	ldrb	r2, [r4, r2]
   17abc:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   17ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
   17ac4:	f002 020f 	and.w	r2, r2, #15
   17ac8:	5ca2      	ldrb	r2, [r4, r2]
   17aca:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   17ace:	e7e9      	b.n	17aa4 <bt_hex+0x10>
   17ad0:	2000561a 	.word	0x2000561a
   17ad4:	00031c04 	.word	0x00031c04

00017ad8 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   17ad8:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   17ada:	7803      	ldrb	r3, [r0, #0]
   17adc:	b08b      	sub	sp, #44	; 0x2c
   17ade:	4604      	mov	r4, r0
   17ae0:	ad07      	add	r5, sp, #28
   17ae2:	2b03      	cmp	r3, #3
   17ae4:	d821      	bhi.n	17b2a <bt_addr_le_str+0x52>
   17ae6:	e8df f003 	tbb	[pc, r3]
   17aea:	1a02      	.short	0x1a02
   17aec:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   17aee:	4912      	ldr	r1, [pc, #72]	; (17b38 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   17af0:	4628      	mov	r0, r5
   17af2:	f014 fb93 	bl	2c21c <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   17af6:	9505      	str	r5, [sp, #20]
   17af8:	7863      	ldrb	r3, [r4, #1]
   17afa:	9304      	str	r3, [sp, #16]
   17afc:	78a3      	ldrb	r3, [r4, #2]
   17afe:	9303      	str	r3, [sp, #12]
   17b00:	78e3      	ldrb	r3, [r4, #3]
   17b02:	9302      	str	r3, [sp, #8]
   17b04:	7923      	ldrb	r3, [r4, #4]
   17b06:	9301      	str	r3, [sp, #4]
   17b08:	7963      	ldrb	r3, [r4, #5]
   17b0a:	9300      	str	r3, [sp, #0]
   17b0c:	79a3      	ldrb	r3, [r4, #6]
   17b0e:	4a0b      	ldr	r2, [pc, #44]	; (17b3c <bt_addr_le_str+0x64>)
   17b10:	480b      	ldr	r0, [pc, #44]	; (17b40 <bt_addr_le_str+0x68>)
   17b12:	211e      	movs	r1, #30
   17b14:	f012 fd2a 	bl	2a56c <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   17b18:	4809      	ldr	r0, [pc, #36]	; (17b40 <bt_addr_le_str+0x68>)
   17b1a:	b00b      	add	sp, #44	; 0x2c
   17b1c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   17b1e:	4909      	ldr	r1, [pc, #36]	; (17b44 <bt_addr_le_str+0x6c>)
   17b20:	e7e6      	b.n	17af0 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   17b22:	4909      	ldr	r1, [pc, #36]	; (17b48 <bt_addr_le_str+0x70>)
   17b24:	e7e4      	b.n	17af0 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   17b26:	4909      	ldr	r1, [pc, #36]	; (17b4c <bt_addr_le_str+0x74>)
   17b28:	e7e2      	b.n	17af0 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   17b2a:	4a09      	ldr	r2, [pc, #36]	; (17b50 <bt_addr_le_str+0x78>)
   17b2c:	210a      	movs	r1, #10
   17b2e:	4628      	mov	r0, r5
   17b30:	f012 fd1c 	bl	2a56c <snprintk>
		break;
   17b34:	e7df      	b.n	17af6 <bt_addr_le_str+0x1e>
   17b36:	bf00      	nop
   17b38:	000311c8 	.word	0x000311c8
   17b3c:	000311ea 	.word	0x000311ea
   17b40:	200055fc 	.word	0x200055fc
   17b44:	000311cf 	.word	0x000311cf
   17b48:	000311d6 	.word	0x000311d6
   17b4c:	000311e0 	.word	0x000311e0
   17b50:	00033964 	.word	0x00033964

00017b54 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   17b54:	b5b0      	push	{r4, r5, r7, lr}
   17b56:	b086      	sub	sp, #24
	int err;
	LOG_INF("Saving ID");
   17b58:	466d      	mov	r5, sp
{
   17b5a:	af00      	add	r7, sp, #0
	LOG_INF("Saving ID");
   17b5c:	4b1d      	ldr	r3, [pc, #116]	; (17bd4 <save_id+0x80>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   17b5e:	4c1e      	ldr	r4, [pc, #120]	; (17bd8 <save_id+0x84>)
	LOG_INF("Saving ID");
   17b60:	481e      	ldr	r0, [pc, #120]	; (17bdc <save_id+0x88>)
   17b62:	617b      	str	r3, [r7, #20]
   17b64:	f107 0210 	add.w	r2, r7, #16
   17b68:	2302      	movs	r3, #2
   17b6a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   17b6e:	613b      	str	r3, [r7, #16]
   17b70:	f014 fc25 	bl	2c3be <z_log_msg_static_create.constprop.0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   17b74:	79e2      	ldrb	r2, [r4, #7]
   17b76:	481a      	ldr	r0, [pc, #104]	; (17be0 <save_id+0x8c>)
   17b78:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   17b7c:	4621      	mov	r1, r4
   17b7e:	f7fe fd33 	bl	165e8 <settings_save_one>
	if (err) {
   17b82:	b168      	cbz	r0, 17ba0 <save_id+0x4c>
		LOG_ERR("Failed to save ID (err %d)", err);
   17b84:	b088      	sub	sp, #32
   17b86:	466a      	mov	r2, sp
   17b88:	4b16      	ldr	r3, [pc, #88]	; (17be4 <save_id+0x90>)
   17b8a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17b8e:	2303      	movs	r3, #3
   17b90:	f842 3f10 	str.w	r3, [r2, #16]!
   17b94:	4811      	ldr	r0, [pc, #68]	; (17bdc <save_id+0x88>)
   17b96:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17b9a:	f014 fc10 	bl	2c3be <z_log_msg_static_create.constprop.0>
   17b9e:	46ad      	mov	sp, r5
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   17ba0:	79e2      	ldrb	r2, [r4, #7]
   17ba2:	4911      	ldr	r1, [pc, #68]	; (17be8 <save_id+0x94>)
   17ba4:	4811      	ldr	r0, [pc, #68]	; (17bec <save_id+0x98>)
   17ba6:	0112      	lsls	r2, r2, #4
   17ba8:	f7fe fd1e 	bl	165e8 <settings_save_one>
	if (err) {
   17bac:	b170      	cbz	r0, 17bcc <save_id+0x78>
		LOG_ERR("Failed to save IRK (err %d)", err);
   17bae:	466c      	mov	r4, sp
   17bb0:	b088      	sub	sp, #32
   17bb2:	466a      	mov	r2, sp
   17bb4:	4b0e      	ldr	r3, [pc, #56]	; (17bf0 <save_id+0x9c>)
   17bb6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17bba:	2303      	movs	r3, #3
   17bbc:	f842 3f10 	str.w	r3, [r2, #16]!
   17bc0:	4806      	ldr	r0, [pc, #24]	; (17bdc <save_id+0x88>)
   17bc2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17bc6:	f014 fbfa 	bl	2c3be <z_log_msg_static_create.constprop.0>
   17bca:	46a5      	mov	sp, r4
	}
#endif
}
   17bcc:	3718      	adds	r7, #24
   17bce:	46bd      	mov	sp, r7
   17bd0:	bdb0      	pop	{r4, r5, r7, pc}
   17bd2:	bf00      	nop
   17bd4:	00031c1c 	.word	0x00031c1c
   17bd8:	200004f0 	.word	0x200004f0
   17bdc:	000302f4 	.word	0x000302f4
   17be0:	00031c26 	.word	0x00031c26
   17be4:	00031c2c 	.word	0x00031c2c
   17be8:	20000658 	.word	0x20000658
   17bec:	00031c47 	.word	0x00031c47
   17bf0:	00031c4e 	.word	0x00031c4e

00017bf4 <set_setting>:
{
   17bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17bf8:	4c3c      	ldr	r4, [pc, #240]	; (17cec <set_setting+0xf8>)
   17bfa:	f3bf 8f5b 	dmb	ish
   17bfe:	461f      	mov	r7, r3
   17c00:	6823      	ldr	r3, [r4, #0]
   17c02:	f3bf 8f5b 	dmb	ish
   17c06:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17c08:	07da      	lsls	r2, r3, #31
{
   17c0a:	b088      	sub	sp, #32
   17c0c:	4605      	mov	r5, r0
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17c0e:	d52b      	bpl.n	17c68 <set_setting+0x74>
	if (!name) {
   17c10:	b960      	cbnz	r0, 17c2c <set_setting+0x38>
		LOG_ERR("Insufficient number of arguments");
   17c12:	4b37      	ldr	r3, [pc, #220]	; (17cf0 <set_setting+0xfc>)
   17c14:	9307      	str	r3, [sp, #28]
   17c16:	4837      	ldr	r0, [pc, #220]	; (17cf4 <set_setting+0x100>)
   17c18:	2302      	movs	r3, #2
   17c1a:	aa06      	add	r2, sp, #24
   17c1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17c20:	9306      	str	r3, [sp, #24]
   17c22:	f014 fbcc 	bl	2c3be <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   17c26:	f06f 0001 	mvn.w	r0, #1
   17c2a:	e01e      	b.n	17c6a <set_setting+0x76>
	len = settings_name_next(name, &next);
   17c2c:	a901      	add	r1, sp, #4
   17c2e:	f013 ff6f 	bl	2bb10 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   17c32:	4931      	ldr	r1, [pc, #196]	; (17cf8 <set_setting+0x104>)
	len = settings_name_next(name, &next);
   17c34:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
   17c36:	4602      	mov	r2, r0
   17c38:	4628      	mov	r0, r5
   17c3a:	f014 fb15 	bl	2c268 <strncmp>
   17c3e:	2800      	cmp	r0, #0
   17c40:	d133      	bne.n	17caa <set_setting+0xb6>
   17c42:	f3bf 8f5b 	dmb	ish
   17c46:	6823      	ldr	r3, [r4, #0]
   17c48:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   17c4c:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   17c50:	071b      	lsls	r3, r3, #28
   17c52:	d50d      	bpl.n	17c70 <set_setting+0x7c>
			LOG_WRN("Ignoring identities stored in flash");
   17c54:	4b29      	ldr	r3, [pc, #164]	; (17cfc <set_setting+0x108>)
   17c56:	9307      	str	r3, [sp, #28]
   17c58:	4826      	ldr	r0, [pc, #152]	; (17cf4 <set_setting+0x100>)
   17c5a:	2302      	movs	r3, #2
   17c5c:	aa06      	add	r2, sp, #24
   17c5e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17c62:	9306      	str	r3, [sp, #24]
   17c64:	f014 fbab 	bl	2c3be <z_log_msg_static_create.constprop.0>
		return 0;
   17c68:	2000      	movs	r0, #0
}
   17c6a:	b008      	add	sp, #32
   17c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   17c70:	3cd4      	subs	r4, #212	; 0xd4
   17c72:	2207      	movs	r2, #7
   17c74:	4621      	mov	r1, r4
   17c76:	4638      	mov	r0, r7
   17c78:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   17c7a:	2806      	cmp	r0, #6
   17c7c:	d810      	bhi.n	17ca0 <set_setting+0xac>
				LOG_ERR("Invalid length ID address in storage");
   17c7e:	4b20      	ldr	r3, [pc, #128]	; (17d00 <set_setting+0x10c>)
   17c80:	481c      	ldr	r0, [pc, #112]	; (17cf4 <set_setting+0x100>)
   17c82:	9307      	str	r3, [sp, #28]
   17c84:	aa06      	add	r2, sp, #24
   17c86:	2302      	movs	r3, #2
   17c88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17c8c:	9306      	str	r3, [sp, #24]
   17c8e:	f014 fb96 	bl	2c3be <z_log_msg_static_create.constprop.0>
			(void)memset(bt_dev.id_addr, 0,
   17c92:	2207      	movs	r2, #7
   17c94:	4629      	mov	r1, r5
   17c96:	4620      	mov	r0, r4
   17c98:	f014 fb2c 	bl	2c2f4 <memset>
			bt_dev.id_count = 0U;
   17c9c:	71e5      	strb	r5, [r4, #7]
   17c9e:	e7e3      	b.n	17c68 <set_setting+0x74>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   17ca0:	2307      	movs	r3, #7
   17ca2:	fbb0 f0f3 	udiv	r0, r0, r3
   17ca6:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   17ca8:	e7de      	b.n	17c68 <set_setting+0x74>
	if (!strncmp(name, "irk", len)) {
   17caa:	4628      	mov	r0, r5
   17cac:	4915      	ldr	r1, [pc, #84]	; (17d04 <set_setting+0x110>)
   17cae:	4642      	mov	r2, r8
   17cb0:	f014 fada 	bl	2c268 <strncmp>
   17cb4:	4605      	mov	r5, r0
   17cb6:	2800      	cmp	r0, #0
   17cb8:	d1b5      	bne.n	17c26 <set_setting+0x32>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   17cba:	2210      	movs	r2, #16
   17cbc:	f104 0194 	add.w	r1, r4, #148	; 0x94
   17cc0:	4638      	mov	r0, r7
   17cc2:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
   17cc4:	280f      	cmp	r0, #15
   17cc6:	d8cf      	bhi.n	17c68 <set_setting+0x74>
				LOG_ERR("Invalid length IRK in storage");
   17cc8:	4b0f      	ldr	r3, [pc, #60]	; (17d08 <set_setting+0x114>)
   17cca:	9307      	str	r3, [sp, #28]
   17ccc:	aa06      	add	r2, sp, #24
   17cce:	2302      	movs	r3, #2
   17cd0:	4808      	ldr	r0, [pc, #32]	; (17cf4 <set_setting+0x100>)
   17cd2:	9306      	str	r3, [sp, #24]
   17cd4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17cd8:	f014 fb71 	bl	2c3be <z_log_msg_static_create.constprop.0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   17cdc:	2210      	movs	r2, #16
   17cde:	4629      	mov	r1, r5
   17ce0:	f104 0094 	add.w	r0, r4, #148	; 0x94
   17ce4:	f014 fb06 	bl	2c2f4 <memset>
   17ce8:	e7be      	b.n	17c68 <set_setting+0x74>
   17cea:	bf00      	nop
   17cec:	200005c4 	.word	0x200005c4
   17cf0:	00031c6a 	.word	0x00031c6a
   17cf4:	000302f4 	.word	0x000302f4
   17cf8:	000311dd 	.word	0x000311dd
   17cfc:	00031c8b 	.word	0x00031c8b
   17d00:	00031caf 	.word	0x00031caf
   17d04:	00031c4a 	.word	0x00031c4a
   17d08:	00031cd4 	.word	0x00031cd4

00017d0c <bt_settings_encode_key>:
{
   17d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d10:	b088      	sub	sp, #32
		snprintk(path, path_size,
   17d12:	799c      	ldrb	r4, [r3, #6]
{
   17d14:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   17d18:	795d      	ldrb	r5, [r3, #5]
   17d1a:	791e      	ldrb	r6, [r3, #4]
   17d1c:	78df      	ldrb	r7, [r3, #3]
   17d1e:	f893 c002 	ldrb.w	ip, [r3, #2]
   17d22:	f893 e001 	ldrb.w	lr, [r3, #1]
   17d26:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   17d28:	f1b8 0f00 	cmp.w	r8, #0
   17d2c:	d00e      	beq.n	17d4c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   17d2e:	e9cd 3806 	strd	r3, r8, [sp, #24]
   17d32:	e9cd ce04 	strd	ip, lr, [sp, #16]
   17d36:	4613      	mov	r3, r2
   17d38:	e9cd 6702 	strd	r6, r7, [sp, #8]
   17d3c:	e9cd 4500 	strd	r4, r5, [sp]
   17d40:	4a08      	ldr	r2, [pc, #32]	; (17d64 <bt_settings_encode_key+0x58>)
   17d42:	f012 fc13 	bl	2a56c <snprintk>
}
   17d46:	b008      	add	sp, #32
   17d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   17d4c:	e9cd e305 	strd	lr, r3, [sp, #20]
   17d50:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   17d54:	4613      	mov	r3, r2
   17d56:	e9cd 5601 	strd	r5, r6, [sp, #4]
   17d5a:	4a03      	ldr	r2, [pc, #12]	; (17d68 <bt_settings_encode_key+0x5c>)
   17d5c:	9400      	str	r4, [sp, #0]
   17d5e:	f012 fc05 	bl	2a56c <snprintk>
}
   17d62:	e7f0      	b.n	17d46 <bt_settings_encode_key+0x3a>
   17d64:	00031cf2 	.word	0x00031cf2
   17d68:	00031d16 	.word	0x00031d16

00017d6c <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   17d6c:	4801      	ldr	r0, [pc, #4]	; (17d74 <bt_settings_save_id+0x8>)
   17d6e:	f00e bc31 	b.w	265d4 <k_work_submit>
   17d72:	bf00      	nop
   17d74:	20000828 	.word	0x20000828

00017d78 <commit_settings>:
}

static int commit_settings(void)
{
   17d78:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d7a:	4d21      	ldr	r5, [pc, #132]	; (17e00 <commit_settings+0x88>)
   17d7c:	f3bf 8f5b 	dmb	ish
   17d80:	682b      	ldr	r3, [r5, #0]
   17d82:	f3bf 8f5b 	dmb	ish
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17d86:	f013 0f01 	tst.w	r3, #1
{
   17d8a:	b087      	sub	sp, #28
   17d8c:	462e      	mov	r6, r5
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17d8e:	d035      	beq.n	17dfc <commit_settings+0x84>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   17d90:	f815 3ccd 	ldrb.w	r3, [r5, #-205]
   17d94:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
   17d98:	b9bb      	cbnz	r3, 17dca <commit_settings+0x52>
		err = bt_setup_public_id_addr();
   17d9a:	f002 f9a1 	bl	1a0e0 <bt_setup_public_id_addr>
		if (err) {
   17d9e:	4604      	mov	r4, r0
   17da0:	b160      	cbz	r0, 17dbc <commit_settings+0x44>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
   17da2:	4b18      	ldr	r3, [pc, #96]	; (17e04 <commit_settings+0x8c>)
   17da4:	9305      	str	r3, [sp, #20]
   17da6:	4818      	ldr	r0, [pc, #96]	; (17e08 <commit_settings+0x90>)
   17da8:	2302      	movs	r3, #2
   17daa:	aa04      	add	r2, sp, #16
   17dac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17db0:	9304      	str	r3, [sp, #16]
   17db2:	f014 fb04 	bl	2c3be <z_log_msg_static_create.constprop.0>
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   17db6:	4620      	mov	r0, r4
   17db8:	b007      	add	sp, #28
   17dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!bt_dev.id_count) {
   17dbc:	79fb      	ldrb	r3, [r7, #7]
   17dbe:	b923      	cbnz	r3, 17dca <commit_settings+0x52>
		err = bt_setup_random_id_addr();
   17dc0:	f002 fa2a 	bl	1a218 <bt_setup_random_id_addr>
		if (err) {
   17dc4:	4604      	mov	r4, r0
   17dc6:	2800      	cmp	r0, #0
   17dc8:	d1eb      	bne.n	17da2 <commit_settings+0x2a>
   17dca:	f3bf 8f5b 	dmb	ish
   17dce:	682b      	ldr	r3, [r5, #0]
   17dd0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17dd4:	075a      	lsls	r2, r3, #29
   17dd6:	d401      	bmi.n	17ddc <commit_settings+0x64>
		bt_finalize_init();
   17dd8:	f001 fbca 	bl	19570 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17ddc:	f3bf 8f5b 	dmb	ish
   17de0:	e856 3f00 	ldrex	r3, [r6]
   17de4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   17de8:	e846 2100 	strex	r1, r2, [r6]
   17dec:	2900      	cmp	r1, #0
   17dee:	d1f7      	bne.n	17de0 <commit_settings+0x68>
   17df0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   17df4:	03db      	lsls	r3, r3, #15
   17df6:	d501      	bpl.n	17dfc <commit_settings+0x84>
		bt_settings_save_id();
   17df8:	f7ff ffb8 	bl	17d6c <bt_settings_save_id>
		return 0;
   17dfc:	2400      	movs	r4, #0
   17dfe:	e7da      	b.n	17db6 <commit_settings+0x3e>
   17e00:	200005c4 	.word	0x200005c4
   17e04:	00031d37 	.word	0x00031d37
   17e08:	000302f4 	.word	0x000302f4

00017e0c <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   17e0c:	b5b0      	push	{r4, r5, r7, lr}
   17e0e:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   17e10:	f7fe fd50 	bl	168b4 <settings_subsys_init>
	if (err) {
   17e14:	4604      	mov	r4, r0
   17e16:	b170      	cbz	r0, 17e36 <bt_settings_init+0x2a>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   17e18:	466d      	mov	r5, sp
   17e1a:	b088      	sub	sp, #32
   17e1c:	466a      	mov	r2, sp
   17e1e:	4b07      	ldr	r3, [pc, #28]	; (17e3c <bt_settings_init+0x30>)
   17e20:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17e24:	2303      	movs	r3, #3
   17e26:	f842 3f10 	str.w	r3, [r2, #16]!
   17e2a:	4805      	ldr	r0, [pc, #20]	; (17e40 <bt_settings_init+0x34>)
   17e2c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17e30:	f014 fac5 	bl	2c3be <z_log_msg_static_create.constprop.0>
   17e34:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   17e36:	4620      	mov	r0, r4
   17e38:	46bd      	mov	sp, r7
   17e3a:	bdb0      	pop	{r4, r5, r7, pc}
   17e3c:	00031d5b 	.word	0x00031d5b
   17e40:	000302f4 	.word	0x000302f4

00017e44 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   17e44:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   17e46:	4d0a      	ldr	r5, [pc, #40]	; (17e70 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   17e48:	4b0a      	ldr	r3, [pc, #40]	; (17e74 <long_wq_init+0x30>)
{
   17e4a:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   17e4c:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   17e4e:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   17e50:	9302      	str	r3, [sp, #8]
   17e52:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   17e54:	f017 fc9e 	bl	2f794 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   17e58:	ab02      	add	r3, sp, #8
   17e5a:	9300      	str	r3, [sp, #0]
   17e5c:	4628      	mov	r0, r5
   17e5e:	4906      	ldr	r1, [pc, #24]	; (17e78 <long_wq_init+0x34>)
   17e60:	230a      	movs	r3, #10
   17e62:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   17e66:	f00e fbbb 	bl	265e0 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   17e6a:	4620      	mov	r0, r4
   17e6c:	b005      	add	sp, #20
   17e6e:	bd30      	pop	{r4, r5, pc}
   17e70:	200021f0 	.word	0x200021f0
   17e74:	00031d8f 	.word	0x00031d8f
   17e78:	200063c0 	.word	0x200063c0

00017e7c <bt_long_wq_schedule>:
{
   17e7c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   17e7e:	4801      	ldr	r0, [pc, #4]	; (17e84 <bt_long_wq_schedule+0x8>)
   17e80:	f00e bbe6 	b.w	26650 <k_work_schedule_for_queue>
   17e84:	200021f0 	.word	0x200021f0

00017e88 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   17e88:	b430      	push	{r4, r5}
   17e8a:	4603      	mov	r3, r0
   17e8c:	4608      	mov	r0, r1
	switch (src->type) {
   17e8e:	781a      	ldrb	r2, [r3, #0]
   17e90:	2a01      	cmp	r2, #1
   17e92:	d013      	beq.n	17ebc <uuid_to_uuid128+0x34>
   17e94:	2a02      	cmp	r2, #2
   17e96:	d026      	beq.n	17ee6 <uuid_to_uuid128+0x5e>
   17e98:	b972      	cbnz	r2, 17eb8 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   17e9a:	4a15      	ldr	r2, [pc, #84]	; (17ef0 <uuid_to_uuid128+0x68>)
   17e9c:	f102 0410 	add.w	r4, r2, #16
   17ea0:	f852 5b04 	ldr.w	r5, [r2], #4
   17ea4:	f841 5b04 	str.w	r5, [r1], #4
   17ea8:	42a2      	cmp	r2, r4
   17eaa:	d1f9      	bne.n	17ea0 <uuid_to_uuid128+0x18>
   17eac:	7812      	ldrb	r2, [r2, #0]
   17eae:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   17eb0:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
   17eb2:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   17eb4:	0a1b      	lsrs	r3, r3, #8
   17eb6:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   17eb8:	bc30      	pop	{r4, r5}
   17eba:	4770      	bx	lr
		*dst = uuid128_base;
   17ebc:	4a0c      	ldr	r2, [pc, #48]	; (17ef0 <uuid_to_uuid128+0x68>)
   17ebe:	f102 0410 	add.w	r4, r2, #16
   17ec2:	f852 5b04 	ldr.w	r5, [r2], #4
   17ec6:	f841 5b04 	str.w	r5, [r1], #4
   17eca:	42a2      	cmp	r2, r4
   17ecc:	d1f9      	bne.n	17ec2 <uuid_to_uuid128+0x3a>
   17ece:	7812      	ldrb	r2, [r2, #0]
   17ed0:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   17ed2:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   17ed4:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   17ed6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   17eda:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   17edc:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   17ede:	0a1b      	lsrs	r3, r3, #8
   17ee0:	7382      	strb	r2, [r0, #14]
   17ee2:	7403      	strb	r3, [r0, #16]
}
   17ee4:	e7e8      	b.n	17eb8 <uuid_to_uuid128+0x30>
}
   17ee6:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   17ee8:	2211      	movs	r2, #17
   17eea:	4619      	mov	r1, r3
   17eec:	f014 b9f7 	b.w	2c2de <memcpy>
   17ef0:	00031d98 	.word	0x00031d98

00017ef4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   17ef4:	b538      	push	{r3, r4, r5, lr}
   17ef6:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   17ef8:	4805      	ldr	r0, [pc, #20]	; (17f10 <bt_buf_get_rx+0x1c>)
   17efa:	f016 fba2 	bl	2e642 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   17efe:	4604      	mov	r4, r0
   17f00:	b120      	cbz	r0, 17f0c <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   17f02:	2100      	movs	r1, #0
   17f04:	300c      	adds	r0, #12
   17f06:	f016 fbf8 	bl	2e6fa <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17f0a:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   17f0c:	4620      	mov	r0, r4
   17f0e:	bd38      	pop	{r3, r4, r5, pc}
   17f10:	20000dfc 	.word	0x20000dfc

00017f14 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   17f14:	b570      	push	{r4, r5, r6, lr}
   17f16:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17f18:	480d      	ldr	r0, [pc, #52]	; (17f50 <bt_buf_get_cmd_complete+0x3c>)
   17f1a:	f3bf 8f5b 	dmb	ish
   17f1e:	460b      	mov	r3, r1
   17f20:	2100      	movs	r1, #0
   17f22:	e850 4f00 	ldrex	r4, [r0]
   17f26:	e840 1500 	strex	r5, r1, [r0]
   17f2a:	2d00      	cmp	r5, #0
   17f2c:	d1f9      	bne.n	17f22 <bt_buf_get_cmd_complete+0xe>
   17f2e:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   17f32:	b924      	cbnz	r4, 17f3e <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   17f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   17f38:	2001      	movs	r0, #1
   17f3a:	f7ff bfdb 	b.w	17ef4 <bt_buf_get_rx>
   17f3e:	2301      	movs	r3, #1
   17f40:	f104 000c 	add.w	r0, r4, #12
   17f44:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   17f46:	8221      	strh	r1, [r4, #16]
   17f48:	f016 fbd7 	bl	2e6fa <net_buf_simple_reserve>
}
   17f4c:	4620      	mov	r0, r4
   17f4e:	bd70      	pop	{r4, r5, r6, pc}
   17f50:	20000630 	.word	0x20000630

00017f54 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   17f54:	b570      	push	{r4, r5, r6, lr}
   17f56:	4604      	mov	r4, r0
	switch (evt) {
   17f58:	2c0f      	cmp	r4, #15
{
   17f5a:	460d      	mov	r5, r1
   17f5c:	4610      	mov	r0, r2
   17f5e:	4619      	mov	r1, r3
	switch (evt) {
   17f60:	d805      	bhi.n	17f6e <bt_buf_get_evt+0x1a>
   17f62:	2c0d      	cmp	r4, #13
   17f64:	d90d      	bls.n	17f82 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   17f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   17f6a:	f7ff bfd3 	b.w	17f14 <bt_buf_get_cmd_complete>
	switch (evt) {
   17f6e:	2c13      	cmp	r4, #19
   17f70:	d107      	bne.n	17f82 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   17f72:	480c      	ldr	r0, [pc, #48]	; (17fa4 <bt_buf_get_evt+0x50>)
   17f74:	f016 fb65 	bl	2e642 <net_buf_alloc_fixed>
			if (buf) {
   17f78:	4604      	mov	r4, r0
   17f7a:	b938      	cbnz	r0, 17f8c <bt_buf_get_evt+0x38>
{
   17f7c:	2400      	movs	r4, #0
}
   17f7e:	4620      	mov	r0, r4
   17f80:	bd70      	pop	{r4, r5, r6, pc}
   17f82:	4602      	mov	r2, r0
   17f84:	460b      	mov	r3, r1
		if (discardable) {
   17f86:	b145      	cbz	r5, 17f9a <bt_buf_get_evt+0x46>
   17f88:	4807      	ldr	r0, [pc, #28]	; (17fa8 <bt_buf_get_evt+0x54>)
   17f8a:	e7f3      	b.n	17f74 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   17f8c:	2100      	movs	r1, #0
   17f8e:	300c      	adds	r0, #12
   17f90:	f016 fbb3 	bl	2e6fa <net_buf_simple_reserve>
   17f94:	2301      	movs	r3, #1
   17f96:	7623      	strb	r3, [r4, #24]
}
   17f98:	e7f1      	b.n	17f7e <bt_buf_get_evt+0x2a>
}
   17f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   17f9e:	2001      	movs	r0, #1
   17fa0:	f7ff bfa8 	b.w	17ef4 <bt_buf_get_rx>
   17fa4:	20000e28 	.word	0x20000e28
   17fa8:	20000d78 	.word	0x20000d78

00017fac <ver_str>:
{
   17fac:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   17fae:	4d0c      	ldr	r5, [pc, #48]	; (17fe0 <ver_str+0x34>)
{
   17fb0:	4606      	mov	r6, r0
	const char * const str[] = {
   17fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   17fb4:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   17fb6:	466c      	mov	r4, sp
   17fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17fc2:	e895 0003 	ldmia.w	r5, {r0, r1}
	if (ver < ARRAY_SIZE(str)) {
   17fc6:	2e0d      	cmp	r6, #13
	const char * const str[] = {
   17fc8:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
   17fcc:	bf9b      	ittet	ls
   17fce:	ab0e      	addls	r3, sp, #56	; 0x38
   17fd0:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   17fd4:	4803      	ldrhi	r0, [pc, #12]	; (17fe4 <ver_str+0x38>)
		return str[ver];
   17fd6:	f856 0c38 	ldrls.w	r0, [r6, #-56]
}
   17fda:	b00e      	add	sp, #56	; 0x38
   17fdc:	bd70      	pop	{r4, r5, r6, pc}
   17fde:	bf00      	nop
   17fe0:	000304a4 	.word	0x000304a4
   17fe4:	00031db1 	.word	0x00031db1

00017fe8 <unpair>:
{
   17fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17fea:	4606      	mov	r6, r0
   17fec:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   17fee:	f003 fb85 	bl	1b6fc <bt_conn_lookup_addr_le>
	if (conn) {
   17ff2:	4604      	mov	r4, r0
   17ff4:	b140      	cbz	r0, 18008 <unpair+0x20>
		if (conn->type == BT_CONN_TYPE_LE) {
   17ff6:	7883      	ldrb	r3, [r0, #2]
   17ff8:	2b01      	cmp	r3, #1
   17ffa:	d024      	beq.n	18046 <unpair+0x5e>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   17ffc:	2113      	movs	r1, #19
   17ffe:	f014 fe24 	bl	2cc4a <bt_conn_disconnect>
		bt_conn_unref(conn);
   18002:	4620      	mov	r0, r4
   18004:	f014 fdda 	bl	2cbbc <bt_conn_unref>
			keys = bt_keys_find_addr(id, addr);
   18008:	4639      	mov	r1, r7
   1800a:	4630      	mov	r0, r6
   1800c:	f008 fae4 	bl	205d8 <bt_keys_find_addr>
		if (keys) {
   18010:	4605      	mov	r5, r0
   18012:	bb28      	cbnz	r0, 18060 <unpair+0x78>
	bt_gatt_clear(id, addr);
   18014:	4639      	mov	r1, r7
   18016:	4630      	mov	r0, r6
   18018:	f006 fbf0 	bl	1e7fc <bt_gatt_clear>
	return list->head;
   1801c:	4b14      	ldr	r3, [pc, #80]	; (18070 <unpair+0x88>)
   1801e:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   18020:	b323      	cbz	r3, 1806c <unpair+0x84>
	return node->next;
   18022:	681c      	ldr	r4, [r3, #0]
   18024:	b104      	cbz	r4, 18028 <unpair+0x40>
   18026:	3c0c      	subs	r4, #12
		if (listener->bond_deleted) {
   18028:	f853 3c04 	ldr.w	r3, [r3, #-4]
   1802c:	b113      	cbz	r3, 18034 <unpair+0x4c>
			listener->bond_deleted(id, addr);
   1802e:	4639      	mov	r1, r7
   18030:	4630      	mov	r0, r6
   18032:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   18034:	b1d4      	cbz	r4, 1806c <unpair+0x84>
   18036:	4623      	mov	r3, r4
   18038:	68e4      	ldr	r4, [r4, #12]
   1803a:	689b      	ldr	r3, [r3, #8]
   1803c:	b1a4      	cbz	r4, 18068 <unpair+0x80>
   1803e:	3c0c      	subs	r4, #12
		if (listener->bond_deleted) {
   18040:	2b00      	cmp	r3, #0
   18042:	d1f4      	bne.n	1802e <unpair+0x46>
   18044:	e7f7      	b.n	18036 <unpair+0x4e>
			conn->le.keys = NULL;
   18046:	2300      	movs	r3, #0
			keys = conn->le.keys;
   18048:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
			conn->le.keys = NULL;
   1804c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   18050:	2113      	movs	r1, #19
   18052:	f014 fdfa 	bl	2cc4a <bt_conn_disconnect>
		bt_conn_unref(conn);
   18056:	4620      	mov	r0, r4
   18058:	f014 fdb0 	bl	2cbbc <bt_conn_unref>
		if (!keys) {
   1805c:	2d00      	cmp	r5, #0
   1805e:	d0d3      	beq.n	18008 <unpair+0x20>
			bt_keys_clear(keys);
   18060:	4628      	mov	r0, r5
   18062:	f008 fad7 	bl	20614 <bt_keys_clear>
   18066:	e7d5      	b.n	18014 <unpair+0x2c>
		if (listener->bond_deleted) {
   18068:	2b00      	cmp	r3, #0
   1806a:	d1e0      	bne.n	1802e <unpair+0x46>
}
   1806c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1806e:	bf00      	nop
   18070:	20003b14 	.word	0x20003b14

00018074 <hci_disconn_complete_prio>:
{
   18074:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   18076:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18078:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   1807c:	781b      	ldrb	r3, [r3, #0]
   1807e:	b963      	cbnz	r3, 1809a <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   18080:	4620      	mov	r0, r4
   18082:	f003 f919 	bl	1b2b8 <bt_conn_lookup_handle>
	if (!conn) {
   18086:	4605      	mov	r5, r0
   18088:	b940      	cbnz	r0, 1809c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1808a:	4b08      	ldr	r3, [pc, #32]	; (180ac <hci_disconn_complete_prio+0x38>)
   1808c:	881a      	ldrh	r2, [r3, #0]
   1808e:	b922      	cbnz	r2, 1809a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   18090:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   18094:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   18098:	8018      	strh	r0, [r3, #0]
}
   1809a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1809c:	2101      	movs	r1, #1
   1809e:	f003 f913 	bl	1b2c8 <bt_conn_set_state>
	bt_conn_unref(conn);
   180a2:	4628      	mov	r0, r5
}
   180a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   180a8:	f014 bd88 	b.w	2cbbc <bt_conn_unref>
   180ac:	20005594 	.word	0x20005594

000180b0 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   180b0:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   180b2:	4c08      	ldr	r4, [pc, #32]	; (180d4 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   180b4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   180b6:	2205      	movs	r2, #5
   180b8:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   180bc:	f003 fb68 	bl	1b790 <bt_conn_lookup_state_le>
		if (!conn) {
   180c0:	b938      	cbnz	r0, 180d2 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   180c2:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   180c6:	4904      	ldr	r1, [pc, #16]	; (180d8 <find_pending_connect.part.0+0x28>)
}
   180c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   180cc:	2204      	movs	r2, #4
   180ce:	f003 bb5f 	b.w	1b790 <bt_conn_lookup_state_le>
}
   180d2:	bd10      	pop	{r4, pc}
   180d4:	200004f0 	.word	0x200004f0
   180d8:	00031bea 	.word	0x00031bea

000180dc <hci_data_buf_overflow>:
{
   180dc:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   180de:	68c3      	ldr	r3, [r0, #12]
{
   180e0:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   180e2:	b088      	sub	sp, #32
   180e4:	781b      	ldrb	r3, [r3, #0]
   180e6:	466a      	mov	r2, sp
   180e8:	4906      	ldr	r1, [pc, #24]	; (18104 <hci_data_buf_overflow+0x28>)
   180ea:	4807      	ldr	r0, [pc, #28]	; (18108 <hci_data_buf_overflow+0x2c>)
   180ec:	e9c2 1305 	strd	r1, r3, [r2, #20]
   180f0:	2303      	movs	r3, #3
   180f2:	f842 3f10 	str.w	r3, [r2, #16]!
   180f6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   180fa:	f014 fa34 	bl	2c566 <z_log_msg_static_create.constprop.0>
}
   180fe:	46bd      	mov	sp, r7
   18100:	bd80      	pop	{r7, pc}
   18102:	bf00      	nop
   18104:	00031db9 	.word	0x00031db9
   18108:	000302b4 	.word	0x000302b4

0001810c <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   1810c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   1810e:	4b06      	ldr	r3, [pc, #24]	; (18128 <le_conn_param_neg_reply.part.0+0x1c>)
   18110:	9305      	str	r3, [sp, #20]
   18112:	4806      	ldr	r0, [pc, #24]	; (1812c <le_conn_param_neg_reply.part.0+0x20>)
   18114:	2302      	movs	r3, #2
   18116:	aa04      	add	r2, sp, #16
   18118:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1811c:	9304      	str	r3, [sp, #16]
   1811e:	f014 fa22 	bl	2c566 <z_log_msg_static_create.constprop.0>
}
   18122:	b007      	add	sp, #28
   18124:	f85d fb04 	ldr.w	pc, [sp], #4
   18128:	00031de1 	.word	0x00031de1
   1812c:	000302b4 	.word	0x000302b4

00018130 <rx_queue_put>:
{
   18130:	b598      	push	{r3, r4, r7, lr}
   18132:	4601      	mov	r1, r0
   18134:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   18136:	480d      	ldr	r0, [pc, #52]	; (1816c <rx_queue_put+0x3c>)
   18138:	f016 fa8a 	bl	2e650 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1813c:	490c      	ldr	r1, [pc, #48]	; (18170 <rx_queue_put+0x40>)
   1813e:	480d      	ldr	r0, [pc, #52]	; (18174 <rx_queue_put+0x44>)
   18140:	f017 fb17 	bl	2f772 <k_work_submit_to_queue>
	if (err < 0) {
   18144:	2800      	cmp	r0, #0
   18146:	da0e      	bge.n	18166 <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   18148:	466c      	mov	r4, sp
   1814a:	b088      	sub	sp, #32
   1814c:	466a      	mov	r2, sp
   1814e:	4b0a      	ldr	r3, [pc, #40]	; (18178 <rx_queue_put+0x48>)
   18150:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18154:	2303      	movs	r3, #3
   18156:	f842 3f10 	str.w	r3, [r2, #16]!
   1815a:	4808      	ldr	r0, [pc, #32]	; (1817c <rx_queue_put+0x4c>)
   1815c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18160:	f014 fa01 	bl	2c566 <z_log_msg_static_create.constprop.0>
   18164:	46a5      	mov	sp, r4
}
   18166:	46bd      	mov	sp, r7
   18168:	bd98      	pop	{r3, r4, r7, pc}
   1816a:	bf00      	nop
   1816c:	20000634 	.word	0x20000634
   18170:	20000874 	.word	0x20000874
   18174:	20002310 	.word	0x20002310
   18178:	00031dfb 	.word	0x00031dfb
   1817c:	000302b4 	.word	0x000302b4

00018180 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   18180:	b5b0      	push	{r4, r5, r7, lr}
   18182:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   18184:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   18186:	af00      	add	r7, sp, #0
   18188:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1818a:	4629      	mov	r1, r5
   1818c:	68d8      	ldr	r0, [r3, #12]
   1818e:	f7ff fc81 	bl	17a94 <bt_hex>
   18192:	b08a      	sub	sp, #40	; 0x28
   18194:	466a      	mov	r2, sp
   18196:	4b09      	ldr	r3, [pc, #36]	; (181bc <handle_event.part.0+0x3c>)
   18198:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1819c:	f240 4302 	movw	r3, #1026	; 0x402
   181a0:	8493      	strh	r3, [r2, #36]	; 0x24
   181a2:	4b07      	ldr	r3, [pc, #28]	; (181c0 <handle_event.part.0+0x40>)
   181a4:	e9c2 5007 	strd	r5, r0, [r2, #28]
   181a8:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   181ac:	f842 3f10 	str.w	r3, [r2, #16]!
   181b0:	4804      	ldr	r0, [pc, #16]	; (181c4 <handle_event.part.0+0x44>)
   181b2:	f014 f9d8 	bl	2c566 <z_log_msg_static_create.constprop.0>
}
   181b6:	46bd      	mov	sp, r7
   181b8:	bdb0      	pop	{r4, r5, r7, pc}
   181ba:	bf00      	nop
   181bc:	00031e18 	.word	0x00031e18
   181c0:	01000005 	.word	0x01000005
   181c4:	000302b4 	.word	0x000302b4

000181c8 <hci_hardware_error>:
{
   181c8:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   181ca:	2101      	movs	r1, #1
   181cc:	af00      	add	r7, sp, #0
   181ce:	300c      	adds	r0, #12
   181d0:	f016 fabe 	bl	2e750 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   181d4:	b088      	sub	sp, #32
   181d6:	7803      	ldrb	r3, [r0, #0]
   181d8:	466a      	mov	r2, sp
   181da:	4906      	ldr	r1, [pc, #24]	; (181f4 <hci_hardware_error+0x2c>)
   181dc:	4806      	ldr	r0, [pc, #24]	; (181f8 <hci_hardware_error+0x30>)
   181de:	e9c2 1305 	strd	r1, r3, [r2, #20]
   181e2:	2303      	movs	r3, #3
   181e4:	f842 3f10 	str.w	r3, [r2, #16]!
   181e8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   181ec:	f014 f9bb 	bl	2c566 <z_log_msg_static_create.constprop.0>
}
   181f0:	46bd      	mov	sp, r7
   181f2:	bd80      	pop	{r7, pc}
   181f4:	00031e3a 	.word	0x00031e3a
   181f8:	000302b4 	.word	0x000302b4

000181fc <le_data_len_change>:
{
   181fc:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   181fe:	68c3      	ldr	r3, [r0, #12]
   18200:	881c      	ldrh	r4, [r3, #0]
{
   18202:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   18204:	4620      	mov	r0, r4
   18206:	f003 f857 	bl	1b2b8 <bt_conn_lookup_handle>
	if (!conn) {
   1820a:	b980      	cbnz	r0, 1822e <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1820c:	466d      	mov	r5, sp
   1820e:	b088      	sub	sp, #32
   18210:	466a      	mov	r2, sp
   18212:	4b08      	ldr	r3, [pc, #32]	; (18234 <le_data_len_change+0x38>)
   18214:	4808      	ldr	r0, [pc, #32]	; (18238 <le_data_len_change+0x3c>)
   18216:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1821a:	2303      	movs	r3, #3
   1821c:	f842 3f10 	str.w	r3, [r2, #16]!
   18220:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18224:	f014 f99f 	bl	2c566 <z_log_msg_static_create.constprop.0>
   18228:	46ad      	mov	sp, r5
}
   1822a:	46bd      	mov	sp, r7
   1822c:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   1822e:	f014 fcc5 	bl	2cbbc <bt_conn_unref>
   18232:	e7fa      	b.n	1822a <le_data_len_change+0x2e>
   18234:	00031e5c 	.word	0x00031e5c
   18238:	000302b4 	.word	0x000302b4

0001823c <le_phy_update_complete>:
{
   1823c:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1823e:	68c3      	ldr	r3, [r0, #12]
   18240:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   18244:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   18246:	4620      	mov	r0, r4
   18248:	f003 f836 	bl	1b2b8 <bt_conn_lookup_handle>
	if (!conn) {
   1824c:	b980      	cbnz	r0, 18270 <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1824e:	466d      	mov	r5, sp
   18250:	b088      	sub	sp, #32
   18252:	466a      	mov	r2, sp
   18254:	4b08      	ldr	r3, [pc, #32]	; (18278 <le_phy_update_complete+0x3c>)
   18256:	4809      	ldr	r0, [pc, #36]	; (1827c <le_phy_update_complete+0x40>)
   18258:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1825c:	2303      	movs	r3, #3
   1825e:	f842 3f10 	str.w	r3, [r2, #16]!
   18262:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18266:	f014 f97e 	bl	2c566 <z_log_msg_static_create.constprop.0>
   1826a:	46ad      	mov	sp, r5
}
   1826c:	46bd      	mov	sp, r7
   1826e:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   18270:	f014 fca4 	bl	2cbbc <bt_conn_unref>
   18274:	e7fa      	b.n	1826c <le_phy_update_complete+0x30>
   18276:	bf00      	nop
   18278:	00031e5c 	.word	0x00031e5c
   1827c:	000302b4 	.word	0x000302b4

00018280 <hci_disconn_complete>:
{
   18280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   18284:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   18286:	782e      	ldrb	r6, [r5, #0]
{
   18288:	af00      	add	r7, sp, #0
	if (evt->status) {
   1828a:	b9ae      	cbnz	r6, 182b8 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1828c:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   18290:	4640      	mov	r0, r8
   18292:	f003 f811 	bl	1b2b8 <bt_conn_lookup_handle>
	if (!conn) {
   18296:	4604      	mov	r4, r0
   18298:	b988      	cbnz	r0, 182be <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1829a:	466c      	mov	r4, sp
   1829c:	b088      	sub	sp, #32
   1829e:	466a      	mov	r2, sp
   182a0:	4b0b      	ldr	r3, [pc, #44]	; (182d0 <hci_disconn_complete+0x50>)
   182a2:	480c      	ldr	r0, [pc, #48]	; (182d4 <hci_disconn_complete+0x54>)
   182a4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   182a8:	2303      	movs	r3, #3
   182aa:	f842 3f10 	str.w	r3, [r2, #16]!
   182ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   182b2:	f014 f958 	bl	2c566 <z_log_msg_static_create.constprop.0>
   182b6:	46a5      	mov	sp, r4
}
   182b8:	46bd      	mov	sp, r7
   182ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   182be:	78eb      	ldrb	r3, [r5, #3]
   182c0:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   182c2:	4631      	mov	r1, r6
   182c4:	f003 f800 	bl	1b2c8 <bt_conn_set_state>
		bt_conn_unref(conn);
   182c8:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   182ca:	f014 fc77 	bl	2cbbc <bt_conn_unref>
   182ce:	e7f3      	b.n	182b8 <hci_disconn_complete+0x38>
   182d0:	00031e80 	.word	0x00031e80
   182d4:	000302b4 	.word	0x000302b4

000182d8 <handle_event>:
{
   182d8:	b5b0      	push	{r4, r5, r7, lr}
   182da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   182de:	af00      	add	r7, sp, #0
   182e0:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   182e2:	4293      	cmp	r3, r2
   182e4:	d103      	bne.n	182ee <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   182e6:	4620      	mov	r0, r4
   182e8:	f7ff ff4a 	bl	18180 <handle_event.part.0>
}
   182ec:	e018      	b.n	18320 <handle_event+0x48>
		if (handler->event != event) {
   182ee:	4610      	mov	r0, r2
   182f0:	f810 5b08 	ldrb.w	r5, [r0], #8
   182f4:	42a5      	cmp	r5, r4
   182f6:	d119      	bne.n	1832c <handle_event+0x54>
		if (buf->len < handler->min_len) {
   182f8:	8a0b      	ldrh	r3, [r1, #16]
   182fa:	7850      	ldrb	r0, [r2, #1]
   182fc:	4298      	cmp	r0, r3
   182fe:	d911      	bls.n	18324 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   18300:	466d      	mov	r5, sp
   18302:	b088      	sub	sp, #32
   18304:	466a      	mov	r2, sp
   18306:	490a      	ldr	r1, [pc, #40]	; (18330 <handle_event+0x58>)
   18308:	61d4      	str	r4, [r2, #28]
   1830a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1830e:	2304      	movs	r3, #4
   18310:	f842 3f10 	str.w	r3, [r2, #16]!
   18314:	4807      	ldr	r0, [pc, #28]	; (18334 <handle_event+0x5c>)
   18316:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1831a:	f014 f924 	bl	2c566 <z_log_msg_static_create.constprop.0>
   1831e:	46ad      	mov	sp, r5
}
   18320:	46bd      	mov	sp, r7
   18322:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   18324:	6853      	ldr	r3, [r2, #4]
   18326:	4608      	mov	r0, r1
   18328:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   1832a:	e7f9      	b.n	18320 <handle_event+0x48>
   1832c:	4602      	mov	r2, r0
   1832e:	e7d8      	b.n	182e2 <handle_event+0xa>
   18330:	00031ea6 	.word	0x00031ea6
   18334:	000302b4 	.word	0x000302b4

00018338 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   18338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1833a:	4855      	ldr	r0, [pc, #340]	; (18490 <rx_work_handler+0x158>)
{
   1833c:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1833e:	f016 f99d 	bl	2e67c <net_buf_slist_get>
	if (!buf) {
   18342:	4604      	mov	r4, r0
   18344:	2800      	cmp	r0, #0
   18346:	d06a      	beq.n	1841e <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   18348:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1834a:	2b01      	cmp	r3, #1
   1834c:	d069      	beq.n	18422 <rx_work_handler+0xea>
   1834e:	2b03      	cmp	r3, #3
   18350:	f040 8099 	bne.w	18486 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18354:	8a03      	ldrh	r3, [r0, #16]
   18356:	2b03      	cmp	r3, #3
   18358:	d80c      	bhi.n	18374 <rx_work_handler+0x3c>
   1835a:	4a4e      	ldr	r2, [pc, #312]	; (18494 <rx_work_handler+0x15c>)
   1835c:	494e      	ldr	r1, [pc, #312]	; (18498 <rx_work_handler+0x160>)
   1835e:	484f      	ldr	r0, [pc, #316]	; (1849c <rx_work_handler+0x164>)
   18360:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   18364:	f012 fd27 	bl	2adb6 <assert_print>
   18368:	4040      	eors	r0, r0
   1836a:	f380 8811 	msr	BASEPRI, r0
   1836e:	f04f 0003 	mov.w	r0, #3
   18372:	df02      	svc	2
   18374:	2104      	movs	r1, #4
   18376:	f104 000c 	add.w	r0, r4, #12
   1837a:	f016 f9e9 	bl	2e750 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1837e:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   18380:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   18382:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   18384:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   18386:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1838a:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   1838c:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1838e:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   18390:	d010      	beq.n	183b4 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   18392:	466d      	mov	r5, sp
   18394:	b088      	sub	sp, #32
   18396:	466a      	mov	r2, sp
   18398:	4841      	ldr	r0, [pc, #260]	; (184a0 <rx_work_handler+0x168>)
   1839a:	61d3      	str	r3, [r2, #28]
   1839c:	2304      	movs	r3, #4
   1839e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   183a2:	f842 3f10 	str.w	r3, [r2, #16]!
   183a6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   183aa:	483e      	ldr	r0, [pc, #248]	; (184a4 <rx_work_handler+0x16c>)
   183ac:	f014 f8db 	bl	2c566 <z_log_msg_static_create.constprop.0>
   183b0:	46ad      	mov	sp, r5
   183b2:	e064      	b.n	1847e <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   183b4:	f002 ff80 	bl	1b2b8 <bt_conn_lookup_handle>
	if (!conn) {
   183b8:	4605      	mov	r5, r0
   183ba:	b960      	cbnz	r0, 183d6 <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   183bc:	466d      	mov	r5, sp
   183be:	b088      	sub	sp, #32
   183c0:	8b63      	ldrh	r3, [r4, #26]
   183c2:	466a      	mov	r2, sp
   183c4:	4938      	ldr	r1, [pc, #224]	; (184a8 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   183c6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   183ca:	2303      	movs	r3, #3
   183cc:	f842 3f10 	str.w	r3, [r2, #16]!
   183d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   183d4:	e7e9      	b.n	183aa <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   183d6:	f003 f879 	bl	1b4cc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   183da:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   183dc:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   183de:	4621      	mov	r1, r4
   183e0:	4628      	mov	r0, r5
   183e2:	f002 fe13 	bl	1b00c <bt_conn_recv>
	bt_conn_unref(conn);
   183e6:	4628      	mov	r0, r5
   183e8:	f014 fbe8 	bl	2cbbc <bt_conn_unref>
	return list->head;
   183ec:	4b2f      	ldr	r3, [pc, #188]	; (184ac <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   183ee:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   183f2:	b1a3      	cbz	r3, 1841e <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   183f4:	492e      	ldr	r1, [pc, #184]	; (184b0 <rx_work_handler+0x178>)
   183f6:	482f      	ldr	r0, [pc, #188]	; (184b4 <rx_work_handler+0x17c>)
   183f8:	f017 f9bb 	bl	2f772 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   183fc:	2800      	cmp	r0, #0
   183fe:	da0e      	bge.n	1841e <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   18400:	466c      	mov	r4, sp
   18402:	b088      	sub	sp, #32
   18404:	466a      	mov	r2, sp
   18406:	4b2c      	ldr	r3, [pc, #176]	; (184b8 <rx_work_handler+0x180>)
   18408:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1840c:	2303      	movs	r3, #3
   1840e:	f842 3f10 	str.w	r3, [r2, #16]!
   18412:	4824      	ldr	r0, [pc, #144]	; (184a4 <rx_work_handler+0x16c>)
   18414:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18418:	f014 f8a5 	bl	2c566 <z_log_msg_static_create.constprop.0>
   1841c:	46a5      	mov	sp, r4
		}
	}
}
   1841e:	46bd      	mov	sp, r7
   18420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18422:	8a03      	ldrh	r3, [r0, #16]
   18424:	2b01      	cmp	r3, #1
   18426:	d80c      	bhi.n	18442 <rx_work_handler+0x10a>
   18428:	4a1a      	ldr	r2, [pc, #104]	; (18494 <rx_work_handler+0x15c>)
   1842a:	491b      	ldr	r1, [pc, #108]	; (18498 <rx_work_handler+0x160>)
   1842c:	481b      	ldr	r0, [pc, #108]	; (1849c <rx_work_handler+0x164>)
   1842e:	f640 2347 	movw	r3, #2631	; 0xa47
   18432:	f012 fcc0 	bl	2adb6 <assert_print>
   18436:	4040      	eors	r0, r0
   18438:	f380 8811 	msr	BASEPRI, r0
   1843c:	f04f 0003 	mov.w	r0, #3
   18440:	df02      	svc	2
   18442:	2102      	movs	r1, #2
   18444:	f104 000c 	add.w	r0, r4, #12
   18448:	f016 f982 	bl	2e750 <net_buf_simple_pull_mem>
   1844c:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1844e:	7800      	ldrb	r0, [r0, #0]
   18450:	f014 f841 	bl	2c4d6 <bt_hci_evt_get_flags>
   18454:	0783      	lsls	r3, r0, #30
   18456:	d40c      	bmi.n	18472 <rx_work_handler+0x13a>
   18458:	4a0e      	ldr	r2, [pc, #56]	; (18494 <rx_work_handler+0x15c>)
   1845a:	4918      	ldr	r1, [pc, #96]	; (184bc <rx_work_handler+0x184>)
   1845c:	480f      	ldr	r0, [pc, #60]	; (1849c <rx_work_handler+0x164>)
   1845e:	f640 234b 	movw	r3, #2635	; 0xa4b
   18462:	f012 fca8 	bl	2adb6 <assert_print>
   18466:	4040      	eors	r0, r0
   18468:	f380 8811 	msr	BASEPRI, r0
   1846c:	f04f 0003 	mov.w	r0, #3
   18470:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   18472:	4a13      	ldr	r2, [pc, #76]	; (184c0 <rx_work_handler+0x188>)
   18474:	7828      	ldrb	r0, [r5, #0]
   18476:	2306      	movs	r3, #6
   18478:	4621      	mov	r1, r4
   1847a:	f7ff ff2d 	bl	182d8 <handle_event>
		net_buf_unref(buf);
   1847e:	4620      	mov	r0, r4
   18480:	f008 fb60 	bl	20b44 <net_buf_unref>
		break;
   18484:	e7b2      	b.n	183ec <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   18486:	466d      	mov	r5, sp
   18488:	b088      	sub	sp, #32
   1848a:	466a      	mov	r2, sp
   1848c:	490d      	ldr	r1, [pc, #52]	; (184c4 <rx_work_handler+0x18c>)
   1848e:	e79a      	b.n	183c6 <rx_work_handler+0x8e>
   18490:	20000634 	.word	0x20000634
   18494:	00031ec8 	.word	0x00031ec8
   18498:	00031efc 	.word	0x00031efc
   1849c:	00031f15 	.word	0x00031f15
   184a0:	00031f32 	.word	0x00031f32
   184a4:	000302b4 	.word	0x000302b4
   184a8:	00031f56 	.word	0x00031f56
   184ac:	200004f0 	.word	0x200004f0
   184b0:	20000874 	.word	0x20000874
   184b4:	20002310 	.word	0x20002310
   184b8:	00031dfb 	.word	0x00031dfb
   184bc:	00031f78 	.word	0x00031f78
   184c0:	000307e4 	.word	0x000307e4
   184c4:	00031fa6 	.word	0x00031fa6

000184c8 <hci_le_meta_event>:
{
   184c8:	b510      	push	{r4, lr}
   184ca:	2101      	movs	r1, #1
   184cc:	4604      	mov	r4, r0
   184ce:	300c      	adds	r0, #12
   184d0:	f016 f93e 	bl	2e750 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   184d4:	4621      	mov	r1, r4
   184d6:	4a03      	ldr	r2, [pc, #12]	; (184e4 <hci_le_meta_event+0x1c>)
   184d8:	7800      	ldrb	r0, [r0, #0]
}
   184da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   184de:	230a      	movs	r3, #10
   184e0:	f7ff befa 	b.w	182d8 <handle_event>
   184e4:	00030814 	.word	0x00030814

000184e8 <le_remote_feat_complete>:
{
   184e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   184ea:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   184ec:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   184f0:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   184f2:	4630      	mov	r0, r6
   184f4:	f002 fee0 	bl	1b2b8 <bt_conn_lookup_handle>
	if (!conn) {
   184f8:	4604      	mov	r4, r0
   184fa:	b980      	cbnz	r0, 1851e <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   184fc:	466c      	mov	r4, sp
   184fe:	b088      	sub	sp, #32
   18500:	466a      	mov	r2, sp
   18502:	4b0f      	ldr	r3, [pc, #60]	; (18540 <le_remote_feat_complete+0x58>)
   18504:	480f      	ldr	r0, [pc, #60]	; (18544 <le_remote_feat_complete+0x5c>)
   18506:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1850a:	2303      	movs	r3, #3
   1850c:	f842 3f10 	str.w	r3, [r2, #16]!
   18510:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18514:	f014 f827 	bl	2c566 <z_log_msg_static_create.constprop.0>
   18518:	46a5      	mov	sp, r4
}
   1851a:	46bd      	mov	sp, r7
   1851c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   1851e:	782b      	ldrb	r3, [r5, #0]
   18520:	b923      	cbnz	r3, 1852c <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
   18522:	2208      	movs	r2, #8
   18524:	1ce9      	adds	r1, r5, #3
   18526:	30ad      	adds	r0, #173	; 0xad
   18528:	f013 fed9 	bl	2c2de <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1852c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   18530:	1d20      	adds	r0, r4, #4
   18532:	f014 f804 	bl	2c53e <atomic_or>
	bt_conn_unref(conn);
   18536:	4620      	mov	r0, r4
   18538:	f014 fb40 	bl	2cbbc <bt_conn_unref>
   1853c:	e7ed      	b.n	1851a <le_remote_feat_complete+0x32>
   1853e:	bf00      	nop
   18540:	00031e5c 	.word	0x00031e5c
   18544:	000302b4 	.word	0x000302b4

00018548 <hci_cmd_done>:
{
   18548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1854c:	4606      	mov	r6, r0
   1854e:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   18550:	7a90      	ldrb	r0, [r2, #10]
   18552:	4d43      	ldr	r5, [pc, #268]	; (18660 <hci_cmd_done+0x118>)
{
   18554:	4688      	mov	r8, r1
   18556:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   18558:	f008 fa32 	bl	209c0 <net_buf_pool_get>
   1855c:	4285      	cmp	r5, r0
   1855e:	d018      	beq.n	18592 <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   18560:	7aa4      	ldrb	r4, [r4, #10]
   18562:	4620      	mov	r0, r4
   18564:	f008 fa2c 	bl	209c0 <net_buf_pool_get>
   18568:	46e8      	mov	r8, sp
   1856a:	b08a      	sub	sp, #40	; 0x28
   1856c:	466a      	mov	r2, sp
   1856e:	4b3d      	ldr	r3, [pc, #244]	; (18664 <hci_cmd_done+0x11c>)
   18570:	6255      	str	r5, [r2, #36]	; 0x24
   18572:	e9c2 3605 	strd	r3, r6, [r2, #20]
   18576:	2306      	movs	r3, #6
   18578:	e9c2 4007 	strd	r4, r0, [r2, #28]
   1857c:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   18580:	f842 3f10 	str.w	r3, [r2, #16]!
   18584:	4838      	ldr	r0, [pc, #224]	; (18668 <hci_cmd_done+0x120>)
   18586:	f013 ffee 	bl	2c566 <z_log_msg_static_create.constprop.0>
   1858a:	46c5      	mov	sp, r8
}
   1858c:	46bd      	mov	sp, r7
   1858e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   18592:	4620      	mov	r0, r4
   18594:	f008 fa1c 	bl	209d0 <net_buf_id>
   18598:	4d34      	ldr	r5, [pc, #208]	; (1866c <hci_cmd_done+0x124>)
   1859a:	f04f 090c 	mov.w	r9, #12
   1859e:	fb09 5000 	mla	r0, r9, r0, r5
   185a2:	8843      	ldrh	r3, [r0, #2]
   185a4:	42b3      	cmp	r3, r6
   185a6:	d016      	beq.n	185d6 <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   185a8:	4620      	mov	r0, r4
   185aa:	f008 fa11 	bl	209d0 <net_buf_id>
   185ae:	fb09 5000 	mla	r0, r9, r0, r5
   185b2:	466c      	mov	r4, sp
   185b4:	b088      	sub	sp, #32
   185b6:	8843      	ldrh	r3, [r0, #2]
   185b8:	466a      	mov	r2, sp
   185ba:	492d      	ldr	r1, [pc, #180]	; (18670 <hci_cmd_done+0x128>)
   185bc:	61d3      	str	r3, [r2, #28]
   185be:	2304      	movs	r3, #4
   185c0:	e9c2 1605 	strd	r1, r6, [r2, #20]
   185c4:	4828      	ldr	r0, [pc, #160]	; (18668 <hci_cmd_done+0x120>)
   185c6:	f842 3f10 	str.w	r3, [r2, #16]!
   185ca:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   185ce:	f013 ffca 	bl	2c566 <z_log_msg_static_create.constprop.0>
   185d2:	46a5      	mov	sp, r4
		return;
   185d4:	e7da      	b.n	1858c <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   185d6:	4e27      	ldr	r6, [pc, #156]	; (18674 <hci_cmd_done+0x12c>)
   185d8:	f8d6 0140 	ldr.w	r0, [r6, #320]	; 0x140
   185dc:	b120      	cbz	r0, 185e8 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   185de:	f008 fab1 	bl	20b44 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   185e2:	2300      	movs	r3, #0
   185e4:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
	if (cmd(buf)->state && !status) {
   185e8:	4620      	mov	r0, r4
   185ea:	f008 f9f1 	bl	209d0 <net_buf_id>
   185ee:	260c      	movs	r6, #12
   185f0:	fb06 5000 	mla	r0, r6, r0, r5
   185f4:	6843      	ldr	r3, [r0, #4]
   185f6:	b1ab      	cbz	r3, 18624 <hci_cmd_done+0xdc>
   185f8:	f1b8 0f00 	cmp.w	r8, #0
   185fc:	d112      	bne.n	18624 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   185fe:	4620      	mov	r0, r4
   18600:	f008 f9e6 	bl	209d0 <net_buf_id>
   18604:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   18608:	2101      	movs	r1, #1
   1860a:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   1860c:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   18610:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   18612:	f003 061f 	and.w	r6, r3, #31
   18616:	40b1      	lsls	r1, r6
	if (val) {
   18618:	095b      	lsrs	r3, r3, #5
   1861a:	b1da      	cbz	r2, 18654 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1861c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   18620:	f013 ff8d 	bl	2c53e <atomic_or>
	if (cmd(buf)->sync) {
   18624:	4620      	mov	r0, r4
   18626:	f008 f9d3 	bl	209d0 <net_buf_id>
   1862a:	260c      	movs	r6, #12
   1862c:	fb06 5000 	mla	r0, r6, r0, r5
   18630:	6883      	ldr	r3, [r0, #8]
   18632:	2b00      	cmp	r3, #0
   18634:	d0aa      	beq.n	1858c <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   18636:	4620      	mov	r0, r4
   18638:	f008 f9ca 	bl	209d0 <net_buf_id>
   1863c:	4370      	muls	r0, r6
   1863e:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   18642:	4620      	mov	r0, r4
   18644:	f008 f9c4 	bl	209d0 <net_buf_id>
   18648:	fb06 5500 	mla	r5, r6, r0, r5
   1864c:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   1864e:	f00d fe23 	bl	26298 <z_impl_k_sem_give>
}
   18652:	e79b      	b.n	1858c <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18654:	43c9      	mvns	r1, r1
   18656:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1865a:	f013 ff87 	bl	2c56c <atomic_and.isra.0>
   1865e:	e7e1      	b.n	18624 <hci_cmd_done+0xdc>
   18660:	20000dd0 	.word	0x20000dd0
   18664:	00031fba 	.word	0x00031fba
   18668:	000302b4 	.word	0x000302b4
   1866c:	20003ab8 	.word	0x20003ab8
   18670:	00031fef 	.word	0x00031fef
   18674:	200004f0 	.word	0x200004f0

00018678 <hci_cmd_status>:
{
   18678:	b538      	push	{r3, r4, r5, lr}
   1867a:	2104      	movs	r1, #4
   1867c:	4604      	mov	r4, r0
   1867e:	300c      	adds	r0, #12
   18680:	f016 f866 	bl	2e750 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   18684:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   18686:	7801      	ldrb	r1, [r0, #0]
   18688:	8840      	ldrh	r0, [r0, #2]
   1868a:	4622      	mov	r2, r4
   1868c:	f7ff ff5c 	bl	18548 <hci_cmd_done>
	if (ncmd) {
   18690:	b125      	cbz	r5, 1869c <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   18692:	4803      	ldr	r0, [pc, #12]	; (186a0 <hci_cmd_status+0x28>)
}
   18694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18698:	f00d bdfe 	b.w	26298 <z_impl_k_sem_give>
   1869c:	bd38      	pop	{r3, r4, r5, pc}
   1869e:	bf00      	nop
   186a0:	20000618 	.word	0x20000618

000186a4 <hci_cmd_complete>:
{
   186a4:	b538      	push	{r3, r4, r5, lr}
   186a6:	2103      	movs	r1, #3
   186a8:	4604      	mov	r4, r0
   186aa:	300c      	adds	r0, #12
   186ac:	f016 f850 	bl	2e750 <net_buf_simple_pull_mem>
	status = buf->data[0];
   186b0:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   186b2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   186b4:	7819      	ldrb	r1, [r3, #0]
   186b6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   186ba:	4622      	mov	r2, r4
   186bc:	f7ff ff44 	bl	18548 <hci_cmd_done>
	if (ncmd) {
   186c0:	b125      	cbz	r5, 186cc <hci_cmd_complete+0x28>
   186c2:	4803      	ldr	r0, [pc, #12]	; (186d0 <hci_cmd_complete+0x2c>)
}
   186c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   186c8:	f00d bde6 	b.w	26298 <z_impl_k_sem_give>
   186cc:	bd38      	pop	{r3, r4, r5, pc}
   186ce:	bf00      	nop
   186d0:	20000618 	.word	0x20000618

000186d4 <hci_num_completed_packets>:
{
   186d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186d8:	b087      	sub	sp, #28
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   186da:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   186de:	8a01      	ldrh	r1, [r0, #16]
   186e0:	f898 4000 	ldrb.w	r4, [r8]
   186e4:	2301      	movs	r3, #1
   186e6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   186ea:	428b      	cmp	r3, r1
{
   186ec:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   186ee:	f240 808c 	bls.w	1880a <hci_num_completed_packets+0x136>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   186f2:	466d      	mov	r5, sp
   186f4:	b08a      	sub	sp, #40	; 0x28
   186f6:	466a      	mov	r2, sp
   186f8:	4846      	ldr	r0, [pc, #280]	; (18814 <hci_num_completed_packets+0x140>)
   186fa:	e9c2 3107 	strd	r3, r1, [r2, #28]
   186fe:	2305      	movs	r3, #5
   18700:	e9c2 0405 	strd	r0, r4, [r2, #20]
   18704:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   18708:	f842 3f10 	str.w	r3, [r2, #16]!
   1870c:	4842      	ldr	r0, [pc, #264]	; (18818 <hci_num_completed_packets+0x144>)
   1870e:	f013 ff2a 	bl	2c566 <z_log_msg_static_create.constprop.0>
   18712:	46ad      	mov	sp, r5
}
   18714:	371c      	adds	r7, #28
   18716:	46bd      	mov	sp, r7
   18718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
   1871c:	466c      	mov	r4, sp
   1871e:	b088      	sub	sp, #32
   18720:	466a      	mov	r2, sp
   18722:	4b3e      	ldr	r3, [pc, #248]	; (1881c <hci_num_completed_packets+0x148>)
   18724:	483c      	ldr	r0, [pc, #240]	; (18818 <hci_num_completed_packets+0x144>)
   18726:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   1872a:	2303      	movs	r3, #3
   1872c:	f842 3f10 	str.w	r3, [r2, #16]!
   18730:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18734:	f013 ff17 	bl	2c566 <z_log_msg_static_create.constprop.0>
   18738:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   1873a:	3501      	adds	r5, #1
   1873c:	f898 3000 	ldrb.w	r3, [r8]
   18740:	429d      	cmp	r5, r3
   18742:	dae7      	bge.n	18714 <hci_num_completed_packets+0x40>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   18744:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   18748:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1874c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   18750:	4658      	mov	r0, fp
   18752:	f002 fdb1 	bl	1b2b8 <bt_conn_lookup_handle>
		if (!conn) {
   18756:	4604      	mov	r4, r0
   18758:	2800      	cmp	r0, #0
   1875a:	d0df      	beq.n	1871c <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
   1875c:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   18760:	b346      	cbz	r6, 187b4 <hci_num_completed_packets+0xe0>
	__asm__ volatile(
   18762:	f04f 0340 	mov.w	r3, #64	; 0x40
   18766:	f3ef 8211 	mrs	r2, BASEPRI
   1876a:	f383 8812 	msr	BASEPRI_MAX, r3
   1876e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   18772:	69e3      	ldr	r3, [r4, #28]
   18774:	b16b      	cbz	r3, 18792 <hci_num_completed_packets+0xbe>
				conn->pending_no_cb--;
   18776:	3b01      	subs	r3, #1
   18778:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1877a:	f382 8811 	msr	BASEPRI, r2
   1877e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   18782:	4620      	mov	r0, r4
   18784:	f002 fc04 	bl	1af90 <bt_conn_get_pkts>
   18788:	3e01      	subs	r6, #1
   1878a:	f00d fd85 	bl	26298 <z_impl_k_sem_give>
   1878e:	b2b6      	uxth	r6, r6
   18790:	e7e6      	b.n	18760 <hci_num_completed_packets+0x8c>
   18792:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   18794:	b993      	cbnz	r3, 187bc <hci_num_completed_packets+0xe8>
   18796:	f382 8811 	msr	BASEPRI, r2
   1879a:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   1879e:	2302      	movs	r3, #2
   187a0:	481d      	ldr	r0, [pc, #116]	; (18818 <hci_num_completed_packets+0x144>)
   187a2:	f8c7 a014 	str.w	sl, [r7, #20]
   187a6:	f107 0210 	add.w	r2, r7, #16
   187aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   187ae:	613b      	str	r3, [r7, #16]
   187b0:	f013 fed9 	bl	2c566 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   187b4:	4620      	mov	r0, r4
   187b6:	f014 fa01 	bl	2cbbc <bt_conn_unref>
   187ba:	e7be      	b.n	1873a <hci_num_completed_packets+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   187bc:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   187be:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   187c0:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   187c2:	428b      	cmp	r3, r1
	list->tail = node;
   187c4:	bf08      	it	eq
   187c6:	61a0      	streq	r0, [r4, #24]
   187c8:	f382 8811 	msr	BASEPRI, r2
   187cc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   187d0:	f04f 0240 	mov.w	r2, #64	; 0x40
   187d4:	f3ef 8111 	mrs	r1, BASEPRI
   187d8:	f382 8812 	msr	BASEPRI_MAX, r2
   187dc:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   187e0:	68da      	ldr	r2, [r3, #12]
   187e2:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   187e4:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   187e8:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   187ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   187ee:	b94a      	cbnz	r2, 18804 <hci_num_completed_packets+0x130>
	list->head = node;
   187f0:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   187f4:	f381 8811 	msr	BASEPRI, r1
   187f8:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   187fc:	4658      	mov	r0, fp
   187fe:	f00d fee9 	bl	265d4 <k_work_submit>
   18802:	e7be      	b.n	18782 <hci_num_completed_packets+0xae>
	parent->next = child;
   18804:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18806:	6263      	str	r3, [r4, #36]	; 0x24
}
   18808:	e7f4      	b.n	187f4 <hci_num_completed_packets+0x120>
	for (i = 0; i < evt->num_handles; i++) {
   1880a:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
   1880c:	f8df a010 	ldr.w	sl, [pc, #16]	; 18820 <hci_num_completed_packets+0x14c>
			tx->pending_no_cb = 0U;
   18810:	46a9      	mov	r9, r5
   18812:	e793      	b.n	1873c <hci_num_completed_packets+0x68>
   18814:	00032022 	.word	0x00032022
   18818:	000302b4 	.word	0x000302b4
   1881c:	0003204c 	.word	0x0003204c
   18820:	00032068 	.word	0x00032068

00018824 <le_conn_update_complete>:
{
   18824:	b5f0      	push	{r4, r5, r6, r7, lr}
   18826:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   18828:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   1882a:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   1882e:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   18830:	4630      	mov	r0, r6
   18832:	f002 fd41 	bl	1b2b8 <bt_conn_lookup_handle>
	if (!conn) {
   18836:	4604      	mov	r4, r0
   18838:	b988      	cbnz	r0, 1885e <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1883a:	466c      	mov	r4, sp
   1883c:	b088      	sub	sp, #32
   1883e:	466a      	mov	r2, sp
   18840:	4b2c      	ldr	r3, [pc, #176]	; (188f4 <le_conn_update_complete+0xd0>)
   18842:	482d      	ldr	r0, [pc, #180]	; (188f8 <le_conn_update_complete+0xd4>)
   18844:	e9c2 3605 	strd	r3, r6, [r2, #20]
   18848:	2303      	movs	r3, #3
   1884a:	f842 3f10 	str.w	r3, [r2, #16]!
   1884e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18852:	f013 fe88 	bl	2c566 <z_log_msg_static_create.constprop.0>
   18856:	46a5      	mov	sp, r4
}
   18858:	370c      	adds	r7, #12
   1885a:	46bd      	mov	sp, r7
   1885c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1885e:	782b      	ldrb	r3, [r5, #0]
   18860:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   18862:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   18866:	d117      	bne.n	18898 <le_conn_update_complete+0x74>
   18868:	78c3      	ldrb	r3, [r0, #3]
   1886a:	2b01      	cmp	r3, #1
   1886c:	d128      	bne.n	188c0 <le_conn_update_complete+0x9c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1886e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   18872:	4630      	mov	r0, r6
   18874:	f013 fe63 	bl	2c53e <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   18878:	0542      	lsls	r2, r0, #21
   1887a:	d40d      	bmi.n	18898 <le_conn_update_complete+0x74>
		param.interval_min = conn->le.interval_min;
   1887c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   18880:	603b      	str	r3, [r7, #0]
		bt_l2cap_update_conn_param(conn, &param);
   18882:	4639      	mov	r1, r7
		param.latency = conn->le.pending_latency;
   18884:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   18888:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1888a:	4620      	mov	r0, r4
   1888c:	f003 fa68 	bl	1bd60 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   18890:	4620      	mov	r0, r4
   18892:	f014 f993 	bl	2cbbc <bt_conn_unref>
   18896:	e7df      	b.n	18858 <le_conn_update_complete+0x34>
		if (!evt->status) {
   18898:	782b      	ldrb	r3, [r5, #0]
   1889a:	b98b      	cbnz	r3, 188c0 <le_conn_update_complete+0x9c>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   1889c:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   188a0:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   188a4:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   188a8:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   188ac:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   188b0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   188b4:	f46f 7180 	mvn.w	r1, #256	; 0x100
   188b8:	4630      	mov	r0, r6
   188ba:	f013 fe57 	bl	2c56c <atomic_and.isra.0>
}
   188be:	e015      	b.n	188ec <le_conn_update_complete+0xc8>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   188c0:	4630      	mov	r0, r6
   188c2:	f013 fe33 	bl	2c52c <atomic_get>
		} else if (atomic_test_bit(conn->flags,
   188c6:	05c3      	lsls	r3, r0, #23
   188c8:	d5f4      	bpl.n	188b4 <le_conn_update_complete+0x90>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   188ca:	782b      	ldrb	r3, [r5, #0]
   188cc:	2b20      	cmp	r3, #32
   188ce:	d1f1      	bne.n	188b4 <le_conn_update_complete+0x90>
			   conn->le.conn_param_retry_countdown) {
   188d0:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   188d4:	2b00      	cmp	r3, #0
   188d6:	d0ed      	beq.n	188b4 <le_conn_update_complete+0x90>
			conn->le.conn_param_retry_countdown--;
   188d8:	3b01      	subs	r3, #1
   188da:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   188de:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   188e2:	2300      	movs	r3, #0
   188e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   188e8:	f00d fedc 	bl	266a4 <k_work_schedule>
		notify_le_param_updated(conn);
   188ec:	4620      	mov	r0, r4
   188ee:	f002 fe0f 	bl	1b510 <notify_le_param_updated>
   188f2:	e7cd      	b.n	18890 <le_conn_update_complete+0x6c>
   188f4:	00031e5c 	.word	0x00031e5c
   188f8:	000302b4 	.word	0x000302b4

000188fc <bt_hci_cmd_state_set_init>:
{
   188fc:	b510      	push	{r4, lr}
	state->bit = bit;
   188fe:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   18902:	f89d 3008 	ldrb.w	r3, [sp, #8]
   18906:	720b      	strb	r3, [r1, #8]
{
   18908:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1890a:	f008 f861 	bl	209d0 <net_buf_id>
   1890e:	4b03      	ldr	r3, [pc, #12]	; (1891c <bt_hci_cmd_state_set_init+0x20>)
   18910:	220c      	movs	r2, #12
   18912:	fb02 3300 	mla	r3, r2, r0, r3
   18916:	605c      	str	r4, [r3, #4]
}
   18918:	bd10      	pop	{r4, pc}
   1891a:	bf00      	nop
   1891c:	20003ab8 	.word	0x20003ab8

00018920 <bt_hci_cmd_create>:
{
   18920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   18924:	f04f 32ff 	mov.w	r2, #4294967295
   18928:	f04f 33ff 	mov.w	r3, #4294967295
   1892c:	4606      	mov	r6, r0
   1892e:	4817      	ldr	r0, [pc, #92]	; (1898c <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   18930:	4d17      	ldr	r5, [pc, #92]	; (18990 <bt_hci_cmd_create+0x70>)
{
   18932:	460f      	mov	r7, r1
   18934:	f015 fe85 	bl	2e642 <net_buf_alloc_fixed>
   18938:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1893a:	f100 0a0c 	add.w	sl, r0, #12
   1893e:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   18940:	f04f 0800 	mov.w	r8, #0
   18944:	4650      	mov	r0, sl
   18946:	f015 fed8 	bl	2e6fa <net_buf_simple_reserve>
   1894a:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   1894e:	4620      	mov	r0, r4
   18950:	f008 f83e 	bl	209d0 <net_buf_id>
   18954:	f04f 090c 	mov.w	r9, #12
   18958:	fb09 5000 	mla	r0, r9, r0, r5
   1895c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1895e:	4620      	mov	r0, r4
   18960:	f008 f836 	bl	209d0 <net_buf_id>
   18964:	fb09 5000 	mla	r0, r9, r0, r5
   18968:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1896c:	4620      	mov	r0, r4
   1896e:	f008 f82f 	bl	209d0 <net_buf_id>
   18972:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   18976:	2103      	movs	r1, #3
   18978:	4650      	mov	r0, sl
   1897a:	f8c5 8004 	str.w	r8, [r5, #4]
   1897e:	f015 fec0 	bl	2e702 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   18982:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   18984:	7087      	strb	r7, [r0, #2]
}
   18986:	4620      	mov	r0, r4
   18988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1898c:	20000dd0 	.word	0x20000dd0
   18990:	20003ab8 	.word	0x20003ab8

00018994 <bt_hci_cmd_send_sync>:
{
   18994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18998:	b087      	sub	sp, #28
   1899a:	4606      	mov	r6, r0
   1899c:	af00      	add	r7, sp, #0
   1899e:	4615      	mov	r5, r2
	if (!buf) {
   189a0:	460c      	mov	r4, r1
   189a2:	b921      	cbnz	r1, 189ae <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   189a4:	f7ff ffbc 	bl	18920 <bt_hci_cmd_create>
		if (!buf) {
   189a8:	4604      	mov	r4, r0
   189aa:	2800      	cmp	r0, #0
   189ac:	d05f      	beq.n	18a6e <bt_hci_cmd_send_sync+0xda>
	return z_impl_k_sem_init(sem, initial_count, limit);
   189ae:	2201      	movs	r2, #1
   189b0:	2100      	movs	r1, #0
   189b2:	4638      	mov	r0, r7
   189b4:	f016 fe2d 	bl	2f612 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   189b8:	4620      	mov	r0, r4
   189ba:	f008 f809 	bl	209d0 <net_buf_id>
   189be:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 18a74 <bt_hci_cmd_send_sync+0xe0>
   189c2:	230c      	movs	r3, #12
   189c4:	fb03 9000 	mla	r0, r3, r0, r9
   189c8:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   189ca:	4620      	mov	r0, r4
   189cc:	f015 fe6f 	bl	2e6ae <net_buf_ref>
   189d0:	4601      	mov	r1, r0
   189d2:	4829      	ldr	r0, [pc, #164]	; (18a78 <bt_hci_cmd_send_sync+0xe4>)
   189d4:	f015 fe69 	bl	2e6aa <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   189d8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   189dc:	2300      	movs	r3, #0
   189de:	4638      	mov	r0, r7
   189e0:	f00d fc80 	bl	262e4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   189e4:	4680      	mov	r8, r0
   189e6:	b188      	cbz	r0, 18a0c <bt_hci_cmd_send_sync+0x78>
   189e8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   189ec:	4a23      	ldr	r2, [pc, #140]	; (18a7c <bt_hci_cmd_send_sync+0xe8>)
   189ee:	4924      	ldr	r1, [pc, #144]	; (18a80 <bt_hci_cmd_send_sync+0xec>)
   189f0:	4824      	ldr	r0, [pc, #144]	; (18a84 <bt_hci_cmd_send_sync+0xf0>)
   189f2:	f012 f9e0 	bl	2adb6 <assert_print>
   189f6:	4824      	ldr	r0, [pc, #144]	; (18a88 <bt_hci_cmd_send_sync+0xf4>)
   189f8:	4642      	mov	r2, r8
   189fa:	4631      	mov	r1, r6
   189fc:	f012 f9db 	bl	2adb6 <assert_print>
   18a00:	4040      	eors	r0, r0
   18a02:	f380 8811 	msr	BASEPRI, r0
   18a06:	f04f 0003 	mov.w	r0, #3
   18a0a:	df02      	svc	2
	status = cmd(buf)->status;
   18a0c:	4620      	mov	r0, r4
   18a0e:	f007 ffdf 	bl	209d0 <net_buf_id>
   18a12:	230c      	movs	r3, #12
   18a14:	4358      	muls	r0, r3
   18a16:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
   18a1a:	f1b8 0f00 	cmp.w	r8, #0
   18a1e:	d01e      	beq.n	18a5e <bt_hci_cmd_send_sync+0xca>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   18a20:	466d      	mov	r5, sp
   18a22:	b088      	sub	sp, #32
   18a24:	466a      	mov	r2, sp
   18a26:	4b19      	ldr	r3, [pc, #100]	; (18a8c <bt_hci_cmd_send_sync+0xf8>)
   18a28:	f8c2 801c 	str.w	r8, [r2, #28]
   18a2c:	e9c2 3605 	strd	r3, r6, [r2, #20]
   18a30:	2304      	movs	r3, #4
   18a32:	f842 3f10 	str.w	r3, [r2, #16]!
   18a36:	4816      	ldr	r0, [pc, #88]	; (18a90 <bt_hci_cmd_send_sync+0xfc>)
   18a38:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   18a3c:	f013 fd93 	bl	2c566 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   18a40:	4620      	mov	r0, r4
   18a42:	46ad      	mov	sp, r5
   18a44:	f008 f87e 	bl	20b44 <net_buf_unref>
			return -ECONNREFUSED;
   18a48:	f1b8 0f09 	cmp.w	r8, #9
   18a4c:	bf14      	ite	ne
   18a4e:	f06f 0004 	mvnne.w	r0, #4
   18a52:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   18a56:	371c      	adds	r7, #28
   18a58:	46bd      	mov	sp, r7
   18a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   18a5e:	b115      	cbz	r5, 18a66 <bt_hci_cmd_send_sync+0xd2>
		*rsp = buf;
   18a60:	602c      	str	r4, [r5, #0]
	return 0;
   18a62:	2000      	movs	r0, #0
   18a64:	e7f7      	b.n	18a56 <bt_hci_cmd_send_sync+0xc2>
		net_buf_unref(buf);
   18a66:	4620      	mov	r0, r4
   18a68:	f008 f86c 	bl	20b44 <net_buf_unref>
   18a6c:	e7f9      	b.n	18a62 <bt_hci_cmd_send_sync+0xce>
			return -ENOBUFS;
   18a6e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18a72:	e7f0      	b.n	18a56 <bt_hci_cmd_send_sync+0xc2>
   18a74:	20003ab8 	.word	0x20003ab8
   18a78:	2000063c 	.word	0x2000063c
   18a7c:	00031ec8 	.word	0x00031ec8
   18a80:	0003207f 	.word	0x0003207f
   18a84:	00031f15 	.word	0x00031f15
   18a88:	00032088 	.word	0x00032088
   18a8c:	000320b4 	.word	0x000320b4
   18a90:	000302b4 	.word	0x000302b4

00018a94 <hci_le_read_max_data_len>:
{
   18a94:	b570      	push	{r4, r5, r6, lr}
   18a96:	b088      	sub	sp, #32
   18a98:	4606      	mov	r6, r0
   18a9a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   18a9c:	aa01      	add	r2, sp, #4
   18a9e:	2100      	movs	r1, #0
   18aa0:	f242 002f 	movw	r0, #8239	; 0x202f
   18aa4:	f7ff ff76 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   18aa8:	4604      	mov	r4, r0
   18aaa:	b160      	cbz	r0, 18ac6 <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   18aac:	4b0b      	ldr	r3, [pc, #44]	; (18adc <hci_le_read_max_data_len+0x48>)
   18aae:	9307      	str	r3, [sp, #28]
   18ab0:	480b      	ldr	r0, [pc, #44]	; (18ae0 <hci_le_read_max_data_len+0x4c>)
   18ab2:	2302      	movs	r3, #2
   18ab4:	aa06      	add	r2, sp, #24
   18ab6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18aba:	9306      	str	r3, [sp, #24]
   18abc:	f013 fd53 	bl	2c566 <z_log_msg_static_create.constprop.0>
}
   18ac0:	4620      	mov	r0, r4
   18ac2:	b008      	add	sp, #32
   18ac4:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   18ac6:	9801      	ldr	r0, [sp, #4]
   18ac8:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   18aca:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   18ace:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   18ad0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   18ad4:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   18ad6:	f008 f835 	bl	20b44 <net_buf_unref>
	return 0;
   18ada:	e7f1      	b.n	18ac0 <hci_le_read_max_data_len+0x2c>
   18adc:	000320d0 	.word	0x000320d0
   18ae0:	000302b4 	.word	0x000302b4

00018ae4 <bt_hci_le_rand>:
{
   18ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   18ae6:	4b14      	ldr	r3, [pc, #80]	; (18b38 <bt_hci_le_rand+0x54>)
   18ae8:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
   18aec:	2b00      	cmp	r3, #0
{
   18aee:	4605      	mov	r5, r0
   18af0:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   18af2:	da1d      	bge.n	18b30 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   18af4:	b914      	cbnz	r4, 18afc <bt_hci_le_rand+0x18>
	return 0;
   18af6:	4620      	mov	r0, r4
}
   18af8:	b003      	add	sp, #12
   18afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   18afc:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   18afe:	aa01      	add	r2, sp, #4
   18b00:	f04f 0100 	mov.w	r1, #0
   18b04:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   18b08:	4626      	mov	r6, r4
   18b0a:	bf28      	it	cs
   18b0c:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   18b0e:	f7ff ff41 	bl	18994 <bt_hci_cmd_send_sync>
		if (err) {
   18b12:	2800      	cmp	r0, #0
   18b14:	d1f0      	bne.n	18af8 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   18b16:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   18b18:	68f9      	ldr	r1, [r7, #12]
   18b1a:	4632      	mov	r2, r6
   18b1c:	3101      	adds	r1, #1
   18b1e:	4628      	mov	r0, r5
   18b20:	f013 fbdd 	bl	2c2de <memcpy>
		net_buf_unref(rsp);
   18b24:	4638      	mov	r0, r7
   18b26:	f008 f80d 	bl	20b44 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   18b2a:	4435      	add	r5, r6
		len -= count;
   18b2c:	1ba4      	subs	r4, r4, r6
   18b2e:	e7e1      	b.n	18af4 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   18b30:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18b34:	e7e0      	b.n	18af8 <bt_hci_le_rand+0x14>
   18b36:	bf00      	nop
   18b38:	200004f0 	.word	0x200004f0

00018b3c <bt_hci_le_enh_conn_complete>:
{
   18b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18b40:	b08c      	sub	sp, #48	; 0x30
		if (disconnected_handles[i] == handle) {
   18b42:	4bbc      	ldr	r3, [pc, #752]	; (18e34 <bt_hci_le_enh_conn_complete+0x2f8>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18b44:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   18b48:	8819      	ldrh	r1, [r3, #0]
{
   18b4a:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   18b4c:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
   18b50:	4291      	cmp	r1, r2
   18b52:	f04f 0600 	mov.w	r6, #0
{
   18b56:	af02      	add	r7, sp, #8
			disconnected_handles[i] = 0;
   18b58:	bf04      	itt	eq
   18b5a:	801e      	strheq	r6, [r3, #0]
			return true;
   18b5c:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   18b5e:	f001 f9bb 	bl	19ed8 <bt_id_pending_keys_update>
	if (evt->status) {
   18b62:	782c      	ldrb	r4, [r5, #0]
   18b64:	b3a4      	cbz	r4, 18bd0 <bt_hci_le_enh_conn_complete+0x94>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18b66:	2c3c      	cmp	r4, #60	; 0x3c
   18b68:	d122      	bne.n	18bb0 <bt_hci_le_enh_conn_complete+0x74>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   18b6a:	f001 fd17 	bl	1a59c <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18b6e:	f06f 0180 	mvn.w	r1, #128	; 0x80
   18b72:	3010      	adds	r0, #16
   18b74:	f013 fcfa 	bl	2c56c <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   18b78:	2000      	movs	r0, #0
   18b7a:	f7ff fa99 	bl	180b0 <find_pending_connect.part.0>
		if (!conn) {
   18b7e:	4605      	mov	r5, r0
   18b80:	b970      	cbnz	r0, 18ba0 <bt_hci_le_enh_conn_complete+0x64>
			LOG_ERR("No pending peripheral connection");
   18b82:	4bad      	ldr	r3, [pc, #692]	; (18e38 <bt_hci_le_enh_conn_complete+0x2fc>)
   18b84:	627b      	str	r3, [r7, #36]	; 0x24
   18b86:	2302      	movs	r3, #2
   18b88:	48ac      	ldr	r0, [pc, #688]	; (18e3c <bt_hci_le_enh_conn_complete+0x300>)
   18b8a:	623b      	str	r3, [r7, #32]
   18b8c:	f107 0220 	add.w	r2, r7, #32
   18b90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18b94:	f013 fce7 	bl	2c566 <z_log_msg_static_create.constprop.0>
}
   18b98:	3728      	adds	r7, #40	; 0x28
   18b9a:	46bd      	mov	sp, r7
   18b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   18ba0:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18ba2:	2100      	movs	r1, #0
   18ba4:	f002 fb90 	bl	1b2c8 <bt_conn_set_state>
		bt_conn_unref(conn);
   18ba8:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   18baa:	f014 f807 	bl	2cbbc <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18bae:	e7f3      	b.n	18b98 <bt_hci_le_enh_conn_complete+0x5c>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   18bb0:	466d      	mov	r5, sp
   18bb2:	b088      	sub	sp, #32
   18bb4:	aa02      	add	r2, sp, #8
   18bb6:	4ba2      	ldr	r3, [pc, #648]	; (18e40 <bt_hci_le_enh_conn_complete+0x304>)
   18bb8:	48a0      	ldr	r0, [pc, #640]	; (18e3c <bt_hci_le_enh_conn_complete+0x300>)
   18bba:	e9c2 3405 	strd	r3, r4, [r2, #20]
   18bbe:	2303      	movs	r3, #3
   18bc0:	f842 3f10 	str.w	r3, [r2, #16]!
   18bc4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18bc8:	f013 fccd 	bl	2c566 <z_log_msg_static_create.constprop.0>
   18bcc:	46ad      	mov	sp, r5
		return;
   18bce:	e7e3      	b.n	18b98 <bt_hci_le_enh_conn_complete+0x5c>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   18bd0:	78eb      	ldrb	r3, [r5, #3]
   18bd2:	2b01      	cmp	r3, #1
   18bd4:	bf08      	it	eq
   18bd6:	4b9b      	ldreq	r3, [pc, #620]	; (18e44 <bt_hci_le_enh_conn_complete+0x308>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   18bd8:	f105 0904 	add.w	r9, r5, #4
   18bdc:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   18bde:	bf08      	it	eq
   18be0:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   18be4:	f013 fc73 	bl	2c4ce <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   18be8:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   18bea:	b348      	cbz	r0, 18c40 <bt_hci_le_enh_conn_complete+0x104>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   18bec:	f107 0010 	add.w	r0, r7, #16
   18bf0:	f013 fc63 	bl	2c4ba <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
   18bf4:	2206      	movs	r2, #6
   18bf6:	f105 0111 	add.w	r1, r5, #17
   18bfa:	f107 0009 	add.w	r0, r7, #9
   18bfe:	f013 fb6e 	bl	2c2de <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   18c02:	2301      	movs	r3, #1
   18c04:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   18c06:	78eb      	ldrb	r3, [r5, #3]
   18c08:	2b01      	cmp	r3, #1
   18c0a:	d027      	beq.n	18c5c <bt_hci_le_enh_conn_complete+0x120>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   18c0c:	4648      	mov	r0, r9
   18c0e:	f7fe ff63 	bl	17ad8 <bt_addr_le_str>
   18c12:	466c      	mov	r4, sp
   18c14:	b088      	sub	sp, #32
   18c16:	aa02      	add	r2, sp, #8
   18c18:	4b8b      	ldr	r3, [pc, #556]	; (18e48 <bt_hci_le_enh_conn_complete+0x30c>)
   18c1a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
   18c22:	8393      	strh	r3, [r2, #28]
   18c24:	4b89      	ldr	r3, [pc, #548]	; (18e4c <bt_hci_le_enh_conn_complete+0x310>)
   18c26:	f842 3f10 	str.w	r3, [r2, #16]!
   18c2a:	4884      	ldr	r0, [pc, #528]	; (18e3c <bt_hci_le_enh_conn_complete+0x300>)
   18c2c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   18c30:	f013 fc99 	bl	2c566 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   18c34:	211f      	movs	r1, #31
   18c36:	46a5      	mov	sp, r4
   18c38:	4640      	mov	r0, r8
   18c3a:	f013 fcb3 	bl	2c5a4 <bt_hci_disconnect>
		return;
   18c3e:	e7ab      	b.n	18b98 <bt_hci_le_enh_conn_complete+0x5c>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   18c40:	4620      	mov	r0, r4
   18c42:	f013 fe28 	bl	2c896 <bt_lookup_id_addr>
   18c46:	4601      	mov	r1, r0
   18c48:	f107 0010 	add.w	r0, r7, #16
   18c4c:	f013 fc74 	bl	2c538 <bt_addr_le_copy>
		bt_addr_le_copy(peer_addr, &evt->peer_addr);
   18c50:	4649      	mov	r1, r9
   18c52:	f107 0008 	add.w	r0, r7, #8
   18c56:	f013 fc6f 	bl	2c538 <bt_addr_le_copy>
   18c5a:	e7d4      	b.n	18c06 <bt_hci_le_enh_conn_complete+0xca>
   18c5c:	f107 0010 	add.w	r0, r7, #16
   18c60:	f7ff fa26 	bl	180b0 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18c64:	78eb      	ldrb	r3, [r5, #3]
   18c66:	2b01      	cmp	r3, #1
   18c68:	4604      	mov	r4, r0
   18c6a:	d10a      	bne.n	18c82 <bt_hci_le_enh_conn_complete+0x146>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   18c6c:	f001 fc96 	bl	1a59c <bt_le_adv_lookup_legacy>
   18c70:	f06f 0180 	mvn.w	r1, #128	; 0x80
   18c74:	4682      	mov	sl, r0
   18c76:	3010      	adds	r0, #16
   18c78:	f013 fc78 	bl	2c56c <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   18c7c:	4650      	mov	r0, sl
   18c7e:	f013 ff22 	bl	2cac6 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   18c82:	2c00      	cmp	r4, #0
   18c84:	d0c2      	beq.n	18c0c <bt_hci_le_enh_conn_complete+0xd0>
	conn->handle = sys_le16_to_cpu(evt->handle);
   18c86:	4620      	mov	r0, r4
   18c88:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   18c8c:	f820 3b88 	strh.w	r3, [r0], #136
	bt_addr_le_copy(&conn->le.dst, id_addr);
   18c90:	f107 0110 	add.w	r1, r7, #16
   18c94:	f013 fc50 	bl	2c538 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   18c98:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   18c9c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   18ca0:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   18ca4:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18ca8:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   18cac:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   18cb0:	f895 9003 	ldrb.w	r9, [r5, #3]
   18cb4:	f884 9003 	strb.w	r9, [r4, #3]
	conn->err = 0U;
   18cb8:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18cba:	f1b9 0f01 	cmp.w	r9, #1
	conn->err = 0U;
   18cbe:	7323      	strb	r3, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18cc0:	d128      	bne.n	18d14 <bt_hci_le_enh_conn_complete+0x1d8>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   18cc2:	f107 0108 	add.w	r1, r7, #8
   18cc6:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   18cca:	f013 fc35 	bl	2c538 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   18cce:	f001 fc65 	bl	1a59c <bt_le_adv_lookup_legacy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18cd2:	3010      	adds	r0, #16
   18cd4:	f013 fc2a 	bl	2c52c <atomic_get>
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18cd8:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   18cdc:	f8df 8164 	ldr.w	r8, [pc, #356]	; 18e44 <bt_hci_le_enh_conn_complete+0x308>
   18ce0:	f040 809b 	bne.w	18e1a <bt_hci_le_enh_conn_complete+0x2de>
				if (bt_addr_cmp(&evt->local_rpa,
   18ce4:	350b      	adds	r5, #11
	return memcmp(a, b, sizeof(*a));
   18ce6:	2206      	movs	r2, #6
   18ce8:	4959      	ldr	r1, [pc, #356]	; (18e50 <bt_hci_le_enh_conn_complete+0x314>)
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
   18cea:	f884 9096 	strb.w	r9, [r4, #150]	; 0x96
   18cee:	4628      	mov	r0, r5
   18cf0:	f013 face 	bl	2c290 <memcmp>
   18cf4:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   18cf6:	2206      	movs	r2, #6
					bt_addr_copy(&conn->le.resp_addr.a,
   18cf8:	f104 0097 	add.w	r0, r4, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
   18cfc:	2b00      	cmp	r3, #0
   18cfe:	f000 8089 	beq.w	18e14 <bt_hci_le_enh_conn_complete+0x2d8>
   18d02:	4629      	mov	r1, r5
   18d04:	f013 faeb 	bl	2c2de <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   18d08:	f8d8 30e4 	ldr.w	r3, [r8, #228]	; 0xe4
   18d0c:	065d      	lsls	r5, r3, #25
   18d0e:	d501      	bpl.n	18d14 <bt_hci_le_enh_conn_complete+0x1d8>
			bt_le_adv_resume();
   18d10:	f001 fe1a 	bl	1a948 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   18d14:	2107      	movs	r1, #7
   18d16:	4620      	mov	r0, r4
   18d18:	f002 fad6 	bl	1b2c8 <bt_conn_set_state>
	if (is_disconnected) {
   18d1c:	b11e      	cbz	r6, 18d26 <bt_hci_le_enh_conn_complete+0x1ea>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   18d1e:	2101      	movs	r1, #1
   18d20:	4620      	mov	r0, r4
   18d22:	f002 fad1 	bl	1b2c8 <bt_conn_set_state>
	bt_conn_connected(conn);
   18d26:	4620      	mov	r0, r4
   18d28:	f013 ff86 	bl	2cc38 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   18d2c:	7b63      	ldrb	r3, [r4, #13]
   18d2e:	2b07      	cmp	r3, #7
   18d30:	d16e      	bne.n	18e10 <bt_hci_le_enh_conn_complete+0x2d4>
   18d32:	1d20      	adds	r0, r4, #4
   18d34:	f013 fbfa 	bl	2c52c <atomic_get>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   18d38:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   18d3c:	4d41      	ldr	r5, [pc, #260]	; (18e44 <bt_hci_le_enh_conn_complete+0x308>)
   18d3e:	d129      	bne.n	18d94 <bt_hci_le_enh_conn_complete+0x258>
   18d40:	78e3      	ldrb	r3, [r4, #3]
   18d42:	b11b      	cbz	r3, 18d4c <bt_hci_le_enh_conn_complete+0x210>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   18d44:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   18d48:	0718      	lsls	r0, r3, #28
   18d4a:	d523      	bpl.n	18d94 <bt_hci_le_enh_conn_complete+0x258>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   18d4c:	2102      	movs	r1, #2
   18d4e:	f242 0016 	movw	r0, #8214	; 0x2016
   18d52:	f7ff fde5 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   18d56:	4606      	mov	r6, r0
   18d58:	2800      	cmp	r0, #0
   18d5a:	d067      	beq.n	18e2c <bt_hci_le_enh_conn_complete+0x2f0>
   18d5c:	2102      	movs	r1, #2
   18d5e:	300c      	adds	r0, #12
   18d60:	f015 fccf 	bl	2e702 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   18d64:	8823      	ldrh	r3, [r4, #0]
   18d66:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   18d68:	2200      	movs	r2, #0
   18d6a:	4631      	mov	r1, r6
   18d6c:	f242 0016 	movw	r0, #8214	; 0x2016
   18d70:	f7ff fe10 	bl	18994 <bt_hci_cmd_send_sync>
		if (err) {
   18d74:	b170      	cbz	r0, 18d94 <bt_hci_le_enh_conn_complete+0x258>
			LOG_ERR("Failed read remote features (%d)", err);
   18d76:	466e      	mov	r6, sp
   18d78:	b088      	sub	sp, #32
   18d7a:	aa02      	add	r2, sp, #8
   18d7c:	4b35      	ldr	r3, [pc, #212]	; (18e54 <bt_hci_le_enh_conn_complete+0x318>)
   18d7e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18d82:	2303      	movs	r3, #3
   18d84:	f842 3f10 	str.w	r3, [r2, #16]!
   18d88:	482c      	ldr	r0, [pc, #176]	; (18e3c <bt_hci_le_enh_conn_complete+0x300>)
   18d8a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18d8e:	f013 fbea 	bl	2c566 <z_log_msg_static_create.constprop.0>
   18d92:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   18d94:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
   18d98:	07d9      	lsls	r1, r3, #31
   18d9a:	d516      	bpl.n	18dca <bt_hci_le_enh_conn_complete+0x28e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   18d9c:	2100      	movs	r1, #0
   18d9e:	2302      	movs	r3, #2
   18da0:	9100      	str	r1, [sp, #0]
   18da2:	461a      	mov	r2, r3
   18da4:	4620      	mov	r0, r4
   18da6:	f013 fc36 	bl	2c616 <bt_le_set_phy>
		if (err) {
   18daa:	b170      	cbz	r0, 18dca <bt_hci_le_enh_conn_complete+0x28e>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   18dac:	466e      	mov	r6, sp
   18dae:	b088      	sub	sp, #32
   18db0:	aa02      	add	r2, sp, #8
   18db2:	4b29      	ldr	r3, [pc, #164]	; (18e58 <bt_hci_le_enh_conn_complete+0x31c>)
   18db4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18db8:	2303      	movs	r3, #3
   18dba:	f842 3f10 	str.w	r3, [r2, #16]!
   18dbe:	481f      	ldr	r0, [pc, #124]	; (18e3c <bt_hci_le_enh_conn_complete+0x300>)
   18dc0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18dc4:	f013 fbcf 	bl	2c566 <z_log_msg_static_create.constprop.0>
   18dc8:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   18dca:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   18dce:	069a      	lsls	r2, r3, #26
   18dd0:	d51e      	bpl.n	18e10 <bt_hci_le_enh_conn_complete+0x2d4>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   18dd2:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   18dd6:	689b      	ldr	r3, [r3, #8]
   18dd8:	079b      	lsls	r3, r3, #30
   18dda:	d519      	bpl.n	18e10 <bt_hci_le_enh_conn_complete+0x2d4>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   18ddc:	1db9      	adds	r1, r7, #6
   18dde:	1d38      	adds	r0, r7, #4
   18de0:	f7ff fe58 	bl	18a94 <hci_le_read_max_data_len>
			if (!err) {
   18de4:	b9a0      	cbnz	r0, 18e10 <bt_hci_le_enh_conn_complete+0x2d4>
				err = bt_le_set_data_len(conn,
   18de6:	88fa      	ldrh	r2, [r7, #6]
   18de8:	88b9      	ldrh	r1, [r7, #4]
   18dea:	4620      	mov	r0, r4
   18dec:	f013 fbf5 	bl	2c5da <bt_le_set_data_len>
				if (err) {
   18df0:	b170      	cbz	r0, 18e10 <bt_hci_le_enh_conn_complete+0x2d4>
					LOG_ERR("Failed to set data len (%d)", err);
   18df2:	466d      	mov	r5, sp
   18df4:	b088      	sub	sp, #32
   18df6:	aa02      	add	r2, sp, #8
   18df8:	4b18      	ldr	r3, [pc, #96]	; (18e5c <bt_hci_le_enh_conn_complete+0x320>)
   18dfa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18dfe:	2303      	movs	r3, #3
   18e00:	f842 3f10 	str.w	r3, [r2, #16]!
   18e04:	480d      	ldr	r0, [pc, #52]	; (18e3c <bt_hci_le_enh_conn_complete+0x300>)
   18e06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18e0a:	f013 fbac 	bl	2c566 <z_log_msg_static_create.constprop.0>
   18e0e:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   18e10:	4620      	mov	r0, r4
   18e12:	e6ca      	b.n	18baa <bt_hci_le_enh_conn_complete+0x6e>
   18e14:	f108 0169 	add.w	r1, r8, #105	; 0x69
   18e18:	e774      	b.n	18d04 <bt_hci_le_enh_conn_complete+0x1c8>
						&bt_dev.id_addr[conn->id]);
   18e1a:	7a21      	ldrb	r1, [r4, #8]
   18e1c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   18e20:	4441      	add	r1, r8
   18e22:	f104 0096 	add.w	r0, r4, #150	; 0x96
   18e26:	f013 fb87 	bl	2c538 <bt_addr_le_copy>
   18e2a:	e76d      	b.n	18d08 <bt_hci_le_enh_conn_complete+0x1cc>
		return -ENOBUFS;
   18e2c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18e30:	e7a1      	b.n	18d76 <bt_hci_le_enh_conn_complete+0x23a>
   18e32:	bf00      	nop
   18e34:	20005594 	.word	0x20005594
   18e38:	000320f0 	.word	0x000320f0
   18e3c:	000302b4 	.word	0x000302b4
   18e40:	00032111 	.word	0x00032111
   18e44:	200004f0 	.word	0x200004f0
   18e48:	0003212a 	.word	0x0003212a
   18e4c:	01000003 	.word	0x01000003
   18e50:	00031bfe 	.word	0x00031bfe
   18e54:	00032146 	.word	0x00032146
   18e58:	00032167 	.word	0x00032167
   18e5c:	0003217e 	.word	0x0003217e

00018e60 <le_legacy_conn_complete>:
{
   18e60:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   18e62:	68c1      	ldr	r1, [r0, #12]
{
   18e64:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   18e66:	780b      	ldrb	r3, [r1, #0]
   18e68:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   18e6c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   18e70:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   18e74:	78cb      	ldrb	r3, [r1, #3]
   18e76:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   18e7a:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   18e7e:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   18e82:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   18e86:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   18e8a:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   18e8e:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   18e92:	7c4b      	ldrb	r3, [r1, #17]
   18e94:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   18e98:	a801      	add	r0, sp, #4
   18e9a:	3104      	adds	r1, #4
   18e9c:	f013 fb4c 	bl	2c538 <bt_addr_le_copy>
   18ea0:	4908      	ldr	r1, [pc, #32]	; (18ec4 <le_legacy_conn_complete+0x64>)
   18ea2:	2206      	movs	r2, #6
   18ea4:	f10d 000b 	add.w	r0, sp, #11
   18ea8:	f013 fa19 	bl	2c2de <memcpy>
   18eac:	4906      	ldr	r1, [pc, #24]	; (18ec8 <le_legacy_conn_complete+0x68>)
   18eae:	2206      	movs	r2, #6
   18eb0:	f10d 0011 	add.w	r0, sp, #17
   18eb4:	f013 fa13 	bl	2c2de <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   18eb8:	4668      	mov	r0, sp
   18eba:	f7ff fe3f 	bl	18b3c <bt_hci_le_enh_conn_complete>
}
   18ebe:	b009      	add	sp, #36	; 0x24
   18ec0:	f85d fb04 	ldr.w	pc, [sp], #4
   18ec4:	20000559 	.word	0x20000559
   18ec8:	00031bfe 	.word	0x00031bfe

00018ecc <bt_unpair>:
{
   18ecc:	b513      	push	{r0, r1, r4, lr}
   18ece:	460c      	mov	r4, r1
   18ed0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   18ed4:	b9b8      	cbnz	r0, 18f06 <bt_unpair+0x3a>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   18ed6:	b949      	cbnz	r1, 18eec <bt_unpair+0x20>
		bt_foreach_bond(id, unpair_remote, &id);
   18ed8:	490c      	ldr	r1, [pc, #48]	; (18f0c <bt_unpair+0x40>)
   18eda:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18ede:	f10d 0207 	add.w	r2, sp, #7
   18ee2:	f007 fac1 	bl	20468 <bt_foreach_bond>
		return 0;
   18ee6:	2000      	movs	r0, #0
}
   18ee8:	b002      	add	sp, #8
   18eea:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   18eec:	4908      	ldr	r1, [pc, #32]	; (18f10 <bt_unpair+0x44>)
   18eee:	2207      	movs	r2, #7
   18ef0:	4620      	mov	r0, r4
   18ef2:	f013 f9cd 	bl	2c290 <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   18ef6:	2800      	cmp	r0, #0
   18ef8:	d0ee      	beq.n	18ed8 <bt_unpair+0xc>
	unpair(id, addr);
   18efa:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18efe:	4621      	mov	r1, r4
   18f00:	f7ff f872 	bl	17fe8 <unpair>
	return 0;
   18f04:	e7ef      	b.n	18ee6 <bt_unpair+0x1a>
		return -EINVAL;
   18f06:	f06f 0015 	mvn.w	r0, #21
   18f0a:	e7ed      	b.n	18ee8 <bt_unpair+0x1c>
   18f0c:	0002c55d 	.word	0x0002c55d
   18f10:	00031bf1 	.word	0x00031bf1

00018f14 <bt_security_err_get>:
	switch (hci_err) {
   18f14:	2829      	cmp	r0, #41	; 0x29
   18f16:	bf9a      	itte	ls
   18f18:	4b01      	ldrls	r3, [pc, #4]	; (18f20 <bt_security_err_get+0xc>)
   18f1a:	5c18      	ldrbls	r0, [r3, r0]
{
   18f1c:	2009      	movhi	r0, #9
}
   18f1e:	4770      	bx	lr
   18f20:	000324c2 	.word	0x000324c2

00018f24 <hci_encrypt_key_refresh_complete>:
{
   18f24:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f26:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   18f28:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   18f2a:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   18f2e:	781d      	ldrb	r5, [r3, #0]
{
   18f30:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   18f32:	4630      	mov	r0, r6
   18f34:	f002 f9c0 	bl	1b2b8 <bt_conn_lookup_handle>
	if (!conn) {
   18f38:	4604      	mov	r4, r0
   18f3a:	b988      	cbnz	r0, 18f60 <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   18f3c:	466c      	mov	r4, sp
   18f3e:	b088      	sub	sp, #32
   18f40:	466a      	mov	r2, sp
   18f42:	4b1f      	ldr	r3, [pc, #124]	; (18fc0 <hci_encrypt_key_refresh_complete+0x9c>)
   18f44:	481f      	ldr	r0, [pc, #124]	; (18fc4 <hci_encrypt_key_refresh_complete+0xa0>)
   18f46:	e9c2 3605 	strd	r3, r6, [r2, #20]
   18f4a:	2303      	movs	r3, #3
   18f4c:	f842 3f10 	str.w	r3, [r2, #16]!
   18f50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18f54:	f013 fb07 	bl	2c566 <z_log_msg_static_create.constprop.0>
   18f58:	46a5      	mov	sp, r4
}
   18f5a:	371c      	adds	r7, #28
   18f5c:	46bd      	mov	sp, r7
   18f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   18f60:	b15d      	cbz	r5, 18f7a <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   18f62:	4628      	mov	r0, r5
   18f64:	f7ff ffd6 	bl	18f14 <bt_security_err_get>
   18f68:	4629      	mov	r1, r5
   18f6a:	4602      	mov	r2, r0
   18f6c:	4620      	mov	r0, r4
   18f6e:	f002 fb7b 	bl	1b668 <bt_conn_security_changed>
	bt_conn_unref(conn);
   18f72:	4620      	mov	r0, r4
   18f74:	f013 fe22 	bl	2cbbc <bt_conn_unref>
   18f78:	e7ef      	b.n	18f5a <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
   18f7a:	7883      	ldrb	r3, [r0, #2]
   18f7c:	2b01      	cmp	r3, #1
   18f7e:	d1f0      	bne.n	18f62 <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   18f80:	f007 f97c 	bl	2027c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   18f84:	4620      	mov	r0, r4
   18f86:	f013 fab8 	bl	2c4fa <update_sec_level>
   18f8a:	2800      	cmp	r0, #0
   18f8c:	d1e9      	bne.n	18f62 <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   18f8e:	2005      	movs	r0, #5
   18f90:	f7ff ffc0 	bl	18f14 <bt_security_err_get>
   18f94:	2105      	movs	r1, #5
   18f96:	4602      	mov	r2, r0
   18f98:	4620      	mov	r0, r4
   18f9a:	f002 fb65 	bl	1b668 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   18f9e:	4b0a      	ldr	r3, [pc, #40]	; (18fc8 <hci_encrypt_key_refresh_complete+0xa4>)
   18fa0:	617b      	str	r3, [r7, #20]
   18fa2:	4808      	ldr	r0, [pc, #32]	; (18fc4 <hci_encrypt_key_refresh_complete+0xa0>)
   18fa4:	2302      	movs	r3, #2
   18fa6:	f107 0210 	add.w	r2, r7, #16
   18faa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18fae:	613b      	str	r3, [r7, #16]
   18fb0:	f013 fad9 	bl	2c566 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   18fb4:	2105      	movs	r1, #5
   18fb6:	4620      	mov	r0, r4
   18fb8:	f013 fe47 	bl	2cc4a <bt_conn_disconnect>
   18fbc:	e7d9      	b.n	18f72 <hci_encrypt_key_refresh_complete+0x4e>
   18fbe:	bf00      	nop
   18fc0:	00031e80 	.word	0x00031e80
   18fc4:	000302b4 	.word	0x000302b4
   18fc8:	0003219a 	.word	0x0003219a

00018fcc <hci_encrypt_change>:
{
   18fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18fd0:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   18fd2:	68c6      	ldr	r6, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18fd4:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   18fd8:	7835      	ldrb	r5, [r6, #0]
{
   18fda:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   18fdc:	4640      	mov	r0, r8
   18fde:	f002 f96b 	bl	1b2b8 <bt_conn_lookup_handle>
	if (!conn) {
   18fe2:	4604      	mov	r4, r0
   18fe4:	b990      	cbnz	r0, 1900c <hci_encrypt_change+0x40>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   18fe6:	466c      	mov	r4, sp
   18fe8:	b088      	sub	sp, #32
   18fea:	466a      	mov	r2, sp
   18fec:	4b23      	ldr	r3, [pc, #140]	; (1907c <hci_encrypt_change+0xb0>)
   18fee:	4824      	ldr	r0, [pc, #144]	; (19080 <hci_encrypt_change+0xb4>)
   18ff0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   18ff4:	2303      	movs	r3, #3
   18ff6:	f842 3f10 	str.w	r3, [r2, #16]!
   18ffa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18ffe:	f013 fab2 	bl	2c566 <z_log_msg_static_create.constprop.0>
   19002:	46a5      	mov	sp, r4
}
   19004:	3718      	adds	r7, #24
   19006:	46bd      	mov	sp, r7
   19008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   1900c:	b15d      	cbz	r5, 19026 <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   1900e:	4628      	mov	r0, r5
   19010:	f7ff ff80 	bl	18f14 <bt_security_err_get>
   19014:	4629      	mov	r1, r5
   19016:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   19018:	4620      	mov	r0, r4
   1901a:	f002 fb25 	bl	1b668 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1901e:	4620      	mov	r0, r4
   19020:	f013 fdcc 	bl	2cbbc <bt_conn_unref>
   19024:	e7ee      	b.n	19004 <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   19026:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   19028:	78f3      	ldrb	r3, [r6, #3]
   1902a:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   1902c:	2a01      	cmp	r2, #1
   1902e:	d005      	beq.n	1903c <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   19030:	2000      	movs	r0, #0
   19032:	f7ff ff6f 	bl	18f14 <bt_security_err_get>
   19036:	2100      	movs	r1, #0
   19038:	4602      	mov	r2, r0
   1903a:	e7ed      	b.n	19018 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
   1903c:	b10b      	cbz	r3, 19042 <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
   1903e:	f007 f91d 	bl	2027c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   19042:	4620      	mov	r0, r4
   19044:	f013 fa59 	bl	2c4fa <update_sec_level>
   19048:	2800      	cmp	r0, #0
   1904a:	d1f1      	bne.n	19030 <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1904c:	2005      	movs	r0, #5
   1904e:	f7ff ff61 	bl	18f14 <bt_security_err_get>
   19052:	2105      	movs	r1, #5
   19054:	4602      	mov	r2, r0
   19056:	4620      	mov	r0, r4
   19058:	f002 fb06 	bl	1b668 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   1905c:	4b09      	ldr	r3, [pc, #36]	; (19084 <hci_encrypt_change+0xb8>)
   1905e:	617b      	str	r3, [r7, #20]
   19060:	4807      	ldr	r0, [pc, #28]	; (19080 <hci_encrypt_change+0xb4>)
   19062:	2302      	movs	r3, #2
   19064:	f107 0210 	add.w	r2, r7, #16
   19068:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1906c:	613b      	str	r3, [r7, #16]
   1906e:	f013 fa7a 	bl	2c566 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   19072:	2105      	movs	r1, #5
   19074:	4620      	mov	r0, r4
   19076:	f013 fde8 	bl	2cc4a <bt_conn_disconnect>
   1907a:	e7d0      	b.n	1901e <hci_encrypt_change+0x52>
   1907c:	00031e80 	.word	0x00031e80
   19080:	000302b4 	.word	0x000302b4
   19084:	0003219a 	.word	0x0003219a

00019088 <bt_send>:
	return bt_dev.drv->send(buf);
   19088:	4b02      	ldr	r3, [pc, #8]	; (19094 <bt_send+0xc>)
   1908a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   1908e:	695b      	ldr	r3, [r3, #20]
   19090:	4718      	bx	r3
   19092:	bf00      	nop
   19094:	200004f0 	.word	0x200004f0

00019098 <bt_hci_cmd_send>:
{
   19098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1909a:	4605      	mov	r5, r0
   1909c:	af00      	add	r7, sp, #0
	if (!buf) {
   1909e:	460c      	mov	r4, r1
   190a0:	b919      	cbnz	r1, 190aa <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   190a2:	f7ff fc3d 	bl	18920 <bt_hci_cmd_create>
		if (!buf) {
   190a6:	4604      	mov	r4, r0
   190a8:	b318      	cbz	r0, 190f2 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   190aa:	f640 4335 	movw	r3, #3125	; 0xc35
   190ae:	429d      	cmp	r5, r3
   190b0:	d119      	bne.n	190e6 <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   190b2:	4620      	mov	r0, r4
   190b4:	f7ff ffe8 	bl	19088 <bt_send>
		if (err) {
   190b8:	4605      	mov	r5, r0
   190ba:	b188      	cbz	r0, 190e0 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   190bc:	466e      	mov	r6, sp
   190be:	b088      	sub	sp, #32
   190c0:	466a      	mov	r2, sp
   190c2:	4b0d      	ldr	r3, [pc, #52]	; (190f8 <bt_hci_cmd_send+0x60>)
   190c4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   190c8:	2303      	movs	r3, #3
   190ca:	480c      	ldr	r0, [pc, #48]	; (190fc <bt_hci_cmd_send+0x64>)
   190cc:	f842 3f10 	str.w	r3, [r2, #16]!
   190d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   190d4:	f013 fa47 	bl	2c566 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   190d8:	4620      	mov	r0, r4
   190da:	46b5      	mov	sp, r6
   190dc:	f007 fd32 	bl	20b44 <net_buf_unref>
}
   190e0:	4628      	mov	r0, r5
   190e2:	46bd      	mov	sp, r7
   190e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   190e6:	4806      	ldr	r0, [pc, #24]	; (19100 <bt_hci_cmd_send+0x68>)
   190e8:	4621      	mov	r1, r4
   190ea:	f015 fade 	bl	2e6aa <net_buf_put>
	return 0;
   190ee:	2500      	movs	r5, #0
   190f0:	e7f6      	b.n	190e0 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   190f2:	f06f 0568 	mvn.w	r5, #104	; 0x68
   190f6:	e7f3      	b.n	190e0 <bt_hci_cmd_send+0x48>
   190f8:	000321c0 	.word	0x000321c0
   190fc:	000302b4 	.word	0x000302b4
   19100:	2000063c 	.word	0x2000063c

00019104 <le_ltk_request>:
{
   19104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19108:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1910a:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   1910c:	8826      	ldrh	r6, [r4, #0]
   1910e:	fa1f f886 	uxth.w	r8, r6
{
   19112:	af02      	add	r7, sp, #8
	conn = bt_conn_lookup_handle(handle);
   19114:	4640      	mov	r0, r8
   19116:	f002 f8cf 	bl	1b2b8 <bt_conn_lookup_handle>
	if (!conn) {
   1911a:	4605      	mov	r5, r0
   1911c:	b990      	cbnz	r0, 19144 <le_ltk_request+0x40>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1911e:	466c      	mov	r4, sp
   19120:	b088      	sub	sp, #32
   19122:	aa02      	add	r2, sp, #8
   19124:	4b28      	ldr	r3, [pc, #160]	; (191c8 <le_ltk_request+0xc4>)
   19126:	4829      	ldr	r0, [pc, #164]	; (191cc <le_ltk_request+0xc8>)
   19128:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1912c:	2303      	movs	r3, #3
   1912e:	f842 3f10 	str.w	r3, [r2, #16]!
   19132:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19136:	f013 fa16 	bl	2c566 <z_log_msg_static_create.constprop.0>
   1913a:	46a5      	mov	sp, r4
}
   1913c:	3728      	adds	r7, #40	; 0x28
   1913e:	46bd      	mov	sp, r7
   19140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   19144:	f8d4 2002 	ldr.w	r2, [r4, #2]
   19148:	f8d4 3006 	ldr.w	r3, [r4, #6]
   1914c:	9701      	str	r7, [sp, #4]
   1914e:	8961      	ldrh	r1, [r4, #10]
   19150:	9100      	str	r1, [sp, #0]
   19152:	f015 f874 	bl	2e23e <bt_smp_request_ltk>
   19156:	b328      	cbz	r0, 191a4 <le_ltk_request+0xa0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   19158:	2112      	movs	r1, #18
   1915a:	f242 001a 	movw	r0, #8218	; 0x201a
   1915e:	f7ff fbdf 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   19162:	4604      	mov	r4, r0
   19164:	b970      	cbnz	r0, 19184 <le_ltk_request+0x80>
		LOG_ERR("Out of command buffers");
   19166:	4b1a      	ldr	r3, [pc, #104]	; (191d0 <le_ltk_request+0xcc>)
   19168:	627b      	str	r3, [r7, #36]	; 0x24
   1916a:	2302      	movs	r3, #2
   1916c:	4817      	ldr	r0, [pc, #92]	; (191cc <le_ltk_request+0xc8>)
   1916e:	623b      	str	r3, [r7, #32]
   19170:	f107 0220 	add.w	r2, r7, #32
   19174:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19178:	f013 f9f5 	bl	2c566 <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
   1917c:	4628      	mov	r0, r5
   1917e:	f013 fd1d 	bl	2cbbc <bt_conn_unref>
   19182:	e7db      	b.n	1913c <le_ltk_request+0x38>
   19184:	2112      	movs	r1, #18
   19186:	300c      	adds	r0, #12
   19188:	f015 fabb 	bl	2e702 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1918c:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   1918e:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   19192:	2210      	movs	r2, #16
   19194:	f013 f8a3 	bl	2c2de <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   19198:	4621      	mov	r1, r4
   1919a:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1919e:	f7ff ff7b 	bl	19098 <bt_hci_cmd_send>
   191a2:	e7eb      	b.n	1917c <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   191a4:	2102      	movs	r1, #2
   191a6:	f242 001b 	movw	r0, #8219	; 0x201b
   191aa:	f7ff fbb9 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   191ae:	4604      	mov	r4, r0
   191b0:	2800      	cmp	r0, #0
   191b2:	d0d8      	beq.n	19166 <le_ltk_request+0x62>
   191b4:	2102      	movs	r1, #2
   191b6:	300c      	adds	r0, #12
   191b8:	f015 faa3 	bl	2e702 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   191bc:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   191be:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   191c0:	f242 001b 	movw	r0, #8219	; 0x201b
   191c4:	e7eb      	b.n	1919e <le_ltk_request+0x9a>
   191c6:	bf00      	nop
   191c8:	00031e5c 	.word	0x00031e5c
   191cc:	000302b4 	.word	0x000302b4
   191d0:	000321e2 	.word	0x000321e2

000191d4 <le_conn_param_req>:
{
   191d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191d8:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   191da:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   191dc:	78d9      	ldrb	r1, [r3, #3]
   191de:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   191e0:	f8b3 8000 	ldrh.w	r8, [r3]
{
   191e4:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   191e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   191ea:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   191ec:	7959      	ldrb	r1, [r3, #5]
   191ee:	791a      	ldrb	r2, [r3, #4]
   191f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   191f4:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   191f6:	799a      	ldrb	r2, [r3, #6]
   191f8:	79d9      	ldrb	r1, [r3, #7]
   191fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   191fe:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   19200:	7a1a      	ldrb	r2, [r3, #8]
   19202:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   19204:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   19208:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1920c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1920e:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   19210:	f002 f852 	bl	1b2b8 <bt_conn_lookup_handle>
	if (!conn) {
   19214:	4606      	mov	r6, r0
   19216:	b9b0      	cbnz	r0, 19246 <le_conn_param_req+0x72>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19218:	466d      	mov	r5, sp
   1921a:	b088      	sub	sp, #32
   1921c:	466a      	mov	r2, sp
   1921e:	4b20      	ldr	r3, [pc, #128]	; (192a0 <le_conn_param_req+0xcc>)
   19220:	4820      	ldr	r0, [pc, #128]	; (192a4 <le_conn_param_req+0xd0>)
   19222:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19226:	2303      	movs	r3, #3
   19228:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1922c:	f842 3f10 	str.w	r3, [r2, #16]!
   19230:	f013 f999 	bl	2c566 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   19234:	2102      	movs	r1, #2
   19236:	46ad      	mov	sp, r5
   19238:	4620      	mov	r0, r4
   1923a:	f013 fa38 	bl	2c6ae <le_conn_param_neg_reply>
}
   1923e:	3708      	adds	r7, #8
   19240:	46bd      	mov	sp, r7
   19242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   19246:	4639      	mov	r1, r7
   19248:	f002 f9a6 	bl	1b598 <le_param_req>
   1924c:	b938      	cbnz	r0, 1925e <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1924e:	211e      	movs	r1, #30
   19250:	4620      	mov	r0, r4
   19252:	f013 fa2c 	bl	2c6ae <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   19256:	4630      	mov	r0, r6
   19258:	f013 fcb0 	bl	2cbbc <bt_conn_unref>
   1925c:	e7ef      	b.n	1923e <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1925e:	210e      	movs	r1, #14
   19260:	f242 0020 	movw	r0, #8224	; 0x2020
   19264:	f7ff fb5c 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   19268:	4605      	mov	r5, r0
   1926a:	2800      	cmp	r0, #0
   1926c:	d0f3      	beq.n	19256 <le_conn_param_req+0x82>
   1926e:	210e      	movs	r1, #14
   19270:	300c      	adds	r0, #12
   19272:	f015 fa46 	bl	2e702 <net_buf_simple_add>
   19276:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   19278:	220e      	movs	r2, #14
   1927a:	2100      	movs	r1, #0
   1927c:	f013 f83a 	bl	2c2f4 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   19280:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   19284:	883b      	ldrh	r3, [r7, #0]
   19286:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   19288:	887b      	ldrh	r3, [r7, #2]
   1928a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1928c:	88bb      	ldrh	r3, [r7, #4]
   1928e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   19290:	88fb      	ldrh	r3, [r7, #6]
   19292:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   19294:	4629      	mov	r1, r5
   19296:	f242 0020 	movw	r0, #8224	; 0x2020
   1929a:	f7ff fefd 	bl	19098 <bt_hci_cmd_send>
   1929e:	e7da      	b.n	19256 <le_conn_param_req+0x82>
   192a0:	00031e5c 	.word	0x00031e5c
   192a4:	000302b4 	.word	0x000302b4

000192a8 <hci_tx_thread>:
{
   192a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   192ac:	f8df 8154 	ldr.w	r8, [pc, #340]	; 19404 <hci_tx_thread+0x15c>
		BT_ASSERT(err == 0);
   192b0:	f8df 9154 	ldr.w	r9, [pc, #340]	; 19408 <hci_tx_thread+0x160>
{
   192b4:	b087      	sub	sp, #28
   192b6:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   192b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   192bc:	4853      	ldr	r0, [pc, #332]	; (1940c <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
   192be:	f36f 3394 	bfc	r3, #14, #7
   192c2:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   192c6:	f001 ffad 	bl	1b224 <bt_conn_prepare_events>
   192ca:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   192cc:	484d      	ldr	r0, [pc, #308]	; (19404 <hci_tx_thread+0x15c>)
   192ce:	f04f 32ff 	mov.w	r2, #4294967295
   192d2:	f04f 33ff 	mov.w	r3, #4294967295
   192d6:	4629      	mov	r1, r5
   192d8:	f00d ffac 	bl	27234 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   192dc:	b160      	cbz	r0, 192f8 <hci_tx_thread+0x50>
   192de:	494c      	ldr	r1, [pc, #304]	; (19410 <hci_tx_thread+0x168>)
   192e0:	484c      	ldr	r0, [pc, #304]	; (19414 <hci_tx_thread+0x16c>)
   192e2:	f640 23c8 	movw	r3, #2760	; 0xac8
   192e6:	464a      	mov	r2, r9
   192e8:	f011 fd65 	bl	2adb6 <assert_print>
   192ec:	4040      	eors	r0, r0
   192ee:	f380 8811 	msr	BASEPRI, r0
   192f2:	f04f 0003 	mov.w	r0, #3
   192f6:	df02      	svc	2
{
   192f8:	4e42      	ldr	r6, [pc, #264]	; (19404 <hci_tx_thread+0x15c>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   192fa:	f04f 0a03 	mov.w	sl, #3
	for (; count; ev++, count--) {
   192fe:	b915      	cbnz	r5, 19306 <hci_tx_thread+0x5e>
	z_impl_k_yield();
   19300:	f00d fc4a 	bl	26b98 <z_impl_k_yield>
	while (1) {
   19304:	e7d8      	b.n	192b8 <hci_tx_thread+0x10>
		switch (ev->state) {
   19306:	68f3      	ldr	r3, [r6, #12]
   19308:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1930c:	2b02      	cmp	r3, #2
   1930e:	d960      	bls.n	193d2 <hci_tx_thread+0x12a>
   19310:	2b04      	cmp	r3, #4
   19312:	d168      	bne.n	193e6 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   19314:	7b33      	ldrb	r3, [r6, #12]
   19316:	2b00      	cmp	r3, #0
   19318:	d15e      	bne.n	193d8 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1931a:	483f      	ldr	r0, [pc, #252]	; (19418 <hci_tx_thread+0x170>)
   1931c:	2200      	movs	r2, #0
   1931e:	2300      	movs	r3, #0
   19320:	f015 f994 	bl	2e64c <net_buf_get>
	BT_ASSERT(buf);
   19324:	4604      	mov	r4, r0
   19326:	b960      	cbnz	r0, 19342 <hci_tx_thread+0x9a>
   19328:	493c      	ldr	r1, [pc, #240]	; (1941c <hci_tx_thread+0x174>)
   1932a:	483a      	ldr	r0, [pc, #232]	; (19414 <hci_tx_thread+0x16c>)
   1932c:	f640 235a 	movw	r3, #2650	; 0xa5a
   19330:	464a      	mov	r2, r9
   19332:	f011 fd40 	bl	2adb6 <assert_print>
   19336:	4040      	eors	r0, r0
   19338:	f380 8811 	msr	BASEPRI, r0
   1933c:	f04f 0003 	mov.w	r0, #3
   19340:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   19342:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 19420 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
   19346:	4837      	ldr	r0, [pc, #220]	; (19424 <hci_tx_thread+0x17c>)
   19348:	f04f 33ff 	mov.w	r3, #4294967295
   1934c:	f04f 32ff 	mov.w	r2, #4294967295
   19350:	f00c ffc8 	bl	262e4 <z_impl_k_sem_take>
   19354:	f8db 3140 	ldr.w	r3, [fp, #320]	; 0x140
   19358:	b18b      	cbz	r3, 1937e <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   1935a:	4b33      	ldr	r3, [pc, #204]	; (19428 <hci_tx_thread+0x180>)
   1935c:	4833      	ldr	r0, [pc, #204]	; (1942c <hci_tx_thread+0x184>)
   1935e:	617b      	str	r3, [r7, #20]
   19360:	f107 0210 	add.w	r2, r7, #16
   19364:	2302      	movs	r3, #2
   19366:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1936a:	613b      	str	r3, [r7, #16]
   1936c:	f013 f8fb 	bl	2c566 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   19370:	f8db 0140 	ldr.w	r0, [fp, #320]	; 0x140
   19374:	f007 fbe6 	bl	20b44 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   19378:	2300      	movs	r3, #0
   1937a:	f8cb 3140 	str.w	r3, [fp, #320]	; 0x140
	bt_dev.sent_cmd = net_buf_ref(buf);
   1937e:	4620      	mov	r0, r4
   19380:	f015 f995 	bl	2e6ae <net_buf_ref>
   19384:	f8cb 0140 	str.w	r0, [fp, #320]	; 0x140
	err = bt_send(buf);
   19388:	4620      	mov	r0, r4
   1938a:	f7ff fe7d 	bl	19088 <bt_send>
	if (err) {
   1938e:	b300      	cbz	r0, 193d2 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   19390:	46eb      	mov	fp, sp
   19392:	b088      	sub	sp, #32
   19394:	466a      	mov	r2, sp
   19396:	4b26      	ldr	r3, [pc, #152]	; (19430 <hci_tx_thread+0x188>)
   19398:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1939c:	2303      	movs	r3, #3
   1939e:	f842 3f10 	str.w	r3, [r2, #16]!
   193a2:	4822      	ldr	r0, [pc, #136]	; (1942c <hci_tx_thread+0x184>)
   193a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   193a8:	f013 f8dd 	bl	2c566 <z_log_msg_static_create.constprop.0>
   193ac:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   193ae:	481d      	ldr	r0, [pc, #116]	; (19424 <hci_tx_thread+0x17c>)
   193b0:	f00c ff72 	bl	26298 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   193b4:	4620      	mov	r0, r4
   193b6:	f007 fb0b 	bl	209d0 <net_buf_id>
   193ba:	4b1e      	ldr	r3, [pc, #120]	; (19434 <hci_tx_thread+0x18c>)
   193bc:	220c      	movs	r2, #12
   193be:	fb02 3000 	mla	r0, r2, r0, r3
   193c2:	211f      	movs	r1, #31
   193c4:	8840      	ldrh	r0, [r0, #2]
   193c6:	4622      	mov	r2, r4
   193c8:	f7ff f8be 	bl	18548 <hci_cmd_done>
		net_buf_unref(buf);
   193cc:	4620      	mov	r0, r4
   193ce:	f007 fbb9 	bl	20b44 <net_buf_unref>
	for (; count; ev++, count--) {
   193d2:	3614      	adds	r6, #20
   193d4:	3d01      	subs	r5, #1
   193d6:	e792      	b.n	192fe <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   193d8:	2b01      	cmp	r3, #1
   193da:	d1fa      	bne.n	193d2 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   193dc:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   193de:	3838      	subs	r0, #56	; 0x38
   193e0:	f002 fac2 	bl	1b968 <bt_conn_process_tx>
   193e4:	e7f5      	b.n	193d2 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   193e6:	466c      	mov	r4, sp
   193e8:	b088      	sub	sp, #32
   193ea:	466a      	mov	r2, sp
   193ec:	4912      	ldr	r1, [pc, #72]	; (19438 <hci_tx_thread+0x190>)
   193ee:	480f      	ldr	r0, [pc, #60]	; (1942c <hci_tx_thread+0x184>)
		switch (ev->state) {
   193f0:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   193f4:	f842 af10 	str.w	sl, [r2, #16]!
   193f8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   193fc:	f013 f8b3 	bl	2c566 <z_log_msg_static_create.constprop.0>
   19400:	46a5      	mov	sp, r4
   19402:	e7e6      	b.n	193d2 <hci_tx_thread+0x12a>
   19404:	20000838 	.word	0x20000838
   19408:	00031ec8 	.word	0x00031ec8
   1940c:	2000084c 	.word	0x2000084c
   19410:	0003207f 	.word	0x0003207f
   19414:	00031f15 	.word	0x00031f15
   19418:	2000063c 	.word	0x2000063c
   1941c:	00033860 	.word	0x00033860
   19420:	200004f0 	.word	0x200004f0
   19424:	20000618 	.word	0x20000618
   19428:	000321f9 	.word	0x000321f9
   1942c:	000302b4 	.word	0x000302b4
   19430:	000321c0 	.word	0x000321c0
   19434:	20003ab8 	.word	0x20003ab8
   19438:	00032214 	.word	0x00032214

0001943c <hci_event_prio>:
{
   1943c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19440:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   19442:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   19446:	4630      	mov	r0, r6
   19448:	f015 f992 	bl	2e770 <net_buf_simple_headroom>
	state->len = buf->len;
   1944c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19450:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   19454:	4605      	mov	r5, r0
   19456:	d80c      	bhi.n	19472 <hci_event_prio+0x36>
   19458:	4a1c      	ldr	r2, [pc, #112]	; (194cc <hci_event_prio+0x90>)
   1945a:	491d      	ldr	r1, [pc, #116]	; (194d0 <hci_event_prio+0x94>)
   1945c:	481d      	ldr	r0, [pc, #116]	; (194d4 <hci_event_prio+0x98>)
   1945e:	f640 636f 	movw	r3, #3695	; 0xe6f
   19462:	f011 fca8 	bl	2adb6 <assert_print>
   19466:	4040      	eors	r0, r0
   19468:	f380 8811 	msr	BASEPRI, r0
   1946c:	f04f 0003 	mov.w	r0, #3
   19470:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   19472:	4630      	mov	r0, r6
   19474:	2102      	movs	r1, #2
   19476:	f015 f96b 	bl	2e750 <net_buf_simple_pull_mem>
   1947a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1947c:	7800      	ldrb	r0, [r0, #0]
   1947e:	f013 f82a 	bl	2c4d6 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   19482:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19484:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   19486:	d40c      	bmi.n	194a2 <hci_event_prio+0x66>
   19488:	4a10      	ldr	r2, [pc, #64]	; (194cc <hci_event_prio+0x90>)
   1948a:	4913      	ldr	r1, [pc, #76]	; (194d8 <hci_event_prio+0x9c>)
   1948c:	4811      	ldr	r0, [pc, #68]	; (194d4 <hci_event_prio+0x98>)
   1948e:	f640 6373 	movw	r3, #3699	; 0xe73
   19492:	f011 fc90 	bl	2adb6 <assert_print>
   19496:	4040      	eors	r0, r0
   19498:	f380 8811 	msr	BASEPRI, r0
   1949c:	f04f 0003 	mov.w	r0, #3
   194a0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   194a2:	2305      	movs	r3, #5
   194a4:	4a0d      	ldr	r2, [pc, #52]	; (194dc <hci_event_prio+0xa0>)
   194a6:	7838      	ldrb	r0, [r7, #0]
   194a8:	4621      	mov	r1, r4
   194aa:	f7fe ff15 	bl	182d8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   194ae:	07b3      	lsls	r3, r6, #30
   194b0:	d507      	bpl.n	194c2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   194b2:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   194b4:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   194b8:	fa13 f585 	uxtah	r5, r3, r5
   194bc:	60e5      	str	r5, [r4, #12]
}
   194be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   194c2:	4620      	mov	r0, r4
}
   194c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   194c8:	f007 bb3c 	b.w	20b44 <net_buf_unref>
   194cc:	00031ec8 	.word	0x00031ec8
   194d0:	00031efc 	.word	0x00031efc
   194d4:	00031f15 	.word	0x00031f15
   194d8:	00032235 	.word	0x00032235
   194dc:	000307bc 	.word	0x000307bc

000194e0 <bt_recv>:
{
   194e0:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   194e2:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   194e4:	2b01      	cmp	r3, #1
{
   194e6:	af00      	add	r7, sp, #0
   194e8:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   194ea:	d006      	beq.n	194fa <bt_recv+0x1a>
   194ec:	2b03      	cmp	r3, #3
   194ee:	d112      	bne.n	19516 <bt_recv+0x36>
			rx_queue_put(buf);
   194f0:	f7fe fe1e 	bl	18130 <rx_queue_put>
		return 0;
   194f4:	2000      	movs	r0, #0
}
   194f6:	46bd      	mov	sp, r7
   194f8:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   194fa:	68c3      	ldr	r3, [r0, #12]
   194fc:	7818      	ldrb	r0, [r3, #0]
   194fe:	f012 ffea 	bl	2c4d6 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   19502:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19504:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   19506:	d502      	bpl.n	1950e <bt_recv+0x2e>
			hci_event_prio(buf);
   19508:	4620      	mov	r0, r4
   1950a:	f7ff ff97 	bl	1943c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1950e:	07ab      	lsls	r3, r5, #30
   19510:	d5f0      	bpl.n	194f4 <bt_recv+0x14>
			rx_queue_put(buf);
   19512:	4620      	mov	r0, r4
   19514:	e7ec      	b.n	194f0 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   19516:	466d      	mov	r5, sp
   19518:	b088      	sub	sp, #32
   1951a:	466a      	mov	r2, sp
   1951c:	4908      	ldr	r1, [pc, #32]	; (19540 <bt_recv+0x60>)
   1951e:	4809      	ldr	r0, [pc, #36]	; (19544 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   19520:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   19524:	2303      	movs	r3, #3
   19526:	f842 3f10 	str.w	r3, [r2, #16]!
   1952a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1952e:	f013 f81a 	bl	2c566 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   19532:	4620      	mov	r0, r4
   19534:	46ad      	mov	sp, r5
   19536:	f007 fb05 	bl	20b44 <net_buf_unref>
		return -EINVAL;
   1953a:	f06f 0015 	mvn.w	r0, #21
   1953e:	e7da      	b.n	194f6 <bt_recv+0x16>
   19540:	0003224e 	.word	0x0003224e
   19544:	000302b4 	.word	0x000302b4

00019548 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   19548:	4a08      	ldr	r2, [pc, #32]	; (1956c <bt_hci_driver_register+0x24>)
{
   1954a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1954c:	f8d2 0164 	ldr.w	r0, [r2, #356]	; 0x164
   19550:	b930      	cbnz	r0, 19560 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   19552:	68d9      	ldr	r1, [r3, #12]
   19554:	b139      	cbz	r1, 19566 <bt_hci_driver_register+0x1e>
   19556:	6959      	ldr	r1, [r3, #20]
   19558:	b129      	cbz	r1, 19566 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1955a:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	return 0;
   1955e:	4770      	bx	lr
		return -EALREADY;
   19560:	f06f 0077 	mvn.w	r0, #119	; 0x77
   19564:	4770      	bx	lr
		return -EINVAL;
   19566:	f06f 0015 	mvn.w	r0, #21
}
   1956a:	4770      	bx	lr
   1956c:	200004f0 	.word	0x200004f0

00019570 <bt_finalize_init>:
{
   19570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   19574:	4c45      	ldr	r4, [pc, #276]	; (1968c <bt_finalize_init+0x11c>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19576:	4846      	ldr	r0, [pc, #280]	; (19690 <bt_finalize_init+0x120>)
   19578:	4d46      	ldr	r5, [pc, #280]	; (19694 <bt_finalize_init+0x124>)
{
   1957a:	b083      	sub	sp, #12
   1957c:	2104      	movs	r1, #4
   1957e:	af00      	add	r7, sp, #0
   19580:	f012 ffdd 	bl	2c53e <atomic_or>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   19584:	79e2      	ldrb	r2, [r4, #7]
   19586:	4b44      	ldr	r3, [pc, #272]	; (19698 <bt_finalize_init+0x128>)
   19588:	4620      	mov	r0, r4
   1958a:	2a01      	cmp	r2, #1
   1958c:	bf88      	it	hi
   1958e:	461d      	movhi	r5, r3
   19590:	466e      	mov	r6, sp
   19592:	f7fe faa1 	bl	17ad8 <bt_addr_le_str>
   19596:	b08a      	sub	sp, #40	; 0x28
   19598:	466b      	mov	r3, sp
   1959a:	4940      	ldr	r1, [pc, #256]	; (1969c <bt_finalize_init+0x12c>)
   1959c:	61d8      	str	r0, [r3, #28]
   1959e:	e9c3 1505 	strd	r1, r5, [r3, #20]
   195a2:	493f      	ldr	r1, [pc, #252]	; (196a0 <bt_finalize_init+0x130>)
   195a4:	6079      	str	r1, [r7, #4]
   195a6:	f103 0210 	add.w	r2, r3, #16
   195aa:	1d38      	adds	r0, r7, #4
   195ac:	f103 011f 	add.w	r1, r3, #31
   195b0:	f103 0523 	add.w	r5, r3, #35	; 0x23
   195b4:	f810 cb01 	ldrb.w	ip, [r0], #1
   195b8:	f801 cf01 	strb.w	ip, [r1, #1]!
   195bc:	42a9      	cmp	r1, r5
   195be:	d1f9      	bne.n	195b4 <bt_finalize_init+0x44>
   195c0:	4938      	ldr	r1, [pc, #224]	; (196a4 <bt_finalize_init+0x134>)
   195c2:	6119      	str	r1, [r3, #16]
   195c4:	4838      	ldr	r0, [pc, #224]	; (196a8 <bt_finalize_init+0x138>)
   195c6:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 1968c <bt_finalize_init+0x11c>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   195ca:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 196ac <bt_finalize_init+0x13c>
   195ce:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 196a8 <bt_finalize_init+0x138>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   195d2:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   195d6:	f012 ffc6 	bl	2c566 <z_log_msg_static_create.constprop.0>
   195da:	46b5      	mov	sp, r6
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   195dc:	4e34      	ldr	r6, [pc, #208]	; (196b0 <bt_finalize_init+0x140>)
	for (i = 1; i < bt_dev.id_count; i++) {
   195de:	2501      	movs	r5, #1
   195e0:	79e3      	ldrb	r3, [r4, #7]
   195e2:	429d      	cmp	r5, r3
   195e4:	f10b 0b07 	add.w	fp, fp, #7
   195e8:	db39      	blt.n	1965e <bt_finalize_init+0xee>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   195ea:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
   195ee:	4628      	mov	r0, r5
   195f0:	f7fe fcdc 	bl	17fac <ver_str>
   195f4:	466e      	mov	r6, sp
   195f6:	b08c      	sub	sp, #48	; 0x30
   195f8:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   195fc:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   19600:	466a      	mov	r2, sp
   19602:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 196b4 <bt_finalize_init+0x144>
   19606:	6253      	str	r3, [r2, #36]	; 0x24
   19608:	e9c2 5107 	strd	r5, r1, [r2, #28]
   1960c:	4b2a      	ldr	r3, [pc, #168]	; (196b8 <bt_finalize_init+0x148>)
   1960e:	f44f 7500 	mov.w	r5, #512	; 0x200
   19612:	e9c2 c005 	strd	ip, r0, [r2, #20]
   19616:	8515      	strh	r5, [r2, #40]	; 0x28
   19618:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   1961c:	f842 3f10 	str.w	r3, [r2, #16]!
   19620:	4821      	ldr	r0, [pc, #132]	; (196a8 <bt_finalize_init+0x138>)
   19622:	f012 ffa0 	bl	2c566 <z_log_msg_static_create.constprop.0>
   19626:	46b5      	mov	sp, r6
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   19628:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
   1962c:	4630      	mov	r0, r6
   1962e:	f7fe fcbd 	bl	17fac <ver_str>
   19632:	b08a      	sub	sp, #40	; 0x28
   19634:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   19638:	466a      	mov	r2, sp
   1963a:	4920      	ldr	r1, [pc, #128]	; (196bc <bt_finalize_init+0x14c>)
   1963c:	8495      	strh	r5, [r2, #36]	; 0x24
   1963e:	e9c2 6307 	strd	r6, r3, [r2, #28]
   19642:	4b1f      	ldr	r3, [pc, #124]	; (196c0 <bt_finalize_init+0x150>)
   19644:	e9c2 1005 	strd	r1, r0, [r2, #20]
   19648:	f842 3f10 	str.w	r3, [r2, #16]!
   1964c:	4816      	ldr	r0, [pc, #88]	; (196a8 <bt_finalize_init+0x138>)
   1964e:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   19652:	f012 ff88 	bl	2c566 <z_log_msg_static_create.constprop.0>
}
   19656:	370c      	adds	r7, #12
   19658:	46bd      	mov	sp, r7
   1965a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   1965e:	4658      	mov	r0, fp
   19660:	f7fe fa3a 	bl	17ad8 <bt_addr_le_str>
   19664:	46ea      	mov	sl, sp
   19666:	b08a      	sub	sp, #40	; 0x28
   19668:	466a      	mov	r2, sp
   1966a:	f240 3301 	movw	r3, #769	; 0x301
   1966e:	e9c2 6505 	strd	r6, r5, [r2, #20]
   19672:	61d0      	str	r0, [r2, #28]
   19674:	8413      	strh	r3, [r2, #32]
   19676:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   1967a:	f842 8f10 	str.w	r8, [r2, #16]!
   1967e:	4648      	mov	r0, r9
   19680:	f012 ff71 	bl	2c566 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   19684:	3501      	adds	r5, #1
   19686:	46d5      	mov	sp, sl
   19688:	e7aa      	b.n	195e0 <bt_finalize_init+0x70>
   1968a:	bf00      	nop
   1968c:	200004f0 	.word	0x200004f0
   19690:	200005c4 	.word	0x200005c4
   19694:	00031519 	.word	0x00031519
   19698:	00032262 	.word	0x00032262
   1969c:	00032266 	.word	0x00032266
   196a0:	03010200 	.word	0x03010200
   196a4:	02000004 	.word	0x02000004
   196a8:	000302b4 	.word	0x000302b4
   196ac:	01000004 	.word	0x01000004
   196b0:	00032275 	.word	0x00032275
   196b4:	00032286 	.word	0x00032286
   196b8:	01000006 	.word	0x01000006
   196bc:	000322c4 	.word	0x000322c4
   196c0:	01000005 	.word	0x01000005

000196c4 <bt_init.part.0>:
static int bt_init(void)
   196c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		if (!bt_dev.id_count) {
   196c6:	480c      	ldr	r0, [pc, #48]	; (196f8 <bt_init.part.0+0x34>)
   196c8:	79c3      	ldrb	r3, [r0, #7]
   196ca:	b96b      	cbnz	r3, 196e8 <bt_init.part.0+0x24>
			LOG_INF("No ID address. App must call settings_load()");
   196cc:	4b0b      	ldr	r3, [pc, #44]	; (196fc <bt_init.part.0+0x38>)
   196ce:	9305      	str	r3, [sp, #20]
   196d0:	480b      	ldr	r0, [pc, #44]	; (19700 <bt_init.part.0+0x3c>)
   196d2:	2302      	movs	r3, #2
   196d4:	aa04      	add	r2, sp, #16
   196d6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   196da:	9304      	str	r3, [sp, #16]
   196dc:	f012 ff43 	bl	2c566 <z_log_msg_static_create.constprop.0>
}
   196e0:	2000      	movs	r0, #0
   196e2:	b007      	add	sp, #28
   196e4:	f85d fb04 	ldr.w	pc, [sp], #4
   196e8:	2108      	movs	r1, #8
   196ea:	30d4      	adds	r0, #212	; 0xd4
   196ec:	f012 ff27 	bl	2c53e <atomic_or>
	bt_finalize_init();
   196f0:	f7ff ff3e 	bl	19570 <bt_finalize_init>
	return 0;
   196f4:	e7f4      	b.n	196e0 <bt_init.part.0+0x1c>
   196f6:	bf00      	nop
   196f8:	200004f0 	.word	0x200004f0
   196fc:	000322eb 	.word	0x000322eb
   19700:	000302b4 	.word	0x000302b4

00019704 <init_work>:
{
   19704:	b510      	push	{r4, lr}
	err = bt_init();
   19706:	f7f8 fd2b 	bl	12160 <bt_init>
	if (ready_cb) {
   1970a:	4b03      	ldr	r3, [pc, #12]	; (19718 <init_work+0x14>)
   1970c:	681b      	ldr	r3, [r3, #0]
   1970e:	b113      	cbz	r3, 19716 <init_work+0x12>
}
   19710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   19714:	4718      	bx	r3
}
   19716:	bd10      	pop	{r4, pc}
   19718:	20003ad0 	.word	0x20003ad0

0001971c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1971c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   1971e:	4d3e      	ldr	r5, [pc, #248]	; (19818 <bt_enable+0xfc>)
{
   19720:	b08f      	sub	sp, #60	; 0x3c
	if (!bt_dev.drv) {
   19722:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
{
   19726:	af08      	add	r7, sp, #32
   19728:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1972a:	b983      	cbnz	r3, 1974e <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   1972c:	4b3b      	ldr	r3, [pc, #236]	; (1981c <bt_enable+0x100>)
   1972e:	617b      	str	r3, [r7, #20]
   19730:	483b      	ldr	r0, [pc, #236]	; (19820 <bt_enable+0x104>)
   19732:	2302      	movs	r3, #2
   19734:	f107 0210 	add.w	r2, r7, #16
   19738:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1973c:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   19740:	613b      	str	r3, [r7, #16]
   19742:	f012 ff10 	bl	2c566 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   19746:	4620      	mov	r0, r4
   19748:	371c      	adds	r7, #28
   1974a:	46bd      	mov	sp, r7
   1974c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1974e:	f06f 0102 	mvn.w	r1, #2
   19752:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   19756:	f012 ff09 	bl	2c56c <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1975a:	2101      	movs	r1, #1
   1975c:	f012 feef 	bl	2c53e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   19760:	07c3      	lsls	r3, r0, #31
   19762:	d456      	bmi.n	19812 <bt_enable+0xf6>
		err = bt_settings_init();
   19764:	f7fe fb52 	bl	17e0c <bt_settings_init>
		if (err) {
   19768:	4604      	mov	r4, r0
   1976a:	2800      	cmp	r0, #0
   1976c:	d1eb      	bne.n	19746 <bt_enable+0x2a>
	ready_cb = cb;
   1976e:	4b2d      	ldr	r3, [pc, #180]	; (19824 <bt_enable+0x108>)
   19770:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   19772:	2201      	movs	r2, #1
   19774:	4611      	mov	r1, r2
   19776:	f505 7094 	add.w	r0, r5, #296	; 0x128
   1977a:	f015 ff4a 	bl	2f612 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1977e:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
   19782:	f015 ff21 	bl	2f5c8 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19786:	2200      	movs	r2, #0
   19788:	2300      	movs	r3, #0
   1978a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1978e:	f06f 0308 	mvn.w	r3, #8
   19792:	e9cd 4302 	strd	r4, r3, [sp, #8]
   19796:	e9cd 4400 	strd	r4, r4, [sp]
   1979a:	4b23      	ldr	r3, [pc, #140]	; (19828 <bt_enable+0x10c>)
   1979c:	4923      	ldr	r1, [pc, #140]	; (1982c <bt_enable+0x110>)
   1979e:	9404      	str	r4, [sp, #16]
   197a0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   197a4:	4822      	ldr	r0, [pc, #136]	; (19830 <bt_enable+0x114>)
   197a6:	f00c fbe9 	bl	25f7c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   197aa:	4922      	ldr	r1, [pc, #136]	; (19834 <bt_enable+0x118>)
   197ac:	4820      	ldr	r0, [pc, #128]	; (19830 <bt_enable+0x114>)
   197ae:	f015 fe7c 	bl	2f4aa <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   197b2:	4821      	ldr	r0, [pc, #132]	; (19838 <bt_enable+0x11c>)
   197b4:	f015 ffee 	bl	2f794 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   197b8:	4920      	ldr	r1, [pc, #128]	; (1983c <bt_enable+0x120>)
   197ba:	481f      	ldr	r0, [pc, #124]	; (19838 <bt_enable+0x11c>)
   197bc:	9400      	str	r4, [sp, #0]
   197be:	f06f 0307 	mvn.w	r3, #7
   197c2:	f640 0298 	movw	r2, #2200	; 0x898
   197c6:	f00c ff0b 	bl	265e0 <k_work_queue_start>
   197ca:	491d      	ldr	r1, [pc, #116]	; (19840 <bt_enable+0x124>)
   197cc:	481a      	ldr	r0, [pc, #104]	; (19838 <bt_enable+0x11c>)
   197ce:	f015 fe6c 	bl	2f4aa <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   197d2:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   197d6:	68db      	ldr	r3, [r3, #12]
   197d8:	4798      	blx	r3
	if (err) {
   197da:	4604      	mov	r4, r0
   197dc:	b178      	cbz	r0, 197fe <bt_enable+0xe2>
		LOG_ERR("HCI driver open failed (%d)", err);
   197de:	466d      	mov	r5, sp
   197e0:	462a      	mov	r2, r5
   197e2:	b088      	sub	sp, #32
   197e4:	4b17      	ldr	r3, [pc, #92]	; (19844 <bt_enable+0x128>)
   197e6:	e9c5 3005 	strd	r3, r0, [r5, #20]
   197ea:	2303      	movs	r3, #3
   197ec:	f842 3f10 	str.w	r3, [r2, #16]!
   197f0:	480b      	ldr	r0, [pc, #44]	; (19820 <bt_enable+0x104>)
   197f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   197f6:	f012 feb6 	bl	2c566 <z_log_msg_static_create.constprop.0>
   197fa:	46ad      	mov	sp, r5
		return err;
   197fc:	e7a3      	b.n	19746 <bt_enable+0x2a>
	if (!cb) {
   197fe:	b91e      	cbnz	r6, 19808 <bt_enable+0xec>
		return bt_init();
   19800:	f7f8 fcae 	bl	12160 <bt_init>
   19804:	4604      	mov	r4, r0
   19806:	e79e      	b.n	19746 <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   19808:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   1980c:	f00c fee2 	bl	265d4 <k_work_submit>
	return 0;
   19810:	e799      	b.n	19746 <bt_enable+0x2a>
		return -EALREADY;
   19812:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19816:	e796      	b.n	19746 <bt_enable+0x2a>
   19818:	200004f0 	.word	0x200004f0
   1981c:	00032433 	.word	0x00032433
   19820:	000302b4 	.word	0x000302b4
   19824:	20003ad0 	.word	0x20003ad0
   19828:	000192a9 	.word	0x000192a9
   1982c:	20006940 	.word	0x20006940
   19830:	20002290 	.word	0x20002290
   19834:	0003244c 	.word	0x0003244c
   19838:	20002310 	.word	0x20002310
   1983c:	20006f80 	.word	0x20006f80
   19840:	00032452 	.word	0x00032452
   19844:	00032458 	.word	0x00032458

00019848 <bt_is_ready>:

	return 0;
}

bool bt_is_ready(void)
{
   19848:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1984a:	4803      	ldr	r0, [pc, #12]	; (19858 <bt_is_ready+0x10>)
   1984c:	f012 fe6e 	bl	2c52c <atomic_get>
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   19850:	f3c0 0080 	ubfx	r0, r0, #2, #1
   19854:	bd08      	pop	{r3, pc}
   19856:	bf00      	nop
   19858:	200005c4 	.word	0x200005c4

0001985c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1985c:	4800      	ldr	r0, [pc, #0]	; (19860 <bt_get_name+0x4>)
   1985e:	4770      	bx	lr
   19860:	000312aa 	.word	0x000312aa

00019864 <bt_le_filter_accept_list_add>:
	}
}

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_filter_accept_list_add(const bt_addr_le_t *addr)
{
   19864:	b530      	push	{r4, r5, lr}
   19866:	4605      	mov	r5, r0
   19868:	b087      	sub	sp, #28
   1986a:	4817      	ldr	r0, [pc, #92]	; (198c8 <bt_le_filter_accept_list_add+0x64>)
   1986c:	f012 fe5e 	bl	2c52c <atomic_get>
	struct bt_hci_cp_le_add_dev_to_fal *cp;
	struct net_buf *buf;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19870:	0743      	lsls	r3, r0, #29
   19872:	d522      	bpl.n	198ba <bt_le_filter_accept_list_add+0x56>
		return -EAGAIN;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_FAL, sizeof(*cp));
   19874:	2107      	movs	r1, #7
   19876:	f242 0011 	movw	r0, #8209	; 0x2011
   1987a:	f7ff f851 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   1987e:	4604      	mov	r4, r0
   19880:	b1f0      	cbz	r0, 198c0 <bt_le_filter_accept_list_add+0x5c>
	return net_buf_simple_add(&buf->b, len);
   19882:	2107      	movs	r1, #7
   19884:	300c      	adds	r0, #12
   19886:	f014 ff3c 	bl	2e702 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	bt_addr_le_copy(&cp->addr, addr);
   1988a:	4629      	mov	r1, r5
   1988c:	f012 fe54 	bl	2c538 <bt_addr_le_copy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_FAL, buf, NULL);
   19890:	4621      	mov	r1, r4
   19892:	2200      	movs	r2, #0
   19894:	f242 0011 	movw	r0, #8209	; 0x2011
   19898:	f7ff f87c 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   1989c:	4604      	mov	r4, r0
   1989e:	b148      	cbz	r0, 198b4 <bt_le_filter_accept_list_add+0x50>
		LOG_ERR("Failed to add device to filter accept list");
   198a0:	4b0a      	ldr	r3, [pc, #40]	; (198cc <bt_le_filter_accept_list_add+0x68>)
   198a2:	9305      	str	r3, [sp, #20]
   198a4:	480a      	ldr	r0, [pc, #40]	; (198d0 <bt_le_filter_accept_list_add+0x6c>)
   198a6:	2302      	movs	r3, #2
   198a8:	aa04      	add	r2, sp, #16
   198aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   198ae:	9304      	str	r3, [sp, #16]
   198b0:	f012 fe59 	bl	2c566 <z_log_msg_static_create.constprop.0>

		return err;
	}

	return 0;
}
   198b4:	4620      	mov	r0, r4
   198b6:	b007      	add	sp, #28
   198b8:	bd30      	pop	{r4, r5, pc}
		return -EAGAIN;
   198ba:	f06f 040a 	mvn.w	r4, #10
   198be:	e7f9      	b.n	198b4 <bt_le_filter_accept_list_add+0x50>
		return -ENOBUFS;
   198c0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   198c4:	e7f6      	b.n	198b4 <bt_le_filter_accept_list_add+0x50>
   198c6:	bf00      	nop
   198c8:	200005c4 	.word	0x200005c4
   198cc:	00032474 	.word	0x00032474
   198d0:	000302b4 	.word	0x000302b4

000198d4 <bt_le_filter_accept_list_clear>:

	return 0;
}

int bt_le_filter_accept_list_clear(void)
{
   198d4:	b510      	push	{r4, lr}
   198d6:	480f      	ldr	r0, [pc, #60]	; (19914 <bt_le_filter_accept_list_clear+0x40>)
   198d8:	b086      	sub	sp, #24
   198da:	f012 fe27 	bl	2c52c <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   198de:	0743      	lsls	r3, r0, #29
   198e0:	d514      	bpl.n	1990c <bt_le_filter_accept_list_clear+0x38>
		return -EAGAIN;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_FAL, NULL, NULL);
   198e2:	2200      	movs	r2, #0
   198e4:	4611      	mov	r1, r2
   198e6:	f242 0010 	movw	r0, #8208	; 0x2010
   198ea:	f7ff f853 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   198ee:	4604      	mov	r4, r0
   198f0:	b148      	cbz	r0, 19906 <bt_le_filter_accept_list_clear+0x32>
		LOG_ERR("Failed to clear filter accept list");
   198f2:	4b09      	ldr	r3, [pc, #36]	; (19918 <bt_le_filter_accept_list_clear+0x44>)
   198f4:	9305      	str	r3, [sp, #20]
   198f6:	4809      	ldr	r0, [pc, #36]	; (1991c <bt_le_filter_accept_list_clear+0x48>)
   198f8:	2302      	movs	r3, #2
   198fa:	aa04      	add	r2, sp, #16
   198fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19900:	9304      	str	r3, [sp, #16]
   19902:	f012 fe30 	bl	2c566 <z_log_msg_static_create.constprop.0>
		return err;
	}

	return 0;
}
   19906:	4620      	mov	r0, r4
   19908:	b006      	add	sp, #24
   1990a:	bd10      	pop	{r4, pc}
		return -EAGAIN;
   1990c:	f06f 040a 	mvn.w	r4, #10
   19910:	e7f9      	b.n	19906 <bt_le_filter_accept_list_clear+0x32>
   19912:	bf00      	nop
   19914:	200005c4 	.word	0x200005c4
   19918:	0003249f 	.word	0x0003249f
   1991c:	000302b4 	.word	0x000302b4

00019920 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   19920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   19922:	4f0a      	ldr	r7, [pc, #40]	; (1994c <id_find+0x2c>)
{
   19924:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   19926:	2500      	movs	r5, #0
   19928:	79fb      	ldrb	r3, [r7, #7]
   1992a:	b2ec      	uxtb	r4, r5
   1992c:	42a3      	cmp	r3, r4
   1992e:	d802      	bhi.n	19936 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   19930:	f06f 0001 	mvn.w	r0, #1
   19934:	e009      	b.n	1994a <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   19936:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1993a:	4439      	add	r1, r7
   1993c:	4630      	mov	r0, r6
   1993e:	f012 fedc 	bl	2c6fa <bt_addr_le_eq>
   19942:	3501      	adds	r5, #1
   19944:	2800      	cmp	r0, #0
   19946:	d0ef      	beq.n	19928 <id_find+0x8>
   19948:	4620      	mov	r0, r4
}
   1994a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1994c:	200004f0 	.word	0x200004f0

00019950 <le_rpa_timeout_submit>:
{
   19950:	b570      	push	{r4, r5, r6, lr}
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   19952:	4d0d      	ldr	r5, [pc, #52]	; (19988 <le_rpa_timeout_submit+0x38>)
   19954:	f8b5 41a8 	ldrh.w	r4, [r5, #424]	; 0x1a8
   19958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1995c:	435c      	muls	r4, r3
			return ((t * to_hz + off) / from_hz);
   1995e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   19962:	f240 30e7 	movw	r0, #999	; 0x3e7
   19966:	2100      	movs	r1, #0
   19968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1996c:	2300      	movs	r3, #0
   1996e:	fbe4 0106 	umlal	r0, r1, r4, r6
   19972:	f7e7 fbc5 	bl	1100 <__aeabi_uldivmod>
   19976:	4602      	mov	r2, r0
   19978:	460b      	mov	r3, r1
   1997a:	f505 70bc 	add.w	r0, r5, #376	; 0x178
}
   1997e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   19982:	f00c be8f 	b.w	266a4 <k_work_schedule>
   19986:	bf00      	nop
   19988:	200004f0 	.word	0x200004f0

0001998c <le_rpa_invalidate>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1998c:	4b08      	ldr	r3, [pc, #32]	; (199b0 <le_rpa_invalidate+0x24>)
   1998e:	f3bf 8f5b 	dmb	ish
   19992:	e853 1f00 	ldrex	r1, [r3]
   19996:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   1999a:	e843 1200 	strex	r2, r1, [r3]
   1999e:	2a00      	cmp	r2, #0
   199a0:	d1f7      	bne.n	19992 <le_rpa_invalidate+0x6>
   199a2:	f3bf 8f5b 	dmb	ish
		bt_le_ext_adv_foreach(adv_rpa_invalidate, NULL);
   199a6:	4803      	ldr	r0, [pc, #12]	; (199b4 <le_rpa_invalidate+0x28>)
   199a8:	2100      	movs	r1, #0
   199aa:	f000 bdf1 	b.w	1a590 <bt_le_ext_adv_foreach>
   199ae:	bf00      	nop
   199b0:	200005c4 	.word	0x200005c4
   199b4:	0002c863 	.word	0x0002c863

000199b8 <hci_id_add>:
{
   199b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   199bc:	4688      	mov	r8, r1
   199be:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   199c0:	4605      	mov	r5, r0
   199c2:	bb08      	cbnz	r0, 19a08 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   199c4:	2127      	movs	r1, #39	; 0x27
   199c6:	f242 0027 	movw	r0, #8231	; 0x2027
   199ca:	f7fe ffa9 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   199ce:	4604      	mov	r4, r0
   199d0:	b1f0      	cbz	r0, 19a10 <hci_id_add+0x58>
   199d2:	2127      	movs	r1, #39	; 0x27
   199d4:	300c      	adds	r0, #12
   199d6:	f014 fe94 	bl	2e702 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   199da:	4641      	mov	r1, r8
   199dc:	4606      	mov	r6, r0
   199de:	f012 fe94 	bl	2c70a <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   199e2:	4639      	mov	r1, r7
   199e4:	2210      	movs	r2, #16
   199e6:	1df0      	adds	r0, r6, #7
   199e8:	f012 fc79 	bl	2c2de <memcpy>
	(void)memcpy(cp->local_irk, &bt_dev.irk[id], 16);
   199ec:	490a      	ldr	r1, [pc, #40]	; (19a18 <hci_id_add+0x60>)
   199ee:	2210      	movs	r2, #16
   199f0:	f106 0017 	add.w	r0, r6, #23
   199f4:	f012 fc73 	bl	2c2de <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   199f8:	462a      	mov	r2, r5
   199fa:	4621      	mov	r1, r4
   199fc:	f242 0027 	movw	r0, #8231	; 0x2027
}
   19a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   19a04:	f7fe bfc6 	b.w	18994 <bt_hci_cmd_send_sync>
		return -EINVAL;
   19a08:	f06f 0015 	mvn.w	r0, #21
}
   19a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   19a10:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19a14:	e7fa      	b.n	19a0c <hci_id_add+0x54>
   19a16:	bf00      	nop
   19a18:	20000658 	.word	0x20000658

00019a1c <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   19a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19a1e:	4604      	mov	r4, r0
   19a20:	b085      	sub	sp, #20
   19a22:	4616      	mov	r6, r2
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   19a24:	460d      	mov	r5, r1
   19a26:	b351      	cbz	r1, 19a7e <id_create+0x62>
   19a28:	492a      	ldr	r1, [pc, #168]	; (19ad4 <id_create+0xb8>)
   19a2a:	4628      	mov	r0, r5
   19a2c:	f012 fe65 	bl	2c6fa <bt_addr_le_eq>
   19a30:	bb28      	cbnz	r0, 19a7e <id_create+0x62>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   19a32:	4b29      	ldr	r3, [pc, #164]	; (19ad8 <id_create+0xbc>)
   19a34:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   19a38:	4629      	mov	r1, r5
   19a3a:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   19a3c:	f012 fe65 	bl	2c70a <bt_addr_le_copy>
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };
   19a40:	2300      	movs	r3, #0
   19a42:	e9cd 3300 	strd	r3, r3, [sp]
   19a46:	e9cd 3302 	strd	r3, r3, [sp, #8]

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
   19a4a:	2510      	movs	r5, #16
   19a4c:	f44f 73b4 	mov.w	r3, #360	; 0x168
   19a50:	fb15 3404 	smlabb	r4, r5, r4, r3
   19a54:	4b20      	ldr	r3, [pc, #128]	; (19ad8 <id_create+0xbc>)
   19a56:	441c      	add	r4, r3
		if (irk && memcmp(irk, zero_irk, 16)) {
   19a58:	b33e      	cbz	r6, 19aaa <id_create+0x8e>
   19a5a:	462a      	mov	r2, r5
   19a5c:	4669      	mov	r1, sp
   19a5e:	4630      	mov	r0, r6
   19a60:	f012 fc16 	bl	2c290 <memcmp>
   19a64:	b348      	cbz	r0, 19aba <id_create+0x9e>
			memcpy(&bt_dev.irk[id], irk, 16);
   19a66:	462a      	mov	r2, r5
   19a68:	4631      	mov	r1, r6
   19a6a:	4620      	mov	r0, r4
			if (err) {
				return err;
			}

			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
   19a6c:	f012 fc37 	bl	2c2de <memcpy>
   19a70:	481a      	ldr	r0, [pc, #104]	; (19adc <id_create+0xc0>)
   19a72:	f012 fe4d 	bl	2c710 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   19a76:	0743      	lsls	r3, r0, #29
   19a78:	d429      	bmi.n	19ace <id_create+0xb2>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   19a7a:	2000      	movs	r0, #0
   19a7c:	e01b      	b.n	19ab6 <id_create+0x9a>
			err = bt_addr_le_create_static(&new_addr);
   19a7e:	4668      	mov	r0, sp
   19a80:	f012 fd0d 	bl	2c49e <bt_addr_le_create_static>
			if (err) {
   19a84:	b9b8      	cbnz	r0, 19ab6 <id_create+0x9a>
		} while (id_find(&new_addr) >= 0);
   19a86:	4668      	mov	r0, sp
   19a88:	f7ff ff4a 	bl	19920 <id_find>
   19a8c:	2800      	cmp	r0, #0
   19a8e:	daf6      	bge.n	19a7e <id_create+0x62>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   19a90:	4b11      	ldr	r3, [pc, #68]	; (19ad8 <id_create+0xbc>)
   19a92:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   19a96:	441f      	add	r7, r3
   19a98:	4669      	mov	r1, sp
   19a9a:	4638      	mov	r0, r7
   19a9c:	f012 fe35 	bl	2c70a <bt_addr_le_copy>
		if (addr) {
   19aa0:	2d00      	cmp	r5, #0
   19aa2:	d0cd      	beq.n	19a40 <id_create+0x24>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   19aa4:	4639      	mov	r1, r7
   19aa6:	4628      	mov	r0, r5
   19aa8:	e7c8      	b.n	19a3c <id_create+0x20>
			err = bt_rand(&bt_dev.irk[id], 16);
   19aaa:	4629      	mov	r1, r5
   19aac:	4620      	mov	r0, r4
   19aae:	f00a f83f 	bl	23b30 <bt_rand>
			if (err) {
   19ab2:	2800      	cmp	r0, #0
   19ab4:	d0dc      	beq.n	19a70 <id_create+0x54>
}
   19ab6:	b005      	add	sp, #20
   19ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = bt_rand(&bt_dev.irk[id], 16);
   19aba:	4629      	mov	r1, r5
   19abc:	4620      	mov	r0, r4
   19abe:	f00a f837 	bl	23b30 <bt_rand>
			if (err) {
   19ac2:	2800      	cmp	r0, #0
   19ac4:	d1f7      	bne.n	19ab6 <id_create+0x9a>
				memcpy(irk, &bt_dev.irk[id], 16);
   19ac6:	462a      	mov	r2, r5
   19ac8:	4621      	mov	r1, r4
   19aca:	4630      	mov	r0, r6
   19acc:	e7ce      	b.n	19a6c <id_create+0x50>
		bt_settings_save_id();
   19ace:	f7fe f94d 	bl	17d6c <bt_settings_save_id>
   19ad2:	e7d2      	b.n	19a7a <id_create+0x5e>
   19ad4:	00031bf1 	.word	0x00031bf1
   19ad8:	200004f0 	.word	0x200004f0
   19adc:	200005c4 	.word	0x200005c4

00019ae0 <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
   19ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   19ae2:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   19ae4:	b087      	sub	sp, #28
   19ae6:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   19ae8:	2206      	movs	r2, #6
   19aea:	4608      	mov	r0, r1
   19aec:	f001 fe50 	bl	1b790 <bt_conn_lookup_state_le>
	if (conn) {
   19af0:	4606      	mov	r6, r0
   19af2:	b170      	cbz	r0, 19b12 <bt_id_add.part.0+0x32>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19af4:	4848      	ldr	r0, [pc, #288]	; (19c18 <bt_id_add.part.0+0x138>)
   19af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   19afa:	f012 fe4d 	bl	2c798 <atomic_or.isra.0>
	keys->state |= flag;
   19afe:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
   19b00:	4630      	mov	r0, r6
	keys->state |= flag;
   19b02:	f043 0301 	orr.w	r3, r3, #1
   19b06:	7223      	strb	r3, [r4, #8]
}
   19b08:	b007      	add	sp, #28
   19b0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   19b0e:	f013 b855 	b.w	2cbbc <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
   19b12:	4d42      	ldr	r5, [pc, #264]	; (19c1c <bt_id_add.part.0+0x13c>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   19b14:	4601      	mov	r1, r0
   19b16:	4842      	ldr	r0, [pc, #264]	; (19c20 <bt_id_add.part.0+0x140>)
   19b18:	f000 fd3a 	bl	1a590 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   19b1c:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   19b20:	b173      	cbz	r3, 19b40 <bt_id_add.part.0+0x60>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   19b22:	4630      	mov	r0, r6
   19b24:	f012 fe20 	bl	2c768 <addr_res_enable>
		if (err) {
   19b28:	b150      	cbz	r0, 19b40 <bt_id_add.part.0+0x60>
			LOG_WRN("Failed to disable address resolution");
   19b2a:	4b3e      	ldr	r3, [pc, #248]	; (19c24 <bt_id_add.part.0+0x144>)
		LOG_WRN("Set privacy mode command is not supported");
   19b2c:	9305      	str	r3, [sp, #20]
   19b2e:	2302      	movs	r3, #2
   19b30:	9304      	str	r3, [sp, #16]
   19b32:	aa04      	add	r2, sp, #16
   19b34:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Failed to set privacy mode");
   19b38:	483b      	ldr	r0, [pc, #236]	; (19c28 <bt_id_add.part.0+0x148>)
   19b3a:	f012 fe12 	bl	2c762 <z_log_msg_static_create.constprop.0>
		goto done;
   19b3e:	e026      	b.n	19b8e <bt_id_add.part.0+0xae>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   19b40:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
   19b44:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
   19b48:	429a      	cmp	r2, r3
   19b4a:	d12a      	bne.n	19ba2 <bt_id_add.part.0+0xc2>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   19b4c:	4b37      	ldr	r3, [pc, #220]	; (19c2c <bt_id_add.part.0+0x14c>)
   19b4e:	4836      	ldr	r0, [pc, #216]	; (19c28 <bt_id_add.part.0+0x148>)
   19b50:	9305      	str	r3, [sp, #20]
   19b52:	aa04      	add	r2, sp, #16
   19b54:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19b58:	2602      	movs	r6, #2
   19b5a:	9604      	str	r6, [sp, #16]
   19b5c:	f012 fe01 	bl	2c762 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   19b60:	2200      	movs	r2, #0
   19b62:	4611      	mov	r1, r2
   19b64:	f242 0029 	movw	r0, #8233	; 0x2029
   19b68:	f7fe ff14 	bl	18994 <bt_hci_cmd_send_sync>
		if (err) {
   19b6c:	b130      	cbz	r0, 19b7c <bt_id_add.part.0+0x9c>
			LOG_ERR("Failed to clear resolution list");
   19b6e:	4b30      	ldr	r3, [pc, #192]	; (19c30 <bt_id_add.part.0+0x150>)
   19b70:	e9cd 6304 	strd	r6, r3, [sp, #16]
		LOG_ERR("Failed to set privacy mode");
   19b74:	aa04      	add	r2, sp, #16
   19b76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19b7a:	e7dd      	b.n	19b38 <bt_id_add.part.0+0x58>
		bt_dev.le.rl_entries++;
   19b7c:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   19b80:	3301      	adds	r3, #1
   19b82:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   19b86:	7a23      	ldrb	r3, [r4, #8]
   19b88:	f043 0304 	orr.w	r3, r3, #4
   19b8c:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   19b8e:	2001      	movs	r0, #1
   19b90:	f012 fdea 	bl	2c768 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   19b94:	4827      	ldr	r0, [pc, #156]	; (19c34 <bt_id_add.part.0+0x154>)
   19b96:	2100      	movs	r1, #0
}
   19b98:	b007      	add	sp, #28
   19b9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   19b9e:	f000 bcf7 	b.w	1a590 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   19ba2:	4622      	mov	r2, r4
   19ba4:	1c67      	adds	r7, r4, #1
   19ba6:	f812 0b2a 	ldrb.w	r0, [r2], #42
   19baa:	4639      	mov	r1, r7
   19bac:	f7ff ff04 	bl	199b8 <hci_id_add>
	if (err) {
   19bb0:	4606      	mov	r6, r0
   19bb2:	b120      	cbz	r0, 19bbe <bt_id_add.part.0+0xde>
		LOG_ERR("Failed to add IRK to controller");
   19bb4:	4b20      	ldr	r3, [pc, #128]	; (19c38 <bt_id_add.part.0+0x158>)
		LOG_ERR("Failed to set privacy mode");
   19bb6:	9305      	str	r3, [sp, #20]
   19bb8:	2302      	movs	r3, #2
   19bba:	9304      	str	r3, [sp, #16]
   19bbc:	e7da      	b.n	19b74 <bt_id_add.part.0+0x94>
	bt_dev.le.rl_entries++;
   19bbe:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   19bc2:	3301      	adds	r3, #1
   19bc4:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
	keys->state |= BT_KEYS_ID_ADDED;
   19bc8:	7a23      	ldrb	r3, [r4, #8]
   19bca:	f043 0304 	orr.w	r3, r3, #4
   19bce:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   19bd0:	f895 30a7 	ldrb.w	r3, [r5, #167]	; 0xa7
   19bd4:	075b      	lsls	r3, r3, #29
   19bd6:	d401      	bmi.n	19bdc <bt_id_add.part.0+0xfc>
		LOG_WRN("Set privacy mode command is not supported");
   19bd8:	4b18      	ldr	r3, [pc, #96]	; (19c3c <bt_id_add.part.0+0x15c>)
   19bda:	e7a7      	b.n	19b2c <bt_id_add.part.0+0x4c>
	bt_addr_le_copy(&cp.id_addr, addr);
   19bdc:	4639      	mov	r1, r7
   19bde:	4668      	mov	r0, sp
   19be0:	f012 fd93 	bl	2c70a <bt_addr_le_copy>
	cp.mode = mode;
   19be4:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   19be6:	2108      	movs	r1, #8
   19be8:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   19bec:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   19bf0:	f7fe fe96 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   19bf4:	4604      	mov	r4, r0
   19bf6:	b160      	cbz	r0, 19c12 <bt_id_add.part.0+0x132>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19bf8:	2208      	movs	r2, #8
   19bfa:	4669      	mov	r1, sp
   19bfc:	300c      	adds	r0, #12
   19bfe:	f014 fd86 	bl	2e70e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   19c02:	4632      	mov	r2, r6
   19c04:	4621      	mov	r1, r4
   19c06:	f242 004e 	movw	r0, #8270	; 0x204e
   19c0a:	f7fe fec3 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   19c0e:	2800      	cmp	r0, #0
   19c10:	d0bd      	beq.n	19b8e <bt_id_add.part.0+0xae>
		LOG_ERR("Failed to set privacy mode");
   19c12:	4b0b      	ldr	r3, [pc, #44]	; (19c40 <bt_id_add.part.0+0x160>)
   19c14:	e7cf      	b.n	19bb6 <bt_id_add.part.0+0xd6>
   19c16:	bf00      	nop
   19c18:	200005c4 	.word	0x200005c4
   19c1c:	200004f0 	.word	0x200004f0
   19c20:	0002c7b1 	.word	0x0002c7b1
   19c24:	000325df 	.word	0x000325df
   19c28:	000302bc 	.word	0x000302bc
   19c2c:	00032604 	.word	0x00032604
   19c30:	00032635 	.word	0x00032635
   19c34:	0002c835 	.word	0x0002c835
   19c38:	00032655 	.word	0x00032655
   19c3c:	00032675 	.word	0x00032675
   19c40:	0003269f 	.word	0x0003269f

00019c44 <set_random_address>:
{
   19c44:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   19c46:	4913      	ldr	r1, [pc, #76]	; (19c94 <set_random_address+0x50>)
   19c48:	2206      	movs	r2, #6
   19c4a:	4605      	mov	r5, r0
   19c4c:	f012 fb20 	bl	2c290 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   19c50:	b1d8      	cbz	r0, 19c8a <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   19c52:	2106      	movs	r1, #6
   19c54:	f242 0005 	movw	r0, #8197	; 0x2005
   19c58:	f7fe fe62 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   19c5c:	4604      	mov	r4, r0
   19c5e:	b1b0      	cbz	r0, 19c8e <set_random_address+0x4a>
   19c60:	2206      	movs	r2, #6
   19c62:	4629      	mov	r1, r5
   19c64:	300c      	adds	r0, #12
   19c66:	f014 fd52 	bl	2e70e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   19c6a:	2200      	movs	r2, #0
   19c6c:	4621      	mov	r1, r4
   19c6e:	f242 0005 	movw	r0, #8197	; 0x2005
   19c72:	f7fe fe8f 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   19c76:	b948      	cbnz	r0, 19c8c <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   19c78:	2206      	movs	r2, #6
   19c7a:	4806      	ldr	r0, [pc, #24]	; (19c94 <set_random_address+0x50>)
   19c7c:	4629      	mov	r1, r5
   19c7e:	f012 fb2e 	bl	2c2de <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   19c82:	4b05      	ldr	r3, [pc, #20]	; (19c98 <set_random_address+0x54>)
   19c84:	2201      	movs	r2, #1
   19c86:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
   19c8a:	2000      	movs	r0, #0
}
   19c8c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   19c8e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19c92:	e7fb      	b.n	19c8c <set_random_address+0x48>
   19c94:	20000559 	.word	0x20000559
   19c98:	200004f0 	.word	0x200004f0

00019c9c <bt_id_del.part.0>:
void bt_id_del(struct bt_keys *keys)
   19c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   19ca0:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
   19ca2:	b087      	sub	sp, #28
   19ca4:	4604      	mov	r4, r0
   19ca6:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   19ca8:	2206      	movs	r2, #6
   19caa:	4608      	mov	r0, r1
   19cac:	f001 fd70 	bl	1b790 <bt_conn_lookup_state_le>
	if (conn) {
   19cb0:	4605      	mov	r5, r0
   19cb2:	b178      	cbz	r0, 19cd4 <bt_id_del.part.0+0x38>
   19cb4:	483a      	ldr	r0, [pc, #232]	; (19da0 <bt_id_del.part.0+0x104>)
   19cb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   19cba:	f012 fd6d 	bl	2c798 <atomic_or.isra.0>
	keys->state |= flag;
   19cbe:	7a23      	ldrb	r3, [r4, #8]
   19cc0:	f043 0302 	orr.w	r3, r3, #2
   19cc4:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   19cc6:	4628      	mov	r0, r5
   19cc8:	f012 ff78 	bl	2cbbc <bt_conn_unref>
}
   19ccc:	371c      	adds	r7, #28
   19cce:	46bd      	mov	sp, r7
   19cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   19cd4:	4601      	mov	r1, r0
   19cd6:	4833      	ldr	r0, [pc, #204]	; (19da4 <bt_id_del.part.0+0x108>)
   19cd8:	f000 fc5a 	bl	1a590 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   19cdc:	4628      	mov	r0, r5
   19cde:	f012 fd43 	bl	2c768 <addr_res_enable>
	if (err) {
   19ce2:	4d31      	ldr	r5, [pc, #196]	; (19da8 <bt_id_del.part.0+0x10c>)
   19ce4:	4606      	mov	r6, r0
   19ce6:	b1d0      	cbz	r0, 19d1e <bt_id_del.part.0+0x82>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   19ce8:	466c      	mov	r4, sp
   19cea:	b088      	sub	sp, #32
   19cec:	466b      	mov	r3, sp
   19cee:	4a2f      	ldr	r2, [pc, #188]	; (19dac <bt_id_del.part.0+0x110>)
   19cf0:	e9c3 2005 	strd	r2, r0, [r3, #20]
   19cf4:	461a      	mov	r2, r3
   19cf6:	2303      	movs	r3, #3
   19cf8:	f842 3f10 	str.w	r3, [r2, #16]!
   19cfc:	482c      	ldr	r0, [pc, #176]	; (19db0 <bt_id_del.part.0+0x114>)
   19cfe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19d02:	f012 fd2e 	bl	2c762 <z_log_msg_static_create.constprop.0>
   19d06:	46a5      	mov	sp, r4
	if (bt_dev.le.rl_entries) {
   19d08:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   19d0c:	b113      	cbz	r3, 19d14 <bt_id_del.part.0+0x78>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   19d0e:	2001      	movs	r0, #1
   19d10:	f012 fd2a 	bl	2c768 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   19d14:	4827      	ldr	r0, [pc, #156]	; (19db4 <bt_id_del.part.0+0x118>)
   19d16:	2100      	movs	r1, #0
   19d18:	f000 fc3a 	bl	1a590 <bt_le_ext_adv_foreach>
   19d1c:	e7d6      	b.n	19ccc <bt_id_del.part.0+0x30>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   19d1e:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   19d22:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
   19d26:	429a      	cmp	r2, r3
   19d28:	d20c      	bcs.n	19d44 <bt_id_del.part.0+0xa8>
		bt_dev.le.rl_entries--;
   19d2a:	3b01      	subs	r3, #1
   19d2c:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   19d30:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   19d32:	4921      	ldr	r1, [pc, #132]	; (19db8 <bt_id_del.part.0+0x11c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   19d34:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   19d38:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   19d3a:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   19d3c:	2002      	movs	r0, #2
   19d3e:	f006 fbb3 	bl	204a8 <bt_keys_foreach_type>
		goto done;
   19d42:	e7e1      	b.n	19d08 <bt_id_del.part.0+0x6c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   19d44:	2107      	movs	r1, #7
   19d46:	f242 0028 	movw	r0, #8232	; 0x2028
   19d4a:	f7fe fde9 	bl	18920 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   19d4e:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   19d52:	4680      	mov	r8, r0
   19d54:	b958      	cbnz	r0, 19d6e <bt_id_del.part.0+0xd2>
		LOG_ERR("Failed to remove IRK from controller");
   19d56:	4b19      	ldr	r3, [pc, #100]	; (19dbc <bt_id_del.part.0+0x120>)
   19d58:	617b      	str	r3, [r7, #20]
   19d5a:	4815      	ldr	r0, [pc, #84]	; (19db0 <bt_id_del.part.0+0x114>)
   19d5c:	2302      	movs	r3, #2
   19d5e:	f107 0210 	add.w	r2, r7, #16
   19d62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19d66:	613b      	str	r3, [r7, #16]
   19d68:	f012 fcfb 	bl	2c762 <z_log_msg_static_create.constprop.0>
		goto done;
   19d6c:	e7cc      	b.n	19d08 <bt_id_del.part.0+0x6c>
	return net_buf_simple_add(&buf->b, len);
   19d6e:	2107      	movs	r1, #7
   19d70:	300c      	adds	r0, #12
   19d72:	f014 fcc6 	bl	2e702 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   19d76:	4649      	mov	r1, r9
   19d78:	f012 fcc7 	bl	2c70a <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   19d7c:	4632      	mov	r2, r6
   19d7e:	4641      	mov	r1, r8
   19d80:	f242 0028 	movw	r0, #8232	; 0x2028
   19d84:	f7fe fe06 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   19d88:	2800      	cmp	r0, #0
   19d8a:	d1e4      	bne.n	19d56 <bt_id_del.part.0+0xba>
	bt_dev.le.rl_entries--;
   19d8c:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   19d90:	3b01      	subs	r3, #1
   19d92:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
	keys->state &= ~BT_KEYS_ID_ADDED;
   19d96:	7a23      	ldrb	r3, [r4, #8]
   19d98:	f023 0304 	bic.w	r3, r3, #4
   19d9c:	7223      	strb	r3, [r4, #8]
   19d9e:	e7b3      	b.n	19d08 <bt_id_del.part.0+0x6c>
   19da0:	200005c4 	.word	0x200005c4
   19da4:	0002c7b1 	.word	0x0002c7b1
   19da8:	200004f0 	.word	0x200004f0
   19dac:	000326ba 	.word	0x000326ba
   19db0:	000302bc 	.word	0x000302bc
   19db4:	0002c835 	.word	0x0002c835
   19db8:	0002c74d 	.word	0x0002c74d
   19dbc:	000326e7 	.word	0x000326e7

00019dc0 <bt_id_set_private_addr>:
{
   19dc0:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   19dc2:	b9f0      	cbnz	r0, 19e02 <bt_id_set_private_addr+0x42>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19dc4:	4810      	ldr	r0, [pc, #64]	; (19e08 <bt_id_set_private_addr+0x48>)
   19dc6:	f012 fca3 	bl	2c710 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   19dca:	0483      	lsls	r3, r0, #18
   19dcc:	d417      	bmi.n	19dfe <bt_id_set_private_addr+0x3e>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   19dce:	480f      	ldr	r0, [pc, #60]	; (19e0c <bt_id_set_private_addr+0x4c>)
   19dd0:	4669      	mov	r1, sp
   19dd2:	f012 fadd 	bl	2c390 <bt_rpa_create>
	if (!err) {
   19dd6:	4604      	mov	r4, r0
   19dd8:	b120      	cbz	r0, 19de4 <bt_id_set_private_addr+0x24>
	le_rpa_timeout_submit();
   19dda:	f7ff fdb9 	bl	19950 <le_rpa_timeout_submit>
}
   19dde:	4620      	mov	r0, r4
   19de0:	b002      	add	sp, #8
   19de2:	bd10      	pop	{r4, pc}
		err = set_random_address(&rpa);
   19de4:	4668      	mov	r0, sp
   19de6:	f7ff ff2d 	bl	19c44 <set_random_address>
		if (!err) {
   19dea:	4604      	mov	r4, r0
   19dec:	2800      	cmp	r0, #0
   19dee:	d1f4      	bne.n	19dda <bt_id_set_private_addr+0x1a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19df0:	4805      	ldr	r0, [pc, #20]	; (19e08 <bt_id_set_private_addr+0x48>)
   19df2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   19df6:	f012 fccf 	bl	2c798 <atomic_or.isra.0>
	le_rpa_timeout_submit();
   19dfa:	f7ff fda9 	bl	19950 <le_rpa_timeout_submit>
		return 0;
   19dfe:	2400      	movs	r4, #0
   19e00:	e7ed      	b.n	19dde <bt_id_set_private_addr+0x1e>
		return -EINVAL;
   19e02:	f06f 0415 	mvn.w	r4, #21
   19e06:	e7ea      	b.n	19dde <bt_id_set_private_addr+0x1e>
   19e08:	200005c4 	.word	0x200005c4
   19e0c:	20000658 	.word	0x20000658

00019e10 <le_update_private_addr>:
{
   19e10:	b5b0      	push	{r4, r5, r7, lr}
   19e12:	af00      	add	r7, sp, #0
		adv = bt_le_adv_lookup_legacy();
   19e14:	f000 fbc2 	bl	1a59c <bt_le_adv_lookup_legacy>
		if (adv &&
   19e18:	4604      	mov	r4, r0
   19e1a:	b328      	cbz	r0, 19e68 <le_update_private_addr+0x58>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   19e1c:	f100 0210 	add.w	r2, r0, #16
   19e20:	2107      	movs	r1, #7
   19e22:	4610      	mov	r0, r2
   19e24:	f012 fc7a 	bl	2c71c <atomic_test_bit>
		if (adv &&
   19e28:	b1f0      	cbz	r0, 19e68 <le_update_private_addr+0x58>
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   19e2a:	210d      	movs	r1, #13
   19e2c:	4610      	mov	r0, r2
   19e2e:	f012 fc75 	bl	2c71c <atomic_test_bit>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   19e32:	4601      	mov	r1, r0
   19e34:	b9b8      	cbnz	r0, 19e66 <le_update_private_addr+0x56>
			id = adv->id;
   19e36:	7825      	ldrb	r5, [r4, #0]
			bt_le_adv_set_enable_legacy(adv, false);
   19e38:	4620      	mov	r0, r4
   19e3a:	f012 fe1d 	bl	2ca78 <bt_le_adv_set_enable_legacy>
	err = bt_id_set_private_addr(id);
   19e3e:	4628      	mov	r0, r5
   19e40:	f7ff ffbe 	bl	19dc0 <bt_id_set_private_addr>
	if (err) {
   19e44:	b1b0      	cbz	r0, 19e74 <le_update_private_addr+0x64>
		LOG_WRN("Failed to update RPA address (%d)", err);
   19e46:	466c      	mov	r4, sp
   19e48:	b088      	sub	sp, #32
   19e4a:	466a      	mov	r2, sp
   19e4c:	4b0c      	ldr	r3, [pc, #48]	; (19e80 <le_update_private_addr+0x70>)
   19e4e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19e52:	2303      	movs	r3, #3
   19e54:	f842 3f10 	str.w	r3, [r2, #16]!
   19e58:	480a      	ldr	r0, [pc, #40]	; (19e84 <le_update_private_addr+0x74>)
   19e5a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19e5e:	f012 fc80 	bl	2c762 <z_log_msg_static_create.constprop.0>
   19e62:	46a5      	mov	sp, r4
		return;
   19e64:	e004      	b.n	19e70 <le_update_private_addr+0x60>
	err = bt_id_set_private_addr(id);
   19e66:	2000      	movs	r0, #0
   19e68:	f7ff ffaa 	bl	19dc0 <bt_id_set_private_addr>
	if (err) {
   19e6c:	2800      	cmp	r0, #0
   19e6e:	d1ea      	bne.n	19e46 <le_update_private_addr+0x36>
}
   19e70:	46bd      	mov	sp, r7
   19e72:	bdb0      	pop	{r4, r5, r7, pc}
		bt_le_adv_set_enable_legacy(adv, true);
   19e74:	2101      	movs	r1, #1
   19e76:	4620      	mov	r0, r4
   19e78:	f012 fdfe 	bl	2ca78 <bt_le_adv_set_enable_legacy>
   19e7c:	e7f8      	b.n	19e70 <le_update_private_addr+0x60>
   19e7e:	bf00      	nop
   19e80:	0003270c 	.word	0x0003270c
   19e84:	000302bc 	.word	0x000302bc

00019e88 <rpa_timeout>:
{
   19e88:	b513      	push	{r0, r1, r4, lr}
	bool adv_enabled = false;
   19e8a:	2300      	movs	r3, #0
			bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   19e8c:	4810      	ldr	r0, [pc, #64]	; (19ed0 <rpa_timeout+0x48>)
	bool adv_enabled = false;
   19e8e:	f88d 3007 	strb.w	r3, [sp, #7]
			bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   19e92:	f10d 0107 	add.w	r1, sp, #7
   19e96:	f000 fb7b 	bl	1a590 <bt_le_ext_adv_foreach>
	return adv_enabled;
   19e9a:	f89d 4007 	ldrb.w	r4, [sp, #7]
	le_rpa_invalidate();
   19e9e:	f7ff fd75 	bl	1998c <le_rpa_invalidate>
	if (!(adv_enabled ||
   19ea2:	b124      	cbz	r4, 19eae <rpa_timeout+0x26>
}
   19ea4:	b002      	add	sp, #8
   19ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	le_update_private_addr();
   19eaa:	f7ff bfb1 	b.w	19e10 <le_update_private_addr>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19eae:	4809      	ldr	r0, [pc, #36]	; (19ed4 <rpa_timeout+0x4c>)
   19eb0:	f012 fc2e 	bl	2c710 <atomic_get>
	if (!(adv_enabled ||
   19eb4:	04c1      	lsls	r1, r0, #19
   19eb6:	d4f5      	bmi.n	19ea4 <rpa_timeout+0x1c>
   19eb8:	4806      	ldr	r0, [pc, #24]	; (19ed4 <rpa_timeout+0x4c>)
   19eba:	f012 fc29 	bl	2c710 <atomic_get>
   19ebe:	0642      	lsls	r2, r0, #25
   19ec0:	d504      	bpl.n	19ecc <rpa_timeout+0x44>
   19ec2:	4804      	ldr	r0, [pc, #16]	; (19ed4 <rpa_timeout+0x4c>)
   19ec4:	f012 fc24 	bl	2c710 <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   19ec8:	05c3      	lsls	r3, r0, #23
   19eca:	d4eb      	bmi.n	19ea4 <rpa_timeout+0x1c>
}
   19ecc:	b002      	add	sp, #8
   19ece:	bd10      	pop	{r4, pc}
   19ed0:	0002c72b 	.word	0x0002c72b
   19ed4:	200005c4 	.word	0x200005c4

00019ed8 <bt_id_pending_keys_update>:
   19ed8:	4b0a      	ldr	r3, [pc, #40]	; (19f04 <bt_id_pending_keys_update+0x2c>)
   19eda:	f3bf 8f5b 	dmb	ish
   19ede:	e853 2f00 	ldrex	r2, [r3]
   19ee2:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   19ee6:	e843 1000 	strex	r0, r1, [r3]
   19eea:	2800      	cmp	r0, #0
   19eec:	d1f7      	bne.n	19ede <bt_id_pending_keys_update+0x6>
   19eee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   19ef2:	0413      	lsls	r3, r2, #16
   19ef4:	d504      	bpl.n	19f00 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   19ef6:	4904      	ldr	r1, [pc, #16]	; (19f08 <bt_id_pending_keys_update+0x30>)
   19ef8:	2200      	movs	r2, #0
   19efa:	2002      	movs	r0, #2
   19efc:	f006 bad4 	b.w	204a8 <bt_keys_foreach_type>
}
   19f00:	4770      	bx	lr
   19f02:	bf00      	nop
   19f04:	200005c4 	.word	0x200005c4
   19f08:	0002c8d5 	.word	0x0002c8d5

00019f0c <bt_id_find_conflict>:
{
   19f0c:	b507      	push	{r0, r1, r2, lr}
	struct bt_id_conflict conflict = {
   19f0e:	2300      	movs	r3, #0
   19f10:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   19f14:	4904      	ldr	r1, [pc, #16]	; (19f28 <bt_id_find_conflict+0x1c>)
   19f16:	466a      	mov	r2, sp
   19f18:	2002      	movs	r0, #2
   19f1a:	f006 fac5 	bl	204a8 <bt_keys_foreach_type>
}
   19f1e:	9801      	ldr	r0, [sp, #4]
   19f20:	b003      	add	sp, #12
   19f22:	f85d fb04 	ldr.w	pc, [sp], #4
   19f26:	bf00      	nop
   19f28:	0002c7db 	.word	0x0002c7db

00019f2c <bt_id_add>:
{
   19f2c:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   19f2e:	4603      	mov	r3, r0
   19f30:	b170      	cbz	r0, 19f50 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   19f32:	490a      	ldr	r1, [pc, #40]	; (19f5c <bt_id_add+0x30>)
   19f34:	f891 4120 	ldrb.w	r4, [r1, #288]	; 0x120
   19f38:	f891 2121 	ldrb.w	r2, [r1, #289]	; 0x121
   19f3c:	b10c      	cbz	r4, 19f42 <bt_id_add+0x16>
   19f3e:	4294      	cmp	r4, r2
   19f40:	d208      	bcs.n	19f54 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   19f42:	3201      	adds	r2, #1
   19f44:	f881 2121 	strb.w	r2, [r1, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   19f48:	7a1a      	ldrb	r2, [r3, #8]
   19f4a:	f042 0204 	orr.w	r2, r2, #4
   19f4e:	721a      	strb	r2, [r3, #8]
}
   19f50:	bc10      	pop	{r4}
   19f52:	4770      	bx	lr
   19f54:	bc10      	pop	{r4}
   19f56:	f7ff bdc3 	b.w	19ae0 <bt_id_add.part.0>
   19f5a:	bf00      	nop
   19f5c:	200004f0 	.word	0x200004f0

00019f60 <bt_id_del>:
{
   19f60:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   19f62:	4603      	mov	r3, r0
   19f64:	b198      	cbz	r0, 19f8e <bt_id_del+0x2e>
	if (!bt_dev.le.rl_size ||
   19f66:	4c0b      	ldr	r4, [pc, #44]	; (19f94 <bt_id_del+0x34>)
   19f68:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   19f6c:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
	if (!bt_dev.le.rl_size ||
   19f70:	b129      	cbz	r1, 19f7e <bt_id_del+0x1e>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   19f72:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
   19f74:	428a      	cmp	r2, r1
   19f76:	dc03      	bgt.n	19f80 <bt_id_del+0x20>
}
   19f78:	bc10      	pop	{r4}
   19f7a:	f7ff be8f 	b.w	19c9c <bt_id_del.part.0>
		if (bt_dev.le.rl_entries > 0) {
   19f7e:	b112      	cbz	r2, 19f86 <bt_id_del+0x26>
			bt_dev.le.rl_entries--;
   19f80:	3a01      	subs	r2, #1
   19f82:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   19f86:	7a1a      	ldrb	r2, [r3, #8]
   19f88:	f022 0204 	bic.w	r2, r2, #4
   19f8c:	721a      	strb	r2, [r3, #8]
}
   19f8e:	bc10      	pop	{r4}
   19f90:	4770      	bx	lr
   19f92:	bf00      	nop
   19f94:	200004f0 	.word	0x200004f0

00019f98 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   19f98:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f9a:	460e      	mov	r6, r1
   19f9c:	b087      	sub	sp, #28
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   19f9e:	4604      	mov	r4, r0
   19fa0:	b930      	cbnz	r0, 19fb0 <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   19fa2:	4d29      	ldr	r5, [pc, #164]	; (1a048 <bt_id_create+0xb0>)
   19fa4:	79eb      	ldrb	r3, [r5, #7]
   19fa6:	2b01      	cmp	r3, #1
   19fa8:	d125      	bne.n	19ff6 <bt_id_create+0x5e>
		return -ENOMEM;
   19faa:	f06f 000b 	mvn.w	r0, #11
   19fae:	e018      	b.n	19fe2 <bt_id_create+0x4a>
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   19fb0:	4926      	ldr	r1, [pc, #152]	; (1a04c <bt_id_create+0xb4>)
   19fb2:	f012 fba2 	bl	2c6fa <bt_addr_le_eq>
   19fb6:	2800      	cmp	r0, #0
   19fb8:	d1f3      	bne.n	19fa2 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   19fba:	7823      	ldrb	r3, [r4, #0]
   19fbc:	2b01      	cmp	r3, #1
   19fbe:	d104      	bne.n	19fca <bt_id_create+0x32>
   19fc0:	79a3      	ldrb	r3, [r4, #6]
   19fc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19fc6:	2bc0      	cmp	r3, #192	; 0xc0
   19fc8:	d00d      	beq.n	19fe6 <bt_id_create+0x4e>
			LOG_ERR("Only static random identity address supported");
   19fca:	4b21      	ldr	r3, [pc, #132]	; (1a050 <bt_id_create+0xb8>)
   19fcc:	9305      	str	r3, [sp, #20]
   19fce:	4821      	ldr	r0, [pc, #132]	; (1a054 <bt_id_create+0xbc>)
   19fd0:	2302      	movs	r3, #2
   19fd2:	aa04      	add	r2, sp, #16
   19fd4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19fd8:	9304      	str	r3, [sp, #16]
   19fda:	f012 fbc2 	bl	2c762 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   19fde:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   19fe2:	b007      	add	sp, #28
   19fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (id_find(addr) >= 0) {
   19fe6:	4620      	mov	r0, r4
   19fe8:	f7ff fc9a 	bl	19920 <id_find>
   19fec:	2800      	cmp	r0, #0
   19fee:	dbd8      	blt.n	19fa2 <bt_id_create+0xa>
			return -EALREADY;
   19ff0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   19ff4:	e7f5      	b.n	19fe2 <bt_id_create+0x4a>
   19ff6:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   19ffa:	f012 fb89 	bl	2c710 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   19ffe:	f010 0001 	ands.w	r0, r0, #1
   1a002:	d114      	bne.n	1a02e <bt_id_create+0x96>
		uint8_t zero_irk[16] = { 0 };
   1a004:	e9cd 0000 	strd	r0, r0, [sp]
   1a008:	e9cd 0002 	strd	r0, r0, [sp, #8]
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   1a00c:	2c00      	cmp	r4, #0
   1a00e:	d0e6      	beq.n	19fde <bt_id_create+0x46>
   1a010:	490e      	ldr	r1, [pc, #56]	; (1a04c <bt_id_create+0xb4>)
   1a012:	4620      	mov	r0, r4
   1a014:	f012 fb71 	bl	2c6fa <bt_addr_le_eq>
   1a018:	2800      	cmp	r0, #0
   1a01a:	d1e0      	bne.n	19fde <bt_id_create+0x46>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1a01c:	2e00      	cmp	r6, #0
   1a01e:	d0de      	beq.n	19fde <bt_id_create+0x46>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   1a020:	2210      	movs	r2, #16
   1a022:	4669      	mov	r1, sp
   1a024:	4630      	mov	r0, r6
   1a026:	f012 f933 	bl	2c290 <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1a02a:	2800      	cmp	r0, #0
   1a02c:	d0d7      	beq.n	19fde <bt_id_create+0x46>
	new_id = bt_dev.id_count;
   1a02e:	79ef      	ldrb	r7, [r5, #7]
	err = id_create(new_id, addr, irk);
   1a030:	4632      	mov	r2, r6
   1a032:	4621      	mov	r1, r4
   1a034:	4638      	mov	r0, r7
   1a036:	f7ff fcf1 	bl	19a1c <id_create>
	if (err) {
   1a03a:	2800      	cmp	r0, #0
   1a03c:	d1d1      	bne.n	19fe2 <bt_id_create+0x4a>
		bt_dev.id_count++;
   1a03e:	79eb      	ldrb	r3, [r5, #7]
   1a040:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   1a042:	4638      	mov	r0, r7
		bt_dev.id_count++;
   1a044:	71eb      	strb	r3, [r5, #7]
	return new_id;
   1a046:	e7cc      	b.n	19fe2 <bt_id_create+0x4a>
   1a048:	200004f0 	.word	0x200004f0
   1a04c:	00031bf1 	.word	0x00031bf1
   1a050:	0003272e 	.word	0x0003272e
   1a054:	000302bc 	.word	0x000302bc

0001a058 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1a058:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   1a05a:	4604      	mov	r4, r0
{
   1a05c:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   1a05e:	b960      	cbnz	r0, 1a07a <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   1a060:	4b1a      	ldr	r3, [pc, #104]	; (1a0cc <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   1a062:	9307      	str	r3, [sp, #28]
   1a064:	481a      	ldr	r0, [pc, #104]	; (1a0d0 <bt_id_read_public_addr+0x78>)
   1a066:	2302      	movs	r3, #2
   1a068:	aa06      	add	r2, sp, #24
   1a06a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a06e:	9306      	str	r3, [sp, #24]
   1a070:	f012 fb77 	bl	2c762 <z_log_msg_static_create.constprop.0>
		return 0U;
   1a074:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1a076:	b008      	add	sp, #32
   1a078:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1a07a:	aa01      	add	r2, sp, #4
   1a07c:	2100      	movs	r1, #0
   1a07e:	f241 0009 	movw	r0, #4105	; 0x1009
   1a082:	f7fe fc87 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   1a086:	4606      	mov	r6, r0
   1a088:	b108      	cbz	r0, 1a08e <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   1a08a:	4b12      	ldr	r3, [pc, #72]	; (1a0d4 <bt_id_read_public_addr+0x7c>)
   1a08c:	e7e9      	b.n	1a062 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   1a08e:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   1a090:	4911      	ldr	r1, [pc, #68]	; (1a0d8 <bt_id_read_public_addr+0x80>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1a092:	68dd      	ldr	r5, [r3, #12]
   1a094:	3501      	adds	r5, #1
   1a096:	2206      	movs	r2, #6
   1a098:	4628      	mov	r0, r5
   1a09a:	f012 f8f9 	bl	2c290 <memcmp>
   1a09e:	b918      	cbnz	r0, 1a0a8 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   1a0a0:	9801      	ldr	r0, [sp, #4]
   1a0a2:	f006 fd4f 	bl	20b44 <net_buf_unref>
		return 0U;
   1a0a6:	e7e5      	b.n	1a074 <bt_id_read_public_addr+0x1c>
   1a0a8:	490c      	ldr	r1, [pc, #48]	; (1a0dc <bt_id_read_public_addr+0x84>)
   1a0aa:	2206      	movs	r2, #6
   1a0ac:	4628      	mov	r0, r5
   1a0ae:	f012 f8ef 	bl	2c290 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1a0b2:	2800      	cmp	r0, #0
   1a0b4:	d0f4      	beq.n	1a0a0 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   1a0b6:	2206      	movs	r2, #6
   1a0b8:	4629      	mov	r1, r5
   1a0ba:	1c60      	adds	r0, r4, #1
   1a0bc:	f012 f90f 	bl	2c2de <memcpy>
	net_buf_unref(rsp);
   1a0c0:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1a0c2:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   1a0c4:	f006 fd3e 	bl	20b44 <net_buf_unref>
	return 1U;
   1a0c8:	2001      	movs	r0, #1
   1a0ca:	e7d4      	b.n	1a076 <bt_id_read_public_addr+0x1e>
   1a0cc:	0003275c 	.word	0x0003275c
   1a0d0:	000302bc 	.word	0x000302bc
   1a0d4:	00032775 	.word	0x00032775
   1a0d8:	00031bfe 	.word	0x00031bfe
   1a0dc:	00031bf8 	.word	0x00031bf8

0001a0e0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1a0e0:	b510      	push	{r4, lr}
   1a0e2:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1a0e4:	a802      	add	r0, sp, #8
   1a0e6:	f7ff ffb7 	bl	1a058 <bt_id_read_public_addr>
   1a0ea:	4c1e      	ldr	r4, [pc, #120]	; (1a164 <bt_setup_public_id_addr+0x84>)
   1a0ec:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   1a0ee:	b348      	cbz	r0, 1a144 <bt_setup_public_id_addr+0x64>
	memset(ir, 0, 16);
   1a0f0:	2210      	movs	r2, #16
   1a0f2:	2100      	movs	r1, #0
   1a0f4:	eb0d 0002 	add.w	r0, sp, r2
   1a0f8:	f012 f8fc 	bl	2c2f4 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   1a0fc:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   1a100:	079b      	lsls	r3, r3, #30
   1a102:	d510      	bpl.n	1a126 <bt_setup_public_id_addr+0x46>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   1a104:	aa01      	add	r2, sp, #4
   1a106:	2100      	movs	r1, #0
   1a108:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   1a10c:	f7fe fc42 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   1a110:	b1d0      	cbz	r0, 1a148 <bt_setup_public_id_addr+0x68>
		LOG_WRN("Failed to read identity root");
   1a112:	4b15      	ldr	r3, [pc, #84]	; (1a168 <bt_setup_public_id_addr+0x88>)
   1a114:	930d      	str	r3, [sp, #52]	; 0x34
   1a116:	4815      	ldr	r0, [pc, #84]	; (1a16c <bt_setup_public_id_addr+0x8c>)
   1a118:	2302      	movs	r3, #2
   1a11a:	aa0c      	add	r2, sp, #48	; 0x30
   1a11c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a120:	930c      	str	r3, [sp, #48]	; 0x30
   1a122:	f012 fb1e 	bl	2c762 <z_log_msg_static_create.constprop.0>
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY_RANDOMIZE_IR)) {
		if (!bt_smp_irk_get(ir, ir_irk)) {
   1a126:	a908      	add	r1, sp, #32
   1a128:	a804      	add	r0, sp, #16
   1a12a:	f014 f915 	bl	2e358 <bt_smp_irk_get>
   1a12e:	b1b8      	cbz	r0, 1a160 <bt_setup_public_id_addr+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a130:	480f      	ldr	r0, [pc, #60]	; (1a170 <bt_setup_public_id_addr+0x90>)
   1a132:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1a136:	f012 fb2f 	bl	2c798 <atomic_or.isra.0>
	uint8_t *irk = NULL;
   1a13a:	2200      	movs	r2, #0
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1a13c:	a902      	add	r1, sp, #8
   1a13e:	2000      	movs	r0, #0
   1a140:	f7ff fc6c 	bl	19a1c <id_create>
}
   1a144:	b00e      	add	sp, #56	; 0x38
   1a146:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
   1a148:	9b01      	ldr	r3, [sp, #4]
	memcpy(ir, rp->ir, 16);
   1a14a:	68d9      	ldr	r1, [r3, #12]
   1a14c:	2210      	movs	r2, #16
   1a14e:	3101      	adds	r1, #1
   1a150:	eb0d 0002 	add.w	r0, sp, r2
   1a154:	f012 f8c3 	bl	2c2de <memcpy>
	net_buf_unref(rsp);
   1a158:	9801      	ldr	r0, [sp, #4]
   1a15a:	f006 fcf3 	bl	20b44 <net_buf_unref>
   1a15e:	e7e2      	b.n	1a126 <bt_setup_public_id_addr+0x46>
			irk = ir_irk;
   1a160:	aa08      	add	r2, sp, #32
   1a162:	e7eb      	b.n	1a13c <bt_setup_public_id_addr+0x5c>
   1a164:	200004f0 	.word	0x200004f0
   1a168:	00032793 	.word	0x00032793
   1a16c:	000302bc 	.word	0x000302bc
   1a170:	200005c4 	.word	0x200005c4

0001a174 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1a174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1a178:	4b22      	ldr	r3, [pc, #136]	; (1a204 <bt_read_static_addr+0x90>)
   1a17a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   1a17e:	07db      	lsls	r3, r3, #31
{
   1a180:	b088      	sub	sp, #32
   1a182:	4607      	mov	r7, r0
   1a184:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1a186:	d40e      	bmi.n	1a1a6 <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
   1a188:	4b1f      	ldr	r3, [pc, #124]	; (1a208 <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   1a18a:	9307      	str	r3, [sp, #28]
   1a18c:	481f      	ldr	r0, [pc, #124]	; (1a20c <bt_read_static_addr+0x98>)
   1a18e:	2302      	movs	r3, #2
   1a190:	aa06      	add	r2, sp, #24
   1a192:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   1a196:	2500      	movs	r5, #0
		LOG_WRN("Failed to read static addresses");
   1a198:	9306      	str	r3, [sp, #24]
   1a19a:	f012 fae2 	bl	2c762 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   1a19e:	4628      	mov	r0, r5
   1a1a0:	b008      	add	sp, #32
   1a1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1a1a6:	aa01      	add	r2, sp, #4
   1a1a8:	2100      	movs	r1, #0
   1a1aa:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1a1ae:	f7fe fbf1 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   1a1b2:	4604      	mov	r4, r0
   1a1b4:	b108      	cbz	r0, 1a1ba <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   1a1b6:	4b16      	ldr	r3, [pc, #88]	; (1a210 <bt_read_static_addr+0x9c>)
   1a1b8:	e7e7      	b.n	1a18a <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   1a1ba:	9b01      	ldr	r3, [sp, #4]
   1a1bc:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   1a1be:	7875      	ldrb	r5, [r6, #1]
   1a1c0:	4545      	cmp	r5, r8
   1a1c2:	bf28      	it	cs
   1a1c4:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   1a1c6:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1a1c8:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   1a1cc:	42a5      	cmp	r5, r4
   1a1ce:	dc0f      	bgt.n	1a1f0 <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
   1a1d0:	9801      	ldr	r0, [sp, #4]
   1a1d2:	f006 fcb7 	bl	20b44 <net_buf_unref>
	if (!cnt) {
   1a1d6:	2d00      	cmp	r5, #0
   1a1d8:	d1e1      	bne.n	1a19e <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
   1a1da:	4b0e      	ldr	r3, [pc, #56]	; (1a214 <bt_read_static_addr+0xa0>)
   1a1dc:	9307      	str	r3, [sp, #28]
   1a1de:	480b      	ldr	r0, [pc, #44]	; (1a20c <bt_read_static_addr+0x98>)
   1a1e0:	2302      	movs	r3, #2
   1a1e2:	aa06      	add	r2, sp, #24
   1a1e4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a1e8:	9306      	str	r3, [sp, #24]
   1a1ea:	f012 faba 	bl	2c762 <z_log_msg_static_create.constprop.0>
   1a1ee:	e7d6      	b.n	1a19e <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1a1f0:	4631      	mov	r1, r6
   1a1f2:	fb08 7004 	mla	r0, r8, r4, r7
   1a1f6:	2216      	movs	r2, #22
   1a1f8:	f012 f871 	bl	2c2de <memcpy>
	for (i = 0; i < cnt; i++) {
   1a1fc:	3401      	adds	r4, #1
   1a1fe:	3616      	adds	r6, #22
   1a200:	e7e4      	b.n	1a1cc <bt_read_static_addr+0x58>
   1a202:	bf00      	nop
   1a204:	200004f0 	.word	0x200004f0
   1a208:	000327b0 	.word	0x000327b0
   1a20c:	000302bc 	.word	0x000302bc
   1a210:	000327dc 	.word	0x000327dc
   1a214:	000327fc 	.word	0x000327fc

0001a218 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1a218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1a21c:	4e23      	ldr	r6, [pc, #140]	; (1a2ac <bt_setup_random_id_addr+0x94>)
   1a21e:	79f4      	ldrb	r4, [r6, #7]
{
   1a220:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
   1a222:	b92c      	cbnz	r4, 1a230 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1a224:	2101      	movs	r1, #1
   1a226:	a806      	add	r0, sp, #24
   1a228:	f7ff ffa4 	bl	1a174 <bt_read_static_addr>
   1a22c:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   1a22e:	bb90      	cbnz	r0, 1a296 <bt_setup_random_id_addr+0x7e>
   1a230:	481f      	ldr	r0, [pc, #124]	; (1a2b0 <bt_setup_random_id_addr+0x98>)
   1a232:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1a236:	f012 faaf 	bl	2c798 <atomic_or.isra.0>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1a23a:	2100      	movs	r1, #0
   1a23c:	4608      	mov	r0, r1
}
   1a23e:	b00c      	add	sp, #48	; 0x30
   1a240:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_id_create(NULL, NULL);
   1a244:	f7ff bea8 	b.w	19f98 <bt_id_create>
					if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   1a248:	fb08 fa05 	mul.w	sl, r8, r5
   1a24c:	f10a 0006 	add.w	r0, sl, #6
   1a250:	ab06      	add	r3, sp, #24
   1a252:	a902      	add	r1, sp, #8
   1a254:	4418      	add	r0, r3
   1a256:	f014 f87f 	bl	2e358 <bt_smp_irk_get>
   1a25a:	b1d0      	cbz	r0, 1a292 <bt_setup_random_id_addr+0x7a>
   1a25c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1a260:	4648      	mov	r0, r9
   1a262:	f012 fa99 	bl	2c798 <atomic_or.isra.0>
				uint8_t *irk = NULL;
   1a266:	2700      	movs	r7, #0
   1a268:	ab06      	add	r3, sp, #24
   1a26a:	eb03 010a 	add.w	r1, r3, sl
   1a26e:	2206      	movs	r2, #6
   1a270:	f10d 0001 	add.w	r0, sp, #1
   1a274:	f012 f833 	bl	2c2de <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1a278:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   1a27a:	463a      	mov	r2, r7
   1a27c:	4669      	mov	r1, sp
   1a27e:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   1a280:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1a284:	f7ff fbca 	bl	19a1c <id_create>
				if (err) {
   1a288:	3401      	adds	r4, #1
   1a28a:	b140      	cbz	r0, 1a29e <bt_setup_random_id_addr+0x86>
}
   1a28c:	b00c      	add	sp, #48	; 0x30
   1a28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						irk = ir_irk;
   1a292:	af02      	add	r7, sp, #8
   1a294:	e7e8      	b.n	1a268 <bt_setup_random_id_addr+0x50>
   1a296:	f04f 0816 	mov.w	r8, #22
   1a29a:	f106 09d4 	add.w	r9, r6, #212	; 0xd4
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1a29e:	79f3      	ldrb	r3, [r6, #7]
   1a2a0:	b2e5      	uxtb	r5, r4
   1a2a2:	42ab      	cmp	r3, r5
   1a2a4:	d8d0      	bhi.n	1a248 <bt_setup_random_id_addr+0x30>
			return 0;
   1a2a6:	2000      	movs	r0, #0
   1a2a8:	e7f0      	b.n	1a28c <bt_setup_random_id_addr+0x74>
   1a2aa:	bf00      	nop
   1a2ac:	200004f0 	.word	0x200004f0
   1a2b0:	200005c4 	.word	0x200005c4

0001a2b4 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   1a2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2b8:	461d      	mov	r5, r3
   1a2ba:	460f      	mov	r7, r1
   1a2bc:	4690      	mov	r8, r2
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1a2be:	4603      	mov	r3, r0
   1a2c0:	2800      	cmp	r0, #0
   1a2c2:	d05e      	beq.n	1a382 <bt_id_set_adv_own_addr+0xce>
   1a2c4:	2d00      	cmp	r5, #0
   1a2c6:	d05c      	beq.n	1a382 <bt_id_set_adv_own_addr+0xce>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1a2c8:	07ca      	lsls	r2, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   1a2ca:	7806      	ldrb	r6, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1a2cc:	d542      	bpl.n	1a354 <bt_id_set_adv_own_addr+0xa0>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1a2ce:	f1b8 0f00 	cmp.w	r8, #0
   1a2d2:	d118      	bne.n	1a306 <bt_id_set_adv_own_addr+0x52>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
			return -ENOTSUP;
		}

		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1a2d4:	074c      	lsls	r4, r1, #29
   1a2d6:	d526      	bpl.n	1a326 <bt_id_set_adv_own_addr+0x72>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1a2d8:	492d      	ldr	r1, [pc, #180]	; (1a390 <bt_id_set_adv_own_addr+0xdc>)
   1a2da:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
   1a2de:	5c8c      	ldrb	r4, [r1, r2]
   1a2e0:	2c01      	cmp	r4, #1
   1a2e2:	d125      	bne.n	1a330 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1a2e4:	4c2a      	ldr	r4, [pc, #168]	; (1a390 <bt_id_set_adv_own_addr+0xdc>)
   1a2e6:	2107      	movs	r1, #7
   1a2e8:	2201      	movs	r2, #1
   1a2ea:	fb11 2106 	smlabb	r1, r1, r6, r2
   1a2ee:	4421      	add	r1, r4
   1a2f0:	4618      	mov	r0, r3
   1a2f2:	f012 fadc 	bl	2c8ae <bt_id_set_adv_random_addr>
				if (err) {
   1a2f6:	b9a0      	cbnz	r0, 1a322 <bt_id_set_adv_own_addr+0x6e>
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   1a2f8:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
   1a2fc:	5da4      	ldrb	r4, [r4, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1a2fe:	f1b8 0f00 	cmp.w	r8, #0
   1a302:	d015      	beq.n	1a330 <bt_id_set_adv_own_addr+0x7c>
   1a304:	e021      	b.n	1a34a <bt_id_set_adv_own_addr+0x96>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1a306:	f011 0420 	ands.w	r4, r1, #32
   1a30a:	d004      	beq.n	1a316 <bt_id_set_adv_own_addr+0x62>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1a30c:	4a20      	ldr	r2, [pc, #128]	; (1a390 <bt_id_set_adv_own_addr+0xdc>)
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1a30e:	f892 20d8 	ldrb.w	r2, [r2, #216]	; 0xd8
   1a312:	0650      	lsls	r0, r2, #25
   1a314:	d538      	bpl.n	1a388 <bt_id_set_adv_own_addr+0xd4>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1a316:	0779      	lsls	r1, r7, #29
   1a318:	d411      	bmi.n	1a33e <bt_id_set_adv_own_addr+0x8a>
			err = bt_id_set_adv_private_addr(adv);
   1a31a:	4618      	mov	r0, r3
   1a31c:	f012 facf 	bl	2c8be <bt_id_set_adv_private_addr>
			if (err) {
   1a320:	b148      	cbz	r0, 1a336 <bt_id_set_adv_own_addr+0x82>
			return err;
		}
	}

	return 0;
}
   1a322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = bt_id_set_adv_private_addr(adv);
   1a326:	f012 faca 	bl	2c8be <bt_id_set_adv_private_addr>
			if (err) {
   1a32a:	2800      	cmp	r0, #0
   1a32c:	d1f9      	bne.n	1a322 <bt_id_set_adv_own_addr+0x6e>
{
   1a32e:	2401      	movs	r4, #1
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1a330:	702c      	strb	r4, [r5, #0]
	return 0;
   1a332:	2000      	movs	r0, #0
   1a334:	e7f5      	b.n	1a322 <bt_id_set_adv_own_addr+0x6e>
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1a336:	2c00      	cmp	r4, #0
   1a338:	d0f9      	beq.n	1a32e <bt_id_set_adv_own_addr+0x7a>
   1a33a:	2403      	movs	r4, #3
   1a33c:	e7f8      	b.n	1a330 <bt_id_set_adv_own_addr+0x7c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1a33e:	4914      	ldr	r1, [pc, #80]	; (1a390 <bt_id_set_adv_own_addr+0xdc>)
   1a340:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
   1a344:	5c8c      	ldrb	r4, [r1, r2]
   1a346:	2c01      	cmp	r4, #1
   1a348:	d0cc      	beq.n	1a2e4 <bt_id_set_adv_own_addr+0x30>
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1a34a:	06ba      	lsls	r2, r7, #26
   1a34c:	d5f0      	bpl.n	1a330 <bt_id_set_adv_own_addr+0x7c>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1a34e:	f044 0402 	orr.w	r4, r4, #2
   1a352:	e7ed      	b.n	1a330 <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1a354:	074b      	lsls	r3, r1, #29
   1a356:	d510      	bpl.n	1a37a <bt_id_set_adv_own_addr+0xc6>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1a358:	4f0d      	ldr	r7, [pc, #52]	; (1a390 <bt_id_set_adv_own_addr+0xdc>)
   1a35a:	ebc6 08c6 	rsb	r8, r6, r6, lsl #3
   1a35e:	f817 4008 	ldrb.w	r4, [r7, r8]
   1a362:	2c01      	cmp	r4, #1
   1a364:	d1e4      	bne.n	1a330 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1a366:	2107      	movs	r1, #7
   1a368:	fb11 4106 	smlabb	r1, r1, r6, r4
   1a36c:	4439      	add	r1, r7
   1a36e:	f012 fa9e 	bl	2c8ae <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   1a372:	f817 3008 	ldrb.w	r3, [r7, r8]
   1a376:	702b      	strb	r3, [r5, #0]
		if (err) {
   1a378:	e7d3      	b.n	1a322 <bt_id_set_adv_own_addr+0x6e>
			err = bt_id_set_adv_private_addr(adv);
   1a37a:	f012 faa0 	bl	2c8be <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1a37e:	2301      	movs	r3, #1
   1a380:	e7f9      	b.n	1a376 <bt_id_set_adv_own_addr+0xc2>
		return -EINVAL;
   1a382:	f06f 0015 	mvn.w	r0, #21
   1a386:	e7cc      	b.n	1a322 <bt_id_set_adv_own_addr+0x6e>
			return -ENOTSUP;
   1a388:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a38c:	e7c9      	b.n	1a322 <bt_id_set_adv_own_addr+0x6e>
   1a38e:	bf00      	nop
   1a390:	200004f0 	.word	0x200004f0

0001a394 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1a394:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   1a396:	4903      	ldr	r1, [pc, #12]	; (1a3a4 <bt_id_init+0x10>)
   1a398:	4803      	ldr	r0, [pc, #12]	; (1a3a8 <bt_id_init+0x14>)
   1a39a:	f015 fa01 	bl	2f7a0 <k_work_init_delayable>
#endif

	return 0;
}
   1a39e:	2000      	movs	r0, #0
   1a3a0:	bd08      	pop	{r3, pc}
   1a3a2:	bf00      	nop
   1a3a4:	00019e89 	.word	0x00019e89
   1a3a8:	20000668 	.word	0x20000668

0001a3ac <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   1a3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3b0:	b089      	sub	sp, #36	; 0x24
   1a3b2:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1a3b4:	2120      	movs	r1, #32
{
   1a3b6:	9000      	str	r0, [sp, #0]
   1a3b8:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1a3ba:	f7fe fab1 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   1a3be:	4605      	mov	r5, r0
   1a3c0:	2800      	cmp	r0, #0
   1a3c2:	d05b      	beq.n	1a47c <hci_set_ad+0xd0>
   1a3c4:	2120      	movs	r1, #32
   1a3c6:	300c      	adds	r0, #12
   1a3c8:	f014 f99b 	bl	2e702 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   1a3cc:	2220      	movs	r2, #32
   1a3ce:	2100      	movs	r1, #0
   1a3d0:	4681      	mov	r9, r0
   1a3d2:	f011 ff8f 	bl	2c2f4 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1a3d6:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1a3da:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   1a3de:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1a3e0:	f8d4 8000 	ldr.w	r8, [r4]
   1a3e4:	2300      	movs	r3, #0
   1a3e6:	6862      	ldr	r2, [r4, #4]
   1a3e8:	4293      	cmp	r3, r2
   1a3ea:	d30c      	bcc.n	1a406 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   1a3ec:	3408      	adds	r4, #8
   1a3ee:	45a2      	cmp	sl, r4
   1a3f0:	d1f6      	bne.n	1a3e0 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a3f2:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   1a3f4:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a3f8:	2200      	movs	r2, #0
   1a3fa:	4629      	mov	r1, r5
}
   1a3fc:	b009      	add	sp, #36	; 0x24
   1a3fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a402:	f7fe bac7 	b.w	18994 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1a406:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1a40a:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1a40e:	1cb0      	adds	r0, r6, #2
   1a410:	1811      	adds	r1, r2, r0
   1a412:	291f      	cmp	r1, #31
   1a414:	d91b      	bls.n	1a44e <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1a416:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1a41a:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1a41e:	d101      	bne.n	1a424 <hci_set_ad+0x78>
   1a420:	2a00      	cmp	r2, #0
   1a422:	dc12      	bgt.n	1a44a <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   1a424:	4b17      	ldr	r3, [pc, #92]	; (1a484 <hci_set_ad+0xd8>)
   1a426:	9307      	str	r3, [sp, #28]
   1a428:	2302      	movs	r3, #2
   1a42a:	9306      	str	r3, [sp, #24]
   1a42c:	4816      	ldr	r0, [pc, #88]	; (1a488 <hci_set_ad+0xdc>)
   1a42e:	2300      	movs	r3, #0
   1a430:	aa06      	add	r2, sp, #24
   1a432:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a436:	f7fa fbc5 	bl	14bc4 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   1a43a:	4628      	mov	r0, r5
   1a43c:	f006 fb82 	bl	20b44 <net_buf_unref>
					return -EINVAL;
   1a440:	f06f 0015 	mvn.w	r0, #21
}
   1a444:	b009      	add	sp, #36	; 0x24
   1a446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   1a44a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1a44e:	b2d7      	uxtb	r7, r2
   1a450:	1c79      	adds	r1, r7, #1
   1a452:	f80b 1006 	strb.w	r1, [fp, r6]
   1a456:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1a458:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1a45a:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1a45e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1a462:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1a466:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1a468:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1a46a:	f011 ff38 	bl	2c2de <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1a46e:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1a470:	4437      	add	r7, r6
   1a472:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   1a474:	3301      	adds	r3, #1
   1a476:	f108 0808 	add.w	r8, r8, #8
   1a47a:	e7b4      	b.n	1a3e6 <hci_set_ad+0x3a>
		return -ENOBUFS;
   1a47c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a480:	e7e0      	b.n	1a444 <hci_set_ad+0x98>
   1a482:	bf00      	nop
   1a484:	0003282b 	.word	0x0003282b
   1a488:	0003027c 	.word	0x0003027c

0001a48c <adv_is_directed>:

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
   1a48c:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1a48e:	4904      	ldr	r1, [pc, #16]	; (1a4a0 <adv_is_directed+0x14>)
   1a490:	2207      	movs	r2, #7
   1a492:	3009      	adds	r0, #9
   1a494:	f011 fefc 	bl	2c290 <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
   1a498:	3800      	subs	r0, #0
   1a49a:	bf18      	it	ne
   1a49c:	2001      	movne	r0, #1
   1a49e:	bd08      	pop	{r3, pc}
   1a4a0:	00031bf1 	.word	0x00031bf1

0001a4a4 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1a4a4:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1a4a6:	4b15      	ldr	r3, [pc, #84]	; (1a4fc <le_adv_start_add_conn+0x58>)
   1a4a8:	7802      	ldrb	r2, [r0, #0]
   1a4aa:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
{
   1a4ae:	4604      	mov	r4, r0
   1a4b0:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
   1a4b2:	f7ff ffeb 	bl	1a48c <adv_is_directed>
   1a4b6:	4603      	mov	r3, r0
   1a4b8:	7820      	ldrb	r0, [r4, #0]
   1a4ba:	b96b      	cbnz	r3, 1a4d8 <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1a4bc:	4910      	ldr	r1, [pc, #64]	; (1a500 <le_adv_start_add_conn+0x5c>)
   1a4be:	f001 f901 	bl	1b6c4 <bt_conn_add_le>
		if (!conn) {
   1a4c2:	4604      	mov	r4, r0
   1a4c4:	b910      	cbnz	r0, 1a4cc <le_adv_start_add_conn+0x28>
			return -ENOMEM;
   1a4c6:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   1a4ca:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1a4cc:	2104      	movs	r1, #4
   1a4ce:	f000 fefb 	bl	1b2c8 <bt_conn_set_state>
		*out_conn = conn;
   1a4d2:	602c      	str	r4, [r5, #0]
		return 0;
   1a4d4:	2000      	movs	r0, #0
   1a4d6:	e7f8      	b.n	1a4ca <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   1a4d8:	f104 0609 	add.w	r6, r4, #9
   1a4dc:	4631      	mov	r1, r6
   1a4de:	f001 f927 	bl	1b730 <bt_conn_exists_le>
   1a4e2:	b940      	cbnz	r0, 1a4f6 <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1a4e4:	7820      	ldrb	r0, [r4, #0]
   1a4e6:	4631      	mov	r1, r6
   1a4e8:	f001 f8ec 	bl	1b6c4 <bt_conn_add_le>
	if (!conn) {
   1a4ec:	4604      	mov	r4, r0
   1a4ee:	2800      	cmp	r0, #0
   1a4f0:	d0e9      	beq.n	1a4c6 <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   1a4f2:	2105      	movs	r1, #5
   1a4f4:	e7eb      	b.n	1a4ce <le_adv_start_add_conn+0x2a>
		return -EINVAL;
   1a4f6:	f06f 0015 	mvn.w	r0, #21
   1a4fa:	e7e6      	b.n	1a4ca <le_adv_start_add_conn+0x26>
   1a4fc:	200004f0 	.word	0x200004f0
   1a500:	00031bea 	.word	0x00031bea

0001a504 <valid_adv_param>:
{
   1a504:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1a506:	6843      	ldr	r3, [r0, #4]
{
   1a508:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1a50a:	0558      	lsls	r0, r3, #21
   1a50c:	d501      	bpl.n	1a512 <valid_adv_param+0xe>
		return false;
   1a50e:	2000      	movs	r0, #0
}
   1a510:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1a512:	6922      	ldr	r2, [r4, #16]
   1a514:	b12a      	cbz	r2, 1a522 <valid_adv_param+0x1e>
   1a516:	07d9      	lsls	r1, r3, #31
   1a518:	d5f9      	bpl.n	1a50e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
   1a51a:	f003 0324 	and.w	r3, r3, #36	; 0x24
   1a51e:	2b24      	cmp	r3, #36	; 0x24
   1a520:	d0f5      	beq.n	1a50e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   1a522:	4d19      	ldr	r5, [pc, #100]	; (1a588 <valid_adv_param+0x84>)
   1a524:	7820      	ldrb	r0, [r4, #0]
   1a526:	79eb      	ldrb	r3, [r5, #7]
   1a528:	4283      	cmp	r3, r0
   1a52a:	d9f0      	bls.n	1a50e <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1a52c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1a530:	4916      	ldr	r1, [pc, #88]	; (1a58c <valid_adv_param+0x88>)
   1a532:	2207      	movs	r2, #7
   1a534:	4428      	add	r0, r5
   1a536:	f011 feab 	bl	2c290 <memcmp>
	if (param->id >= bt_dev.id_count ||
   1a53a:	2800      	cmp	r0, #0
   1a53c:	d0e7      	beq.n	1a50e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1a53e:	6860      	ldr	r0, [r4, #4]
   1a540:	07c2      	lsls	r2, r0, #31
   1a542:	d406      	bmi.n	1a552 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1a544:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   1a548:	2b08      	cmp	r3, #8
   1a54a:	d802      	bhi.n	1a552 <valid_adv_param+0x4e>
   1a54c:	68a3      	ldr	r3, [r4, #8]
   1a54e:	2b9f      	cmp	r3, #159	; 0x9f
   1a550:	d9dd      	bls.n	1a50e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1a552:	f010 0f30 	tst.w	r0, #48	; 0x30
   1a556:	d002      	beq.n	1a55e <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1a558:	6923      	ldr	r3, [r4, #16]
   1a55a:	2b00      	cmp	r3, #0
   1a55c:	d0d7      	beq.n	1a50e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1a55e:	06c3      	lsls	r3, r0, #27
   1a560:	d401      	bmi.n	1a566 <valid_adv_param+0x62>
   1a562:	6923      	ldr	r3, [r4, #16]
   1a564:	b943      	cbnz	r3, 1a578 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
   1a566:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1a56a:	429a      	cmp	r2, r3
   1a56c:	d8cf      	bhi.n	1a50e <valid_adv_param+0xa>
   1a56e:	2a1f      	cmp	r2, #31
   1a570:	d9cd      	bls.n	1a50e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1a572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1a576:	d8ca      	bhi.n	1a50e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1a578:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1a57c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1a580:	bf18      	it	ne
   1a582:	2001      	movne	r0, #1
   1a584:	e7c4      	b.n	1a510 <valid_adv_param+0xc>
   1a586:	bf00      	nop
   1a588:	200004f0 	.word	0x200004f0
   1a58c:	00031bf1 	.word	0x00031bf1

0001a590 <bt_le_ext_adv_foreach>:
{
   1a590:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1a592:	4801      	ldr	r0, [pc, #4]	; (1a598 <bt_le_ext_adv_foreach+0x8>)
   1a594:	4718      	bx	r3
   1a596:	bf00      	nop
   1a598:	20000508 	.word	0x20000508

0001a59c <bt_le_adv_lookup_legacy>:
}
   1a59c:	4800      	ldr	r0, [pc, #0]	; (1a5a0 <bt_le_adv_lookup_legacy+0x4>)
   1a59e:	4770      	bx	lr
   1a5a0:	20000508 	.word	0x20000508

0001a5a4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1a5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5a8:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1a5aa:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   1a5ae:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
   1a5b0:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   1a5b2:	ebba 0403 	subs.w	r4, sl, r3
{
   1a5b6:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a5b8:	4899      	ldr	r0, [pc, #612]	; (1a820 <bt_le_adv_start_legacy+0x27c>)
	struct bt_conn *conn = NULL;
   1a5ba:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
   1a5bc:	bf18      	it	ne
   1a5be:	2401      	movne	r4, #1
   1a5c0:	f012 f9a7 	bl	2c912 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a5c4:	0743      	lsls	r3, r0, #29
{
   1a5c6:	460d      	mov	r5, r1
   1a5c8:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a5ca:	f140 811f 	bpl.w	1a80c <bt_le_adv_start_legacy+0x268>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1a5ce:	4608      	mov	r0, r1
   1a5d0:	f7ff ff98 	bl	1a504 <valid_adv_param>
   1a5d4:	b928      	cbnz	r0, 1a5e2 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1a5d6:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1a5da:	4620      	mov	r0, r4
   1a5dc:	b013      	add	sp, #76	; 0x4c
   1a5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1a5e2:	4628      	mov	r0, r5
   1a5e4:	f012 f972 	bl	2c8cc <bt_id_adv_random_addr_check>
   1a5e8:	4681      	mov	r9, r0
   1a5ea:	2800      	cmp	r0, #0
   1a5ec:	d0f3      	beq.n	1a5d6 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1a5ee:	f106 0810 	add.w	r8, r6, #16
   1a5f2:	4640      	mov	r0, r8
   1a5f4:	f012 f98d 	bl	2c912 <atomic_get>
   1a5f8:	0607      	lsls	r7, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1a5fa:	f3c0 11c0 	ubfx	r1, r0, #7, #1
   1a5fe:	f100 8108 	bmi.w	1a812 <bt_le_adv_start_legacy+0x26e>
	(void)memset(&set_param, 0, sizeof(set_param));
   1a602:	220f      	movs	r2, #15
   1a604:	a808      	add	r0, sp, #32
   1a606:	f011 fe75 	bl	2c2f4 <memset>
	set_param.channel_map  = get_adv_channel_map(param->options);
   1a60a:	6869      	ldr	r1, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1a60c:	68ab      	ldr	r3, [r5, #8]
   1a60e:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1a612:	4608      	mov	r0, r1
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1a614:	68eb      	ldr	r3, [r5, #12]
   1a616:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   1a61a:	f012 f96b 	bl	2c8f4 <get_adv_channel_map>
	} else if ((options & BT_LE_ADV_OPT_FILTER_SCAN_REQ) &&
   1a61e:	f001 03c0 	and.w	r3, r1, #192	; 0xc0
   1a622:	2bc0      	cmp	r3, #192	; 0xc0
	set_param.channel_map  = get_adv_channel_map(param->options);
   1a624:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	} else if ((options & BT_LE_ADV_OPT_FILTER_SCAN_REQ) &&
   1a628:	d038      	beq.n	1a69c <bt_le_adv_start_legacy+0xf8>
	} else if (options & BT_LE_ADV_OPT_FILTER_SCAN_REQ) {
   1a62a:	0648      	lsls	r0, r1, #25
   1a62c:	d438      	bmi.n	1a6a0 <bt_le_adv_start_legacy+0xfc>
	} else if (options & BT_LE_ADV_OPT_FILTER_CONN) {
   1a62e:	f3c1 11c0 	ubfx	r1, r1, #7, #1
   1a632:	0049      	lsls	r1, r1, #1
	if (adv->id != param->id) {
   1a634:	7832      	ldrb	r2, [r6, #0]
   1a636:	782b      	ldrb	r3, [r5, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   1a638:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   1a63c:	429a      	cmp	r2, r3
   1a63e:	d004      	beq.n	1a64a <bt_le_adv_start_legacy+0xa6>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a640:	4877      	ldr	r0, [pc, #476]	; (1a820 <bt_le_adv_start_legacy+0x27c>)
   1a642:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1a646:	f012 f96a 	bl	2c91e <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   1a64a:	4a76      	ldr	r2, [pc, #472]	; (1a824 <bt_le_adv_start_legacy+0x280>)
	adv->id = param->id;
   1a64c:	782b      	ldrb	r3, [r5, #0]
   1a64e:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   1a650:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1a654:	6869      	ldr	r1, [r5, #4]
   1a656:	4622      	mov	r2, r4
   1a658:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   1a65c:	4630      	mov	r0, r6
   1a65e:	f7ff fe29 	bl	1a2b4 <bt_id_set_adv_own_addr>
	if (err) {
   1a662:	4604      	mov	r4, r0
   1a664:	2800      	cmp	r0, #0
   1a666:	d1b8      	bne.n	1a5da <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1a668:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
   1a66c:	2207      	movs	r2, #7
	if (dir_adv) {
   1a66e:	f1ba 0f00 	cmp.w	sl, #0
   1a672:	d017      	beq.n	1a6a4 <bt_le_adv_start_legacy+0x100>
   1a674:	6929      	ldr	r1, [r5, #16]
   1a676:	f011 fe32 	bl	2c2de <memcpy>
	name_type = get_adv_name_type_param(param);
   1a67a:	4628      	mov	r0, r5
   1a67c:	f012 f9ec 	bl	2ca58 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1a680:	686b      	ldr	r3, [r5, #4]
   1a682:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   1a684:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1a686:	d41a      	bmi.n	1a6be <bt_le_adv_start_legacy+0x11a>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1a688:	059b      	lsls	r3, r3, #22
   1a68a:	d403      	bmi.n	1a694 <bt_le_adv_start_legacy+0xf0>
   1a68c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1a68e:	b90b      	cbnz	r3, 1a694 <bt_le_adv_start_legacy+0xf0>
   1a690:	2f02      	cmp	r7, #2
   1a692:	d15e      	bne.n	1a752 <bt_le_adv_start_legacy+0x1ae>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1a694:	2302      	movs	r3, #2
   1a696:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1a69a:	e01e      	b.n	1a6da <bt_le_adv_start_legacy+0x136>
		return BT_LE_ADV_FP_FILTER_BOTH;
   1a69c:	2103      	movs	r1, #3
   1a69e:	e7c9      	b.n	1a634 <bt_le_adv_start_legacy+0x90>
		return BT_LE_ADV_FP_FILTER_SCAN_REQ;
   1a6a0:	2101      	movs	r1, #1
   1a6a2:	e7c7      	b.n	1a634 <bt_le_adv_start_legacy+0x90>
   1a6a4:	4960      	ldr	r1, [pc, #384]	; (1a828 <bt_le_adv_start_legacy+0x284>)
   1a6a6:	f011 fe1a 	bl	2c2de <memcpy>
	name_type = get_adv_name_type_param(param);
   1a6aa:	4628      	mov	r0, r5
   1a6ac:	f012 f9d4 	bl	2ca58 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1a6b0:	686b      	ldr	r3, [r5, #4]
   1a6b2:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   1a6b4:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1a6b6:	d5e7      	bpl.n	1a688 <bt_le_adv_start_legacy+0xe4>
			set_param.type = BT_HCI_ADV_IND;
   1a6b8:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   1a6bc:	e00d      	b.n	1a6da <bt_le_adv_start_legacy+0x136>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   1a6be:	f013 0f10 	tst.w	r3, #16
   1a6c2:	bf0c      	ite	eq
   1a6c4:	2301      	moveq	r3, #1
   1a6c6:	2304      	movne	r3, #4
   1a6c8:	6929      	ldr	r1, [r5, #16]
   1a6ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1a6ce:	2207      	movs	r2, #7
   1a6d0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1a6d4:	f011 fe03 	bl	2c2de <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   1a6d8:	46a1      	mov	r9, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1a6da:	210f      	movs	r1, #15
   1a6dc:	f242 0006 	movw	r0, #8198	; 0x2006
   1a6e0:	f7fe f91e 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   1a6e4:	4604      	mov	r4, r0
   1a6e6:	2800      	cmp	r0, #0
   1a6e8:	f000 8096 	beq.w	1a818 <bt_le_adv_start_legacy+0x274>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a6ec:	220f      	movs	r2, #15
   1a6ee:	a908      	add	r1, sp, #32
   1a6f0:	300c      	adds	r0, #12
   1a6f2:	f014 f80c 	bl	2e70e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1a6f6:	4621      	mov	r1, r4
   1a6f8:	2200      	movs	r2, #0
   1a6fa:	f242 0006 	movw	r0, #8198	; 0x2006
   1a6fe:	f7fe f949 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   1a702:	4604      	mov	r4, r0
   1a704:	2800      	cmp	r0, #0
   1a706:	f47f af68 	bne.w	1a5da <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   1a70a:	f1ba 0f00 	cmp.w	sl, #0
   1a70e:	d026      	beq.n	1a75e <bt_le_adv_start_legacy+0x1ba>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1a710:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a712:	07dc      	lsls	r4, r3, #31
   1a714:	d431      	bmi.n	1a77a <bt_le_adv_start_legacy+0x1d6>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1a716:	2101      	movs	r1, #1
   1a718:	4630      	mov	r0, r6
   1a71a:	f012 f9ad 	bl	2ca78 <bt_le_adv_set_enable_legacy>
	if (err) {
   1a71e:	4604      	mov	r4, r0
   1a720:	2800      	cmp	r0, #0
   1a722:	d06b      	beq.n	1a7fc <bt_le_adv_start_legacy+0x258>
		LOG_ERR("Failed to start advertiser");
   1a724:	4b41      	ldr	r3, [pc, #260]	; (1a82c <bt_le_adv_start_legacy+0x288>)
   1a726:	9311      	str	r3, [sp, #68]	; 0x44
   1a728:	2302      	movs	r3, #2
   1a72a:	9310      	str	r3, [sp, #64]	; 0x40
   1a72c:	4840      	ldr	r0, [pc, #256]	; (1a830 <bt_le_adv_start_legacy+0x28c>)
   1a72e:	2300      	movs	r3, #0
   1a730:	aa10      	add	r2, sp, #64	; 0x40
   1a732:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a736:	f7fa fa45 	bl	14bc4 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1a73a:	9d07      	ldr	r5, [sp, #28]
   1a73c:	2d00      	cmp	r5, #0
   1a73e:	f43f af4c 	beq.w	1a5da <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a742:	4628      	mov	r0, r5
   1a744:	2100      	movs	r1, #0
   1a746:	f000 fdbf 	bl	1b2c8 <bt_conn_set_state>
			bt_conn_unref(conn);
   1a74a:	4628      	mov	r0, r5
   1a74c:	f012 fa36 	bl	2cbbc <bt_conn_unref>
   1a750:	e743      	b.n	1a5da <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1a752:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   1a754:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1a758:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1a75c:	e7bd      	b.n	1a6da <bt_le_adv_start_legacy+0x136>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1a75e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1a760:	9300      	str	r3, [sp, #0]
   1a762:	e9cd 9701 	strd	r9, r7, [sp, #4]
   1a766:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1a768:	9a05      	ldr	r2, [sp, #20]
   1a76a:	4659      	mov	r1, fp
   1a76c:	4630      	mov	r0, r6
   1a76e:	f012 f8fc 	bl	2c96a <le_adv_update.constprop.0>
		if (err) {
   1a772:	4604      	mov	r4, r0
   1a774:	2800      	cmp	r0, #0
   1a776:	d0cb      	beq.n	1a710 <bt_le_adv_start_legacy+0x16c>
   1a778:	e72f      	b.n	1a5da <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   1a77a:	a907      	add	r1, sp, #28
   1a77c:	4630      	mov	r0, r6
   1a77e:	f7ff fe91 	bl	1a4a4 <le_adv_start_add_conn>
		if (err) {
   1a782:	4604      	mov	r4, r0
   1a784:	2800      	cmp	r0, #0
   1a786:	d0c6      	beq.n	1a716 <bt_le_adv_start_legacy+0x172>
			if (err == -ENOMEM && !dir_adv &&
   1a788:	f110 0f0c 	cmn.w	r0, #12
   1a78c:	f47f af25 	bne.w	1a5da <bt_le_adv_start_legacy+0x36>
   1a790:	f1ba 0f00 	cmp.w	sl, #0
   1a794:	f47f af21 	bne.w	1a5da <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1a798:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   1a79a:	0798      	lsls	r0, r3, #30
   1a79c:	f53f af1d 	bmi.w	1a5da <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1a7a0:	686c      	ldr	r4, [r5, #4]
   1a7a2:	f084 0402 	eor.w	r4, r4, #2
   1a7a6:	f3c4 0440 	ubfx	r4, r4, #1, #1
   1a7aa:	f004 0201 	and.w	r2, r4, #1
   1a7ae:	210e      	movs	r1, #14
   1a7b0:	4640      	mov	r0, r8
   1a7b2:	f012 f8c3 	bl	2c93c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   1a7b6:	1e7b      	subs	r3, r7, #1
   1a7b8:	425a      	negs	r2, r3
   1a7ba:	415a      	adcs	r2, r3
   1a7bc:	2108      	movs	r1, #8
   1a7be:	4640      	mov	r0, r8
   1a7c0:	f012 f8bc 	bl	2c93c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   1a7c4:	1eb9      	subs	r1, r7, #2
   1a7c6:	424a      	negs	r2, r1
   1a7c8:	414a      	adcs	r2, r1
   1a7ca:	4640      	mov	r0, r8
   1a7cc:	2109      	movs	r1, #9
   1a7ce:	f012 f8b5 	bl	2c93c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1a7d2:	686a      	ldr	r2, [r5, #4]
   1a7d4:	210a      	movs	r1, #10
   1a7d6:	f002 0201 	and.w	r2, r2, #1
   1a7da:	4640      	mov	r0, r8
   1a7dc:	f012 f8ae 	bl	2c93c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1a7e0:	464a      	mov	r2, r9
   1a7e2:	210b      	movs	r1, #11
   1a7e4:	4640      	mov	r0, r8
   1a7e6:	f012 f8a9 	bl	2c93c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1a7ea:	686a      	ldr	r2, [r5, #4]
   1a7ec:	210d      	movs	r1, #13
   1a7ee:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1a7f2:	4640      	mov	r0, r8
   1a7f4:	f012 f8a2 	bl	2c93c <atomic_set_bit_to>
	return 0;
   1a7f8:	2400      	movs	r4, #0
   1a7fa:	e6ee      	b.n	1a5da <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1a7fc:	9807      	ldr	r0, [sp, #28]
   1a7fe:	b108      	cbz	r0, 1a804 <bt_le_adv_start_legacy+0x260>
		bt_conn_unref(conn);
   1a800:	f012 f9dc 	bl	2cbbc <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1a804:	f1ba 0f00 	cmp.w	sl, #0
   1a808:	d1cf      	bne.n	1a7aa <bt_le_adv_start_legacy+0x206>
   1a80a:	e7c9      	b.n	1a7a0 <bt_le_adv_start_legacy+0x1fc>
		return -EAGAIN;
   1a80c:	f06f 040a 	mvn.w	r4, #10
   1a810:	e6e3      	b.n	1a5da <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1a812:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1a816:	e6e0      	b.n	1a5da <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   1a818:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1a81c:	e6dd      	b.n	1a5da <bt_le_adv_start_legacy+0x36>
   1a81e:	bf00      	nop
   1a820:	200005c4 	.word	0x200005c4
   1a824:	200004f0 	.word	0x200004f0
   1a828:	00031bf1 	.word	0x00031bf1
   1a82c:	00032844 	.word	0x00032844
   1a830:	0003027c 	.word	0x0003027c

0001a834 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1a834:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a836:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1a838:	9a06      	ldr	r2, [sp, #24]
{
   1a83a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1a83c:	e9cd 3200 	strd	r3, r2, [sp]
   1a840:	462b      	mov	r3, r5
   1a842:	460a      	mov	r2, r1
   1a844:	4601      	mov	r1, r0
   1a846:	4811      	ldr	r0, [pc, #68]	; (1a88c <bt_le_adv_start+0x58>)
   1a848:	f7ff feac 	bl	1a5a4 <bt_le_adv_start_legacy>
   1a84c:	4621      	mov	r1, r4
   1a84e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   1a850:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   1a852:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1a856:	429d      	cmp	r5, r3
   1a858:	d102      	bne.n	1a860 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1a85a:	4630      	mov	r0, r6
   1a85c:	b002      	add	sp, #8
   1a85e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   1a860:	880a      	ldrh	r2, [r1, #0]
   1a862:	4282      	cmp	r2, r0
   1a864:	d104      	bne.n	1a870 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1a866:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   1a868:	b112      	cbz	r2, 1a870 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1a86a:	7812      	ldrb	r2, [r2, #0]
   1a86c:	07d2      	lsls	r2, r2, #31
   1a86e:	d402      	bmi.n	1a876 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   1a870:	3301      	adds	r3, #1
   1a872:	3108      	adds	r1, #8
   1a874:	e7ef      	b.n	1a856 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1a876:	4906      	ldr	r1, [pc, #24]	; (1a890 <bt_le_adv_start+0x5c>)
   1a878:	4806      	ldr	r0, [pc, #24]	; (1a894 <bt_le_adv_start+0x60>)
   1a87a:	f014 ff91 	bl	2f7a0 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1a87e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1a882:	2300      	movs	r3, #0
   1a884:	4803      	ldr	r0, [pc, #12]	; (1a894 <bt_le_adv_start+0x60>)
   1a886:	f00b ff41 	bl	2670c <k_work_reschedule>
   1a88a:	e7e6      	b.n	1a85a <bt_le_adv_start+0x26>
   1a88c:	20000508 	.word	0x20000508
   1a890:	0001a911 	.word	0x0001a911
   1a894:	20000520 	.word	0x20000520

0001a898 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   1a898:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1a89a:	4819      	ldr	r0, [pc, #100]	; (1a900 <bt_le_adv_stop+0x68>)
   1a89c:	f012 f913 	bl	2cac6 <bt_le_lim_adv_cancel_timeout>
   1a8a0:	4818      	ldr	r0, [pc, #96]	; (1a904 <bt_le_adv_stop+0x6c>)
   1a8a2:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1a8a6:	f012 f83a 	bl	2c91e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a8aa:	4816      	ldr	r0, [pc, #88]	; (1a904 <bt_le_adv_stop+0x6c>)
   1a8ac:	f012 f831 	bl	2c912 <atomic_get>
   1a8b0:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1a8b2:	061a      	lsls	r2, r3, #24
   1a8b4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   1a8b8:	d521      	bpl.n	1a8fe <bt_le_adv_stop+0x66>
   1a8ba:	4812      	ldr	r0, [pc, #72]	; (1a904 <bt_le_adv_stop+0x6c>)
   1a8bc:	f012 f829 	bl	2c912 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a8c0:	0543      	lsls	r3, r0, #21
   1a8c2:	d512      	bpl.n	1a8ea <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
   1a8c4:	480e      	ldr	r0, [pc, #56]	; (1a900 <bt_le_adv_stop+0x68>)
   1a8c6:	f7ff fde1 	bl	1a48c <adv_is_directed>
   1a8ca:	4b0f      	ldr	r3, [pc, #60]	; (1a908 <bt_le_adv_stop+0x70>)
   1a8cc:	b998      	cbnz	r0, 1a8f6 <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1a8ce:	490f      	ldr	r1, [pc, #60]	; (1a90c <bt_le_adv_stop+0x74>)
   1a8d0:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1a8d2:	7e18      	ldrb	r0, [r3, #24]
   1a8d4:	f000 ff5c 	bl	1b790 <bt_conn_lookup_state_le>
   1a8d8:	4604      	mov	r4, r0
	if (conn) {
   1a8da:	b130      	cbz	r0, 1a8ea <bt_le_adv_stop+0x52>
		conn->err = status;
   1a8dc:	2100      	movs	r1, #0
   1a8de:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a8e0:	f000 fcf2 	bl	1b2c8 <bt_conn_set_state>
		bt_conn_unref(conn);
   1a8e4:	4620      	mov	r0, r4
   1a8e6:	f012 f969 	bl	2cbbc <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1a8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   1a8ee:	4804      	ldr	r0, [pc, #16]	; (1a900 <bt_le_adv_stop+0x68>)
   1a8f0:	2100      	movs	r1, #0
   1a8f2:	f012 b8c1 	b.w	2ca78 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1a8f6:	2205      	movs	r2, #5
   1a8f8:	f103 0121 	add.w	r1, r3, #33	; 0x21
   1a8fc:	e7e9      	b.n	1a8d2 <bt_le_adv_stop+0x3a>
}
   1a8fe:	bd10      	pop	{r4, pc}
   1a900:	20000508 	.word	0x20000508
   1a904:	20000518 	.word	0x20000518
   1a908:	200004f0 	.word	0x200004f0
   1a90c:	00031bea 	.word	0x00031bea

0001a910 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   1a910:	b598      	push	{r3, r4, r7, lr}
   1a912:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1a914:	f7ff ffc0 	bl	1a898 <bt_le_adv_stop>
#endif
	if (err) {
   1a918:	b178      	cbz	r0, 1a93a <adv_timeout+0x2a>
		LOG_WRN("Failed to stop advertising: %d", err);
   1a91a:	466c      	mov	r4, sp
   1a91c:	b088      	sub	sp, #32
   1a91e:	466a      	mov	r2, sp
   1a920:	4b07      	ldr	r3, [pc, #28]	; (1a940 <adv_timeout+0x30>)
   1a922:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a926:	2303      	movs	r3, #3
   1a928:	f842 3f10 	str.w	r3, [r2, #16]!
   1a92c:	4805      	ldr	r0, [pc, #20]	; (1a944 <adv_timeout+0x34>)
   1a92e:	2300      	movs	r3, #0
   1a930:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a934:	f7fa f946 	bl	14bc4 <z_impl_z_log_msg_static_create>
   1a938:	46a5      	mov	sp, r4
	}
}
   1a93a:	46bd      	mov	sp, r7
   1a93c:	bd98      	pop	{r3, r4, r7, pc}
   1a93e:	bf00      	nop
   1a940:	0003285f 	.word	0x0003285f
   1a944:	0003027c 	.word	0x0003027c

0001a948 <bt_le_adv_resume>:
{
   1a948:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a94a:	b083      	sub	sp, #12
   1a94c:	483d      	ldr	r0, [pc, #244]	; (1aa44 <bt_le_adv_resume+0xfc>)
   1a94e:	4c3d      	ldr	r4, [pc, #244]	; (1aa44 <bt_le_adv_resume+0xfc>)
   1a950:	af00      	add	r7, sp, #0
   1a952:	f011 ffde 	bl	2c912 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1a956:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   1a95a:	d054      	beq.n	1aa06 <bt_le_adv_resume+0xbe>
   1a95c:	4620      	mov	r0, r4
   1a95e:	f011 ffd8 	bl	2c912 <atomic_get>
   1a962:	0603      	lsls	r3, r0, #24
   1a964:	d44f      	bmi.n	1aa06 <bt_le_adv_resume+0xbe>
   1a966:	4620      	mov	r0, r4
   1a968:	f011 ffd3 	bl	2c912 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1a96c:	0546      	lsls	r6, r0, #21
   1a96e:	d54a      	bpl.n	1aa06 <bt_le_adv_resume+0xbe>
	err = le_adv_start_add_conn(adv, &conn);
   1a970:	1d39      	adds	r1, r7, #4
   1a972:	f1a4 0010 	sub.w	r0, r4, #16
   1a976:	f7ff fd95 	bl	1a4a4 <le_adv_start_add_conn>
	if (err) {
   1a97a:	2800      	cmp	r0, #0
   1a97c:	d143      	bne.n	1aa06 <bt_le_adv_resume+0xbe>
   1a97e:	4620      	mov	r0, r4
   1a980:	f011 ffc7 	bl	2c912 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1a984:	f410 5f00 	tst.w	r0, #8192	; 0x2000
		bt_id_set_adv_private_addr(adv);
   1a988:	f1a4 0010 	sub.w	r0, r4, #16
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1a98c:	d10b      	bne.n	1a9a6 <bt_le_adv_resume+0x5e>
		bt_id_set_adv_private_addr(adv);
   1a98e:	f011 ff96 	bl	2c8be <bt_id_set_adv_private_addr>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1a992:	482d      	ldr	r0, [pc, #180]	; (1aa48 <bt_le_adv_resume+0x100>)
   1a994:	2101      	movs	r1, #1
   1a996:	f012 f86f 	bl	2ca78 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1a99a:	687e      	ldr	r6, [r7, #4]
	if (err) {
   1a99c:	bbb0      	cbnz	r0, 1aa0c <bt_le_adv_resume+0xc4>
	bt_conn_unref(conn);
   1a99e:	4630      	mov	r0, r6
   1a9a0:	f012 f90c 	bl	2cbbc <bt_conn_unref>
	if (persist_paused) {
   1a9a4:	e02f      	b.n	1aa06 <bt_le_adv_resume+0xbe>
		bool dir_adv = adv_is_directed(adv);
   1a9a6:	f7ff fd71 	bl	1a48c <adv_is_directed>
   1a9aa:	4602      	mov	r2, r0
   1a9ac:	4620      	mov	r0, r4
   1a9ae:	f011 ffb0 	bl	2c912 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1a9b2:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a9b6:	4620      	mov	r0, r4
   1a9b8:	f011 ffab 	bl	2c912 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   1a9bc:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1a9c0:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   1a9c2:	ea4f 0141 	mov.w	r1, r1, lsl #1
   1a9c6:	481f      	ldr	r0, [pc, #124]	; (1aa44 <bt_le_adv_resume+0xfc>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
   1a9c8:	bf48      	it	mi
   1a9ca:	f041 0101 	orrmi.w	r1, r1, #1
   1a9ce:	f011 ffa0 	bl	2c912 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   1a9d2:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
   1a9d4:	bf48      	it	mi
   1a9d6:	f041 0104 	orrmi.w	r1, r1, #4
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
   1a9da:	481b      	ldr	r0, [pc, #108]	; (1aa48 <bt_le_adv_resume+0x100>)
   1a9dc:	1cfb      	adds	r3, r7, #3
   1a9de:	f7ff fc69 	bl	1a2b4 <bt_id_set_adv_own_addr>
		if (err) {
   1a9e2:	2800      	cmp	r0, #0
   1a9e4:	d0d5      	beq.n	1a992 <bt_le_adv_resume+0x4a>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
   1a9e6:	466c      	mov	r4, sp
   1a9e8:	b088      	sub	sp, #32
   1a9ea:	466a      	mov	r2, sp
   1a9ec:	4b17      	ldr	r3, [pc, #92]	; (1aa4c <bt_le_adv_resume+0x104>)
   1a9ee:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a9f2:	2303      	movs	r3, #3
   1a9f4:	f842 3f10 	str.w	r3, [r2, #16]!
   1a9f8:	4815      	ldr	r0, [pc, #84]	; (1aa50 <bt_le_adv_resume+0x108>)
   1a9fa:	2300      	movs	r3, #0
   1a9fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1aa00:	f7fa f8e0 	bl	14bc4 <z_impl_z_log_msg_static_create>
   1aa04:	46a5      	mov	sp, r4
}
   1aa06:	370c      	adds	r7, #12
   1aa08:	46bd      	mov	sp, r7
   1aa0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1aa0c:	2100      	movs	r1, #0
   1aa0e:	4630      	mov	r0, r6
   1aa10:	f000 fc5a 	bl	1b2c8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1aa14:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1aa18:	480a      	ldr	r0, [pc, #40]	; (1aa44 <bt_le_adv_resume+0xfc>)
   1aa1a:	f011 ff80 	bl	2c91e <atomic_and>
   1aa1e:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   1aa20:	4630      	mov	r0, r6
   1aa22:	f012 f8cb 	bl	2cbbc <bt_conn_unref>
	if (persist_paused) {
   1aa26:	046b      	lsls	r3, r5, #17
   1aa28:	d5ed      	bpl.n	1aa06 <bt_le_adv_resume+0xbe>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1aa2a:	f3bf 8f5b 	dmb	ish
   1aa2e:	e854 3f00 	ldrex	r3, [r4]
   1aa32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1aa36:	e844 3200 	strex	r2, r3, [r4]
   1aa3a:	2a00      	cmp	r2, #0
   1aa3c:	d1f7      	bne.n	1aa2e <bt_le_adv_resume+0xe6>
   1aa3e:	f3bf 8f5b 	dmb	ish
   1aa42:	e7e0      	b.n	1aa06 <bt_le_adv_resume+0xbe>
   1aa44:	20000518 	.word	0x20000518
   1aa48:	20000508 	.word	0x20000508
   1aa4c:	0003287e 	.word	0x0003287e
   1aa50:	0003027c 	.word	0x0003027c

0001aa54 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   1aa54:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1aa56:	4904      	ldr	r1, [pc, #16]	; (1aa68 <bt_pub_key_is_debug+0x14>)
   1aa58:	2240      	movs	r2, #64	; 0x40
   1aa5a:	f011 fc19 	bl	2c290 <memcmp>
}
   1aa5e:	fab0 f080 	clz	r0, r0
   1aa62:	0940      	lsrs	r0, r0, #5
   1aa64:	bd08      	pop	{r3, pc}
   1aa66:	bf00      	nop
   1aa68:	00032942 	.word	0x00032942

0001aa6c <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   1aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1aa6e:	4b43      	ldr	r3, [pc, #268]	; (1ab7c <bt_pub_key_gen+0x110>)
   1aa70:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   1aa74:	f003 0306 	and.w	r3, r3, #6
   1aa78:	2b06      	cmp	r3, #6
{
   1aa7a:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1aa7c:	d00f      	beq.n	1aa9e <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   1aa7e:	4b40      	ldr	r3, [pc, #256]	; (1ab80 <bt_pub_key_gen+0x114>)
   1aa80:	9305      	str	r3, [sp, #20]
   1aa82:	2302      	movs	r3, #2
   1aa84:	9304      	str	r3, [sp, #16]
   1aa86:	483f      	ldr	r0, [pc, #252]	; (1ab84 <bt_pub_key_gen+0x118>)
   1aa88:	2300      	movs	r3, #0
   1aa8a:	aa04      	add	r2, sp, #16
   1aa8c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -ENOTSUP;
   1aa90:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1aa94:	f7fa f896 	bl	14bc4 <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   1aa98:	4628      	mov	r0, r5
   1aa9a:	b007      	add	sp, #28
   1aa9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   1aa9e:	2800      	cmp	r0, #0
   1aaa0:	d069      	beq.n	1ab76 <bt_pub_key_gen+0x10a>
	return list->head;
   1aaa2:	4e39      	ldr	r6, [pc, #228]	; (1ab88 <bt_pub_key_gen+0x11c>)
   1aaa4:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1aaa6:	b1a2      	cbz	r2, 1aad2 <bt_pub_key_gen+0x66>
   1aaa8:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   1aaaa:	4283      	cmp	r3, r0
   1aaac:	d10d      	bne.n	1aaca <bt_pub_key_gen+0x5e>
			LOG_WRN("Callback already registered");
   1aaae:	4b37      	ldr	r3, [pc, #220]	; (1ab8c <bt_pub_key_gen+0x120>)
   1aab0:	9305      	str	r3, [sp, #20]
   1aab2:	2302      	movs	r3, #2
   1aab4:	9304      	str	r3, [sp, #16]
   1aab6:	4833      	ldr	r0, [pc, #204]	; (1ab84 <bt_pub_key_gen+0x118>)
   1aab8:	2300      	movs	r3, #0
   1aaba:	aa04      	add	r2, sp, #16
   1aabc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1aac0:	f7fa f880 	bl	14bc4 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   1aac4:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1aac8:	e7e6      	b.n	1aa98 <bt_pub_key_gen+0x2c>
	return node->next;
   1aaca:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1aacc:	b10b      	cbz	r3, 1aad2 <bt_pub_key_gen+0x66>
   1aace:	3b04      	subs	r3, #4
   1aad0:	e7eb      	b.n	1aaaa <bt_pub_key_gen+0x3e>
	parent->next = child;
   1aad2:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   1aad4:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   1aad6:	1d03      	adds	r3, r0, #4
	list->head = node;
   1aad8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1aada:	b902      	cbnz	r2, 1aade <bt_pub_key_gen+0x72>
	list->tail = node;
   1aadc:	6073      	str	r3, [r6, #4]
   1aade:	4c2c      	ldr	r4, [pc, #176]	; (1ab90 <bt_pub_key_gen+0x124>)
   1aae0:	f3bf 8f5b 	dmb	ish
   1aae4:	e854 7f00 	ldrex	r7, [r4]
   1aae8:	f047 0320 	orr.w	r3, r7, #32
   1aaec:	e844 3200 	strex	r2, r3, [r4]
   1aaf0:	2a00      	cmp	r2, #0
   1aaf2:	d1f7      	bne.n	1aae4 <bt_pub_key_gen+0x78>
   1aaf4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1aaf8:	f017 0720 	ands.w	r7, r7, #32
   1aafc:	d001      	beq.n	1ab02 <bt_pub_key_gen+0x96>
	return 0;
   1aafe:	2500      	movs	r5, #0
   1ab00:	e7ca      	b.n	1aa98 <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ab02:	f3bf 8f5b 	dmb	ish
   1ab06:	e854 3f00 	ldrex	r3, [r4]
   1ab0a:	f023 0310 	bic.w	r3, r3, #16
   1ab0e:	e844 3200 	strex	r2, r3, [r4]
   1ab12:	2a00      	cmp	r2, #0
   1ab14:	d1f7      	bne.n	1ab06 <bt_pub_key_gen+0x9a>
   1ab16:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1ab1a:	463a      	mov	r2, r7
   1ab1c:	4639      	mov	r1, r7
   1ab1e:	f242 0025 	movw	r0, #8229	; 0x2025
   1ab22:	f7fd ff37 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   1ab26:	4605      	mov	r5, r0
   1ab28:	2800      	cmp	r0, #0
   1ab2a:	d0e8      	beq.n	1aafe <bt_pub_key_gen+0x92>
		LOG_ERR("Sending LE P256 Public Key command failed");
   1ab2c:	4b19      	ldr	r3, [pc, #100]	; (1ab94 <bt_pub_key_gen+0x128>)
   1ab2e:	9305      	str	r3, [sp, #20]
   1ab30:	2302      	movs	r3, #2
   1ab32:	9304      	str	r3, [sp, #16]
   1ab34:	4813      	ldr	r0, [pc, #76]	; (1ab84 <bt_pub_key_gen+0x118>)
   1ab36:	463b      	mov	r3, r7
   1ab38:	aa04      	add	r2, sp, #16
   1ab3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ab3e:	f7fa f841 	bl	14bc4 <z_impl_z_log_msg_static_create>
   1ab42:	f3bf 8f5b 	dmb	ish
   1ab46:	e854 3f00 	ldrex	r3, [r4]
   1ab4a:	f023 0320 	bic.w	r3, r3, #32
   1ab4e:	e844 3200 	strex	r2, r3, [r4]
   1ab52:	2a00      	cmp	r2, #0
   1ab54:	d1f7      	bne.n	1ab46 <bt_pub_key_gen+0xda>
   1ab56:	f3bf 8f5b 	dmb	ish
	return list->head;
   1ab5a:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1ab5c:	b13c      	cbz	r4, 1ab6e <bt_pub_key_gen+0x102>
			if (cb->func) {
   1ab5e:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1ab62:	3c04      	subs	r4, #4
			if (cb->func) {
   1ab64:	b10b      	cbz	r3, 1ab6a <bt_pub_key_gen+0xfe>
				cb->func(NULL);
   1ab66:	2000      	movs	r0, #0
   1ab68:	4798      	blx	r3
	return node->next;
   1ab6a:	6864      	ldr	r4, [r4, #4]
   1ab6c:	e7f6      	b.n	1ab5c <bt_pub_key_gen+0xf0>
	list->head = NULL;
   1ab6e:	2300      	movs	r3, #0
	list->tail = NULL;
   1ab70:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   1ab74:	e790      	b.n	1aa98 <bt_pub_key_gen+0x2c>
		return -EINVAL;
   1ab76:	f06f 0515 	mvn.w	r5, #21
   1ab7a:	e78d      	b.n	1aa98 <bt_pub_key_gen+0x2c>
   1ab7c:	200004f0 	.word	0x200004f0
   1ab80:	000328bb 	.word	0x000328bb
   1ab84:	000302a4 	.word	0x000302a4
   1ab88:	20003ad8 	.word	0x20003ad8
   1ab8c:	000328da 	.word	0x000328da
   1ab90:	200005c4 	.word	0x200005c4
   1ab94:	000328f6 	.word	0x000328f6

0001ab98 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ab98:	4b05      	ldr	r3, [pc, #20]	; (1abb0 <bt_pub_key_get+0x18>)
   1ab9a:	f3bf 8f5b 	dmb	ish
   1ab9e:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   1aba0:	4804      	ldr	r0, [pc, #16]	; (1abb4 <bt_pub_key_get+0x1c>)
   1aba2:	f3bf 8f5b 	dmb	ish
	return NULL;
   1aba6:	f013 0f10 	tst.w	r3, #16
}
   1abaa:	bf08      	it	eq
   1abac:	2000      	moveq	r0, #0
   1abae:	4770      	bx	lr
   1abb0:	200005c4 	.word	0x200005c4
   1abb4:	2000569b 	.word	0x2000569b

0001abb8 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   1abb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	if (dh_key_cb == cb) {
   1abbc:	4d28      	ldr	r5, [pc, #160]	; (1ac60 <bt_dh_key_gen+0xa8>)
   1abbe:	682b      	ldr	r3, [r5, #0]
   1abc0:	428b      	cmp	r3, r1
{
   1abc2:	af00      	add	r7, sp, #0
   1abc4:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   1abc6:	d045      	beq.n	1ac54 <bt_dh_key_gen+0x9c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1abc8:	b12b      	cbz	r3, 1abd6 <bt_dh_key_gen+0x1e>
		return -EBUSY;
   1abca:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   1abce:	4620      	mov	r0, r4
   1abd0:	46bd      	mov	sp, r7
   1abd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1abd6:	4b23      	ldr	r3, [pc, #140]	; (1ac64 <bt_dh_key_gen+0xac>)
   1abd8:	f3bf 8f5b 	dmb	ish
   1abdc:	681a      	ldr	r2, [r3, #0]
   1abde:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1abe2:	f3c2 1840 	ubfx	r8, r2, #5, #1
   1abe6:	0692      	lsls	r2, r2, #26
   1abe8:	d4ef      	bmi.n	1abca <bt_dh_key_gen+0x12>
   1abea:	f3bf 8f5b 	dmb	ish
   1abee:	681b      	ldr	r3, [r3, #0]
   1abf0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1abf4:	06db      	lsls	r3, r3, #27
   1abf6:	d530      	bpl.n	1ac5a <bt_dh_key_gen+0xa2>
	dh_key_cb = cb;
   1abf8:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   1abfa:	f242 0026 	movw	r0, #8230	; 0x2026
   1abfe:	2140      	movs	r1, #64	; 0x40
   1ac00:	f7fd fe8e 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   1ac04:	4604      	mov	r4, r0
   1ac06:	b310      	cbz	r0, 1ac4e <bt_dh_key_gen+0x96>
	return net_buf_simple_add(&buf->b, len);
   1ac08:	2140      	movs	r1, #64	; 0x40
   1ac0a:	300c      	adds	r0, #12
   1ac0c:	f013 fd79 	bl	2e702 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   1ac10:	2240      	movs	r2, #64	; 0x40
   1ac12:	4631      	mov	r1, r6
   1ac14:	f011 fb63 	bl	2c2de <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   1ac18:	4621      	mov	r1, r4
   1ac1a:	4642      	mov	r2, r8
   1ac1c:	f242 0026 	movw	r0, #8230	; 0x2026
   1ac20:	f7fd feb8 	bl	18994 <bt_hci_cmd_send_sync>
	if (err) {
   1ac24:	4604      	mov	r4, r0
   1ac26:	2800      	cmp	r0, #0
   1ac28:	d0d1      	beq.n	1abce <bt_dh_key_gen+0x16>
		dh_key_cb = NULL;
   1ac2a:	2300      	movs	r3, #0
   1ac2c:	602b      	str	r3, [r5, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1ac2e:	466d      	mov	r5, sp
   1ac30:	b088      	sub	sp, #32
   1ac32:	466a      	mov	r2, sp
   1ac34:	490c      	ldr	r1, [pc, #48]	; (1ac68 <bt_dh_key_gen+0xb0>)
   1ac36:	e9c2 1405 	strd	r1, r4, [r2, #20]
   1ac3a:	2103      	movs	r1, #3
   1ac3c:	f842 1f10 	str.w	r1, [r2, #16]!
   1ac40:	480a      	ldr	r0, [pc, #40]	; (1ac6c <bt_dh_key_gen+0xb4>)
   1ac42:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ac46:	f7f9 ffbd 	bl	14bc4 <z_impl_z_log_msg_static_create>
   1ac4a:	46ad      	mov	sp, r5
		return err;
   1ac4c:	e7bf      	b.n	1abce <bt_dh_key_gen+0x16>
		return -ENOBUFS;
   1ac4e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1ac52:	e7ea      	b.n	1ac2a <bt_dh_key_gen+0x72>
		return -EALREADY;
   1ac54:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1ac58:	e7b9      	b.n	1abce <bt_dh_key_gen+0x16>
		return -EADDRNOTAVAIL;
   1ac5a:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1ac5e:	e7b6      	b.n	1abce <bt_dh_key_gen+0x16>
   1ac60:	20003ad4 	.word	0x20003ad4
   1ac64:	200005c4 	.word	0x200005c4
   1ac68:	00032920 	.word	0x00032920
   1ac6c:	000302a4 	.word	0x000302a4

0001ac70 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   1ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ac72:	4c1b      	ldr	r4, [pc, #108]	; (1ace0 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   1ac74:	68c6      	ldr	r6, [r0, #12]
   1ac76:	f3bf 8f5b 	dmb	ish
   1ac7a:	e854 3f00 	ldrex	r3, [r4]
   1ac7e:	f023 0320 	bic.w	r3, r3, #32
   1ac82:	e844 3200 	strex	r2, r3, [r4]
   1ac86:	2a00      	cmp	r2, #0
   1ac88:	d1f7      	bne.n	1ac7a <bt_hci_evt_le_pkey_complete+0xa>
   1ac8a:	f3bf 8f5b 	dmb	ish

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1ac8e:	7833      	ldrb	r3, [r6, #0]
   1ac90:	b983      	cbnz	r3, 1acb4 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   1ac92:	4814      	ldr	r0, [pc, #80]	; (1ace4 <bt_hci_evt_le_pkey_complete+0x74>)
   1ac94:	2240      	movs	r2, #64	; 0x40
   1ac96:	1c71      	adds	r1, r6, #1
   1ac98:	f011 fb21 	bl	2c2de <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ac9c:	f3bf 8f5b 	dmb	ish
   1aca0:	e854 3f00 	ldrex	r3, [r4]
   1aca4:	f043 0310 	orr.w	r3, r3, #16
   1aca8:	e844 3200 	strex	r2, r3, [r4]
   1acac:	2a00      	cmp	r2, #0
   1acae:	d1f7      	bne.n	1aca0 <bt_hci_evt_le_pkey_complete+0x30>
   1acb0:	f3bf 8f5b 	dmb	ish
	return list->head;
   1acb4:	4d0c      	ldr	r5, [pc, #48]	; (1ace8 <bt_hci_evt_le_pkey_complete+0x78>)
   1acb6:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1acb8:	b16c      	cbz	r4, 1acd6 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   1acba:	4f0a      	ldr	r7, [pc, #40]	; (1ace4 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1acbc:	3c04      	subs	r4, #4
		if (cb->func) {
   1acbe:	6823      	ldr	r3, [r4, #0]
   1acc0:	b12b      	cbz	r3, 1acce <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   1acc2:	7832      	ldrb	r2, [r6, #0]
   1acc4:	2a00      	cmp	r2, #0
   1acc6:	bf0c      	ite	eq
   1acc8:	4638      	moveq	r0, r7
   1acca:	2000      	movne	r0, #0
   1accc:	4798      	blx	r3
	return node->next;
   1acce:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1acd0:	b10c      	cbz	r4, 1acd6 <bt_hci_evt_le_pkey_complete+0x66>
   1acd2:	3c04      	subs	r4, #4
   1acd4:	e7f3      	b.n	1acbe <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   1acd6:	2300      	movs	r3, #0
	list->tail = NULL;
   1acd8:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   1acdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1acde:	bf00      	nop
   1ace0:	200005c4 	.word	0x200005c4
   1ace4:	2000569b 	.word	0x2000569b
   1ace8:	20003ad8 	.word	0x20003ad8

0001acec <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1acec:	4905      	ldr	r1, [pc, #20]	; (1ad04 <bt_hci_evt_le_dhkey_complete+0x18>)
   1acee:	680b      	ldr	r3, [r1, #0]
   1acf0:	b133      	cbz	r3, 1ad00 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   1acf2:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   1acf4:	2000      	movs	r0, #0
   1acf6:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   1acf8:	7811      	ldrb	r1, [r2, #0]
   1acfa:	b901      	cbnz	r1, 1acfe <bt_hci_evt_le_dhkey_complete+0x12>
   1acfc:	1c50      	adds	r0, r2, #1
   1acfe:	4718      	bx	r3
	}
}
   1ad00:	4770      	bx	lr
   1ad02:	bf00      	nop
   1ad04:	20003ad4 	.word	0x20003ad4

0001ad08 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1ad08:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1ad0a:	4b0b      	ldr	r3, [pc, #44]	; (1ad38 <notify_connected+0x30>)
   1ad0c:	681d      	ldr	r5, [r3, #0]
{
   1ad0e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1ad10:	b925      	cbnz	r5, 1ad1c <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1ad12:	4d0a      	ldr	r5, [pc, #40]	; (1ad3c <notify_connected+0x34>)
   1ad14:	4e0a      	ldr	r6, [pc, #40]	; (1ad40 <notify_connected+0x38>)
   1ad16:	42b5      	cmp	r5, r6
   1ad18:	d307      	bcc.n	1ad2a <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   1ad1a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   1ad1c:	682b      	ldr	r3, [r5, #0]
   1ad1e:	b113      	cbz	r3, 1ad26 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   1ad20:	7b21      	ldrb	r1, [r4, #12]
   1ad22:	4620      	mov	r0, r4
   1ad24:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1ad26:	69ad      	ldr	r5, [r5, #24]
   1ad28:	e7f2      	b.n	1ad10 <notify_connected+0x8>
		if (cb->connected) {
   1ad2a:	682b      	ldr	r3, [r5, #0]
   1ad2c:	b113      	cbz	r3, 1ad34 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   1ad2e:	7b21      	ldrb	r1, [r4, #12]
   1ad30:	4620      	mov	r0, r4
   1ad32:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1ad34:	351c      	adds	r5, #28
   1ad36:	e7ee      	b.n	1ad16 <notify_connected+0xe>
   1ad38:	20003b10 	.word	0x20003b10
   1ad3c:	00030244 	.word	0x00030244
   1ad40:	00030244 	.word	0x00030244

0001ad44 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   1ad44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Unable to allocate buffer within timeout");
   1ad46:	4b07      	ldr	r3, [pc, #28]	; (1ad64 <bt_conn_create_pdu_timeout.part.0+0x20>)
   1ad48:	9305      	str	r3, [sp, #20]
   1ad4a:	4807      	ldr	r0, [pc, #28]	; (1ad68 <bt_conn_create_pdu_timeout.part.0+0x24>)
   1ad4c:	2302      	movs	r3, #2
   1ad4e:	aa04      	add	r2, sp, #16
   1ad50:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ad54:	9304      	str	r3, [sp, #16]
   1ad56:	f011 fee3 	bl	2cb20 <z_log_msg_static_create.constprop.0>
}
   1ad5a:	2000      	movs	r0, #0
   1ad5c:	b007      	add	sp, #28
   1ad5e:	f85d fb04 	ldr.w	pc, [sp], #4
   1ad62:	bf00      	nop
   1ad64:	00032989 	.word	0x00032989
   1ad68:	0003028c 	.word	0x0003028c

0001ad6c <tx_notify>:
{
   1ad6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   1ad70:	4f15      	ldr	r7, [pc, #84]	; (1adc8 <tx_notify+0x5c>)
{
   1ad72:	4604      	mov	r4, r0
	tx->cb = NULL;
   1ad74:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   1ad78:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ad7c:	f3ef 8311 	mrs	r3, BASEPRI
   1ad80:	f382 8812 	msr	BASEPRI_MAX, r2
   1ad84:	f3bf 8f6f 	isb	sy
	return list->head;
   1ad88:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   1ad8a:	b929      	cbnz	r1, 1ad98 <tx_notify+0x2c>
	__asm__ volatile(
   1ad8c:	f383 8811 	msr	BASEPRI, r3
   1ad90:	f3bf 8f6f 	isb	sy
}
   1ad94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ad98:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   1ad9a:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   1ad9c:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ad9e:	4281      	cmp	r1, r0
	list->tail = node;
   1ada0:	bf08      	it	eq
   1ada2:	6262      	streq	r2, [r4, #36]	; 0x24
   1ada4:	f383 8811 	msr	BASEPRI, r3
   1ada8:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1adac:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   1adb0:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   1adb4:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1adb8:	4638      	mov	r0, r7
   1adba:	f014 fc11 	bl	2f5e0 <k_queue_append>
		cb(conn, user_data, 0);
   1adbe:	2200      	movs	r2, #0
   1adc0:	4631      	mov	r1, r6
   1adc2:	4620      	mov	r0, r4
   1adc4:	47a8      	blx	r5
	while (1) {
   1adc6:	e7d7      	b.n	1ad78 <tx_notify+0xc>
   1adc8:	20000d1c 	.word	0x20000d1c

0001adcc <conn_tx_destroy>:
{
   1adcc:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   1adce:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   1add2:	2200      	movs	r2, #0
	tx->user_data = NULL;
   1add4:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   1add8:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   1adda:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   1addc:	4805      	ldr	r0, [pc, #20]	; (1adf4 <conn_tx_destroy+0x28>)
   1adde:	f014 fbff 	bl	2f5e0 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   1ade2:	4631      	mov	r1, r6
   1ade4:	4620      	mov	r0, r4
   1ade6:	462b      	mov	r3, r5
   1ade8:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   1adec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   1adf0:	4718      	bx	r3
   1adf2:	bf00      	nop
   1adf4:	20000d1c 	.word	0x20000d1c

0001adf8 <send_frag>:
{
   1adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
   1adfc:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1af80 <send_frag+0x188>
{
   1ae00:	b083      	sub	sp, #12
   1ae02:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
   1ae04:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   1ae08:	2b00      	cmp	r3, #0
{
   1ae0a:	af00      	add	r7, sp, #0
   1ae0c:	4604      	mov	r4, r0
   1ae0e:	460e      	mov	r6, r1
	return NULL;
   1ae10:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
   1ae14:	4615      	mov	r5, r2
	return NULL;
   1ae16:	bf08      	it	eq
   1ae18:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
   1ae1a:	2200      	movs	r2, #0
   1ae1c:	2300      	movs	r3, #0
   1ae1e:	f00b fa61 	bl	262e4 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   1ae22:	2800      	cmp	r0, #0
   1ae24:	f040 80a9 	bne.w	1af7a <send_frag+0x182>
	if (frag) {
   1ae28:	2d00      	cmp	r5, #0
   1ae2a:	f000 8085 	beq.w	1af38 <send_frag+0x140>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1ae2e:	f105 0b0c 	add.w	fp, r5, #12
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1ae32:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   1ae36:	607b      	str	r3, [r7, #4]
   1ae38:	4658      	mov	r0, fp
   1ae3a:	f013 fc9d 	bl	2e778 <net_buf_simple_tailroom>
   1ae3e:	687b      	ldr	r3, [r7, #4]
   1ae40:	4298      	cmp	r0, r3
   1ae42:	d974      	bls.n	1af2e <send_frag+0x136>
	return bt_dev.le.acl_mtu;
   1ae44:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ae48:	f856 1f0c 	ldr.w	r1, [r6, #12]!
   1ae4c:	607a      	str	r2, [r7, #4]
   1ae4e:	4658      	mov	r0, fp
   1ae50:	f013 fc5d 	bl	2e70e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1ae54:	687a      	ldr	r2, [r7, #4]
   1ae56:	4630      	mov	r0, r6
   1ae58:	4611      	mov	r1, r2
   1ae5a:	f013 fc71 	bl	2e740 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   1ae5e:	7b63      	ldrb	r3, [r4, #13]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1ae60:	69ae      	ldr	r6, [r5, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   1ae62:	2b07      	cmp	r3, #7
   1ae64:	f040 8086 	bne.w	1af74 <send_frag+0x17c>
	__asm__ volatile(
   1ae68:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ae6c:	f3ef 8211 	mrs	r2, BASEPRI
   1ae70:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae74:	f3bf 8f6f 	isb	sy
	if (tx) {
   1ae78:	2e00      	cmp	r6, #0
   1ae7a:	d068      	beq.n	1af4e <send_frag+0x156>
	parent->next = child;
   1ae7c:	2300      	movs	r3, #0
   1ae7e:	6033      	str	r3, [r6, #0]
	return list->tail;
   1ae80:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   1ae82:	2b00      	cmp	r3, #0
   1ae84:	d160      	bne.n	1af48 <send_frag+0x150>
	list->head = node;
   1ae86:	e9c4 6605 	strd	r6, r6, [r4, #20]
	__asm__ volatile(
   1ae8a:	f382 8811 	msr	BASEPRI, r2
   1ae8e:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1ae92:	2104      	movs	r1, #4
   1ae94:	f105 000c 	add.w	r0, r5, #12
   1ae98:	f013 fc4a 	bl	2e730 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1ae9c:	8823      	ldrh	r3, [r4, #0]
   1ae9e:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   1aea2:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
   1aea6:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1aeaa:	8a2b      	ldrh	r3, [r5, #16]
   1aeac:	3b04      	subs	r3, #4
   1aeae:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1aeb0:	2302      	movs	r3, #2
   1aeb2:	762b      	strb	r3, [r5, #24]
	return bt_send(buf);
   1aeb4:	4628      	mov	r0, r5
   1aeb6:	f7fe f8e7 	bl	19088 <bt_send>
	if (err) {
   1aeba:	4680      	mov	r8, r0
   1aebc:	b390      	cbz	r0, 1af24 <send_frag+0x12c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1aebe:	46eb      	mov	fp, sp
   1aec0:	b088      	sub	sp, #32
   1aec2:	466a      	mov	r2, sp
   1aec4:	4b2f      	ldr	r3, [pc, #188]	; (1af84 <send_frag+0x18c>)
   1aec6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1aeca:	2303      	movs	r3, #3
   1aecc:	f842 3f10 	str.w	r3, [r2, #16]!
   1aed0:	482d      	ldr	r0, [pc, #180]	; (1af88 <send_frag+0x190>)
   1aed2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1aed6:	f011 fe23 	bl	2cb20 <z_log_msg_static_create.constprop.0>
   1aeda:	46dd      	mov	sp, fp
	__asm__ volatile(
   1aedc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aee0:	f3ef 8811 	mrs	r8, BASEPRI
   1aee4:	f383 8812 	msr	BASEPRI_MAX, r3
   1aee8:	f3bf 8f6f 	isb	sy
		if (tx) {
   1aeec:	2e00      	cmp	r6, #0
   1aeee:	d03b      	beq.n	1af68 <send_frag+0x170>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1aef0:	4631      	mov	r1, r6
   1aef2:	f104 0014 	add.w	r0, r4, #20
   1aef6:	f011 fde9 	bl	2cacc <sys_slist_find_and_remove>
	__asm__ volatile(
   1aefa:	f388 8811 	msr	BASEPRI, r8
   1aefe:	f3bf 8f6f 	isb	sy
		err = -EIO;
   1af02:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
   1af06:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   1af0a:	4820      	ldr	r0, [pc, #128]	; (1af8c <send_frag+0x194>)
   1af0c:	2b00      	cmp	r3, #0
   1af0e:	bf08      	it	eq
   1af10:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   1af12:	f00b f9c1 	bl	26298 <z_impl_k_sem_give>
	if (tx) {
   1af16:	b12e      	cbz	r6, 1af24 <send_frag+0x12c>
		tx_data(buf)->tx = NULL;
   1af18:	2300      	movs	r3, #0
   1af1a:	61ab      	str	r3, [r5, #24]
		conn_tx_destroy(conn, tx);
   1af1c:	4631      	mov	r1, r6
   1af1e:	4620      	mov	r0, r4
   1af20:	f7ff ff54 	bl	1adcc <conn_tx_destroy>
}
   1af24:	4640      	mov	r0, r8
   1af26:	370c      	adds	r7, #12
   1af28:	46bd      	mov	sp, r7
   1af2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   1af2e:	4658      	mov	r0, fp
   1af30:	f013 fc22 	bl	2e778 <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1af34:	b282      	uxth	r2, r0
   1af36:	e787      	b.n	1ae48 <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1af38:	2200      	movs	r2, #0
   1af3a:	2300      	movs	r3, #0
   1af3c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1af40:	f013 fb84 	bl	2e64c <net_buf_get>
   1af44:	4605      	mov	r5, r0
		frag = buf;
   1af46:	e78a      	b.n	1ae5e <send_frag+0x66>
	parent->next = child;
   1af48:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1af4a:	61a6      	str	r6, [r4, #24]
}
   1af4c:	e79d      	b.n	1ae8a <send_frag+0x92>
	return list->tail;
   1af4e:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1af50:	b133      	cbz	r3, 1af60 <send_frag+0x168>
			pending_no_cb = &tail_tx->pending_no_cb;
   1af52:	f103 0a0c 	add.w	sl, r3, #12
   1af56:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1af58:	3301      	adds	r3, #1
   1af5a:	f8ca 3000 	str.w	r3, [sl]
   1af5e:	e794      	b.n	1ae8a <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
   1af60:	69e3      	ldr	r3, [r4, #28]
   1af62:	f104 0a1c 	add.w	sl, r4, #28
   1af66:	e7f7      	b.n	1af58 <send_frag+0x160>
			(*pending_no_cb)--;
   1af68:	f8da 3000 	ldr.w	r3, [sl]
   1af6c:	3b01      	subs	r3, #1
   1af6e:	f8ca 3000 	str.w	r3, [sl]
   1af72:	e7c2      	b.n	1aefa <send_frag+0x102>
		err = -ENOTCONN;
   1af74:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   1af78:	e7c5      	b.n	1af06 <send_frag+0x10e>
		return -ENOBUFS;
   1af7a:	f06f 0868 	mvn.w	r8, #104	; 0x68
   1af7e:	e7d1      	b.n	1af24 <send_frag+0x12c>
   1af80:	200004f0 	.word	0x200004f0
   1af84:	000321c0 	.word	0x000321c0
   1af88:	0003028c 	.word	0x0003028c
   1af8c:	200005f8 	.word	0x200005f8

0001af90 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   1af90:	4804      	ldr	r0, [pc, #16]	; (1afa4 <bt_conn_get_pkts+0x14>)
   1af92:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   1af96:	2b00      	cmp	r3, #0
   1af98:	f500 7084 	add.w	r0, r0, #264	; 0x108
}
   1af9c:	bf08      	it	eq
   1af9e:	2000      	moveq	r0, #0
   1afa0:	4770      	bx	lr
   1afa2:	bf00      	nop
   1afa4:	200004f0 	.word	0x200004f0

0001afa8 <bt_conn_new>:
{
   1afa8:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1afaa:	2200      	movs	r2, #0
   1afac:	4604      	mov	r4, r0
   1afae:	428a      	cmp	r2, r1
   1afb0:	d102      	bne.n	1afb8 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1afb2:	2400      	movs	r4, #0
}
   1afb4:	4620      	mov	r0, r4
   1afb6:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1afb8:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   1afbc:	2001      	movs	r0, #1
   1afbe:	f3bf 8f5b 	dmb	ish
   1afc2:	e853 5f00 	ldrex	r5, [r3]
   1afc6:	2d00      	cmp	r5, #0
   1afc8:	d104      	bne.n	1afd4 <bt_conn_new+0x2c>
   1afca:	e843 0c00 	strex	ip, r0, [r3]
   1afce:	f1bc 0f00 	cmp.w	ip, #0
   1afd2:	d1f6      	bne.n	1afc2 <bt_conn_new+0x1a>
   1afd4:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1afd8:	d002      	beq.n	1afe0 <bt_conn_new+0x38>
   1afda:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1afdc:	4402      	add	r2, r0
   1afde:	e7e6      	b.n	1afae <bt_conn_new+0x6>
	if (!conn) {
   1afe0:	2c00      	cmp	r4, #0
   1afe2:	d0e6      	beq.n	1afb2 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1afe4:	22bc      	movs	r2, #188	; 0xbc
   1afe6:	2100      	movs	r1, #0
   1afe8:	4620      	mov	r0, r4
   1afea:	f011 f983 	bl	2c2f4 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1afee:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1aff2:	4904      	ldr	r1, [pc, #16]	; (1b004 <bt_conn_new+0x5c>)
   1aff4:	f014 fbd4 	bl	2f7a0 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1aff8:	4903      	ldr	r1, [pc, #12]	; (1b008 <bt_conn_new+0x60>)
   1affa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1affe:	f014 fb8b 	bl	2f718 <k_work_init>
	return conn;
   1b002:	e7d7      	b.n	1afb4 <bt_conn_new+0xc>
   1b004:	0001b841 	.word	0x0001b841
   1b008:	0002cb27 	.word	0x0002cb27

0001b00c <bt_conn_recv>:
{
   1b00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b010:	b086      	sub	sp, #24
   1b012:	4616      	mov	r6, r2
   1b014:	af00      	add	r7, sp, #0
   1b016:	4604      	mov	r4, r0
   1b018:	460d      	mov	r5, r1
	tx_notify(conn);
   1b01a:	f7ff fea7 	bl	1ad6c <tx_notify>
	switch (flags) {
   1b01e:	2e01      	cmp	r6, #1
   1b020:	d030      	beq.n	1b084 <bt_conn_recv+0x78>
   1b022:	2e02      	cmp	r6, #2
   1b024:	d16a      	bne.n	1b0fc <bt_conn_recv+0xf0>
		if (conn->rx) {
   1b026:	6923      	ldr	r3, [r4, #16]
   1b028:	b163      	cbz	r3, 1b044 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   1b02a:	4b40      	ldr	r3, [pc, #256]	; (1b12c <bt_conn_recv+0x120>)
   1b02c:	4840      	ldr	r0, [pc, #256]	; (1b130 <bt_conn_recv+0x124>)
   1b02e:	e9c7 6304 	strd	r6, r3, [r7, #16]
   1b032:	f107 0210 	add.w	r2, r7, #16
   1b036:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b03a:	f011 fd71 	bl	2cb20 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   1b03e:	4620      	mov	r0, r4
   1b040:	f011 fd74 	bl	2cb2c <bt_conn_reset_rx_state>
		conn->rx = buf;
   1b044:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1b046:	6921      	ldr	r1, [r4, #16]
   1b048:	8a08      	ldrh	r0, [r1, #16]
   1b04a:	2801      	cmp	r0, #1
   1b04c:	d930      	bls.n	1b0b0 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1b04e:	68cb      	ldr	r3, [r1, #12]
   1b050:	881b      	ldrh	r3, [r3, #0]
   1b052:	3304      	adds	r3, #4
   1b054:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1b056:	4298      	cmp	r0, r3
   1b058:	d32a      	bcc.n	1b0b0 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   1b05a:	d95f      	bls.n	1b11c <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1b05c:	466d      	mov	r5, sp
   1b05e:	b088      	sub	sp, #32
   1b060:	466a      	mov	r2, sp
   1b062:	4934      	ldr	r1, [pc, #208]	; (1b134 <bt_conn_recv+0x128>)
   1b064:	61d3      	str	r3, [r2, #28]
   1b066:	2304      	movs	r3, #4
   1b068:	e9c2 1005 	strd	r1, r0, [r2, #20]
   1b06c:	f842 3f10 	str.w	r3, [r2, #16]!
   1b070:	482f      	ldr	r0, [pc, #188]	; (1b130 <bt_conn_recv+0x124>)
   1b072:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b076:	f011 fd53 	bl	2cb20 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1b07a:	4620      	mov	r0, r4
   1b07c:	46ad      	mov	sp, r5
   1b07e:	f011 fd55 	bl	2cb2c <bt_conn_reset_rx_state>
		return;
   1b082:	e015      	b.n	1b0b0 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   1b084:	6920      	ldr	r0, [r4, #16]
   1b086:	b970      	cbnz	r0, 1b0a6 <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   1b088:	4b2b      	ldr	r3, [pc, #172]	; (1b138 <bt_conn_recv+0x12c>)
   1b08a:	617b      	str	r3, [r7, #20]
   1b08c:	2302      	movs	r3, #2
   1b08e:	4828      	ldr	r0, [pc, #160]	; (1b130 <bt_conn_recv+0x124>)
   1b090:	613b      	str	r3, [r7, #16]
   1b092:	f107 0210 	add.w	r2, r7, #16
   1b096:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b09a:	f011 fd41 	bl	2cb20 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1b09e:	4620      	mov	r0, r4
   1b0a0:	f011 fd44 	bl	2cb2c <bt_conn_reset_rx_state>
   1b0a4:	e001      	b.n	1b0aa <bt_conn_recv+0x9e>
		if (!buf->len) {
   1b0a6:	8a2e      	ldrh	r6, [r5, #16]
   1b0a8:	b936      	cbnz	r6, 1b0b8 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   1b0aa:	4628      	mov	r0, r5
   1b0ac:	f005 fd4a 	bl	20b44 <net_buf_unref>
}
   1b0b0:	3718      	adds	r7, #24
   1b0b2:	46bd      	mov	sp, r7
   1b0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b0b8:	300c      	adds	r0, #12
   1b0ba:	f013 fb5d 	bl	2e778 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1b0be:	4286      	cmp	r6, r0
   1b0c0:	d912      	bls.n	1b0e8 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1b0c2:	4b1e      	ldr	r3, [pc, #120]	; (1b13c <bt_conn_recv+0x130>)
   1b0c4:	617b      	str	r3, [r7, #20]
   1b0c6:	2302      	movs	r3, #2
   1b0c8:	613b      	str	r3, [r7, #16]
   1b0ca:	4819      	ldr	r0, [pc, #100]	; (1b130 <bt_conn_recv+0x124>)
   1b0cc:	f107 0210 	add.w	r2, r7, #16
   1b0d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b0d4:	f011 fd24 	bl	2cb20 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   1b0d8:	2200      	movs	r2, #0
   1b0da:	6921      	ldr	r1, [r4, #16]
   1b0dc:	4620      	mov	r0, r4
   1b0de:	f000 fe01 	bl	1bce4 <bt_l2cap_recv>
			conn->rx = NULL;
   1b0e2:	2300      	movs	r3, #0
   1b0e4:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   1b0e6:	e7e0      	b.n	1b0aa <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b0e8:	6920      	ldr	r0, [r4, #16]
   1b0ea:	8a2a      	ldrh	r2, [r5, #16]
   1b0ec:	68e9      	ldr	r1, [r5, #12]
   1b0ee:	300c      	adds	r0, #12
   1b0f0:	f013 fb0d 	bl	2e70e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1b0f4:	4628      	mov	r0, r5
   1b0f6:	f005 fd25 	bl	20b44 <net_buf_unref>
		break;
   1b0fa:	e7a4      	b.n	1b046 <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1b0fc:	46e8      	mov	r8, sp
   1b0fe:	b088      	sub	sp, #32
   1b100:	466a      	mov	r2, sp
   1b102:	4b0f      	ldr	r3, [pc, #60]	; (1b140 <bt_conn_recv+0x134>)
   1b104:	480a      	ldr	r0, [pc, #40]	; (1b130 <bt_conn_recv+0x124>)
	switch (flags) {
   1b106:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1b10a:	2303      	movs	r3, #3
   1b10c:	f842 3f10 	str.w	r3, [r2, #16]!
   1b110:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b114:	f011 fd04 	bl	2cb20 <z_log_msg_static_create.constprop.0>
   1b118:	46c5      	mov	sp, r8
   1b11a:	e7c0      	b.n	1b09e <bt_conn_recv+0x92>
	conn->rx = NULL;
   1b11c:	2300      	movs	r3, #0
   1b11e:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1b120:	2201      	movs	r2, #1
   1b122:	4620      	mov	r0, r4
   1b124:	f000 fdde 	bl	1bce4 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   1b128:	e7c2      	b.n	1b0b0 <bt_conn_recv+0xa4>
   1b12a:	bf00      	nop
   1b12c:	000329b2 	.word	0x000329b2
   1b130:	0003028c 	.word	0x0003028c
   1b134:	00032a32 	.word	0x00032a32
   1b138:	000329cf 	.word	0x000329cf
   1b13c:	000329ed 	.word	0x000329ed
   1b140:	00032a14 	.word	0x00032a14

0001b144 <bt_conn_send_cb>:
{
   1b144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b148:	4698      	mov	r8, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   1b14a:	7acb      	ldrb	r3, [r1, #11]
   1b14c:	2b07      	cmp	r3, #7
{
   1b14e:	b086      	sub	sp, #24
   1b150:	4606      	mov	r6, r0
   1b152:	460d      	mov	r5, r1
   1b154:	4617      	mov	r7, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   1b156:	d80e      	bhi.n	1b176 <bt_conn_send_cb+0x32>
		LOG_ERR("not enough room in user_data");
   1b158:	4b2c      	ldr	r3, [pc, #176]	; (1b20c <bt_conn_send_cb+0xc8>)
   1b15a:	482d      	ldr	r0, [pc, #180]	; (1b210 <bt_conn_send_cb+0xcc>)
   1b15c:	9305      	str	r3, [sp, #20]
   1b15e:	aa04      	add	r2, sp, #16
   1b160:	2302      	movs	r3, #2
   1b162:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b166:	9304      	str	r3, [sp, #16]
   1b168:	f011 fcda 	bl	2cb20 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1b16c:	f06f 0015 	mvn.w	r0, #21
}
   1b170:	b006      	add	sp, #24
   1b172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   1b176:	7b43      	ldrb	r3, [r0, #13]
   1b178:	2b07      	cmp	r3, #7
   1b17a:	d00c      	beq.n	1b196 <bt_conn_send_cb+0x52>
		LOG_ERR("not connected!");
   1b17c:	4b25      	ldr	r3, [pc, #148]	; (1b214 <bt_conn_send_cb+0xd0>)
   1b17e:	9305      	str	r3, [sp, #20]
   1b180:	4823      	ldr	r0, [pc, #140]	; (1b210 <bt_conn_send_cb+0xcc>)
   1b182:	2302      	movs	r3, #2
   1b184:	aa04      	add	r2, sp, #16
   1b186:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b18a:	9304      	str	r3, [sp, #16]
   1b18c:	f011 fcc8 	bl	2cb20 <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   1b190:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b194:	e7ec      	b.n	1b170 <bt_conn_send_cb+0x2c>
	if (cb) {
   1b196:	2a00      	cmp	r2, #0
   1b198:	d033      	beq.n	1b202 <bt_conn_send_cb+0xbe>
	return z_impl_z_current_get();
   1b19a:	f00b fdb3 	bl	26d04 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1b19e:	4b1e      	ldr	r3, [pc, #120]	; (1b218 <bt_conn_send_cb+0xd4>)
   1b1a0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1b1a2:	481e      	ldr	r0, [pc, #120]	; (1b21c <bt_conn_send_cb+0xd8>)
   1b1a4:	bf07      	ittee	eq
   1b1a6:	2200      	moveq	r2, #0
   1b1a8:	2300      	moveq	r3, #0
   1b1aa:	f04f 32ff 	movne.w	r2, #4294967295
   1b1ae:	f04f 33ff 	movne.w	r3, #4294967295
   1b1b2:	f00b f83d 	bl	26230 <z_impl_k_queue_get>
   1b1b6:	4604      	mov	r4, r0
		if (!tx) {
   1b1b8:	b328      	cbz	r0, 1b206 <bt_conn_send_cb+0xc2>
		if (conn->state != BT_CONN_CONNECTED) {
   1b1ba:	7b73      	ldrb	r3, [r6, #13]
   1b1bc:	2b07      	cmp	r3, #7
   1b1be:	d012      	beq.n	1b1e6 <bt_conn_send_cb+0xa2>
			LOG_WRN("Disconnected while allocating context");
   1b1c0:	4b17      	ldr	r3, [pc, #92]	; (1b220 <bt_conn_send_cb+0xdc>)
   1b1c2:	9305      	str	r3, [sp, #20]
   1b1c4:	4812      	ldr	r0, [pc, #72]	; (1b210 <bt_conn_send_cb+0xcc>)
   1b1c6:	2302      	movs	r3, #2
   1b1c8:	aa04      	add	r2, sp, #16
   1b1ca:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b1ce:	9304      	str	r3, [sp, #16]
   1b1d0:	f011 fca6 	bl	2cb20 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   1b1d4:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1b1d6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   1b1da:	4810      	ldr	r0, [pc, #64]	; (1b21c <bt_conn_send_cb+0xd8>)
	tx->pending_no_cb = 0U;
   1b1dc:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   1b1de:	4621      	mov	r1, r4
   1b1e0:	f014 f9fe 	bl	2f5e0 <k_queue_append>
}
   1b1e4:	e7d4      	b.n	1b190 <bt_conn_send_cb+0x4c>
		tx->user_data = user_data;
   1b1e6:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1b1ea:	2300      	movs	r3, #0
   1b1ec:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1b1ee:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
   1b1f0:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
   1b1f2:	f106 0038 	add.w	r0, r6, #56	; 0x38
	tx_data(buf)->is_cont = false;
   1b1f6:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   1b1f8:	4629      	mov	r1, r5
   1b1fa:	f013 fa56 	bl	2e6aa <net_buf_put>
	return 0;
   1b1fe:	4620      	mov	r0, r4
   1b200:	e7b6      	b.n	1b170 <bt_conn_send_cb+0x2c>
   1b202:	4614      	mov	r4, r2
   1b204:	e7f3      	b.n	1b1ee <bt_conn_send_cb+0xaa>
			return -ENOBUFS;
   1b206:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b20a:	e7b1      	b.n	1b170 <bt_conn_send_cb+0x2c>
   1b20c:	00032a4d 	.word	0x00032a4d
   1b210:	0003028c 	.word	0x0003028c
   1b214:	00032a6a 	.word	0x00032a6a
   1b218:	200031f0 	.word	0x200031f0
   1b21c:	20000d1c 	.word	0x20000d1c
   1b220:	00032a79 	.word	0x00032a79

0001b224 <bt_conn_prepare_events>:
{
   1b224:	b570      	push	{r4, r5, r6, lr}
   1b226:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   1b228:	481f      	ldr	r0, [pc, #124]	; (1b2a8 <bt_conn_prepare_events+0x84>)
   1b22a:	f014 fe04 	bl	2fe36 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1b22e:	4b1e      	ldr	r3, [pc, #120]	; (1b2a8 <bt_conn_prepare_events+0x84>)
   1b230:	2200      	movs	r2, #0
   1b232:	2101      	movs	r1, #1
   1b234:	4620      	mov	r0, r4
   1b236:	f014 fde1 	bl	2fdfc <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b23a:	f3bf 8f5b 	dmb	ish
   1b23e:	4b1b      	ldr	r3, [pc, #108]	; (1b2ac <bt_conn_prepare_events+0x88>)
   1b240:	681a      	ldr	r2, [r3, #0]
   1b242:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1b246:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   1b24a:	b90a      	cbnz	r2, 1b250 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1b24c:	2001      	movs	r0, #1
}
   1b24e:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1b250:	f1a3 05bc 	sub.w	r5, r3, #188	; 0xbc
   1b254:	f813 3caf 	ldrb.w	r3, [r3, #-175]
   1b258:	b953      	cbnz	r3, 1b270 <bt_conn_prepare_events+0x4c>
   1b25a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1b25e:	1d28      	adds	r0, r5, #4
   1b260:	f011 fc4f 	bl	2cb02 <atomic_and>
   1b264:	0643      	lsls	r3, r0, #25
   1b266:	d503      	bpl.n	1b270 <bt_conn_prepare_events+0x4c>
		conn_cleanup(conn);
   1b268:	4628      	mov	r0, r5
   1b26a:	f011 fc68 	bl	2cb3e <conn_cleanup>
		return -ENOTCONN;
   1b26e:	e7ed      	b.n	1b24c <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   1b270:	7b6b      	ldrb	r3, [r5, #13]
   1b272:	2b07      	cmp	r3, #7
   1b274:	d1ea      	bne.n	1b24c <bt_conn_prepare_events+0x28>
	if (bt_dev.le.acl_mtu) {
   1b276:	4b0e      	ldr	r3, [pc, #56]	; (1b2b0 <bt_conn_prepare_events+0x8c>)
   1b278:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   1b27c:	2a00      	cmp	r2, #0
   1b27e:	d0e5      	beq.n	1b24c <bt_conn_prepare_events+0x28>
	return sem->count;
   1b280:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   1b284:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1b286:	b159      	cbz	r1, 1b2a0 <bt_conn_prepare_events+0x7c>
   1b288:	b952      	cbnz	r2, 1b2a0 <bt_conn_prepare_events+0x7c>
		k_poll_event_init(&events[0],
   1b28a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   1b28e:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
   1b290:	4630      	mov	r0, r6
   1b292:	f014 fdb3 	bl	2fdfc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1b296:	2301      	movs	r3, #1
   1b298:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   1b29c:	2002      	movs	r0, #2
	return ev_count;
   1b29e:	e7d6      	b.n	1b24e <bt_conn_prepare_events+0x2a>
		k_poll_event_init(&events[0],
   1b2a0:	4b04      	ldr	r3, [pc, #16]	; (1b2b4 <bt_conn_prepare_events+0x90>)
   1b2a2:	2200      	movs	r2, #0
   1b2a4:	2104      	movs	r1, #4
   1b2a6:	e7f3      	b.n	1b290 <bt_conn_prepare_events+0x6c>
   1b2a8:	20000884 	.word	0x20000884
   1b2ac:	2000246c 	.word	0x2000246c
   1b2b0:	200004f0 	.word	0x200004f0
   1b2b4:	200023e8 	.word	0x200023e8

0001b2b8 <bt_conn_lookup_handle>:
{
   1b2b8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1b2ba:	2101      	movs	r1, #1
   1b2bc:	4801      	ldr	r0, [pc, #4]	; (1b2c4 <bt_conn_lookup_handle+0xc>)
   1b2be:	f011 bc99 	b.w	2cbf4 <conn_lookup_handle>
   1b2c2:	bf00      	nop
   1b2c4:	200023b0 	.word	0x200023b0

0001b2c8 <bt_conn_set_state>:
{
   1b2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   1b2cc:	7b46      	ldrb	r6, [r0, #13]
   1b2ce:	428e      	cmp	r6, r1
{
   1b2d0:	af00      	add	r7, sp, #0
   1b2d2:	4604      	mov	r4, r0
   1b2d4:	460d      	mov	r5, r1
	if (conn->state == state) {
   1b2d6:	d118      	bne.n	1b30a <bt_conn_set_state+0x42>
	switch (state) {
   1b2d8:	2e08      	cmp	r6, #8
   1b2da:	bf96      	itet	ls
   1b2dc:	4b72      	ldrls	r3, [pc, #456]	; (1b4a8 <bt_conn_set_state+0x1e0>)
	if (conn->state == state) {
   1b2de:	4b73      	ldrhi	r3, [pc, #460]	; (1b4ac <bt_conn_set_state+0x1e4>)
   1b2e0:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   1b2e4:	466c      	mov	r4, sp
   1b2e6:	b088      	sub	sp, #32
   1b2e8:	466a      	mov	r2, sp
   1b2ea:	4971      	ldr	r1, [pc, #452]	; (1b4b0 <bt_conn_set_state+0x1e8>)
   1b2ec:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b2f0:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b2f4:	8393      	strh	r3, [r2, #28]
   1b2f6:	4b6f      	ldr	r3, [pc, #444]	; (1b4b4 <bt_conn_set_state+0x1ec>)
   1b2f8:	f842 3f10 	str.w	r3, [r2, #16]!
   1b2fc:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
		LOG_WRN("no valid (%u) state was set", state);
   1b300:	486d      	ldr	r0, [pc, #436]	; (1b4b8 <bt_conn_set_state+0x1f0>)
   1b302:	f011 fc0d 	bl	2cb20 <z_log_msg_static_create.constprop.0>
   1b306:	46a5      	mov	sp, r4
   1b308:	e04c      	b.n	1b3a4 <bt_conn_set_state+0xdc>
	conn->state = state;
   1b30a:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   1b30c:	b926      	cbnz	r6, 1b318 <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1b30e:	7883      	ldrb	r3, [r0, #2]
   1b310:	2b08      	cmp	r3, #8
   1b312:	d001      	beq.n	1b318 <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   1b314:	f011 fc36 	bl	2cb84 <bt_conn_ref>
	switch (conn->state) {
   1b318:	7b63      	ldrb	r3, [r4, #13]
   1b31a:	2b08      	cmp	r3, #8
   1b31c:	f200 80bf 	bhi.w	1b49e <bt_conn_set_state+0x1d6>
   1b320:	e8df f003 	tbb	[pc, r3]
   1b324:	40400543 	.word	0x40400543
   1b328:	25404040 	.word	0x25404040
   1b32c:	40          	.byte	0x40
   1b32d:	00          	.byte	0x00
	if (bt_dev.le.acl_mtu) {
   1b32e:	4d63      	ldr	r5, [pc, #396]	; (1b4bc <bt_conn_set_state+0x1f4>)
		tx->pending_no_cb = 0U;
   1b330:	f04f 0800 	mov.w	r8, #0
	return NULL;
   1b334:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   1b338:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b33c:	f3ef 8311 	mrs	r3, BASEPRI
   1b340:	f382 8812 	msr	BASEPRI_MAX, r2
   1b344:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1b348:	69e2      	ldr	r2, [r4, #28]
   1b34a:	2a00      	cmp	r2, #0
   1b34c:	f000 8082 	beq.w	1b454 <bt_conn_set_state+0x18c>
			conn->pending_no_cb--;
   1b350:	3a01      	subs	r2, #1
   1b352:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   1b354:	f383 8811 	msr	BASEPRI, r3
   1b358:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   1b35c:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   1b360:	2b00      	cmp	r3, #0
   1b362:	bf14      	ite	ne
   1b364:	4630      	movne	r0, r6
   1b366:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   1b368:	f00a ff96 	bl	26298 <z_impl_k_sem_give>
}
   1b36c:	e7e4      	b.n	1b338 <bt_conn_set_state+0x70>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1b36e:	78a3      	ldrb	r3, [r4, #2]
   1b370:	2b04      	cmp	r3, #4
   1b372:	d017      	beq.n	1b3a4 <bt_conn_set_state+0xdc>
	z_impl_k_queue_init(queue);
   1b374:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1b378:	f014 f926 	bl	2f5c8 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1b37c:	4850      	ldr	r0, [pc, #320]	; (1b4c0 <bt_conn_set_state+0x1f8>)
   1b37e:	2100      	movs	r1, #0
   1b380:	f00b ffb4 	bl	272ec <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1b384:	2300      	movs	r3, #0
	list->tail = NULL;
   1b386:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1b38a:	78e3      	ldrb	r3, [r4, #3]
   1b38c:	2b01      	cmp	r3, #1
   1b38e:	d109      	bne.n	1b3a4 <bt_conn_set_state+0xdc>
			conn->le.conn_param_retry_countdown =
   1b390:	2303      	movs	r3, #3
   1b392:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1b396:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1b39a:	2300      	movs	r3, #0
   1b39c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1b3a0:	f00b f980 	bl	266a4 <k_work_schedule>
}
   1b3a4:	46bd      	mov	sp, r7
   1b3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   1b3aa:	78a3      	ldrb	r3, [r4, #2]
   1b3ac:	2b04      	cmp	r3, #4
   1b3ae:	d103      	bne.n	1b3b8 <bt_conn_set_state+0xf0>
			bt_conn_unref(conn);
   1b3b0:	4620      	mov	r0, r4
   1b3b2:	f011 fc03 	bl	2cbbc <bt_conn_unref>
			break;
   1b3b6:	e7f5      	b.n	1b3a4 <bt_conn_set_state+0xdc>
		switch (old_state) {
   1b3b8:	2e08      	cmp	r6, #8
   1b3ba:	d8f3      	bhi.n	1b3a4 <bt_conn_set_state+0xdc>
   1b3bc:	a301      	add	r3, pc, #4	; (adr r3, 1b3c4 <bt_conn_set_state+0xfc>)
   1b3be:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1b3c2:	bf00      	nop
   1b3c4:	0001b43d 	.word	0x0001b43d
   1b3c8:	0001b3e9 	.word	0x0001b3e9
   1b3cc:	0001b42f 	.word	0x0001b42f
   1b3d0:	0001b3b1 	.word	0x0001b3b1
   1b3d4:	0001b3b1 	.word	0x0001b3b1
   1b3d8:	0001b42f 	.word	0x0001b42f
   1b3dc:	0001b42f 	.word	0x0001b42f
   1b3e0:	0001b43d 	.word	0x0001b43d
   1b3e4:	0001b43d 	.word	0x0001b43d
			tx_notify(conn);
   1b3e8:	4620      	mov	r0, r4
   1b3ea:	f7ff fcbf 	bl	1ad6c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1b3ee:	78a3      	ldrb	r3, [r4, #2]
   1b3f0:	2b01      	cmp	r3, #1
   1b3f2:	d10a      	bne.n	1b40a <bt_conn_set_state+0x142>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1b3f4:	f104 0558 	add.w	r5, r4, #88	; 0x58
   1b3f8:	4628      	mov	r0, r5
   1b3fa:	f014 f9dd 	bl	2f7b8 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1b3fe:	f010 0f0c 	tst.w	r0, #12
   1b402:	d002      	beq.n	1b40a <bt_conn_set_state+0x142>
				k_work_cancel_delayable(&conn->deferred_work);
   1b404:	4628      	mov	r0, r5
   1b406:	f014 f9d9 	bl	2f7bc <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b40a:	f3bf 8f5b 	dmb	ish
   1b40e:	3404      	adds	r4, #4
   1b410:	e854 3f00 	ldrex	r3, [r4]
   1b414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b418:	e844 3200 	strex	r2, r3, [r4]
   1b41c:	2a00      	cmp	r2, #0
   1b41e:	d1f7      	bne.n	1b410 <bt_conn_set_state+0x148>
   1b420:	f3bf 8f5b 	dmb	ish
   1b424:	2100      	movs	r1, #0
   1b426:	4826      	ldr	r0, [pc, #152]	; (1b4c0 <bt_conn_set_state+0x1f8>)
   1b428:	f00b ff60 	bl	272ec <z_impl_k_poll_signal_raise>
   1b42c:	e7ba      	b.n	1b3a4 <bt_conn_set_state+0xdc>
			if (conn->err) {
   1b42e:	7b23      	ldrb	r3, [r4, #12]
   1b430:	2b00      	cmp	r3, #0
   1b432:	d0bd      	beq.n	1b3b0 <bt_conn_set_state+0xe8>
				notify_connected(conn);
   1b434:	4620      	mov	r0, r4
   1b436:	f7ff fc67 	bl	1ad08 <notify_connected>
   1b43a:	e7b9      	b.n	1b3b0 <bt_conn_set_state+0xe8>
			LOG_WRN("Invalid (%u) old state", state);
   1b43c:	466c      	mov	r4, sp
   1b43e:	b088      	sub	sp, #32
   1b440:	466a      	mov	r2, sp
   1b442:	4b20      	ldr	r3, [pc, #128]	; (1b4c4 <bt_conn_set_state+0x1fc>)
		LOG_WRN("no valid (%u) state was set", state);
   1b444:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1b448:	2303      	movs	r3, #3
   1b44a:	f842 3f10 	str.w	r3, [r2, #16]!
   1b44e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b452:	e755      	b.n	1b300 <bt_conn_set_state+0x38>
	return list->head;
   1b454:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1b456:	b921      	cbnz	r1, 1b462 <bt_conn_set_state+0x19a>
   1b458:	f383 8811 	msr	BASEPRI, r3
   1b45c:	f3bf 8f6f 	isb	sy
		if (!node) {
   1b460:	e7a0      	b.n	1b3a4 <bt_conn_set_state+0xdc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b462:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   1b464:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   1b466:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b468:	4281      	cmp	r1, r0
	list->tail = node;
   1b46a:	bf08      	it	eq
   1b46c:	61a2      	streq	r2, [r4, #24]
   1b46e:	f383 8811 	msr	BASEPRI, r3
   1b472:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b476:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b47a:	f3ef 8311 	mrs	r3, BASEPRI
   1b47e:	f382 8812 	msr	BASEPRI_MAX, r2
   1b482:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1b486:	68ca      	ldr	r2, [r1, #12]
   1b488:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1b48a:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
   1b48e:	f383 8811 	msr	BASEPRI, r3
   1b492:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   1b496:	4620      	mov	r0, r4
   1b498:	f7ff fc98 	bl	1adcc <conn_tx_destroy>
   1b49c:	e75e      	b.n	1b35c <bt_conn_set_state+0x94>
		LOG_WRN("no valid (%u) state was set", state);
   1b49e:	466c      	mov	r4, sp
   1b4a0:	b088      	sub	sp, #32
   1b4a2:	466a      	mov	r2, sp
   1b4a4:	4b08      	ldr	r3, [pc, #32]	; (1b4c8 <bt_conn_set_state+0x200>)
   1b4a6:	e7cd      	b.n	1b444 <bt_conn_set_state+0x17c>
   1b4a8:	00030874 	.word	0x00030874
   1b4ac:	00032a9f 	.word	0x00032a9f
   1b4b0:	00032aa9 	.word	0x00032aa9
   1b4b4:	01000003 	.word	0x01000003
   1b4b8:	0003028c 	.word	0x0003028c
   1b4bc:	200004f0 	.word	0x200004f0
   1b4c0:	20000884 	.word	0x20000884
   1b4c4:	00032aba 	.word	0x00032aba
   1b4c8:	00032ad1 	.word	0x00032ad1

0001b4cc <bt_conn_index>:
		index = conn - acl_conns;
   1b4cc:	4b03      	ldr	r3, [pc, #12]	; (1b4dc <bt_conn_index+0x10>)
   1b4ce:	1ac0      	subs	r0, r0, r3
   1b4d0:	4b03      	ldr	r3, [pc, #12]	; (1b4e0 <bt_conn_index+0x14>)
   1b4d2:	1180      	asrs	r0, r0, #6
   1b4d4:	4358      	muls	r0, r3
}
   1b4d6:	b2c0      	uxtb	r0, r0
   1b4d8:	4770      	bx	lr
   1b4da:	bf00      	nop
   1b4dc:	200023b0 	.word	0x200023b0
   1b4e0:	aaaaaaab 	.word	0xaaaaaaab

0001b4e4 <bt_conn_create_pdu_timeout>:
{
   1b4e4:	b538      	push	{r3, r4, r5, lr}
   1b4e6:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   1b4e8:	4908      	ldr	r1, [pc, #32]	; (1b50c <bt_conn_create_pdu_timeout+0x28>)
   1b4ea:	2800      	cmp	r0, #0
   1b4ec:	bf08      	it	eq
   1b4ee:	4608      	moveq	r0, r1
   1b4f0:	f013 f8a7 	bl	2e642 <net_buf_alloc_fixed>
	if (!buf) {
   1b4f4:	4604      	mov	r4, r0
   1b4f6:	b918      	cbnz	r0, 1b500 <bt_conn_create_pdu_timeout+0x1c>
}
   1b4f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b4fc:	f7ff bc22 	b.w	1ad44 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   1b500:	1d29      	adds	r1, r5, #4
   1b502:	300c      	adds	r0, #12
   1b504:	f013 f8f9 	bl	2e6fa <net_buf_simple_reserve>
   1b508:	4620      	mov	r0, r4
   1b50a:	bd38      	pop	{r3, r4, r5, pc}
   1b50c:	20000d4c 	.word	0x20000d4c

0001b510 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b512:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b514:	f3bf 8f5b 	dmb	ish
   1b518:	6863      	ldr	r3, [r4, #4]
   1b51a:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1b51e:	059b      	lsls	r3, r3, #22
   1b520:	f100 0004 	add.w	r0, r0, #4
   1b524:	d511      	bpl.n	1b54a <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   1b526:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1b52a:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   1b52e:	429a      	cmp	r2, r3
   1b530:	d80b      	bhi.n	1b54a <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   1b532:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   1b536:	429a      	cmp	r2, r3
   1b538:	d307      	bcc.n	1b54a <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1b53a:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   1b53e:	429a      	cmp	r2, r3
   1b540:	d103      	bne.n	1b54a <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b542:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1b546:	f011 fadc 	bl	2cb02 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1b54a:	4b10      	ldr	r3, [pc, #64]	; (1b58c <notify_le_param_updated+0x7c>)
   1b54c:	681d      	ldr	r5, [r3, #0]
   1b54e:	b925      	cbnz	r5, 1b55a <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b550:	4d0f      	ldr	r5, [pc, #60]	; (1b590 <notify_le_param_updated+0x80>)
   1b552:	4f10      	ldr	r7, [pc, #64]	; (1b594 <notify_le_param_updated+0x84>)
   1b554:	42bd      	cmp	r5, r7
   1b556:	d30c      	bcc.n	1b572 <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   1b558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   1b55a:	68ee      	ldr	r6, [r5, #12]
   1b55c:	b13e      	cbz	r6, 1b56e <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
   1b55e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1b562:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1b566:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1b56a:	4620      	mov	r0, r4
   1b56c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1b56e:	69ad      	ldr	r5, [r5, #24]
   1b570:	e7ed      	b.n	1b54e <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   1b572:	68ee      	ldr	r6, [r5, #12]
   1b574:	b13e      	cbz	r6, 1b586 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   1b576:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1b57a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1b57e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1b582:	4620      	mov	r0, r4
   1b584:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b586:	351c      	adds	r5, #28
   1b588:	e7e4      	b.n	1b554 <notify_le_param_updated+0x44>
   1b58a:	bf00      	nop
   1b58c:	20003b10 	.word	0x20003b10
   1b590:	00030244 	.word	0x00030244
   1b594:	00030244 	.word	0x00030244

0001b598 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1b598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b59c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1b59e:	4608      	mov	r0, r1
{
   1b5a0:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1b5a2:	f011 f863 	bl	2c66c <bt_le_conn_params_valid>
   1b5a6:	4605      	mov	r5, r0
   1b5a8:	b918      	cbnz	r0, 1b5b2 <le_param_req+0x1a>
		return false;
   1b5aa:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1b5ac:	4628      	mov	r0, r5
   1b5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1b5b2:	4b13      	ldr	r3, [pc, #76]	; (1b600 <le_param_req+0x68>)
   1b5b4:	681e      	ldr	r6, [r3, #0]
   1b5b6:	b946      	cbnz	r6, 1b5ca <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b5b8:	4e12      	ldr	r6, [pc, #72]	; (1b604 <le_param_req+0x6c>)
   1b5ba:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1b608 <le_param_req+0x70>
   1b5be:	4546      	cmp	r6, r8
   1b5c0:	d2f4      	bcs.n	1b5ac <le_param_req+0x14>
		if (!cb->le_param_req) {
   1b5c2:	68b3      	ldr	r3, [r6, #8]
   1b5c4:	b983      	cbnz	r3, 1b5e8 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b5c6:	361c      	adds	r6, #28
   1b5c8:	e7f9      	b.n	1b5be <le_param_req+0x26>
		if (!cb->le_param_req) {
   1b5ca:	68b3      	ldr	r3, [r6, #8]
   1b5cc:	b90b      	cbnz	r3, 1b5d2 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   1b5ce:	69b6      	ldr	r6, [r6, #24]
   1b5d0:	e7f1      	b.n	1b5b6 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1b5d2:	4621      	mov	r1, r4
   1b5d4:	4638      	mov	r0, r7
   1b5d6:	4798      	blx	r3
   1b5d8:	2800      	cmp	r0, #0
   1b5da:	d0e6      	beq.n	1b5aa <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1b5dc:	4620      	mov	r0, r4
   1b5de:	f011 f845 	bl	2c66c <bt_le_conn_params_valid>
   1b5e2:	2800      	cmp	r0, #0
   1b5e4:	d1f3      	bne.n	1b5ce <le_param_req+0x36>
   1b5e6:	e7e0      	b.n	1b5aa <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1b5e8:	4621      	mov	r1, r4
   1b5ea:	4638      	mov	r0, r7
   1b5ec:	4798      	blx	r3
   1b5ee:	2800      	cmp	r0, #0
   1b5f0:	d0db      	beq.n	1b5aa <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1b5f2:	4620      	mov	r0, r4
   1b5f4:	f011 f83a 	bl	2c66c <bt_le_conn_params_valid>
   1b5f8:	2800      	cmp	r0, #0
   1b5fa:	d1e4      	bne.n	1b5c6 <le_param_req+0x2e>
   1b5fc:	e7d5      	b.n	1b5aa <le_param_req+0x12>
   1b5fe:	bf00      	nop
   1b600:	20003b10 	.word	0x20003b10
   1b604:	00030244 	.word	0x00030244
   1b608:	00030244 	.word	0x00030244

0001b60c <bt_conn_identity_resolved>:

	return false;
}

void bt_conn_identity_resolved(struct bt_conn *conn)
{
   1b60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1b610:	78c3      	ldrb	r3, [r0, #3]
{
   1b612:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1b614:	b973      	cbnz	r3, 1b634 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   1b616:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1b61a:	4b10      	ldr	r3, [pc, #64]	; (1b65c <bt_conn_identity_resolved+0x50>)
   1b61c:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1b61e:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   1b622:	b955      	cbnz	r5, 1b63a <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b624:	4d0e      	ldr	r5, [pc, #56]	; (1b660 <bt_conn_identity_resolved+0x54>)
   1b626:	4f0f      	ldr	r7, [pc, #60]	; (1b664 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1b628:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b62c:	42bd      	cmp	r5, r7
   1b62e:	d30c      	bcc.n	1b64a <bt_conn_identity_resolved+0x3e>
		}
	}
}
   1b630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   1b634:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   1b638:	e7ef      	b.n	1b61a <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   1b63a:	692b      	ldr	r3, [r5, #16]
   1b63c:	b11b      	cbz	r3, 1b646 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1b63e:	463a      	mov	r2, r7
   1b640:	4631      	mov	r1, r6
   1b642:	4620      	mov	r0, r4
   1b644:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1b646:	69ad      	ldr	r5, [r5, #24]
   1b648:	e7eb      	b.n	1b622 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   1b64a:	692b      	ldr	r3, [r5, #16]
   1b64c:	b11b      	cbz	r3, 1b656 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1b64e:	4642      	mov	r2, r8
   1b650:	4631      	mov	r1, r6
   1b652:	4620      	mov	r0, r4
   1b654:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b656:	351c      	adds	r5, #28
   1b658:	e7e8      	b.n	1b62c <bt_conn_identity_resolved+0x20>
   1b65a:	bf00      	nop
   1b65c:	20003b10 	.word	0x20003b10
   1b660:	00030244 	.word	0x00030244
   1b664:	00030244 	.word	0x00030244

0001b668 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   1b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   1b66a:	7a43      	ldrb	r3, [r0, #9]
   1b66c:	7283      	strb	r3, [r0, #10]
{
   1b66e:	4604      	mov	r4, r0
   1b670:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1b672:	f011 fbea 	bl	2ce4a <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1b676:	4b0c      	ldr	r3, [pc, #48]	; (1b6a8 <bt_conn_security_changed+0x40>)
   1b678:	681d      	ldr	r5, [r3, #0]
   1b67a:	b925      	cbnz	r5, 1b686 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b67c:	4d0b      	ldr	r5, [pc, #44]	; (1b6ac <bt_conn_security_changed+0x44>)
   1b67e:	4f0c      	ldr	r7, [pc, #48]	; (1b6b0 <bt_conn_security_changed+0x48>)
   1b680:	42bd      	cmp	r5, r7
   1b682:	d308      	bcc.n	1b696 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   1b684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   1b686:	696b      	ldr	r3, [r5, #20]
   1b688:	b11b      	cbz	r3, 1b692 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   1b68a:	7a61      	ldrb	r1, [r4, #9]
   1b68c:	4632      	mov	r2, r6
   1b68e:	4620      	mov	r0, r4
   1b690:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1b692:	69ad      	ldr	r5, [r5, #24]
   1b694:	e7f1      	b.n	1b67a <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   1b696:	696b      	ldr	r3, [r5, #20]
   1b698:	b11b      	cbz	r3, 1b6a2 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   1b69a:	7a61      	ldrb	r1, [r4, #9]
   1b69c:	4632      	mov	r2, r6
   1b69e:	4620      	mov	r0, r4
   1b6a0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b6a2:	351c      	adds	r5, #28
   1b6a4:	e7ec      	b.n	1b680 <bt_conn_security_changed+0x18>
   1b6a6:	bf00      	nop
   1b6a8:	20003b10 	.word	0x20003b10
   1b6ac:	00030244 	.word	0x00030244
   1b6b0:	00030244 	.word	0x00030244

0001b6b4 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   1b6b4:	4b02      	ldr	r3, [pc, #8]	; (1b6c0 <bt_conn_cb_register+0xc>)
   1b6b6:	681a      	ldr	r2, [r3, #0]
   1b6b8:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   1b6ba:	6018      	str	r0, [r3, #0]
}
   1b6bc:	4770      	bx	lr
   1b6be:	bf00      	nop
   1b6c0:	20003b10 	.word	0x20003b10

0001b6c4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1b6c4:	b570      	push	{r4, r5, r6, lr}
   1b6c6:	4606      	mov	r6, r0
   1b6c8:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1b6ca:	480a      	ldr	r0, [pc, #40]	; (1b6f4 <bt_conn_add_le+0x30>)
   1b6cc:	2101      	movs	r1, #1
   1b6ce:	f7ff fc6b 	bl	1afa8 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1b6d2:	4604      	mov	r4, r0
   1b6d4:	b160      	cbz	r0, 1b6f0 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   1b6d6:	7206      	strb	r6, [r0, #8]
   1b6d8:	2207      	movs	r2, #7
   1b6da:	4629      	mov	r1, r5
   1b6dc:	3088      	adds	r0, #136	; 0x88
   1b6de:	f010 fdfe 	bl	2c2de <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   1b6e2:	2301      	movs	r3, #1
   1b6e4:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   1b6e6:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1b6e8:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1b6ea:	4b03      	ldr	r3, [pc, #12]	; (1b6f8 <bt_conn_add_le+0x34>)
   1b6ec:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1b6f0:	4620      	mov	r0, r4
   1b6f2:	bd70      	pop	{r4, r5, r6, pc}
   1b6f4:	200023b0 	.word	0x200023b0
   1b6f8:	00280018 	.word	0x00280018

0001b6fc <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1b6fc:	b570      	push	{r4, r5, r6, lr}
   1b6fe:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b700:	480a      	ldr	r0, [pc, #40]	; (1b72c <bt_conn_lookup_addr_le+0x30>)
{
   1b702:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b704:	f011 fa3e 	bl	2cb84 <bt_conn_ref>
   1b708:	4604      	mov	r4, r0

		if (!conn) {
   1b70a:	b120      	cbz	r0, 1b716 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1b70c:	7883      	ldrb	r3, [r0, #2]
   1b70e:	2b01      	cmp	r3, #1
   1b710:	d004      	beq.n	1b71c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   1b712:	f011 fa53 	bl	2cbbc <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1b716:	2400      	movs	r4, #0
}
   1b718:	4620      	mov	r0, r4
   1b71a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1b71c:	4632      	mov	r2, r6
   1b71e:	4629      	mov	r1, r5
   1b720:	f011 fafc 	bl	2cd1c <bt_conn_is_peer_addr_le>
   1b724:	2800      	cmp	r0, #0
   1b726:	d1f7      	bne.n	1b718 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1b728:	4620      	mov	r0, r4
   1b72a:	e7f2      	b.n	1b712 <bt_conn_lookup_addr_le+0x16>
   1b72c:	200023b0 	.word	0x200023b0

0001b730 <bt_conn_exists_le>:
{
   1b730:	b5b0      	push	{r4, r5, r7, lr}
   1b732:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1b734:	f7ff ffe2 	bl	1b6fc <bt_conn_lookup_addr_le>
	if (conn) {
   1b738:	4604      	mov	r4, r0
   1b73a:	b1e0      	cbz	r0, 1b776 <bt_conn_exists_le+0x46>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1b73c:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   1b73e:	2b08      	cmp	r3, #8
   1b740:	bf96      	itet	ls
   1b742:	4a0e      	ldrls	r2, [pc, #56]	; (1b77c <bt_conn_exists_le+0x4c>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1b744:	4b0e      	ldrhi	r3, [pc, #56]	; (1b780 <bt_conn_exists_le+0x50>)
   1b746:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1b74a:	466d      	mov	r5, sp
   1b74c:	b088      	sub	sp, #32
   1b74e:	466a      	mov	r2, sp
   1b750:	490c      	ldr	r1, [pc, #48]	; (1b784 <bt_conn_exists_le+0x54>)
   1b752:	480d      	ldr	r0, [pc, #52]	; (1b788 <bt_conn_exists_le+0x58>)
   1b754:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b758:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b75c:	8393      	strh	r3, [r2, #28]
   1b75e:	4b0b      	ldr	r3, [pc, #44]	; (1b78c <bt_conn_exists_le+0x5c>)
   1b760:	f842 3f10 	str.w	r3, [r2, #16]!
   1b764:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1b768:	f011 f9da 	bl	2cb20 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   1b76c:	4620      	mov	r0, r4
   1b76e:	46ad      	mov	sp, r5
   1b770:	f011 fa24 	bl	2cbbc <bt_conn_unref>
		return true;
   1b774:	2001      	movs	r0, #1
}
   1b776:	46bd      	mov	sp, r7
   1b778:	bdb0      	pop	{r4, r5, r7, pc}
   1b77a:	bf00      	nop
   1b77c:	00030874 	.word	0x00030874
   1b780:	00032a9f 	.word	0x00032a9f
   1b784:	00032aed 	.word	0x00032aed
   1b788:	0003028c 	.word	0x0003028c
   1b78c:	01000003 	.word	0x01000003

0001b790 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1b790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b792:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b794:	480e      	ldr	r0, [pc, #56]	; (1b7d0 <bt_conn_lookup_state_le+0x40>)
{
   1b796:	460e      	mov	r6, r1
   1b798:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b79a:	f011 f9f3 	bl	2cb84 <bt_conn_ref>

		if (!conn) {
   1b79e:	4604      	mov	r4, r0
   1b7a0:	b120      	cbz	r0, 1b7ac <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1b7a2:	7883      	ldrb	r3, [r0, #2]
   1b7a4:	2b01      	cmp	r3, #1
   1b7a6:	d003      	beq.n	1b7b0 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1b7a8:	f011 fa08 	bl	2cbbc <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1b7ac:	2400      	movs	r4, #0
   1b7ae:	e00d      	b.n	1b7cc <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1b7b0:	b136      	cbz	r6, 1b7c0 <bt_conn_lookup_state_le+0x30>
   1b7b2:	4632      	mov	r2, r6
   1b7b4:	4629      	mov	r1, r5
   1b7b6:	f011 fab1 	bl	2cd1c <bt_conn_is_peer_addr_le>
   1b7ba:	b908      	cbnz	r0, 1b7c0 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1b7bc:	4620      	mov	r0, r4
   1b7be:	e7f3      	b.n	1b7a8 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1b7c0:	7b63      	ldrb	r3, [r4, #13]
   1b7c2:	42bb      	cmp	r3, r7
   1b7c4:	d1fa      	bne.n	1b7bc <bt_conn_lookup_state_le+0x2c>
   1b7c6:	7a23      	ldrb	r3, [r4, #8]
   1b7c8:	42ab      	cmp	r3, r5
   1b7ca:	d1f7      	bne.n	1b7bc <bt_conn_lookup_state_le+0x2c>
}
   1b7cc:	4620      	mov	r0, r4
   1b7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b7d0:	200023b0 	.word	0x200023b0

0001b7d4 <send_conn_le_param_update>:
{
   1b7d4:	b538      	push	{r3, r4, r5, lr}
   1b7d6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1b7d8:	4608      	mov	r0, r1
{
   1b7da:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1b7dc:	f010 ff46 	bl	2c66c <bt_le_conn_params_valid>
   1b7e0:	b348      	cbz	r0, 1b836 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1b7e2:	4b16      	ldr	r3, [pc, #88]	; (1b83c <send_conn_le_param_update+0x68>)
   1b7e4:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   1b7e8:	0799      	lsls	r1, r3, #30
   1b7ea:	d407      	bmi.n	1b7fc <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1b7ec:	78e3      	ldrb	r3, [r4, #3]
   1b7ee:	b183      	cbz	r3, 1b812 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   1b7f0:	4629      	mov	r1, r5
   1b7f2:	4620      	mov	r0, r4
}
   1b7f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1b7f8:	f000 bab2 	b.w	1bd60 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1b7fc:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
   1b800:	079a      	lsls	r2, r3, #30
   1b802:	d5f3      	bpl.n	1b7ec <send_conn_le_param_update+0x18>
   1b804:	f3bf 8f5b 	dmb	ish
   1b808:	6863      	ldr	r3, [r4, #4]
   1b80a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1b80e:	055b      	lsls	r3, r3, #21
   1b810:	d4ec      	bmi.n	1b7ec <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1b812:	4629      	mov	r1, r5
   1b814:	4620      	mov	r0, r4
   1b816:	f011 faa3 	bl	2cd60 <bt_conn_le_conn_update>
		if (rc == 0) {
   1b81a:	b958      	cbnz	r0, 1b834 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   1b81c:	882b      	ldrh	r3, [r5, #0]
   1b81e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1b822:	886b      	ldrh	r3, [r5, #2]
   1b824:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1b828:	88ab      	ldrh	r3, [r5, #4]
   1b82a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1b82e:	88eb      	ldrh	r3, [r5, #6]
   1b830:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   1b834:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b836:	f06f 0015 	mvn.w	r0, #21
   1b83a:	e7fb      	b.n	1b834 <send_conn_le_param_update+0x60>
   1b83c:	200004f0 	.word	0x200004f0

0001b840 <deferred_work>:
{
   1b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b844:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   1b846:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   1b84a:	af00      	add	r7, sp, #0
   1b84c:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1b84e:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1b852:	bb0b      	cbnz	r3, 1b898 <deferred_work+0x58>
		bt_l2cap_disconnected(conn);
   1b854:	4630      	mov	r0, r6
   1b856:	f011 fae0 	bl	2ce1a <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1b85a:	4b39      	ldr	r3, [pc, #228]	; (1b940 <deferred_work+0x100>)
   1b85c:	681d      	ldr	r5, [r3, #0]
   1b85e:	b95d      	cbnz	r5, 1b878 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b860:	4d38      	ldr	r5, [pc, #224]	; (1b944 <deferred_work+0x104>)
   1b862:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1b948 <deferred_work+0x108>
   1b866:	4545      	cmp	r5, r8
   1b868:	d30e      	bcc.n	1b888 <deferred_work+0x48>
		bt_conn_unref(conn);
   1b86a:	4630      	mov	r0, r6
   1b86c:	f011 f9a6 	bl	2cbbc <bt_conn_unref>
}
   1b870:	3708      	adds	r7, #8
   1b872:	46bd      	mov	sp, r7
   1b874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
   1b878:	686b      	ldr	r3, [r5, #4]
   1b87a:	b11b      	cbz	r3, 1b884 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   1b87c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1b880:	4630      	mov	r0, r6
   1b882:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1b884:	69ad      	ldr	r5, [r5, #24]
   1b886:	e7ea      	b.n	1b85e <deferred_work+0x1e>
		if (cb->disconnected) {
   1b888:	686b      	ldr	r3, [r5, #4]
   1b88a:	b11b      	cbz	r3, 1b894 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   1b88c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1b890:	4630      	mov	r0, r6
   1b892:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b894:	351c      	adds	r5, #28
   1b896:	e7e6      	b.n	1b866 <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
   1b898:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1b89c:	2b01      	cmp	r3, #1
   1b89e:	d1e7      	bne.n	1b870 <deferred_work+0x30>
	if (atomic_test_and_clear_bit(conn->flags,
   1b8a0:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b8a4:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1b8a8:	4628      	mov	r0, r5
   1b8aa:	f011 f92a 	bl	2cb02 <atomic_and>
   1b8ae:	0581      	lsls	r1, r0, #22
   1b8b0:	d52a      	bpl.n	1b908 <deferred_work+0xc8>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1b8b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1b8b4:	603b      	str	r3, [r7, #0]
   1b8b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1b8b8:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   1b8ba:	4639      	mov	r1, r7
   1b8bc:	4630      	mov	r0, r6
   1b8be:	f7ff ff89 	bl	1b7d4 <send_conn_le_param_update>
		if (!err) {
   1b8c2:	b988      	cbnz	r0, 1b8e8 <deferred_work+0xa8>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b8c4:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1b8c8:	4628      	mov	r0, r5
   1b8ca:	f011 f91a 	bl	2cb02 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b8ce:	f3bf 8f5b 	dmb	ish
   1b8d2:	e855 3f00 	ldrex	r3, [r5]
   1b8d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b8da:	e845 3200 	strex	r2, r3, [r5]
   1b8de:	2a00      	cmp	r2, #0
   1b8e0:	d1f7      	bne.n	1b8d2 <deferred_work+0x92>
   1b8e2:	f3bf 8f5b 	dmb	ish
   1b8e6:	e7c3      	b.n	1b870 <deferred_work+0x30>
			LOG_WRN("Send LE param update failed (err %d)", err);
   1b8e8:	466c      	mov	r4, sp
   1b8ea:	b088      	sub	sp, #32
   1b8ec:	466a      	mov	r2, sp
   1b8ee:	4b17      	ldr	r3, [pc, #92]	; (1b94c <deferred_work+0x10c>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   1b8f0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b8f4:	2303      	movs	r3, #3
   1b8f6:	f842 3f10 	str.w	r3, [r2, #16]!
   1b8fa:	4815      	ldr	r0, [pc, #84]	; (1b950 <deferred_work+0x110>)
   1b8fc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b900:	f011 f90e 	bl	2cb20 <z_log_msg_static_create.constprop.0>
   1b904:	46a5      	mov	sp, r4
   1b906:	e7e2      	b.n	1b8ce <deferred_work+0x8e>
		param = BT_LE_CONN_PARAM(
   1b908:	4a12      	ldr	r2, [pc, #72]	; (1b954 <deferred_work+0x114>)
   1b90a:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   1b90e:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   1b912:	4639      	mov	r1, r7
   1b914:	4630      	mov	r0, r6
   1b916:	f7ff ff5d 	bl	1b7d4 <send_conn_le_param_update>
		if (!err) {
   1b91a:	b960      	cbnz	r0, 1b936 <deferred_work+0xf6>
   1b91c:	f3bf 8f5b 	dmb	ish
   1b920:	e855 3f00 	ldrex	r3, [r5]
   1b924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1b928:	e845 3200 	strex	r2, r3, [r5]
   1b92c:	2a00      	cmp	r2, #0
   1b92e:	d1f7      	bne.n	1b920 <deferred_work+0xe0>
   1b930:	f3bf 8f5b 	dmb	ish
   1b934:	e7cb      	b.n	1b8ce <deferred_work+0x8e>
			LOG_WRN("Send auto LE param update failed (err %d)",
   1b936:	466c      	mov	r4, sp
   1b938:	b088      	sub	sp, #32
   1b93a:	466a      	mov	r2, sp
   1b93c:	4b06      	ldr	r3, [pc, #24]	; (1b958 <deferred_work+0x118>)
   1b93e:	e7d7      	b.n	1b8f0 <deferred_work+0xb0>
   1b940:	20003b10 	.word	0x20003b10
   1b944:	00030244 	.word	0x00030244
   1b948:	00030244 	.word	0x00030244
   1b94c:	00032b10 	.word	0x00032b10
   1b950:	0003028c 	.word	0x0003028c
   1b954:	00280018 	.word	0x00280018
   1b958:	00032b35 	.word	0x00032b35

0001b95c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1b95c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1b95e:	4801      	ldr	r0, [pc, #4]	; (1b964 <bt_conn_create_frag_timeout+0x8>)
   1b960:	f7ff bdc0 	b.w	1b4e4 <bt_conn_create_pdu_timeout>
   1b964:	20000da4 	.word	0x20000da4

0001b968 <bt_conn_process_tx>:
{
   1b968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1b96c:	7b43      	ldrb	r3, [r0, #13]
{
   1b96e:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1b970:	b95b      	cbnz	r3, 1b98a <bt_conn_process_tx+0x22>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b972:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1b976:	3004      	adds	r0, #4
   1b978:	f011 f8c3 	bl	2cb02 <atomic_and>
   1b97c:	0643      	lsls	r3, r0, #25
   1b97e:	d504      	bpl.n	1b98a <bt_conn_process_tx+0x22>
		conn_cleanup(conn);
   1b980:	4628      	mov	r0, r5
}
   1b982:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   1b986:	f011 b8da 	b.w	2cb3e <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   1b98a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1b98e:	f013 fe3c 	bl	2f60a <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   1b992:	4604      	mov	r4, r0
   1b994:	b960      	cbnz	r0, 1b9b0 <bt_conn_process_tx+0x48>
   1b996:	4a34      	ldr	r2, [pc, #208]	; (1ba68 <bt_conn_process_tx+0x100>)
   1b998:	4934      	ldr	r1, [pc, #208]	; (1ba6c <bt_conn_process_tx+0x104>)
   1b99a:	4835      	ldr	r0, [pc, #212]	; (1ba70 <bt_conn_process_tx+0x108>)
   1b99c:	f44f 735d 	mov.w	r3, #884	; 0x374
   1b9a0:	f00f fa09 	bl	2adb6 <assert_print>
   1b9a4:	4040      	eors	r0, r0
   1b9a6:	f380 8811 	msr	BASEPRI, r0
   1b9aa:	f04f 0003 	mov.w	r0, #3
   1b9ae:	df02      	svc	2
	buf = net_buf_ref(buf);
   1b9b0:	4620      	mov	r0, r4
   1b9b2:	f012 fe7c 	bl	2e6ae <net_buf_ref>
	return bt_dev.le.acl_mtu;
   1b9b6:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 1ba74 <bt_conn_process_tx+0x10c>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   1b9ba:	8a02      	ldrh	r2, [r0, #16]
   1b9bc:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   1b9c0:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
   1b9c2:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
   1b9c4:	7f02      	ldrb	r2, [r0, #28]
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   1b9c6:	d807      	bhi.n	1b9d8 <bt_conn_process_tx+0x70>
   1b9c8:	b932      	cbnz	r2, 1b9d8 <bt_conn_process_tx+0x70>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   1b9ca:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   1b9cc:	4621      	mov	r1, r4
   1b9ce:	4628      	mov	r0, r5
   1b9d0:	f7ff fa12 	bl	1adf8 <send_frag>
   1b9d4:	4606      	mov	r6, r0
   1b9d6:	e030      	b.n	1ba3a <bt_conn_process_tx+0xd2>
	if (tx_data(buf)->is_cont) {
   1b9d8:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   1b9da:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   1b9de:	8a22      	ldrh	r2, [r4, #16]
   1b9e0:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   1b9e4:	429a      	cmp	r2, r3
   1b9e6:	d804      	bhi.n	1b9f2 <bt_conn_process_tx+0x8a>
	tx_data(buf)->is_cont = true;
   1b9e8:	2301      	movs	r3, #1
   1b9ea:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   1b9ec:	2200      	movs	r2, #0
   1b9ee:	2303      	movs	r3, #3
   1b9f0:	e7ec      	b.n	1b9cc <bt_conn_process_tx+0x64>
		frag = bt_conn_create_frag(0);
   1b9f2:	f04f 33ff 	mov.w	r3, #4294967295
   1b9f6:	f04f 32ff 	mov.w	r2, #4294967295
   1b9fa:	2000      	movs	r0, #0
   1b9fc:	f7ff ffae 	bl	1b95c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1ba00:	7b6b      	ldrb	r3, [r5, #13]
   1ba02:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   1ba04:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1ba06:	d006      	beq.n	1ba16 <bt_conn_process_tx+0xae>
		net_buf_unref(frag);
   1ba08:	f005 f89c 	bl	20b44 <net_buf_unref>
	net_buf_unref(buf);
   1ba0c:	4620      	mov	r0, r4
}
   1ba0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   1ba12:	f005 b897 	b.w	20b44 <net_buf_unref>
	tx_data(frag)->tx = NULL;
   1ba16:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   1ba1a:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   1ba1e:	4602      	mov	r2, r0
   1ba20:	463b      	mov	r3, r7
   1ba22:	4621      	mov	r1, r4
   1ba24:	4628      	mov	r0, r5
   1ba26:	f7ff f9e7 	bl	1adf8 <send_frag>
		if (err) {
   1ba2a:	4606      	mov	r6, r0
   1ba2c:	b1b8      	cbz	r0, 1ba5e <bt_conn_process_tx+0xf6>
			tx_data(buf)->is_cont = flags != FRAG_START;
   1ba2e:	f007 0701 	and.w	r7, r7, #1
   1ba32:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   1ba34:	4640      	mov	r0, r8
   1ba36:	f005 f885 	bl	20b44 <net_buf_unref>
	net_buf_unref(buf);
   1ba3a:	4620      	mov	r0, r4
   1ba3c:	f005 f882 	bl	20b44 <net_buf_unref>
	if (err  == -EIO) {
   1ba40:	3605      	adds	r6, #5
   1ba42:	d10e      	bne.n	1ba62 <bt_conn_process_tx+0xfa>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1ba44:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
   1ba46:	2300      	movs	r3, #0
   1ba48:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   1ba4a:	4620      	mov	r0, r4
   1ba4c:	f005 f87a 	bl	20b44 <net_buf_unref>
		if (tx) {
   1ba50:	b13e      	cbz	r6, 1ba62 <bt_conn_process_tx+0xfa>
			conn_tx_destroy(conn, tx);
   1ba52:	4631      	mov	r1, r6
   1ba54:	4628      	mov	r0, r5
}
   1ba56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   1ba5a:	f7ff b9b7 	b.w	1adcc <conn_tx_destroy>
		flags = FRAG_CONT;
   1ba5e:	2701      	movs	r7, #1
   1ba60:	e7bd      	b.n	1b9de <bt_conn_process_tx+0x76>
}
   1ba62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ba66:	bf00      	nop
   1ba68:	00032b5f 	.word	0x00032b5f
   1ba6c:	00033860 	.word	0x00033860
   1ba70:	00031f15 	.word	0x00031f15
   1ba74:	200004f0 	.word	0x200004f0

0001ba78 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   1ba78:	b168      	cbz	r0, 1ba96 <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   1ba7a:	2300      	movs	r3, #0
   1ba7c:	60c3      	str	r3, [r0, #12]
	return list->tail;
   1ba7e:	4b07      	ldr	r3, [pc, #28]	; (1ba9c <bt_conn_auth_info_cb_register+0x24>)
   1ba80:	6859      	ldr	r1, [r3, #4]
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   1ba82:	f100 020c 	add.w	r2, r0, #12
Z_GENLIST_APPEND(slist, snode)
   1ba86:	b919      	cbnz	r1, 1ba90 <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   1ba88:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   1ba8c:	2000      	movs	r0, #0
   1ba8e:	4770      	bx	lr
	parent->next = child;
   1ba90:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1ba92:	605a      	str	r2, [r3, #4]
}
   1ba94:	e7fa      	b.n	1ba8c <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   1ba96:	f06f 0015 	mvn.w	r0, #21
}
   1ba9a:	4770      	bx	lr
   1ba9c:	20003b14 	.word	0x20003b14

0001baa0 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1baa0:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1baa2:	480c      	ldr	r0, [pc, #48]	; (1bad4 <bt_conn_init+0x34>)
   1baa4:	f013 fd90 	bl	2f5c8 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1baa8:	490b      	ldr	r1, [pc, #44]	; (1bad8 <bt_conn_init+0x38>)
   1baaa:	480a      	ldr	r0, [pc, #40]	; (1bad4 <bt_conn_init+0x34>)
   1baac:	f013 fd98 	bl	2f5e0 <k_queue_append>
   1bab0:	490a      	ldr	r1, [pc, #40]	; (1badc <bt_conn_init+0x3c>)
   1bab2:	4808      	ldr	r0, [pc, #32]	; (1bad4 <bt_conn_init+0x34>)
   1bab4:	f013 fd94 	bl	2f5e0 <k_queue_append>
   1bab8:	4909      	ldr	r1, [pc, #36]	; (1bae0 <bt_conn_init+0x40>)
   1baba:	4806      	ldr	r0, [pc, #24]	; (1bad4 <bt_conn_init+0x34>)
   1babc:	f013 fd90 	bl	2f5e0 <k_queue_append>
	}

	bt_att_init();
   1bac0:	f001 f8d2 	bl	1cc68 <bt_att_init>

	err = bt_smp_init();
   1bac4:	f004 fc7a 	bl	203bc <bt_smp_init>
	if (err) {
   1bac8:	4604      	mov	r4, r0
   1baca:	b908      	cbnz	r0, 1bad0 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   1bacc:	f011 fa0a 	bl	2cee4 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1bad0:	4620      	mov	r0, r4
   1bad2:	bd10      	pop	{r4, pc}
   1bad4:	20000d1c 	.word	0x20000d1c
   1bad8:	20003ae0 	.word	0x20003ae0
   1badc:	20003af0 	.word	0x20003af0
   1bae0:	20003b00 	.word	0x20003b00

0001bae4 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1bae4:	b580      	push	{r7, lr}
   1bae6:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1bae8:	b088      	sub	sp, #32
   1baea:	466a      	mov	r2, sp
   1baec:	4b06      	ldr	r3, [pc, #24]	; (1bb08 <l2cap_create_le_sig_pdu.part.0+0x24>)
   1baee:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1baf2:	2303      	movs	r3, #3
   1baf4:	f842 3f10 	str.w	r3, [r2, #16]!
   1baf8:	4804      	ldr	r0, [pc, #16]	; (1bb0c <l2cap_create_le_sig_pdu.part.0+0x28>)
   1bafa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bafe:	f011 f958 	bl	2cdb2 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   1bb02:	2000      	movs	r0, #0
   1bb04:	46bd      	mov	sp, r7
   1bb06:	bd80      	pop	{r7, pc}
   1bb08:	00032c08 	.word	0x00032c08
   1bb0c:	000302cc 	.word	0x000302cc

0001bb10 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1bb10:	b580      	push	{r7, lr}
   1bb12:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   1bb14:	b088      	sub	sp, #32
   1bb16:	466a      	mov	r2, sp
   1bb18:	4b07      	ldr	r3, [pc, #28]	; (1bb38 <l2cap_accept.part.0+0x28>)
   1bb1a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bb1e:	2303      	movs	r3, #3
   1bb20:	f842 3f10 	str.w	r3, [r2, #16]!
   1bb24:	4805      	ldr	r0, [pc, #20]	; (1bb3c <l2cap_accept.part.0+0x2c>)
   1bb26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bb2a:	f011 f942 	bl	2cdb2 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1bb2e:	f06f 000b 	mvn.w	r0, #11
   1bb32:	46bd      	mov	sp, r7
   1bb34:	bd80      	pop	{r7, pc}
   1bb36:	bf00      	nop
   1bb38:	00032c30 	.word	0x00032c30
   1bb3c:	000302cc 	.word	0x000302cc

0001bb40 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   1bb40:	4b04      	ldr	r3, [pc, #16]	; (1bb54 <l2cap_accept+0x14>)
   1bb42:	681a      	ldr	r2, [r3, #0]
   1bb44:	b10a      	cbz	r2, 1bb4a <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1bb46:	f7ff bfe3 	b.w	1bb10 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   1bb4a:	4803      	ldr	r0, [pc, #12]	; (1bb58 <l2cap_accept+0x18>)
   1bb4c:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   1bb4e:	600b      	str	r3, [r1, #0]
}
   1bb50:	4610      	mov	r0, r2
   1bb52:	4770      	bx	lr
   1bb54:	20003b20 	.word	0x20003b20
   1bb58:	000308b8 	.word	0x000308b8

0001bb5c <bt_l2cap_connected>:
{
   1bb5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1bb5e:	4d24      	ldr	r5, [pc, #144]	; (1bbf0 <bt_l2cap_connected+0x94>)
   1bb60:	4f24      	ldr	r7, [pc, #144]	; (1bbf4 <bt_l2cap_connected+0x98>)
{
   1bb62:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bb64:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1bb66:	42bd      	cmp	r5, r7
   1bb68:	d301      	bcc.n	1bb6e <bt_l2cap_connected+0x12>
}
   1bb6a:	b003      	add	sp, #12
   1bb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1bb6e:	686b      	ldr	r3, [r5, #4]
   1bb70:	a901      	add	r1, sp, #4
   1bb72:	4620      	mov	r0, r4
   1bb74:	4798      	blx	r3
   1bb76:	2800      	cmp	r0, #0
   1bb78:	db34      	blt.n	1bbe4 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1bb7a:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1bb7c:	882a      	ldrh	r2, [r5, #0]
   1bb7e:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1bb80:	849a      	strh	r2, [r3, #36]	; 0x24
   1bb82:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1bb86:	68a8      	ldr	r0, [r5, #8]
   1bb88:	f3bf 8f5b 	dmb	ish
   1bb8c:	e852 1f00 	ldrex	r1, [r2]
   1bb90:	e842 6c00 	strex	ip, r6, [r2]
   1bb94:	f1bc 0f00 	cmp.w	ip, #0
   1bb98:	d1f8      	bne.n	1bb8c <bt_l2cap_connected+0x30>
   1bb9a:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   1bb9e:	609e      	str	r6, [r3, #8]
	return list->tail;
   1bba0:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   1bba2:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   1bba6:	b9f9      	cbnz	r1, 1bbe8 <bt_l2cap_connected+0x8c>
	list->head = node;
   1bba8:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   1bbac:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1bbae:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1bbb0:	9801      	ldr	r0, [sp, #4]
   1bbb2:	6843      	ldr	r3, [r0, #4]
   1bbb4:	681b      	ldr	r3, [r3, #0]
   1bbb6:	b103      	cbz	r3, 1bbba <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   1bbb8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bbba:	9b01      	ldr	r3, [sp, #4]
   1bbbc:	f3bf 8f5b 	dmb	ish
   1bbc0:	3310      	adds	r3, #16
   1bbc2:	e853 1f00 	ldrex	r1, [r3]
   1bbc6:	f041 0101 	orr.w	r1, r1, #1
   1bbca:	e843 1200 	strex	r2, r1, [r3]
   1bbce:	2a00      	cmp	r2, #0
   1bbd0:	d1f7      	bne.n	1bbc2 <bt_l2cap_connected+0x66>
   1bbd2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1bbd6:	9801      	ldr	r0, [sp, #4]
   1bbd8:	6843      	ldr	r3, [r0, #4]
   1bbda:	69db      	ldr	r3, [r3, #28]
   1bbdc:	b113      	cbz	r3, 1bbe4 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   1bbde:	f100 0110 	add.w	r1, r0, #16
   1bbe2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1bbe4:	350c      	adds	r5, #12
   1bbe6:	e7be      	b.n	1bb66 <bt_l2cap_connected+0xa>
	parent->next = child;
   1bbe8:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1bbea:	6562      	str	r2, [r4, #84]	; 0x54
}
   1bbec:	e7de      	b.n	1bbac <bt_l2cap_connected+0x50>
   1bbee:	bf00      	nop
   1bbf0:	00030220 	.word	0x00030220
   1bbf4:	00030244 	.word	0x00030244

0001bbf8 <l2cap_recv>:
{
   1bbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bbfa:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   1bbfc:	8a0b      	ldrh	r3, [r1, #16]
   1bbfe:	2b03      	cmp	r3, #3
{
   1bc00:	af02      	add	r7, sp, #8
   1bc02:	4606      	mov	r6, r0
   1bc04:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1bc06:	d80b      	bhi.n	1bc20 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   1bc08:	4b30      	ldr	r3, [pc, #192]	; (1bccc <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1bc0a:	617b      	str	r3, [r7, #20]
   1bc0c:	2302      	movs	r3, #2
   1bc0e:	4830      	ldr	r0, [pc, #192]	; (1bcd0 <l2cap_recv+0xd8>)
   1bc10:	613b      	str	r3, [r7, #16]
   1bc12:	f107 0210 	add.w	r2, r7, #16
   1bc16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc1a:	f011 f8ca 	bl	2cdb2 <z_log_msg_static_create.constprop.0>
		return 0;
   1bc1e:	e019      	b.n	1bc54 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1bc20:	2104      	movs	r1, #4
   1bc22:	f105 000c 	add.w	r0, r5, #12
   1bc26:	f012 fd93 	bl	2e750 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1bc2a:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   1bc2c:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   1bc2e:	4299      	cmp	r1, r3
   1bc30:	4604      	mov	r4, r0
   1bc32:	d013      	beq.n	1bc5c <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1bc34:	466c      	mov	r4, sp
   1bc36:	b088      	sub	sp, #32
   1bc38:	aa02      	add	r2, sp, #8
   1bc3a:	4826      	ldr	r0, [pc, #152]	; (1bcd4 <l2cap_recv+0xdc>)
   1bc3c:	61d3      	str	r3, [r2, #28]
   1bc3e:	2304      	movs	r3, #4
   1bc40:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1bc44:	f842 3f10 	str.w	r3, [r2, #16]!
   1bc48:	4821      	ldr	r0, [pc, #132]	; (1bcd0 <l2cap_recv+0xd8>)
   1bc4a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1bc4e:	f011 f8b0 	bl	2cdb2 <z_log_msg_static_create.constprop.0>
   1bc52:	46a5      	mov	sp, r4
}
   1bc54:	2000      	movs	r0, #0
   1bc56:	371c      	adds	r7, #28
   1bc58:	46bd      	mov	sp, r7
   1bc5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   1bc5c:	7843      	ldrb	r3, [r0, #1]
   1bc5e:	b90b      	cbnz	r3, 1bc64 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1bc60:	4b1d      	ldr	r3, [pc, #116]	; (1bcd8 <l2cap_recv+0xe0>)
   1bc62:	e7d2      	b.n	1bc0a <l2cap_recv+0x12>
	switch (hdr->code) {
   1bc64:	7803      	ldrb	r3, [r0, #0]
   1bc66:	2b01      	cmp	r3, #1
   1bc68:	d0f4      	beq.n	1bc54 <l2cap_recv+0x5c>
   1bc6a:	2b13      	cmp	r3, #19
   1bc6c:	d103      	bne.n	1bc76 <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   1bc6e:	2901      	cmp	r1, #1
   1bc70:	d8f0      	bhi.n	1bc54 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   1bc72:	4b1a      	ldr	r3, [pc, #104]	; (1bcdc <l2cap_recv+0xe4>)
   1bc74:	e7c9      	b.n	1bc0a <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1bc76:	466d      	mov	r5, sp
   1bc78:	b088      	sub	sp, #32
   1bc7a:	aa02      	add	r2, sp, #8
   1bc7c:	4918      	ldr	r1, [pc, #96]	; (1bce0 <l2cap_recv+0xe8>)
   1bc7e:	4814      	ldr	r0, [pc, #80]	; (1bcd0 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   1bc80:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1bc84:	2303      	movs	r3, #3
   1bc86:	f842 3f10 	str.w	r3, [r2, #16]!
   1bc8a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1bc8e:	f011 f890 	bl	2cdb2 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1bc92:	2202      	movs	r2, #2
   1bc94:	7861      	ldrb	r1, [r4, #1]
   1bc96:	46ad      	mov	sp, r5
   1bc98:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1bc9a:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1bc9c:	f011 f88c 	bl	2cdb8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1bca0:	4604      	mov	r4, r0
   1bca2:	2800      	cmp	r0, #0
   1bca4:	d0d6      	beq.n	1bc54 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1bca6:	2102      	movs	r1, #2
   1bca8:	300c      	adds	r0, #12
   1bcaa:	f012 fd2a 	bl	2e702 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1bcae:	2300      	movs	r3, #0
   1bcb0:	7003      	strb	r3, [r0, #0]
   1bcb2:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1bcb4:	4622      	mov	r2, r4
   1bcb6:	9300      	str	r3, [sp, #0]
   1bcb8:	2105      	movs	r1, #5
   1bcba:	4628      	mov	r0, r5
   1bcbc:	f011 f8e5 	bl	2ce8a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1bcc0:	2800      	cmp	r0, #0
   1bcc2:	d0c7      	beq.n	1bc54 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1bcc4:	4620      	mov	r0, r4
   1bcc6:	f004 ff3d 	bl	20b44 <net_buf_unref>
   1bcca:	e7c3      	b.n	1bc54 <l2cap_recv+0x5c>
   1bccc:	00032c57 	.word	0x00032c57
   1bcd0:	000302cc 	.word	0x000302cc
   1bcd4:	00032c75 	.word	0x00032c75
   1bcd8:	00032c96 	.word	0x00032c96
   1bcdc:	00032cb7 	.word	0x00032cb7
   1bce0:	00032cd3 	.word	0x00032cd3

0001bce4 <bt_l2cap_recv>:
{
   1bce4:	b5b0      	push	{r4, r5, r7, lr}
   1bce6:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1bce8:	8a0b      	ldrh	r3, [r1, #16]
   1bcea:	2b03      	cmp	r3, #3
{
   1bcec:	af00      	add	r7, sp, #0
   1bcee:	4605      	mov	r5, r0
   1bcf0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1bcf2:	d810      	bhi.n	1bd16 <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   1bcf4:	4b17      	ldr	r3, [pc, #92]	; (1bd54 <bt_l2cap_recv+0x70>)
   1bcf6:	617b      	str	r3, [r7, #20]
   1bcf8:	4817      	ldr	r0, [pc, #92]	; (1bd58 <bt_l2cap_recv+0x74>)
   1bcfa:	2302      	movs	r3, #2
   1bcfc:	f107 0210 	add.w	r2, r7, #16
   1bd00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bd04:	613b      	str	r3, [r7, #16]
   1bd06:	f011 f854 	bl	2cdb2 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   1bd0a:	4620      	mov	r0, r4
   1bd0c:	f004 ff1a 	bl	20b44 <net_buf_unref>
}
   1bd10:	3718      	adds	r7, #24
   1bd12:	46bd      	mov	sp, r7
   1bd14:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1bd16:	2104      	movs	r1, #4
   1bd18:	f104 000c 	add.w	r0, r4, #12
   1bd1c:	f012 fd18 	bl	2e750 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1bd20:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1bd22:	4628      	mov	r0, r5
   1bd24:	f011 f8d4 	bl	2ced0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1bd28:	b978      	cbnz	r0, 1bd4a <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1bd2a:	466d      	mov	r5, sp
   1bd2c:	b088      	sub	sp, #32
   1bd2e:	466a      	mov	r2, sp
   1bd30:	4b0a      	ldr	r3, [pc, #40]	; (1bd5c <bt_l2cap_recv+0x78>)
   1bd32:	4809      	ldr	r0, [pc, #36]	; (1bd58 <bt_l2cap_recv+0x74>)
   1bd34:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1bd38:	2303      	movs	r3, #3
   1bd3a:	f842 3f10 	str.w	r3, [r2, #16]!
   1bd3e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1bd42:	f011 f836 	bl	2cdb2 <z_log_msg_static_create.constprop.0>
   1bd46:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1bd48:	e7df      	b.n	1bd0a <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   1bd4a:	6843      	ldr	r3, [r0, #4]
   1bd4c:	4621      	mov	r1, r4
   1bd4e:	695b      	ldr	r3, [r3, #20]
   1bd50:	4798      	blx	r3
   1bd52:	e7da      	b.n	1bd0a <bt_l2cap_recv+0x26>
   1bd54:	00032cfb 	.word	0x00032cfb
   1bd58:	000302cc 	.word	0x000302cc
   1bd5c:	00032d18 	.word	0x00032d18

0001bd60 <bt_l2cap_update_conn_param>:
{
   1bd60:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1bd62:	4b17      	ldr	r3, [pc, #92]	; (1bdc0 <bt_l2cap_update_conn_param+0x60>)
{
   1bd64:	460e      	mov	r6, r1
	ident++;
   1bd66:	7819      	ldrb	r1, [r3, #0]
   1bd68:	3101      	adds	r1, #1
   1bd6a:	b2c9      	uxtb	r1, r1
   1bd6c:	2901      	cmp	r1, #1
   1bd6e:	bf38      	it	cc
   1bd70:	2101      	movcc	r1, #1
{
   1bd72:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1bd74:	2208      	movs	r2, #8
   1bd76:	2012      	movs	r0, #18
	ident++;
   1bd78:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1bd7a:	f011 f81d 	bl	2cdb8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1bd7e:	4604      	mov	r4, r0
   1bd80:	b1d0      	cbz	r0, 1bdb8 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   1bd82:	2108      	movs	r1, #8
   1bd84:	300c      	adds	r0, #12
   1bd86:	f012 fcbc 	bl	2e702 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1bd8a:	8833      	ldrh	r3, [r6, #0]
   1bd8c:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1bd8e:	8873      	ldrh	r3, [r6, #2]
   1bd90:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1bd92:	88b3      	ldrh	r3, [r6, #4]
   1bd94:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1bd96:	88f3      	ldrh	r3, [r6, #6]
   1bd98:	80c3      	strh	r3, [r0, #6]
   1bd9a:	2300      	movs	r3, #0
   1bd9c:	4628      	mov	r0, r5
   1bd9e:	9300      	str	r3, [sp, #0]
   1bda0:	4622      	mov	r2, r4
   1bda2:	2105      	movs	r1, #5
   1bda4:	f011 f871 	bl	2ce8a <bt_l2cap_send_cb>
	if (err) {
   1bda8:	4605      	mov	r5, r0
   1bdaa:	b110      	cbz	r0, 1bdb2 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   1bdac:	4620      	mov	r0, r4
   1bdae:	f004 fec9 	bl	20b44 <net_buf_unref>
}
   1bdb2:	4628      	mov	r0, r5
   1bdb4:	b002      	add	sp, #8
   1bdb6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1bdb8:	f06f 050b 	mvn.w	r5, #11
   1bdbc:	e7f9      	b.n	1bdb2 <bt_l2cap_update_conn_param+0x52>
   1bdbe:	bf00      	nop
   1bdc0:	200056db 	.word	0x200056db

0001bdc4 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1bdc4:	2823      	cmp	r0, #35	; 0x23
   1bdc6:	d81f      	bhi.n	1be08 <att_op_get_type+0x44>
   1bdc8:	281a      	cmp	r0, #26
   1bdca:	d804      	bhi.n	1bdd6 <att_op_get_type+0x12>
   1bdcc:	1e43      	subs	r3, r0, #1
   1bdce:	2b18      	cmp	r3, #24
   1bdd0:	d90e      	bls.n	1bdf0 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1bdd2:	2006      	movs	r0, #6
   1bdd4:	4770      	bx	lr
	switch (op) {
   1bdd6:	f1a0 031b 	sub.w	r3, r0, #27
   1bdda:	2b08      	cmp	r3, #8
   1bddc:	d81e      	bhi.n	1be1c <att_op_get_type+0x58>
   1bdde:	e8df f003 	tbb	[pc, r3]
   1bde2:	1d05      	.short	0x1d05
   1bde4:	191d231b 	.word	0x191d231b
   1bde8:	1d25      	.short	0x1d25
   1bdea:	05          	.byte	0x05
   1bdeb:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   1bdec:	2003      	movs	r0, #3
   1bdee:	4770      	bx	lr
	switch (op) {
   1bdf0:	4a0f      	ldr	r2, [pc, #60]	; (1be30 <att_op_get_type+0x6c>)
   1bdf2:	2301      	movs	r3, #1
   1bdf4:	4083      	lsls	r3, r0
   1bdf6:	401a      	ands	r2, r3
   1bdf8:	b9c2      	cbnz	r2, 1be2c <att_op_get_type+0x68>
   1bdfa:	4a0e      	ldr	r2, [pc, #56]	; (1be34 <att_op_get_type+0x70>)
   1bdfc:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   1bdfe:	2a00      	cmp	r2, #0
   1be00:	bf14      	ite	ne
   1be02:	2001      	movne	r0, #1
   1be04:	2006      	moveq	r0, #6
   1be06:	4770      	bx	lr
	switch (op) {
   1be08:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1be0c:	2b52      	cmp	r3, #82	; 0x52
   1be0e:	d105      	bne.n	1be1c <att_op_get_type+0x58>
		return ATT_COMMAND;
   1be10:	2000      	movs	r0, #0
}
   1be12:	4770      	bx	lr
		return ATT_REQUEST;
   1be14:	2001      	movs	r0, #1
   1be16:	4770      	bx	lr
		return ATT_INDICATION;
   1be18:	2005      	movs	r0, #5
   1be1a:	4770      	bx	lr
		return ATT_COMMAND;
   1be1c:	f010 0f40 	tst.w	r0, #64	; 0x40
   1be20:	bf0c      	ite	eq
   1be22:	2006      	moveq	r0, #6
   1be24:	2000      	movne	r0, #0
   1be26:	4770      	bx	lr
	switch (op) {
   1be28:	2004      	movs	r0, #4
   1be2a:	4770      	bx	lr
		return ATT_RESPONSE;
   1be2c:	2002      	movs	r0, #2
   1be2e:	4770      	bx	lr
   1be30:	028aaaaa 	.word	0x028aaaaa
   1be34:	01455554 	.word	0x01455554

0001be38 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1be38:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1be3a:	3804      	subs	r0, #4
   1be3c:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1be3e:	a901      	add	r1, sp, #4
   1be40:	4802      	ldr	r0, [pc, #8]	; (1be4c <bt_att_released+0x14>)
   1be42:	f013 fb03 	bl	2f44c <k_mem_slab_free>
}
   1be46:	b003      	add	sp, #12
   1be48:	f85d fb04 	ldr.w	pc, [sp], #4
   1be4c:	20000bf4 	.word	0x20000bf4

0001be50 <tx_meta_data_free>:
{
   1be50:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   1be52:	2100      	movs	r1, #0
{
   1be54:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   1be56:	2214      	movs	r2, #20
   1be58:	f010 fa4c 	bl	2c2f4 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1be5c:	4621      	mov	r1, r4
   1be5e:	4802      	ldr	r0, [pc, #8]	; (1be68 <tx_meta_data_free+0x18>)
}
   1be60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1be64:	f013 bbbc 	b.w	2f5e0 <k_queue_append>
   1be68:	20000d04 	.word	0x20000d04

0001be6c <find_type_cb>:
{
   1be6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be70:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1be72:	f8d2 a000 	ldr.w	sl, [r2]
{
   1be76:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   1be78:	f8da 3004 	ldr.w	r3, [sl, #4]
   1be7c:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1be7e:	2500      	movs	r5, #0
   1be80:	f642 0301 	movw	r3, #10241	; 0x2801
{
   1be84:	4680      	mov	r8, r0
   1be86:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1be88:	6800      	ldr	r0, [r0, #0]
   1be8a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1be8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1be90:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   1be94:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1be96:	f010 fab9 	bl	2c40c <bt_uuid_cmp>
   1be9a:	2800      	cmp	r0, #0
   1be9c:	d070      	beq.n	1bf80 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1be9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1bea2:	f8d8 0000 	ldr.w	r0, [r8]
   1bea6:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1beaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1beac:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1beb0:	f010 faac 	bl	2c40c <bt_uuid_cmp>
   1beb4:	b138      	cbz	r0, 1bec6 <find_type_cb+0x5a>
		if (data->group &&
   1beb6:	68a3      	ldr	r3, [r4, #8]
   1beb8:	b11b      	cbz	r3, 1bec2 <find_type_cb+0x56>
   1beba:	885a      	ldrh	r2, [r3, #2]
   1bebc:	42b2      	cmp	r2, r6
   1bebe:	d200      	bcs.n	1bec2 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1bec0:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1bec2:	2001      	movs	r0, #1
   1bec4:	e009      	b.n	1beda <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1bec6:	6861      	ldr	r1, [r4, #4]
   1bec8:	4608      	mov	r0, r1
   1beca:	f011 f816 	bl	2cefa <net_buf_frags_len>
   1bece:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1bed2:	1a1b      	subs	r3, r3, r0
   1bed4:	2b03      	cmp	r3, #3
   1bed6:	d804      	bhi.n	1bee2 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   1bed8:	2000      	movs	r0, #0
}
   1beda:	3744      	adds	r7, #68	; 0x44
   1bedc:	46bd      	mov	sp, r7
   1bede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1bee2:	4608      	mov	r0, r1
   1bee4:	f012 fbe7 	bl	2e6b6 <net_buf_frag_last>
   1bee8:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1beea:	6860      	ldr	r0, [r4, #4]
   1beec:	f011 f805 	bl	2cefa <net_buf_frags_len>
   1bef0:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1bef4:	f105 090c 	add.w	r9, r5, #12
   1bef8:	ebab 0b00 	sub.w	fp, fp, r0
   1befc:	4648      	mov	r0, r9
   1befe:	f012 fc3b 	bl	2e778 <net_buf_simple_tailroom>
   1bf02:	4558      	cmp	r0, fp
   1bf04:	d93f      	bls.n	1bf86 <find_type_cb+0x11a>
   1bf06:	6860      	ldr	r0, [r4, #4]
   1bf08:	f010 fff7 	bl	2cefa <net_buf_frags_len>
   1bf0c:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1bf10:	1a18      	subs	r0, r3, r0
	if (!len) {
   1bf12:	b970      	cbnz	r0, 1bf32 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1bf14:	6863      	ldr	r3, [r4, #4]
   1bf16:	7a98      	ldrb	r0, [r3, #10]
   1bf18:	f004 fd52 	bl	209c0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1bf1c:	2200      	movs	r2, #0
   1bf1e:	2300      	movs	r3, #0
   1bf20:	f012 fb8f 	bl	2e642 <net_buf_alloc_fixed>
		if (!frag) {
   1bf24:	4605      	mov	r5, r0
   1bf26:	2800      	cmp	r0, #0
   1bf28:	d0d6      	beq.n	1bed8 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   1bf2a:	4601      	mov	r1, r0
   1bf2c:	6860      	ldr	r0, [r4, #4]
   1bf2e:	f012 fbd3 	bl	2e6d8 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1bf32:	2300      	movs	r3, #0
   1bf34:	9300      	str	r3, [sp, #0]
   1bf36:	f8d8 a004 	ldr.w	sl, [r8, #4]
   1bf3a:	6878      	ldr	r0, [r7, #4]
   1bf3c:	4641      	mov	r1, r8
   1bf3e:	2310      	movs	r3, #16
   1bf40:	f107 0208 	add.w	r2, r7, #8
   1bf44:	47d0      	blx	sl
	if (read < 0) {
   1bf46:	f1b0 0800 	subs.w	r8, r0, #0
   1bf4a:	db19      	blt.n	1bf80 <find_type_cb+0x114>
	if (read != data->value_len) {
   1bf4c:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1bf4e:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1bf50:	4542      	cmp	r2, r8
   1bf52:	d03f      	beq.n	1bfd4 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1bf54:	4601      	mov	r1, r0
   1bf56:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1bf5a:	f010 fa85 	bl	2c468 <bt_uuid_create>
   1bf5e:	b9b0      	cbnz	r0, 1bf8e <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1bf60:	466d      	mov	r5, sp
   1bf62:	b088      	sub	sp, #32
   1bf64:	7c23      	ldrb	r3, [r4, #16]
   1bf66:	aa02      	add	r2, sp, #8
   1bf68:	491d      	ldr	r1, [pc, #116]	; (1bfe0 <find_type_cb+0x174>)
   1bf6a:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   1bf6e:	2303      	movs	r3, #3
   1bf70:	f842 3f10 	str.w	r3, [r2, #16]!
   1bf74:	481b      	ldr	r0, [pc, #108]	; (1bfe4 <find_type_cb+0x178>)
   1bf76:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1bf7a:	f011 f8ac 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
   1bf7e:	46ad      	mov	sp, r5
	data->group = NULL;
   1bf80:	2300      	movs	r3, #0
   1bf82:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1bf84:	e79d      	b.n	1bec2 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   1bf86:	4648      	mov	r0, r9
   1bf88:	f012 fbf6 	bl	2e778 <net_buf_simple_tailroom>
   1bf8c:	e7c1      	b.n	1bf12 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1bf8e:	fa5f f288 	uxtb.w	r2, r8
   1bf92:	f107 0108 	add.w	r1, r7, #8
   1bf96:	f107 0018 	add.w	r0, r7, #24
   1bf9a:	f010 fa65 	bl	2c468 <bt_uuid_create>
   1bf9e:	b930      	cbnz	r0, 1bfae <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   1bfa0:	466d      	mov	r5, sp
   1bfa2:	b088      	sub	sp, #32
   1bfa4:	aa02      	add	r2, sp, #8
   1bfa6:	4b10      	ldr	r3, [pc, #64]	; (1bfe8 <find_type_cb+0x17c>)
   1bfa8:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1bfac:	e7df      	b.n	1bf6e <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1bfae:	f107 0118 	add.w	r1, r7, #24
   1bfb2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1bfb6:	f010 fa29 	bl	2c40c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1bfba:	2800      	cmp	r0, #0
   1bfbc:	d1e0      	bne.n	1bf80 <find_type_cb+0x114>
	data->err = 0x00;
   1bfbe:	2300      	movs	r3, #0
   1bfc0:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1bfc2:	2104      	movs	r1, #4
   1bfc4:	f105 000c 	add.w	r0, r5, #12
   1bfc8:	f012 fb9b 	bl	2e702 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1bfcc:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1bfce:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1bfd0:	68a3      	ldr	r3, [r4, #8]
   1bfd2:	e775      	b.n	1bec0 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   1bfd4:	f107 0108 	add.w	r1, r7, #8
   1bfd8:	f010 f95a 	bl	2c290 <memcmp>
   1bfdc:	e7ed      	b.n	1bfba <find_type_cb+0x14e>
   1bfde:	bf00      	nop
   1bfe0:	00032d54 	.word	0x00032d54
   1bfe4:	00030284 	.word	0x00030284
   1bfe8:	00032d73 	.word	0x00032d73

0001bfec <chan_send>:
{
   1bfec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bff0:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1bff2:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   1bff6:	68cb      	ldr	r3, [r1, #12]
{
   1bff8:	b089      	sub	sp, #36	; 0x24
   1bffa:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1bffc:	3034      	adds	r0, #52	; 0x34
   1bffe:	2102      	movs	r1, #2
   1c000:	f010 ff95 	bl	2cf2e <atomic_test_bit>
   1c004:	b970      	cbnz	r0, 1c024 <chan_send+0x38>
		LOG_ERR("ATT channel not connected");
   1c006:	4b2e      	ldr	r3, [pc, #184]	; (1c0c0 <chan_send+0xd4>)
   1c008:	482e      	ldr	r0, [pc, #184]	; (1c0c4 <chan_send+0xd8>)
   1c00a:	e9cd 1306 	strd	r1, r3, [sp, #24]
   1c00e:	aa06      	add	r2, sp, #24
   1c010:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   1c014:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("ATT channel not connected");
   1c018:	f011 f85d 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
}
   1c01c:	4628      	mov	r0, r5
   1c01e:	b009      	add	sp, #36	; 0x24
   1c020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1c024:	781b      	ldrb	r3, [r3, #0]
   1c026:	2bd2      	cmp	r3, #210	; 0xd2
   1c028:	d117      	bne.n	1c05a <chan_send+0x6e>
		err = bt_smp_sign(chan->att->conn, buf);
   1c02a:	6833      	ldr	r3, [r6, #0]
   1c02c:	4621      	mov	r1, r4
   1c02e:	6818      	ldr	r0, [r3, #0]
   1c030:	f012 f98f 	bl	2e352 <bt_smp_sign>
		if (err) {
   1c034:	4605      	mov	r5, r0
   1c036:	b180      	cbz	r0, 1c05a <chan_send+0x6e>
			LOG_ERR("Error signing data");
   1c038:	4b23      	ldr	r3, [pc, #140]	; (1c0c8 <chan_send+0xdc>)
   1c03a:	9307      	str	r3, [sp, #28]
   1c03c:	aa06      	add	r2, sp, #24
   1c03e:	2302      	movs	r3, #2
   1c040:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c044:	481f      	ldr	r0, [pc, #124]	; (1c0c4 <chan_send+0xd8>)
   1c046:	9306      	str	r3, [sp, #24]
   1c048:	f011 f845 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1c04c:	69a0      	ldr	r0, [r4, #24]
   1c04e:	f7ff feff 	bl	1be50 <tx_meta_data_free>
			net_buf_unref(buf);
   1c052:	4620      	mov	r0, r4
   1c054:	f004 fd76 	bl	20b44 <net_buf_unref>
			return err;
   1c058:	e7e0      	b.n	1c01c <chan_send+0x30>
	state->offset = net_buf_simple_headroom(buf);
   1c05a:	f104 000c 	add.w	r0, r4, #12
   1c05e:	f012 fb87 	bl	2e770 <net_buf_simple_headroom>
	state->len = buf->len;
   1c062:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   1c066:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1c06a:	6833      	ldr	r3, [r6, #0]
   1c06c:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1c06e:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1c070:	4607      	mov	r7, r0
   1c072:	7818      	ldrb	r0, [r3, #0]
   1c074:	f7ff fea6 	bl	1bdc4 <att_op_get_type>
	switch (op_type) {
   1c078:	2805      	cmp	r0, #5
   1c07a:	bf96      	itet	ls
   1c07c:	4b13      	ldrls	r3, [pc, #76]	; (1c0cc <chan_send+0xe0>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1c07e:	4b14      	ldrhi	r3, [pc, #80]	; (1c0d0 <chan_send+0xe4>)
   1c080:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1c084:	f8cd 9000 	str.w	r9, [sp]
   1c088:	4628      	mov	r0, r5
   1c08a:	4622      	mov	r2, r4
   1c08c:	2104      	movs	r1, #4
   1c08e:	f010 fefc 	bl	2ce8a <bt_l2cap_send_cb>
	if (err) {
   1c092:	4605      	mov	r5, r0
   1c094:	2800      	cmp	r0, #0
   1c096:	d0c1      	beq.n	1c01c <chan_send+0x30>
		if (err == -ENOBUFS) {
   1c098:	f110 0f69 	cmn.w	r0, #105	; 0x69
   1c09c:	d109      	bne.n	1c0b2 <chan_send+0xc6>
			LOG_ERR("Ran out of TX buffers or contexts.");
   1c09e:	4b0d      	ldr	r3, [pc, #52]	; (1c0d4 <chan_send+0xe8>)
   1c0a0:	9307      	str	r3, [sp, #28]
   1c0a2:	4808      	ldr	r0, [pc, #32]	; (1c0c4 <chan_send+0xd8>)
   1c0a4:	2302      	movs	r3, #2
   1c0a6:	aa06      	add	r2, sp, #24
   1c0a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c0ac:	9306      	str	r3, [sp, #24]
   1c0ae:	f011 f812 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
	buf->data = buf->__buf + state->offset;
   1c0b2:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1c0b4:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1c0b8:	fa13 f787 	uxtah	r7, r3, r7
   1c0bc:	60e7      	str	r7, [r4, #12]
}
   1c0be:	e7ad      	b.n	1c01c <chan_send+0x30>
   1c0c0:	00032d92 	.word	0x00032d92
   1c0c4:	00030284 	.word	0x00030284
   1c0c8:	00032dac 	.word	0x00032dac
   1c0cc:	000308e0 	.word	0x000308e0
   1c0d0:	0002d4cb 	.word	0x0002d4cb
   1c0d4:	00032dbf 	.word	0x00032dbf

0001c0d8 <att_get>:
{
   1c0d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1c0da:	7b43      	ldrb	r3, [r0, #13]
   1c0dc:	2b07      	cmp	r3, #7
   1c0de:	d00d      	beq.n	1c0fc <att_get+0x24>
		LOG_WRN("Not connected");
   1c0e0:	4b13      	ldr	r3, [pc, #76]	; (1c130 <att_get+0x58>)
   1c0e2:	9305      	str	r3, [sp, #20]
   1c0e4:	2302      	movs	r3, #2
   1c0e6:	9304      	str	r3, [sp, #16]
   1c0e8:	aa04      	add	r2, sp, #16
   1c0ea:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Unable to find ATT channel");
   1c0ee:	4811      	ldr	r0, [pc, #68]	; (1c134 <att_get+0x5c>)
   1c0f0:	f010 fff1 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
		return NULL;
   1c0f4:	2000      	movs	r0, #0
}
   1c0f6:	b007      	add	sp, #28
   1c0f8:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1c0fc:	2104      	movs	r1, #4
   1c0fe:	f010 fee7 	bl	2ced0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1c102:	4603      	mov	r3, r0
   1c104:	b938      	cbnz	r0, 1c116 <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   1c106:	4b0c      	ldr	r3, [pc, #48]	; (1c138 <att_get+0x60>)
   1c108:	9305      	str	r3, [sp, #20]
   1c10a:	2302      	movs	r3, #2
   1c10c:	9304      	str	r3, [sp, #16]
   1c10e:	aa04      	add	r2, sp, #16
   1c110:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c114:	e7eb      	b.n	1c0ee <att_get+0x16>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   1c116:	2102      	movs	r1, #2
   1c118:	3030      	adds	r0, #48	; 0x30
   1c11a:	f010 ff08 	bl	2cf2e <atomic_test_bit>
   1c11e:	b918      	cbnz	r0, 1c128 <att_get+0x50>
		LOG_ERR("ATT channel not connected");
   1c120:	4b06      	ldr	r3, [pc, #24]	; (1c13c <att_get+0x64>)
   1c122:	e9cd 1304 	strd	r1, r3, [sp, #16]
   1c126:	e7f2      	b.n	1c10e <att_get+0x36>
	return att_chan->att;
   1c128:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1c12c:	e7e3      	b.n	1c0f6 <att_get+0x1e>
   1c12e:	bf00      	nop
   1c130:	00032de2 	.word	0x00032de2
   1c134:	00030284 	.word	0x00030284
   1c138:	00032df0 	.word	0x00032df0
   1c13c:	00032d92 	.word	0x00032d92

0001c140 <bt_att_connected>:
{
   1c140:	b510      	push	{r4, lr}
   1c142:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1c146:	4604      	mov	r4, r0
   1c148:	f3bf 8f5b 	dmb	ish
   1c14c:	e853 1f00 	ldrex	r1, [r3]
   1c150:	f041 0104 	orr.w	r1, r1, #4
   1c154:	e843 1200 	strex	r2, r1, [r3]
   1c158:	2a00      	cmp	r2, #0
   1c15a:	d1f7      	bne.n	1c14c <bt_att_connected+0xc>
   1c15c:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1c160:	2317      	movs	r3, #23
   1c162:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1c164:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1c166:	1f20      	subs	r0, r4, #4
   1c168:	f010 ff72 	bl	2d050 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1c16c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   1c170:	4903      	ldr	r1, [pc, #12]	; (1c180 <bt_att_connected+0x40>)
   1c172:	f013 fb15 	bl	2f7a0 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1c176:	6820      	ldr	r0, [r4, #0]
}
   1c178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1c17c:	f002 ba44 	b.w	1e608 <bt_gatt_connected>
   1c180:	0001ce71 	.word	0x0001ce71

0001c184 <read_group_cb>:
{
   1c184:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1c188:	4605      	mov	r5, r0
   1c18a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1c18c:	f04f 0800 	mov.w	r8, #0
   1c190:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c194:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1c196:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1c198:	f88d 8008 	strb.w	r8, [sp, #8]
   1c19c:	a902      	add	r1, sp, #8
{
   1c19e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1c1a0:	f8ad 300a 	strh.w	r3, [sp, #10]
   1c1a4:	f010 f932 	bl	2c40c <bt_uuid_cmp>
   1c1a8:	b1a0      	cbz	r0, 1c1d4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c1aa:	f642 0301 	movw	r3, #10241	; 0x2801
   1c1ae:	6828      	ldr	r0, [r5, #0]
   1c1b0:	f88d 800c 	strb.w	r8, [sp, #12]
   1c1b4:	a903      	add	r1, sp, #12
   1c1b6:	f8ad 300e 	strh.w	r3, [sp, #14]
   1c1ba:	f010 f927 	bl	2c40c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1c1be:	b148      	cbz	r0, 1c1d4 <read_group_cb+0x50>
		if (data->group &&
   1c1c0:	6923      	ldr	r3, [r4, #16]
   1c1c2:	b11b      	cbz	r3, 1c1cc <read_group_cb+0x48>
   1c1c4:	885a      	ldrh	r2, [r3, #2]
   1c1c6:	42b2      	cmp	r2, r6
   1c1c8:	d200      	bcs.n	1c1cc <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1c1ca:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1c1cc:	2001      	movs	r0, #1
}
   1c1ce:	b004      	add	sp, #16
   1c1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1c1d4:	6861      	ldr	r1, [r4, #4]
   1c1d6:	6828      	ldr	r0, [r5, #0]
   1c1d8:	f010 f918 	bl	2c40c <bt_uuid_cmp>
   1c1dc:	b110      	cbz	r0, 1c1e4 <read_group_cb+0x60>
		data->group = NULL;
   1c1de:	2300      	movs	r3, #0
   1c1e0:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1c1e2:	e7f3      	b.n	1c1cc <read_group_cb+0x48>
	if (data->rsp->len &&
   1c1e4:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1c1e6:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1c1e8:	781a      	ldrb	r2, [r3, #0]
   1c1ea:	b132      	cbz	r2, 1c1fa <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1c1ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1c1ee:	8a01      	ldrh	r1, [r0, #16]
   1c1f0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1c1f2:	4293      	cmp	r3, r2
   1c1f4:	da01      	bge.n	1c1fa <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1c1f6:	2000      	movs	r0, #0
   1c1f8:	e7e9      	b.n	1c1ce <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1c1fa:	2104      	movs	r1, #4
   1c1fc:	300c      	adds	r0, #12
   1c1fe:	f012 fa80 	bl	2e702 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1c202:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1c204:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1c206:	6923      	ldr	r3, [r4, #16]
   1c208:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1c20a:	4b08      	ldr	r3, [pc, #32]	; (1c22c <read_group_cb+0xa8>)
   1c20c:	9300      	str	r3, [sp, #0]
   1c20e:	9401      	str	r4, [sp, #4]
   1c210:	68a2      	ldr	r2, [r4, #8]
   1c212:	2300      	movs	r3, #0
   1c214:	4629      	mov	r1, r5
   1c216:	4638      	mov	r0, r7
   1c218:	f010 ff9f 	bl	2d15a <att_chan_read>
	if (read < 0) {
   1c21c:	2800      	cmp	r0, #0
   1c21e:	dbea      	blt.n	1c1f6 <read_group_cb+0x72>
	if (!data->group) {
   1c220:	6920      	ldr	r0, [r4, #16]
   1c222:	3800      	subs	r0, #0
   1c224:	bf18      	it	ne
   1c226:	2001      	movne	r0, #1
   1c228:	e7d1      	b.n	1c1ce <read_group_cb+0x4a>
   1c22a:	bf00      	nop
   1c22c:	0002d0b7 	.word	0x0002d0b7

0001c230 <read_type_cb>:
{
   1c230:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1c234:	6817      	ldr	r7, [r2, #0]
{
   1c236:	4605      	mov	r5, r0
   1c238:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1c23a:	6800      	ldr	r0, [r0, #0]
   1c23c:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1c23e:	687e      	ldr	r6, [r7, #4]
{
   1c240:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1c242:	f010 f8e3 	bl	2c40c <bt_uuid_cmp>
   1c246:	4681      	mov	r9, r0
   1c248:	2800      	cmp	r0, #0
   1c24a:	d13c      	bne.n	1c2c6 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c24c:	4630      	mov	r0, r6
   1c24e:	2295      	movs	r2, #149	; 0x95
   1c250:	4629      	mov	r1, r5
   1c252:	f011 fd00 	bl	2dc56 <bt_gatt_check_perm>
   1c256:	4606      	mov	r6, r0
   1c258:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c25a:	b140      	cbz	r0, 1c26e <read_type_cb+0x3e>
		if (data->rsp->len) {
   1c25c:	68e3      	ldr	r3, [r4, #12]
   1c25e:	781b      	ldrb	r3, [r3, #0]
   1c260:	b10b      	cbz	r3, 1c266 <read_type_cb+0x36>
			data->err = 0x00;
   1c262:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1c266:	2000      	movs	r0, #0
}
   1c268:	b003      	add	sp, #12
   1c26a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1c26e:	68a0      	ldr	r0, [r4, #8]
   1c270:	f012 fa21 	bl	2e6b6 <net_buf_frag_last>
   1c274:	2102      	movs	r1, #2
   1c276:	300c      	adds	r0, #12
   1c278:	f012 fa43 	bl	2e702 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1c27c:	4b13      	ldr	r3, [pc, #76]	; (1c2cc <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1c27e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1c280:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1c284:	9300      	str	r3, [sp, #0]
   1c286:	9401      	str	r4, [sp, #4]
   1c288:	68a2      	ldr	r2, [r4, #8]
   1c28a:	4633      	mov	r3, r6
   1c28c:	4629      	mov	r1, r5
   1c28e:	4638      	mov	r0, r7
   1c290:	f010 ff63 	bl	2d15a <att_chan_read>
	if (read < 0) {
   1c294:	2800      	cmp	r0, #0
   1c296:	da07      	bge.n	1c2a8 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   1c298:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1c29c:	bf26      	itte	cs
   1c29e:	4240      	negcs	r0, r0
   1c2a0:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1c2a2:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1c2a4:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1c2a6:	e7de      	b.n	1c266 <read_type_cb+0x36>
	if (!data->item) {
   1c2a8:	6923      	ldr	r3, [r4, #16]
   1c2aa:	2b00      	cmp	r3, #0
   1c2ac:	d0db      	beq.n	1c266 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1c2ae:	68a0      	ldr	r0, [r4, #8]
   1c2b0:	f010 fe23 	bl	2cefa <net_buf_frags_len>
   1c2b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1c2b6:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1c2b8:	68e3      	ldr	r3, [r4, #12]
   1c2ba:	781b      	ldrb	r3, [r3, #0]
   1c2bc:	4298      	cmp	r0, r3
   1c2be:	bf94      	ite	ls
   1c2c0:	2000      	movls	r0, #0
   1c2c2:	2001      	movhi	r0, #1
   1c2c4:	e7d0      	b.n	1c268 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1c2c6:	2001      	movs	r0, #1
   1c2c8:	e7ce      	b.n	1c268 <read_type_cb+0x38>
   1c2ca:	bf00      	nop
   1c2cc:	0002cf0b 	.word	0x0002cf0b

0001c2d0 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1c2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c2d4:	b082      	sub	sp, #8
   1c2d6:	af00      	add	r7, sp, #0
   1c2d8:	4604      	mov	r4, r0
   1c2da:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1c2dc:	483b      	ldr	r0, [pc, #236]	; (1c3cc <bt_att_accept+0xfc>)
   1c2de:	2200      	movs	r2, #0
   1c2e0:	2300      	movs	r3, #0
   1c2e2:	4639      	mov	r1, r7
   1c2e4:	f009 fdea 	bl	25ebc <k_mem_slab_alloc>
   1c2e8:	4605      	mov	r5, r0
   1c2ea:	b1a8      	cbz	r0, 1c318 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   1c2ec:	466d      	mov	r5, sp
   1c2ee:	b088      	sub	sp, #32
   1c2f0:	466a      	mov	r2, sp
   1c2f2:	4b37      	ldr	r3, [pc, #220]	; (1c3d0 <bt_att_accept+0x100>)
   1c2f4:	4837      	ldr	r0, [pc, #220]	; (1c3d4 <bt_att_accept+0x104>)
   1c2f6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c2fa:	2303      	movs	r3, #3
   1c2fc:	f842 3f10 	str.w	r3, [r2, #16]!
   1c300:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c304:	f010 fee7 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
   1c308:	46ad      	mov	sp, r5
		return -ENOMEM;
   1c30a:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1c30e:	4628      	mov	r0, r5
   1c310:	3708      	adds	r7, #8
   1c312:	46bd      	mov	sp, r7
   1c314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   1c318:	f00a fcf4 	bl	26d04 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1c31c:	4b2e      	ldr	r3, [pc, #184]	; (1c3d8 <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   1c31e:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   1c320:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   1c322:	222c      	movs	r2, #44	; 0x2c
   1c324:	6838      	ldr	r0, [r7, #0]
   1c326:	f00f ffe5 	bl	2c2f4 <memset>
	att->conn = conn;
   1c32a:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1c32c:	482b      	ldr	r0, [pc, #172]	; (1c3dc <bt_att_accept+0x10c>)
	att->conn = conn;
   1c32e:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   1c330:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1c332:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   1c334:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1c338:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1c33c:	2200      	movs	r2, #0
   1c33e:	2300      	movs	r3, #0
   1c340:	1d39      	adds	r1, r7, #4
   1c342:	f009 fdbb 	bl	25ebc <k_mem_slab_alloc>
   1c346:	4605      	mov	r5, r0
   1c348:	b180      	cbz	r0, 1c36c <bt_att_accept+0x9c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1c34a:	6823      	ldr	r3, [r4, #0]
   1c34c:	466c      	mov	r4, sp
   1c34e:	b088      	sub	sp, #32
   1c350:	466a      	mov	r2, sp
   1c352:	4923      	ldr	r1, [pc, #140]	; (1c3e0 <bt_att_accept+0x110>)
   1c354:	481f      	ldr	r0, [pc, #124]	; (1c3d4 <bt_att_accept+0x104>)
   1c356:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c35a:	2303      	movs	r3, #3
   1c35c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c360:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c364:	f010 feb7 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
   1c368:	46a5      	mov	sp, r4
	if (!chan) {
   1c36a:	e7ce      	b.n	1c30a <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   1c36c:	4601      	mov	r1, r0
   1c36e:	2290      	movs	r2, #144	; 0x90
   1c370:	6878      	ldr	r0, [r7, #4]
   1c372:	f00f ffbf 	bl	2c2f4 <memset>
	chan->chan.chan.ops = &ops;
   1c376:	6878      	ldr	r0, [r7, #4]
   1c378:	4b1a      	ldr	r3, [pc, #104]	; (1c3e4 <bt_att_accept+0x114>)
   1c37a:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   1c37c:	303c      	adds	r0, #60	; 0x3c
   1c37e:	f013 f923 	bl	2f5c8 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c382:	687b      	ldr	r3, [r7, #4]
   1c384:	f3bf 8f5b 	dmb	ish
   1c388:	3334      	adds	r3, #52	; 0x34
   1c38a:	e853 2f00 	ldrex	r2, [r3]
   1c38e:	e843 5100 	strex	r1, r5, [r3]
   1c392:	2900      	cmp	r1, #0
   1c394:	d1f9      	bne.n	1c38a <bt_att_accept+0xba>
   1c396:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1c39a:	687b      	ldr	r3, [r7, #4]
   1c39c:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1c39e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   1c3a0:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1c3a4:	b91b      	cbnz	r3, 1c3ae <bt_att_accept+0xde>
   1c3a6:	f104 000c 	add.w	r0, r4, #12
   1c3aa:	f013 f90d 	bl	2f5c8 <z_impl_k_queue_init>
	return list->head;
   1c3ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   1c3b0:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   1c3b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1c3b6:	f108 0388 	add.w	r3, r8, #136	; 0x88
	list->head = node;
   1c3ba:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1c3bc:	b902      	cbnz	r2, 1c3c0 <bt_att_accept+0xf0>
	list->tail = node;
   1c3be:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   1c3c0:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   1c3c2:	2b00      	cmp	r3, #0
   1c3c4:	d0a1      	beq.n	1c30a <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   1c3c6:	3304      	adds	r3, #4
   1c3c8:	6033      	str	r3, [r6, #0]
	return 0;
   1c3ca:	e7a0      	b.n	1c30e <bt_att_accept+0x3e>
   1c3cc:	20000bd8 	.word	0x20000bd8
   1c3d0:	00032e0b 	.word	0x00032e0b
   1c3d4:	00030284 	.word	0x00030284
   1c3d8:	20003b8c 	.word	0x20003b8c
   1c3dc:	20000bf4 	.word	0x20000bf4
   1c3e0:	00032e30 	.word	0x00032e30
   1c3e4:	20000894 	.word	0x20000894

0001c3e8 <bt_att_chan_create_pdu>:
{
   1c3e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   1c3ec:	b086      	sub	sp, #24
   1c3ee:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c3f0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1c3f2:	1c53      	adds	r3, r2, #1
   1c3f4:	428b      	cmp	r3, r1
{
   1c3f6:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c3f8:	d915      	bls.n	1c426 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1c3fa:	466c      	mov	r4, sp
   1c3fc:	b088      	sub	sp, #32
   1c3fe:	466a      	mov	r2, sp
   1c400:	482d      	ldr	r0, [pc, #180]	; (1c4b8 <bt_att_chan_create_pdu+0xd0>)
   1c402:	61d3      	str	r3, [r2, #28]
   1c404:	2304      	movs	r3, #4
   1c406:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1c40a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c40e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1c412:	482a      	ldr	r0, [pc, #168]	; (1c4bc <bt_att_chan_create_pdu+0xd4>)
   1c414:	f010 fe5f 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
   1c418:	46a5      	mov	sp, r4
		return NULL;
   1c41a:	2400      	movs	r4, #0
}
   1c41c:	4620      	mov	r0, r4
   1c41e:	3718      	adds	r7, #24
   1c420:	46bd      	mov	sp, r7
   1c422:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   1c426:	4628      	mov	r0, r5
   1c428:	f7ff fccc 	bl	1bdc4 <att_op_get_type>
   1c42c:	2802      	cmp	r0, #2
   1c42e:	d019      	beq.n	1c464 <bt_att_chan_create_pdu+0x7c>
   1c430:	2804      	cmp	r0, #4
   1c432:	d017      	beq.n	1c464 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   1c434:	f04f 38ff 	mov.w	r8, #4294967295
   1c438:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1c43c:	2100      	movs	r1, #0
   1c43e:	4642      	mov	r2, r8
   1c440:	464b      	mov	r3, r9
   1c442:	4608      	mov	r0, r1
   1c444:	f010 fd1e 	bl	2ce84 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1c448:	4604      	mov	r4, r0
   1c44a:	b980      	cbnz	r0, 1c46e <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1c44c:	466c      	mov	r4, sp
   1c44e:	b088      	sub	sp, #32
   1c450:	466a      	mov	r2, sp
   1c452:	4b1b      	ldr	r3, [pc, #108]	; (1c4c0 <bt_att_chan_create_pdu+0xd8>)
   1c454:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1c458:	2303      	movs	r3, #3
   1c45a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c45e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c462:	e7d6      	b.n	1c412 <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   1c464:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1c468:	f04f 0900 	mov.w	r9, #0
   1c46c:	e7e6      	b.n	1c43c <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   1c46e:	f00a fc49 	bl	26d04 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1c472:	4b14      	ldr	r3, [pc, #80]	; (1c4c4 <bt_att_chan_create_pdu+0xdc>)
   1c474:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1c476:	4814      	ldr	r0, [pc, #80]	; (1c4c8 <bt_att_chan_create_pdu+0xe0>)
   1c478:	bf07      	ittee	eq
   1c47a:	2200      	moveq	r2, #0
   1c47c:	2300      	moveq	r3, #0
   1c47e:	4642      	movne	r2, r8
   1c480:	464b      	movne	r3, r9
   1c482:	f009 fed5 	bl	26230 <z_impl_k_queue_get>
	if (!data) {
   1c486:	b970      	cbnz	r0, 1c4a6 <bt_att_chan_create_pdu+0xbe>
		LOG_WRN("Unable to allocate ATT TX meta");
   1c488:	4b10      	ldr	r3, [pc, #64]	; (1c4cc <bt_att_chan_create_pdu+0xe4>)
   1c48a:	617b      	str	r3, [r7, #20]
   1c48c:	480b      	ldr	r0, [pc, #44]	; (1c4bc <bt_att_chan_create_pdu+0xd4>)
   1c48e:	2302      	movs	r3, #2
   1c490:	f107 0210 	add.w	r2, r7, #16
   1c494:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1c498:	613b      	str	r3, [r7, #16]
   1c49a:	f010 fe1c 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1c49e:	4620      	mov	r0, r4
   1c4a0:	f004 fb50 	bl	20b44 <net_buf_unref>
		return NULL;
   1c4a4:	e7b9      	b.n	1c41a <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   1c4a6:	61a0      	str	r0, [r4, #24]
   1c4a8:	2101      	movs	r1, #1
   1c4aa:	f104 000c 	add.w	r0, r4, #12
   1c4ae:	f012 f928 	bl	2e702 <net_buf_simple_add>
	hdr->code = op;
   1c4b2:	7005      	strb	r5, [r0, #0]
	return buf;
   1c4b4:	e7b2      	b.n	1c41c <bt_att_chan_create_pdu+0x34>
   1c4b6:	bf00      	nop
   1c4b8:	00032e55 	.word	0x00032e55
   1c4bc:	00030284 	.word	0x00030284
   1c4c0:	00032c08 	.word	0x00032c08
   1c4c4:	200031f0 	.word	0x200031f0
   1c4c8:	20000d04 	.word	0x20000d04
   1c4cc:	00032e7a 	.word	0x00032e7a

0001c4d0 <bt_att_recv>:
{
   1c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4d4:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1c4d6:	8a0b      	ldrh	r3, [r1, #16]
{
   1c4d8:	af00      	add	r7, sp, #0
   1c4da:	4682      	mov	sl, r0
   1c4dc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1c4de:	b97b      	cbnz	r3, 1c500 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   1c4e0:	4b4c      	ldr	r3, [pc, #304]	; (1c614 <bt_att_recv+0x144>)
   1c4e2:	617b      	str	r3, [r7, #20]
   1c4e4:	2302      	movs	r3, #2
   1c4e6:	613b      	str	r3, [r7, #16]
   1c4e8:	f107 0210 	add.w	r2, r7, #16
   1c4ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_WRN("Ignoring unexpected request");
   1c4f0:	4849      	ldr	r0, [pc, #292]	; (1c618 <bt_att_recv+0x148>)
   1c4f2:	f010 fdf0 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
}
   1c4f6:	2000      	movs	r0, #0
   1c4f8:	371c      	adds	r7, #28
   1c4fa:	46bd      	mov	sp, r7
   1c4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1c500:	2101      	movs	r1, #1
   1c502:	f104 000c 	add.w	r0, r4, #12
   1c506:	f012 f923 	bl	2e750 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1c50a:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1c50e:	4605      	mov	r5, r0
   1c510:	2b00      	cmp	r3, #0
   1c512:	d0f0      	beq.n	1c4f6 <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   1c514:	7801      	ldrb	r1, [r0, #0]
   1c516:	f8df 8104 	ldr.w	r8, [pc, #260]	; 1c61c <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1c51a:	f1aa 0604 	sub.w	r6, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1c51e:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1c520:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   1c524:	4288      	cmp	r0, r1
   1c526:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1c52a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1c52e:	d114      	bne.n	1c55a <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   1c530:	f892 9002 	ldrb.w	r9, [r2, #2]
   1c534:	f1b9 0f01 	cmp.w	r9, #1
   1c538:	d131      	bne.n	1c59e <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1c53a:	2100      	movs	r1, #0
   1c53c:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   1c540:	f010 fec0 	bl	2d2c4 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1c544:	2800      	cmp	r0, #0
   1c546:	d035      	beq.n	1c5b4 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   1c548:	4b35      	ldr	r3, [pc, #212]	; (1c620 <bt_att_recv+0x150>)
   1c54a:	617b      	str	r3, [r7, #20]
   1c54c:	2302      	movs	r3, #2
   1c54e:	613b      	str	r3, [r7, #16]
   1c550:	f107 0210 	add.w	r2, r7, #16
   1c554:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1c558:	e7ca      	b.n	1c4f0 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1c55a:	3301      	adds	r3, #1
   1c55c:	2b0e      	cmp	r3, #14
   1c55e:	d1df      	bne.n	1c520 <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1c560:	466c      	mov	r4, sp
   1c562:	b088      	sub	sp, #32
   1c564:	466a      	mov	r2, sp
   1c566:	4b2f      	ldr	r3, [pc, #188]	; (1c624 <bt_att_recv+0x154>)
   1c568:	482b      	ldr	r0, [pc, #172]	; (1c618 <bt_att_recv+0x148>)
   1c56a:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1c56e:	2303      	movs	r3, #3
   1c570:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c574:	f842 3f10 	str.w	r3, [r2, #16]!
   1c578:	f010 fdad 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1c57c:	7829      	ldrb	r1, [r5, #0]
   1c57e:	46a5      	mov	sp, r4
   1c580:	4608      	mov	r0, r1
   1c582:	f7ff fc1f 	bl	1bdc4 <att_op_get_type>
   1c586:	2800      	cmp	r0, #0
   1c588:	d0b5      	beq.n	1c4f6 <bt_att_recv+0x26>
   1c58a:	2805      	cmp	r0, #5
   1c58c:	d0b3      	beq.n	1c4f6 <bt_att_recv+0x26>
	if (!req) {
   1c58e:	2900      	cmp	r1, #0
   1c590:	d0b1      	beq.n	1c4f6 <bt_att_recv+0x26>
   1c592:	2306      	movs	r3, #6
   1c594:	2200      	movs	r2, #0
   1c596:	4630      	mov	r0, r6
   1c598:	f010 fff2 	bl	2d580 <send_err_rsp.part.0>
   1c59c:	e7ab      	b.n	1c4f6 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   1c59e:	f1b9 0f05 	cmp.w	r9, #5
   1c5a2:	d107      	bne.n	1c5b4 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   1c5a4:	2101      	movs	r1, #1
   1c5a6:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   1c5aa:	f010 fe8b 	bl	2d2c4 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1c5ae:	b108      	cbz	r0, 1c5b4 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   1c5b0:	4b1d      	ldr	r3, [pc, #116]	; (1c628 <bt_att_recv+0x158>)
   1c5b2:	e7ca      	b.n	1c54a <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   1c5b4:	44d8      	add	r8, fp
   1c5b6:	8a23      	ldrh	r3, [r4, #16]
   1c5b8:	f898 2001 	ldrb.w	r2, [r8, #1]
   1c5bc:	429a      	cmp	r2, r3
   1c5be:	d916      	bls.n	1c5ee <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c5c0:	46e9      	mov	r9, sp
   1c5c2:	b088      	sub	sp, #32
   1c5c4:	7829      	ldrb	r1, [r5, #0]
   1c5c6:	466a      	mov	r2, sp
   1c5c8:	4818      	ldr	r0, [pc, #96]	; (1c62c <bt_att_recv+0x15c>)
   1c5ca:	61d1      	str	r1, [r2, #28]
   1c5cc:	2404      	movs	r4, #4
   1c5ce:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1c5d2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c5d6:	f842 4f10 	str.w	r4, [r2, #16]!
   1c5da:	480f      	ldr	r0, [pc, #60]	; (1c618 <bt_att_recv+0x148>)
   1c5dc:	f010 fd7b 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1c5e0:	f898 3002 	ldrb.w	r3, [r8, #2]
   1c5e4:	2b01      	cmp	r3, #1
   1c5e6:	46cd      	mov	sp, r9
   1c5e8:	d185      	bne.n	1c4f6 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   1c5ea:	4623      	mov	r3, r4
   1c5ec:	e00c      	b.n	1c608 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   1c5ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c5f2:	4621      	mov	r1, r4
   1c5f4:	4630      	mov	r0, r6
   1c5f6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1c5f8:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   1c5fc:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1c5fe:	f47f af7a 	bne.w	1c4f6 <bt_att_recv+0x26>
   1c602:	2800      	cmp	r0, #0
   1c604:	f43f af77 	beq.w	1c4f6 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1c608:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1c60a:	2900      	cmp	r1, #0
   1c60c:	f43f af73 	beq.w	1c4f6 <bt_att_recv+0x26>
   1c610:	e7c0      	b.n	1c594 <bt_att_recv+0xc4>
   1c612:	bf00      	nop
   1c614:	00032e99 	.word	0x00032e99
   1c618:	00030284 	.word	0x00030284
   1c61c:	000308f8 	.word	0x000308f8
   1c620:	00032ece 	.word	0x00032ece
   1c624:	00032eb4 	.word	0x00032eb4
   1c628:	00032eea 	.word	0x00032eea
   1c62c:	00032f09 	.word	0x00032f09

0001c630 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1c630:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c632:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1c634:	6803      	ldr	r3, [r0, #0]
   1c636:	460d      	mov	r5, r1
   1c638:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1c63a:	b087      	sub	sp, #28
   1c63c:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1c63e:	bf18      	it	ne
   1c640:	2101      	movne	r1, #1
   1c642:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1c644:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1c646:	f011 fbc4 	bl	2ddd2 <bt_gatt_change_aware>
   1c64a:	b948      	cbnz	r0, 1c660 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1c64c:	2105      	movs	r1, #5
   1c64e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1c652:	f010 fe37 	bl	2d2c4 <atomic_test_and_set_bit>
   1c656:	2800      	cmp	r0, #0
   1c658:	d048      	beq.n	1c6ec <att_write_rsp.constprop.0+0xbc>
			return 0;
   1c65a:	2000      	movs	r0, #0
}
   1c65c:	b007      	add	sp, #28
   1c65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1c660:	2e00      	cmp	r6, #0
   1c662:	d045      	beq.n	1c6f0 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   1c664:	2218      	movs	r2, #24
   1c666:	2100      	movs	r1, #0
   1c668:	4668      	mov	r0, sp
   1c66a:	f00f fe43 	bl	2c2f4 <memset>
	if (rsp) {
   1c66e:	bb67      	cbnz	r7, 1c6ca <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1c670:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c672:	4a20      	ldr	r2, [pc, #128]	; (1c6f4 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   1c674:	681b      	ldr	r3, [r3, #0]
   1c676:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1c678:	2300      	movs	r3, #0
   1c67a:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1c67e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c680:	9303      	str	r3, [sp, #12]
	data.len = len;
   1c682:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1c686:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c68a:	2301      	movs	r3, #1
   1c68c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c690:	4631      	mov	r1, r6
   1c692:	466b      	mov	r3, sp
   1c694:	4630      	mov	r0, r6
	data.req = req;
   1c696:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c69a:	f010 fc82 	bl	2cfa2 <bt_gatt_foreach_attr>
	if (data.err) {
   1c69e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1c6a2:	b1e3      	cbz	r3, 1c6de <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1c6a4:	2f00      	cmp	r7, #0
   1c6a6:	d0d8      	beq.n	1c65a <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1c6a8:	9b01      	ldr	r3, [sp, #4]
   1c6aa:	6998      	ldr	r0, [r3, #24]
   1c6ac:	f7ff fbd0 	bl	1be50 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1c6b0:	9801      	ldr	r0, [sp, #4]
   1c6b2:	f004 fa47 	bl	20b44 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1c6b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1c6ba:	2d00      	cmp	r5, #0
   1c6bc:	d0cd      	beq.n	1c65a <att_write_rsp.constprop.0+0x2a>
   1c6be:	4632      	mov	r2, r6
   1c6c0:	4629      	mov	r1, r5
   1c6c2:	4620      	mov	r0, r4
   1c6c4:	f010 ff5c 	bl	2d580 <send_err_rsp.part.0>
   1c6c8:	e7c7      	b.n	1c65a <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1c6ca:	2200      	movs	r2, #0
   1c6cc:	4639      	mov	r1, r7
   1c6ce:	4620      	mov	r0, r4
   1c6d0:	f7ff fe8a 	bl	1c3e8 <bt_att_chan_create_pdu>
   1c6d4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1c6d6:	2800      	cmp	r0, #0
   1c6d8:	d1ca      	bne.n	1c670 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1c6da:	200e      	movs	r0, #14
   1c6dc:	e7be      	b.n	1c65c <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   1c6de:	9901      	ldr	r1, [sp, #4]
   1c6e0:	2900      	cmp	r1, #0
   1c6e2:	d0ba      	beq.n	1c65a <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1c6e4:	4620      	mov	r0, r4
   1c6e6:	f010 fd2a 	bl	2d13e <bt_att_chan_send_rsp>
   1c6ea:	e7b6      	b.n	1c65a <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c6ec:	2012      	movs	r0, #18
   1c6ee:	e7b5      	b.n	1c65c <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1c6f0:	2001      	movs	r0, #1
   1c6f2:	e7b3      	b.n	1c65c <att_write_rsp.constprop.0+0x2c>
   1c6f4:	0002cf41 	.word	0x0002cf41

0001c6f8 <bt_att_create_pdu>:
{
   1c6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c6fa:	af00      	add	r7, sp, #0
   1c6fc:	460e      	mov	r6, r1
   1c6fe:	4615      	mov	r5, r2
	att = att_get(conn);
   1c700:	f7ff fcea 	bl	1c0d8 <att_get>
	if (!att) {
   1c704:	b1e0      	cbz	r0, 1c740 <bt_att_create_pdu+0x48>
	return list->head;
   1c706:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c708:	4618      	mov	r0, r3
   1c70a:	b11b      	cbz	r3, 1c714 <bt_att_create_pdu+0x1c>
	return node->next;
   1c70c:	f850 3988 	ldr.w	r3, [r0], #-136
   1c710:	b103      	cbz	r3, 1c714 <bt_att_create_pdu+0x1c>
   1c712:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c714:	1c6c      	adds	r4, r5, #1
   1c716:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c718:	b118      	cbz	r0, 1c722 <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c71a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1c71c:	42a1      	cmp	r1, r4
   1c71e:	d21a      	bcs.n	1c756 <bt_att_create_pdu+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c720:	b983      	cbnz	r3, 1c744 <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1c722:	466d      	mov	r5, sp
   1c724:	b088      	sub	sp, #32
   1c726:	466a      	mov	r2, sp
   1c728:	4b0f      	ldr	r3, [pc, #60]	; (1c768 <bt_att_create_pdu+0x70>)
   1c72a:	4810      	ldr	r0, [pc, #64]	; (1c76c <bt_att_create_pdu+0x74>)
   1c72c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c730:	2303      	movs	r3, #3
   1c732:	f842 3f10 	str.w	r3, [r2, #16]!
   1c736:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c73a:	f010 fccc 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
   1c73e:	46ad      	mov	sp, r5
		return NULL;
   1c740:	2000      	movs	r0, #0
   1c742:	e00c      	b.n	1c75e <bt_att_create_pdu+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c744:	4618      	mov	r0, r3
   1c746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1c74a:	b153      	cbz	r3, 1c762 <bt_att_create_pdu+0x6a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c74c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1c74e:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c750:	f1a3 0388 	sub.w	r3, r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c754:	d8f6      	bhi.n	1c744 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   1c756:	462a      	mov	r2, r5
   1c758:	4631      	mov	r1, r6
   1c75a:	f7ff fe45 	bl	1c3e8 <bt_att_chan_create_pdu>
}
   1c75e:	46bd      	mov	sp, r7
   1c760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c762:	4614      	mov	r4, r2
   1c764:	e7d9      	b.n	1c71a <bt_att_create_pdu+0x22>
   1c766:	bf00      	nop
   1c768:	00032f28 	.word	0x00032f28
   1c76c:	00030284 	.word	0x00030284

0001c770 <att_read_group_req>:
{
   1c770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1c774:	8a0e      	ldrh	r6, [r1, #16]
   1c776:	3e04      	subs	r6, #4
   1c778:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1c77a:	2e02      	cmp	r6, #2
{
   1c77c:	4604      	mov	r4, r0
   1c77e:	b08c      	sub	sp, #48	; 0x30
   1c780:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1c782:	d001      	beq.n	1c788 <att_read_group_req+0x18>
   1c784:	2e10      	cmp	r6, #16
   1c786:	d16a      	bne.n	1c85e <att_read_group_req+0xee>
   1c788:	2104      	movs	r1, #4
   1c78a:	300c      	adds	r0, #12
   1c78c:	f011 ffe0 	bl	2e750 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1c790:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1c794:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1c796:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1c798:	1d01      	adds	r1, r0, #4
   1c79a:	4632      	mov	r2, r6
   1c79c:	4640      	mov	r0, r8
   1c79e:	f00f fe63 	bl	2c468 <bt_uuid_create>
   1c7a2:	2800      	cmp	r0, #0
   1c7a4:	d05d      	beq.n	1c862 <att_read_group_req+0xf2>
	if (!start || !end) {
   1c7a6:	2d00      	cmp	r5, #0
   1c7a8:	d03a      	beq.n	1c820 <att_read_group_req+0xb0>
   1c7aa:	2600      	movs	r6, #0
   1c7ac:	2f00      	cmp	r7, #0
   1c7ae:	d036      	beq.n	1c81e <att_read_group_req+0xae>
	if (start > end) {
   1c7b0:	42bd      	cmp	r5, r7
   1c7b2:	d835      	bhi.n	1c820 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1c7b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c7b8:	a901      	add	r1, sp, #4
   1c7ba:	4640      	mov	r0, r8
   1c7bc:	f88d 6004 	strb.w	r6, [sp, #4]
   1c7c0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1c7c4:	f00f fe22 	bl	2c40c <bt_uuid_cmp>
   1c7c8:	bb70      	cbnz	r0, 1c828 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1c7ca:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1c7cc:	2214      	movs	r2, #20
   1c7ce:	2100      	movs	r1, #0
   1c7d0:	a807      	add	r0, sp, #28
   1c7d2:	f00f fd8f 	bl	2c2f4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1c7d6:	2201      	movs	r2, #1
   1c7d8:	2111      	movs	r1, #17
   1c7da:	4630      	mov	r0, r6
   1c7dc:	f7ff ff8c 	bl	1c6f8 <bt_att_create_pdu>
   1c7e0:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1c7e2:	2800      	cmp	r0, #0
   1c7e4:	d03d      	beq.n	1c862 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1c7e6:	2101      	movs	r1, #1
   1c7e8:	300c      	adds	r0, #12
	data.uuid = uuid;
   1c7ea:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1c7ee:	f011 ff88 	bl	2e702 <net_buf_simple_add>
	data.rsp->len = 0U;
   1c7f2:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1c7f4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1c7f6:	4a1c      	ldr	r2, [pc, #112]	; (1c868 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   1c7f8:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1c7fa:	4639      	mov	r1, r7
	data.group = NULL;
   1c7fc:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1c7fe:	4628      	mov	r0, r5
   1c800:	ab07      	add	r3, sp, #28
   1c802:	f010 fbce 	bl	2cfa2 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1c806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c808:	781b      	ldrb	r3, [r3, #0]
   1c80a:	bb1b      	cbnz	r3, 1c854 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1c80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c80e:	6998      	ldr	r0, [r3, #24]
   1c810:	f7ff fb1e 	bl	1be50 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1c814:	9809      	ldr	r0, [sp, #36]	; 0x24
   1c816:	f004 f995 	bl	20b44 <net_buf_unref>
	if (!req) {
   1c81a:	230a      	movs	r3, #10
   1c81c:	e001      	b.n	1c822 <att_read_group_req+0xb2>
			*err = 0U;
   1c81e:	463d      	mov	r5, r7
	if (!req) {
   1c820:	2301      	movs	r3, #1
   1c822:	462a      	mov	r2, r5
   1c824:	2110      	movs	r1, #16
   1c826:	e00e      	b.n	1c846 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1c828:	f642 0301 	movw	r3, #10241	; 0x2801
   1c82c:	a907      	add	r1, sp, #28
   1c82e:	4640      	mov	r0, r8
   1c830:	f88d 601c 	strb.w	r6, [sp, #28]
   1c834:	f8ad 301e 	strh.w	r3, [sp, #30]
   1c838:	f00f fde8 	bl	2c40c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1c83c:	2800      	cmp	r0, #0
   1c83e:	d0c4      	beq.n	1c7ca <att_read_group_req+0x5a>
	if (!req) {
   1c840:	2310      	movs	r3, #16
   1c842:	462a      	mov	r2, r5
   1c844:	4619      	mov	r1, r3
   1c846:	4620      	mov	r0, r4
   1c848:	f010 fe9a 	bl	2d580 <send_err_rsp.part.0>
		return 0;
   1c84c:	2000      	movs	r0, #0
}
   1c84e:	b00c      	add	sp, #48	; 0x30
   1c850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1c854:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c856:	4620      	mov	r0, r4
   1c858:	f010 fc71 	bl	2d13e <bt_att_chan_send_rsp>
	return 0;
   1c85c:	e7f6      	b.n	1c84c <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1c85e:	2004      	movs	r0, #4
   1c860:	e7f5      	b.n	1c84e <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1c862:	200e      	movs	r0, #14
   1c864:	e7f3      	b.n	1c84e <att_read_group_req+0xde>
   1c866:	bf00      	nop
   1c868:	0001c185 	.word	0x0001c185

0001c86c <att_read_mult_vl_req>:
{
   1c86c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1c870:	6846      	ldr	r6, [r0, #4]
{
   1c872:	b085      	sub	sp, #20
   1c874:	4604      	mov	r4, r0
   1c876:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1c878:	4630      	mov	r0, r6
   1c87a:	2101      	movs	r1, #1
   1c87c:	f011 faa9 	bl	2ddd2 <bt_gatt_change_aware>
   1c880:	b950      	cbnz	r0, 1c898 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1c882:	2105      	movs	r1, #5
   1c884:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1c888:	f010 fd1c 	bl	2d2c4 <atomic_test_and_set_bit>
   1c88c:	2800      	cmp	r0, #0
   1c88e:	d13b      	bne.n	1c908 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c890:	2012      	movs	r0, #18
}
   1c892:	b005      	add	sp, #20
   1c894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1c898:	2210      	movs	r2, #16
   1c89a:	2100      	movs	r1, #0
   1c89c:	4668      	mov	r0, sp
   1c89e:	f00f fd29 	bl	2c2f4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1c8a2:	2200      	movs	r2, #0
   1c8a4:	2121      	movs	r1, #33	; 0x21
   1c8a6:	4630      	mov	r0, r6
   1c8a8:	f7ff ff26 	bl	1c6f8 <bt_att_create_pdu>
   1c8ac:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1c8ae:	b368      	cbz	r0, 1c90c <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1c8b0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1c910 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1c8b4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1c8b6:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c8ba:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1c8be:	8a2b      	ldrh	r3, [r5, #16]
   1c8c0:	2b01      	cmp	r3, #1
   1c8c2:	d804      	bhi.n	1c8ce <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1c8c4:	9902      	ldr	r1, [sp, #8]
   1c8c6:	4620      	mov	r0, r4
   1c8c8:	f010 fc39 	bl	2d13e <bt_att_chan_send_rsp>
	return 0;
   1c8cc:	e01c      	b.n	1c908 <att_read_mult_vl_req+0x9c>
   1c8ce:	4638      	mov	r0, r7
   1c8d0:	f011 ff46 	bl	2e760 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1c8d4:	466b      	mov	r3, sp
   1c8d6:	464a      	mov	r2, r9
   1c8d8:	4601      	mov	r1, r0
   1c8da:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c8dc:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1c8e0:	f010 fb5f 	bl	2cfa2 <bt_gatt_foreach_attr>
		if (data.err) {
   1c8e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c8e8:	2b00      	cmp	r3, #0
   1c8ea:	d0e8      	beq.n	1c8be <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1c8ec:	9b02      	ldr	r3, [sp, #8]
   1c8ee:	6998      	ldr	r0, [r3, #24]
   1c8f0:	f7ff faae 	bl	1be50 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1c8f4:	9802      	ldr	r0, [sp, #8]
   1c8f6:	f004 f925 	bl	20b44 <net_buf_unref>
	if (!req) {
   1c8fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c8fe:	4632      	mov	r2, r6
   1c900:	2120      	movs	r1, #32
   1c902:	4620      	mov	r0, r4
   1c904:	f010 fe3c 	bl	2d580 <send_err_rsp.part.0>
			return 0;
   1c908:	2000      	movs	r0, #0
   1c90a:	e7c2      	b.n	1c892 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1c90c:	200e      	movs	r0, #14
   1c90e:	e7c0      	b.n	1c892 <att_read_mult_vl_req+0x26>
   1c910:	0002d335 	.word	0x0002d335

0001c914 <att_read_mult_req>:
{
   1c914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1c918:	6846      	ldr	r6, [r0, #4]
{
   1c91a:	b085      	sub	sp, #20
   1c91c:	4604      	mov	r4, r0
   1c91e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1c920:	4630      	mov	r0, r6
   1c922:	2101      	movs	r1, #1
   1c924:	f011 fa55 	bl	2ddd2 <bt_gatt_change_aware>
   1c928:	b950      	cbnz	r0, 1c940 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1c92a:	2105      	movs	r1, #5
   1c92c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1c930:	f010 fcc8 	bl	2d2c4 <atomic_test_and_set_bit>
   1c934:	2800      	cmp	r0, #0
   1c936:	d13b      	bne.n	1c9b0 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c938:	2012      	movs	r0, #18
}
   1c93a:	b005      	add	sp, #20
   1c93c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1c940:	2210      	movs	r2, #16
   1c942:	2100      	movs	r1, #0
   1c944:	4668      	mov	r0, sp
   1c946:	f00f fcd5 	bl	2c2f4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1c94a:	2200      	movs	r2, #0
   1c94c:	210f      	movs	r1, #15
   1c94e:	4630      	mov	r0, r6
   1c950:	f7ff fed2 	bl	1c6f8 <bt_att_create_pdu>
   1c954:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1c956:	b368      	cbz	r0, 1c9b4 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c958:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1c9b8 <att_read_mult_req+0xa4>
	data.chan = chan;
   1c95c:	9400      	str	r4, [sp, #0]
   1c95e:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c962:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1c966:	8a2b      	ldrh	r3, [r5, #16]
   1c968:	2b01      	cmp	r3, #1
   1c96a:	d804      	bhi.n	1c976 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1c96c:	9902      	ldr	r1, [sp, #8]
   1c96e:	4620      	mov	r0, r4
   1c970:	f010 fbe5 	bl	2d13e <bt_att_chan_send_rsp>
	return 0;
   1c974:	e01c      	b.n	1c9b0 <att_read_mult_req+0x9c>
   1c976:	4638      	mov	r0, r7
   1c978:	f011 fef2 	bl	2e760 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c97c:	466b      	mov	r3, sp
   1c97e:	464a      	mov	r2, r9
   1c980:	4601      	mov	r1, r0
   1c982:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c984:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c988:	f010 fb0b 	bl	2cfa2 <bt_gatt_foreach_attr>
		if (data.err) {
   1c98c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c990:	2b00      	cmp	r3, #0
   1c992:	d0e8      	beq.n	1c966 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1c994:	9b02      	ldr	r3, [sp, #8]
   1c996:	6998      	ldr	r0, [r3, #24]
   1c998:	f7ff fa5a 	bl	1be50 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1c99c:	9802      	ldr	r0, [sp, #8]
   1c99e:	f004 f8d1 	bl	20b44 <net_buf_unref>
	if (!req) {
   1c9a2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c9a6:	4632      	mov	r2, r6
   1c9a8:	210e      	movs	r1, #14
   1c9aa:	4620      	mov	r0, r4
   1c9ac:	f010 fde8 	bl	2d580 <send_err_rsp.part.0>
			return 0;
   1c9b0:	2000      	movs	r0, #0
   1c9b2:	e7c2      	b.n	1c93a <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1c9b4:	200e      	movs	r0, #14
   1c9b6:	e7c0      	b.n	1c93a <att_read_mult_req+0x26>
   1c9b8:	0002d2ef 	.word	0x0002d2ef

0001c9bc <att_read_rsp>:
{
   1c9bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1c9c0:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1c9c4:	4604      	mov	r4, r0
   1c9c6:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1c9c8:	4640      	mov	r0, r8
   1c9ca:	2101      	movs	r1, #1
{
   1c9cc:	4617      	mov	r7, r2
   1c9ce:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1c9d0:	f011 f9ff 	bl	2ddd2 <bt_gatt_change_aware>
   1c9d4:	b948      	cbnz	r0, 1c9ea <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1c9d6:	2105      	movs	r1, #5
   1c9d8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1c9dc:	f010 fc72 	bl	2d2c4 <atomic_test_and_set_bit>
   1c9e0:	bb78      	cbnz	r0, 1ca42 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c9e2:	2012      	movs	r0, #18
}
   1c9e4:	b004      	add	sp, #16
   1c9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1c9ea:	b38d      	cbz	r5, 1ca50 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1c9ec:	2210      	movs	r2, #16
   1c9ee:	2100      	movs	r1, #0
   1c9f0:	4668      	mov	r0, sp
   1c9f2:	f00f fc7f 	bl	2c2f4 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1c9f6:	2200      	movs	r2, #0
   1c9f8:	4639      	mov	r1, r7
   1c9fa:	4640      	mov	r0, r8
   1c9fc:	f7ff fe7c 	bl	1c6f8 <bt_att_create_pdu>
   1ca00:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1ca02:	b338      	cbz	r0, 1ca54 <att_read_rsp+0x98>
	data.offset = offset;
   1ca04:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1ca08:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ca0c:	2301      	movs	r3, #1
   1ca0e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1ca12:	4a11      	ldr	r2, [pc, #68]	; (1ca58 <att_read_rsp+0x9c>)
	data.chan = chan;
   1ca14:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1ca16:	466b      	mov	r3, sp
   1ca18:	4629      	mov	r1, r5
   1ca1a:	4628      	mov	r0, r5
   1ca1c:	f010 fac1 	bl	2cfa2 <bt_gatt_foreach_attr>
	if (data.err) {
   1ca20:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ca24:	b17b      	cbz	r3, 1ca46 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ca26:	9b02      	ldr	r3, [sp, #8]
   1ca28:	6998      	ldr	r0, [r3, #24]
   1ca2a:	f7ff fa11 	bl	1be50 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1ca2e:	9802      	ldr	r0, [sp, #8]
   1ca30:	f004 f888 	bl	20b44 <net_buf_unref>
	if (!req) {
   1ca34:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ca38:	462a      	mov	r2, r5
   1ca3a:	4631      	mov	r1, r6
   1ca3c:	4620      	mov	r0, r4
   1ca3e:	f010 fd9f 	bl	2d580 <send_err_rsp.part.0>
			return 0;
   1ca42:	2000      	movs	r0, #0
   1ca44:	e7ce      	b.n	1c9e4 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1ca46:	9902      	ldr	r1, [sp, #8]
   1ca48:	4620      	mov	r0, r4
   1ca4a:	f010 fb78 	bl	2d13e <bt_att_chan_send_rsp>
	return 0;
   1ca4e:	e7f8      	b.n	1ca42 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1ca50:	2001      	movs	r0, #1
   1ca52:	e7c7      	b.n	1c9e4 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1ca54:	200e      	movs	r0, #14
   1ca56:	e7c5      	b.n	1c9e4 <att_read_rsp+0x28>
   1ca58:	0002d2ef 	.word	0x0002d2ef

0001ca5c <att_read_type_req>:
{
   1ca5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1ca60:	8a0d      	ldrh	r5, [r1, #16]
   1ca62:	3d04      	subs	r5, #4
   1ca64:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1ca66:	2d02      	cmp	r5, #2
{
   1ca68:	4604      	mov	r4, r0
   1ca6a:	b08c      	sub	sp, #48	; 0x30
   1ca6c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1ca6e:	d001      	beq.n	1ca74 <att_read_type_req+0x18>
   1ca70:	2d10      	cmp	r5, #16
   1ca72:	d150      	bne.n	1cb16 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1ca74:	2104      	movs	r1, #4
   1ca76:	300c      	adds	r0, #12
   1ca78:	f011 fe6a 	bl	2e750 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1ca7c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1ca80:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1ca82:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1ca84:	1d01      	adds	r1, r0, #4
   1ca86:	462a      	mov	r2, r5
   1ca88:	4640      	mov	r0, r8
   1ca8a:	f00f fced 	bl	2c468 <bt_uuid_create>
   1ca8e:	b188      	cbz	r0, 1cab4 <att_read_type_req+0x58>
	if (!start || !end) {
   1ca90:	b19e      	cbz	r6, 1caba <att_read_type_req+0x5e>
   1ca92:	b18f      	cbz	r7, 1cab8 <att_read_type_req+0x5c>
	if (start > end) {
   1ca94:	42b7      	cmp	r7, r6
   1ca96:	d310      	bcc.n	1caba <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1ca98:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1ca9a:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1ca9c:	2100      	movs	r1, #0
   1ca9e:	eb0d 0002 	add.w	r0, sp, r2
   1caa2:	f00f fc27 	bl	2c2f4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1caa6:	2201      	movs	r2, #1
   1caa8:	2109      	movs	r1, #9
   1caaa:	4628      	mov	r0, r5
   1caac:	f7ff fe24 	bl	1c6f8 <bt_att_create_pdu>
   1cab0:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1cab2:	b960      	cbnz	r0, 1cace <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1cab4:	200e      	movs	r0, #14
   1cab6:	e007      	b.n	1cac8 <att_read_type_req+0x6c>
			*err = 0U;
   1cab8:	463e      	mov	r6, r7
	if (!req) {
   1caba:	2301      	movs	r3, #1
   1cabc:	4632      	mov	r2, r6
   1cabe:	2108      	movs	r1, #8
   1cac0:	4620      	mov	r0, r4
   1cac2:	f010 fd5d 	bl	2d580 <send_err_rsp.part.0>
		return 0;
   1cac6:	2000      	movs	r0, #0
}
   1cac8:	b00c      	add	sp, #48	; 0x30
   1caca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1cace:	2101      	movs	r1, #1
   1cad0:	300c      	adds	r0, #12
	data.uuid = uuid;
   1cad2:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1cad6:	f011 fe14 	bl	2e702 <net_buf_simple_add>
	data.rsp->len = 0U;
   1cada:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1cadc:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1cade:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1cae0:	230a      	movs	r3, #10
   1cae2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1cae6:	4a0d      	ldr	r2, [pc, #52]	; (1cb1c <att_read_type_req+0xc0>)
   1cae8:	ab06      	add	r3, sp, #24
   1caea:	4639      	mov	r1, r7
   1caec:	4630      	mov	r0, r6
   1caee:	f010 fa58 	bl	2cfa2 <bt_gatt_foreach_attr>
	if (data.err) {
   1caf2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1caf6:	b14b      	cbz	r3, 1cb0c <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1caf8:	9b08      	ldr	r3, [sp, #32]
   1cafa:	6998      	ldr	r0, [r3, #24]
   1cafc:	f7ff f9a8 	bl	1be50 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1cb00:	9808      	ldr	r0, [sp, #32]
   1cb02:	f004 f81f 	bl	20b44 <net_buf_unref>
	if (!req) {
   1cb06:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1cb0a:	e7d7      	b.n	1cabc <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1cb0c:	9908      	ldr	r1, [sp, #32]
   1cb0e:	4620      	mov	r0, r4
   1cb10:	f010 fb15 	bl	2d13e <bt_att_chan_send_rsp>
	return 0;
   1cb14:	e7d7      	b.n	1cac6 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1cb16:	2004      	movs	r0, #4
   1cb18:	e7d6      	b.n	1cac8 <att_read_type_req+0x6c>
   1cb1a:	bf00      	nop
   1cb1c:	0001c231 	.word	0x0001c231

0001cb20 <att_find_type_req>:
{
   1cb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cb24:	460f      	mov	r7, r1
   1cb26:	b086      	sub	sp, #24
   1cb28:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1cb2a:	2106      	movs	r1, #6
   1cb2c:	f107 000c 	add.w	r0, r7, #12
   1cb30:	f011 fe0e 	bl	2e750 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1cb34:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1cb36:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1cb3a:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1cb3c:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1cb40:	b1c5      	cbz	r5, 1cb74 <att_find_type_req+0x54>
   1cb42:	2300      	movs	r3, #0
   1cb44:	f1b8 0f00 	cmp.w	r8, #0
   1cb48:	d013      	beq.n	1cb72 <att_find_type_req+0x52>
	if (start > end) {
   1cb4a:	4545      	cmp	r5, r8
   1cb4c:	d812      	bhi.n	1cb74 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1cb4e:	f88d 3000 	strb.w	r3, [sp]
   1cb52:	f88d 3004 	strb.w	r3, [sp, #4]
   1cb56:	a901      	add	r1, sp, #4
   1cb58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1cb5c:	4668      	mov	r0, sp
   1cb5e:	f8ad 2002 	strh.w	r2, [sp, #2]
   1cb62:	f8ad 3006 	strh.w	r3, [sp, #6]
   1cb66:	f00f fc51 	bl	2c40c <bt_uuid_cmp>
   1cb6a:	4606      	mov	r6, r0
   1cb6c:	b160      	cbz	r0, 1cb88 <att_find_type_req+0x68>
	if (!req) {
   1cb6e:	230a      	movs	r3, #10
   1cb70:	e001      	b.n	1cb76 <att_find_type_req+0x56>
			*err = 0U;
   1cb72:	4645      	mov	r5, r8
	if (!req) {
   1cb74:	2301      	movs	r3, #1
   1cb76:	462a      	mov	r2, r5
   1cb78:	2106      	movs	r1, #6
   1cb7a:	4620      	mov	r0, r4
   1cb7c:	f010 fd00 	bl	2d580 <send_err_rsp.part.0>
		return 0;
   1cb80:	2000      	movs	r0, #0
}
   1cb82:	b006      	add	sp, #24
   1cb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1cb88:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1cb8c:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1cb8e:	4601      	mov	r1, r0
   1cb90:	2214      	movs	r2, #20
   1cb92:	a801      	add	r0, sp, #4
   1cb94:	f00f fbae 	bl	2c2f4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1cb98:	4632      	mov	r2, r6
   1cb9a:	2107      	movs	r1, #7
   1cb9c:	4650      	mov	r0, sl
   1cb9e:	f7ff fdab 	bl	1c6f8 <bt_att_create_pdu>
   1cba2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1cba4:	b1f8      	cbz	r0, 1cbe6 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1cba6:	230a      	movs	r3, #10
   1cba8:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1cbac:	4a0f      	ldr	r2, [pc, #60]	; (1cbec <att_find_type_req+0xcc>)
	data.chan = chan;
   1cbae:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1cbb0:	ab01      	add	r3, sp, #4
   1cbb2:	4641      	mov	r1, r8
   1cbb4:	4628      	mov	r0, r5
	data.value = value;
   1cbb6:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   1cbba:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1cbbe:	f010 f9f0 	bl	2cfa2 <bt_gatt_foreach_attr>
	if (data.err) {
   1cbc2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1cbc6:	b14b      	cbz	r3, 1cbdc <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1cbc8:	9b02      	ldr	r3, [sp, #8]
   1cbca:	6998      	ldr	r0, [r3, #24]
   1cbcc:	f7ff f940 	bl	1be50 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1cbd0:	9802      	ldr	r0, [sp, #8]
   1cbd2:	f003 ffb7 	bl	20b44 <net_buf_unref>
	if (!req) {
   1cbd6:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1cbda:	e7cc      	b.n	1cb76 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1cbdc:	9902      	ldr	r1, [sp, #8]
   1cbde:	4620      	mov	r0, r4
   1cbe0:	f010 faad 	bl	2d13e <bt_att_chan_send_rsp>
	return 0;
   1cbe4:	e7cc      	b.n	1cb80 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1cbe6:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1cbe8:	e7cb      	b.n	1cb82 <att_find_type_req+0x62>
   1cbea:	bf00      	nop
   1cbec:	0001be6d 	.word	0x0001be6d

0001cbf0 <att_find_info_req>:
{
   1cbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1cbf2:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1cbf4:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1cbf6:	885e      	ldrh	r6, [r3, #2]
{
   1cbf8:	b085      	sub	sp, #20
   1cbfa:	4604      	mov	r4, r0
	if (!start || !end) {
   1cbfc:	b195      	cbz	r5, 1cc24 <att_find_info_req+0x34>
   1cbfe:	b186      	cbz	r6, 1cc22 <att_find_info_req+0x32>
	if (start > end) {
   1cc00:	42b5      	cmp	r5, r6
   1cc02:	d80f      	bhi.n	1cc24 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1cc04:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1cc06:	2210      	movs	r2, #16
   1cc08:	2100      	movs	r1, #0
   1cc0a:	4668      	mov	r0, sp
   1cc0c:	f00f fb72 	bl	2c2f4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1cc10:	2200      	movs	r2, #0
   1cc12:	2105      	movs	r1, #5
   1cc14:	4638      	mov	r0, r7
   1cc16:	f7ff fd6f 	bl	1c6f8 <bt_att_create_pdu>
   1cc1a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1cc1c:	b958      	cbnz	r0, 1cc36 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1cc1e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1cc20:	e007      	b.n	1cc32 <att_find_info_req+0x42>
			*err = 0U;
   1cc22:	4635      	mov	r5, r6
	if (!req) {
   1cc24:	2301      	movs	r3, #1
   1cc26:	462a      	mov	r2, r5
   1cc28:	2104      	movs	r1, #4
   1cc2a:	4620      	mov	r0, r4
   1cc2c:	f010 fca8 	bl	2d580 <send_err_rsp.part.0>
		return 0;
   1cc30:	2000      	movs	r0, #0
}
   1cc32:	b005      	add	sp, #20
   1cc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1cc36:	466b      	mov	r3, sp
   1cc38:	4a0a      	ldr	r2, [pc, #40]	; (1cc64 <att_find_info_req+0x74>)
	data.chan = chan;
   1cc3a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1cc3c:	4631      	mov	r1, r6
   1cc3e:	4628      	mov	r0, r5
   1cc40:	f010 f9af 	bl	2cfa2 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1cc44:	9b02      	ldr	r3, [sp, #8]
   1cc46:	b943      	cbnz	r3, 1cc5a <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1cc48:	9b01      	ldr	r3, [sp, #4]
   1cc4a:	6998      	ldr	r0, [r3, #24]
   1cc4c:	f7ff f900 	bl	1be50 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1cc50:	9801      	ldr	r0, [sp, #4]
   1cc52:	f003 ff77 	bl	20b44 <net_buf_unref>
	if (!req) {
   1cc56:	230a      	movs	r3, #10
   1cc58:	e7e5      	b.n	1cc26 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1cc5a:	9901      	ldr	r1, [sp, #4]
   1cc5c:	4620      	mov	r0, r4
   1cc5e:	f010 fa6e 	bl	2d13e <bt_att_chan_send_rsp>
	return 0;
   1cc62:	e7e5      	b.n	1cc30 <att_find_info_req+0x40>
   1cc64:	0002cfb9 	.word	0x0002cfb9

0001cc68 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1cc68:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1cc6a:	4c0b      	ldr	r4, [pc, #44]	; (1cc98 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1cc6c:	4d0b      	ldr	r5, [pc, #44]	; (1cc9c <bt_att_init+0x34>)
   1cc6e:	4620      	mov	r0, r4
   1cc70:	f012 fcaa 	bl	2f5c8 <z_impl_k_queue_init>
   1cc74:	4629      	mov	r1, r5
   1cc76:	4620      	mov	r0, r4
   1cc78:	f012 fcb2 	bl	2f5e0 <k_queue_append>
   1cc7c:	f105 0114 	add.w	r1, r5, #20
   1cc80:	4620      	mov	r0, r4
   1cc82:	f012 fcad 	bl	2f5e0 <k_queue_append>
   1cc86:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1cc8a:	4620      	mov	r0, r4
   1cc8c:	f012 fca8 	bl	2f5e0 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1cc90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1cc94:	f000 bf34 	b.w	1db00 <bt_gatt_init>
   1cc98:	20000d04 	.word	0x20000d04
   1cc9c:	20003b50 	.word	0x20003b50

0001cca0 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1cca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1cca2:	2300      	movs	r3, #0
{
   1cca4:	4605      	mov	r5, r0
   1cca6:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1cca8:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1ccaa:	f00a f82b 	bl	26d04 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1ccae:	4b0b      	ldr	r3, [pc, #44]	; (1ccdc <bt_att_req_alloc+0x3c>)
   1ccb0:	681b      	ldr	r3, [r3, #0]
   1ccb2:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1ccb4:	bf04      	itt	eq
   1ccb6:	2500      	moveq	r5, #0
   1ccb8:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1ccba:	a901      	add	r1, sp, #4
   1ccbc:	4808      	ldr	r0, [pc, #32]	; (1cce0 <bt_att_req_alloc+0x40>)
   1ccbe:	462a      	mov	r2, r5
   1ccc0:	4623      	mov	r3, r4
   1ccc2:	f009 f8fb 	bl	25ebc <k_mem_slab_alloc>
   1ccc6:	4601      	mov	r1, r0
   1ccc8:	b930      	cbnz	r0, 1ccd8 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1ccca:	9801      	ldr	r0, [sp, #4]
   1cccc:	221c      	movs	r2, #28
   1ccce:	f00f fb11 	bl	2c2f4 <memset>

	return req;
   1ccd2:	9801      	ldr	r0, [sp, #4]
}
   1ccd4:	b003      	add	sp, #12
   1ccd6:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1ccd8:	2000      	movs	r0, #0
   1ccda:	e7fb      	b.n	1ccd4 <bt_att_req_alloc+0x34>
   1ccdc:	20003b8c 	.word	0x20003b8c
   1cce0:	20000c2c 	.word	0x20000c2c

0001cce4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1cce4:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1cce6:	6883      	ldr	r3, [r0, #8]
{
   1cce8:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1ccea:	b14b      	cbz	r3, 1cd00 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1ccec:	6998      	ldr	r0, [r3, #24]
   1ccee:	f7ff f8af 	bl	1be50 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1ccf2:	9b01      	ldr	r3, [sp, #4]
   1ccf4:	6898      	ldr	r0, [r3, #8]
   1ccf6:	f003 ff25 	bl	20b44 <net_buf_unref>
		req->buf = NULL;
   1ccfa:	9b01      	ldr	r3, [sp, #4]
   1ccfc:	2200      	movs	r2, #0
   1ccfe:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1cd00:	4803      	ldr	r0, [pc, #12]	; (1cd10 <bt_att_req_free+0x2c>)
   1cd02:	a901      	add	r1, sp, #4
   1cd04:	f012 fba2 	bl	2f44c <k_mem_slab_free>
}
   1cd08:	b003      	add	sp, #12
   1cd0a:	f85d fb04 	ldr.w	pc, [sp], #4
   1cd0e:	bf00      	nop
   1cd10:	20000c2c 	.word	0x20000c2c

0001cd14 <att_handle_rsp>:
{
   1cd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cd18:	4604      	mov	r4, r0
   1cd1a:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   1cd1c:	3058      	adds	r0, #88	; 0x58
{
   1cd1e:	460e      	mov	r6, r1
   1cd20:	4617      	mov	r7, r2
   1cd22:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1cd24:	f012 fd4a 	bl	2f7bc <k_work_cancel_delayable>
	if (!chan->req) {
   1cd28:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1cd2a:	b980      	cbnz	r0, 1cd4e <att_handle_rsp+0x3a>
		LOG_WRN("No pending ATT request");
   1cd2c:	4b19      	ldr	r3, [pc, #100]	; (1cd94 <att_handle_rsp+0x80>)
   1cd2e:	9307      	str	r3, [sp, #28]
   1cd30:	4819      	ldr	r0, [pc, #100]	; (1cd98 <att_handle_rsp+0x84>)
   1cd32:	2302      	movs	r3, #2
   1cd34:	aa06      	add	r2, sp, #24
   1cd36:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1cd3a:	9306      	str	r3, [sp, #24]
   1cd3c:	f010 f9cb 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   1cd40:	6820      	ldr	r0, [r4, #0]
   1cd42:	f010 fb58 	bl	2d3f6 <att_req_send_process>
}
   1cd46:	2000      	movs	r0, #0
   1cd48:	b008      	add	sp, #32
   1cd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1cd4e:	4b13      	ldr	r3, [pc, #76]	; (1cd9c <att_handle_rsp+0x88>)
   1cd50:	4298      	cmp	r0, r3
   1cd52:	f04f 0800 	mov.w	r8, #0
   1cd56:	d102      	bne.n	1cd5e <att_handle_rsp+0x4a>
		chan->req = NULL;
   1cd58:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   1cd5c:	e7f0      	b.n	1cd40 <att_handle_rsp+0x2c>
	func = chan->req->func;
   1cd5e:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   1cd62:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   1cd66:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1cd68:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   1cd6c:	f7ff ffba 	bl	1cce4 <bt_att_req_free>
	att_req_send_process(chan->att);
   1cd70:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1cd72:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   1cd76:	f010 fb3e 	bl	2d3f6 <att_req_send_process>
	if (func) {
   1cd7a:	f1b9 0f00 	cmp.w	r9, #0
   1cd7e:	d0e2      	beq.n	1cd46 <att_handle_rsp+0x32>
		func(chan->att->conn, err, pdu, len, params);
   1cd80:	6820      	ldr	r0, [r4, #0]
   1cd82:	f8cd a000 	str.w	sl, [sp]
   1cd86:	6800      	ldr	r0, [r0, #0]
   1cd88:	463b      	mov	r3, r7
   1cd8a:	4632      	mov	r2, r6
   1cd8c:	4629      	mov	r1, r5
   1cd8e:	47c8      	blx	r9
   1cd90:	e7d9      	b.n	1cd46 <att_handle_rsp+0x32>
   1cd92:	bf00      	nop
   1cd94:	00032f43 	.word	0x00032f43
   1cd98:	00030284 	.word	0x00030284
   1cd9c:	20003b90 	.word	0x20003b90

0001cda0 <bt_att_disconnected>:
{
   1cda0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1cda4:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1cda8:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1cdaa:	2e00      	cmp	r6, #0
   1cdac:	d05a      	beq.n	1ce64 <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1cdae:	f100 0184 	add.w	r1, r0, #132	; 0x84
   1cdb2:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1cdb6:	f010 fa5b 	bl	2d270 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1cdba:	1f27      	subs	r7, r4, #4
   1cdbc:	f104 0838 	add.w	r8, r4, #56	; 0x38
   1cdc0:	2200      	movs	r2, #0
   1cdc2:	2300      	movs	r3, #0
   1cdc4:	4640      	mov	r0, r8
   1cdc6:	f011 fc41 	bl	2e64c <net_buf_get>
   1cdca:	4605      	mov	r5, r0
   1cdcc:	bb48      	cbnz	r0, 1ce22 <bt_att_disconnected+0x82>
	if (chan->req) {
   1cdce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1cdd0:	b12b      	cbz	r3, 1cdde <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1cdd2:	4602      	mov	r2, r0
   1cdd4:	4601      	mov	r1, r0
   1cdd6:	230e      	movs	r3, #14
   1cdd8:	4638      	mov	r0, r7
   1cdda:	f7ff ff9b 	bl	1cd14 <att_handle_rsp>
	chan->att = NULL;
   1cdde:	2300      	movs	r3, #0
   1cde0:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   1cde4:	2102      	movs	r1, #2
   1cde6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1cdea:	f010 fa5a 	bl	2d2a2 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   1cdee:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1cdf0:	2b00      	cmp	r3, #0
   1cdf2:	d137      	bne.n	1ce64 <bt_att_disconnected+0xc4>
	att_reset(att);
   1cdf4:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1cdf6:	9803      	ldr	r0, [sp, #12]
   1cdf8:	2200      	movs	r2, #0
   1cdfa:	2300      	movs	r3, #0
   1cdfc:	300c      	adds	r0, #12
   1cdfe:	f011 fc25 	bl	2e64c <net_buf_get>
   1ce02:	4605      	mov	r5, r0
   1ce04:	b9a0      	cbnz	r0, 1ce30 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   1ce06:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1ce08:	6845      	ldr	r5, [r0, #4]
   1ce0a:	b9c5      	cbnz	r5, 1ce3e <bt_att_disconnected+0x9e>
	att->conn = NULL;
   1ce0c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1ce0e:	a903      	add	r1, sp, #12
   1ce10:	4816      	ldr	r0, [pc, #88]	; (1ce6c <bt_att_disconnected+0xcc>)
   1ce12:	f012 fb1b 	bl	2f44c <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1ce16:	6820      	ldr	r0, [r4, #0]
}
   1ce18:	b004      	add	sp, #16
   1ce1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1ce1e:	f001 bd3b 	b.w	1e898 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1ce22:	69a8      	ldr	r0, [r5, #24]
   1ce24:	f7ff f814 	bl	1be50 <tx_meta_data_free>
		net_buf_unref(buf);
   1ce28:	4628      	mov	r0, r5
   1ce2a:	f003 fe8b 	bl	20b44 <net_buf_unref>
   1ce2e:	e7c7      	b.n	1cdc0 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1ce30:	69a8      	ldr	r0, [r5, #24]
   1ce32:	f7ff f80d 	bl	1be50 <tx_meta_data_free>
		net_buf_unref(buf);
   1ce36:	4628      	mov	r0, r5
   1ce38:	f003 fe84 	bl	20b44 <net_buf_unref>
   1ce3c:	e7db      	b.n	1cdf6 <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ce3e:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1ce40:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1ce42:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ce44:	4295      	cmp	r5, r2
	list->tail = node;
   1ce46:	bf08      	it	eq
   1ce48:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1ce4a:	686e      	ldr	r6, [r5, #4]
   1ce4c:	b136      	cbz	r6, 1ce5c <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1ce4e:	69ab      	ldr	r3, [r5, #24]
   1ce50:	9300      	str	r3, [sp, #0]
   1ce52:	2300      	movs	r3, #0
   1ce54:	6800      	ldr	r0, [r0, #0]
   1ce56:	461a      	mov	r2, r3
   1ce58:	210e      	movs	r1, #14
   1ce5a:	47b0      	blx	r6
		bt_att_req_free(req);
   1ce5c:	4628      	mov	r0, r5
   1ce5e:	f7ff ff41 	bl	1cce4 <bt_att_req_free>
   1ce62:	e7d0      	b.n	1ce06 <bt_att_disconnected+0x66>
}
   1ce64:	b004      	add	sp, #16
   1ce66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ce6a:	bf00      	nop
   1ce6c:	20000bd8 	.word	0x20000bd8

0001ce70 <att_timeout>:
{
   1ce70:	b510      	push	{r4, lr}
   1ce72:	4604      	mov	r4, r0
   1ce74:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   1ce76:	4b08      	ldr	r3, [pc, #32]	; (1ce98 <att_timeout+0x28>)
   1ce78:	9305      	str	r3, [sp, #20]
   1ce7a:	4808      	ldr	r0, [pc, #32]	; (1ce9c <att_timeout+0x2c>)
   1ce7c:	2302      	movs	r3, #2
   1ce7e:	aa04      	add	r2, sp, #16
   1ce80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ce84:	9304      	str	r3, [sp, #16]
   1ce86:	f010 f926 	bl	2d0d6 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1ce8a:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
}
   1ce8e:	b006      	add	sp, #24
   1ce90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1ce94:	f7ff bf84 	b.w	1cda0 <bt_att_disconnected>
   1ce98:	00032f5a 	.word	0x00032f5a
   1ce9c:	00030284 	.word	0x00030284

0001cea0 <find_cf_cfg_by_addr>:
#endif
}

static struct gatt_cf_cfg *find_cf_cfg_by_addr(uint8_t id,
					       const bt_addr_le_t *addr)
{
   1cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cea2:	4d0b      	ldr	r5, [pc, #44]	; (1ced0 <find_cf_cfg_by_addr+0x30>)
   1cea4:	4606      	mov	r6, r0
   1cea6:	460f      	mov	r7, r1
   1cea8:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		int i;

		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
			if (id == cf_cfg[i].id &&
   1ceaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1ceae:	42b3      	cmp	r3, r6
   1ceb0:	d107      	bne.n	1cec2 <find_cf_cfg_by_addr+0x22>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1ceb2:	4629      	mov	r1, r5
   1ceb4:	4638      	mov	r0, r7
   1ceb6:	f010 fd25 	bl	2d904 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1ceba:	b110      	cbz	r0, 1cec2 <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   1cebc:	4805      	ldr	r0, [pc, #20]	; (1ced4 <find_cf_cfg_by_addr+0x34>)
   1cebe:	4420      	add	r0, r4
			}
		}
	}

	return NULL;
}
   1cec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1cec2:	3410      	adds	r4, #16
   1cec4:	2c60      	cmp	r4, #96	; 0x60
   1cec6:	f105 0510 	add.w	r5, r5, #16
   1ceca:	d1ee      	bne.n	1ceaa <find_cf_cfg_by_addr+0xa>
	return NULL;
   1cecc:	2000      	movs	r0, #0
   1cece:	e7f7      	b.n	1cec0 <find_cf_cfg_by_addr+0x20>
   1ced0:	20003bc5 	.word	0x20003bc5
   1ced4:	20003bc4 	.word	0x20003bc4

0001ced8 <gatt_delayed_store_find>:
{
   1ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ceda:	4d0c      	ldr	r5, [pc, #48]	; (1cf0c <gatt_delayed_store_find+0x34>)
   1cedc:	4607      	mov	r7, r0
   1cede:	460e      	mov	r6, r1
   1cee0:	2400      	movs	r4, #0
		if (el->id == id &&
   1cee2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1cee6:	42bb      	cmp	r3, r7
   1cee8:	d006      	beq.n	1cef8 <gatt_delayed_store_find+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   1ceea:	340c      	adds	r4, #12
   1ceec:	2c48      	cmp	r4, #72	; 0x48
   1ceee:	f105 050c 	add.w	r5, r5, #12
   1cef2:	d1f6      	bne.n	1cee2 <gatt_delayed_store_find+0xa>
	return NULL;
   1cef4:	2000      	movs	r0, #0
}
   1cef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    bt_addr_le_eq(peer_addr, &el->peer)) {
   1cef8:	4629      	mov	r1, r5
   1cefa:	4630      	mov	r0, r6
   1cefc:	f010 fd02 	bl	2d904 <bt_addr_le_eq>
		if (el->id == id &&
   1cf00:	2800      	cmp	r0, #0
   1cf02:	d0f2      	beq.n	1ceea <gatt_delayed_store_find+0x12>
		el = &gatt_delayed_store.peer_list[i];
   1cf04:	4802      	ldr	r0, [pc, #8]	; (1cf10 <gatt_delayed_store_find+0x38>)
   1cf06:	4420      	add	r0, r4
   1cf08:	e7f5      	b.n	1cef6 <gatt_delayed_store_find+0x1e>
   1cf0a:	bf00      	nop
   1cf0c:	20002471 	.word	0x20002471
   1cf10:	20002470 	.word	0x20002470

0001cf14 <find_sc_cfg>:
{
   1cf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cf16:	4d0b      	ldr	r5, [pc, #44]	; (1cf44 <find_sc_cfg+0x30>)
   1cf18:	4606      	mov	r6, r0
   1cf1a:	460f      	mov	r7, r1
   1cf1c:	2400      	movs	r4, #0
		if (id == sc_cfg[i].id &&
   1cf1e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1cf22:	42b3      	cmp	r3, r6
   1cf24:	d107      	bne.n	1cf36 <find_sc_cfg+0x22>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1cf26:	4639      	mov	r1, r7
   1cf28:	4628      	mov	r0, r5
   1cf2a:	f010 fceb 	bl	2d904 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1cf2e:	b110      	cbz	r0, 1cf36 <find_sc_cfg+0x22>
			return &sc_cfg[i];
   1cf30:	4805      	ldr	r0, [pc, #20]	; (1cf48 <find_sc_cfg+0x34>)
   1cf32:	4420      	add	r0, r4
}
   1cf34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1cf36:	340c      	adds	r4, #12
   1cf38:	2c48      	cmp	r4, #72	; 0x48
   1cf3a:	f105 050c 	add.w	r5, r5, #12
   1cf3e:	d1ee      	bne.n	1cf1e <find_sc_cfg+0xa>
	return NULL;
   1cf40:	2000      	movs	r0, #0
   1cf42:	e7f7      	b.n	1cf34 <find_sc_cfg+0x20>
   1cf44:	20005597 	.word	0x20005597
   1cf48:	20005596 	.word	0x20005596

0001cf4c <ccc_load>:
{
   1cf4c:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cf4e:	4b20      	ldr	r3, [pc, #128]	; (1cfd0 <ccc_load+0x84>)
{
   1cf50:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cf52:	6882      	ldr	r2, [r0, #8]
   1cf54:	429a      	cmp	r2, r3
   1cf56:	d10f      	bne.n	1cf78 <ccc_load+0x2c>
	if (!load->entry) {
   1cf58:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   1cf5a:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   1cf5c:	b975      	cbnz	r5, 1cf7c <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   1cf5e:	7922      	ldrb	r2, [r4, #4]
   1cf60:	6821      	ldr	r1, [r4, #0]
   1cf62:	4630      	mov	r0, r6
   1cf64:	f010 fcd6 	bl	2d914 <ccc_find_cfg>
	if (!cfg) {
   1cf68:	4604      	mov	r4, r0
   1cf6a:	b128      	cbz	r0, 1cf78 <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1cf6c:	4919      	ldr	r1, [pc, #100]	; (1cfd4 <ccc_load+0x88>)
   1cf6e:	3001      	adds	r0, #1
   1cf70:	f010 fcfb 	bl	2d96a <bt_addr_le_copy>
	cfg->id = 0U;
   1cf74:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1cf76:	8125      	strh	r5, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   1cf78:	2001      	movs	r0, #1
}
   1cf7a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   1cf7c:	68e0      	ldr	r0, [r4, #12]
   1cf7e:	2800      	cmp	r0, #0
   1cf80:	d0fb      	beq.n	1cf7a <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   1cf82:	882b      	ldrh	r3, [r5, #0]
   1cf84:	428b      	cmp	r3, r1
   1cf86:	d00a      	beq.n	1cf9e <ccc_load+0x52>
		if (load->entry->handle < handle) {
   1cf88:	d2f6      	bcs.n	1cf78 <ccc_load+0x2c>
	load->count--;
   1cf8a:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1cf8c:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1cf8e:	3801      	subs	r0, #1
	load->entry++;
   1cf90:	3304      	adds	r3, #4
	load->count--;
   1cf92:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1cf94:	3800      	subs	r0, #0
	load->entry++;
   1cf96:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1cf98:	bf18      	it	ne
   1cf9a:	2001      	movne	r0, #1
   1cf9c:	e7ed      	b.n	1cf7a <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1cf9e:	7922      	ldrb	r2, [r4, #4]
   1cfa0:	6821      	ldr	r1, [r4, #0]
   1cfa2:	4630      	mov	r0, r6
   1cfa4:	f010 fcb6 	bl	2d914 <ccc_find_cfg>
	if (!cfg) {
   1cfa8:	4605      	mov	r5, r0
   1cfaa:	b968      	cbnz	r0, 1cfc8 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1cfac:	4602      	mov	r2, r0
   1cfae:	4909      	ldr	r1, [pc, #36]	; (1cfd4 <ccc_load+0x88>)
   1cfb0:	4630      	mov	r0, r6
   1cfb2:	f010 fcaf 	bl	2d914 <ccc_find_cfg>
		if (!cfg) {
   1cfb6:	4605      	mov	r5, r0
   1cfb8:	2800      	cmp	r0, #0
   1cfba:	d0e6      	beq.n	1cf8a <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1cfbc:	6821      	ldr	r1, [r4, #0]
   1cfbe:	3001      	adds	r0, #1
   1cfc0:	f010 fcd3 	bl	2d96a <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1cfc4:	7923      	ldrb	r3, [r4, #4]
   1cfc6:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1cfc8:	68a3      	ldr	r3, [r4, #8]
   1cfca:	885b      	ldrh	r3, [r3, #2]
   1cfcc:	812b      	strh	r3, [r5, #8]
   1cfce:	e7dc      	b.n	1cf8a <ccc_load+0x3e>
   1cfd0:	0001d701 	.word	0x0001d701
   1cfd4:	00031bf1 	.word	0x00031bf1

0001cfd8 <find_cf_cfg>:
{
   1cfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cfdc:	4c0d      	ldr	r4, [pc, #52]	; (1d014 <find_cf_cfg+0x3c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1cfde:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1d018 <find_cf_cfg+0x40>
{
   1cfe2:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1cfe4:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1cfe6:	4627      	mov	r7, r4
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1cfe8:	1c62      	adds	r2, r4, #1
		if (!conn) {
   1cfea:	b96d      	cbnz	r5, 1d008 <find_cf_cfg+0x30>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1cfec:	4641      	mov	r1, r8
   1cfee:	4610      	mov	r0, r2
   1cff0:	f010 fc88 	bl	2d904 <bt_addr_le_eq>
   1cff4:	b928      	cbnz	r0, 1d002 <find_cf_cfg+0x2a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1cff6:	3601      	adds	r6, #1
   1cff8:	2e06      	cmp	r6, #6
   1cffa:	f104 0410 	add.w	r4, r4, #16
   1cffe:	d1f2      	bne.n	1cfe6 <find_cf_cfg+0xe>
	return NULL;
   1d000:	2700      	movs	r7, #0
}
   1d002:	4638      	mov	r0, r7
   1d004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d008:	7821      	ldrb	r1, [r4, #0]
   1d00a:	4628      	mov	r0, r5
   1d00c:	f00f fe86 	bl	2cd1c <bt_conn_is_peer_addr_le>
   1d010:	e7f0      	b.n	1cff4 <find_cf_cfg+0x1c>
   1d012:	bf00      	nop
   1d014:	20003bc4 	.word	0x20003bc4
   1d018:	00031bf1 	.word	0x00031bf1

0001d01c <find_ccc_cfg>:
{
   1d01c:	b510      	push	{r4, lr}
						    &cfg->peer)) {
   1d01e:	1c4a      	adds	r2, r1, #1
{
   1d020:	460c      	mov	r4, r1
		if (conn) {
   1d022:	b138      	cbz	r0, 1d034 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1d024:	7809      	ldrb	r1, [r1, #0]
   1d026:	f00f fe79 	bl	2cd1c <bt_conn_is_peer_addr_le>
   1d02a:	b108      	cbz	r0, 1d030 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1d02c:	4620      	mov	r0, r4
}
   1d02e:	bd10      	pop	{r4, pc}
	return NULL;
   1d030:	2000      	movs	r0, #0
   1d032:	e7fc      	b.n	1d02e <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d034:	4902      	ldr	r1, [pc, #8]	; (1d040 <find_ccc_cfg+0x24>)
   1d036:	4610      	mov	r0, r2
   1d038:	f010 fc64 	bl	2d904 <bt_addr_le_eq>
   1d03c:	e7f5      	b.n	1d02a <find_ccc_cfg+0xe>
   1d03e:	bf00      	nop
   1d040:	00031bf1 	.word	0x00031bf1

0001d044 <gatt_delayed_store_enqueue>:
{
   1d044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d048:	4606      	mov	r6, r0
   1d04a:	460f      	mov	r7, r1
   1d04c:	4690      	mov	r8, r2
	bool bonded = bt_addr_le_is_bonded(id, peer_addr);
   1d04e:	f00f fb4b 	bl	2c6e8 <bt_addr_le_is_bonded>
	struct ds_peer *el = gatt_delayed_store_find(id, peer_addr);
   1d052:	4639      	mov	r1, r7
	bool bonded = bt_addr_le_is_bonded(id, peer_addr);
   1d054:	4604      	mov	r4, r0
	struct ds_peer *el = gatt_delayed_store_find(id, peer_addr);
   1d056:	4630      	mov	r0, r6
   1d058:	f7ff ff3e 	bl	1ced8 <gatt_delayed_store_find>
   1d05c:	4605      	mov	r5, r0
	if (bonded) {
   1d05e:	b344      	cbz	r4, 1d0b2 <gatt_delayed_store_enqueue+0x6e>
		if (el == NULL) {
   1d060:	b990      	cbnz	r0, 1d088 <gatt_delayed_store_enqueue+0x44>
   1d062:	4a15      	ldr	r2, [pc, #84]	; (1d0b8 <gatt_delayed_store_enqueue+0x74>)
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   1d064:	4604      	mov	r4, r0
		if (atomic_get(el->flags) == 0) {
   1d066:	4610      	mov	r0, r2
   1d068:	f010 fc82 	bl	2d970 <atomic_get>
   1d06c:	b9d8      	cbnz	r0, 1d0a6 <gatt_delayed_store_enqueue+0x62>
   1d06e:	220c      	movs	r2, #12
   1d070:	4354      	muls	r4, r2
		el = &gatt_delayed_store.peer_list[i];
   1d072:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1d0bc <gatt_delayed_store_enqueue+0x78>
			bt_addr_le_copy(&el->peer, peer_addr);
   1d076:	1c60      	adds	r0, r4, #1
   1d078:	4639      	mov	r1, r7
   1d07a:	4448      	add	r0, r9
   1d07c:	f010 fc75 	bl	2d96a <bt_addr_le_copy>
			el->id = id;
   1d080:	f809 6004 	strb.w	r6, [r9, r4]
		el = &gatt_delayed_store.peer_list[i];
   1d084:	eb04 0509 	add.w	r5, r4, r9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d088:	2101      	movs	r1, #1
   1d08a:	fa01 f108 	lsl.w	r1, r1, r8
   1d08e:	f105 0008 	add.w	r0, r5, #8
   1d092:	f010 fc4c 	bl	2d92e <atomic_or>
}
   1d096:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		k_work_reschedule(&gatt_delayed_store.work,
   1d09a:	4809      	ldr	r0, [pc, #36]	; (1d0c0 <gatt_delayed_store_enqueue+0x7c>)
   1d09c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1d0a0:	2300      	movs	r3, #0
   1d0a2:	f009 bb33 	b.w	2670c <k_work_reschedule>
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   1d0a6:	3401      	adds	r4, #1
   1d0a8:	2c06      	cmp	r4, #6
   1d0aa:	f102 020c 	add.w	r2, r2, #12
   1d0ae:	d1da      	bne.n	1d066 <gatt_delayed_store_enqueue+0x22>
   1d0b0:	e7ea      	b.n	1d088 <gatt_delayed_store_enqueue+0x44>
}
   1d0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d0b6:	bf00      	nop
   1d0b8:	20002478 	.word	0x20002478
   1d0bc:	20002470 	.word	0x20002470
   1d0c0:	200024b8 	.word	0x200024b8

0001d0c4 <ccc_set_direct.part.0>:
static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   1d0c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			LOG_ERR("Invalid key");
   1d0c6:	4b07      	ldr	r3, [pc, #28]	; (1d0e4 <ccc_set_direct.part.0+0x20>)
   1d0c8:	9305      	str	r3, [sp, #20]
   1d0ca:	4807      	ldr	r0, [pc, #28]	; (1d0e8 <ccc_set_direct.part.0+0x24>)
   1d0cc:	2302      	movs	r3, #2
   1d0ce:	aa04      	add	r2, sp, #16
   1d0d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d0d4:	9304      	str	r3, [sp, #16]
   1d0d6:	f010 fc51 	bl	2d97c <z_log_msg_static_create.constprop.0>
}
   1d0da:	f06f 0015 	mvn.w	r0, #21
   1d0de:	b007      	add	sp, #28
   1d0e0:	f85d fb04 	ldr.w	pc, [sp], #4
   1d0e4:	00032f6d 	.word	0x00032f6d
   1d0e8:	000302ac 	.word	0x000302ac

0001d0ec <sc_set>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static int sc_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		  void *cb_arg)
{
   1d0ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d0f0:	b08b      	sub	sp, #44	; 0x2c
   1d0f2:	460e      	mov	r6, r1
   1d0f4:	af00      	add	r7, sp, #0
   1d0f6:	4690      	mov	r8, r2
   1d0f8:	4699      	mov	r9, r3
	bt_addr_le_t addr;
	ssize_t len;
	int err;
	const char *next;

	if (!name) {
   1d0fa:	4604      	mov	r4, r0
   1d0fc:	b988      	cbnz	r0, 1d122 <sc_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   1d0fe:	4b44      	ldr	r3, [pc, #272]	; (1d210 <sc_set+0x124>)
   1d100:	627b      	str	r3, [r7, #36]	; 0x24
   1d102:	2302      	movs	r3, #2
   1d104:	4843      	ldr	r0, [pc, #268]	; (1d214 <sc_set+0x128>)
   1d106:	623b      	str	r3, [r7, #32]
   1d108:	f107 0220 	add.w	r2, r7, #32
   1d10c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d110:	f010 fc34 	bl	2d97c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1d114:	f06f 0515 	mvn.w	r5, #21

		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
	}

	return 0;
}
   1d118:	4628      	mov	r0, r5
   1d11a:	372c      	adds	r7, #44	; 0x2c
   1d11c:	46bd      	mov	sp, r7
   1d11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1d122:	f107 0108 	add.w	r1, r7, #8
   1d126:	f00f f94d 	bl	2c3c4 <bt_settings_decode_key>
	if (err) {
   1d12a:	4605      	mov	r5, r0
   1d12c:	b190      	cbz	r0, 1d154 <sc_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   1d12e:	466d      	mov	r5, sp
   1d130:	b088      	sub	sp, #32
   1d132:	466a      	mov	r2, sp
   1d134:	4b38      	ldr	r3, [pc, #224]	; (1d218 <sc_set+0x12c>)
   1d136:	4837      	ldr	r0, [pc, #220]	; (1d214 <sc_set+0x128>)
   1d138:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d13c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d140:	8393      	strh	r3, [r2, #28]
   1d142:	4b36      	ldr	r3, [pc, #216]	; (1d21c <sc_set+0x130>)
   1d144:	f842 3f10 	str.w	r3, [r2, #16]!
   1d148:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1d14c:	f010 fc16 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1d150:	46ad      	mov	sp, r5
		return -EINVAL;
   1d152:	e7df      	b.n	1d114 <sc_set+0x28>
	settings_name_next(name, &next);
   1d154:	1d39      	adds	r1, r7, #4
   1d156:	4620      	mov	r0, r4
   1d158:	f00e fcda 	bl	2bb10 <settings_name_next>
	if (!next) {
   1d15c:	6878      	ldr	r0, [r7, #4]
   1d15e:	b1a0      	cbz	r0, 1d18a <sc_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   1d160:	220a      	movs	r2, #10
   1d162:	4629      	mov	r1, r5
   1d164:	f00e ffe3 	bl	2c12e <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1d168:	b178      	cbz	r0, 1d18a <sc_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   1d16a:	466c      	mov	r4, sp
   1d16c:	b088      	sub	sp, #32
   1d16e:	466a      	mov	r2, sp
   1d170:	4b2b      	ldr	r3, [pc, #172]	; (1d220 <sc_set+0x134>)
   1d172:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d176:	2303      	movs	r3, #3
   1d178:	f842 3f10 	str.w	r3, [r2, #16]!
   1d17c:	4825      	ldr	r0, [pc, #148]	; (1d214 <sc_set+0x128>)
   1d17e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d182:	f010 fbfb 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1d186:	46a5      	mov	sp, r4
			return -EINVAL;
   1d188:	e7c4      	b.n	1d114 <sc_set+0x28>
	cfg = find_sc_cfg(id, &addr);
   1d18a:	f107 0108 	add.w	r1, r7, #8
   1d18e:	2000      	movs	r0, #0
   1d190:	f7ff fec0 	bl	1cf14 <find_sc_cfg>
	if (!cfg && len_rd) {
   1d194:	4604      	mov	r4, r0
   1d196:	bb98      	cbnz	r0, 1d200 <sc_set+0x114>
   1d198:	2e00      	cmp	r6, #0
   1d19a:	d0bd      	beq.n	1d118 <sc_set+0x2c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1d19c:	4921      	ldr	r1, [pc, #132]	; (1d224 <sc_set+0x138>)
   1d19e:	f7ff feb9 	bl	1cf14 <find_sc_cfg>
		if (!cfg) {
   1d1a2:	4604      	mov	r4, r0
   1d1a4:	b968      	cbnz	r0, 1d1c2 <sc_set+0xd6>
			LOG_ERR("Unable to restore SC: no cfg left");
   1d1a6:	4b20      	ldr	r3, [pc, #128]	; (1d228 <sc_set+0x13c>)
   1d1a8:	627b      	str	r3, [r7, #36]	; 0x24
   1d1aa:	2302      	movs	r3, #2
   1d1ac:	4819      	ldr	r0, [pc, #100]	; (1d214 <sc_set+0x128>)
   1d1ae:	623b      	str	r3, [r7, #32]
   1d1b0:	f107 0220 	add.w	r2, r7, #32
   1d1b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d1b8:	f010 fbe0 	bl	2d97c <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1d1bc:	f06f 050b 	mvn.w	r5, #11
   1d1c0:	e7aa      	b.n	1d118 <sc_set+0x2c>
		cfg->id = id;
   1d1c2:	2300      	movs	r3, #0
   1d1c4:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1d1c8:	f107 0108 	add.w	r1, r7, #8
   1d1cc:	f010 fbcd 	bl	2d96a <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1d1d0:	f104 0108 	add.w	r1, r4, #8
   1d1d4:	2204      	movs	r2, #4
   1d1d6:	4648      	mov	r0, r9
   1d1d8:	47c0      	blx	r8
		if (len < 0) {
   1d1da:	1e04      	subs	r4, r0, #0
   1d1dc:	da9c      	bge.n	1d118 <sc_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1d1de:	466d      	mov	r5, sp
   1d1e0:	b088      	sub	sp, #32
   1d1e2:	466a      	mov	r2, sp
   1d1e4:	4b11      	ldr	r3, [pc, #68]	; (1d22c <sc_set+0x140>)
   1d1e6:	480b      	ldr	r0, [pc, #44]	; (1d214 <sc_set+0x128>)
   1d1e8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d1ec:	2303      	movs	r3, #3
   1d1ee:	f842 3f10 	str.w	r3, [r2, #16]!
   1d1f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d1f6:	f010 fbc1 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1d1fa:	46ad      	mov	sp, r5
			return len;
   1d1fc:	4625      	mov	r5, r4
   1d1fe:	e78b      	b.n	1d118 <sc_set+0x2c>
	if (len_rd) {
   1d200:	2e00      	cmp	r6, #0
   1d202:	d1e5      	bne.n	1d1d0 <sc_set+0xe4>
		memset(cfg, 0, sizeof(*cfg));
   1d204:	220c      	movs	r2, #12
   1d206:	4631      	mov	r1, r6
   1d208:	f00f f874 	bl	2c2f4 <memset>
		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1d20c:	e784      	b.n	1d118 <sc_set+0x2c>
   1d20e:	bf00      	nop
   1d210:	00031c6a 	.word	0x00031c6a
   1d214:	000302ac 	.word	0x000302ac
   1d218:	00032f79 	.word	0x00032f79
   1d21c:	01000003 	.word	0x01000003
   1d220:	00032f95 	.word	0x00032f95
   1d224:	00031bf1 	.word	0x00031bf1
   1d228:	00032fb0 	.word	0x00032fb0
   1d22c:	00032fd2 	.word	0x00032fd2

0001d230 <sc_store>:
{
   1d230:	b5b0      	push	{r4, r5, r7, lr}
	if (cfg->id) {
   1d232:	4605      	mov	r5, r0
{
   1d234:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1d236:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1d23a:	af02      	add	r7, sp, #8
   1d23c:	4604      	mov	r4, r0
	if (cfg->id) {
   1d23e:	b31a      	cbz	r2, 1d288 <sc_store+0x58>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1d240:	2104      	movs	r1, #4
   1d242:	4638      	mov	r0, r7
   1d244:	f00d f8f5 	bl	2a432 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1d248:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1d24a:	4a10      	ldr	r2, [pc, #64]	; (1d28c <sc_store+0x5c>)
   1d24c:	2124      	movs	r1, #36	; 0x24
   1d24e:	1d38      	adds	r0, r7, #4
   1d250:	462b      	mov	r3, r5
   1d252:	f7fa fd5b 	bl	17d0c <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1d256:	2204      	movs	r2, #4
   1d258:	f104 0108 	add.w	r1, r4, #8
   1d25c:	18b8      	adds	r0, r7, r2
   1d25e:	f7f9 f9c3 	bl	165e8 <settings_save_one>
	if (err) {
   1d262:	b170      	cbz	r0, 1d282 <sc_store+0x52>
		LOG_ERR("failed to store SC (err %d)", err);
   1d264:	466c      	mov	r4, sp
   1d266:	b088      	sub	sp, #32
   1d268:	aa02      	add	r2, sp, #8
   1d26a:	4b09      	ldr	r3, [pc, #36]	; (1d290 <sc_store+0x60>)
   1d26c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d270:	2303      	movs	r3, #3
   1d272:	f842 3f10 	str.w	r3, [r2, #16]!
   1d276:	4807      	ldr	r0, [pc, #28]	; (1d294 <sc_store+0x64>)
   1d278:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d27c:	f010 fb7e 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1d280:	46a5      	mov	sp, r4
}
   1d282:	3728      	adds	r7, #40	; 0x28
   1d284:	46bd      	mov	sp, r7
   1d286:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1d288:	9200      	str	r2, [sp, #0]
   1d28a:	e7de      	b.n	1d24a <sc_store+0x1a>
   1d28c:	00033342 	.word	0x00033342
   1d290:	00032ff3 	.word	0x00032ff3
   1d294:	000302ac 	.word	0x000302ac

0001d298 <sc_save>:
{
   1d298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d29c:	b086      	sub	sp, #24
   1d29e:	4680      	mov	r8, r0
   1d2a0:	460f      	mov	r7, r1
   1d2a2:	4616      	mov	r6, r2
   1d2a4:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1d2a6:	f7ff fe35 	bl	1cf14 <find_sc_cfg>
	if (!cfg) {
   1d2aa:	4604      	mov	r4, r0
   1d2ac:	b9b0      	cbnz	r0, 1d2dc <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1d2ae:	4919      	ldr	r1, [pc, #100]	; (1d314 <sc_save+0x7c>)
   1d2b0:	f7ff fe30 	bl	1cf14 <find_sc_cfg>
		if (!cfg) {
   1d2b4:	4604      	mov	r4, r0
   1d2b6:	b960      	cbnz	r0, 1d2d2 <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   1d2b8:	4b17      	ldr	r3, [pc, #92]	; (1d318 <sc_save+0x80>)
   1d2ba:	9305      	str	r3, [sp, #20]
   1d2bc:	4817      	ldr	r0, [pc, #92]	; (1d31c <sc_save+0x84>)
   1d2be:	2302      	movs	r3, #2
   1d2c0:	aa04      	add	r2, sp, #16
   1d2c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d2c6:	9304      	str	r3, [sp, #16]
   1d2c8:	f010 fb58 	bl	2d97c <z_log_msg_static_create.constprop.0>
}
   1d2cc:	b006      	add	sp, #24
   1d2ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1d2d2:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1d2d6:	4639      	mov	r1, r7
   1d2d8:	f010 fb47 	bl	2d96a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1d2dc:	8922      	ldrh	r2, [r4, #8]
   1d2de:	8963      	ldrh	r3, [r4, #10]
   1d2e0:	b97a      	cbnz	r2, 1d302 <sc_save+0x6a>
   1d2e2:	b983      	cbnz	r3, 1d306 <sc_save+0x6e>
		cfg->data.start = start;
   1d2e4:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1d2e6:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1d2e8:	4621      	mov	r1, r4
   1d2ea:	f811 0b01 	ldrb.w	r0, [r1], #1
   1d2ee:	f00f f9fb 	bl	2c6e8 <bt_addr_le_is_bonded>
   1d2f2:	2800      	cmp	r0, #0
   1d2f4:	d0ea      	beq.n	1d2cc <sc_save+0x34>
		sc_store(cfg);
   1d2f6:	4620      	mov	r0, r4
}
   1d2f8:	b006      	add	sp, #24
   1d2fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1d2fe:	f7ff bf97 	b.w	1d230 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1d302:	4296      	cmp	r6, r2
   1d304:	d302      	bcc.n	1d30c <sc_save+0x74>
   1d306:	429d      	cmp	r5, r3
   1d308:	d8ed      	bhi.n	1d2e6 <sc_save+0x4e>
   1d30a:	e7df      	b.n	1d2cc <sc_save+0x34>
	if (*end < new_end) {
   1d30c:	429d      	cmp	r5, r3
		*start = new_start;
   1d30e:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1d310:	d9ea      	bls.n	1d2e8 <sc_save+0x50>
   1d312:	e7e8      	b.n	1d2e6 <sc_save+0x4e>
   1d314:	00031bf1 	.word	0x00031bf1
   1d318:	0003300f 	.word	0x0003300f
   1d31c:	000302ac 	.word	0x000302ac

0001d320 <db_hash_store>:
{
   1d320:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1d322:	490c      	ldr	r1, [pc, #48]	; (1d354 <db_hash_store+0x34>)
   1d324:	480c      	ldr	r0, [pc, #48]	; (1d358 <db_hash_store+0x38>)
{
   1d326:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1d328:	2210      	movs	r2, #16
   1d32a:	f7f9 f95d 	bl	165e8 <settings_save_one>
	if (err) {
   1d32e:	b170      	cbz	r0, 1d34e <db_hash_store+0x2e>
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   1d330:	466c      	mov	r4, sp
   1d332:	b088      	sub	sp, #32
   1d334:	466a      	mov	r2, sp
   1d336:	4b09      	ldr	r3, [pc, #36]	; (1d35c <db_hash_store+0x3c>)
   1d338:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d33c:	2303      	movs	r3, #3
   1d33e:	f842 3f10 	str.w	r3, [r2, #16]!
   1d342:	4807      	ldr	r0, [pc, #28]	; (1d360 <db_hash_store+0x40>)
   1d344:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d348:	f010 fb18 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1d34c:	46a5      	mov	sp, r4
}
   1d34e:	46bd      	mov	sp, r7
   1d350:	bd98      	pop	{r3, r4, r7, pc}
   1d352:	bf00      	nop
   1d354:	200024e8 	.word	0x200024e8
   1d358:	0003302e 	.word	0x0003302e
   1d35c:	00033036 	.word	0x00033036
   1d360:	000302ac 	.word	0x000302ac

0001d364 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   1d364:	b5b0      	push	{r4, r5, r7, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1d366:	490e      	ldr	r1, [pc, #56]	; (1d3a0 <db_hash_set+0x3c>)
{
   1d368:	4614      	mov	r4, r2
   1d36a:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1d36c:	2210      	movs	r2, #16
   1d36e:	4618      	mov	r0, r3
   1d370:	47a0      	blx	r4
	if (len < 0) {
   1d372:	1e04      	subs	r4, r0, #0
   1d374:	da11      	bge.n	1d39a <db_hash_set+0x36>
		LOG_ERR("Failed to decode value (err %zd)", len);
   1d376:	466d      	mov	r5, sp
   1d378:	b088      	sub	sp, #32
   1d37a:	466a      	mov	r2, sp
   1d37c:	4b09      	ldr	r3, [pc, #36]	; (1d3a4 <db_hash_set+0x40>)
   1d37e:	480a      	ldr	r0, [pc, #40]	; (1d3a8 <db_hash_set+0x44>)
   1d380:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d384:	2303      	movs	r3, #3
   1d386:	f842 3f10 	str.w	r3, [r2, #16]!
   1d38a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d38e:	f010 faf5 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1d392:	46ad      	mov	sp, r5
	}

	LOG_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash), "Stored Hash: ");

	return 0;
}
   1d394:	4620      	mov	r0, r4
   1d396:	46bd      	mov	sp, r7
   1d398:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   1d39a:	2400      	movs	r4, #0
   1d39c:	e7fa      	b.n	1d394 <db_hash_set+0x30>
   1d39e:	bf00      	nop
   1d3a0:	200024f8 	.word	0x200024f8
   1d3a4:	00032fd2 	.word	0x00032fd2
   1d3a8:	000302ac 	.word	0x000302ac

0001d3ac <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1d3ac:	b508      	push	{r3, lr}
   1d3ae:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d3b0:	6881      	ldr	r1, [r0, #8]
   1d3b2:	4a07      	ldr	r2, [pc, #28]	; (1d3d0 <remove_peer_from_attr+0x24>)
   1d3b4:	4291      	cmp	r1, r2
   1d3b6:	d109      	bne.n	1d3cc <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1d3b8:	791a      	ldrb	r2, [r3, #4]
   1d3ba:	6819      	ldr	r1, [r3, #0]
   1d3bc:	68c0      	ldr	r0, [r0, #12]
   1d3be:	f010 faa9 	bl	2d914 <ccc_find_cfg>
	if (cfg) {
   1d3c2:	b118      	cbz	r0, 1d3cc <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   1d3c4:	220a      	movs	r2, #10
   1d3c6:	2100      	movs	r1, #0
   1d3c8:	f00e ff94 	bl	2c2f4 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1d3cc:	2001      	movs	r0, #1
   1d3ce:	bd08      	pop	{r3, pc}
   1d3d0:	0001d701 	.word	0x0001d701

0001d3d4 <convert_to_id_on_match>:
{
   1d3d4:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d3d6:	4b09      	ldr	r3, [pc, #36]	; (1d3fc <convert_to_id_on_match+0x28>)
{
   1d3d8:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d3da:	6882      	ldr	r2, [r0, #8]
   1d3dc:	429a      	cmp	r2, r3
   1d3de:	d10a      	bne.n	1d3f6 <convert_to_id_on_match+0x22>
		if (bt_addr_le_eq(&ccc->cfg[i].peer, match->private_addr)) {
   1d3e0:	68c4      	ldr	r4, [r0, #12]
   1d3e2:	6829      	ldr	r1, [r5, #0]
   1d3e4:	3401      	adds	r4, #1
   1d3e6:	4620      	mov	r0, r4
   1d3e8:	f010 fa8c 	bl	2d904 <bt_addr_le_eq>
   1d3ec:	b118      	cbz	r0, 1d3f6 <convert_to_id_on_match+0x22>
			bt_addr_le_copy(&ccc->cfg[i].peer, match->id_addr);
   1d3ee:	6869      	ldr	r1, [r5, #4]
   1d3f0:	4620      	mov	r0, r4
   1d3f2:	f010 faba 	bl	2d96a <bt_addr_le_copy>
}
   1d3f6:	2001      	movs	r0, #1
   1d3f8:	bd38      	pop	{r3, r4, r5, pc}
   1d3fa:	bf00      	nop
   1d3fc:	0001d701 	.word	0x0001d701

0001d400 <ccc_save>:
{
   1d400:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d402:	4b0c      	ldr	r3, [pc, #48]	; (1d434 <ccc_save+0x34>)
{
   1d404:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d406:	6882      	ldr	r2, [r0, #8]
   1d408:	429a      	cmp	r2, r3
{
   1d40a:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d40c:	d10f      	bne.n	1d42e <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1d40e:	7922      	ldrb	r2, [r4, #4]
   1d410:	6821      	ldr	r1, [r4, #0]
   1d412:	68c0      	ldr	r0, [r0, #12]
   1d414:	f010 fa7e 	bl	2d914 <ccc_find_cfg>
	if (!cfg) {
   1d418:	b148      	cbz	r0, 1d42e <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1d41a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   1d41e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1d422:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1d424:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1d426:	8901      	ldrh	r1, [r0, #8]
   1d428:	8151      	strh	r1, [r2, #10]
	save->count++;
   1d42a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1d42e:	2001      	movs	r0, #1
   1d430:	bd38      	pop	{r3, r4, r5, pc}
   1d432:	bf00      	nop
   1d434:	0001d701 	.word	0x0001d701

0001d438 <sc_commit.part.0>:
	k_work_reschedule(&gatt_sc.work, timeout);
   1d438:	4802      	ldr	r0, [pc, #8]	; (1d444 <sc_commit.part.0+0xc>)
   1d43a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1d43e:	2300      	movs	r3, #0
   1d440:	f009 b964 	b.w	2670c <k_work_reschedule>
   1d444:	20002580 	.word	0x20002580

0001d448 <sc_commit>:
{
   1d448:	b508      	push	{r3, lr}
   1d44a:	2104      	movs	r1, #4
   1d44c:	4808      	ldr	r0, [pc, #32]	; (1d470 <sc_commit+0x28>)
   1d44e:	f010 fa6e 	bl	2d92e <atomic_or>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d452:	4807      	ldr	r0, [pc, #28]	; (1d470 <sc_commit+0x28>)
   1d454:	f06f 0102 	mvn.w	r1, #2
   1d458:	f010 fa78 	bl	2d94c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1d45c:	4804      	ldr	r0, [pc, #16]	; (1d470 <sc_commit+0x28>)
   1d45e:	f010 fa87 	bl	2d970 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1d462:	07c3      	lsls	r3, r0, #31
   1d464:	d501      	bpl.n	1d46a <sc_commit+0x22>
   1d466:	f7ff ffe7 	bl	1d438 <sc_commit.part.0>
}
   1d46a:	2000      	movs	r0, #0
   1d46c:	bd08      	pop	{r3, pc}
   1d46e:	bf00      	nop
   1d470:	200025b0 	.word	0x200025b0

0001d474 <clear_cf_cfg>:
{
   1d474:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1d476:	490c      	ldr	r1, [pc, #48]	; (1d4a8 <clear_cf_cfg+0x34>)
{
   1d478:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1d47a:	3001      	adds	r0, #1
   1d47c:	f010 fa75 	bl	2d96a <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1d480:	f104 0008 	add.w	r0, r4, #8
   1d484:	2201      	movs	r2, #1
   1d486:	2100      	movs	r1, #0
   1d488:	f00e ff34 	bl	2c2f4 <memset>
   1d48c:	f3bf 8f5b 	dmb	ish
   1d490:	340c      	adds	r4, #12
   1d492:	2300      	movs	r3, #0
   1d494:	e854 2f00 	ldrex	r2, [r4]
   1d498:	e844 3100 	strex	r1, r3, [r4]
   1d49c:	2900      	cmp	r1, #0
   1d49e:	d1f9      	bne.n	1d494 <clear_cf_cfg+0x20>
   1d4a0:	f3bf 8f5b 	dmb	ish
}
   1d4a4:	bd10      	pop	{r4, pc}
   1d4a6:	bf00      	nop
   1d4a8:	00031bf1 	.word	0x00031bf1

0001d4ac <bt_gatt_clear_sc>:
{
   1d4ac:	b5b0      	push	{r4, r5, r7, lr}
   1d4ae:	b08c      	sub	sp, #48	; 0x30
   1d4b0:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1d4b2:	f7ff fd2f 	bl	1cf14 <find_sc_cfg>
	if (!cfg) {
   1d4b6:	4604      	mov	r4, r0
   1d4b8:	b330      	cbz	r0, 1d508 <bt_gatt_clear_sc+0x5c>
		if (cfg->id) {
   1d4ba:	4605      	mov	r5, r0
   1d4bc:	f815 2b01 	ldrb.w	r2, [r5], #1
   1d4c0:	b332      	cbz	r2, 1d510 <bt_gatt_clear_sc+0x64>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1d4c2:	2104      	movs	r1, #4
   1d4c4:	4638      	mov	r0, r7
   1d4c6:	f00c ffb4 	bl	2a432 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1d4ca:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1d4cc:	1d38      	adds	r0, r7, #4
   1d4ce:	4a11      	ldr	r2, [pc, #68]	; (1d514 <bt_gatt_clear_sc+0x68>)
   1d4d0:	462b      	mov	r3, r5
   1d4d2:	2124      	movs	r1, #36	; 0x24
   1d4d4:	f7fa fc1a 	bl	17d0c <bt_settings_encode_key>
		err = settings_delete(key);
   1d4d8:	1d38      	adds	r0, r7, #4
   1d4da:	f00e faf1 	bl	2bac0 <settings_delete>
		if (err) {
   1d4de:	b170      	cbz	r0, 1d4fe <bt_gatt_clear_sc+0x52>
			LOG_ERR("failed to delete SC (err %d)", err);
   1d4e0:	466d      	mov	r5, sp
   1d4e2:	b088      	sub	sp, #32
   1d4e4:	aa02      	add	r2, sp, #8
   1d4e6:	4b0c      	ldr	r3, [pc, #48]	; (1d518 <bt_gatt_clear_sc+0x6c>)
   1d4e8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d4ec:	2303      	movs	r3, #3
   1d4ee:	f842 3f10 	str.w	r3, [r2, #16]!
   1d4f2:	480a      	ldr	r0, [pc, #40]	; (1d51c <bt_gatt_clear_sc+0x70>)
   1d4f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d4f8:	f010 fa40 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1d4fc:	46ad      	mov	sp, r5
	memset(cfg, 0, sizeof(*cfg));
   1d4fe:	220c      	movs	r2, #12
   1d500:	2100      	movs	r1, #0
   1d502:	4620      	mov	r0, r4
   1d504:	f00e fef6 	bl	2c2f4 <memset>
}
   1d508:	2000      	movs	r0, #0
   1d50a:	3728      	adds	r7, #40	; 0x28
   1d50c:	46bd      	mov	sp, r7
   1d50e:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1d510:	9200      	str	r2, [sp, #0]
   1d512:	e7db      	b.n	1d4cc <bt_gatt_clear_sc+0x20>
   1d514:	00033342 	.word	0x00033342
   1d518:	0003305c 	.word	0x0003305c
   1d51c:	000302ac 	.word	0x000302ac

0001d520 <sc_clear>:
{
   1d520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d522:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1d526:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d528:	4631      	mov	r1, r6
   1d52a:	7a00      	ldrb	r0, [r0, #8]
{
   1d52c:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d52e:	f00f f8db 	bl	2c6e8 <bt_addr_le_is_bonded>
   1d532:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1d534:	4631      	mov	r1, r6
   1d536:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d538:	b19d      	cbz	r5, 1d562 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1d53a:	f7ff ffb7 	bl	1d4ac <bt_gatt_clear_sc>
		if (err) {
   1d53e:	b170      	cbz	r0, 1d55e <sc_clear+0x3e>
			LOG_ERR("Failed to clear SC %d", err);
   1d540:	466c      	mov	r4, sp
   1d542:	b088      	sub	sp, #32
   1d544:	466a      	mov	r2, sp
   1d546:	4b0b      	ldr	r3, [pc, #44]	; (1d574 <sc_clear+0x54>)
   1d548:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d54c:	2303      	movs	r3, #3
   1d54e:	f842 3f10 	str.w	r3, [r2, #16]!
   1d552:	4809      	ldr	r0, [pc, #36]	; (1d578 <sc_clear+0x58>)
   1d554:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d558:	f010 fa10 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1d55c:	46a5      	mov	sp, r4
}
   1d55e:	46bd      	mov	sp, r7
   1d560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1d562:	f7ff fcd7 	bl	1cf14 <find_sc_cfg>
		if (cfg) {
   1d566:	2800      	cmp	r0, #0
   1d568:	d0f9      	beq.n	1d55e <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   1d56a:	220c      	movs	r2, #12
   1d56c:	4629      	mov	r1, r5
   1d56e:	f00e fec1 	bl	2c2f4 <memset>
}
   1d572:	e7f4      	b.n	1d55e <sc_clear+0x3e>
   1d574:	00033079 	.word	0x00033079
   1d578:	000302ac 	.word	0x000302ac

0001d57c <bt_gatt_store_cf.isra.0>:
static int bt_gatt_store_cf(uint8_t id, const bt_addr_le_t *peer)
   1d57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d580:	b08c      	sub	sp, #48	; 0x30
   1d582:	af02      	add	r7, sp, #8
   1d584:	4605      	mov	r5, r0
   1d586:	460e      	mov	r6, r1
	cfg = find_cf_cfg_by_addr(id, peer);
   1d588:	f7ff fc8a 	bl	1cea0 <find_cf_cfg_by_addr>
	if (!cfg) {
   1d58c:	4604      	mov	r4, r0
   1d58e:	2800      	cmp	r0, #0
   1d590:	d03e      	beq.n	1d610 <bt_gatt_store_cf.isra.0+0x94>
		str = (char *)cfg->data;
   1d592:	f100 0808 	add.w	r8, r0, #8
		if (id) {
   1d596:	b15d      	cbz	r5, 1d5b0 <bt_gatt_store_cf.isra.0+0x34>
			u8_to_dec(id_str, sizeof(id_str), id);
   1d598:	462a      	mov	r2, r5
   1d59a:	2104      	movs	r1, #4
   1d59c:	4638      	mov	r0, r7
   1d59e:	f00c ff48 	bl	2a432 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1d5a2:	4a1e      	ldr	r2, [pc, #120]	; (1d61c <bt_gatt_store_cf.isra.0+0xa0>)
   1d5a4:	9700      	str	r7, [sp, #0]
   1d5a6:	4633      	mov	r3, r6
   1d5a8:	2124      	movs	r1, #36	; 0x24
   1d5aa:	1d38      	adds	r0, r7, #4
   1d5ac:	f7fa fbae 	bl	17d0c <bt_settings_encode_key>
		memcpy(dst, str, len);
   1d5b0:	2201      	movs	r2, #1
   1d5b2:	4641      	mov	r1, r8
   1d5b4:	4638      	mov	r0, r7
   1d5b6:	f00e fe92 	bl	2c2de <memcpy>
   1d5ba:	f104 000c 	add.w	r0, r4, #12
   1d5be:	f010 f9d7 	bl	2d970 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d5c2:	f000 0001 	and.w	r0, r0, #1
   1d5c6:	7078      	strb	r0, [r7, #1]
	if (!cfg || !id) {
   1d5c8:	bb25      	cbnz	r5, 1d614 <bt_gatt_store_cf.isra.0+0x98>
		len += CF_FLAGS_STORE_LEN;
   1d5ca:	2502      	movs	r5, #2
		str = dst;
   1d5cc:	463c      	mov	r4, r7
		bt_settings_encode_key(key, sizeof(key), "cf",
   1d5ce:	2300      	movs	r3, #0
   1d5d0:	9300      	str	r3, [sp, #0]
   1d5d2:	4a12      	ldr	r2, [pc, #72]	; (1d61c <bt_gatt_store_cf.isra.0+0xa0>)
   1d5d4:	4633      	mov	r3, r6
   1d5d6:	2124      	movs	r1, #36	; 0x24
   1d5d8:	1d38      	adds	r0, r7, #4
   1d5da:	f7fa fb97 	bl	17d0c <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1d5de:	462a      	mov	r2, r5
   1d5e0:	4621      	mov	r1, r4
   1d5e2:	1d38      	adds	r0, r7, #4
   1d5e4:	f7f9 f800 	bl	165e8 <settings_save_one>
	if (err) {
   1d5e8:	b170      	cbz	r0, 1d608 <bt_gatt_store_cf.isra.0+0x8c>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   1d5ea:	466c      	mov	r4, sp
   1d5ec:	b088      	sub	sp, #32
   1d5ee:	aa02      	add	r2, sp, #8
   1d5f0:	4b0b      	ldr	r3, [pc, #44]	; (1d620 <bt_gatt_store_cf.isra.0+0xa4>)
   1d5f2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d5f6:	2303      	movs	r3, #3
   1d5f8:	f842 3f10 	str.w	r3, [r2, #16]!
   1d5fc:	4809      	ldr	r0, [pc, #36]	; (1d624 <bt_gatt_store_cf.isra.0+0xa8>)
   1d5fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d602:	f010 f9bb 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1d606:	46a5      	mov	sp, r4
}
   1d608:	3728      	adds	r7, #40	; 0x28
   1d60a:	46bd      	mov	sp, r7
   1d60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   1d610:	4605      	mov	r5, r0
   1d612:	e7dc      	b.n	1d5ce <bt_gatt_store_cf.isra.0+0x52>
		len += CF_FLAGS_STORE_LEN;
   1d614:	2502      	movs	r5, #2
		str = dst;
   1d616:	463c      	mov	r4, r7
   1d618:	e7e1      	b.n	1d5de <bt_gatt_store_cf.isra.0+0x62>
   1d61a:	bf00      	nop
   1d61c:	0003333c 	.word	0x0003333c
   1d620:	0003308f 	.word	0x0003308f
   1d624:	000302ac 	.word	0x000302ac

0001d628 <read_ppcp>:
{
   1d628:	b513      	push	{r0, r1, r4, lr}
   1d62a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1d62e:	4c0b      	ldr	r4, [pc, #44]	; (1d65c <read_ppcp+0x34>)
{
   1d630:	4610      	mov	r0, r2
	if (offset > value_len) {
   1d632:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1d634:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   1d638:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   1d63c:	d80b      	bhi.n	1d656 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1d63e:	f1c1 0408 	rsb	r4, r1, #8
   1d642:	429c      	cmp	r4, r3
   1d644:	bfa8      	it	ge
   1d646:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d648:	4622      	mov	r2, r4
   1d64a:	4469      	add	r1, sp
   1d64c:	f00e fe47 	bl	2c2de <memcpy>
}
   1d650:	4620      	mov	r0, r4
   1d652:	b002      	add	sp, #8
   1d654:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d656:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1d65a:	e7f9      	b.n	1d650 <read_ppcp+0x28>
   1d65c:	00280018 	.word	0x00280018

0001d660 <disconnected_cb>:
{
   1d660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d664:	4b23      	ldr	r3, [pc, #140]	; (1d6f4 <disconnected_cb+0x94>)
{
   1d666:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d668:	6882      	ldr	r2, [r0, #8]
   1d66a:	429a      	cmp	r2, r3
{
   1d66c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d66e:	d102      	bne.n	1d676 <disconnected_cb+0x16>
	ccc = attr->user_data;
   1d670:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1d672:	8963      	ldrh	r3, [r4, #10]
   1d674:	bb33      	cbnz	r3, 1d6c4 <disconnected_cb+0x64>
}
   1d676:	2001      	movs	r0, #1
   1d678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   1d67c:	f00f fa9e 	bl	2cbbc <bt_conn_unref>
		if (ccc->cfg_changed) {
   1d680:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1d682:	2100      	movs	r1, #0
   1d684:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1d686:	2b00      	cmp	r3, #0
   1d688:	d0f5      	beq.n	1d676 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1d68a:	4638      	mov	r0, r7
   1d68c:	4798      	blx	r3
   1d68e:	e7f2      	b.n	1d676 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d690:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1d694:	7a28      	ldrb	r0, [r5, #8]
   1d696:	4641      	mov	r1, r8
   1d698:	f00f f826 	bl	2c6e8 <bt_addr_le_is_bonded>
   1d69c:	b968      	cbnz	r0, 1d6ba <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1d69e:	4b16      	ldr	r3, [pc, #88]	; (1d6f8 <disconnected_cb+0x98>)
   1d6a0:	429c      	cmp	r4, r3
   1d6a2:	d102      	bne.n	1d6aa <disconnected_cb+0x4a>
					sc_clear(conn);
   1d6a4:	4628      	mov	r0, r5
   1d6a6:	f7ff ff3b 	bl	1d520 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1d6aa:	4914      	ldr	r1, [pc, #80]	; (1d6fc <disconnected_cb+0x9c>)
   1d6ac:	4630      	mov	r0, r6
   1d6ae:	f010 f95c 	bl	2d96a <bt_addr_le_copy>
	cfg->id = 0U;
   1d6b2:	2300      	movs	r3, #0
   1d6b4:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1d6b6:	8123      	strh	r3, [r4, #8]
}
   1d6b8:	e7e2      	b.n	1d680 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d6ba:	4641      	mov	r1, r8
   1d6bc:	4630      	mov	r0, r6
   1d6be:	f010 f954 	bl	2d96a <bt_addr_le_copy>
   1d6c2:	e7dd      	b.n	1d680 <disconnected_cb+0x20>
		if (!cfg->value) {
   1d6c4:	8923      	ldrh	r3, [r4, #8]
   1d6c6:	2b00      	cmp	r3, #0
   1d6c8:	d0da      	beq.n	1d680 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d6ca:	4626      	mov	r6, r4
   1d6cc:	4628      	mov	r0, r5
   1d6ce:	f816 1b01 	ldrb.w	r1, [r6], #1
   1d6d2:	4632      	mov	r2, r6
   1d6d4:	f00f fb22 	bl	2cd1c <bt_conn_is_peer_addr_le>
   1d6d8:	2800      	cmp	r0, #0
   1d6da:	d1d9      	bne.n	1d690 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1d6dc:	7820      	ldrb	r0, [r4, #0]
   1d6de:	4631      	mov	r1, r6
   1d6e0:	f7fe f80c 	bl	1b6fc <bt_conn_lookup_addr_le>
			if (tmp) {
   1d6e4:	2800      	cmp	r0, #0
   1d6e6:	d0cb      	beq.n	1d680 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   1d6e8:	7b43      	ldrb	r3, [r0, #13]
   1d6ea:	2b07      	cmp	r3, #7
   1d6ec:	d1c6      	bne.n	1d67c <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1d6ee:	f00f fa65 	bl	2cbbc <bt_conn_unref>
	if (!value_used) {
   1d6f2:	e7c0      	b.n	1d676 <disconnected_cb+0x16>
   1d6f4:	0001d701 	.word	0x0001d701
   1d6f8:	20000900 	.word	0x20000900
   1d6fc:	00031bf1 	.word	0x00031bf1

0001d700 <bt_gatt_attr_write_ccc>:
{
   1d700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d704:	b086      	sub	sp, #24
   1d706:	461f      	mov	r7, r3
   1d708:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1d70c:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1d710:	4606      	mov	r6, r0
   1d712:	4688      	mov	r8, r1
	if (offset) {
   1d714:	2b00      	cmp	r3, #0
   1d716:	d154      	bne.n	1d7c2 <bt_gatt_attr_write_ccc+0xc2>
	if (!len || len > sizeof(uint16_t)) {
   1d718:	1e7b      	subs	r3, r7, #1
   1d71a:	2b01      	cmp	r3, #1
   1d71c:	d854      	bhi.n	1d7c8 <bt_gatt_attr_write_ccc+0xc8>
	if (len < sizeof(uint16_t)) {
   1d71e:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1d720:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1d722:	7815      	ldrb	r5, [r2, #0]
   1d724:	bf18      	it	ne
   1d726:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1d728:	f7ff fc78 	bl	1d01c <find_ccc_cfg>
	if (!cfg) {
   1d72c:	4604      	mov	r4, r0
   1d72e:	b9e8      	cbnz	r0, 1d76c <bt_gatt_attr_write_ccc+0x6c>
		if (!value) {
   1d730:	b91d      	cbnz	r5, 1d73a <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1d732:	4638      	mov	r0, r7
}
   1d734:	b006      	add	sp, #24
   1d736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1d73a:	4649      	mov	r1, r9
   1d73c:	f7ff fc6e 	bl	1d01c <find_ccc_cfg>
		if (!cfg) {
   1d740:	4604      	mov	r4, r0
   1d742:	b960      	cbnz	r0, 1d75e <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   1d744:	4b22      	ldr	r3, [pc, #136]	; (1d7d0 <bt_gatt_attr_write_ccc+0xd0>)
   1d746:	4823      	ldr	r0, [pc, #140]	; (1d7d4 <bt_gatt_attr_write_ccc+0xd4>)
   1d748:	9305      	str	r3, [sp, #20]
   1d74a:	aa04      	add	r2, sp, #16
   1d74c:	2302      	movs	r3, #2
   1d74e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1d752:	9304      	str	r3, [sp, #16]
   1d754:	f010 f912 	bl	2d97c <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1d758:	f06f 0010 	mvn.w	r0, #16
   1d75c:	e7ea      	b.n	1d734 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d75e:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1d762:	3001      	adds	r0, #1
   1d764:	f010 f901 	bl	2d96a <bt_addr_le_copy>
		cfg->id = conn->id;
   1d768:	7a33      	ldrb	r3, [r6, #8]
   1d76a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1d76c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1d770:	b9db      	cbnz	r3, 1d7aa <bt_gatt_attr_write_ccc+0xaa>
	value_changed = cfg->value != value;
   1d772:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   1d776:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1d778:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   1d77c:	42ab      	cmp	r3, r5
   1d77e:	d003      	beq.n	1d788 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
   1d780:	4649      	mov	r1, r9
   1d782:	4640      	mov	r0, r8
   1d784:	f010 f848 	bl	2d818 <gatt_ccc_changed>
	if (value_changed) {
   1d788:	45aa      	cmp	sl, r5
   1d78a:	d005      	beq.n	1d798 <bt_gatt_attr_write_ccc+0x98>
		gatt_delayed_store_enqueue(conn->id, &conn->le.dst, DELAYED_STORE_CCC);
   1d78c:	7a30      	ldrb	r0, [r6, #8]
   1d78e:	2200      	movs	r2, #0
   1d790:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1d794:	f7ff fc56 	bl	1d044 <gatt_delayed_store_enqueue>
	if (!value) {
   1d798:	2d00      	cmp	r5, #0
   1d79a:	d1ca      	bne.n	1d732 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1d79c:	490e      	ldr	r1, [pc, #56]	; (1d7d8 <bt_gatt_attr_write_ccc+0xd8>)
   1d79e:	1c60      	adds	r0, r4, #1
   1d7a0:	f010 f8e3 	bl	2d96a <bt_addr_le_copy>
	cfg->id = 0U;
   1d7a4:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1d7a6:	8125      	strh	r5, [r4, #8]
}
   1d7a8:	e7c3      	b.n	1d732 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1d7aa:	462a      	mov	r2, r5
   1d7ac:	4641      	mov	r1, r8
   1d7ae:	4630      	mov	r0, r6
   1d7b0:	4798      	blx	r3
		if (write < 0) {
   1d7b2:	2800      	cmp	r0, #0
   1d7b4:	dbbe      	blt.n	1d734 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1d7b6:	3801      	subs	r0, #1
   1d7b8:	2801      	cmp	r0, #1
   1d7ba:	d9da      	bls.n	1d772 <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1d7bc:	f06f 000d 	mvn.w	r0, #13
   1d7c0:	e7b8      	b.n	1d734 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d7c2:	f06f 0006 	mvn.w	r0, #6
   1d7c6:	e7b5      	b.n	1d734 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1d7c8:	f06f 000c 	mvn.w	r0, #12
   1d7cc:	e7b2      	b.n	1d734 <bt_gatt_attr_write_ccc+0x34>
   1d7ce:	bf00      	nop
   1d7d0:	000330b8 	.word	0x000330b8
   1d7d4:	000302ac 	.word	0x000302ac
   1d7d8:	00031bf1 	.word	0x00031bf1

0001d7dc <sc_indicate.constprop.0>:
static void sc_indicate(uint16_t start, uint16_t end)
   1d7dc:	b508      	push	{r3, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d7de:	4812      	ldr	r0, [pc, #72]	; (1d828 <sc_indicate.constprop.0+0x4c>)
   1d7e0:	2101      	movs	r1, #1
   1d7e2:	f010 f8a4 	bl	2d92e <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1d7e6:	f010 0f01 	tst.w	r0, #1
   1d7ea:	4b10      	ldr	r3, [pc, #64]	; (1d82c <sc_indicate.constprop.0+0x50>)
   1d7ec:	d10a      	bne.n	1d804 <sc_indicate.constprop.0+0x28>
		gatt_sc.start = start;
   1d7ee:	4a10      	ldr	r2, [pc, #64]	; (1d830 <sc_indicate.constprop.0+0x54>)
   1d7f0:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1d7f2:	480d      	ldr	r0, [pc, #52]	; (1d828 <sc_indicate.constprop.0+0x4c>)
   1d7f4:	f010 f8bc 	bl	2d970 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1d7f8:	0783      	lsls	r3, r0, #30
   1d7fa:	d413      	bmi.n	1d824 <sc_indicate.constprop.0+0x48>
}
   1d7fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d800:	f7ff be1a 	b.w	1d438 <sc_commit.part.0>
	if (new_start >= *start && new_end <= *end) {
   1d804:	8b1a      	ldrh	r2, [r3, #24]
   1d806:	8b58      	ldrh	r0, [r3, #26]
   1d808:	2a01      	cmp	r2, #1
   1d80a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d80e:	d805      	bhi.n	1d81c <sc_indicate.constprop.0+0x40>
   1d810:	4290      	cmp	r0, r2
   1d812:	d007      	beq.n	1d824 <sc_indicate.constprop.0+0x48>
		*end = new_end;
   1d814:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d818:	835a      	strh	r2, [r3, #26]
   1d81a:	e7ea      	b.n	1d7f2 <sc_indicate.constprop.0+0x16>
	if (*end < new_end) {
   1d81c:	4290      	cmp	r0, r2
		*start = new_start;
   1d81e:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   1d820:	d0e7      	beq.n	1d7f2 <sc_indicate.constprop.0+0x16>
   1d822:	e7f7      	b.n	1d814 <sc_indicate.constprop.0+0x38>
}
   1d824:	bd08      	pop	{r3, pc}
   1d826:	bf00      	nop
   1d828:	200025b0 	.word	0x200025b0
   1d82c:	20002560 	.word	0x20002560
   1d830:	ffff0001 	.word	0xffff0001

0001d834 <set_all_change_unaware>:
{
   1d834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d836:	4c0b      	ldr	r4, [pc, #44]	; (1d864 <set_all_change_unaware+0x30>)
		if (!bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d838:	4f0b      	ldr	r7, [pc, #44]	; (1d868 <set_all_change_unaware+0x34>)
	for (size_t i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1d83a:	2500      	movs	r5, #0
		if (!bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d83c:	1c66      	adds	r6, r4, #1
   1d83e:	4639      	mov	r1, r7
   1d840:	4630      	mov	r0, r6
   1d842:	f010 f85f 	bl	2d904 <bt_addr_le_eq>
   1d846:	4601      	mov	r1, r0
   1d848:	b930      	cbnz	r0, 1d858 <set_all_change_unaware+0x24>
			set_change_aware_no_store(cfg, false);
   1d84a:	4620      	mov	r0, r4
   1d84c:	f010 f950 	bl	2daf0 <set_change_aware_no_store>
			bt_gatt_store_cf(cfg->id, &cfg->peer);
   1d850:	7820      	ldrb	r0, [r4, #0]
   1d852:	4631      	mov	r1, r6
   1d854:	f7ff fe92 	bl	1d57c <bt_gatt_store_cf.isra.0>
	for (size_t i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1d858:	3501      	adds	r5, #1
   1d85a:	2d06      	cmp	r5, #6
   1d85c:	f104 0410 	add.w	r4, r4, #16
   1d860:	d1ec      	bne.n	1d83c <set_all_change_unaware+0x8>
}
   1d862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d864:	20003bc4 	.word	0x20003bc4
   1d868:	00031bf1 	.word	0x00031bf1

0001d86c <cf_write>:
{
   1d86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d870:	b086      	sub	sp, #24
   1d872:	461f      	mov	r7, r3
   1d874:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   1d878:	2b01      	cmp	r3, #1
{
   1d87a:	4606      	mov	r6, r0
   1d87c:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1d87e:	d83b      	bhi.n	1d8f8 <cf_write+0x8c>
	if (offset + len > sizeof(cfg->data)) {
   1d880:	443b      	add	r3, r7
   1d882:	2b01      	cmp	r3, #1
   1d884:	463d      	mov	r5, r7
   1d886:	dc3a      	bgt.n	1d8fe <cf_write+0x92>
	cfg = find_cf_cfg(conn);
   1d888:	f7ff fba6 	bl	1cfd8 <find_cf_cfg>
	if (!cfg) {
   1d88c:	4604      	mov	r4, r0
   1d88e:	b998      	cbnz	r0, 1d8b8 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   1d890:	f7ff fba2 	bl	1cfd8 <find_cf_cfg>
	if (!cfg) {
   1d894:	4604      	mov	r4, r0
   1d896:	b978      	cbnz	r0, 1d8b8 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   1d898:	4b1c      	ldr	r3, [pc, #112]	; (1d90c <cf_write+0xa0>)
   1d89a:	9305      	str	r3, [sp, #20]
   1d89c:	481c      	ldr	r0, [pc, #112]	; (1d910 <cf_write+0xa4>)
   1d89e:	2302      	movs	r3, #2
   1d8a0:	aa04      	add	r2, sp, #16
   1d8a2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1d8a6:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   1d8aa:	9304      	str	r3, [sp, #16]
   1d8ac:	f010 f866 	bl	2d97c <z_log_msg_static_create.constprop.0>
}
   1d8b0:	4628      	mov	r0, r5
   1d8b2:	b006      	add	sp, #24
   1d8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1d8b8:	b197      	cbz	r7, 1d8e0 <cf_write+0x74>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1d8ba:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1d8bc:	f898 2000 	ldrb.w	r2, [r8]
   1d8c0:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1d8c2:	fa21 f003 	lsr.w	r0, r1, r3
   1d8c6:	07c7      	lsls	r7, r0, #31
   1d8c8:	d503      	bpl.n	1d8d2 <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   1d8ca:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1d8ce:	07c0      	lsls	r0, r0, #31
   1d8d0:	d518      	bpl.n	1d904 <cf_write+0x98>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1d8d2:	3301      	adds	r3, #1
   1d8d4:	2b03      	cmp	r3, #3
   1d8d6:	d1f4      	bne.n	1d8c2 <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1d8d8:	f002 0207 	and.w	r2, r2, #7
   1d8dc:	4311      	orrs	r1, r2
   1d8de:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d8e0:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1d8e4:	1c60      	adds	r0, r4, #1
   1d8e6:	f010 f840 	bl	2d96a <bt_addr_le_copy>
	cfg->id = conn->id;
   1d8ea:	7a33      	ldrb	r3, [r6, #8]
   1d8ec:	7023      	strb	r3, [r4, #0]
	set_change_aware(cfg, true);
   1d8ee:	2101      	movs	r1, #1
   1d8f0:	4620      	mov	r0, r4
   1d8f2:	f010 f90d 	bl	2db10 <set_change_aware>
	return len;
   1d8f6:	e7db      	b.n	1d8b0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d8f8:	f06f 0506 	mvn.w	r5, #6
   1d8fc:	e7d8      	b.n	1d8b0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1d8fe:	f06f 050c 	mvn.w	r5, #12
   1d902:	e7d5      	b.n	1d8b0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1d904:	f06f 0512 	mvn.w	r5, #18
   1d908:	e7d2      	b.n	1d8b0 <cf_write+0x44>
   1d90a:	bf00      	nop
   1d90c:	000330d2 	.word	0x000330d2
   1d910:	000302ac 	.word	0x000302ac

0001d914 <sc_indicate_rsp>:
{
   1d914:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d916:	f06f 0102 	mvn.w	r1, #2
   1d91a:	4604      	mov	r4, r0
   1d91c:	480e      	ldr	r0, [pc, #56]	; (1d958 <sc_indicate_rsp+0x44>)
   1d91e:	f010 f815 	bl	2d94c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1d922:	480d      	ldr	r0, [pc, #52]	; (1d958 <sc_indicate_rsp+0x44>)
   1d924:	f010 f824 	bl	2d970 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1d928:	07c2      	lsls	r2, r0, #31
   1d92a:	d504      	bpl.n	1d936 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1d92c:	480b      	ldr	r0, [pc, #44]	; (1d95c <sc_indicate_rsp+0x48>)
   1d92e:	2200      	movs	r2, #0
   1d930:	2300      	movs	r3, #0
   1d932:	f008 feeb 	bl	2670c <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1d936:	4620      	mov	r0, r4
   1d938:	f00f ff46 	bl	2d7c8 <bt_att_fixed_chan_only>
   1d93c:	b158      	cbz	r0, 1d956 <sc_indicate_rsp+0x42>
		cfg = find_cf_cfg(conn);
   1d93e:	4620      	mov	r0, r4
   1d940:	f7ff fb4a 	bl	1cfd8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1d944:	b138      	cbz	r0, 1d956 <sc_indicate_rsp+0x42>
   1d946:	7a03      	ldrb	r3, [r0, #8]
   1d948:	07db      	lsls	r3, r3, #31
   1d94a:	d504      	bpl.n	1d956 <sc_indicate_rsp+0x42>
}
   1d94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			set_change_aware(cfg, true);
   1d950:	2101      	movs	r1, #1
   1d952:	f010 b8dd 	b.w	2db10 <set_change_aware>
}
   1d956:	bd10      	pop	{r4, pc}
   1d958:	200025b0 	.word	0x200025b0
   1d95c:	20002580 	.word	0x20002580

0001d960 <cf_set>:
{
   1d960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d964:	b08b      	sub	sp, #44	; 0x2c
   1d966:	4689      	mov	r9, r1
   1d968:	af00      	add	r7, sp, #0
   1d96a:	4616      	mov	r6, r2
   1d96c:	4698      	mov	r8, r3
	if (!name) {
   1d96e:	4604      	mov	r4, r0
   1d970:	b988      	cbnz	r0, 1d996 <cf_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   1d972:	4b5a      	ldr	r3, [pc, #360]	; (1dadc <cf_set+0x17c>)
   1d974:	627b      	str	r3, [r7, #36]	; 0x24
   1d976:	2302      	movs	r3, #2
   1d978:	4859      	ldr	r0, [pc, #356]	; (1dae0 <cf_set+0x180>)
   1d97a:	623b      	str	r3, [r7, #32]
   1d97c:	f107 0220 	add.w	r2, r7, #32
   1d980:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d984:	f00f fffa 	bl	2d97c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1d988:	f06f 0515 	mvn.w	r5, #21
}
   1d98c:	4628      	mov	r0, r5
   1d98e:	372c      	adds	r7, #44	; 0x2c
   1d990:	46bd      	mov	sp, r7
   1d992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1d996:	f107 0108 	add.w	r1, r7, #8
   1d99a:	f00e fd13 	bl	2c3c4 <bt_settings_decode_key>
	if (err) {
   1d99e:	4605      	mov	r5, r0
   1d9a0:	b190      	cbz	r0, 1d9c8 <cf_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   1d9a2:	466d      	mov	r5, sp
   1d9a4:	b088      	sub	sp, #32
   1d9a6:	466a      	mov	r2, sp
   1d9a8:	4b4e      	ldr	r3, [pc, #312]	; (1dae4 <cf_set+0x184>)
   1d9aa:	484d      	ldr	r0, [pc, #308]	; (1dae0 <cf_set+0x180>)
   1d9ac:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d9b0:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d9b4:	8393      	strh	r3, [r2, #28]
   1d9b6:	4b4c      	ldr	r3, [pc, #304]	; (1dae8 <cf_set+0x188>)
   1d9b8:	f842 3f10 	str.w	r3, [r2, #16]!
   1d9bc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1d9c0:	f00f ffdc 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1d9c4:	46ad      	mov	sp, r5
		return -EINVAL;
   1d9c6:	e7df      	b.n	1d988 <cf_set+0x28>
	settings_name_next(name, &next);
   1d9c8:	1d39      	adds	r1, r7, #4
   1d9ca:	4620      	mov	r0, r4
   1d9cc:	f00e f8a0 	bl	2bb10 <settings_name_next>
	if (!next) {
   1d9d0:	6878      	ldr	r0, [r7, #4]
   1d9d2:	b1a0      	cbz	r0, 1d9fe <cf_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   1d9d4:	220a      	movs	r2, #10
   1d9d6:	4629      	mov	r1, r5
   1d9d8:	f00e fba9 	bl	2c12e <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1d9dc:	b178      	cbz	r0, 1d9fe <cf_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   1d9de:	466c      	mov	r4, sp
   1d9e0:	b088      	sub	sp, #32
   1d9e2:	466a      	mov	r2, sp
   1d9e4:	4b41      	ldr	r3, [pc, #260]	; (1daec <cf_set+0x18c>)
   1d9e6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d9ea:	2303      	movs	r3, #3
   1d9ec:	f842 3f10 	str.w	r3, [r2, #16]!
   1d9f0:	483b      	ldr	r0, [pc, #236]	; (1dae0 <cf_set+0x180>)
   1d9f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d9f6:	f00f ffc1 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1d9fa:	46a5      	mov	sp, r4
			return -EINVAL;
   1d9fc:	e7c4      	b.n	1d988 <cf_set+0x28>
	cfg = find_cf_cfg_by_addr(id, &addr);
   1d9fe:	f107 0108 	add.w	r1, r7, #8
   1da02:	2000      	movs	r0, #0
   1da04:	f7ff fa4c 	bl	1cea0 <find_cf_cfg_by_addr>
	if (!cfg) {
   1da08:	4604      	mov	r4, r0
   1da0a:	b9c0      	cbnz	r0, 1da3e <cf_set+0xde>
		cfg = find_cf_cfg(NULL);
   1da0c:	f7ff fae4 	bl	1cfd8 <find_cf_cfg>
		if (!cfg) {
   1da10:	4604      	mov	r4, r0
   1da12:	b968      	cbnz	r0, 1da30 <cf_set+0xd0>
			LOG_ERR("Unable to restore CF: no cfg left");
   1da14:	4b36      	ldr	r3, [pc, #216]	; (1daf0 <cf_set+0x190>)
   1da16:	627b      	str	r3, [r7, #36]	; 0x24
   1da18:	2302      	movs	r3, #2
   1da1a:	4831      	ldr	r0, [pc, #196]	; (1dae0 <cf_set+0x180>)
   1da1c:	623b      	str	r3, [r7, #32]
   1da1e:	f107 0220 	add.w	r2, r7, #32
   1da22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1da26:	f00f ffa9 	bl	2d97c <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1da2a:	f06f 050b 	mvn.w	r5, #11
   1da2e:	e7ad      	b.n	1d98c <cf_set+0x2c>
		cfg->id = id;
   1da30:	2300      	movs	r3, #0
   1da32:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1da36:	f107 0108 	add.w	r1, r7, #8
   1da3a:	f00f ff96 	bl	2d96a <bt_addr_le_copy>
	if (len_rd) {
   1da3e:	f1b9 0f00 	cmp.w	r9, #0
   1da42:	d047      	beq.n	1dad4 <cf_set+0x174>
		len = read_cb(cb_arg, dst, sizeof(dst));
   1da44:	2202      	movs	r2, #2
   1da46:	4639      	mov	r1, r7
   1da48:	4640      	mov	r0, r8
   1da4a:	47b0      	blx	r6
		if (len < 0) {
   1da4c:	1e06      	subs	r6, r0, #0
   1da4e:	da10      	bge.n	1da72 <cf_set+0x112>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1da50:	466c      	mov	r4, sp
   1da52:	b088      	sub	sp, #32
   1da54:	466a      	mov	r2, sp
   1da56:	4b27      	ldr	r3, [pc, #156]	; (1daf4 <cf_set+0x194>)
   1da58:	4821      	ldr	r0, [pc, #132]	; (1dae0 <cf_set+0x180>)
   1da5a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1da5e:	2303      	movs	r3, #3
   1da60:	f842 3f10 	str.w	r3, [r2, #16]!
   1da64:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1da68:	f00f ff88 	bl	2d97c <z_log_msg_static_create.constprop.0>
			return len;
   1da6c:	4635      	mov	r5, r6
   1da6e:	46a5      	mov	sp, r4
   1da70:	e78c      	b.n	1d98c <cf_set+0x2c>
		memcpy(cfg->data, dst, sizeof(cfg->data));
   1da72:	2201      	movs	r2, #1
   1da74:	4639      	mov	r1, r7
   1da76:	f104 0008 	add.w	r0, r4, #8
   1da7a:	f00e fc30 	bl	2c2de <memcpy>
		if (len != sizeof(dst)) {
   1da7e:	2e02      	cmp	r6, #2
   1da80:	d00f      	beq.n	1daa2 <cf_set+0x142>
			LOG_WRN("Change-aware status not found in settings, "
   1da82:	4b1d      	ldr	r3, [pc, #116]	; (1daf8 <cf_set+0x198>)
   1da84:	627b      	str	r3, [r7, #36]	; 0x24
   1da86:	2302      	movs	r3, #2
   1da88:	4815      	ldr	r0, [pc, #84]	; (1dae0 <cf_set+0x180>)
   1da8a:	623b      	str	r3, [r7, #32]
   1da8c:	f107 0220 	add.w	r2, r7, #32
   1da90:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1da94:	f00f ff72 	bl	2d97c <z_log_msg_static_create.constprop.0>
				set_change_aware(cfg, false);
   1da98:	2100      	movs	r1, #0
   1da9a:	4620      	mov	r0, r4
   1da9c:	f010 f838 	bl	2db10 <set_change_aware>
   1daa0:	e774      	b.n	1d98c <cf_set+0x2c>
			uint8_t change_aware = dst[sizeof(cfg->data)];
   1daa2:	7879      	ldrb	r1, [r7, #1]
			if (change_aware & ~BIT(CF_CHANGE_AWARE)) {
   1daa4:	2901      	cmp	r1, #1
   1daa6:	d90f      	bls.n	1dac8 <cf_set+0x168>
				LOG_WRN("Read back bad change-aware value: 0x%x, "
   1daa8:	466e      	mov	r6, sp
   1daaa:	b088      	sub	sp, #32
   1daac:	466a      	mov	r2, sp
   1daae:	4b13      	ldr	r3, [pc, #76]	; (1dafc <cf_set+0x19c>)
   1dab0:	480b      	ldr	r0, [pc, #44]	; (1dae0 <cf_set+0x180>)
   1dab2:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1dab6:	2303      	movs	r3, #3
   1dab8:	f842 3f10 	str.w	r3, [r2, #16]!
   1dabc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1dac0:	f00f ff5c 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1dac4:	46b5      	mov	sp, r6
   1dac6:	e7e7      	b.n	1da98 <cf_set+0x138>
				set_change_aware_no_store(cfg, change_aware);
   1dac8:	f001 0101 	and.w	r1, r1, #1
   1dacc:	4620      	mov	r0, r4
   1dace:	f010 f80f 	bl	2daf0 <set_change_aware_no_store>
   1dad2:	e75b      	b.n	1d98c <cf_set+0x2c>
		clear_cf_cfg(cfg);
   1dad4:	4620      	mov	r0, r4
   1dad6:	f7ff fccd 	bl	1d474 <clear_cf_cfg>
   1dada:	e757      	b.n	1d98c <cf_set+0x2c>
   1dadc:	00031c6a 	.word	0x00031c6a
   1dae0:	000302ac 	.word	0x000302ac
   1dae4:	00032f79 	.word	0x00032f79
   1dae8:	01000003 	.word	0x01000003
   1daec:	00032f95 	.word	0x00032f95
   1daf0:	000330fe 	.word	0x000330fe
   1daf4:	00032fd2 	.word	0x00032fd2
   1daf8:	00033120 	.word	0x00033120
   1dafc:	00033174 	.word	0x00033174

0001db00 <bt_gatt_init>:
{
   1db00:	b510      	push	{r4, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1db02:	481e      	ldr	r0, [pc, #120]	; (1db7c <bt_gatt_init+0x7c>)
   1db04:	2101      	movs	r1, #1
   1db06:	f00f ff12 	bl	2d92e <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   1db0a:	07c3      	lsls	r3, r0, #31
   1db0c:	d435      	bmi.n	1db7a <bt_gatt_init+0x7a>
   1db0e:	2102      	movs	r1, #2
   1db10:	481a      	ldr	r0, [pc, #104]	; (1db7c <bt_gatt_init+0x7c>)
   1db12:	f00f ff0c 	bl	2d92e <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   1db16:	4008      	ands	r0, r1
   1db18:	d107      	bne.n	1db2a <bt_gatt_init+0x2a>
   1db1a:	4919      	ldr	r1, [pc, #100]	; (1db80 <bt_gatt_init+0x80>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1db1c:	4a19      	ldr	r2, [pc, #100]	; (1db84 <bt_gatt_init+0x84>)
   1db1e:	880b      	ldrh	r3, [r1, #0]
   1db20:	4c19      	ldr	r4, [pc, #100]	; (1db88 <bt_gatt_init+0x88>)
   1db22:	42a2      	cmp	r2, r4
   1db24:	d323      	bcc.n	1db6e <bt_gatt_init+0x6e>
   1db26:	b100      	cbz	r0, 1db2a <bt_gatt_init+0x2a>
   1db28:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1db2a:	4b18      	ldr	r3, [pc, #96]	; (1db8c <bt_gatt_init+0x8c>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1db2c:	4918      	ldr	r1, [pc, #96]	; (1db90 <bt_gatt_init+0x90>)
   1db2e:	4819      	ldr	r0, [pc, #100]	; (1db94 <bt_gatt_init+0x94>)
   1db30:	2200      	movs	r2, #0
	list->tail = NULL;
   1db32:	e9c3 2200 	strd	r2, r2, [r3]
   1db36:	f011 fe33 	bl	2f7a0 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1db3a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1db3e:	2300      	movs	r3, #0
   1db40:	4814      	ldr	r0, [pc, #80]	; (1db94 <bt_gatt_init+0x94>)
   1db42:	f7fa f99b 	bl	17e7c <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1db46:	4914      	ldr	r1, [pc, #80]	; (1db98 <bt_gatt_init+0x98>)
   1db48:	4814      	ldr	r0, [pc, #80]	; (1db9c <bt_gatt_init+0x9c>)
   1db4a:	f011 fe29 	bl	2f7a0 <k_work_init_delayable>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1db4e:	2102      	movs	r1, #2
   1db50:	4813      	ldr	r0, [pc, #76]	; (1dba0 <bt_gatt_init+0xa0>)
   1db52:	f00f feec 	bl	2d92e <atomic_or>
	k_work_init_delayable(&gatt_delayed_store.work, delayed_store);
   1db56:	4913      	ldr	r1, [pc, #76]	; (1dba4 <bt_gatt_init+0xa4>)
   1db58:	4813      	ldr	r0, [pc, #76]	; (1dba8 <bt_gatt_init+0xa8>)
   1db5a:	f011 fe21 	bl	2f7a0 <k_work_init_delayable>
	bt_conn_auth_info_cb_register(&gatt_conn_auth_info_cb);
   1db5e:	4813      	ldr	r0, [pc, #76]	; (1dbac <bt_gatt_init+0xac>)
   1db60:	f7fd ff8a 	bl	1ba78 <bt_conn_auth_info_cb_register>
}
   1db64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&gatt_conn_cb);
   1db68:	4811      	ldr	r0, [pc, #68]	; (1dbb0 <bt_gatt_init+0xb0>)
   1db6a:	f7fd bda3 	b.w	1b6b4 <bt_conn_cb_register>
		last_static_handle += svc->attr_count;
   1db6e:	6850      	ldr	r0, [r2, #4]
   1db70:	4403      	add	r3, r0
   1db72:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1db74:	3208      	adds	r2, #8
   1db76:	2001      	movs	r0, #1
   1db78:	e7d3      	b.n	1db22 <bt_gatt_init+0x22>
}
   1db7a:	bd10      	pop	{r4, pc}
   1db7c:	20003c24 	.word	0x20003c24
   1db80:	200055de 	.word	0x200055de
   1db84:	00030244 	.word	0x00030244
   1db88:	0003025c 	.word	0x0003025c
   1db8c:	20003c28 	.word	0x20003c28
   1db90:	0002dc53 	.word	0x0002dc53
   1db94:	20002508 	.word	0x20002508
   1db98:	0001e1a9 	.word	0x0001e1a9
   1db9c:	20002580 	.word	0x20002580
   1dba0:	200025b0 	.word	0x200025b0
   1dba4:	0002de45 	.word	0x0002de45
   1dba8:	200024b8 	.word	0x200024b8
   1dbac:	200008d8 	.word	0x200008d8
   1dbb0:	200008bc 	.word	0x200008bc

0001dbb4 <bt_gatt_attr_get_handle>:
{
   1dbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1dbb8:	4603      	mov	r3, r0
   1dbba:	b148      	cbz	r0, 1dbd0 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1dbbc:	8a00      	ldrh	r0, [r0, #16]
   1dbbe:	b938      	cbnz	r0, 1dbd0 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1dbc0:	4912      	ldr	r1, [pc, #72]	; (1dc0c <bt_gatt_attr_get_handle+0x58>)
   1dbc2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1dc10 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1dbc6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1dbc8:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1dbcc:	4571      	cmp	r1, lr
   1dbce:	d301      	bcc.n	1dbd4 <bt_gatt_attr_get_handle+0x20>
}
   1dbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1dbd4:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1dbd8:	42bb      	cmp	r3, r7
   1dbda:	d304      	bcc.n	1dbe6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1dbdc:	fb0c 7206 	mla	r2, ip, r6, r7
   1dbe0:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1dbe2:	4293      	cmp	r3, r2
   1dbe4:	d90e      	bls.n	1dc04 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1dbe6:	4434      	add	r4, r6
   1dbe8:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1dbea:	3108      	adds	r1, #8
   1dbec:	4614      	mov	r4, r2
   1dbee:	e7ed      	b.n	1dbcc <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1dbf0:	fb0c 7805 	mla	r8, ip, r5, r7
   1dbf4:	4543      	cmp	r3, r8
   1dbf6:	d007      	beq.n	1dc08 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1dbf8:	3501      	adds	r5, #1
   1dbfa:	1962      	adds	r2, r4, r5
   1dbfc:	42b5      	cmp	r5, r6
   1dbfe:	b292      	uxth	r2, r2
   1dc00:	d1f6      	bne.n	1dbf0 <bt_gatt_attr_get_handle+0x3c>
   1dc02:	e7f2      	b.n	1dbea <bt_gatt_attr_get_handle+0x36>
   1dc04:	2500      	movs	r5, #0
   1dc06:	e7f8      	b.n	1dbfa <bt_gatt_attr_get_handle+0x46>
   1dc08:	4610      	mov	r0, r2
   1dc0a:	e7e1      	b.n	1dbd0 <bt_gatt_attr_get_handle+0x1c>
   1dc0c:	00030244 	.word	0x00030244
   1dc10:	0003025c 	.word	0x0003025c

0001dc14 <bt_gatt_foreach_attr_type>:
{
   1dc14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc18:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1dc1c:	9100      	str	r1, [sp, #0]
   1dc1e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1dc20:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1dc24:	2d00      	cmp	r5, #0
   1dc26:	bf08      	it	eq
   1dc28:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1dc2a:	4b24      	ldr	r3, [pc, #144]	; (1dcbc <bt_gatt_foreach_attr_type+0xa8>)
   1dc2c:	881b      	ldrh	r3, [r3, #0]
   1dc2e:	4283      	cmp	r3, r0
{
   1dc30:	4607      	mov	r7, r0
   1dc32:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1dc34:	d23c      	bcs.n	1dcb0 <bt_gatt_foreach_attr_type+0x9c>
}
   1dc36:	b003      	add	sp, #12
   1dc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1dc3c:	6873      	ldr	r3, [r6, #4]
   1dc3e:	4423      	add	r3, r4
   1dc40:	42bb      	cmp	r3, r7
   1dc42:	d232      	bcs.n	1dcaa <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1dc44:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1dc46:	3608      	adds	r6, #8
   1dc48:	4b1d      	ldr	r3, [pc, #116]	; (1dcc0 <bt_gatt_foreach_attr_type+0xac>)
   1dc4a:	429e      	cmp	r6, r3
   1dc4c:	d3f6      	bcc.n	1dc3c <bt_gatt_foreach_attr_type+0x28>
   1dc4e:	e7f2      	b.n	1dc36 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1dc50:	5889      	ldr	r1, [r1, r2]
   1dc52:	9301      	str	r3, [sp, #4]
   1dc54:	4640      	mov	r0, r8
   1dc56:	f00e fbd9 	bl	2c40c <bt_uuid_cmp>
   1dc5a:	9b01      	ldr	r3, [sp, #4]
   1dc5c:	b190      	cbz	r0, 1dc84 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1dc5e:	3401      	adds	r4, #1
   1dc60:	f10a 0a01 	add.w	sl, sl, #1
   1dc64:	b2a4      	uxth	r4, r4
   1dc66:	6873      	ldr	r3, [r6, #4]
   1dc68:	4553      	cmp	r3, sl
   1dc6a:	d9ec      	bls.n	1dc46 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1dc6c:	9b00      	ldr	r3, [sp, #0]
   1dc6e:	429c      	cmp	r4, r3
   1dc70:	d8e1      	bhi.n	1dc36 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1dc72:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1dc74:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   1dc76:	d3f2      	bcc.n	1dc5e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1dc78:	fb0b f20a 	mul.w	r2, fp, sl
   1dc7c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1dc7e:	f1b8 0f00 	cmp.w	r8, #0
   1dc82:	d1e5      	bne.n	1dc50 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1dc84:	f1b9 0f00 	cmp.w	r9, #0
   1dc88:	d10b      	bne.n	1dca2 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1dc8a:	3d01      	subs	r5, #1
   1dc8c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1dc8e:	4618      	mov	r0, r3
   1dc90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1dc92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1dc94:	4621      	mov	r1, r4
   1dc96:	4798      	blx	r3
	if (!*num_matches) {
   1dc98:	2d00      	cmp	r5, #0
   1dc9a:	d0cc      	beq.n	1dc36 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1dc9c:	2800      	cmp	r0, #0
   1dc9e:	d1de      	bne.n	1dc5e <bt_gatt_foreach_attr_type+0x4a>
   1dca0:	e7c9      	b.n	1dc36 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1dca2:	68da      	ldr	r2, [r3, #12]
   1dca4:	4591      	cmp	r9, r2
   1dca6:	d1da      	bne.n	1dc5e <bt_gatt_foreach_attr_type+0x4a>
   1dca8:	e7ef      	b.n	1dc8a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1dcaa:	f04f 0a00 	mov.w	sl, #0
   1dcae:	e7da      	b.n	1dc66 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1dcb0:	4e04      	ldr	r6, [pc, #16]	; (1dcc4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1dcb2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1dcb4:	f04f 0b14 	mov.w	fp, #20
   1dcb8:	e7c6      	b.n	1dc48 <bt_gatt_foreach_attr_type+0x34>
   1dcba:	bf00      	nop
   1dcbc:	200055de 	.word	0x200055de
   1dcc0:	0003025c 	.word	0x0003025c
   1dcc4:	00030244 	.word	0x00030244

0001dcc8 <db_hash_gen>:
{
   1dcc8:	b510      	push	{r4, lr}
   1dcca:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   1dccc:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1dcce:	aa22      	add	r2, sp, #136	; 0x88
   1dcd0:	4669      	mov	r1, sp
   1dcd2:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   1dcd4:	e9cd 4400 	strd	r4, r4, [sp]
   1dcd8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1dcdc:	f00e f947 	bl	2bf6e <tc_cmac_setup>
   1dce0:	b958      	cbnz	r0, 1dcfa <db_hash_gen+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   1dce2:	4b15      	ldr	r3, [pc, #84]	; (1dd38 <db_hash_gen+0x70>)
		LOG_ERR("Unable to calculate hash");
   1dce4:	9309      	str	r3, [sp, #36]	; 0x24
   1dce6:	4815      	ldr	r0, [pc, #84]	; (1dd3c <db_hash_gen+0x74>)
   1dce8:	2302      	movs	r3, #2
   1dcea:	aa08      	add	r2, sp, #32
   1dcec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dcf0:	9308      	str	r3, [sp, #32]
   1dcf2:	f00f fe43 	bl	2d97c <z_log_msg_static_create.constprop.0>
}
   1dcf6:	b04e      	add	sp, #312	; 0x138
   1dcf8:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1dcfa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1dcfe:	2001      	movs	r0, #1
   1dd00:	4a0f      	ldr	r2, [pc, #60]	; (1dd40 <db_hash_gen+0x78>)
   1dd02:	ab0a      	add	r3, sp, #40	; 0x28
   1dd04:	f00f ff9a 	bl	2dc3c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1dd08:	480e      	ldr	r0, [pc, #56]	; (1dd44 <db_hash_gen+0x7c>)
   1dd0a:	a90a      	add	r1, sp, #40	; 0x28
   1dd0c:	f00e f9c4 	bl	2c098 <tc_cmac_final>
   1dd10:	b908      	cbnz	r0, 1dd16 <db_hash_gen+0x4e>
		LOG_ERR("Unable to calculate hash");
   1dd12:	4b0d      	ldr	r3, [pc, #52]	; (1dd48 <db_hash_gen+0x80>)
   1dd14:	e7e6      	b.n	1dce4 <db_hash_gen+0x1c>
   1dd16:	4b0b      	ldr	r3, [pc, #44]	; (1dd44 <db_hash_gen+0x7c>)
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1dd18:	4621      	mov	r1, r4
   1dd1a:	f103 0210 	add.w	r2, r3, #16
   1dd1e:	3101      	adds	r1, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1dd20:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1dd22:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1dd26:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1dd2a:	2908      	cmp	r1, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1dd2c:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1dd2e:	d1f6      	bne.n	1dd1e <db_hash_gen+0x56>
   1dd30:	4806      	ldr	r0, [pc, #24]	; (1dd4c <db_hash_gen+0x84>)
   1dd32:	f00f fdfc 	bl	2d92e <atomic_or>
   1dd36:	e7de      	b.n	1dcf6 <db_hash_gen+0x2e>
   1dd38:	000331c5 	.word	0x000331c5
   1dd3c:	000302ac 	.word	0x000302ac
   1dd40:	0002d85f 	.word	0x0002d85f
   1dd44:	200024e8 	.word	0x200024e8
   1dd48:	000331de 	.word	0x000331de
   1dd4c:	200025b0 	.word	0x200025b0

0001dd50 <db_hash_read>:
{
   1dd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1dd52:	491c      	ldr	r1, [pc, #112]	; (1ddc4 <db_hash_read+0x74>)
{
   1dd54:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1dd58:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1dd5a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1dd5e:	4615      	mov	r5, r2
   1dd60:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1dd62:	f011 fd3f 	bl	2f7e4 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1dd66:	4818      	ldr	r0, [pc, #96]	; (1ddc8 <db_hash_read+0x78>)
   1dd68:	f00f fe02 	bl	2d970 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1dd6c:	0701      	lsls	r1, r0, #28
   1dd6e:	d405      	bmi.n	1dd7c <db_hash_read+0x2c>
		db_hash_gen();
   1dd70:	f7ff ffaa 	bl	1dcc8 <db_hash_gen>
			set_all_change_unaware();
   1dd74:	f7ff fd5e 	bl	1d834 <set_all_change_unaware>
			db_hash_store();
   1dd78:	f7ff fad2 	bl	1d320 <db_hash_store>
	cfg = find_cf_cfg(conn);
   1dd7c:	4620      	mov	r0, r4
   1dd7e:	f7ff f92b 	bl	1cfd8 <find_cf_cfg>
	if (cfg &&
   1dd82:	b168      	cbz	r0, 1dda0 <db_hash_read+0x50>
   1dd84:	7a03      	ldrb	r3, [r0, #8]
   1dd86:	07da      	lsls	r2, r3, #31
   1dd88:	d50a      	bpl.n	1dda0 <db_hash_read+0x50>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1dd8a:	f100 040c 	add.w	r4, r0, #12
   1dd8e:	4620      	mov	r0, r4
   1dd90:	f00f fdee 	bl	2d970 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1dd94:	07c3      	lsls	r3, r0, #31
   1dd96:	d403      	bmi.n	1dda0 <db_hash_read+0x50>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1dd98:	2102      	movs	r1, #2
   1dd9a:	4620      	mov	r0, r4
   1dd9c:	f00f fdc7 	bl	2d92e <atomic_or>
	if (offset > value_len) {
   1dda0:	2e10      	cmp	r6, #16
   1dda2:	d80c      	bhi.n	1ddbe <db_hash_read+0x6e>
	len = MIN(buf_len, value_len - offset);
   1dda4:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1dda8:	4908      	ldr	r1, [pc, #32]	; (1ddcc <db_hash_read+0x7c>)
	len = MIN(buf_len, value_len - offset);
   1ddaa:	42bc      	cmp	r4, r7
   1ddac:	bfa8      	it	ge
   1ddae:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1ddb0:	4622      	mov	r2, r4
   1ddb2:	4431      	add	r1, r6
   1ddb4:	4628      	mov	r0, r5
   1ddb6:	f00e fa92 	bl	2c2de <memcpy>
}
   1ddba:	4620      	mov	r0, r4
   1ddbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ddbe:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1ddc2:	e7fa      	b.n	1ddba <db_hash_read+0x6a>
   1ddc4:	20002538 	.word	0x20002538
   1ddc8:	200025b0 	.word	0x200025b0
   1ddcc:	200024e8 	.word	0x200024e8

0001ddd0 <do_db_hash>:
{
   1ddd0:	b510      	push	{r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1ddd2:	481a      	ldr	r0, [pc, #104]	; (1de3c <do_db_hash+0x6c>)
   1ddd4:	f00f fdcc 	bl	2d970 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ddd8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	if (new_hash) {
   1dddc:	f080 0401 	eor.w	r4, r0, #1
   1dde0:	b908      	cbnz	r0, 1dde6 <do_db_hash+0x16>
		db_hash_gen();
   1dde2:	f7ff ff71 	bl	1dcc8 <db_hash_gen>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1dde6:	4815      	ldr	r0, [pc, #84]	; (1de3c <do_db_hash+0x6c>)
   1dde8:	f00f fdc2 	bl	2d970 <atomic_get>
   1ddec:	4603      	mov	r3, r0
   1ddee:	4813      	ldr	r0, [pc, #76]	; (1de3c <do_db_hash+0x6c>)
   1ddf0:	f00f fdbe 	bl	2d970 <atomic_get>
	if (!hash_loaded_from_settings) {
   1ddf4:	06da      	lsls	r2, r3, #27
   1ddf6:	d51f      	bpl.n	1de38 <do_db_hash+0x68>
	if (already_processed) {
   1ddf8:	0683      	lsls	r3, r0, #26
   1ddfa:	d506      	bpl.n	1de0a <do_db_hash+0x3a>
		if (new_hash) {
   1ddfc:	b1e4      	cbz	r4, 1de38 <do_db_hash+0x68>
		set_all_change_unaware();
   1ddfe:	f7ff fd19 	bl	1d834 <set_all_change_unaware>
}
   1de02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1de06:	f7ff ba8b 	b.w	1d320 <db_hash_store>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1de0a:	2120      	movs	r1, #32
   1de0c:	480b      	ldr	r0, [pc, #44]	; (1de3c <do_db_hash+0x6c>)
   1de0e:	f00f fd8e 	bl	2d92e <atomic_or>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1de12:	490b      	ldr	r1, [pc, #44]	; (1de40 <do_db_hash+0x70>)
   1de14:	2210      	movs	r2, #16
   1de16:	1888      	adds	r0, r1, r2
   1de18:	f00e fa3a 	bl	2c290 <memcmp>
   1de1c:	b948      	cbnz	r0, 1de32 <do_db_hash+0x62>
			k_work_cancel_delayable(&gatt_sc.work);
   1de1e:	4809      	ldr	r0, [pc, #36]	; (1de44 <do_db_hash+0x74>)
   1de20:	f011 fccc 	bl	2f7bc <k_work_cancel_delayable>
}
   1de24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1de28:	4804      	ldr	r0, [pc, #16]	; (1de3c <do_db_hash+0x6c>)
   1de2a:	f06f 0101 	mvn.w	r1, #1
   1de2e:	f00f bd8d 	b.w	2d94c <atomic_and>
		sc_indicate(0x0001, 0xffff);
   1de32:	f7ff fcd3 	bl	1d7dc <sc_indicate.constprop.0>
   1de36:	e7e2      	b.n	1ddfe <do_db_hash+0x2e>
}
   1de38:	bd10      	pop	{r4, pc}
   1de3a:	bf00      	nop
   1de3c:	200025b0 	.word	0x200025b0
   1de40:	200024e8 	.word	0x200024e8
   1de44:	20002580 	.word	0x20002580

0001de48 <db_hash_commit>:
{
   1de48:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1de4a:	2110      	movs	r1, #16
   1de4c:	4803      	ldr	r0, [pc, #12]	; (1de5c <db_hash_commit+0x14>)
   1de4e:	f00f fd6e 	bl	2d92e <atomic_or>
	do_db_hash();
   1de52:	f7ff ffbd 	bl	1ddd0 <do_db_hash>
}
   1de56:	2000      	movs	r0, #0
   1de58:	bd08      	pop	{r3, pc}
   1de5a:	bf00      	nop
   1de5c:	200025b0 	.word	0x200025b0

0001de60 <ccc_set_direct>:
{
   1de60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1de64:	b0b8      	sub	sp, #224	; 0xe0
   1de66:	af00      	add	r7, sp, #0
   1de68:	460c      	mov	r4, r1
   1de6a:	4690      	mov	r8, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1de6c:	493f      	ldr	r1, [pc, #252]	; (1df6c <ccc_set_direct+0x10c>)
   1de6e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
   1de72:	463a      	mov	r2, r7
{
   1de74:	4699      	mov	r9, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1de76:	f00d fe27 	bl	2bac8 <settings_name_steq>
   1de7a:	b938      	cbnz	r0, 1de8c <ccc_set_direct+0x2c>
   1de7c:	f7ff f922 	bl	1d0c4 <ccc_set_direct.part.0>
   1de80:	4605      	mov	r5, r0
}
   1de82:	4628      	mov	r0, r5
   1de84:	37e0      	adds	r7, #224	; 0xe0
   1de86:	46bd      	mov	sp, r7
   1de88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1de8c:	683e      	ldr	r6, [r7, #0]
		settings_name_next(name, &next);
   1de8e:	1d39      	adds	r1, r7, #4
   1de90:	4630      	mov	r0, r6
   1de92:	f00d fe3d 	bl	2bb10 <settings_name_next>
		if (!name) {
   1de96:	b96e      	cbnz	r6, 1deb4 <ccc_set_direct+0x54>
			LOG_ERR("Insufficient number of arguments");
   1de98:	4b35      	ldr	r3, [pc, #212]	; (1df70 <ccc_set_direct+0x110>)
   1de9a:	637b      	str	r3, [r7, #52]	; 0x34
   1de9c:	2302      	movs	r3, #2
   1de9e:	4835      	ldr	r0, [pc, #212]	; (1df74 <ccc_set_direct+0x114>)
   1dea0:	633b      	str	r3, [r7, #48]	; 0x30
   1dea2:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1dea6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1deaa:	f00f fd67 	bl	2d97c <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1deae:	f06f 0415 	mvn.w	r4, #21
   1deb2:	e049      	b.n	1df48 <ccc_set_direct+0xe8>
		} else if (!next) {
   1deb4:	6878      	ldr	r0, [r7, #4]
   1deb6:	b9c0      	cbnz	r0, 1deea <ccc_set_direct+0x8a>
		err = bt_settings_decode_key(name, &addr);
   1deb8:	f107 0a08 	add.w	sl, r7, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1debc:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1debe:	4651      	mov	r1, sl
   1dec0:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   1dec2:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   1dec4:	f00e fa7e 	bl	2c3c4 <bt_settings_decode_key>
		if (err) {
   1dec8:	4605      	mov	r5, r0
   1deca:	b320      	cbz	r0, 1df16 <ccc_set_direct+0xb6>
			LOG_ERR("Unable to decode address %s", name);
   1decc:	466c      	mov	r4, sp
   1dece:	b088      	sub	sp, #32
   1ded0:	466a      	mov	r2, sp
   1ded2:	4b29      	ldr	r3, [pc, #164]	; (1df78 <ccc_set_direct+0x118>)
   1ded4:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1ded8:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dedc:	8393      	strh	r3, [r2, #28]
   1dede:	4b27      	ldr	r3, [pc, #156]	; (1df7c <ccc_set_direct+0x11c>)
   1dee0:	f842 3f10 	str.w	r3, [r2, #16]!
   1dee4:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1dee8:	e010      	b.n	1df0c <ccc_set_direct+0xac>
			unsigned long next_id = strtoul(next, NULL, 10);
   1deea:	220a      	movs	r2, #10
   1deec:	2100      	movs	r1, #0
   1deee:	f00e f91e 	bl	2c12e <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1def2:	2800      	cmp	r0, #0
   1def4:	d0e0      	beq.n	1deb8 <ccc_set_direct+0x58>
				LOG_ERR("Invalid local identity %lu", next_id);
   1def6:	466c      	mov	r4, sp
   1def8:	b088      	sub	sp, #32
   1defa:	466a      	mov	r2, sp
   1defc:	4b20      	ldr	r3, [pc, #128]	; (1df80 <ccc_set_direct+0x120>)
   1defe:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1df02:	2303      	movs	r3, #3
   1df04:	f842 3f10 	str.w	r3, [r2, #16]!
   1df08:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			LOG_ERR("Unable to decode address %s", name);
   1df0c:	4819      	ldr	r0, [pc, #100]	; (1df74 <ccc_set_direct+0x114>)
   1df0e:	f00f fd35 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1df12:	46a5      	mov	sp, r4
			return -EINVAL;
   1df14:	e7cb      	b.n	1deae <ccc_set_direct+0x4e>
		load.addr_with_id.addr = &addr;
   1df16:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   1df1a:	b32c      	cbz	r4, 1df68 <ccc_set_direct+0x108>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1df1c:	22c0      	movs	r2, #192	; 0xc0
   1df1e:	f107 0120 	add.w	r1, r7, #32
   1df22:	4648      	mov	r0, r9
   1df24:	47c0      	blx	r8
			if (len < 0) {
   1df26:	1e04      	subs	r4, r0, #0
   1df28:	da10      	bge.n	1df4c <ccc_set_direct+0xec>
				LOG_ERR("Failed to decode value (err %zd)", len);
   1df2a:	466d      	mov	r5, sp
   1df2c:	b088      	sub	sp, #32
   1df2e:	466a      	mov	r2, sp
   1df30:	4b14      	ldr	r3, [pc, #80]	; (1df84 <ccc_set_direct+0x124>)
   1df32:	4810      	ldr	r0, [pc, #64]	; (1df74 <ccc_set_direct+0x114>)
   1df34:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1df38:	2303      	movs	r3, #3
   1df3a:	f842 3f10 	str.w	r3, [r2, #16]!
   1df3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1df42:	f00f fd1b 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1df46:	46ad      	mov	sp, r5
			return -EINVAL;
   1df48:	4625      	mov	r5, r4
   1df4a:	e79a      	b.n	1de82 <ccc_set_direct+0x22>
			load.count = len / sizeof(*ccc_store);
   1df4c:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   1df4e:	f107 0320 	add.w	r3, r7, #32
			load.count = len / sizeof(*ccc_store);
   1df52:	e9c7 3406 	strd	r3, r4, [r7, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1df56:	4a0c      	ldr	r2, [pc, #48]	; (1df88 <ccc_set_direct+0x128>)
   1df58:	f107 0310 	add.w	r3, r7, #16
   1df5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1df60:	2001      	movs	r0, #1
   1df62:	f00f fe6b 	bl	2dc3c <bt_gatt_foreach_attr>
	return 0;
   1df66:	e78c      	b.n	1de82 <ccc_set_direct+0x22>
   1df68:	4623      	mov	r3, r4
   1df6a:	e7f2      	b.n	1df52 <ccc_set_direct+0xf2>
   1df6c:	000331f7 	.word	0x000331f7
   1df70:	00031c6a 	.word	0x00031c6a
   1df74:	000302ac 	.word	0x000302ac
   1df78:	00032f79 	.word	0x00032f79
   1df7c:	01000003 	.word	0x01000003
   1df80:	00032f95 	.word	0x00032f95
   1df84:	00032fd2 	.word	0x00032fd2
   1df88:	0001cf4d 	.word	0x0001cf4d

0001df8c <bt_gatt_attr_next>:
{
   1df8c:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1df8e:	2300      	movs	r3, #0
   1df90:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1df92:	f7ff fe0f 	bl	1dbb4 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1df96:	1c41      	adds	r1, r0, #1
   1df98:	b289      	uxth	r1, r1
   1df9a:	4608      	mov	r0, r1
   1df9c:	4a03      	ldr	r2, [pc, #12]	; (1dfac <bt_gatt_attr_next+0x20>)
   1df9e:	ab01      	add	r3, sp, #4
   1dfa0:	f00f fe4c 	bl	2dc3c <bt_gatt_foreach_attr>
}
   1dfa4:	9801      	ldr	r0, [sp, #4]
   1dfa6:	b003      	add	sp, #12
   1dfa8:	f85d fb04 	ldr.w	pc, [sp], #4
   1dfac:	0002d813 	.word	0x0002d813

0001dfb0 <gatt_indicate>:
{
   1dfb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dfb4:	4615      	mov	r5, r2
   1dfb6:	b086      	sub	sp, #24
   1dfb8:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1dfba:	2294      	movs	r2, #148	; 0x94
   1dfbc:	6869      	ldr	r1, [r5, #4]
{
   1dfbe:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1dfc0:	f00f fe49 	bl	2dc56 <bt_gatt_check_perm>
   1dfc4:	4680      	mov	r8, r0
   1dfc6:	b178      	cbz	r0, 1dfe8 <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   1dfc8:	4b36      	ldr	r3, [pc, #216]	; (1e0a4 <gatt_indicate+0xf4>)
   1dfca:	9305      	str	r3, [sp, #20]
   1dfcc:	4836      	ldr	r0, [pc, #216]	; (1e0a8 <gatt_indicate+0xf8>)
   1dfce:	2302      	movs	r3, #2
   1dfd0:	aa04      	add	r2, sp, #16
   1dfd2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1dfd6:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   1dfda:	9304      	str	r3, [sp, #16]
   1dfdc:	f00f fcce 	bl	2d97c <z_log_msg_static_create.constprop.0>
}
   1dfe0:	4628      	mov	r0, r5
   1dfe2:	b006      	add	sp, #24
   1dfe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1dfe8:	6869      	ldr	r1, [r5, #4]
   1dfea:	2202      	movs	r2, #2
   1dfec:	4630      	mov	r0, r6
   1dfee:	f00f fe6c 	bl	2dcca <bt_gatt_is_subscribed>
   1dff2:	b960      	cbnz	r0, 1e00e <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   1dff4:	4b2d      	ldr	r3, [pc, #180]	; (1e0ac <gatt_indicate+0xfc>)
   1dff6:	9305      	str	r3, [sp, #20]
   1dff8:	482b      	ldr	r0, [pc, #172]	; (1e0a8 <gatt_indicate+0xf8>)
   1dffa:	2302      	movs	r3, #2
   1dffc:	aa04      	add	r2, sp, #16
   1dffe:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e002:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1e004:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   1e008:	f00f fcb8 	bl	2d97c <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1e00c:	e7e8      	b.n	1dfe0 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1e00e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1e012:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1e014:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1e016:	f7fe fe43 	bl	1cca0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1e01a:	3702      	adds	r7, #2
	if (!req) {
   1e01c:	4604      	mov	r4, r0
   1e01e:	b1d0      	cbz	r0, 1e056 <gatt_indicate+0xa6>
	req->func = func;
   1e020:	4b23      	ldr	r3, [pc, #140]	; (1e0b0 <gatt_indicate+0x100>)
	req->len = len;
   1e022:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   1e024:	211d      	movs	r1, #29
   1e026:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1e028:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1e02c:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1e02e:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1e030:	463a      	mov	r2, r7
   1e032:	4630      	mov	r0, r6
   1e034:	f7fe fb60 	bl	1c6f8 <bt_att_create_pdu>
	if (!buf) {
   1e038:	4607      	mov	r7, r0
   1e03a:	b978      	cbnz	r0, 1e05c <gatt_indicate+0xac>
		LOG_WRN("No buffer available to send indication");
   1e03c:	4b1d      	ldr	r3, [pc, #116]	; (1e0b4 <gatt_indicate+0x104>)
   1e03e:	481a      	ldr	r0, [pc, #104]	; (1e0a8 <gatt_indicate+0xf8>)
   1e040:	9305      	str	r3, [sp, #20]
   1e042:	aa04      	add	r2, sp, #16
   1e044:	2302      	movs	r3, #2
   1e046:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e04a:	9304      	str	r3, [sp, #16]
   1e04c:	f00f fc96 	bl	2d97c <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1e050:	4620      	mov	r0, r4
   1e052:	f7fe fe47 	bl	1cce4 <bt_att_req_free>
		return -ENOMEM;
   1e056:	f06f 050b 	mvn.w	r5, #11
   1e05a:	e7c1      	b.n	1dfe0 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1e05c:	2301      	movs	r3, #1
   1e05e:	4642      	mov	r2, r8
   1e060:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1e062:	f107 0a0c 	add.w	sl, r7, #12
   1e066:	f00f fbcd 	bl	2d804 <bt_att_set_tx_meta_data>
   1e06a:	2102      	movs	r1, #2
   1e06c:	4650      	mov	r0, sl
   1e06e:	f010 fb48 	bl	2e702 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1e072:	4680      	mov	r8, r0
   1e074:	4650      	mov	r0, sl
   1e076:	f828 9b02 	strh.w	r9, [r8], #2
   1e07a:	8aa9      	ldrh	r1, [r5, #20]
   1e07c:	f010 fb41 	bl	2e702 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1e080:	8aaa      	ldrh	r2, [r5, #20]
   1e082:	6929      	ldr	r1, [r5, #16]
   1e084:	4640      	mov	r0, r8
   1e086:	f00e f92a 	bl	2c2de <memcpy>
	req->buf = buf;
   1e08a:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1e08c:	4621      	mov	r1, r4
   1e08e:	4630      	mov	r0, r6
   1e090:	f00f fb85 	bl	2d79e <bt_att_req_send>
	if (err) {
   1e094:	4605      	mov	r5, r0
   1e096:	2800      	cmp	r0, #0
   1e098:	d0a2      	beq.n	1dfe0 <gatt_indicate+0x30>
		bt_att_req_free(req);
   1e09a:	4620      	mov	r0, r4
   1e09c:	f7fe fe22 	bl	1cce4 <bt_att_req_free>
   1e0a0:	e79e      	b.n	1dfe0 <gatt_indicate+0x30>
   1e0a2:	bf00      	nop
   1e0a4:	000331fe 	.word	0x000331fe
   1e0a8:	000302ac 	.word	0x000302ac
   1e0ac:	00033214 	.word	0x00033214
   1e0b0:	0002d82d 	.word	0x0002d82d
   1e0b4:	0003323f 	.word	0x0003323f

0001e0b8 <bt_gatt_indicate>:
{
   1e0b8:	b530      	push	{r4, r5, lr}
   1e0ba:	4604      	mov	r4, r0
   1e0bc:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1e0be:	4837      	ldr	r0, [pc, #220]	; (1e19c <bt_gatt_indicate+0xe4>)
   1e0c0:	f00f fc56 	bl	2d970 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1e0c4:	0742      	lsls	r2, r0, #29
{
   1e0c6:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1e0c8:	d561      	bpl.n	1e18e <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1e0ca:	b114      	cbz	r4, 1e0d2 <bt_gatt_indicate+0x1a>
   1e0cc:	7b63      	ldrb	r3, [r4, #13]
   1e0ce:	2b07      	cmp	r3, #7
   1e0d0:	d160      	bne.n	1e194 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1e0d2:	6868      	ldr	r0, [r5, #4]
   1e0d4:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e0d6:	f7ff fd6d 	bl	1dbb4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1e0da:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e0dc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1e0e0:	b33a      	cbz	r2, 1e132 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e0e2:	a905      	add	r1, sp, #20
   1e0e4:	9102      	str	r1, [sp, #8]
   1e0e6:	492e      	ldr	r1, [pc, #184]	; (1e1a0 <bt_gatt_indicate+0xe8>)
   1e0e8:	9101      	str	r1, [sp, #4]
   1e0ea:	2101      	movs	r1, #1
	found->attr = NULL;
   1e0ec:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e0ee:	9100      	str	r1, [sp, #0]
   1e0f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1e0f4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e0f6:	f7ff fd8d 	bl	1dc14 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1e0fa:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1e0fc:	b91b      	cbnz	r3, 1e106 <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1e0fe:	f06f 0001 	mvn.w	r0, #1
}
   1e102:	b00b      	add	sp, #44	; 0x2c
   1e104:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1e106:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1e108:	9b05      	ldr	r3, [sp, #20]
   1e10a:	6818      	ldr	r0, [r3, #0]
   1e10c:	2300      	movs	r3, #0
   1e10e:	f88d 3010 	strb.w	r3, [sp, #16]
   1e112:	a904      	add	r1, sp, #16
   1e114:	f642 0303 	movw	r3, #10243	; 0x2803
   1e118:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e11c:	f00e f976 	bl	2c40c <bt_uuid_cmp>
   1e120:	b970      	cbnz	r0, 1e140 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1e122:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1e124:	68c3      	ldr	r3, [r0, #12]
   1e126:	799b      	ldrb	r3, [r3, #6]
   1e128:	069b      	lsls	r3, r3, #26
   1e12a:	d405      	bmi.n	1e138 <bt_gatt_indicate+0x80>
			return -EINVAL;
   1e12c:	f06f 0015 	mvn.w	r0, #21
   1e130:	e7e7      	b.n	1e102 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1e132:	2800      	cmp	r0, #0
   1e134:	d1e8      	bne.n	1e108 <bt_gatt_indicate+0x50>
   1e136:	e7e2      	b.n	1e0fe <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1e138:	f00f fd32 	bl	2dba0 <bt_gatt_attr_value_handle>
   1e13c:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1e140:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1e144:	b13c      	cbz	r4, 1e156 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1e146:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1e148:	4601      	mov	r1, r0
		params->_ref = 1;
   1e14a:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1e14c:	462a      	mov	r2, r5
   1e14e:	4620      	mov	r0, r4
   1e150:	f7ff ff2e 	bl	1dfb0 <gatt_indicate>
   1e154:	e7d5      	b.n	1e102 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1e156:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1e15a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1e15c:	2302      	movs	r3, #2
   1e15e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e162:	f642 1302 	movw	r3, #10498	; 0x2902
   1e166:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e16a:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1e16c:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e16e:	9302      	str	r3, [sp, #8]
   1e170:	4b0c      	ldr	r3, [pc, #48]	; (1e1a4 <bt_gatt_indicate+0xec>)
   1e172:	9301      	str	r3, [sp, #4]
   1e174:	2301      	movs	r3, #1
   1e176:	9300      	str	r3, [sp, #0]
   1e178:	aa04      	add	r2, sp, #16
   1e17a:	4623      	mov	r3, r4
   1e17c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1e180:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e182:	f88d 4010 	strb.w	r4, [sp, #16]
   1e186:	f7ff fd45 	bl	1dc14 <bt_gatt_foreach_attr_type>
	return data.err;
   1e18a:	9807      	ldr	r0, [sp, #28]
   1e18c:	e7b9      	b.n	1e102 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1e18e:	f06f 000a 	mvn.w	r0, #10
   1e192:	e7b6      	b.n	1e102 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   1e194:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e198:	e7b3      	b.n	1e102 <bt_gatt_indicate+0x4a>
   1e19a:	bf00      	nop
   1e19c:	200005c4 	.word	0x200005c4
   1e1a0:	0002d853 	.word	0x0002d853
   1e1a4:	0001e4d9 	.word	0x0001e4d9

0001e1a8 <sc_process>:
{
   1e1a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1e1aa:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1e1ae:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1e1b0:	f850 3c08 	ldr.w	r3, [r0, #-8]
   1e1b4:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1e1b6:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e1ba:	f06f 0101 	mvn.w	r1, #1
   1e1be:	4628      	mov	r0, r5
   1e1c0:	f00f fbc4 	bl	2d94c <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1e1c4:	4b0d      	ldr	r3, [pc, #52]	; (1e1fc <sc_process+0x54>)
   1e1c6:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1e1ca:	4b0d      	ldr	r3, [pc, #52]	; (1e200 <sc_process+0x58>)
   1e1cc:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1e1d0:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1e1d2:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1e1d4:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1e1d8:	2304      	movs	r3, #4
	sc->start = 0U;
   1e1da:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1e1de:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1e1e2:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1e1e6:	4631      	mov	r1, r6
   1e1e8:	f7ff ff66 	bl	1e0b8 <bt_gatt_indicate>
   1e1ec:	b918      	cbnz	r0, 1e1f6 <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e1ee:	2102      	movs	r1, #2
   1e1f0:	4628      	mov	r0, r5
   1e1f2:	f00f fb9c 	bl	2d92e <atomic_or>
}
   1e1f6:	b002      	add	sp, #8
   1e1f8:	bd70      	pop	{r4, r5, r6, pc}
   1e1fa:	bf00      	nop
   1e1fc:	00030990 	.word	0x00030990
   1e200:	0001d915 	.word	0x0001d915

0001e204 <update_ccc>:
{
   1e204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e208:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = data->conn;
   1e20a:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e20c:	4b3b      	ldr	r3, [pc, #236]	; (1e2fc <update_ccc+0xf8>)
{
   1e20e:	4690      	mov	r8, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e210:	6882      	ldr	r2, [r0, #8]
   1e212:	429a      	cmp	r2, r3
{
   1e214:	af00      	add	r7, sp, #0
   1e216:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e218:	d11f      	bne.n	1e25a <update_ccc+0x56>
	ccc = attr->user_data;
   1e21a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1e21c:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1e21e:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1e220:	b1db      	cbz	r3, 1e25a <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1e222:	7831      	ldrb	r1, [r6, #0]
   1e224:	4620      	mov	r0, r4
   1e226:	f00e fd79 	bl	2cd1c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1e22a:	b1b0      	cbz	r0, 1e25a <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1e22c:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1e230:	4629      	mov	r1, r5
   1e232:	4620      	mov	r0, r4
   1e234:	f00f fd0f 	bl	2dc56 <bt_gatt_check_perm>
		if (err) {
   1e238:	b330      	cbz	r0, 1e288 <update_ccc+0x84>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1e23a:	2803      	cmp	r0, #3
   1e23c:	d112      	bne.n	1e264 <update_ccc+0x60>
				LOG_WRN("CCC %p not writable", attr);
   1e23e:	466c      	mov	r4, sp
   1e240:	b088      	sub	sp, #32
   1e242:	466a      	mov	r2, sp
   1e244:	4b2e      	ldr	r3, [pc, #184]	; (1e300 <update_ccc+0xfc>)
   1e246:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1e24a:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1e24e:	f842 0f10 	str.w	r0, [r2, #16]!
   1e252:	482c      	ldr	r0, [pc, #176]	; (1e304 <update_ccc+0x100>)
   1e254:	f00f fb92 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1e258:	46a5      	mov	sp, r4
}
   1e25a:	2001      	movs	r0, #1
   1e25c:	3724      	adds	r7, #36	; 0x24
   1e25e:	46bd      	mov	sp, r7
   1e260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			sec = BT_SECURITY_L2;
   1e264:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1e266:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1e268:	bf0c      	ite	eq
   1e26a:	f04f 0903 	moveq.w	r9, #3
   1e26e:	f04f 0902 	movne.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   1e272:	f00e fd51 	bl	2cd18 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1e276:	4581      	cmp	r9, r0
   1e278:	d906      	bls.n	1e288 <update_ccc+0x84>
				if (data->sec < sec) {
   1e27a:	f898 3004 	ldrb.w	r3, [r8, #4]
   1e27e:	454b      	cmp	r3, r9
   1e280:	d2eb      	bcs.n	1e25a <update_ccc+0x56>
					data->sec = sec;
   1e282:	f888 9004 	strb.w	r9, [r8, #4]
   1e286:	e7e8      	b.n	1e25a <update_ccc+0x56>
		gatt_ccc_changed(attr, ccc);
   1e288:	4631      	mov	r1, r6
   1e28a:	4628      	mov	r0, r5
   1e28c:	f00f fac4 	bl	2d818 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1e290:	4b1d      	ldr	r3, [pc, #116]	; (1e308 <update_ccc+0x104>)
   1e292:	429e      	cmp	r6, r3
   1e294:	d1e1      	bne.n	1e25a <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1e296:	7a20      	ldrb	r0, [r4, #8]
   1e298:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1e29c:	f7fe fe3a 	bl	1cf14 <find_sc_cfg>
	if (!cfg) {
   1e2a0:	2800      	cmp	r0, #0
   1e2a2:	d0da      	beq.n	1e25a <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
   1e2a4:	8902      	ldrh	r2, [r0, #8]
   1e2a6:	8943      	ldrh	r3, [r0, #10]
   1e2a8:	ea52 0103 	orrs.w	r1, r2, r3
   1e2ac:	d0d5      	beq.n	1e25a <update_ccc+0x56>
	index = bt_conn_index(conn);
   1e2ae:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1e2b0:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1e2b2:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1e2b4:	f7fd f90a 	bl	1b4cc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1e2b8:	4914      	ldr	r1, [pc, #80]	; (1e30c <update_ccc+0x108>)
   1e2ba:	4a15      	ldr	r2, [pc, #84]	; (1e310 <update_ccc+0x10c>)
   1e2bc:	2318      	movs	r3, #24
   1e2be:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e2c2:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1e2c4:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1e2c6:	4a13      	ldr	r2, [pc, #76]	; (1e314 <update_ccc+0x110>)
   1e2c8:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e2ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1e2ce:	1d3a      	adds	r2, r7, #4
   1e2d0:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e2d2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1e2d6:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e2d8:	4620      	mov	r0, r4
	sc_restore_params[index].len = sizeof(sc_range);
   1e2da:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e2dc:	f7ff feec 	bl	1e0b8 <bt_gatt_indicate>
   1e2e0:	2800      	cmp	r0, #0
   1e2e2:	d0ba      	beq.n	1e25a <update_ccc+0x56>
		LOG_ERR("SC restore indication failed");
   1e2e4:	4b0c      	ldr	r3, [pc, #48]	; (1e318 <update_ccc+0x114>)
   1e2e6:	61fb      	str	r3, [r7, #28]
   1e2e8:	4806      	ldr	r0, [pc, #24]	; (1e304 <update_ccc+0x100>)
   1e2ea:	2302      	movs	r3, #2
   1e2ec:	f107 0218 	add.w	r2, r7, #24
   1e2f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e2f4:	61bb      	str	r3, [r7, #24]
   1e2f6:	f00f fb41 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1e2fa:	e7ae      	b.n	1e25a <update_ccc+0x56>
   1e2fc:	0001d701 	.word	0x0001d701
   1e300:	00033266 	.word	0x00033266
   1e304:	000302ac 	.word	0x000302ac
   1e308:	20000900 	.word	0x20000900
   1e30c:	20003bac 	.word	0x20003bac
   1e310:	00030990 	.word	0x00030990
   1e314:	0002db2d 	.word	0x0002db2d
   1e318:	0003327a 	.word	0x0003327a

0001e31c <gatt_notify>:
{
   1e31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e320:	4614      	mov	r4, r2
   1e322:	b087      	sub	sp, #28
   1e324:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e326:	2294      	movs	r2, #148	; 0x94
   1e328:	6861      	ldr	r1, [r4, #4]
{
   1e32a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e32c:	f00f fc93 	bl	2dc56 <bt_gatt_check_perm>
   1e330:	b170      	cbz	r0, 1e350 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1e332:	4b2b      	ldr	r3, [pc, #172]	; (1e3e0 <gatt_notify+0xc4>)
   1e334:	482b      	ldr	r0, [pc, #172]	; (1e3e4 <gatt_notify+0xc8>)
   1e336:	9305      	str	r3, [sp, #20]
   1e338:	aa04      	add	r2, sp, #16
   1e33a:	2302      	movs	r3, #2
   1e33c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e340:	9304      	str	r3, [sp, #16]
   1e342:	f00f fb1b 	bl	2d97c <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1e346:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e34a:	b007      	add	sp, #28
   1e34c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1e350:	6861      	ldr	r1, [r4, #4]
   1e352:	2201      	movs	r2, #1
   1e354:	4630      	mov	r0, r6
   1e356:	f00f fcb8 	bl	2dcca <bt_gatt_is_subscribed>
   1e35a:	b960      	cbnz	r0, 1e376 <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   1e35c:	4b22      	ldr	r3, [pc, #136]	; (1e3e8 <gatt_notify+0xcc>)
   1e35e:	4821      	ldr	r0, [pc, #132]	; (1e3e4 <gatt_notify+0xc8>)
   1e360:	9305      	str	r3, [sp, #20]
   1e362:	aa04      	add	r2, sp, #16
   1e364:	2302      	movs	r3, #2
   1e366:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e36a:	9304      	str	r3, [sp, #16]
   1e36c:	f00f fb06 	bl	2d97c <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1e370:	f06f 0015 	mvn.w	r0, #21
   1e374:	e7e9      	b.n	1e34a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1e376:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1e378:	211b      	movs	r1, #27
   1e37a:	3202      	adds	r2, #2
   1e37c:	4630      	mov	r0, r6
   1e37e:	f7fe f9bb 	bl	1c6f8 <bt_att_create_pdu>
	if (!buf) {
   1e382:	4605      	mov	r5, r0
   1e384:	b960      	cbnz	r0, 1e3a0 <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   1e386:	4b19      	ldr	r3, [pc, #100]	; (1e3ec <gatt_notify+0xd0>)
   1e388:	4816      	ldr	r0, [pc, #88]	; (1e3e4 <gatt_notify+0xc8>)
   1e38a:	9305      	str	r3, [sp, #20]
   1e38c:	aa04      	add	r2, sp, #16
   1e38e:	2302      	movs	r3, #2
   1e390:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e394:	9304      	str	r3, [sp, #16]
   1e396:	f00f faf1 	bl	2d97c <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1e39a:	f06f 000b 	mvn.w	r0, #11
   1e39e:	e7d4      	b.n	1e34a <gatt_notify+0x2e>
   1e3a0:	f100 090c 	add.w	r9, r0, #12
   1e3a4:	2102      	movs	r1, #2
   1e3a6:	4648      	mov	r0, r9
   1e3a8:	f010 f9ab 	bl	2e702 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1e3ac:	4607      	mov	r7, r0
   1e3ae:	4648      	mov	r0, r9
   1e3b0:	f827 8b02 	strh.w	r8, [r7], #2
   1e3b4:	89a1      	ldrh	r1, [r4, #12]
   1e3b6:	f010 f9a4 	bl	2e702 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1e3ba:	89a2      	ldrh	r2, [r4, #12]
   1e3bc:	68a1      	ldr	r1, [r4, #8]
   1e3be:	4638      	mov	r0, r7
   1e3c0:	f00d ff8d 	bl	2c2de <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1e3c4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1e3c8:	4628      	mov	r0, r5
   1e3ca:	2301      	movs	r3, #1
   1e3cc:	f00f fa1a 	bl	2d804 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1e3d0:	4629      	mov	r1, r5
   1e3d2:	4630      	mov	r0, r6
}
   1e3d4:	b007      	add	sp, #28
   1e3d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1e3da:	f00f b9a2 	b.w	2d722 <bt_att_send>
   1e3de:	bf00      	nop
   1e3e0:	000331fe 	.word	0x000331fe
   1e3e4:	000302ac 	.word	0x000302ac
   1e3e8:	00033214 	.word	0x00033214
   1e3ec:	00033297 	.word	0x00033297

0001e3f0 <bt_gatt_notify_cb>:
{
   1e3f0:	b530      	push	{r4, r5, lr}
   1e3f2:	4604      	mov	r4, r0
   1e3f4:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1e3f6:	4835      	ldr	r0, [pc, #212]	; (1e4cc <bt_gatt_notify_cb+0xdc>)
   1e3f8:	f00f faba 	bl	2d970 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1e3fc:	0742      	lsls	r2, r0, #29
{
   1e3fe:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1e400:	d55d      	bpl.n	1e4be <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1e402:	b114      	cbz	r4, 1e40a <bt_gatt_notify_cb+0x1a>
   1e404:	7b63      	ldrb	r3, [r4, #13]
   1e406:	2b07      	cmp	r3, #7
   1e408:	d15c      	bne.n	1e4c4 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   1e40a:	6868      	ldr	r0, [r5, #4]
   1e40c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e40e:	f7ff fbd1 	bl	1dbb4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1e412:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e414:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1e418:	b33a      	cbz	r2, 1e46a <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e41a:	a905      	add	r1, sp, #20
   1e41c:	9102      	str	r1, [sp, #8]
   1e41e:	492c      	ldr	r1, [pc, #176]	; (1e4d0 <bt_gatt_notify_cb+0xe0>)
   1e420:	9101      	str	r1, [sp, #4]
   1e422:	2101      	movs	r1, #1
	found->attr = NULL;
   1e424:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e426:	9100      	str	r1, [sp, #0]
   1e428:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1e42c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e42e:	f7ff fbf1 	bl	1dc14 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1e432:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1e434:	b91b      	cbnz	r3, 1e43e <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   1e436:	f06f 0001 	mvn.w	r0, #1
}
   1e43a:	b00b      	add	sp, #44	; 0x2c
   1e43c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1e43e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1e440:	9b05      	ldr	r3, [sp, #20]
   1e442:	6818      	ldr	r0, [r3, #0]
   1e444:	2300      	movs	r3, #0
   1e446:	f88d 3010 	strb.w	r3, [sp, #16]
   1e44a:	a904      	add	r1, sp, #16
   1e44c:	f642 0303 	movw	r3, #10243	; 0x2803
   1e450:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e454:	f00d ffda 	bl	2c40c <bt_uuid_cmp>
   1e458:	b970      	cbnz	r0, 1e478 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1e45a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1e45c:	68c3      	ldr	r3, [r0, #12]
   1e45e:	799b      	ldrb	r3, [r3, #6]
   1e460:	06db      	lsls	r3, r3, #27
   1e462:	d405      	bmi.n	1e470 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   1e464:	f06f 0015 	mvn.w	r0, #21
   1e468:	e7e7      	b.n	1e43a <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   1e46a:	2800      	cmp	r0, #0
   1e46c:	d1e8      	bne.n	1e440 <bt_gatt_notify_cb+0x50>
   1e46e:	e7e2      	b.n	1e436 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1e470:	f00f fb96 	bl	2dba0 <bt_gatt_attr_value_handle>
   1e474:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   1e478:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1e47c:	b12c      	cbz	r4, 1e48a <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   1e47e:	4601      	mov	r1, r0
   1e480:	462a      	mov	r2, r5
   1e482:	4620      	mov	r0, r4
   1e484:	f7ff ff4a 	bl	1e31c <gatt_notify>
   1e488:	e7d7      	b.n	1e43a <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e48a:	f642 1202 	movw	r2, #10498	; 0x2902
   1e48e:	f8ad 2012 	strh.w	r2, [sp, #18]
   1e492:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1e494:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e498:	9202      	str	r2, [sp, #8]
   1e49a:	4a0e      	ldr	r2, [pc, #56]	; (1e4d4 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   1e49c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1e49e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e4a0:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1e4a4:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e4a8:	aa04      	add	r2, sp, #16
   1e4aa:	4623      	mov	r3, r4
   1e4ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1e4b0:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e4b2:	f88d 4010 	strb.w	r4, [sp, #16]
   1e4b6:	f7ff fbad 	bl	1dc14 <bt_gatt_foreach_attr_type>
	return data.err;
   1e4ba:	9807      	ldr	r0, [sp, #28]
   1e4bc:	e7bd      	b.n	1e43a <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   1e4be:	f06f 000a 	mvn.w	r0, #10
   1e4c2:	e7ba      	b.n	1e43a <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   1e4c4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e4c8:	e7b7      	b.n	1e43a <bt_gatt_notify_cb+0x4a>
   1e4ca:	bf00      	nop
   1e4cc:	200005c4 	.word	0x200005c4
   1e4d0:	0002d853 	.word	0x0002d853
   1e4d4:	0001e4d9 	.word	0x0001e4d9

0001e4d8 <notify_cb>:
{
   1e4d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e4dc:	4b44      	ldr	r3, [pc, #272]	; (1e5f0 <notify_cb+0x118>)
{
   1e4de:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e4e0:	6882      	ldr	r2, [r0, #8]
   1e4e2:	429a      	cmp	r2, r3
{
   1e4e4:	b087      	sub	sp, #28
   1e4e6:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e4e8:	d004      	beq.n	1e4f4 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1e4ea:	2701      	movs	r7, #1
}
   1e4ec:	4638      	mov	r0, r7
   1e4ee:	b007      	add	sp, #28
   1e4f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   1e4f4:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1e4f6:	4b3f      	ldr	r3, [pc, #252]	; (1e5f4 <notify_cb+0x11c>)
   1e4f8:	429e      	cmp	r6, r3
   1e4fa:	d011      	beq.n	1e520 <notify_cb+0x48>
		if (cfg->value != data->type) {
   1e4fc:	8932      	ldrh	r2, [r6, #8]
   1e4fe:	89ab      	ldrh	r3, [r5, #12]
   1e500:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1e502:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   1e506:	d1f0      	bne.n	1e4ea <notify_cb+0x12>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1e508:	7830      	ldrb	r0, [r6, #0]
   1e50a:	f7fd f8f7 	bl	1b6fc <bt_conn_lookup_addr_le>
		if (!conn) {
   1e50e:	4604      	mov	r4, r0
   1e510:	2800      	cmp	r0, #0
   1e512:	d0ea      	beq.n	1e4ea <notify_cb+0x12>
		if (conn->state != BT_CONN_CONNECTED) {
   1e514:	7b43      	ldrb	r3, [r0, #13]
   1e516:	2b07      	cmp	r3, #7
   1e518:	d027      	beq.n	1e56a <notify_cb+0x92>
			bt_conn_unref(conn);
   1e51a:	f00e fb4f 	bl	2cbbc <bt_conn_unref>
			continue;
   1e51e:	e7e4      	b.n	1e4ea <notify_cb+0x12>
   1e520:	4c35      	ldr	r4, [pc, #212]	; (1e5f8 <notify_cb+0x120>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1e522:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1e5fc <notify_cb+0x124>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e526:	f04f 0800 	mov.w	r8, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1e52a:	4649      	mov	r1, r9
   1e52c:	4620      	mov	r0, r4
   1e52e:	f00f f9e9 	bl	2d904 <bt_addr_le_eq>
   1e532:	b978      	cbnz	r0, 1e554 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1e534:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1e538:	2207      	movs	r2, #7
   1e53a:	4621      	mov	r1, r4
   1e53c:	f7fd f928 	bl	1b790 <bt_conn_lookup_state_le>
			if (!conn) {
   1e540:	b980      	cbnz	r0, 1e564 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   1e542:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1e544:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1e548:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1e54a:	4621      	mov	r1, r4
   1e54c:	8853      	ldrh	r3, [r2, #2]
   1e54e:	8812      	ldrh	r2, [r2, #0]
   1e550:	f7fe fea2 	bl	1d298 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e554:	f108 0801 	add.w	r8, r8, #1
   1e558:	f1b8 0f06 	cmp.w	r8, #6
   1e55c:	f104 040c 	add.w	r4, r4, #12
   1e560:	d1e3      	bne.n	1e52a <notify_cb+0x52>
   1e562:	e7cb      	b.n	1e4fc <notify_cb+0x24>
			bt_conn_unref(conn);
   1e564:	f00e fb2a 	bl	2cbbc <bt_conn_unref>
   1e568:	e7f4      	b.n	1e554 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1e56a:	6973      	ldr	r3, [r6, #20]
   1e56c:	b123      	cbz	r3, 1e578 <notify_cb+0xa0>
   1e56e:	4639      	mov	r1, r7
   1e570:	4798      	blx	r3
   1e572:	b908      	cbnz	r0, 1e578 <notify_cb+0xa0>
			bt_conn_unref(conn);
   1e574:	4620      	mov	r0, r4
   1e576:	e7d0      	b.n	1e51a <notify_cb+0x42>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e578:	4639      	mov	r1, r7
   1e57a:	2294      	movs	r2, #148	; 0x94
   1e57c:	4620      	mov	r0, r4
   1e57e:	f00f fb6a 	bl	2dc56 <bt_gatt_check_perm>
   1e582:	4607      	mov	r7, r0
   1e584:	b150      	cbz	r0, 1e59c <notify_cb+0xc4>
			LOG_WRN("Link is not encrypted");
   1e586:	4b1e      	ldr	r3, [pc, #120]	; (1e600 <notify_cb+0x128>)
   1e588:	9305      	str	r3, [sp, #20]
   1e58a:	481e      	ldr	r0, [pc, #120]	; (1e604 <notify_cb+0x12c>)
   1e58c:	2302      	movs	r3, #2
   1e58e:	aa04      	add	r2, sp, #16
   1e590:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e594:	9304      	str	r3, [sp, #16]
   1e596:	f00f f9f1 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1e59a:	e7eb      	b.n	1e574 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1e59c:	89ab      	ldrh	r3, [r5, #12]
   1e59e:	2b02      	cmp	r3, #2
   1e5a0:	d114      	bne.n	1e5cc <notify_cb+0xf4>
   1e5a2:	8933      	ldrh	r3, [r6, #8]
   1e5a4:	079a      	lsls	r2, r3, #30
   1e5a6:	d405      	bmi.n	1e5b4 <notify_cb+0xdc>
		bt_conn_unref(conn);
   1e5a8:	4620      	mov	r0, r4
   1e5aa:	f00e fb07 	bl	2cbbc <bt_conn_unref>
		data->err = 0;
   1e5ae:	2300      	movs	r3, #0
   1e5b0:	60ab      	str	r3, [r5, #8]
   1e5b2:	e79a      	b.n	1e4ea <notify_cb+0x12>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1e5b4:	692a      	ldr	r2, [r5, #16]
   1e5b6:	88a9      	ldrh	r1, [r5, #4]
   1e5b8:	4620      	mov	r0, r4
   1e5ba:	f7ff fcf9 	bl	1dfb0 <gatt_indicate>
			if (err == 0) {
   1e5be:	4606      	mov	r6, r0
   1e5c0:	b978      	cbnz	r0, 1e5e2 <notify_cb+0x10a>
				data->ind_params->_ref++;
   1e5c2:	692a      	ldr	r2, [r5, #16]
   1e5c4:	7d93      	ldrb	r3, [r2, #22]
   1e5c6:	3301      	adds	r3, #1
   1e5c8:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1e5ca:	e7ed      	b.n	1e5a8 <notify_cb+0xd0>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1e5cc:	2b01      	cmp	r3, #1
   1e5ce:	d1eb      	bne.n	1e5a8 <notify_cb+0xd0>
   1e5d0:	8933      	ldrh	r3, [r6, #8]
   1e5d2:	07db      	lsls	r3, r3, #31
   1e5d4:	d5e8      	bpl.n	1e5a8 <notify_cb+0xd0>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1e5d6:	692a      	ldr	r2, [r5, #16]
   1e5d8:	88a9      	ldrh	r1, [r5, #4]
   1e5da:	4620      	mov	r0, r4
   1e5dc:	f7ff fe9e 	bl	1e31c <gatt_notify>
   1e5e0:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   1e5e2:	4620      	mov	r0, r4
   1e5e4:	f00e faea 	bl	2cbbc <bt_conn_unref>
		if (err < 0) {
   1e5e8:	2e00      	cmp	r6, #0
   1e5ea:	f6ff af7f 	blt.w	1e4ec <notify_cb+0x14>
   1e5ee:	e7de      	b.n	1e5ae <notify_cb+0xd6>
   1e5f0:	0001d701 	.word	0x0001d701
   1e5f4:	20000900 	.word	0x20000900
   1e5f8:	20005597 	.word	0x20005597
   1e5fc:	00031bf1 	.word	0x00031bf1
   1e600:	000331fe 	.word	0x000331fe
   1e604:	000302ac 	.word	0x000302ac

0001e608 <bt_gatt_connected>:
{
   1e608:	b5b0      	push	{r4, r5, r7, lr}
   1e60a:	b08e      	sub	sp, #56	; 0x38
   1e60c:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e60e:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1e612:	4604      	mov	r4, r0
	data.conn = conn;
   1e614:	6078      	str	r0, [r7, #4]
	data.sec = BT_SECURITY_L1;
   1e616:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e618:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1e61a:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e61c:	4629      	mov	r1, r5
   1e61e:	f00e f863 	bl	2c6e8 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1e622:	b198      	cbz	r0, 1e64c <bt_gatt_connected+0x44>
		if (conn->id) {
   1e624:	7a22      	ldrb	r2, [r4, #8]
   1e626:	b3a2      	cbz	r2, 1e692 <bt_gatt_connected+0x8a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1e628:	2104      	movs	r1, #4
   1e62a:	4638      	mov	r0, r7
   1e62c:	f00b ff01 	bl	2a432 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1e630:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1e632:	4a19      	ldr	r2, [pc, #100]	; (1e698 <bt_gatt_connected+0x90>)
   1e634:	2124      	movs	r1, #36	; 0x24
   1e636:	f107 000c 	add.w	r0, r7, #12
   1e63a:	462b      	mov	r3, r5
   1e63c:	f7f9 fb66 	bl	17d0c <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1e640:	f107 020c 	add.w	r2, r7, #12
   1e644:	4915      	ldr	r1, [pc, #84]	; (1e69c <bt_gatt_connected+0x94>)
   1e646:	4610      	mov	r0, r2
   1e648:	f7f8 f82e 	bl	166a8 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e64c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e650:	4a13      	ldr	r2, [pc, #76]	; (1e6a0 <bt_gatt_connected+0x98>)
   1e652:	1d3b      	adds	r3, r7, #4
   1e654:	2001      	movs	r0, #1
   1e656:	f00f faf1 	bl	2dc3c <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1e65a:	4620      	mov	r0, r4
   1e65c:	f00e fb5c 	bl	2cd18 <bt_conn_get_security>
   1e660:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1e662:	4288      	cmp	r0, r1
   1e664:	d212      	bcs.n	1e68c <bt_gatt_connected+0x84>
		int err = bt_conn_set_security(conn, data.sec);
   1e666:	4620      	mov	r0, r4
   1e668:	f00e fb26 	bl	2ccb8 <bt_conn_set_security>
		if (err) {
   1e66c:	b170      	cbz	r0, 1e68c <bt_gatt_connected+0x84>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   1e66e:	466c      	mov	r4, sp
   1e670:	b088      	sub	sp, #32
   1e672:	aa02      	add	r2, sp, #8
   1e674:	4b0b      	ldr	r3, [pc, #44]	; (1e6a4 <bt_gatt_connected+0x9c>)
   1e676:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e67a:	2303      	movs	r3, #3
   1e67c:	f842 3f10 	str.w	r3, [r2, #16]!
   1e680:	4809      	ldr	r0, [pc, #36]	; (1e6a8 <bt_gatt_connected+0xa0>)
   1e682:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1e686:	f00f f979 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1e68a:	46a5      	mov	sp, r4
}
   1e68c:	3730      	adds	r7, #48	; 0x30
   1e68e:	46bd      	mov	sp, r7
   1e690:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1e692:	9200      	str	r2, [sp, #0]
   1e694:	e7cd      	b.n	1e632 <bt_gatt_connected+0x2a>
   1e696:	bf00      	nop
   1e698:	000331fa 	.word	0x000331fa
   1e69c:	0001de61 	.word	0x0001de61
   1e6a0:	0001e205 	.word	0x0001e205
   1e6a4:	000332c0 	.word	0x000332c0
   1e6a8:	000302ac 	.word	0x000302ac

0001e6ac <bt_gatt_att_max_mtu_changed>:
{
   1e6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1e6ae:	4b08      	ldr	r3, [pc, #32]	; (1e6d0 <bt_gatt_att_max_mtu_changed+0x24>)
   1e6b0:	681c      	ldr	r4, [r3, #0]
   1e6b2:	4605      	mov	r5, r0
   1e6b4:	460e      	mov	r6, r1
   1e6b6:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1e6b8:	b14c      	cbz	r4, 1e6ce <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1e6ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1e6be:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1e6c0:	b11b      	cbz	r3, 1e6ca <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1e6c2:	463a      	mov	r2, r7
   1e6c4:	4631      	mov	r1, r6
   1e6c6:	4628      	mov	r0, r5
   1e6c8:	4798      	blx	r3
	return node->next;
   1e6ca:	6864      	ldr	r4, [r4, #4]
   1e6cc:	e7f4      	b.n	1e6b8 <bt_gatt_att_max_mtu_changed+0xc>
}
   1e6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e6d0:	20003c28 	.word	0x20003c28

0001e6d4 <bt_gatt_encrypt_change>:
{
   1e6d4:	b513      	push	{r0, r1, r4, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e6d6:	4a0a      	ldr	r2, [pc, #40]	; (1e700 <bt_gatt_encrypt_change+0x2c>)
	data.conn = conn;
   1e6d8:	9000      	str	r0, [sp, #0]
{
   1e6da:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e6dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1e6e0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e6e2:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1e6e4:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e6e8:	f00f faa8 	bl	2dc3c <bt_gatt_foreach_attr>
	if (!bt_gatt_change_aware(conn, false)) {
   1e6ec:	2100      	movs	r1, #0
   1e6ee:	4620      	mov	r0, r4
   1e6f0:	f00f fb6f 	bl	2ddd2 <bt_gatt_change_aware>
   1e6f4:	b908      	cbnz	r0, 1e6fa <bt_gatt_encrypt_change+0x26>
		sc_indicate(0x0001, 0xffff);
   1e6f6:	f7ff f871 	bl	1d7dc <sc_indicate.constprop.0>
}
   1e6fa:	b002      	add	sp, #8
   1e6fc:	bd10      	pop	{r4, pc}
   1e6fe:	bf00      	nop
   1e700:	0001e205 	.word	0x0001e205

0001e704 <bt_gatt_store_ccc>:
{
   1e704:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e706:	b0c1      	sub	sp, #260	; 0x104
   1e708:	af02      	add	r7, sp, #8
	save.count = 0;
   1e70a:	2300      	movs	r3, #0
{
   1e70c:	4604      	mov	r4, r0
   1e70e:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1e710:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   1e712:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   1e716:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1e71a:	4a1d      	ldr	r2, [pc, #116]	; (1e790 <bt_gatt_store_ccc+0x8c>)
   1e71c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1e720:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e724:	2001      	movs	r0, #1
   1e726:	f00f fa89 	bl	2dc3c <bt_gatt_foreach_attr>
	if (id) {
   1e72a:	b364      	cbz	r4, 1e786 <bt_gatt_store_ccc+0x82>
		u8_to_dec(id_str, sizeof(id_str), id);
   1e72c:	1d3e      	adds	r6, r7, #4
   1e72e:	4622      	mov	r2, r4
   1e730:	2104      	movs	r1, #4
   1e732:	4630      	mov	r0, r6
   1e734:	f00b fe7d 	bl	2a432 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1e738:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1e73a:	4a16      	ldr	r2, [pc, #88]	; (1e794 <bt_gatt_store_ccc+0x90>)
   1e73c:	462b      	mov	r3, r5
   1e73e:	2124      	movs	r1, #36	; 0x24
   1e740:	f107 0008 	add.w	r0, r7, #8
   1e744:	f7f9 fae2 	bl	17d0c <bt_settings_encode_key>
	if (save.count) {
   1e748:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1e74c:	b1ea      	cbz	r2, 1e78a <bt_gatt_store_ccc+0x86>
		len = save.count * sizeof(*save.store);
   1e74e:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1e750:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   1e754:	f107 0008 	add.w	r0, r7, #8
   1e758:	f7f7 ff46 	bl	165e8 <settings_save_one>
	if (err) {
   1e75c:	4604      	mov	r4, r0
   1e75e:	b170      	cbz	r0, 1e77e <bt_gatt_store_ccc+0x7a>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   1e760:	466d      	mov	r5, sp
   1e762:	b088      	sub	sp, #32
   1e764:	aa02      	add	r2, sp, #8
   1e766:	4b0c      	ldr	r3, [pc, #48]	; (1e798 <bt_gatt_store_ccc+0x94>)
   1e768:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e76c:	2303      	movs	r3, #3
   1e76e:	f842 3f10 	str.w	r3, [r2, #16]!
   1e772:	480a      	ldr	r0, [pc, #40]	; (1e79c <bt_gatt_store_ccc+0x98>)
   1e774:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e778:	f00f f900 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1e77c:	46ad      	mov	sp, r5
}
   1e77e:	4620      	mov	r0, r4
   1e780:	37fc      	adds	r7, #252	; 0xfc
   1e782:	46bd      	mov	sp, r7
   1e784:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1e786:	9400      	str	r4, [sp, #0]
   1e788:	e7d7      	b.n	1e73a <bt_gatt_store_ccc+0x36>
		str = NULL;
   1e78a:	4611      	mov	r1, r2
   1e78c:	e7e2      	b.n	1e754 <bt_gatt_store_ccc+0x50>
   1e78e:	bf00      	nop
   1e790:	0001d401 	.word	0x0001d401
   1e794:	000331fa 	.word	0x000331fa
   1e798:	000332ec 	.word	0x000332ec
   1e79c:	000302ac 	.word	0x000302ac

0001e7a0 <bt_gatt_identity_resolved>:
{
   1e7a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1e7a4:	f100 0888 	add.w	r8, r0, #136	; 0x88
	struct addr_match user_data = {
   1e7a8:	e9cd 1200 	strd	r1, r2, [sp]
{
   1e7ac:	4604      	mov	r4, r0
   1e7ae:	460f      	mov	r7, r1
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1e7b0:	7a00      	ldrb	r0, [r0, #8]
   1e7b2:	4641      	mov	r1, r8
{
   1e7b4:	4616      	mov	r6, r2
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1e7b6:	f00d ff97 	bl	2c6e8 <bt_addr_le_is_bonded>
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   1e7ba:	4a0f      	ldr	r2, [pc, #60]	; (1e7f8 <bt_gatt_identity_resolved+0x58>)
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1e7bc:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   1e7be:	466b      	mov	r3, sp
   1e7c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e7c4:	2001      	movs	r0, #1
   1e7c6:	f00f fa39 	bl	2dc3c <bt_gatt_foreach_attr>
	if (is_bonded) {
   1e7ca:	b11d      	cbz	r5, 1e7d4 <bt_gatt_identity_resolved+0x34>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1e7cc:	7a20      	ldrb	r0, [r4, #8]
   1e7ce:	4641      	mov	r1, r8
   1e7d0:	f7ff ff98 	bl	1e704 <bt_gatt_store_ccc>
	struct gatt_cf_cfg *cfg = find_cf_cfg_by_addr(conn->id, private_addr);
   1e7d4:	7a20      	ldrb	r0, [r4, #8]
   1e7d6:	4639      	mov	r1, r7
   1e7d8:	f7fe fb62 	bl	1cea0 <find_cf_cfg_by_addr>
	if (cfg) {
   1e7dc:	b140      	cbz	r0, 1e7f0 <bt_gatt_identity_resolved+0x50>
		bt_addr_le_copy(&cfg->peer, id_addr);
   1e7de:	4631      	mov	r1, r6
   1e7e0:	3001      	adds	r0, #1
   1e7e2:	f00f f8c2 	bl	2d96a <bt_addr_le_copy>
		if (is_bonded) {
   1e7e6:	b11d      	cbz	r5, 1e7f0 <bt_gatt_identity_resolved+0x50>
			bt_gatt_store_cf(conn->id, &conn->le.dst);
   1e7e8:	7a20      	ldrb	r0, [r4, #8]
   1e7ea:	4641      	mov	r1, r8
   1e7ec:	f7fe fec6 	bl	1d57c <bt_gatt_store_cf.isra.0>
}
   1e7f0:	b002      	add	sp, #8
   1e7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e7f6:	bf00      	nop
   1e7f8:	0001d3d5 	.word	0x0001d3d5

0001e7fc <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   1e7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e7fe:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1e800:	ae03      	add	r6, sp, #12
{
   1e802:	4604      	mov	r4, r0
   1e804:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   1e806:	9103      	str	r1, [sp, #12]
   1e808:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1e80c:	4a1f      	ldr	r2, [pc, #124]	; (1e88c <bt_gatt_clear+0x90>)
   1e80e:	4633      	mov	r3, r6
   1e810:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e814:	2001      	movs	r0, #1
   1e816:	f00f fa11 	bl	2dc3c <bt_gatt_foreach_attr>
		if (id) {
   1e81a:	b394      	cbz	r4, 1e882 <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
   1e81c:	af02      	add	r7, sp, #8
   1e81e:	4622      	mov	r2, r4
   1e820:	2104      	movs	r1, #4
   1e822:	4638      	mov	r0, r7
   1e824:	f00b fe05 	bl	2a432 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1e828:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1e82a:	4a19      	ldr	r2, [pc, #100]	; (1e890 <bt_gatt_clear+0x94>)
   1e82c:	462b      	mov	r3, r5
   1e82e:	2124      	movs	r1, #36	; 0x24
   1e830:	a805      	add	r0, sp, #20
   1e832:	f7f9 fa6b 	bl	17d0c <bt_settings_encode_key>
		return settings_delete(key);
   1e836:	a805      	add	r0, sp, #20
   1e838:	f00d f942 	bl	2bac0 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   1e83c:	2800      	cmp	r0, #0
   1e83e:	db1e      	blt.n	1e87e <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   1e840:	4629      	mov	r1, r5
   1e842:	4620      	mov	r0, r4
   1e844:	f7fe fe32 	bl	1d4ac <bt_gatt_clear_sc>
		if (err < 0) {
   1e848:	2800      	cmp	r0, #0
   1e84a:	db18      	blt.n	1e87e <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
   1e84c:	4629      	mov	r1, r5
   1e84e:	4620      	mov	r0, r4
   1e850:	f7fe fb26 	bl	1cea0 <find_cf_cfg_by_addr>
	if (cfg) {
   1e854:	b108      	cbz	r0, 1e85a <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
   1e856:	f7fe fe0d 	bl	1d474 <clear_cf_cfg>
		if (id) {
   1e85a:	b1a4      	cbz	r4, 1e886 <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
   1e85c:	4622      	mov	r2, r4
   1e85e:	2104      	movs	r1, #4
   1e860:	4630      	mov	r0, r6
   1e862:	f00b fde6 	bl	2a432 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1e866:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   1e868:	4a0a      	ldr	r2, [pc, #40]	; (1e894 <bt_gatt_clear+0x98>)
   1e86a:	462b      	mov	r3, r5
   1e86c:	2124      	movs	r1, #36	; 0x24
   1e86e:	a805      	add	r0, sp, #20
   1e870:	f7f9 fa4c 	bl	17d0c <bt_settings_encode_key>
		return settings_delete(key);
   1e874:	a805      	add	r0, sp, #20
   1e876:	f00d f923 	bl	2bac0 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   1e87a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   1e87e:	b00f      	add	sp, #60	; 0x3c
   1e880:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1e882:	9400      	str	r4, [sp, #0]
   1e884:	e7d1      	b.n	1e82a <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1e886:	9400      	str	r4, [sp, #0]
   1e888:	e7ee      	b.n	1e868 <bt_gatt_clear+0x6c>
   1e88a:	bf00      	nop
   1e88c:	0001d3ad 	.word	0x0001d3ad
   1e890:	000331fa 	.word	0x000331fa
   1e894:	0003333c 	.word	0x0003333c

0001e898 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1e898:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e89a:	4604      	mov	r4, r0
   1e89c:	b083      	sub	sp, #12
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1e89e:	4603      	mov	r3, r0
{
   1e8a0:	af00      	add	r7, sp, #0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1e8a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e8a6:	2001      	movs	r0, #1
   1e8a8:	4a21      	ldr	r2, [pc, #132]	; (1e930 <bt_gatt_disconnected+0x98>)
	/* Clear pending notifications */
	cleanup_notify(conn);
#endif /* CONFIG_BT_GATT_NOTIFY_MULTIPLE */

#if defined(CONFIG_BT_SETTINGS_DELAYED_STORE)
	if (gatt_delayed_store_find(conn->id, &conn->le.dst)) {
   1e8aa:	f104 0688 	add.w	r6, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1e8ae:	f00f f9c5 	bl	2dc3c <bt_gatt_foreach_attr>
	if (gatt_delayed_store_find(conn->id, &conn->le.dst)) {
   1e8b2:	7a20      	ldrb	r0, [r4, #8]
   1e8b4:	4631      	mov	r1, r6
   1e8b6:	f7fe fb0f 	bl	1ced8 <gatt_delayed_store_find>
   1e8ba:	b1a8      	cbz	r0, 1e8e8 <bt_gatt_disconnected+0x50>
		int err = k_work_reschedule(&gatt_delayed_store.work, K_NO_WAIT);
   1e8bc:	481d      	ldr	r0, [pc, #116]	; (1e934 <bt_gatt_disconnected+0x9c>)
   1e8be:	2200      	movs	r2, #0
   1e8c0:	2300      	movs	r3, #0
   1e8c2:	f007 ff23 	bl	2670c <k_work_reschedule>

		if (err < 0) {
   1e8c6:	2800      	cmp	r0, #0
   1e8c8:	da0e      	bge.n	1e8e8 <bt_gatt_disconnected+0x50>
			LOG_ERR("Unable to reschedule settings storage (err %d)",
   1e8ca:	466d      	mov	r5, sp
   1e8cc:	b088      	sub	sp, #32
   1e8ce:	466a      	mov	r2, sp
   1e8d0:	4b19      	ldr	r3, [pc, #100]	; (1e938 <bt_gatt_disconnected+0xa0>)
   1e8d2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e8d6:	2303      	movs	r3, #3
   1e8d8:	f842 3f10 	str.w	r3, [r2, #16]!
   1e8dc:	4817      	ldr	r0, [pc, #92]	; (1e93c <bt_gatt_disconnected+0xa4>)
   1e8de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e8e2:	f00f f84b 	bl	2d97c <z_log_msg_static_create.constprop.0>
   1e8e6:	46ad      	mov	sp, r5
	}
#endif	/* CONFIG_BT_SETTINGS_DELAYED_STORE */

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e8e8:	7a20      	ldrb	r0, [r4, #8]
   1e8ea:	4631      	mov	r1, r6
   1e8ec:	f00d fefc 	bl	2c6e8 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1e8f0:	b148      	cbz	r0, 1e906 <bt_gatt_disconnected+0x6e>
		struct addr_with_id addr_with_id = {
   1e8f2:	7a23      	ldrb	r3, [r4, #8]
   1e8f4:	713b      	strb	r3, [r7, #4]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1e8f6:	4a12      	ldr	r2, [pc, #72]	; (1e940 <bt_gatt_disconnected+0xa8>)
		struct addr_with_id addr_with_id = {
   1e8f8:	603e      	str	r6, [r7, #0]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1e8fa:	463b      	mov	r3, r7
   1e8fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e900:	2001      	movs	r0, #1
   1e902:	f00f f99b 	bl	2dc3c <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1e906:	4620      	mov	r0, r4
   1e908:	f7fe fb66 	bl	1cfd8 <find_cf_cfg>
	if (!cfg) {
   1e90c:	4605      	mov	r5, r0
   1e90e:	b138      	cbz	r0, 1e920 <bt_gatt_disconnected+0x88>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e910:	7a20      	ldrb	r0, [r4, #8]
   1e912:	4631      	mov	r1, r6
   1e914:	f00d fee8 	bl	2c6e8 <bt_addr_le_is_bonded>
   1e918:	b928      	cbnz	r0, 1e926 <bt_gatt_disconnected+0x8e>
		clear_cf_cfg(cfg);
   1e91a:	4628      	mov	r0, r5
   1e91c:	f7fe fdaa 	bl	1d474 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1e920:	370c      	adds	r7, #12
   1e922:	46bd      	mov	sp, r7
   1e924:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1e926:	4631      	mov	r1, r6
   1e928:	1c68      	adds	r0, r5, #1
   1e92a:	f00f f81e 	bl	2d96a <bt_addr_le_copy>
}
   1e92e:	e7f7      	b.n	1e920 <bt_gatt_disconnected+0x88>
   1e930:	0001d661 	.word	0x0001d661
   1e934:	200024b8 	.word	0x200024b8
   1e938:	0003330a 	.word	0x0003330a
   1e93c:	000302ac 	.word	0x000302ac
   1e940:	0001d3ad 	.word	0x0001d3ad

0001e944 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1e944:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1e946:	4b05      	ldr	r3, [pc, #20]	; (1e95c <smp_find+0x18>)
{
   1e948:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1e94a:	4618      	mov	r0, r3
   1e94c:	f00f facb 	bl	2dee6 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1e950:	3b04      	subs	r3, #4
   1e952:	2800      	cmp	r0, #0
}
   1e954:	bf14      	ite	ne
   1e956:	4618      	movne	r0, r3
   1e958:	2000      	moveq	r0, #0
   1e95a:	bd08      	pop	{r3, pc}
   1e95c:	200025bc 	.word	0x200025bc

0001e960 <latch_auth_cb>:
{
   1e960:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1e962:	4a0c      	ldr	r2, [pc, #48]	; (1e994 <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e964:	6811      	ldr	r1, [r2, #0]
   1e966:	4a0c      	ldr	r2, [pc, #48]	; (1e998 <latch_auth_cb+0x38>)
   1e968:	f3bf 8f5b 	dmb	ish
   1e96c:	f500 73a8 	add.w	r3, r0, #336	; 0x150
   1e970:	e853 4f00 	ldrex	r4, [r3]
   1e974:	4294      	cmp	r4, r2
   1e976:	d104      	bne.n	1e982 <latch_auth_cb+0x22>
   1e978:	e843 1c00 	strex	ip, r1, [r3]
   1e97c:	f1bc 0f00 	cmp.w	ip, #0
   1e980:	d1f6      	bne.n	1e970 <latch_auth_cb+0x10>
   1e982:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e986:	f3bf 8f5b 	dmb	ish
   1e98a:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
   1e98e:	f3bf 8f5b 	dmb	ish
}
   1e992:	bd10      	pop	{r4, pc}
   1e994:	20003b1c 	.word	0x20003b1c
   1e998:	200025b8 	.word	0x200025b8

0001e99c <get_io_capa>:
{
   1e99c:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e99e:	f7ff ffdf 	bl	1e960 <latch_auth_cb>
	if (!smp_auth_cb) {
   1e9a2:	4603      	mov	r3, r0
   1e9a4:	b1c8      	cbz	r0, 1e9da <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1e9a6:	e9d0 1200 	ldrd	r1, r2, [r0]
   1e9aa:	b921      	cbnz	r1, 1e9b6 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1e9ac:	2a00      	cmp	r2, #0
   1e9ae:	bf0c      	ite	eq
   1e9b0:	2003      	moveq	r0, #3
   1e9b2:	2002      	movne	r0, #2
   1e9b4:	e010      	b.n	1e9d8 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1e9b6:	b132      	cbz	r2, 1e9c6 <get_io_capa+0x2a>
   1e9b8:	6883      	ldr	r3, [r0, #8]
   1e9ba:	b913      	cbnz	r3, 1e9c2 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1e9bc:	4b09      	ldr	r3, [pc, #36]	; (1e9e4 <get_io_capa+0x48>)
   1e9be:	781b      	ldrb	r3, [r3, #0]
   1e9c0:	b933      	cbnz	r3, 1e9d0 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1e9c2:	2004      	movs	r0, #4
   1e9c4:	e008      	b.n	1e9d8 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1e9c6:	4907      	ldr	r1, [pc, #28]	; (1e9e4 <get_io_capa+0x48>)
   1e9c8:	7808      	ldrb	r0, [r1, #0]
   1e9ca:	b128      	cbz	r0, 1e9d8 <get_io_capa+0x3c>
   1e9cc:	689b      	ldr	r3, [r3, #8]
   1e9ce:	b933      	cbnz	r3, 1e9de <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   1e9d0:	3a00      	subs	r2, #0
   1e9d2:	bf18      	it	ne
   1e9d4:	2201      	movne	r2, #1
   1e9d6:	0050      	lsls	r0, r2, #1
}
   1e9d8:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1e9da:	2003      	movs	r0, #3
   1e9dc:	e7fc      	b.n	1e9d8 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1e9de:	2001      	movs	r0, #1
   1e9e0:	e7fa      	b.n	1e9d8 <get_io_capa+0x3c>
   1e9e2:	bf00      	nop
   1e9e4:	200056dc 	.word	0x200056dc

0001e9e8 <get_auth>:
{
   1e9e8:	b510      	push	{r4, lr}
	if (sc_supported) {
   1e9ea:	4b0c      	ldr	r3, [pc, #48]	; (1ea1c <get_auth+0x34>)
   1e9ec:	781b      	ldrb	r3, [r3, #0]
   1e9ee:	b17b      	cbz	r3, 1ea10 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1e9f0:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1e9f4:	f7ff ffd2 	bl	1e99c <get_io_capa>
	if (bondable) {
   1e9f8:	4b09      	ldr	r3, [pc, #36]	; (1ea20 <get_auth+0x38>)
   1e9fa:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1e9fc:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1e9fe:	bf0c      	ite	eq
   1ea00:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1ea04:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1ea08:	b12b      	cbz	r3, 1ea16 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1ea0a:	f044 0001 	orr.w	r0, r4, #1
}
   1ea0e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1ea10:	f001 0407 	and.w	r4, r1, #7
   1ea14:	e7ee      	b.n	1e9f4 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1ea16:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1ea1a:	e7f8      	b.n	1ea0e <get_auth+0x26>
   1ea1c:	200056dc 	.word	0x200056dc
   1ea20:	20000b42 	.word	0x20000b42

0001ea24 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1ea24:	b530      	push	{r4, r5, lr}
   1ea26:	b089      	sub	sp, #36	; 0x24
   1ea28:	4613      	mov	r3, r2
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1ea2a:	2200      	movs	r2, #0
   1ea2c:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1ea2e:	4604      	mov	r4, r0
   1ea30:	460d      	mov	r5, r1
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1ea32:	460a      	mov	r2, r1
   1ea34:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1ea38:	2106      	movs	r1, #6
   1ea3a:	f00e fa26 	bl	2ce8a <bt_l2cap_send_cb>
	if (err) {
   1ea3e:	b188      	cbz	r0, 1ea64 <smp_send.constprop.0+0x40>
		if (err == -ENOBUFS) {
   1ea40:	3069      	adds	r0, #105	; 0x69
   1ea42:	d109      	bne.n	1ea58 <smp_send.constprop.0+0x34>
			LOG_ERR("Ran out of TX buffers or contexts.");
   1ea44:	4b0c      	ldr	r3, [pc, #48]	; (1ea78 <smp_send.constprop.0+0x54>)
   1ea46:	9307      	str	r3, [sp, #28]
   1ea48:	480c      	ldr	r0, [pc, #48]	; (1ea7c <smp_send.constprop.0+0x58>)
   1ea4a:	2302      	movs	r3, #2
   1ea4c:	aa06      	add	r2, sp, #24
   1ea4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ea52:	9306      	str	r3, [sp, #24]
   1ea54:	f00f fa82 	bl	2df5c <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1ea58:	4628      	mov	r0, r5
}
   1ea5a:	b009      	add	sp, #36	; 0x24
   1ea5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1ea60:	f002 b870 	b.w	20b44 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1ea64:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1ea68:	2300      	movs	r3, #0
   1ea6a:	f504 7090 	add.w	r0, r4, #288	; 0x120
}
   1ea6e:	b009      	add	sp, #36	; 0x24
   1ea70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1ea74:	f007 be4a 	b.w	2670c <k_work_reschedule>
   1ea78:	00032dbf 	.word	0x00032dbf
   1ea7c:	000302fc 	.word	0x000302fc

0001ea80 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   1ea80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		LOG_WRN("Public key not available");
   1ea82:	4b06      	ldr	r3, [pc, #24]	; (1ea9c <bt_smp_pkey_ready.part.0+0x1c>)
   1ea84:	9305      	str	r3, [sp, #20]
   1ea86:	4806      	ldr	r0, [pc, #24]	; (1eaa0 <bt_smp_pkey_ready.part.0+0x20>)
   1ea88:	2302      	movs	r3, #2
   1ea8a:	aa04      	add	r2, sp, #16
   1ea8c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ea90:	9304      	str	r3, [sp, #16]
   1ea92:	f00f fa63 	bl	2df5c <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   1ea96:	b007      	add	sp, #28
   1ea98:	f85d fb04 	ldr.w	pc, [sp], #4
   1ea9c:	0003334d 	.word	0x0003334d
   1eaa0:	000302fc 	.word	0x000302fc

0001eaa4 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1eaa4:	b580      	push	{r7, lr}
   1eaa6:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1eaa8:	b088      	sub	sp, #32
   1eaaa:	466a      	mov	r2, sp
   1eaac:	4b07      	ldr	r3, [pc, #28]	; (1eacc <bt_smp_accept.part.0+0x28>)
   1eaae:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1eab2:	2303      	movs	r3, #3
   1eab4:	f842 3f10 	str.w	r3, [r2, #16]!
   1eab8:	4805      	ldr	r0, [pc, #20]	; (1ead0 <bt_smp_accept.part.0+0x2c>)
   1eaba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1eabe:	f00f fa4d 	bl	2df5c <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1eac2:	f06f 000b 	mvn.w	r0, #11
   1eac6:	46bd      	mov	sp, r7
   1eac8:	bd80      	pop	{r7, pc}
   1eaca:	bf00      	nop
   1eacc:	00033366 	.word	0x00033366
   1ead0:	000302fc 	.word	0x000302fc

0001ead4 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   1ead4:	4b06      	ldr	r3, [pc, #24]	; (1eaf0 <bt_smp_accept+0x1c>)
   1ead6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   1eada:	b10a      	cbz	r2, 1eae0 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1eadc:	f7ff bfe2 	b.w	1eaa4 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   1eae0:	4804      	ldr	r0, [pc, #16]	; (1eaf4 <bt_smp_accept+0x20>)
   1eae2:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
		*chan = &smp->chan.chan;
   1eae6:	33ec      	adds	r3, #236	; 0xec
   1eae8:	600b      	str	r3, [r1, #0]
}
   1eaea:	4610      	mov	r0, r2
   1eaec:	4770      	bx	lr
   1eaee:	bf00      	nop
   1eaf0:	200025b8 	.word	0x200025b8
   1eaf4:	00030a94 	.word	0x00030a94

0001eaf8 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   1eaf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to find SMP channel");
   1eafa:	4b07      	ldr	r3, [pc, #28]	; (1eb18 <smp_chan_get.part.0+0x20>)
   1eafc:	9305      	str	r3, [sp, #20]
   1eafe:	4807      	ldr	r0, [pc, #28]	; (1eb1c <smp_chan_get.part.0+0x24>)
   1eb00:	2302      	movs	r3, #2
   1eb02:	aa04      	add	r2, sp, #16
   1eb04:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1eb08:	9304      	str	r3, [sp, #16]
   1eb0a:	f00f fa27 	bl	2df5c <z_log_msg_static_create.constprop.0>
}
   1eb0e:	2000      	movs	r0, #0
   1eb10:	b007      	add	sp, #28
   1eb12:	f85d fb04 	ldr.w	pc, [sp], #4
   1eb16:	bf00      	nop
   1eb18:	0003338b 	.word	0x0003338b
   1eb1c:	000302fc 	.word	0x000302fc

0001eb20 <smp_init>:
{
   1eb20:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1eb22:	22ec      	movs	r2, #236	; 0xec
{
   1eb24:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1eb26:	2100      	movs	r1, #0
   1eb28:	f00d fbe4 	bl	2c2f4 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1eb2c:	2110      	movs	r1, #16
   1eb2e:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1eb32:	f004 fffd 	bl	23b30 <bt_rand>
   1eb36:	4604      	mov	r4, r0
   1eb38:	b948      	cbnz	r0, 1eb4e <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1eb3a:	2105      	movs	r1, #5
   1eb3c:	4628      	mov	r0, r5
   1eb3e:	f00f fa1b 	bl	2df78 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1eb42:	f7fc f829 	bl	1ab98 <bt_pub_key_get>
   1eb46:	4b03      	ldr	r3, [pc, #12]	; (1eb54 <smp_init+0x34>)
   1eb48:	6018      	str	r0, [r3, #0]
}
   1eb4a:	4620      	mov	r0, r4
   1eb4c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1eb4e:	2408      	movs	r4, #8
   1eb50:	e7fb      	b.n	1eb4a <smp_init+0x2a>
   1eb52:	bf00      	nop
   1eb54:	20003c30 	.word	0x20003c30

0001eb58 <smp_dhkey_generate>:
{
   1eb58:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1eb5a:	1d05      	adds	r5, r0, #4
{
   1eb5c:	b087      	sub	sp, #28
   1eb5e:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1eb60:	2108      	movs	r1, #8
   1eb62:	4628      	mov	r0, r5
   1eb64:	f00f fa08 	bl	2df78 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1eb68:	490b      	ldr	r1, [pc, #44]	; (1eb98 <smp_dhkey_generate+0x40>)
   1eb6a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1eb6e:	f7fc f823 	bl	1abb8 <bt_dh_key_gen>
	if (err) {
   1eb72:	b170      	cbz	r0, 1eb92 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1eb74:	2108      	movs	r1, #8
   1eb76:	4628      	mov	r0, r5
   1eb78:	f00f f9df 	bl	2df3a <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   1eb7c:	4b07      	ldr	r3, [pc, #28]	; (1eb9c <smp_dhkey_generate+0x44>)
   1eb7e:	4808      	ldr	r0, [pc, #32]	; (1eba0 <smp_dhkey_generate+0x48>)
   1eb80:	9305      	str	r3, [sp, #20]
   1eb82:	aa04      	add	r2, sp, #16
   1eb84:	2302      	movs	r3, #2
   1eb86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1eb8a:	9304      	str	r3, [sp, #16]
   1eb8c:	f00f f9e6 	bl	2df5c <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1eb90:	2008      	movs	r0, #8
}
   1eb92:	b007      	add	sp, #28
   1eb94:	bd30      	pop	{r4, r5, pc}
   1eb96:	bf00      	nop
   1eb98:	0002e39b 	.word	0x0002e39b
   1eb9c:	000333a6 	.word	0x000333a6
   1eba0:	000302fc 	.word	0x000302fc

0001eba4 <smp_ident_info>:
{
   1eba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eba6:	4604      	mov	r4, r0
   1eba8:	af00      	add	r7, sp, #0
   1ebaa:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ebac:	3004      	adds	r0, #4
   1ebae:	210d      	movs	r1, #13
   1ebb0:	f00f f999 	bl	2dee6 <atomic_test_bit>
   1ebb4:	b338      	cbz	r0, 1ec06 <smp_ident_info+0x62>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1ebb6:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1ebb8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1ebbc:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1ebc0:	7a19      	ldrb	r1, [r3, #8]
   1ebc2:	462a      	mov	r2, r5
   1ebc4:	2002      	movs	r0, #2
   1ebc6:	f00f fc80 	bl	2e4ca <bt_keys_get_type>
		if (!keys) {
   1ebca:	b9b8      	cbnz	r0, 1ebfc <smp_ident_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1ebcc:	4628      	mov	r0, r5
   1ebce:	f7f8 ff83 	bl	17ad8 <bt_addr_le_str>
   1ebd2:	466c      	mov	r4, sp
   1ebd4:	b088      	sub	sp, #32
   1ebd6:	466a      	mov	r2, sp
   1ebd8:	4b0e      	ldr	r3, [pc, #56]	; (1ec14 <smp_ident_info+0x70>)
   1ebda:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ebde:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ebe2:	8393      	strh	r3, [r2, #28]
   1ebe4:	4b0c      	ldr	r3, [pc, #48]	; (1ec18 <smp_ident_info+0x74>)
   1ebe6:	480d      	ldr	r0, [pc, #52]	; (1ec1c <smp_ident_info+0x78>)
   1ebe8:	f842 3f10 	str.w	r3, [r2, #16]!
   1ebec:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1ebf0:	f00f f9b4 	bl	2df5c <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1ebf4:	2008      	movs	r0, #8
   1ebf6:	46a5      	mov	sp, r4
}
   1ebf8:	46bd      	mov	sp, r7
   1ebfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1ebfc:	2210      	movs	r2, #16
   1ebfe:	4631      	mov	r1, r6
   1ec00:	302a      	adds	r0, #42	; 0x2a
   1ec02:	f00d fb6c 	bl	2c2de <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1ec06:	4620      	mov	r0, r4
   1ec08:	2109      	movs	r1, #9
   1ec0a:	f00f f9b5 	bl	2df78 <atomic_set_bit>
	return 0;
   1ec0e:	2000      	movs	r0, #0
   1ec10:	e7f2      	b.n	1ebf8 <smp_ident_info+0x54>
   1ec12:	bf00      	nop
   1ec14:	000333bf 	.word	0x000333bf
   1ec18:	01000003 	.word	0x01000003
   1ec1c:	000302fc 	.word	0x000302fc

0001ec20 <smp_encrypt_info>:
{
   1ec20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec22:	4604      	mov	r4, r0
   1ec24:	af00      	add	r7, sp, #0
   1ec26:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ec28:	3004      	adds	r0, #4
   1ec2a:	210d      	movs	r1, #13
   1ec2c:	f00f f95b 	bl	2dee6 <atomic_test_bit>
   1ec30:	b338      	cbz	r0, 1ec82 <smp_encrypt_info+0x62>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1ec32:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1ec34:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ec38:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1ec3c:	7a19      	ldrb	r1, [r3, #8]
   1ec3e:	462a      	mov	r2, r5
   1ec40:	2004      	movs	r0, #4
   1ec42:	f00f fc42 	bl	2e4ca <bt_keys_get_type>
		if (!keys) {
   1ec46:	b9b8      	cbnz	r0, 1ec78 <smp_encrypt_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1ec48:	4628      	mov	r0, r5
   1ec4a:	f7f8 ff45 	bl	17ad8 <bt_addr_le_str>
   1ec4e:	466c      	mov	r4, sp
   1ec50:	b088      	sub	sp, #32
   1ec52:	466a      	mov	r2, sp
   1ec54:	4b0e      	ldr	r3, [pc, #56]	; (1ec90 <smp_encrypt_info+0x70>)
   1ec56:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ec5a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ec5e:	8393      	strh	r3, [r2, #28]
   1ec60:	4b0c      	ldr	r3, [pc, #48]	; (1ec94 <smp_encrypt_info+0x74>)
   1ec62:	480d      	ldr	r0, [pc, #52]	; (1ec98 <smp_encrypt_info+0x78>)
   1ec64:	f842 3f10 	str.w	r3, [r2, #16]!
   1ec68:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1ec6c:	f00f f976 	bl	2df5c <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1ec70:	2008      	movs	r0, #8
   1ec72:	46a5      	mov	sp, r4
}
   1ec74:	46bd      	mov	sp, r7
   1ec76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1ec78:	2210      	movs	r2, #16
   1ec7a:	4631      	mov	r1, r6
   1ec7c:	301a      	adds	r0, #26
   1ec7e:	f00d fb2e 	bl	2c2de <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1ec82:	4620      	mov	r0, r4
   1ec84:	2107      	movs	r1, #7
   1ec86:	f00f f977 	bl	2df78 <atomic_set_bit>
	return 0;
   1ec8a:	2000      	movs	r0, #0
   1ec8c:	e7f2      	b.n	1ec74 <smp_encrypt_info+0x54>
   1ec8e:	bf00      	nop
   1ec90:	000333bf 	.word	0x000333bf
   1ec94:	01000003 	.word	0x01000003
   1ec98:	000302fc 	.word	0x000302fc

0001ec9c <smp_send_pairing_confirm>:
{
   1ec9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec9e:	b083      	sub	sp, #12
	switch (smp->method) {
   1eca0:	7a04      	ldrb	r4, [r0, #8]
   1eca2:	2c02      	cmp	r4, #2
{
   1eca4:	af02      	add	r7, sp, #8
   1eca6:	4605      	mov	r5, r0
	switch (smp->method) {
   1eca8:	d823      	bhi.n	1ecf2 <smp_send_pairing_confirm+0x56>
   1ecaa:	b144      	cbz	r4, 1ecbe <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1ecac:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1ecb0:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1ecb4:	40dc      	lsrs	r4, r3
   1ecb6:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1ecba:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1ecbe:	2103      	movs	r1, #3
   1ecc0:	4628      	mov	r0, r5
   1ecc2:	f00f f96d 	bl	2dfa0 <smp_create_pdu.constprop.0>
	if (!buf) {
   1ecc6:	4606      	mov	r6, r0
   1ecc8:	b320      	cbz	r0, 1ed14 <smp_send_pairing_confirm+0x78>
   1ecca:	2110      	movs	r1, #16
   1eccc:	300c      	adds	r0, #12
   1ecce:	f00f fd18 	bl	2e702 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1ecd2:	9000      	str	r0, [sp, #0]
   1ecd4:	4818      	ldr	r0, [pc, #96]	; (1ed38 <smp_send_pairing_confirm+0x9c>)
   1ecd6:	4623      	mov	r3, r4
   1ecd8:	6800      	ldr	r0, [r0, #0]
   1ecda:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1ecde:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1ece2:	f00f fc3c 	bl	2e55e <bt_crypto_f4>
   1ece6:	4604      	mov	r4, r0
   1ece8:	b1d0      	cbz	r0, 1ed20 <smp_send_pairing_confirm+0x84>
		net_buf_unref(buf);
   1ecea:	4630      	mov	r0, r6
   1ecec:	f001 ff2a 	bl	20b44 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1ecf0:	e010      	b.n	1ed14 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   1ecf2:	2c03      	cmp	r4, #3
   1ecf4:	d012      	beq.n	1ed1c <smp_send_pairing_confirm+0x80>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ecf6:	466d      	mov	r5, sp
   1ecf8:	b088      	sub	sp, #32
   1ecfa:	aa02      	add	r2, sp, #8
   1ecfc:	4b0f      	ldr	r3, [pc, #60]	; (1ed3c <smp_send_pairing_confirm+0xa0>)
   1ecfe:	4810      	ldr	r0, [pc, #64]	; (1ed40 <smp_send_pairing_confirm+0xa4>)
	switch (smp->method) {
   1ed00:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ed04:	2303      	movs	r3, #3
   1ed06:	f842 3f10 	str.w	r3, [r2, #16]!
   1ed0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ed0e:	f00f f925 	bl	2df5c <z_log_msg_static_create.constprop.0>
   1ed12:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   1ed14:	2008      	movs	r0, #8
}
   1ed16:	3704      	adds	r7, #4
   1ed18:	46bd      	mov	sp, r7
   1ed1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   1ed1c:	2400      	movs	r4, #0
   1ed1e:	e7ce      	b.n	1ecbe <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   1ed20:	4602      	mov	r2, r0
   1ed22:	4631      	mov	r1, r6
   1ed24:	4628      	mov	r0, r5
   1ed26:	f7ff fe7d 	bl	1ea24 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1ed2a:	1d28      	adds	r0, r5, #4
   1ed2c:	4621      	mov	r1, r4
   1ed2e:	f00f f904 	bl	2df3a <atomic_clear_bit>
	return 0;
   1ed32:	4620      	mov	r0, r4
   1ed34:	e7ef      	b.n	1ed16 <smp_send_pairing_confirm+0x7a>
   1ed36:	bf00      	nop
   1ed38:	20003c30 	.word	0x20003c30
   1ed3c:	000333d9 	.word	0x000333d9
   1ed40:	000302fc 	.word	0x000302fc

0001ed44 <smp_public_key_periph>:
{
   1ed44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ed48:	b086      	sub	sp, #24
   1ed4a:	af00      	add	r7, sp, #0
   1ed4c:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ed4e:	f7ff fe07 	bl	1e960 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ed52:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ed54:	4680      	mov	r8, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ed56:	210e      	movs	r1, #14
   1ed58:	4630      	mov	r0, r6
   1ed5a:	f00f f8c4 	bl	2dee6 <atomic_test_bit>
   1ed5e:	b9a0      	cbnz	r0, 1ed8a <smp_public_key_periph+0x46>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1ed60:	4b52      	ldr	r3, [pc, #328]	; (1eeac <smp_public_key_periph+0x168>)
   1ed62:	2220      	movs	r2, #32
   1ed64:	6819      	ldr	r1, [r3, #0]
   1ed66:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ed6a:	f00d fa91 	bl	2c290 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ed6e:	b960      	cbnz	r0, 1ed8a <smp_public_key_periph+0x46>
		LOG_WRN("Remote public key rejected");
   1ed70:	4b4f      	ldr	r3, [pc, #316]	; (1eeb0 <smp_public_key_periph+0x16c>)
   1ed72:	617b      	str	r3, [r7, #20]
   1ed74:	484f      	ldr	r0, [pc, #316]	; (1eeb4 <smp_public_key_periph+0x170>)
   1ed76:	2302      	movs	r3, #2
   1ed78:	f107 0210 	add.w	r2, r7, #16
   1ed7c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ed80:	613b      	str	r3, [r7, #16]
   1ed82:	f00f f8eb 	bl	2df5c <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ed86:	2008      	movs	r0, #8
   1ed88:	e02f      	b.n	1edea <smp_public_key_periph+0xa6>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1ed8a:	210c      	movs	r1, #12
   1ed8c:	4620      	mov	r0, r4
   1ed8e:	f00f f907 	bl	2dfa0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1ed92:	4605      	mov	r5, r0
   1ed94:	2800      	cmp	r0, #0
   1ed96:	d0f6      	beq.n	1ed86 <smp_public_key_periph+0x42>
   1ed98:	2140      	movs	r1, #64	; 0x40
   1ed9a:	300c      	adds	r0, #12
   1ed9c:	f00f fcb1 	bl	2e702 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1eda0:	f8df a108 	ldr.w	sl, [pc, #264]	; 1eeac <smp_public_key_periph+0x168>
   1eda4:	2220      	movs	r2, #32
   1eda6:	f8da 1000 	ldr.w	r1, [sl]
   1edaa:	4681      	mov	r9, r0
   1edac:	f00d fa97 	bl	2c2de <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1edb0:	f8da 1000 	ldr.w	r1, [sl]
   1edb4:	2220      	movs	r2, #32
   1edb6:	4411      	add	r1, r2
   1edb8:	eb09 0002 	add.w	r0, r9, r2
   1edbc:	f00d fa8f 	bl	2c2de <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1edc0:	2200      	movs	r2, #0
   1edc2:	4629      	mov	r1, r5
   1edc4:	4620      	mov	r0, r4
   1edc6:	f7ff fe2d 	bl	1ea24 <smp_send.constprop.0>
	switch (smp->method) {
   1edca:	7a23      	ldrb	r3, [r4, #8]
   1edcc:	2b05      	cmp	r3, #5
   1edce:	d85b      	bhi.n	1ee88 <smp_public_key_periph+0x144>
   1edd0:	e8df f003 	tbb	[pc, r3]
   1edd4:	030f3b03 	.word	0x030f3b03
   1edd8:	575a      	.short	0x575a
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1edda:	2104      	movs	r1, #4
   1eddc:	4620      	mov	r0, r4
   1edde:	f00f f8cb 	bl	2df78 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1ede2:	f7ff ff5b 	bl	1ec9c <smp_send_pairing_confirm>
		if (err) {
   1ede6:	2800      	cmp	r0, #0
   1ede8:	d03f      	beq.n	1ee6a <smp_public_key_periph+0x126>
}
   1edea:	3718      	adds	r7, #24
   1edec:	46bd      	mov	sp, r7
   1edee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1edf2:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1edf4:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1edf8:	f7ff fdb2 	bl	1e960 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1edfc:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1edfe:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1ee00:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1ee04:	f004 fe94 	bl	23b30 <bt_rand>
   1ee08:	2800      	cmp	r0, #0
   1ee0a:	d1bc      	bne.n	1ed86 <smp_public_key_periph+0x42>
		smp->passkey %= 1000000;
   1ee0c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1ee10:	4a29      	ldr	r2, [pc, #164]	; (1eeb8 <smp_public_key_periph+0x174>)
   1ee12:	fbb3 f1f2 	udiv	r1, r3, r2
   1ee16:	fb02 3311 	mls	r3, r2, r1, r3
   1ee1a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1ee1e:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1ee22:	b155      	cbz	r5, 1ee3a <smp_public_key_periph+0xf6>
   1ee24:	682b      	ldr	r3, [r5, #0]
   1ee26:	b143      	cbz	r3, 1ee3a <smp_public_key_periph+0xf6>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ee28:	210b      	movs	r1, #11
   1ee2a:	4630      	mov	r0, r6
   1ee2c:	f00f f8a4 	bl	2df78 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1ee30:	682b      	ldr	r3, [r5, #0]
   1ee32:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1ee36:	4640      	mov	r0, r8
   1ee38:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ee3a:	2103      	movs	r1, #3
   1ee3c:	4620      	mov	r0, r4
   1ee3e:	f00f f89b 	bl	2df78 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ee42:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ee44:	f00f f898 	bl	2df78 <atomic_set_bit>
		break;
   1ee48:	e00f      	b.n	1ee6a <smp_public_key_periph+0x126>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ee4a:	4620      	mov	r0, r4
   1ee4c:	2103      	movs	r1, #3
   1ee4e:	f00f f893 	bl	2df78 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ee52:	210e      	movs	r1, #14
   1ee54:	f00f f890 	bl	2df78 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ee58:	4630      	mov	r0, r6
   1ee5a:	210a      	movs	r1, #10
   1ee5c:	f00f f88c 	bl	2df78 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1ee60:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ee64:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ee68:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1ee6a:	4630      	mov	r0, r6
   1ee6c:	2107      	movs	r1, #7
   1ee6e:	f00f f883 	bl	2df78 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1ee72:	2008      	movs	r0, #8
   1ee74:	f7ff fd66 	bl	1e944 <smp_find>
   1ee78:	b9b0      	cbnz	r0, 1eea8 <smp_public_key_periph+0x164>
		return smp_dhkey_generate(smp);
   1ee7a:	4620      	mov	r0, r4
   1ee7c:	f7ff fe6c 	bl	1eb58 <smp_dhkey_generate>
   1ee80:	e7b3      	b.n	1edea <smp_public_key_periph+0xa6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ee82:	2104      	movs	r1, #4
   1ee84:	4620      	mov	r0, r4
   1ee86:	e7dd      	b.n	1ee44 <smp_public_key_periph+0x100>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ee88:	466c      	mov	r4, sp
   1ee8a:	b088      	sub	sp, #32
   1ee8c:	466a      	mov	r2, sp
   1ee8e:	490b      	ldr	r1, [pc, #44]	; (1eebc <smp_public_key_periph+0x178>)
   1ee90:	4808      	ldr	r0, [pc, #32]	; (1eeb4 <smp_public_key_periph+0x170>)
	switch (smp->method) {
   1ee92:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ee96:	2303      	movs	r3, #3
   1ee98:	f842 3f10 	str.w	r3, [r2, #16]!
   1ee9c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1eea0:	f00f f85c 	bl	2df5c <z_log_msg_static_create.constprop.0>
   1eea4:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1eea6:	e76e      	b.n	1ed86 <smp_public_key_periph+0x42>
	return 0;
   1eea8:	2000      	movs	r0, #0
   1eeaa:	e79e      	b.n	1edea <smp_public_key_periph+0xa6>
   1eeac:	20003c30 	.word	0x20003c30
   1eeb0:	000333f5 	.word	0x000333f5
   1eeb4:	000302fc 	.word	0x000302fc
   1eeb8:	000f4240 	.word	0x000f4240
   1eebc:	000333d9 	.word	0x000333d9

0001eec0 <smp_public_key>:
{
   1eec0:	b570      	push	{r4, r5, r6, lr}
   1eec2:	460d      	mov	r5, r1
   1eec4:	b086      	sub	sp, #24
   1eec6:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1eec8:	f7ff fd4a 	bl	1e960 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1eecc:	68ee      	ldr	r6, [r5, #12]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1eece:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1eed2:	2220      	movs	r2, #32
   1eed4:	4631      	mov	r1, r6
   1eed6:	4628      	mov	r0, r5
   1eed8:	f00d fa01 	bl	2c2de <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1eedc:	2220      	movs	r2, #32
   1eede:	18b1      	adds	r1, r6, r2
   1eee0:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1eee4:	f00d f9fb 	bl	2c2de <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1eee8:	4628      	mov	r0, r5
   1eeea:	f7fb fdb3 	bl	1aa54 <bt_pub_key_is_debug>
   1eeee:	b940      	cbnz	r0, 1ef02 <smp_public_key+0x42>
	if (!sc_public_key) {
   1eef0:	4b1b      	ldr	r3, [pc, #108]	; (1ef60 <smp_public_key+0xa0>)
   1eef2:	681d      	ldr	r5, [r3, #0]
   1eef4:	bb75      	cbnz	r5, 1ef54 <smp_public_key+0x94>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1eef6:	1d20      	adds	r0, r4, #4
   1eef8:	2106      	movs	r1, #6
   1eefa:	f00f f83d 	bl	2df78 <atomic_set_bit>
	return 0;
   1eefe:	4628      	mov	r0, r5
		return 0;
   1ef00:	e026      	b.n	1ef50 <smp_public_key+0x90>
		LOG_INF("Remote is using Debug Public key");
   1ef02:	4b18      	ldr	r3, [pc, #96]	; (1ef64 <smp_public_key+0xa4>)
   1ef04:	4818      	ldr	r0, [pc, #96]	; (1ef68 <smp_public_key+0xa8>)
   1ef06:	9305      	str	r3, [sp, #20]
   1ef08:	aa04      	add	r2, sp, #16
   1ef0a:	2302      	movs	r3, #2
   1ef0c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1ef10:	9304      	str	r3, [sp, #16]
   1ef12:	f00f f823 	bl	2df5c <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1ef16:	210e      	movs	r1, #14
   1ef18:	1d20      	adds	r0, r4, #4
   1ef1a:	f00f f82d 	bl	2df78 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1ef1e:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1ef22:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1ef26:	b933      	cbnz	r3, 1ef36 <smp_public_key+0x76>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ef28:	7a28      	ldrb	r0, [r5, #8]
   1ef2a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1ef2e:	f001 fa5b 	bl	203e8 <bt_keys_get_addr>
   1ef32:	f8c5 00b8 	str.w	r0, [r5, #184]	; 0xb8
	if (!conn->le.keys ||
   1ef36:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1ef3a:	2b00      	cmp	r3, #0
   1ef3c:	d0d8      	beq.n	1eef0 <smp_public_key+0x30>
   1ef3e:	89da      	ldrh	r2, [r3, #14]
   1ef40:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1ef44:	2a00      	cmp	r2, #0
   1ef46:	d0d3      	beq.n	1eef0 <smp_public_key+0x30>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1ef48:	7b5b      	ldrb	r3, [r3, #13]
   1ef4a:	079b      	lsls	r3, r3, #30
   1ef4c:	d4d0      	bmi.n	1eef0 <smp_public_key+0x30>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1ef4e:	2003      	movs	r0, #3
}
   1ef50:	b006      	add	sp, #24
   1ef52:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   1ef54:	4620      	mov	r0, r4
}
   1ef56:	b006      	add	sp, #24
   1ef58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   1ef5c:	f7ff bef2 	b.w	1ed44 <smp_public_key_periph>
   1ef60:	20003c30 	.word	0x20003c30
   1ef64:	00033410 	.word	0x00033410
   1ef68:	000302fc 	.word	0x000302fc

0001ef6c <smp_pairing_req>:
{
   1ef6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ef70:	460d      	mov	r5, r1
   1ef72:	b087      	sub	sp, #28
   1ef74:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ef76:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1ef7a:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ef7c:	f7ff fcf0 	bl	1e960 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1ef80:	f8d5 900c 	ldr.w	r9, [r5, #12]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1ef84:	f899 3003 	ldrb.w	r3, [r9, #3]
   1ef88:	3b07      	subs	r3, #7
   1ef8a:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ef8c:	4680      	mov	r8, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1ef8e:	d904      	bls.n	1ef9a <smp_pairing_req+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1ef90:	2006      	movs	r0, #6
}
   1ef92:	371c      	adds	r7, #28
   1ef94:	46bd      	mov	sp, r7
   1ef96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1ef9a:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
   1ef9e:	b15b      	cbz	r3, 1efb8 <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1efa0:	1d25      	adds	r5, r4, #4
   1efa2:	210f      	movs	r1, #15
   1efa4:	4628      	mov	r0, r5
   1efa6:	f00e ff9e 	bl	2dee6 <atomic_test_bit>
   1efaa:	b980      	cbnz	r0, 1efce <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   1efac:	4620      	mov	r0, r4
   1efae:	f7ff fdb7 	bl	1eb20 <smp_init>
		if (ret) {
   1efb2:	b160      	cbz	r0, 1efce <smp_pairing_req+0x62>
			return ret;
   1efb4:	b2c0      	uxtb	r0, r0
   1efb6:	e7ec      	b.n	1ef92 <smp_pairing_req+0x26>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1efb8:	7a30      	ldrb	r0, [r6, #8]
   1efba:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1efbe:	f001 fa13 	bl	203e8 <bt_keys_get_addr>
   1efc2:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
		if (!conn->le.keys) {
   1efc6:	2800      	cmp	r0, #0
   1efc8:	d1ea      	bne.n	1efa0 <smp_pairing_req+0x34>
			return BT_SMP_ERR_UNSPECIFIED;
   1efca:	2008      	movs	r0, #8
   1efcc:	e7e1      	b.n	1ef92 <smp_pairing_req+0x26>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1efce:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1efd0:	2206      	movs	r2, #6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1efd2:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1efd4:	4649      	mov	r1, r9
   1efd6:	f104 000a 	add.w	r0, r4, #10
   1efda:	f00d f980 	bl	2c2de <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1efde:	2302      	movs	r3, #2
   1efe0:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1efe2:	f899 1002 	ldrb.w	r1, [r9, #2]
   1efe6:	4620      	mov	r0, r4
   1efe8:	f7ff fcfe 	bl	1e9e8 <get_auth>
   1efec:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1efee:	4620      	mov	r0, r4
   1eff0:	f7ff fcd4 	bl	1e99c <get_io_capa>
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1eff4:	2310      	movs	r3, #16
	rsp->io_capability = get_io_capa(smp);
   1eff6:	7460      	strb	r0, [r4, #17]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1eff8:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1effa:	f899 3004 	ldrb.w	r3, [r9, #4]
   1effe:	f003 0303 	and.w	r3, r3, #3
   1f002:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1f004:	f899 3005 	ldrb.w	r3, [r9, #5]
   1f008:	f003 0303 	and.w	r3, r3, #3
   1f00c:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1f00e:	7ce3      	ldrb	r3, [r4, #19]
   1f010:	071b      	lsls	r3, r3, #28
   1f012:	d50f      	bpl.n	1f034 <smp_pairing_req+0xc8>
   1f014:	f899 3002 	ldrb.w	r3, [r9, #2]
   1f018:	0718      	lsls	r0, r3, #28
   1f01a:	d50b      	bpl.n	1f034 <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1f01c:	2105      	movs	r1, #5
   1f01e:	4628      	mov	r0, r5
   1f020:	f00e ffaa 	bl	2df78 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1f024:	7d63      	ldrb	r3, [r4, #21]
   1f026:	f003 0302 	and.w	r3, r3, #2
   1f02a:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1f02c:	7da3      	ldrb	r3, [r4, #22]
   1f02e:	f003 0302 	and.w	r3, r3, #2
   1f032:	75a3      	strb	r3, [r4, #22]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f034:	2105      	movs	r1, #5
   1f036:	4628      	mov	r0, r5
   1f038:	f00e ff55 	bl	2dee6 <atomic_test_bit>
   1f03c:	2800      	cmp	r0, #0
   1f03e:	d051      	beq.n	1f0e4 <smp_pairing_req+0x178>
		rsp->oob_flag = sc_oobd_present ? BT_SMP_OOB_PRESENT :
   1f040:	4baa      	ldr	r3, [pc, #680]	; (1f2ec <smp_pairing_req+0x380>)
		rsp->oob_flag = legacy_oobd_present ? BT_SMP_OOB_PRESENT :
   1f042:	781b      	ldrb	r3, [r3, #0]
   1f044:	74a3      	strb	r3, [r4, #18]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1f046:	7ce3      	ldrb	r3, [r4, #19]
   1f048:	0699      	lsls	r1, r3, #26
   1f04a:	d507      	bpl.n	1f05c <smp_pairing_req+0xf0>
   1f04c:	f899 3002 	ldrb.w	r3, [r9, #2]
   1f050:	069a      	lsls	r2, r3, #26
   1f052:	d503      	bpl.n	1f05c <smp_pairing_req+0xf0>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1f054:	2114      	movs	r1, #20
   1f056:	4628      	mov	r0, r5
   1f058:	f00e ff8e 	bl	2df78 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1f05c:	7ce3      	ldrb	r3, [r4, #19]
   1f05e:	07db      	lsls	r3, r3, #31
   1f060:	d542      	bpl.n	1f0e8 <smp_pairing_req+0x17c>
   1f062:	f899 3002 	ldrb.w	r3, [r9, #2]
   1f066:	07d8      	lsls	r0, r3, #31
   1f068:	d53e      	bpl.n	1f0e8 <smp_pairing_req+0x17c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1f06a:	210d      	movs	r1, #13
   1f06c:	4628      	mov	r0, r5
   1f06e:	f00e ff83 	bl	2df78 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1f072:	7da3      	ldrb	r3, [r4, #22]
   1f074:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1f078:	7d63      	ldrb	r3, [r4, #21]
   1f07a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1f07e:	2103      	movs	r1, #3
   1f080:	4628      	mov	r0, r5
   1f082:	f00e ff79 	bl	2df78 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f086:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1f088:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f08c:	f00e ff2b 	bl	2dee6 <atomic_test_bit>
   1f090:	bb70      	cbnz	r0, 1f0f0 <smp_pairing_req+0x184>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1f092:	f1b9 0f04 	cmp.w	r9, #4
   1f096:	d84b      	bhi.n	1f130 <smp_pairing_req+0x1c4>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1f098:	7ae3      	ldrb	r3, [r4, #11]
   1f09a:	7ca2      	ldrb	r2, [r4, #18]
   1f09c:	4013      	ands	r3, r2
   1f09e:	07d9      	lsls	r1, r3, #31
   1f0a0:	d444      	bmi.n	1f12c <smp_pairing_req+0x1c0>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1f0a2:	7b21      	ldrb	r1, [r4, #12]
   1f0a4:	7ce3      	ldrb	r3, [r4, #19]
   1f0a6:	4319      	orrs	r1, r3
   1f0a8:	f011 0104 	ands.w	r1, r1, #4
   1f0ac:	d011      	beq.n	1f0d2 <smp_pairing_req+0x166>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1f0ae:	4620      	mov	r0, r4
   1f0b0:	f7ff fc74 	bl	1e99c <get_io_capa>
   1f0b4:	4b8e      	ldr	r3, [pc, #568]	; (1f2f0 <smp_pairing_req+0x384>)
   1f0b6:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1f0ba:	4499      	add	r9, r3
   1f0bc:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   1f0c0:	2904      	cmp	r1, #4
   1f0c2:	d106      	bne.n	1f0d2 <smp_pairing_req+0x166>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1f0c4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1f0c8:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1f0ca:	2b00      	cmp	r3, #0
   1f0cc:	bf14      	ite	ne
   1f0ce:	2101      	movne	r1, #1
   1f0d0:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   1f0d2:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1f0d4:	f8d6 10b8 	ldr.w	r1, [r6, #184]	; 0xb8
   1f0d8:	4620      	mov	r0, r4
   1f0da:	f00e ff0d 	bl	2def8 <update_keys_check>
   1f0de:	bb48      	cbnz	r0, 1f134 <smp_pairing_req+0x1c8>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1f0e0:	2003      	movs	r0, #3
   1f0e2:	e756      	b.n	1ef92 <smp_pairing_req+0x26>
		rsp->oob_flag = legacy_oobd_present ? BT_SMP_OOB_PRESENT :
   1f0e4:	4b83      	ldr	r3, [pc, #524]	; (1f2f4 <smp_pairing_req+0x388>)
   1f0e6:	e7ac      	b.n	1f042 <smp_pairing_req+0xd6>
		rsp->init_key_dist = 0;
   1f0e8:	2300      	movs	r3, #0
   1f0ea:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist = 0;
   1f0ec:	75a3      	strb	r3, [r4, #22]
   1f0ee:	e7c0      	b.n	1f072 <smp_pairing_req+0x106>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1f0f0:	7b23      	ldrb	r3, [r4, #12]
   1f0f2:	7ce0      	ldrb	r0, [r4, #19]
   1f0f4:	ea03 0200 	and.w	r2, r3, r0
   1f0f8:	0712      	lsls	r2, r2, #28
   1f0fa:	d506      	bpl.n	1f10a <smp_pairing_req+0x19e>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1f0fc:	7ae2      	ldrb	r2, [r4, #11]
   1f0fe:	f894 c012 	ldrb.w	ip, [r4, #18]
   1f102:	ea42 020c 	orr.w	r2, r2, ip
   1f106:	07d2      	lsls	r2, r2, #31
   1f108:	d4e3      	bmi.n	1f0d2 <smp_pairing_req+0x166>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1f10a:	f1b9 0f04 	cmp.w	r9, #4
   1f10e:	d80f      	bhi.n	1f130 <smp_pairing_req+0x1c4>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1f110:	ea43 0100 	orr.w	r1, r3, r0
   1f114:	f011 0104 	ands.w	r1, r1, #4
   1f118:	d0db      	beq.n	1f0d2 <smp_pairing_req+0x166>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1f11a:	4620      	mov	r0, r4
   1f11c:	f7ff fc3e 	bl	1e99c <get_io_capa>
   1f120:	4b75      	ldr	r3, [pc, #468]	; (1f2f8 <smp_pairing_req+0x38c>)
   1f122:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1f126:	444b      	add	r3, r9
   1f128:	5c19      	ldrb	r1, [r3, r0]
   1f12a:	e7d2      	b.n	1f0d2 <smp_pairing_req+0x166>
		return LEGACY_OOB;
   1f12c:	2106      	movs	r1, #6
   1f12e:	e7d0      	b.n	1f0d2 <smp_pairing_req+0x166>
		return JUST_WORKS;
   1f130:	2100      	movs	r1, #0
   1f132:	e7ce      	b.n	1f0d2 <smp_pairing_req+0x166>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1f134:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1f138:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1f13a:	2b03      	cmp	r3, #3
   1f13c:	d03e      	beq.n	1f1bc <smp_pairing_req+0x250>
   1f13e:	d82c      	bhi.n	1f19a <smp_pairing_req+0x22e>
   1f140:	3b01      	subs	r3, #1
   1f142:	2b01      	cmp	r3, #1
   1f144:	f63f af41 	bhi.w	1efca <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f148:	2105      	movs	r1, #5
   1f14a:	4628      	mov	r0, r5
   1f14c:	f00e fecb 	bl	2dee6 <atomic_test_bit>
   1f150:	2800      	cmp	r0, #0
   1f152:	f040 80b5 	bne.w	1f2c0 <smp_pairing_req+0x354>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f156:	4620      	mov	r0, r4
   1f158:	f7ff fc02 	bl	1e960 <latch_auth_cb>
   1f15c:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f15e:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1f160:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f164:	f7ff fbfc 	bl	1e960 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1f168:	f109 0188 	add.w	r1, r9, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f16c:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1f16e:	f899 0008 	ldrb.w	r0, [r9, #8]
   1f172:	f001 fa31 	bl	205d8 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1f176:	7a23      	ldrb	r3, [r4, #8]
   1f178:	b320      	cbz	r0, 1f1c4 <smp_pairing_req+0x258>
   1f17a:	7b42      	ldrb	r2, [r0, #13]
   1f17c:	07d2      	lsls	r2, r2, #31
   1f17e:	d521      	bpl.n	1f1c4 <smp_pairing_req+0x258>
   1f180:	bb03      	cbnz	r3, 1f1c4 <smp_pairing_req+0x258>
		LOG_ERR("JustWorks failed, authenticated keys present");
   1f182:	4b5e      	ldr	r3, [pc, #376]	; (1f2fc <smp_pairing_req+0x390>)
   1f184:	617b      	str	r3, [r7, #20]
   1f186:	2302      	movs	r3, #2
   1f188:	485d      	ldr	r0, [pc, #372]	; (1f300 <smp_pairing_req+0x394>)
   1f18a:	613b      	str	r3, [r7, #16]
   1f18c:	f107 0210 	add.w	r2, r7, #16
   1f190:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f194:	f00e fee2 	bl	2df5c <z_log_msg_static_create.constprop.0>
	if (ret) {
   1f198:	e717      	b.n	1efca <smp_pairing_req+0x5e>
	switch (sec) {
   1f19a:	2b04      	cmp	r3, #4
   1f19c:	f47f af15 	bne.w	1efca <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f1a0:	7d23      	ldrb	r3, [r4, #20]
   1f1a2:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1f1a4:	4293      	cmp	r3, r2
   1f1a6:	bf28      	it	cs
   1f1a8:	4613      	movcs	r3, r2
   1f1aa:	2b10      	cmp	r3, #16
   1f1ac:	f47f aef0 	bne.w	1ef90 <smp_pairing_req+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f1b0:	2105      	movs	r1, #5
   1f1b2:	4628      	mov	r0, r5
   1f1b4:	f00e fe97 	bl	2dee6 <atomic_test_bit>
   1f1b8:	2800      	cmp	r0, #0
   1f1ba:	d091      	beq.n	1f0e0 <smp_pairing_req+0x174>
		if (smp->method == JUST_WORKS) {
   1f1bc:	7a23      	ldrb	r3, [r4, #8]
   1f1be:	2b00      	cmp	r3, #0
   1f1c0:	d1c2      	bne.n	1f148 <smp_pairing_req+0x1dc>
   1f1c2:	e78d      	b.n	1f0e0 <smp_pairing_req+0x174>
	switch (smp->method) {
   1f1c4:	2b06      	cmp	r3, #6
   1f1c6:	d85f      	bhi.n	1f288 <smp_pairing_req+0x31c>
   1f1c8:	e8df f003 	tbb	[pc, r3]
   1f1cc:	5e2f5617 	.word	0x5e2f5617
   1f1d0:	5e5e      	.short	0x5e5e
   1f1d2:	04          	.byte	0x04
   1f1d3:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1f1d4:	2e00      	cmp	r6, #0
   1f1d6:	d067      	beq.n	1f2a8 <smp_pairing_req+0x33c>
   1f1d8:	68f3      	ldr	r3, [r6, #12]
   1f1da:	2b00      	cmp	r3, #0
   1f1dc:	d064      	beq.n	1f2a8 <smp_pairing_req+0x33c>
			struct bt_conn_oob_info info = {
   1f1de:	2300      	movs	r3, #0
   1f1e0:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f1e2:	210a      	movs	r1, #10
   1f1e4:	4628      	mov	r0, r5
   1f1e6:	f00e fec7 	bl	2df78 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1f1ea:	68f3      	ldr	r3, [r6, #12]
   1f1ec:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1f1f0:	4639      	mov	r1, r7
   1f1f2:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f1f4:	7a23      	ldrb	r3, [r4, #8]
   1f1f6:	2b00      	cmp	r3, #0
   1f1f8:	d158      	bne.n	1f2ac <smp_pairing_req+0x340>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f1fa:	210f      	movs	r1, #15
   1f1fc:	4628      	mov	r0, r5
   1f1fe:	f00e fe72 	bl	2dee6 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f202:	2800      	cmp	r0, #0
   1f204:	d152      	bne.n	1f2ac <smp_pairing_req+0x340>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f206:	f1b8 0f00 	cmp.w	r8, #0
   1f20a:	d04f      	beq.n	1f2ac <smp_pairing_req+0x340>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1f20c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1f210:	2b00      	cmp	r3, #0
   1f212:	d04b      	beq.n	1f2ac <smp_pairing_req+0x340>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f214:	4628      	mov	r0, r5
   1f216:	210a      	movs	r1, #10
   1f218:	f00e feae 	bl	2df78 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1f21c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1f220:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1f224:	4798      	blx	r3
		return 0;
   1f226:	2000      	movs	r0, #0
   1f228:	e6b3      	b.n	1ef92 <smp_pairing_req+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1f22a:	2104      	movs	r1, #4
   1f22c:	4638      	mov	r0, r7
   1f22e:	f004 fc7f 	bl	23b30 <bt_rand>
   1f232:	2800      	cmp	r0, #0
   1f234:	f47f aec9 	bne.w	1efca <smp_pairing_req+0x5e>
			passkey %= 1000000;
   1f238:	683b      	ldr	r3, [r7, #0]
   1f23a:	4a32      	ldr	r2, [pc, #200]	; (1f304 <smp_pairing_req+0x398>)
   1f23c:	fbb3 f1f2 	udiv	r1, r3, r2
   1f240:	fb02 3311 	mls	r3, r2, r1, r3
   1f244:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1f246:	b14e      	cbz	r6, 1f25c <smp_pairing_req+0x2f0>
   1f248:	6833      	ldr	r3, [r6, #0]
   1f24a:	b13b      	cbz	r3, 1f25c <smp_pairing_req+0x2f0>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f24c:	210b      	movs	r1, #11
   1f24e:	4628      	mov	r0, r5
   1f250:	f00e fe92 	bl	2df78 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1f254:	6833      	ldr	r3, [r6, #0]
   1f256:	6839      	ldr	r1, [r7, #0]
   1f258:	4648      	mov	r0, r9
   1f25a:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1f25c:	683b      	ldr	r3, [r7, #0]
	dst[0] = val;
   1f25e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1f262:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1f266:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1f268:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1f26c:	0a1b      	lsrs	r3, r3, #8
   1f26e:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1f272:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1f276:	e7bd      	b.n	1f1f4 <smp_pairing_req+0x288>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f278:	4628      	mov	r0, r5
   1f27a:	210a      	movs	r1, #10
   1f27c:	f00e fe7c 	bl	2df78 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1f280:	6873      	ldr	r3, [r6, #4]
   1f282:	4648      	mov	r0, r9
   1f284:	4798      	blx	r3
	if (ret) {
   1f286:	e7b5      	b.n	1f1f4 <smp_pairing_req+0x288>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f288:	466c      	mov	r4, sp
   1f28a:	b088      	sub	sp, #32
   1f28c:	466a      	mov	r2, sp
   1f28e:	491e      	ldr	r1, [pc, #120]	; (1f308 <smp_pairing_req+0x39c>)
   1f290:	481b      	ldr	r0, [pc, #108]	; (1f300 <smp_pairing_req+0x394>)
	switch (smp->method) {
   1f292:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f296:	2303      	movs	r3, #3
   1f298:	f842 3f10 	str.w	r3, [r2, #16]!
   1f29c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f2a0:	f00e fe5c 	bl	2df5c <z_log_msg_static_create.constprop.0>
   1f2a4:	46a5      	mov	sp, r4
	if (ret) {
   1f2a6:	e690      	b.n	1efca <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1f2a8:	2002      	movs	r0, #2
   1f2aa:	e672      	b.n	1ef92 <smp_pairing_req+0x26>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1f2ac:	2103      	movs	r1, #3
   1f2ae:	4620      	mov	r0, r4
   1f2b0:	f00e fe62 	bl	2df78 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1f2b4:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1f2b6:	f00e fe5f 	bl	2df78 <atomic_set_bit>
	return send_pairing_rsp(smp);
   1f2ba:	f00e fe90 	bl	2dfde <send_pairing_rsp>
   1f2be:	e668      	b.n	1ef92 <smp_pairing_req+0x26>
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1f2c0:	7a23      	ldrb	r3, [r4, #8]
   1f2c2:	bb1b      	cbnz	r3, 1f30c <smp_pairing_req+0x3a0>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f2c4:	210f      	movs	r1, #15
   1f2c6:	4628      	mov	r0, r5
   1f2c8:	f00e fe0d 	bl	2dee6 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f2cc:	b9f0      	cbnz	r0, 1f30c <smp_pairing_req+0x3a0>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f2ce:	f1b8 0f00 	cmp.w	r8, #0
   1f2d2:	d01b      	beq.n	1f30c <smp_pairing_req+0x3a0>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1f2d4:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1f2d8:	b1c3      	cbz	r3, 1f30c <smp_pairing_req+0x3a0>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f2da:	4628      	mov	r0, r5
   1f2dc:	210a      	movs	r1, #10
   1f2de:	f00e fe4b 	bl	2df78 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1f2e2:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1f2e6:	4630      	mov	r0, r6
   1f2e8:	e79c      	b.n	1f224 <smp_pairing_req+0x2b8>
   1f2ea:	bf00      	nop
   1f2ec:	200056de 	.word	0x200056de
   1f2f0:	00033776 	.word	0x00033776
   1f2f4:	200056dd 	.word	0x200056dd
   1f2f8:	0003375d 	.word	0x0003375d
   1f2fc:	00033431 	.word	0x00033431
   1f300:	000302fc 	.word	0x000302fc
   1f304:	000f4240 	.word	0x000f4240
   1f308:	000333d9 	.word	0x000333d9
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1f30c:	210c      	movs	r1, #12
   1f30e:	4620      	mov	r0, r4
   1f310:	e7d1      	b.n	1f2b6 <smp_pairing_req+0x34a>
   1f312:	bf00      	nop

0001f314 <compute_and_check_and_send_periph_dhcheck>:
{
   1f314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f318:	b097      	sub	sp, #92	; 0x5c
   1f31a:	4604      	mov	r4, r0
   1f31c:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   1f31e:	2210      	movs	r2, #16
   1f320:	2100      	movs	r1, #0
   1f322:	f107 0020 	add.w	r0, r7, #32
   1f326:	f00c ffe5 	bl	2c2f4 <memset>
	switch (smp->method) {
   1f32a:	7a23      	ldrb	r3, [r4, #8]
   1f32c:	2b05      	cmp	r3, #5
   1f32e:	d834      	bhi.n	1f39a <compute_and_check_and_send_periph_dhcheck+0x86>
   1f330:	e8df f003 	tbb	[pc, r3]
   1f334:	0a03030a 	.word	0x0a03030a
   1f338:	2d33      	.short	0x2d33
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1f33a:	2204      	movs	r2, #4
   1f33c:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1f340:	f107 0020 	add.w	r0, r7, #32
   1f344:	f00c ffcb 	bl	2c2de <memcpy>
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1f348:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1f34c:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1f350:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1f354:	e9cd 5201 	strd	r5, r2, [sp, #4]
   1f358:	f104 0637 	add.w	r6, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1f35c:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1f360:	f104 0927 	add.w	r9, r4, #39	; 0x27
   1f364:	9200      	str	r2, [sp, #0]
   1f366:	338f      	adds	r3, #143	; 0x8f
   1f368:	464a      	mov	r2, r9
   1f36a:	4631      	mov	r1, r6
   1f36c:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1f370:	f001 fa8a 	bl	20888 <bt_crypto_f5>
   1f374:	b328      	cbz	r0, 1f3c2 <compute_and_check_and_send_periph_dhcheck+0xae>
		LOG_ERR("Calculate LTK failed");
   1f376:	4b42      	ldr	r3, [pc, #264]	; (1f480 <compute_and_check_and_send_periph_dhcheck+0x16c>)
   1f378:	647b      	str	r3, [r7, #68]	; 0x44
   1f37a:	2302      	movs	r3, #2
   1f37c:	4841      	ldr	r0, [pc, #260]	; (1f484 <compute_and_check_and_send_periph_dhcheck+0x170>)
   1f37e:	643b      	str	r3, [r7, #64]	; 0x40
   1f380:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1f384:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f388:	f00e fde8 	bl	2df5c <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f38c:	e014      	b.n	1f3b8 <compute_and_check_and_send_periph_dhcheck+0xa4>
		if (smp->oobd_remote) {
   1f38e:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1f392:	2900      	cmp	r1, #0
   1f394:	d0d8      	beq.n	1f348 <compute_and_check_and_send_periph_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1f396:	2210      	movs	r2, #16
   1f398:	e7d2      	b.n	1f340 <compute_and_check_and_send_periph_dhcheck+0x2c>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f39a:	466c      	mov	r4, sp
   1f39c:	b088      	sub	sp, #32
   1f39e:	aa04      	add	r2, sp, #16
   1f3a0:	4939      	ldr	r1, [pc, #228]	; (1f488 <compute_and_check_and_send_periph_dhcheck+0x174>)
   1f3a2:	4838      	ldr	r0, [pc, #224]	; (1f484 <compute_and_check_and_send_periph_dhcheck+0x170>)
	switch (smp->method) {
   1f3a4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f3a8:	2303      	movs	r3, #3
   1f3aa:	f842 3f10 	str.w	r3, [r2, #16]!
   1f3ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f3b2:	f00e fdd3 	bl	2df5c <z_log_msg_static_create.constprop.0>
   1f3b6:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1f3b8:	2008      	movs	r0, #8
}
   1f3ba:	374c      	adds	r7, #76	; 0x4c
   1f3bc:	46bd      	mov	sp, r7
   1f3be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1f3c2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1f3c6:	f103 028f 	add.w	r2, r3, #143	; 0x8f
   1f3ca:	3396      	adds	r3, #150	; 0x96
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1f3cc:	f107 0810 	add.w	r8, r7, #16
   1f3d0:	9301      	str	r3, [sp, #4]
   1f3d2:	f104 0311 	add.w	r3, r4, #17
   1f3d6:	9202      	str	r2, [sp, #8]
   1f3d8:	9300      	str	r3, [sp, #0]
   1f3da:	f8cd 800c 	str.w	r8, [sp, #12]
   1f3de:	f107 0320 	add.w	r3, r7, #32
   1f3e2:	4632      	mov	r2, r6
   1f3e4:	4649      	mov	r1, r9
   1f3e6:	4628      	mov	r0, r5
   1f3e8:	f00f f8de 	bl	2e5a8 <bt_crypto_f6>
   1f3ec:	b108      	cbz	r0, 1f3f2 <compute_and_check_and_send_periph_dhcheck+0xde>
		LOG_ERR("Calculate local DHKey check failed");
   1f3ee:	4b27      	ldr	r3, [pc, #156]	; (1f48c <compute_and_check_and_send_periph_dhcheck+0x178>)
   1f3f0:	e7c2      	b.n	1f378 <compute_and_check_and_send_periph_dhcheck+0x64>
	if (smp->method == LE_SC_OOB) {
   1f3f2:	7a23      	ldrb	r3, [r4, #8]
   1f3f4:	2b05      	cmp	r3, #5
   1f3f6:	d107      	bne.n	1f408 <compute_and_check_and_send_periph_dhcheck+0xf4>
		if (smp->oobd_local) {
   1f3f8:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1f3fc:	2210      	movs	r2, #16
   1f3fe:	f107 0020 	add.w	r0, r7, #32
		if (smp->oobd_local) {
   1f402:	b1b1      	cbz	r1, 1f432 <compute_and_check_and_send_periph_dhcheck+0x11e>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1f404:	f00c ff6b 	bl	2c2de <memcpy>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1f408:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1f40c:	9703      	str	r7, [sp, #12]
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1f40e:	f103 0296 	add.w	r2, r3, #150	; 0x96
   1f412:	338f      	adds	r3, #143	; 0x8f
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1f414:	9301      	str	r3, [sp, #4]
   1f416:	f104 030a 	add.w	r3, r4, #10
   1f41a:	9202      	str	r2, [sp, #8]
   1f41c:	9300      	str	r3, [sp, #0]
   1f41e:	464a      	mov	r2, r9
   1f420:	f107 0320 	add.w	r3, r7, #32
   1f424:	4631      	mov	r1, r6
   1f426:	4628      	mov	r0, r5
   1f428:	f00f f8be 	bl	2e5a8 <bt_crypto_f6>
   1f42c:	b120      	cbz	r0, 1f438 <compute_and_check_and_send_periph_dhcheck+0x124>
		LOG_ERR("Calculate remote DHKey check failed");
   1f42e:	4b18      	ldr	r3, [pc, #96]	; (1f490 <compute_and_check_and_send_periph_dhcheck+0x17c>)
   1f430:	e7a2      	b.n	1f378 <compute_and_check_and_send_periph_dhcheck+0x64>
			memset(r, 0, sizeof(r));
   1f432:	f00c ff5f 	bl	2c2f4 <memset>
   1f436:	e7e7      	b.n	1f408 <compute_and_check_and_send_periph_dhcheck+0xf4>
	if (memcmp(smp->e, re, 16)) {
   1f438:	2210      	movs	r2, #16
   1f43a:	4639      	mov	r1, r7
   1f43c:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1f440:	f00c ff26 	bl	2c290 <memcmp>
   1f444:	4605      	mov	r5, r0
   1f446:	b9c8      	cbnz	r0, 1f47c <compute_and_check_and_send_periph_dhcheck+0x168>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1f448:	210d      	movs	r1, #13
   1f44a:	4620      	mov	r0, r4
   1f44c:	f00e fda8 	bl	2dfa0 <smp_create_pdu.constprop.0>
	if (!buf) {
   1f450:	4606      	mov	r6, r0
   1f452:	2800      	cmp	r0, #0
   1f454:	d0b0      	beq.n	1f3b8 <compute_and_check_and_send_periph_dhcheck+0xa4>
   1f456:	2110      	movs	r1, #16
   1f458:	300c      	adds	r0, #12
   1f45a:	f00f f952 	bl	2e702 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1f45e:	2210      	movs	r2, #16
   1f460:	4641      	mov	r1, r8
   1f462:	f00c ff3c 	bl	2c2de <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1f466:	462a      	mov	r2, r5
   1f468:	4631      	mov	r1, r6
   1f46a:	4620      	mov	r0, r4
   1f46c:	f7ff fada 	bl	1ea24 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f470:	1d20      	adds	r0, r4, #4
   1f472:	2101      	movs	r1, #1
   1f474:	f00e fd80 	bl	2df78 <atomic_set_bit>
	return 0;
   1f478:	4628      	mov	r0, r5
   1f47a:	e79e      	b.n	1f3ba <compute_and_check_and_send_periph_dhcheck+0xa6>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1f47c:	200b      	movs	r0, #11
   1f47e:	e79c      	b.n	1f3ba <compute_and_check_and_send_periph_dhcheck+0xa6>
   1f480:	0003345e 	.word	0x0003345e
   1f484:	000302fc 	.word	0x000302fc
   1f488:	000333d9 	.word	0x000333d9
   1f48c:	00033473 	.word	0x00033473
   1f490:	00033496 	.word	0x00033496

0001f494 <bt_smp_connected>:
{
   1f494:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1f496:	490b      	ldr	r1, [pc, #44]	; (1f4c4 <bt_smp_connected+0x30>)
{
   1f498:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1f49a:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1f49e:	3034      	adds	r0, #52	; 0x34
   1f4a0:	f010 f97e 	bl	2f7a0 <k_work_init_delayable>
	smp_reset(smp);
   1f4a4:	4628      	mov	r0, r5
   1f4a6:	f00e fe0d 	bl	2e0c4 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f4aa:	f3bf 8f5b 	dmb	ish
   1f4ae:	4b06      	ldr	r3, [pc, #24]	; (1f4c8 <bt_smp_connected+0x34>)
   1f4b0:	3464      	adds	r4, #100	; 0x64
   1f4b2:	e854 2f00 	ldrex	r2, [r4]
   1f4b6:	e844 3100 	strex	r1, r3, [r4]
   1f4ba:	2900      	cmp	r1, #0
   1f4bc:	d1f9      	bne.n	1f4b2 <bt_smp_connected+0x1e>
   1f4be:	f3bf 8f5b 	dmb	ish
}
   1f4c2:	bd38      	pop	{r3, r4, r5, pc}
   1f4c4:	00020241 	.word	0x00020241
   1f4c8:	200025b8 	.word	0x200025b8

0001f4cc <smp_pairing_confirm>:
{
   1f4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f4ce:	1d05      	adds	r5, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1f4d0:	68ce      	ldr	r6, [r1, #12]
{
   1f4d2:	af00      	add	r7, sp, #0
   1f4d4:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f4d6:	210b      	movs	r1, #11
   1f4d8:	4628      	mov	r0, r5
   1f4da:	f00e fd2e 	bl	2df3a <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1f4de:	4631      	mov	r1, r6
   1f4e0:	2210      	movs	r2, #16
   1f4e2:	f104 0017 	add.w	r0, r4, #23
   1f4e6:	f00c fefa 	bl	2c2de <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f4ea:	2105      	movs	r1, #5
   1f4ec:	4628      	mov	r0, r5
   1f4ee:	f00e fcfa 	bl	2dee6 <atomic_test_bit>
   1f4f2:	b920      	cbnz	r0, 1f4fe <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   1f4f4:	4620      	mov	r0, r4
   1f4f6:	f00e fe62 	bl	2e1be <legacy_pairing_confirm>
}
   1f4fa:	46bd      	mov	sp, r7
   1f4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   1f4fe:	7a23      	ldrb	r3, [r4, #8]
   1f500:	2b01      	cmp	r3, #1
   1f502:	d008      	beq.n	1f516 <smp_pairing_confirm+0x4a>
   1f504:	2b02      	cmp	r3, #2
   1f506:	d112      	bne.n	1f52e <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1f508:	2104      	movs	r1, #4
   1f50a:	4620      	mov	r0, r4
   1f50c:	f00e fd34 	bl	2df78 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1f510:	f7ff fbc4 	bl	1ec9c <smp_send_pairing_confirm>
   1f514:	e7f1      	b.n	1f4fa <smp_pairing_confirm+0x2e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f516:	210a      	movs	r1, #10
   1f518:	4628      	mov	r0, r5
   1f51a:	f00e fce4 	bl	2dee6 <atomic_test_bit>
   1f51e:	2800      	cmp	r0, #0
   1f520:	d0f2      	beq.n	1f508 <smp_pairing_confirm+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1f522:	4628      	mov	r0, r5
   1f524:	2100      	movs	r1, #0
   1f526:	f00e fd27 	bl	2df78 <atomic_set_bit>
			return 0;
   1f52a:	2000      	movs	r0, #0
   1f52c:	e7e5      	b.n	1f4fa <smp_pairing_confirm+0x2e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f52e:	466c      	mov	r4, sp
   1f530:	b088      	sub	sp, #32
   1f532:	466a      	mov	r2, sp
   1f534:	4906      	ldr	r1, [pc, #24]	; (1f550 <smp_pairing_confirm+0x84>)
   1f536:	4807      	ldr	r0, [pc, #28]	; (1f554 <smp_pairing_confirm+0x88>)
	switch (smp->method) {
   1f538:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f53c:	2303      	movs	r3, #3
   1f53e:	f842 3f10 	str.w	r3, [r2, #16]!
   1f542:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f546:	f00e fd09 	bl	2df5c <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f54a:	2008      	movs	r0, #8
   1f54c:	46a5      	mov	sp, r4
   1f54e:	e7d4      	b.n	1f4fa <smp_pairing_confirm+0x2e>
   1f550:	000333d9 	.word	0x000333d9
   1f554:	000302fc 	.word	0x000302fc

0001f558 <smp_pairing_random>:
{
   1f558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f55c:	b08e      	sub	sp, #56	; 0x38
   1f55e:	af04      	add	r7, sp, #16
   1f560:	4604      	mov	r4, r0
   1f562:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f564:	f7ff f9fc 	bl	1e960 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1f568:	f104 0837 	add.w	r8, r4, #55	; 0x37
   1f56c:	68e9      	ldr	r1, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f56e:	4606      	mov	r6, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1f570:	2210      	movs	r2, #16
   1f572:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f574:	1d25      	adds	r5, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1f576:	f00c feb2 	bl	2c2de <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f57a:	2105      	movs	r1, #5
   1f57c:	4628      	mov	r0, r5
   1f57e:	f00e fcb2 	bl	2dee6 <atomic_test_bit>
   1f582:	2800      	cmp	r0, #0
   1f584:	d148      	bne.n	1f618 <smp_pairing_random+0xc0>
	struct bt_conn *conn = smp->chan.chan.conn;
   1f586:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f58a:	9702      	str	r7, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1f58c:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f590:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1f594:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f596:	9201      	str	r2, [sp, #4]
   1f598:	9300      	str	r3, [sp, #0]
   1f59a:	f104 0209 	add.w	r2, r4, #9
   1f59e:	f104 0310 	add.w	r3, r4, #16
   1f5a2:	4641      	mov	r1, r8
   1f5a4:	4630      	mov	r0, r6
   1f5a6:	f00e fdb0 	bl	2e10a <smp_c1>
	if (err) {
   1f5aa:	bb18      	cbnz	r0, 1f5f4 <smp_pairing_random+0x9c>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1f5ac:	2210      	movs	r2, #16
   1f5ae:	4639      	mov	r1, r7
   1f5b0:	f104 0017 	add.w	r0, r4, #23
   1f5b4:	f00c fe6c 	bl	2c290 <memcmp>
   1f5b8:	2800      	cmp	r0, #0
   1f5ba:	d16e      	bne.n	1f69a <smp_pairing_random+0x142>
	memcpy(out, r2, 8);
   1f5bc:	2208      	movs	r2, #8
   1f5be:	4641      	mov	r1, r8
   1f5c0:	4638      	mov	r0, r7
   1f5c2:	f00c fe8c 	bl	2c2de <memcpy>
	memcpy(out + 8, r1, 8);
   1f5c6:	2208      	movs	r2, #8
   1f5c8:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1f5cc:	18b8      	adds	r0, r7, r2
   1f5ce:	f00c fe86 	bl	2c2de <memcpy>
	return bt_encrypt_le(k, out, out);
   1f5d2:	463a      	mov	r2, r7
   1f5d4:	4639      	mov	r1, r7
   1f5d6:	4630      	mov	r0, r6
   1f5d8:	f00f fcc2 	bl	2ef60 <bt_encrypt_le>
		if (err) {
   1f5dc:	b178      	cbz	r0, 1f5fe <smp_pairing_random+0xa6>
			LOG_ERR("Calculate STK failed");
   1f5de:	4b5f      	ldr	r3, [pc, #380]	; (1f75c <smp_pairing_random+0x204>)
		LOG_ERR("Calculate confirm failed");
   1f5e0:	627b      	str	r3, [r7, #36]	; 0x24
   1f5e2:	2302      	movs	r3, #2
   1f5e4:	485e      	ldr	r0, [pc, #376]	; (1f760 <smp_pairing_random+0x208>)
   1f5e6:	623b      	str	r3, [r7, #32]
   1f5e8:	f107 0220 	add.w	r2, r7, #32
   1f5ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f5f0:	f00e fcb4 	bl	2df5c <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f5f4:	2008      	movs	r0, #8
}
   1f5f6:	3728      	adds	r7, #40	; 0x28
   1f5f8:	46bd      	mov	sp, r7
   1f5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1f5fe:	4639      	mov	r1, r7
   1f600:	2210      	movs	r2, #16
   1f602:	4630      	mov	r0, r6
   1f604:	f00c fe6b 	bl	2c2de <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f608:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f60a:	4628      	mov	r0, r5
   1f60c:	f00e fcb4 	bl	2df78 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1f610:	4620      	mov	r0, r4
   1f612:	f00e fcfd 	bl	2e010 <smp_send_pairing_random>
   1f616:	e7ee      	b.n	1f5f6 <smp_pairing_random+0x9e>
	switch (smp->method) {
   1f618:	7a23      	ldrb	r3, [r4, #8]
   1f61a:	2b05      	cmp	r3, #5
   1f61c:	f200 808c 	bhi.w	1f738 <smp_pairing_random+0x1e0>
   1f620:	e8df f003 	tbb	[pc, r3]
   1f624:	0320201a 	.word	0x0320201a
   1f628:	618a      	.short	0x618a
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   1f62a:	f107 0310 	add.w	r3, r7, #16
   1f62e:	494d      	ldr	r1, [pc, #308]	; (1f764 <smp_pairing_random+0x20c>)
   1f630:	9300      	str	r3, [sp, #0]
   1f632:	6809      	ldr	r1, [r1, #0]
   1f634:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1f638:	4642      	mov	r2, r8
   1f63a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1f63e:	f001 f98b 	bl	20958 <bt_crypto_g2>
   1f642:	2800      	cmp	r0, #0
   1f644:	d1d6      	bne.n	1f5f4 <smp_pairing_random+0x9c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f646:	210a      	movs	r1, #10
   1f648:	4628      	mov	r0, r5
   1f64a:	f00e fc95 	bl	2df78 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1f64e:	68b3      	ldr	r3, [r6, #8]
   1f650:	6939      	ldr	r1, [r7, #16]
   1f652:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1f656:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1f658:	210d      	movs	r1, #13
   1f65a:	4620      	mov	r0, r4
   1f65c:	f00e fc8c 	bl	2df78 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f660:	2110      	movs	r1, #16
   1f662:	e7d2      	b.n	1f60a <smp_pairing_random+0xb2>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1f664:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1f668:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1f66c:	493d      	ldr	r1, [pc, #244]	; (1f764 <smp_pairing_random+0x20c>)
   1f66e:	9700      	str	r7, [sp, #0]
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1f670:	40d3      	lsrs	r3, r2
   1f672:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1f676:	6809      	ldr	r1, [r1, #0]
   1f678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f67c:	4642      	mov	r2, r8
   1f67e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1f682:	f00e ff6c 	bl	2e55e <bt_crypto_f4>
   1f686:	b108      	cbz	r0, 1f68c <smp_pairing_random+0x134>
		LOG_ERR("Calculate confirm failed");
   1f688:	4b37      	ldr	r3, [pc, #220]	; (1f768 <smp_pairing_random+0x210>)
   1f68a:	e7a9      	b.n	1f5e0 <smp_pairing_random+0x88>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1f68c:	2210      	movs	r2, #16
   1f68e:	4639      	mov	r1, r7
   1f690:	f104 0017 	add.w	r0, r4, #23
   1f694:	f00c fdfc 	bl	2c290 <memcmp>
   1f698:	b108      	cbz	r0, 1f69e <smp_pairing_random+0x146>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1f69a:	2004      	movs	r0, #4
   1f69c:	e7ab      	b.n	1f5f6 <smp_pairing_random+0x9e>
		atomic_set_bit(smp->allowed_cmds,
   1f69e:	2103      	movs	r1, #3
   1f6a0:	4620      	mov	r0, r4
   1f6a2:	f00e fc69 	bl	2df78 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1f6a6:	f00e fcb3 	bl	2e010 <smp_send_pairing_random>
		if (err) {
   1f6aa:	2800      	cmp	r0, #0
   1f6ac:	d1a3      	bne.n	1f5f6 <smp_pairing_random+0x9e>
		smp->passkey_round++;
   1f6ae:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1f6b2:	3301      	adds	r3, #1
   1f6b4:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1f6b6:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1f6b8:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1f6bc:	d109      	bne.n	1f6d2 <smp_pairing_random+0x17a>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1f6be:	210d      	movs	r1, #13
   1f6c0:	4620      	mov	r0, r4
   1f6c2:	f00e fc59 	bl	2df78 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f6c6:	2110      	movs	r1, #16
   1f6c8:	4628      	mov	r0, r5
   1f6ca:	f00e fc55 	bl	2df78 <atomic_set_bit>
			return 0;
   1f6ce:	2000      	movs	r0, #0
   1f6d0:	e791      	b.n	1f5f6 <smp_pairing_random+0x9e>
		if (bt_rand(smp->prnd, 16)) {
   1f6d2:	2110      	movs	r1, #16
   1f6d4:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1f6d8:	f004 fa2a 	bl	23b30 <bt_rand>
   1f6dc:	3800      	subs	r0, #0
   1f6de:	bf18      	it	ne
   1f6e0:	2001      	movne	r0, #1
   1f6e2:	00c0      	lsls	r0, r0, #3
   1f6e4:	e787      	b.n	1f5f6 <smp_pairing_random+0x9e>
		if (bt_rand(smp->prnd, 16)) {
   1f6e6:	2110      	movs	r1, #16
   1f6e8:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1f6ec:	f004 fa20 	bl	23b30 <bt_rand>
   1f6f0:	2800      	cmp	r0, #0
   1f6f2:	f47f af7f 	bne.w	1f5f4 <smp_pairing_random+0x9c>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1f6f6:	b37e      	cbz	r6, 1f758 <smp_pairing_random+0x200>
   1f6f8:	68f3      	ldr	r3, [r6, #12]
   1f6fa:	b36b      	cbz	r3, 1f758 <smp_pairing_random+0x200>
			struct bt_conn_oob_info info = {
   1f6fc:	4b1b      	ldr	r3, [pc, #108]	; (1f76c <smp_pairing_random+0x214>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1f6fe:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1f700:	881b      	ldrh	r3, [r3, #0]
   1f702:	823b      	strh	r3, [r7, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1f704:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1f706:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1f708:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1f70c:	d412      	bmi.n	1f734 <smp_pairing_random+0x1dc>
   1f70e:	2b00      	cmp	r3, #0
   1f710:	bf14      	ite	ne
   1f712:	2301      	movne	r3, #1
   1f714:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   1f716:	747b      	strb	r3, [r7, #17]
			smp->oobd_local = NULL;
   1f718:	2300      	movs	r3, #0
			smp->oobd_remote = NULL;
   1f71a:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1f71e:	4628      	mov	r0, r5
   1f720:	210c      	movs	r1, #12
   1f722:	f00e fc29 	bl	2df78 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1f726:	68f3      	ldr	r3, [r6, #12]
   1f728:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1f72c:	f107 0110 	add.w	r1, r7, #16
   1f730:	4798      	blx	r3
			return 0;
   1f732:	e7cc      	b.n	1f6ce <smp_pairing_random+0x176>
		if (rsp_oob_present) {
   1f734:	005b      	lsls	r3, r3, #1
   1f736:	e7ee      	b.n	1f716 <smp_pairing_random+0x1be>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f738:	466c      	mov	r4, sp
   1f73a:	b088      	sub	sp, #32
   1f73c:	aa04      	add	r2, sp, #16
   1f73e:	490c      	ldr	r1, [pc, #48]	; (1f770 <smp_pairing_random+0x218>)
   1f740:	4807      	ldr	r0, [pc, #28]	; (1f760 <smp_pairing_random+0x208>)
	switch (smp->method) {
   1f742:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f746:	2303      	movs	r3, #3
   1f748:	f842 3f10 	str.w	r3, [r2, #16]!
   1f74c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f750:	f00e fc04 	bl	2df5c <z_log_msg_static_create.constprop.0>
   1f754:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1f756:	e74d      	b.n	1f5f4 <smp_pairing_random+0x9c>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1f758:	2002      	movs	r0, #2
   1f75a:	e74c      	b.n	1f5f6 <smp_pairing_random+0x9e>
   1f75c:	000334ba 	.word	0x000334ba
   1f760:	000302fc 	.word	0x000302fc
   1f764:	20003c30 	.word	0x20003c30
   1f768:	000334cf 	.word	0x000334cf
   1f76c:	000304ef 	.word	0x000304ef
   1f770:	000333d9 	.word	0x000333d9

0001f774 <bt_smp_start_security>:
{
   1f774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1f778:	78c6      	ldrb	r6, [r0, #3]
   1f77a:	2e01      	cmp	r6, #1
{
   1f77c:	4604      	mov	r4, r0
	switch (conn->role) {
   1f77e:	d005      	beq.n	1f78c <bt_smp_start_security+0x18>
		return -EINVAL;
   1f780:	f06f 0415 	mvn.w	r4, #21
}
   1f784:	4620      	mov	r0, r4
   1f786:	b003      	add	sp, #12
   1f788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1f78c:	f00e fbe9 	bl	2df62 <smp_chan_get>
	if (!smp) {
   1f790:	4605      	mov	r5, r0
   1f792:	2800      	cmp	r0, #0
   1f794:	f000 80ac 	beq.w	1f8f0 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f798:	1d07      	adds	r7, r0, #4
   1f79a:	2104      	movs	r1, #4
   1f79c:	4638      	mov	r0, r7
   1f79e:	f00e fba2 	bl	2dee6 <atomic_test_bit>
   1f7a2:	2800      	cmp	r0, #0
   1f7a4:	f040 80a7 	bne.w	1f8f6 <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f7a8:	2103      	movs	r1, #3
   1f7aa:	4638      	mov	r0, r7
   1f7ac:	f00e fb9b 	bl	2dee6 <atomic_test_bit>
   1f7b0:	b110      	cbz	r0, 1f7b8 <bt_smp_start_security+0x44>
		return -EBUSY;
   1f7b2:	f06f 040f 	mvn.w	r4, #15
   1f7b6:	e7e5      	b.n	1f784 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1f7b8:	4631      	mov	r1, r6
   1f7ba:	4638      	mov	r0, r7
   1f7bc:	f00e fb93 	bl	2dee6 <atomic_test_bit>
   1f7c0:	2800      	cmp	r0, #0
   1f7c2:	d1f6      	bne.n	1f7b2 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f7c4:	4628      	mov	r0, r5
   1f7c6:	f7ff f8cb 	bl	1e960 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1f7ca:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1f7ce:	7a9b      	ldrb	r3, [r3, #10]
   1f7d0:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f7d2:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1f7d4:	d042      	beq.n	1f85c <bt_smp_start_security+0xe8>
   1f7d6:	d832      	bhi.n	1f83e <bt_smp_start_security+0xca>
   1f7d8:	3b01      	subs	r3, #1
   1f7da:	2b01      	cmp	r3, #1
   1f7dc:	d948      	bls.n	1f870 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1f7de:	210b      	movs	r1, #11
   1f7e0:	1d20      	adds	r0, r4, #4
   1f7e2:	f00e fb80 	bl	2dee6 <atomic_test_bit>
   1f7e6:	2800      	cmp	r0, #0
   1f7e8:	d1ca      	bne.n	1f780 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1f7ea:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1f7ee:	b983      	cbnz	r3, 1f812 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   1f7f0:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1f7f4:	7a21      	ldrb	r1, [r4, #8]
   1f7f6:	4632      	mov	r2, r6
   1f7f8:	2020      	movs	r0, #32
   1f7fa:	f000 fe75 	bl	204e8 <bt_keys_find>
   1f7fe:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1f802:	b930      	cbnz	r0, 1f812 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1f804:	7a21      	ldrb	r1, [r4, #8]
   1f806:	4632      	mov	r2, r6
   1f808:	2004      	movs	r0, #4
   1f80a:	f000 fe6d 	bl	204e8 <bt_keys_find>
   1f80e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys ||
   1f812:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1f816:	2b00      	cmp	r3, #0
   1f818:	d0b2      	beq.n	1f780 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1f81a:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1f81c:	f012 0f24 	tst.w	r2, #36	; 0x24
   1f820:	d0ae      	beq.n	1f780 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1f822:	7aa1      	ldrb	r1, [r4, #10]
   1f824:	2902      	cmp	r1, #2
   1f826:	d923      	bls.n	1f870 <bt_smp_start_security+0xfc>
   1f828:	7b58      	ldrb	r0, [r3, #13]
   1f82a:	07c0      	lsls	r0, r0, #31
   1f82c:	d5a8      	bpl.n	1f780 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1f82e:	2903      	cmp	r1, #3
   1f830:	d01e      	beq.n	1f870 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1f832:	0692      	lsls	r2, r2, #26
   1f834:	d5a4      	bpl.n	1f780 <bt_smp_start_security+0xc>
   1f836:	7b1b      	ldrb	r3, [r3, #12]
   1f838:	2b10      	cmp	r3, #16
   1f83a:	d1a1      	bne.n	1f780 <bt_smp_start_security+0xc>
   1f83c:	e018      	b.n	1f870 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1f83e:	2b04      	cmp	r3, #4
   1f840:	d1cd      	bne.n	1f7de <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1f842:	4628      	mov	r0, r5
   1f844:	f7ff f8aa 	bl	1e99c <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1f848:	2803      	cmp	r0, #3
   1f84a:	d104      	bne.n	1f856 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1f84c:	2e00      	cmp	r6, #0
   1f84e:	d0c6      	beq.n	1f7de <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1f850:	68f3      	ldr	r3, [r6, #12]
   1f852:	2b00      	cmp	r3, #0
   1f854:	d0c3      	beq.n	1f7de <bt_smp_start_security+0x6a>
   1f856:	4b29      	ldr	r3, [pc, #164]	; (1f8fc <bt_smp_start_security+0x188>)
   1f858:	781b      	ldrb	r3, [r3, #0]
   1f85a:	e007      	b.n	1f86c <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1f85c:	4628      	mov	r0, r5
   1f85e:	f7ff f89d 	bl	1e99c <get_io_capa>
   1f862:	2803      	cmp	r0, #3
   1f864:	d104      	bne.n	1f870 <bt_smp_start_security+0xfc>
   1f866:	2e00      	cmp	r6, #0
   1f868:	d0b9      	beq.n	1f7de <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1f86a:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1f86c:	2b00      	cmp	r3, #0
   1f86e:	d0b6      	beq.n	1f7de <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   1f870:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1f874:	b13b      	cbz	r3, 1f886 <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   1f876:	4628      	mov	r0, r5
   1f878:	f7ff f952 	bl	1eb20 <smp_init>
   1f87c:	4680      	mov	r8, r0
   1f87e:	b170      	cbz	r0, 1f89e <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   1f880:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1f884:	e77e      	b.n	1f784 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1f886:	7a20      	ldrb	r0, [r4, #8]
   1f888:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1f88c:	f000 fdac 	bl	203e8 <bt_keys_get_addr>
   1f890:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1f894:	2800      	cmp	r0, #0
   1f896:	d1ee      	bne.n	1f876 <bt_smp_start_security+0x102>
			return -ENOMEM;
   1f898:	f06f 040b 	mvn.w	r4, #11
   1f89c:	e772      	b.n	1f784 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1f89e:	210b      	movs	r1, #11
   1f8a0:	4628      	mov	r0, r5
   1f8a2:	f00e fb7d 	bl	2dfa0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1f8a6:	4606      	mov	r6, r0
   1f8a8:	2800      	cmp	r0, #0
   1f8aa:	d0e9      	beq.n	1f880 <bt_smp_start_security+0x10c>
   1f8ac:	2101      	movs	r1, #1
   1f8ae:	300c      	adds	r0, #12
   1f8b0:	f00e ff27 	bl	2e702 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1f8b4:	2109      	movs	r1, #9
   1f8b6:	4681      	mov	r9, r0
   1f8b8:	4628      	mov	r0, r5
   1f8ba:	f7ff f895 	bl	1e9e8 <get_auth>
   1f8be:	4643      	mov	r3, r8
   1f8c0:	f889 0000 	strb.w	r0, [r9]
   1f8c4:	4632      	mov	r2, r6
   1f8c6:	4620      	mov	r0, r4
   1f8c8:	f8cd 8000 	str.w	r8, [sp]
   1f8cc:	2106      	movs	r1, #6
   1f8ce:	f00d fadc 	bl	2ce8a <bt_l2cap_send_cb>
	if (err) {
   1f8d2:	4604      	mov	r4, r0
   1f8d4:	b118      	cbz	r0, 1f8de <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1f8d6:	4630      	mov	r0, r6
   1f8d8:	f001 f934 	bl	20b44 <net_buf_unref>
		return err;
   1f8dc:	e752      	b.n	1f784 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1f8de:	4638      	mov	r0, r7
   1f8e0:	210f      	movs	r1, #15
   1f8e2:	f00e fb49 	bl	2df78 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1f8e6:	2101      	movs	r1, #1
   1f8e8:	4628      	mov	r0, r5
   1f8ea:	f00e fb45 	bl	2df78 <atomic_set_bit>
	return 0;
   1f8ee:	e749      	b.n	1f784 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1f8f0:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1f8f4:	e746      	b.n	1f784 <bt_smp_start_security+0x10>
		return -EIO;
   1f8f6:	f06f 0404 	mvn.w	r4, #4
   1f8fa:	e743      	b.n	1f784 <bt_smp_start_security+0x10>
   1f8fc:	200056dc 	.word	0x200056dc

0001f900 <smp_pairing_complete>:
{
   1f900:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1f902:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	if (conn->state != BT_CONN_CONNECTED) {
   1f906:	7b63      	ldrb	r3, [r4, #13]
   1f908:	2b07      	cmp	r3, #7
{
   1f90a:	b087      	sub	sp, #28
   1f90c:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1f90e:	f100 0504 	add.w	r5, r0, #4
	if (conn->state != BT_CONN_CONNECTED) {
   1f912:	d037      	beq.n	1f984 <smp_pairing_complete+0x84>
		LOG_WRN("Not connected!");
   1f914:	4b43      	ldr	r3, [pc, #268]	; (1fa24 <smp_pairing_complete+0x124>)
   1f916:	9305      	str	r3, [sp, #20]
   1f918:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1f91c:	2302      	movs	r3, #2
   1f91e:	4842      	ldr	r0, [pc, #264]	; (1fa28 <smp_pairing_complete+0x128>)
   1f920:	9304      	str	r3, [sp, #16]
   1f922:	aa04      	add	r2, sp, #16
   1f924:	f00e fb1a 	bl	2df5c <z_log_msg_static_create.constprop.0>
	switch (smp_err) {
   1f928:	2107      	movs	r1, #7
   1f92a:	4b40      	ldr	r3, [pc, #256]	; (1fa2c <smp_pairing_complete+0x12c>)
   1f92c:	5c5f      	ldrb	r7, [r3, r1]
		if (conn->le.keys &&
   1f92e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1f932:	b14b      	cbz	r3, 1f948 <smp_pairing_complete+0x48>
   1f934:	7b1b      	ldrb	r3, [r3, #12]
   1f936:	2b00      	cmp	r3, #0
   1f938:	d15c      	bne.n	1f9f4 <smp_pairing_complete+0xf4>
			bt_keys_clear(conn->le.keys);
   1f93a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1f93e:	f000 fe69 	bl	20614 <bt_keys_clear>
			conn->le.keys = NULL;
   1f942:	2300      	movs	r3, #0
   1f944:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1f948:	2102      	movs	r1, #2
   1f94a:	4628      	mov	r0, r5
   1f94c:	f00e facb 	bl	2dee6 <atomic_test_bit>
   1f950:	b940      	cbnz	r0, 1f964 <smp_pairing_complete+0x64>
	switch (err) {
   1f952:	2f07      	cmp	r7, #7
   1f954:	bf96      	itet	ls
   1f956:	4b36      	ldrls	r3, [pc, #216]	; (1fa30 <smp_pairing_complete+0x130>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1f958:	211f      	movhi	r1, #31
   1f95a:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1f95c:	463a      	mov	r2, r7
   1f95e:	4620      	mov	r0, r4
   1f960:	f7fb fe82 	bl	1b668 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f964:	2103      	movs	r1, #3
   1f966:	4628      	mov	r0, r5
   1f968:	f00e fabd 	bl	2dee6 <atomic_test_bit>
   1f96c:	b360      	cbz	r0, 1f9c8 <smp_pairing_complete+0xc8>
	return list->head;
   1f96e:	4b31      	ldr	r3, [pc, #196]	; (1fa34 <smp_pairing_complete+0x134>)
   1f970:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1f972:	b34b      	cbz	r3, 1f9c8 <smp_pairing_complete+0xc8>
	return node->next;
   1f974:	681d      	ldr	r5, [r3, #0]
   1f976:	b105      	cbz	r5, 1f97a <smp_pairing_complete+0x7a>
   1f978:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1f97a:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1f97e:	2b00      	cmp	r3, #0
   1f980:	d141      	bne.n	1fa06 <smp_pairing_complete+0x106>
   1f982:	e043      	b.n	1fa0c <smp_pairing_complete+0x10c>
	if (!status) {
   1f984:	bb81      	cbnz	r1, 1f9e8 <smp_pairing_complete+0xe8>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1f986:	210d      	movs	r1, #13
   1f988:	4628      	mov	r0, r5
   1f98a:	f00e faac 	bl	2dee6 <atomic_test_bit>
		if (bond_flag) {
   1f98e:	4607      	mov	r7, r0
   1f990:	b118      	cbz	r0, 1f99a <smp_pairing_complete+0x9a>
			bt_keys_store(conn->le.keys);
   1f992:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1f996:	f000 ff3f 	bl	20818 <bt_keys_store>
	return list->head;
   1f99a:	4b26      	ldr	r3, [pc, #152]	; (1fa34 <smp_pairing_complete+0x134>)
   1f99c:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1f99e:	b19b      	cbz	r3, 1f9c8 <smp_pairing_complete+0xc8>
	return node->next;
   1f9a0:	681d      	ldr	r5, [r3, #0]
   1f9a2:	b105      	cbz	r5, 1f9a6 <smp_pairing_complete+0xa6>
   1f9a4:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1f9a6:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1f9aa:	b113      	cbz	r3, 1f9b2 <smp_pairing_complete+0xb2>
				listener->pairing_complete(conn, bond_flag);
   1f9ac:	4639      	mov	r1, r7
   1f9ae:	4620      	mov	r0, r4
   1f9b0:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1f9b2:	b14d      	cbz	r5, 1f9c8 <smp_pairing_complete+0xc8>
   1f9b4:	462b      	mov	r3, r5
   1f9b6:	68ed      	ldr	r5, [r5, #12]
   1f9b8:	681b      	ldr	r3, [r3, #0]
   1f9ba:	b11d      	cbz	r5, 1f9c4 <smp_pairing_complete+0xc4>
   1f9bc:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1f9be:	2b00      	cmp	r3, #0
   1f9c0:	d1f4      	bne.n	1f9ac <smp_pairing_complete+0xac>
   1f9c2:	e7f7      	b.n	1f9b4 <smp_pairing_complete+0xb4>
   1f9c4:	2b00      	cmp	r3, #0
   1f9c6:	d1f1      	bne.n	1f9ac <smp_pairing_complete+0xac>
	smp_reset(smp);
   1f9c8:	4630      	mov	r0, r6
   1f9ca:	f00e fb7b 	bl	2e0c4 <smp_reset>
	if (conn->state == BT_CONN_CONNECTED && conn->sec_level != conn->required_sec_level) {
   1f9ce:	7b63      	ldrb	r3, [r4, #13]
   1f9d0:	2b07      	cmp	r3, #7
   1f9d2:	d125      	bne.n	1fa20 <smp_pairing_complete+0x120>
   1f9d4:	7a62      	ldrb	r2, [r4, #9]
   1f9d6:	7aa3      	ldrb	r3, [r4, #10]
   1f9d8:	429a      	cmp	r2, r3
   1f9da:	d021      	beq.n	1fa20 <smp_pairing_complete+0x120>
		bt_smp_start_security(conn);
   1f9dc:	4620      	mov	r0, r4
}
   1f9de:	b007      	add	sp, #28
   1f9e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1f9e4:	f7ff bec6 	b.w	1f774 <bt_smp_start_security>
	switch (smp_err) {
   1f9e8:	3901      	subs	r1, #1
   1f9ea:	b2c9      	uxtb	r1, r1
   1f9ec:	290e      	cmp	r1, #14
   1f9ee:	d99c      	bls.n	1f92a <smp_pairing_complete+0x2a>
	if (!status) {
   1f9f0:	2709      	movs	r7, #9
   1f9f2:	e79c      	b.n	1f92e <smp_pairing_complete+0x2e>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1f9f4:	2102      	movs	r1, #2
   1f9f6:	4628      	mov	r0, r5
   1f9f8:	f00e fa75 	bl	2dee6 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1f9fc:	2800      	cmp	r0, #0
   1f9fe:	d19c      	bne.n	1f93a <smp_pairing_complete+0x3a>
   1fa00:	e7a2      	b.n	1f948 <smp_pairing_complete+0x48>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1fa02:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1fa04:	b123      	cbz	r3, 1fa10 <smp_pairing_complete+0x110>
					listener->pairing_failed(conn, security_err);
   1fa06:	4639      	mov	r1, r7
   1fa08:	4620      	mov	r0, r4
   1fa0a:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1fa0c:	2d00      	cmp	r5, #0
   1fa0e:	d0db      	beq.n	1f9c8 <smp_pairing_complete+0xc8>
   1fa10:	462b      	mov	r3, r5
   1fa12:	68ed      	ldr	r5, [r5, #12]
   1fa14:	685b      	ldr	r3, [r3, #4]
   1fa16:	2d00      	cmp	r5, #0
   1fa18:	d1f3      	bne.n	1fa02 <smp_pairing_complete+0x102>
				if (listener->pairing_failed) {
   1fa1a:	2b00      	cmp	r3, #0
   1fa1c:	d1f3      	bne.n	1fa06 <smp_pairing_complete+0x106>
   1fa1e:	e7d3      	b.n	1f9c8 <smp_pairing_complete+0xc8>
}
   1fa20:	b007      	add	sp, #28
   1fa22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fa24:	000334e8 	.word	0x000334e8
   1fa28:	000302fc 	.word	0x000302fc
   1fa2c:	0003374e 	.word	0x0003374e
   1fa30:	0003373d 	.word	0x0003373d
   1fa34:	20003b14 	.word	0x20003b14

0001fa38 <smp_error>:
{
   1fa38:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1fa3a:	1d03      	adds	r3, r0, #4
{
   1fa3c:	b089      	sub	sp, #36	; 0x24
   1fa3e:	4606      	mov	r6, r0
   1fa40:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1fa42:	4618      	mov	r0, r3
   1fa44:	2102      	movs	r1, #2
   1fa46:	f00e fa4e 	bl	2dee6 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1fa4a:	4604      	mov	r4, r0
   1fa4c:	b120      	cbz	r0, 1fa58 <smp_error+0x20>
   1fa4e:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1fa52:	fab4 f484 	clz	r4, r4
   1fa56:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fa58:	2103      	movs	r1, #3
   1fa5a:	4618      	mov	r0, r3
   1fa5c:	f00e fa43 	bl	2dee6 <atomic_test_bit>
   1fa60:	b1b0      	cbz	r0, 1fa90 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   1fa62:	4639      	mov	r1, r7
   1fa64:	4630      	mov	r0, r6
   1fa66:	f7ff ff4b 	bl	1f900 <smp_pairing_complete>
	if (remote_already_completed) {
   1fa6a:	b1f4      	cbz	r4, 1faaa <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   1fa6c:	4b1d      	ldr	r3, [pc, #116]	; (1fae4 <smp_error+0xac>)
   1fa6e:	481e      	ldr	r0, [pc, #120]	; (1fae8 <smp_error+0xb0>)
   1fa70:	9307      	str	r3, [sp, #28]
   1fa72:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1fa76:	2302      	movs	r3, #2
   1fa78:	aa06      	add	r2, sp, #24
   1fa7a:	9306      	str	r3, [sp, #24]
   1fa7c:	f00e fa6e 	bl	2df5c <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1fa80:	2105      	movs	r1, #5
   1fa82:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1fa86:	f00d f8e0 	bl	2cc4a <bt_conn_disconnect>
		return 0;
   1fa8a:	2000      	movs	r0, #0
}
   1fa8c:	b009      	add	sp, #36	; 0x24
   1fa8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1fa90:	2101      	movs	r1, #1
   1fa92:	4618      	mov	r0, r3
   1fa94:	f00e fa27 	bl	2dee6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fa98:	2800      	cmp	r0, #0
   1fa9a:	d1e2      	bne.n	1fa62 <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1fa9c:	210f      	movs	r1, #15
   1fa9e:	4618      	mov	r0, r3
   1faa0:	f00e fa21 	bl	2dee6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1faa4:	2800      	cmp	r0, #0
   1faa6:	d1dc      	bne.n	1fa62 <smp_error+0x2a>
   1faa8:	e7df      	b.n	1fa6a <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1faaa:	2105      	movs	r1, #5
   1faac:	4630      	mov	r0, r6
   1faae:	f00e fa77 	bl	2dfa0 <smp_create_pdu.constprop.0>
	if (!buf) {
   1fab2:	4605      	mov	r5, r0
   1fab4:	b190      	cbz	r0, 1fadc <smp_error+0xa4>
   1fab6:	2101      	movs	r1, #1
   1fab8:	300c      	adds	r0, #12
   1faba:	f00e fe22 	bl	2e702 <net_buf_simple_add>
	rsp->reason = reason;
   1fabe:	7007      	strb	r7, [r0, #0]
   1fac0:	9400      	str	r4, [sp, #0]
   1fac2:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1fac6:	4623      	mov	r3, r4
   1fac8:	462a      	mov	r2, r5
   1faca:	2106      	movs	r1, #6
   1facc:	f00d f9dd 	bl	2ce8a <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1fad0:	2800      	cmp	r0, #0
   1fad2:	d0da      	beq.n	1fa8a <smp_error+0x52>
		net_buf_unref(buf);
   1fad4:	4628      	mov	r0, r5
   1fad6:	f001 f835 	bl	20b44 <net_buf_unref>
   1fada:	e7d6      	b.n	1fa8a <smp_error+0x52>
		return -ENOBUFS;
   1fadc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1fae0:	e7d4      	b.n	1fa8c <smp_error+0x54>
   1fae2:	bf00      	nop
   1fae4:	000334f7 	.word	0x000334f7
   1fae8:	000302fc 	.word	0x000302fc

0001faec <bt_smp_recv>:
{
   1faec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1faf0:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1faf2:	8a0b      	ldrh	r3, [r1, #16]
{
   1faf4:	af00      	add	r7, sp, #0
   1faf6:	4604      	mov	r4, r0
   1faf8:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
   1fafa:	b97b      	cbnz	r3, 1fb1c <bt_smp_recv+0x30>
		LOG_ERR("Too small SMP PDU received");
   1fafc:	4b47      	ldr	r3, [pc, #284]	; (1fc1c <bt_smp_recv+0x130>)
   1fafe:	617b      	str	r3, [r7, #20]
   1fb00:	4847      	ldr	r0, [pc, #284]	; (1fc20 <bt_smp_recv+0x134>)
   1fb02:	2302      	movs	r3, #2
   1fb04:	f107 0210 	add.w	r2, r7, #16
   1fb08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fb0c:	613b      	str	r3, [r7, #16]
   1fb0e:	f00e fa25 	bl	2df5c <z_log_msg_static_create.constprop.0>
}
   1fb12:	2000      	movs	r0, #0
   1fb14:	371c      	adds	r7, #28
   1fb16:	46bd      	mov	sp, r7
   1fb18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1fb1c:	2101      	movs	r1, #1
   1fb1e:	f106 000c 	add.w	r0, r6, #12
   1fb22:	f00e fe15 	bl	2e750 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1fb26:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   1fb2a:	3ce8      	subs	r4, #232	; 0xe8
   1fb2c:	4680      	mov	r8, r0
   1fb2e:	2104      	movs	r1, #4
   1fb30:	4620      	mov	r0, r4
   1fb32:	f00e f9d8 	bl	2dee6 <atomic_test_bit>
   1fb36:	f898 1000 	ldrb.w	r1, [r8]
   1fb3a:	b178      	cbz	r0, 1fb5c <bt_smp_recv+0x70>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1fb3c:	466c      	mov	r4, sp
   1fb3e:	b088      	sub	sp, #32
   1fb40:	466a      	mov	r2, sp
   1fb42:	4b38      	ldr	r3, [pc, #224]	; (1fc24 <bt_smp_recv+0x138>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1fb44:	4836      	ldr	r0, [pc, #216]	; (1fc20 <bt_smp_recv+0x134>)
   1fb46:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1fb4a:	2303      	movs	r3, #3
   1fb4c:	f842 3f10 	str.w	r3, [r2, #16]!
   1fb50:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1fb54:	f00e fa02 	bl	2df5c <z_log_msg_static_create.constprop.0>
   1fb58:	46a5      	mov	sp, r4
		return 0;
   1fb5a:	e7da      	b.n	1fb12 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1fb5c:	290e      	cmp	r1, #14
   1fb5e:	d904      	bls.n	1fb6a <bt_smp_recv+0x7e>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1fb60:	466c      	mov	r4, sp
   1fb62:	b088      	sub	sp, #32
   1fb64:	466a      	mov	r2, sp
   1fb66:	4b30      	ldr	r3, [pc, #192]	; (1fc28 <bt_smp_recv+0x13c>)
   1fb68:	e7ec      	b.n	1fb44 <bt_smp_recv+0x58>
	if (!handlers[hdr->code].func) {
   1fb6a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1fc2c <bt_smp_recv+0x140>
   1fb6e:	f859 3031 	ldr.w	r3, [r9, r1, lsl #3]
   1fb72:	b99b      	cbnz	r3, 1fb9c <bt_smp_recv+0xb0>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   1fb74:	466c      	mov	r4, sp
   1fb76:	b088      	sub	sp, #32
   1fb78:	466a      	mov	r2, sp
   1fb7a:	4b2d      	ldr	r3, [pc, #180]	; (1fc30 <bt_smp_recv+0x144>)
   1fb7c:	4828      	ldr	r0, [pc, #160]	; (1fc20 <bt_smp_recv+0x134>)
   1fb7e:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1fb82:	2303      	movs	r3, #3
   1fb84:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1fb88:	f842 3f10 	str.w	r3, [r2, #16]!
   1fb8c:	f00e f9e6 	bl	2df5c <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1fb90:	2107      	movs	r1, #7
   1fb92:	46a5      	mov	sp, r4
		smp_error(smp, err);
   1fb94:	4628      	mov	r0, r5
   1fb96:	f7ff ff4f 	bl	1fa38 <smp_error>
   1fb9a:	e7ba      	b.n	1fb12 <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1fb9c:	4628      	mov	r0, r5
   1fb9e:	f00e fa7b 	bl	2e098 <atomic_test_and_clear_bit>
   1fba2:	f898 3000 	ldrb.w	r3, [r8]
   1fba6:	b9b0      	cbnz	r0, 1fbd6 <bt_smp_recv+0xea>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   1fba8:	46e8      	mov	r8, sp
   1fbaa:	b088      	sub	sp, #32
   1fbac:	466a      	mov	r2, sp
   1fbae:	4921      	ldr	r1, [pc, #132]	; (1fc34 <bt_smp_recv+0x148>)
   1fbb0:	481b      	ldr	r0, [pc, #108]	; (1fc20 <bt_smp_recv+0x134>)
   1fbb2:	2603      	movs	r6, #3
   1fbb4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1fbb8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1fbbc:	f842 6f10 	str.w	r6, [r2, #16]!
   1fbc0:	f00e f9cc 	bl	2df5c <z_log_msg_static_create.constprop.0>
	return atomic_test_bit(smp->flags, SMP_FLAG_PAIRING);
   1fbc4:	4631      	mov	r1, r6
   1fbc6:	46c5      	mov	sp, r8
   1fbc8:	4620      	mov	r0, r4
   1fbca:	f00e f98c 	bl	2dee6 <atomic_test_bit>
		if (is_in_pairing_procedure(smp)) {
   1fbce:	2800      	cmp	r0, #0
   1fbd0:	d09f      	beq.n	1fb12 <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1fbd2:	2108      	movs	r1, #8
   1fbd4:	e7de      	b.n	1fb94 <bt_smp_recv+0xa8>
	if (buf->len != handlers[hdr->code].expect_len) {
   1fbd6:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
   1fbda:	8a31      	ldrh	r1, [r6, #16]
   1fbdc:	7912      	ldrb	r2, [r2, #4]
   1fbde:	428a      	cmp	r2, r1
   1fbe0:	d011      	beq.n	1fc06 <bt_smp_recv+0x11a>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1fbe2:	466c      	mov	r4, sp
   1fbe4:	b088      	sub	sp, #32
   1fbe6:	466a      	mov	r2, sp
   1fbe8:	4813      	ldr	r0, [pc, #76]	; (1fc38 <bt_smp_recv+0x14c>)
   1fbea:	61d3      	str	r3, [r2, #28]
   1fbec:	2304      	movs	r3, #4
   1fbee:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1fbf2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1fbf6:	f842 3f10 	str.w	r3, [r2, #16]!
   1fbfa:	4809      	ldr	r0, [pc, #36]	; (1fc20 <bt_smp_recv+0x134>)
   1fbfc:	f00e f9ae 	bl	2df5c <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1fc00:	210a      	movs	r1, #10
   1fc02:	46a5      	mov	sp, r4
   1fc04:	e7c6      	b.n	1fb94 <bt_smp_recv+0xa8>
	err = handlers[hdr->code].func(smp, buf);
   1fc06:	4631      	mov	r1, r6
   1fc08:	f859 3033 	ldr.w	r3, [r9, r3, lsl #3]
   1fc0c:	4628      	mov	r0, r5
   1fc0e:	4798      	blx	r3
	if (err) {
   1fc10:	4601      	mov	r1, r0
   1fc12:	2800      	cmp	r0, #0
   1fc14:	f43f af7d 	beq.w	1fb12 <bt_smp_recv+0x26>
   1fc18:	e7bc      	b.n	1fb94 <bt_smp_recv+0xa8>
   1fc1a:	bf00      	nop
   1fc1c:	0003354f 	.word	0x0003354f
   1fc20:	000302fc 	.word	0x000302fc
   1fc24:	0003356a 	.word	0x0003356a
   1fc28:	0003359b 	.word	0x0003359b
   1fc2c:	00030abc 	.word	0x00030abc
   1fc30:	000335bd 	.word	0x000335bd
   1fc34:	000335d7 	.word	0x000335d7
   1fc38:	00032f09 	.word	0x00032f09

0001fc3c <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1fc3c:	4b0e      	ldr	r3, [pc, #56]	; (1fc78 <bt_smp_pkey_ready+0x3c>)
{
   1fc3e:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1fc40:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1fc42:	b918      	cbnz	r0, 1fc4c <bt_smp_pkey_ready+0x10>
}
   1fc44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fc48:	f7fe bf1a 	b.w	1ea80 <bt_smp_pkey_ready.part.0>
		err = smp_public_key_periph(smp);
   1fc4c:	4c0b      	ldr	r4, [pc, #44]	; (1fc7c <bt_smp_pkey_ready+0x40>)
	z_impl_k_sem_give(sem);
   1fc4e:	480c      	ldr	r0, [pc, #48]	; (1fc80 <bt_smp_pkey_ready+0x44>)
   1fc50:	f006 fb22 	bl	26298 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fc54:	f3bf 8f5b 	dmb	ish
   1fc58:	f854 3904 	ldr.w	r3, [r4], #-4
   1fc5c:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1fc60:	065b      	lsls	r3, r3, #25
   1fc62:	d507      	bpl.n	1fc74 <bt_smp_pkey_ready+0x38>
		err = smp_public_key_periph(smp);
   1fc64:	4620      	mov	r0, r4
   1fc66:	f7ff f86d 	bl	1ed44 <smp_public_key_periph>
		if (err) {
   1fc6a:	4601      	mov	r1, r0
   1fc6c:	b110      	cbz	r0, 1fc74 <bt_smp_pkey_ready+0x38>
			smp_error(smp, err);
   1fc6e:	4620      	mov	r0, r4
   1fc70:	f7ff fee2 	bl	1fa38 <smp_error>
}
   1fc74:	bd10      	pop	{r4, pc}
   1fc76:	bf00      	nop
   1fc78:	20003c30 	.word	0x20003c30
   1fc7c:	200025bc 	.word	0x200025bc
   1fc80:	20000cec 	.word	0x20000cec

0001fc84 <smp_ident_addr_info>:
{
   1fc84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fc88:	b086      	sub	sp, #24
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1fc8a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1fc8e:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_conn *conn = smp->chan.chan.conn;
   1fc92:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1fc96:	f023 0302 	bic.w	r3, r3, #2
   1fc9a:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1fc9e:	f898 3000 	ldrb.w	r3, [r8]
{
   1fca2:	af00      	add	r7, sp, #0
   1fca4:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1fca6:	f105 0988 	add.w	r9, r5, #136	; 0x88
   1fcaa:	b3ab      	cbz	r3, 1fd18 <smp_ident_addr_info+0x94>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1fcac:	f898 3006 	ldrb.w	r3, [r8, #6]
   1fcb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fcb4:	2bc0      	cmp	r3, #192	; 0xc0
   1fcb6:	d02f      	beq.n	1fd18 <smp_ident_addr_info+0x94>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1fcb8:	4640      	mov	r0, r8
   1fcba:	f7f7 ff0d 	bl	17ad8 <bt_addr_le_str>
   1fcbe:	466e      	mov	r6, sp
   1fcc0:	b088      	sub	sp, #32
   1fcc2:	466c      	mov	r4, sp
   1fcc4:	4b58      	ldr	r3, [pc, #352]	; (1fe28 <smp_ident_addr_info+0x1a4>)
   1fcc6:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1fe2c <smp_ident_addr_info+0x1a8>
   1fcca:	4625      	mov	r5, r4
   1fccc:	f44f 7a00 	mov.w	sl, #512	; 0x200
   1fcd0:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1fcd4:	f8a4 a01c 	strh.w	sl, [r4, #28]
   1fcd8:	f845 8f10 	str.w	r8, [r5, #16]!
   1fcdc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1fce0:	462a      	mov	r2, r5
   1fce2:	4853      	ldr	r0, [pc, #332]	; (1fe30 <smp_ident_addr_info+0x1ac>)
   1fce4:	f00e f93a 	bl	2df5c <z_log_msg_static_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1fce8:	4648      	mov	r0, r9
   1fcea:	46b5      	mov	sp, r6
   1fcec:	f7f7 fef4 	bl	17ad8 <bt_addr_le_str>
   1fcf0:	46a5      	mov	sp, r4
   1fcf2:	4b50      	ldr	r3, [pc, #320]	; (1fe34 <smp_ident_addr_info+0x1b0>)
   1fcf4:	f8a4 a01c 	strh.w	sl, [r4, #28]
   1fcf8:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1fcfc:	f8c4 8010 	str.w	r8, [r4, #16]
   1fd00:	484b      	ldr	r0, [pc, #300]	; (1fe30 <smp_ident_addr_info+0x1ac>)
   1fd02:	462a      	mov	r2, r5
   1fd04:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1fd08:	f00e f928 	bl	2df5c <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1fd0c:	200a      	movs	r0, #10
   1fd0e:	46b5      	mov	sp, r6
}
   1fd10:	3718      	adds	r7, #24
   1fd12:	46bd      	mov	sp, r7
   1fd14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   1fd18:	2207      	movs	r2, #7
   1fd1a:	4641      	mov	r1, r8
   1fd1c:	4648      	mov	r0, r9
   1fd1e:	f00c fab7 	bl	2c290 <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1fd22:	b168      	cbz	r0, 1fd40 <smp_ident_addr_info+0xbc>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1fd24:	7a28      	ldrb	r0, [r5, #8]
   1fd26:	4641      	mov	r1, r8
   1fd28:	f000 fc56 	bl	205d8 <bt_keys_find_addr>
		if (keys) {
   1fd2c:	4606      	mov	r6, r0
   1fd2e:	b138      	cbz	r0, 1fd40 <smp_ident_addr_info+0xbc>
			if (!update_keys_check(smp, keys)) {
   1fd30:	4601      	mov	r1, r0
   1fd32:	4620      	mov	r0, r4
   1fd34:	f00e f8e0 	bl	2def8 <update_keys_check>
   1fd38:	b320      	cbz	r0, 1fd84 <smp_ident_addr_info+0x100>
			bt_keys_clear(keys);
   1fd3a:	4630      	mov	r0, r6
   1fd3c:	f000 fc6a 	bl	20614 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1fd40:	210d      	movs	r1, #13
   1fd42:	1d20      	adds	r0, r4, #4
   1fd44:	f00e f8cf 	bl	2dee6 <atomic_test_bit>
   1fd48:	2800      	cmp	r0, #0
   1fd4a:	d05c      	beq.n	1fe06 <smp_ident_addr_info+0x182>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1fd4c:	7a29      	ldrb	r1, [r5, #8]
   1fd4e:	464a      	mov	r2, r9
   1fd50:	2002      	movs	r0, #2
   1fd52:	f00e fbba 	bl	2e4ca <bt_keys_get_type>
		if (!keys) {
   1fd56:	4606      	mov	r6, r0
   1fd58:	b9b0      	cbnz	r0, 1fd88 <smp_ident_addr_info+0x104>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1fd5a:	4648      	mov	r0, r9
   1fd5c:	f7f7 febc 	bl	17ad8 <bt_addr_le_str>
   1fd60:	466c      	mov	r4, sp
   1fd62:	b088      	sub	sp, #32
   1fd64:	466a      	mov	r2, sp
   1fd66:	4b34      	ldr	r3, [pc, #208]	; (1fe38 <smp_ident_addr_info+0x1b4>)
   1fd68:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1fd6c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1fd70:	8393      	strh	r3, [r2, #28]
   1fd72:	4b2e      	ldr	r3, [pc, #184]	; (1fe2c <smp_ident_addr_info+0x1a8>)
   1fd74:	f842 3f10 	str.w	r3, [r2, #16]!
   1fd78:	482d      	ldr	r0, [pc, #180]	; (1fe30 <smp_ident_addr_info+0x1ac>)
   1fd7a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1fd7e:	f00e f8ed 	bl	2df5c <z_log_msg_static_create.constprop.0>
   1fd82:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   1fd84:	2008      	movs	r0, #8
   1fd86:	e7c3      	b.n	1fd10 <smp_ident_addr_info+0x8c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1fd88:	78eb      	ldrb	r3, [r5, #3]
   1fd8a:	bbb3      	cbnz	r3, 1fdfa <smp_ident_addr_info+0x176>
			dst = &conn->le.resp_addr;
   1fd8c:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1fd90:	780b      	ldrb	r3, [r1, #0]
   1fd92:	2b01      	cmp	r3, #1
   1fd94:	d120      	bne.n	1fdd8 <smp_ident_addr_info+0x154>
		if (bt_addr_le_is_rpa(dst)) {
   1fd96:	798b      	ldrb	r3, [r1, #6]
   1fd98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fd9c:	2b40      	cmp	r3, #64	; 0x40
   1fd9e:	d11b      	bne.n	1fdd8 <smp_ident_addr_info+0x154>
	memcpy(dst, src, sizeof(*dst));
   1fda0:	2206      	movs	r2, #6
   1fda2:	3101      	adds	r1, #1
   1fda4:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1fda8:	f00c fa99 	bl	2c2de <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1fdac:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   1fdb0:	b193      	cbz	r3, 1fdd8 <smp_ident_addr_info+0x154>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1fdb2:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1fdb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fdba:	2bc0      	cmp	r3, #192	; 0xc0
   1fdbc:	d00c      	beq.n	1fdd8 <smp_ident_addr_info+0x154>
	memcpy(dst, src, sizeof(*dst));
   1fdbe:	2207      	movs	r2, #7
   1fdc0:	4641      	mov	r1, r8
   1fdc2:	1c70      	adds	r0, r6, #1
   1fdc4:	f00c fa8b 	bl	2c2de <memcpy>
   1fdc8:	2207      	movs	r2, #7
   1fdca:	4641      	mov	r1, r8
   1fdcc:	4648      	mov	r0, r9
   1fdce:	f00c fa86 	bl	2c2de <memcpy>
				bt_conn_identity_resolved(conn);
   1fdd2:	4628      	mov	r0, r5
   1fdd4:	f7fb fc1a 	bl	1b60c <bt_conn_identity_resolved>
	conflict = bt_id_find_conflict(new_bond);
   1fdd8:	4630      	mov	r0, r6
   1fdda:	f7fa f897 	bl	19f0c <bt_id_find_conflict>
	if (conflict && !IS_ENABLED(CONFIG_BT_ID_UNPAIR_MATCHING_BONDS)) {
   1fdde:	b178      	cbz	r0, 1fe00 <smp_ident_addr_info+0x17c>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1fde0:	4b16      	ldr	r3, [pc, #88]	; (1fe3c <smp_ident_addr_info+0x1b8>)
   1fde2:	4813      	ldr	r0, [pc, #76]	; (1fe30 <smp_ident_addr_info+0x1ac>)
   1fde4:	617b      	str	r3, [r7, #20]
   1fde6:	f107 0210 	add.w	r2, r7, #16
   1fdea:	2302      	movs	r3, #2
   1fdec:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1fdf0:	613b      	str	r3, [r7, #16]
   1fdf2:	f00e f8b3 	bl	2df5c <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1fdf6:	2003      	movs	r0, #3
   1fdf8:	e78a      	b.n	1fd10 <smp_ident_addr_info+0x8c>
			dst = &conn->le.init_addr;
   1fdfa:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   1fdfe:	e7c7      	b.n	1fd90 <smp_ident_addr_info+0x10c>
	bt_id_add(new_bond);
   1fe00:	4630      	mov	r0, r6
   1fe02:	f7fa f893 	bl	19f2c <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1fe06:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1fe0a:	075b      	lsls	r3, r3, #29
   1fe0c:	d503      	bpl.n	1fe16 <smp_ident_addr_info+0x192>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fe0e:	210a      	movs	r1, #10
   1fe10:	4620      	mov	r0, r4
   1fe12:	f00e f8b1 	bl	2df78 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1fe16:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1fe1a:	b109      	cbz	r1, 1fe20 <smp_ident_addr_info+0x19c>
	return 0;
   1fe1c:	2000      	movs	r0, #0
   1fe1e:	e777      	b.n	1fd10 <smp_ident_addr_info+0x8c>
		smp_pairing_complete(smp, 0);
   1fe20:	4620      	mov	r0, r4
   1fe22:	f7ff fd6d 	bl	1f900 <smp_pairing_complete>
   1fe26:	e7f9      	b.n	1fe1c <smp_ident_addr_info+0x198>
   1fe28:	000335f2 	.word	0x000335f2
   1fe2c:	01000003 	.word	0x01000003
   1fe30:	000302fc 	.word	0x000302fc
   1fe34:	00033670 	.word	0x00033670
   1fe38:	000333bf 	.word	0x000333bf
   1fe3c:	00033606 	.word	0x00033606

0001fe40 <smp_central_ident>:
{
   1fe40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe44:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1fe46:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1fe4a:	af00      	add	r7, sp, #0
   1fe4c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1fe4e:	210d      	movs	r1, #13
   1fe50:	3004      	adds	r0, #4
   1fe52:	f00e f848 	bl	2dee6 <atomic_test_bit>
   1fe56:	b368      	cbz	r0, 1feb4 <smp_central_ident+0x74>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1fe58:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1fe5c:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1fe5e:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1fe60:	4642      	mov	r2, r8
   1fe62:	2004      	movs	r0, #4
   1fe64:	f00e fb31 	bl	2e4ca <bt_keys_get_type>
		if (!keys) {
   1fe68:	4605      	mov	r5, r0
   1fe6a:	b9c0      	cbnz	r0, 1fe9e <smp_central_ident+0x5e>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1fe6c:	4640      	mov	r0, r8
   1fe6e:	f7f7 fe33 	bl	17ad8 <bt_addr_le_str>
   1fe72:	466c      	mov	r4, sp
   1fe74:	b088      	sub	sp, #32
   1fe76:	466a      	mov	r2, sp
   1fe78:	4b1b      	ldr	r3, [pc, #108]	; (1fee8 <smp_central_ident+0xa8>)
   1fe7a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1fe7e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1fe82:	8393      	strh	r3, [r2, #28]
   1fe84:	4b19      	ldr	r3, [pc, #100]	; (1feec <smp_central_ident+0xac>)
   1fe86:	481a      	ldr	r0, [pc, #104]	; (1fef0 <smp_central_ident+0xb0>)
   1fe88:	f842 3f10 	str.w	r3, [r2, #16]!
   1fe8c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1fe90:	f00e f864 	bl	2df5c <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1fe94:	2008      	movs	r0, #8
   1fe96:	46a5      	mov	sp, r4
}
   1fe98:	46bd      	mov	sp, r7
   1fe9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1fe9e:	2202      	movs	r2, #2
   1fea0:	4631      	mov	r1, r6
   1fea2:	3018      	adds	r0, #24
   1fea4:	f00c fa1b 	bl	2c2de <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1fea8:	2208      	movs	r2, #8
   1feaa:	1cb1      	adds	r1, r6, #2
   1feac:	f105 0010 	add.w	r0, r5, #16
   1feb0:	f00c fa15 	bl	2c2de <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1feb4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1feb8:	f023 0201 	bic.w	r2, r3, #1
   1febc:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1fec0:	079a      	lsls	r2, r3, #30
   1fec2:	d508      	bpl.n	1fed6 <smp_central_ident+0x96>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1fec4:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fec6:	4620      	mov	r0, r4
   1fec8:	f00e f856 	bl	2df78 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1fecc:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1fed0:	b129      	cbz	r1, 1fede <smp_central_ident+0x9e>
	return 0;
   1fed2:	2000      	movs	r0, #0
   1fed4:	e7e0      	b.n	1fe98 <smp_central_ident+0x58>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1fed6:	075b      	lsls	r3, r3, #29
   1fed8:	d5f8      	bpl.n	1fecc <smp_central_ident+0x8c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1feda:	210a      	movs	r1, #10
   1fedc:	e7f3      	b.n	1fec6 <smp_central_ident+0x86>
		smp_pairing_complete(smp, 0);
   1fede:	4620      	mov	r0, r4
   1fee0:	f7ff fd0e 	bl	1f900 <smp_pairing_complete>
   1fee4:	e7f5      	b.n	1fed2 <smp_central_ident+0x92>
   1fee6:	bf00      	nop
   1fee8:	000333bf 	.word	0x000333bf
   1feec:	01000003 	.word	0x01000003
   1fef0:	000302fc 	.word	0x000302fc

0001fef4 <smp_pairing_failed>:
{
   1fef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fef8:	460e      	mov	r6, r1
   1fefa:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1fefc:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1ff00:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ff02:	f7fe fd2d 	bl	1e960 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1ff06:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1ff08:	46e9      	mov	r9, sp
   1ff0a:	b088      	sub	sp, #32
   1ff0c:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ff0e:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1ff10:	466a      	mov	r2, sp
   1ff12:	4914      	ldr	r1, [pc, #80]	; (1ff64 <smp_pairing_failed+0x70>)
   1ff14:	4814      	ldr	r0, [pc, #80]	; (1ff68 <smp_pairing_failed+0x74>)
   1ff16:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ff1a:	2303      	movs	r3, #3
   1ff1c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ff20:	f842 3f10 	str.w	r3, [r2, #16]!
   1ff24:	f00e f81a 	bl	2df5c <z_log_msg_static_create.constprop.0>
   1ff28:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ff2a:	f104 0904 	add.w	r9, r4, #4
   1ff2e:	210a      	movs	r1, #10
   1ff30:	4648      	mov	r0, r9
   1ff32:	f00e f8b1 	bl	2e098 <atomic_test_and_clear_bit>
   1ff36:	b140      	cbz	r0, 1ff4a <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1ff38:	b975      	cbnz	r5, 1ff58 <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   1ff3a:	4620      	mov	r0, r4
   1ff3c:	7831      	ldrb	r1, [r6, #0]
   1ff3e:	f7ff fcdf 	bl	1f900 <smp_pairing_complete>
}
   1ff42:	2000      	movs	r0, #0
   1ff44:	46bd      	mov	sp, r7
   1ff46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1ff4a:	210b      	movs	r1, #11
   1ff4c:	4648      	mov	r0, r9
   1ff4e:	f00e f8a3 	bl	2e098 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ff52:	2800      	cmp	r0, #0
   1ff54:	d1f0      	bne.n	1ff38 <smp_pairing_failed+0x44>
   1ff56:	e7f0      	b.n	1ff3a <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1ff58:	692b      	ldr	r3, [r5, #16]
   1ff5a:	2b00      	cmp	r3, #0
   1ff5c:	d0ed      	beq.n	1ff3a <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   1ff5e:	4640      	mov	r0, r8
   1ff60:	4798      	blx	r3
   1ff62:	e7ea      	b.n	1ff3a <smp_pairing_failed+0x46>
   1ff64:	00033641 	.word	0x00033641
   1ff68:	000302fc 	.word	0x000302fc

0001ff6c <bt_smp_encrypt_change>:
{
   1ff6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
   1ff70:	4604      	mov	r4, r0
{
   1ff72:	b091      	sub	sp, #68	; 0x44
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ff74:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1ff78:	4605      	mov	r5, r0
   1ff7a:	af00      	add	r7, sp, #0
   1ff7c:	4688      	mov	r8, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ff7e:	4630      	mov	r0, r6
   1ff80:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1ff82:	f854 99ec 	ldr.w	r9, [r4], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ff86:	f00e f887 	bl	2e098 <atomic_test_and_clear_bit>
   1ff8a:	b328      	cbz	r0, 1ffd8 <bt_smp_encrypt_change+0x6c>
	if (hci_status) {
   1ff8c:	f1b8 0f00 	cmp.w	r8, #0
   1ff90:	d017      	beq.n	1ffc2 <bt_smp_encrypt_change+0x56>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ff92:	2103      	movs	r1, #3
   1ff94:	4630      	mov	r0, r6
   1ff96:	f00d ffa6 	bl	2dee6 <atomic_test_bit>
   1ff9a:	b1e8      	cbz	r0, 1ffd8 <bt_smp_encrypt_change+0x6c>
			uint8_t smp_err = smp_err_get(
   1ff9c:	4640      	mov	r0, r8
   1ff9e:	f7f8 ffb9 	bl	18f14 <bt_security_err_get>
	switch (auth_err) {
   1ffa2:	3801      	subs	r0, #1
   1ffa4:	b2c0      	uxtb	r0, r0
   1ffa6:	2808      	cmp	r0, #8
   1ffa8:	bf9a      	itte	ls
   1ffaa:	4b99      	ldrls	r3, [pc, #612]	; (20210 <bt_smp_encrypt_change+0x2a4>)
   1ffac:	5c1d      	ldrbls	r5, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1ffae:	2500      	movhi	r5, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1ffb0:	2102      	movs	r1, #2
   1ffb2:	4630      	mov	r0, r6
   1ffb4:	f00d ffe0 	bl	2df78 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1ffb8:	4629      	mov	r1, r5
		smp_pairing_complete(smp, 0);
   1ffba:	4620      	mov	r0, r4
   1ffbc:	f7ff fca0 	bl	1f900 <smp_pairing_complete>
   1ffc0:	e00a      	b.n	1ffd8 <bt_smp_encrypt_change+0x6c>
	if (!conn->encrypt) {
   1ffc2:	f899 300b 	ldrb.w	r3, [r9, #11]
   1ffc6:	b13b      	cbz	r3, 1ffd8 <bt_smp_encrypt_change+0x6c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ffc8:	2103      	movs	r1, #3
   1ffca:	4630      	mov	r0, r6
   1ffcc:	f00d ff8b 	bl	2dee6 <atomic_test_bit>
   1ffd0:	b930      	cbnz	r0, 1ffe0 <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
   1ffd2:	4620      	mov	r0, r4
   1ffd4:	f00e f876 	bl	2e0c4 <smp_reset>
}
   1ffd8:	3744      	adds	r7, #68	; 0x44
   1ffda:	46bd      	mov	sp, r7
   1ffdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ffe0:	2105      	movs	r1, #5
   1ffe2:	4630      	mov	r0, r6
   1ffe4:	f00d ff7f 	bl	2dee6 <atomic_test_bit>
   1ffe8:	b1b8      	cbz	r0, 2001a <bt_smp_encrypt_change+0xae>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1ffea:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1ffee:	0718      	lsls	r0, r3, #28
   1fff0:	d507      	bpl.n	20002 <bt_smp_encrypt_change+0x96>
   1fff2:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1fff6:	0719      	lsls	r1, r3, #28
   1fff8:	d503      	bpl.n	20002 <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1fffa:	2111      	movs	r1, #17
   1fffc:	4630      	mov	r0, r6
   1fffe:	f00d ffbb 	bl	2df78 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   20002:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   20006:	f023 0308 	bic.w	r3, r3, #8
   2000a:	f805 3c04 	strb.w	r3, [r5, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   2000e:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   20012:	f023 0308 	bic.w	r3, r3, #8
   20016:	f805 3c03 	strb.w	r3, [r5, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   2001a:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   2001e:	07da      	lsls	r2, r3, #31
   20020:	d523      	bpl.n	2006a <bt_smp_encrypt_change+0xfe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   20022:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   20024:	4620      	mov	r0, r4
   20026:	f00d ffa7 	bl	2df78 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   2002a:	2102      	movs	r1, #2
   2002c:	4630      	mov	r0, r6
   2002e:	f00d ffa3 	bl	2df78 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   20032:	f8d5 9000 	ldr.w	r9, [r5]
	if (!keys) {
   20036:	f8d9 30b8 	ldr.w	r3, [r9, #184]	; 0xb8
   2003a:	b9f3      	cbnz	r3, 2007a <bt_smp_encrypt_change+0x10e>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   2003c:	f109 0088 	add.w	r0, r9, #136	; 0x88
   20040:	f7f7 fd4a 	bl	17ad8 <bt_addr_le_str>
   20044:	466c      	mov	r4, sp
   20046:	b088      	sub	sp, #32
   20048:	466a      	mov	r2, sp
   2004a:	4b72      	ldr	r3, [pc, #456]	; (20214 <bt_smp_encrypt_change+0x2a8>)
   2004c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20050:	f44f 7300 	mov.w	r3, #512	; 0x200
   20054:	8393      	strh	r3, [r2, #28]
   20056:	4b70      	ldr	r3, [pc, #448]	; (20218 <bt_smp_encrypt_change+0x2ac>)
   20058:	f842 3f10 	str.w	r3, [r2, #16]!
   2005c:	486f      	ldr	r0, [pc, #444]	; (2021c <bt_smp_encrypt_change+0x2b0>)
   2005e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   20062:	f00d ff7b 	bl	2df5c <z_log_msg_static_create.constprop.0>
   20066:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   20068:	e7b6      	b.n	1ffd8 <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   2006a:	0798      	lsls	r0, r3, #30
   2006c:	d501      	bpl.n	20072 <bt_smp_encrypt_change+0x106>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   2006e:	2108      	movs	r1, #8
   20070:	e7d8      	b.n	20024 <bt_smp_encrypt_change+0xb8>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   20072:	0759      	lsls	r1, r3, #29
   20074:	d5d9      	bpl.n	2002a <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   20076:	210a      	movs	r1, #10
   20078:	e7d4      	b.n	20024 <bt_smp_encrypt_change+0xb8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2007a:	2105      	movs	r1, #5
   2007c:	f00d ff33 	bl	2dee6 <atomic_test_bit>
   20080:	b9c0      	cbnz	r0, 200b4 <bt_smp_encrypt_change+0x148>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   20082:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   20086:	07da      	lsls	r2, r3, #31
   20088:	d514      	bpl.n	200b4 <bt_smp_encrypt_change+0x148>
	struct bt_keys *keys = conn->le.keys;
   2008a:	682b      	ldr	r3, [r5, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   2008c:	211a      	movs	r1, #26
   2008e:	f107 0020 	add.w	r0, r7, #32
	struct bt_keys *keys = conn->le.keys;
   20092:	f8d3 80b8 	ldr.w	r8, [r3, #184]	; 0xb8
		if (bt_rand((void *)&rand, sizeof(rand))) {
   20096:	f003 fd4b 	bl	23b30 <bt_rand>
   2009a:	4683      	mov	fp, r0
   2009c:	b310      	cbz	r0, 200e4 <bt_smp_encrypt_change+0x178>
			LOG_ERR("Unable to get random bytes");
   2009e:	4b60      	ldr	r3, [pc, #384]	; (20220 <bt_smp_encrypt_change+0x2b4>)
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   200a0:	61fb      	str	r3, [r7, #28]
   200a2:	2302      	movs	r3, #2
   200a4:	485d      	ldr	r0, [pc, #372]	; (2021c <bt_smp_encrypt_change+0x2b0>)
   200a6:	61bb      	str	r3, [r7, #24]
   200a8:	f107 0218 	add.w	r2, r7, #24
   200ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   200b0:	f00d ff54 	bl	2df5c <z_log_msg_static_create.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   200b4:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   200b8:	079b      	lsls	r3, r3, #30
   200ba:	f140 80a2 	bpl.w	20202 <bt_smp_encrypt_change+0x296>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   200be:	2108      	movs	r1, #8
   200c0:	4620      	mov	r0, r4
   200c2:	f00d ff6d 	bl	2dfa0 <smp_create_pdu.constprop.0>
		if (!buf) {
   200c6:	4606      	mov	r6, r0
   200c8:	2800      	cmp	r0, #0
   200ca:	d16c      	bne.n	201a6 <bt_smp_encrypt_change+0x23a>
			LOG_ERR("Unable to allocate Ident Info buffer");
   200cc:	4b55      	ldr	r3, [pc, #340]	; (20224 <bt_smp_encrypt_change+0x2b8>)
			LOG_ERR("Unable to allocate Ident Addr Info buffer");
   200ce:	637b      	str	r3, [r7, #52]	; 0x34
   200d0:	2302      	movs	r3, #2
   200d2:	4852      	ldr	r0, [pc, #328]	; (2021c <bt_smp_encrypt_change+0x2b0>)
   200d4:	633b      	str	r3, [r7, #48]	; 0x30
   200d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   200da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   200de:	f00d ff3d 	bl	2df5c <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   200e2:	e779      	b.n	1ffd8 <bt_smp_encrypt_change+0x6c>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   200e4:	2106      	movs	r1, #6
   200e6:	4620      	mov	r0, r4
   200e8:	f00d ff5a 	bl	2dfa0 <smp_create_pdu.constprop.0>
		if (!buf) {
   200ec:	4682      	mov	sl, r0
   200ee:	b908      	cbnz	r0, 200f4 <bt_smp_encrypt_change+0x188>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   200f0:	4b4d      	ldr	r3, [pc, #308]	; (20228 <bt_smp_encrypt_change+0x2bc>)
   200f2:	e7d5      	b.n	200a0 <bt_smp_encrypt_change+0x134>
	return net_buf_simple_add(&buf->b, len);
   200f4:	2110      	movs	r1, #16
   200f6:	300c      	adds	r0, #12
   200f8:	f00e fb03 	bl	2e702 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   200fc:	f898 200c 	ldrb.w	r2, [r8, #12]
   20100:	6078      	str	r0, [r7, #4]
   20102:	f107 0120 	add.w	r1, r7, #32
   20106:	f00c f8ea 	bl	2c2de <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   2010a:	f898 000c 	ldrb.w	r0, [r8, #12]
   2010e:	687b      	ldr	r3, [r7, #4]
   20110:	280f      	cmp	r0, #15
   20112:	d805      	bhi.n	20120 <bt_smp_encrypt_change+0x1b4>
			(void)memset(info->ltk + keys->enc_size, 0,
   20114:	f1c0 0210 	rsb	r2, r0, #16
   20118:	4659      	mov	r1, fp
   2011a:	4418      	add	r0, r3
   2011c:	f00c f8ea 	bl	2c2f4 <memset>
		smp_send(smp, buf, NULL, NULL);
   20120:	4651      	mov	r1, sl
   20122:	2200      	movs	r2, #0
   20124:	4620      	mov	r0, r4
   20126:	f7fe fc7d 	bl	1ea24 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   2012a:	2107      	movs	r1, #7
   2012c:	4620      	mov	r0, r4
   2012e:	f00d ff37 	bl	2dfa0 <smp_create_pdu.constprop.0>
		if (!buf) {
   20132:	4682      	mov	sl, r0
   20134:	b908      	cbnz	r0, 2013a <bt_smp_encrypt_change+0x1ce>
			LOG_ERR("Unable to allocate Central Ident buffer");
   20136:	4b3d      	ldr	r3, [pc, #244]	; (2022c <bt_smp_encrypt_change+0x2c0>)
   20138:	e7b2      	b.n	200a0 <bt_smp_encrypt_change+0x134>
   2013a:	210a      	movs	r1, #10
   2013c:	300c      	adds	r0, #12
   2013e:	f00e fae0 	bl	2e702 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   20142:	2208      	movs	r2, #8
   20144:	4683      	mov	fp, r0
   20146:	f107 0130 	add.w	r1, r7, #48	; 0x30
   2014a:	3002      	adds	r0, #2
   2014c:	f00c f8c7 	bl	2c2de <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   20150:	2202      	movs	r2, #2
   20152:	f107 0138 	add.w	r1, r7, #56	; 0x38
   20156:	4658      	mov	r0, fp
   20158:	f00c f8c1 	bl	2c2de <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   2015c:	4651      	mov	r1, sl
   2015e:	4620      	mov	r0, r4
   20160:	4a33      	ldr	r2, [pc, #204]	; (20230 <bt_smp_encrypt_change+0x2c4>)
   20162:	f7fe fc5f 	bl	1ea24 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   20166:	210d      	movs	r1, #13
   20168:	4630      	mov	r0, r6
   2016a:	f00d febc 	bl	2dee6 <atomic_test_bit>
   2016e:	2800      	cmp	r0, #0
   20170:	d0a0      	beq.n	200b4 <bt_smp_encrypt_change+0x148>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   20172:	4640      	mov	r0, r8
   20174:	2101      	movs	r1, #1
   20176:	f00e f9b8 	bl	2e4ea <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   2017a:	f107 0120 	add.w	r1, r7, #32
   2017e:	2210      	movs	r2, #16
   20180:	f108 004a 	add.w	r0, r8, #74	; 0x4a
   20184:	f00c f8ab 	bl	2c2de <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   20188:	f107 0130 	add.w	r1, r7, #48	; 0x30
   2018c:	2208      	movs	r2, #8
   2018e:	f108 0040 	add.w	r0, r8, #64	; 0x40
   20192:	f00c f8a4 	bl	2c2de <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   20196:	2202      	movs	r2, #2
   20198:	f107 0138 	add.w	r1, r7, #56	; 0x38
   2019c:	f108 0048 	add.w	r0, r8, #72	; 0x48
   201a0:	f00c f89d 	bl	2c2de <memcpy>
   201a4:	e786      	b.n	200b4 <bt_smp_encrypt_change+0x148>
   201a6:	2110      	movs	r1, #16
   201a8:	300c      	adds	r0, #12
   201aa:	f00e faaa 	bl	2e702 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   201ae:	f899 1008 	ldrb.w	r1, [r9, #8]
   201b2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 20234 <bt_smp_encrypt_change+0x2c8>
   201b6:	f44f 73b4 	mov.w	r3, #360	; 0x168
   201ba:	2210      	movs	r2, #16
   201bc:	fb12 3101 	smlabb	r1, r2, r1, r3
   201c0:	4441      	add	r1, r8
   201c2:	f00c f88c 	bl	2c2de <memcpy>
		smp_send(smp, buf, NULL, NULL);
   201c6:	4631      	mov	r1, r6
   201c8:	2200      	movs	r2, #0
   201ca:	4620      	mov	r0, r4
   201cc:	f7fe fc2a 	bl	1ea24 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   201d0:	2109      	movs	r1, #9
   201d2:	4620      	mov	r0, r4
   201d4:	f00d fee4 	bl	2dfa0 <smp_create_pdu.constprop.0>
		if (!buf) {
   201d8:	4606      	mov	r6, r0
   201da:	b908      	cbnz	r0, 201e0 <bt_smp_encrypt_change+0x274>
			LOG_ERR("Unable to allocate Ident Addr Info buffer");
   201dc:	4b16      	ldr	r3, [pc, #88]	; (20238 <bt_smp_encrypt_change+0x2cc>)
   201de:	e776      	b.n	200ce <bt_smp_encrypt_change+0x162>
   201e0:	2107      	movs	r1, #7
   201e2:	300c      	adds	r0, #12
   201e4:	f00e fa8d 	bl	2e702 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   201e8:	f899 1008 	ldrb.w	r1, [r9, #8]
   201ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   201f0:	2207      	movs	r2, #7
   201f2:	4441      	add	r1, r8
   201f4:	f00c f873 	bl	2c2de <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   201f8:	4a10      	ldr	r2, [pc, #64]	; (2023c <bt_smp_encrypt_change+0x2d0>)
   201fa:	4631      	mov	r1, r6
   201fc:	4620      	mov	r0, r4
   201fe:	f7fe fc11 	bl	1ea24 <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   20202:	f835 1c04 	ldrh.w	r1, [r5, #-4]
   20206:	2900      	cmp	r1, #0
   20208:	f47f aee6 	bne.w	1ffd8 <bt_smp_encrypt_change+0x6c>
   2020c:	e6d5      	b.n	1ffba <bt_smp_encrypt_change+0x4e>
   2020e:	bf00      	nop
   20210:	00033745 	.word	0x00033745
   20214:	00033663 	.word	0x00033663
   20218:	01000003 	.word	0x01000003
   2021c:	000302fc 	.word	0x000302fc
   20220:	00033678 	.word	0x00033678
   20224:	000336e2 	.word	0x000336e2
   20228:	00033693 	.word	0x00033693
   2022c:	000336ba 	.word	0x000336ba
   20230:	0002e445 	.word	0x0002e445
   20234:	200004f0 	.word	0x200004f0
   20238:	00033707 	.word	0x00033707
   2023c:	0002e453 	.word	0x0002e453

00020240 <smp_timeout>:
{
   20240:	b510      	push	{r4, lr}
   20242:	4604      	mov	r4, r0
   20244:	b086      	sub	sp, #24
	LOG_ERR("SMP Timeout");
   20246:	4b0b      	ldr	r3, [pc, #44]	; (20274 <smp_timeout+0x34>)
   20248:	9305      	str	r3, [sp, #20]
   2024a:	aa04      	add	r2, sp, #16
   2024c:	2302      	movs	r3, #2
   2024e:	480a      	ldr	r0, [pc, #40]	; (20278 <smp_timeout+0x38>)
   20250:	9304      	str	r3, [sp, #16]
   20252:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20256:	f00d fe81 	bl	2df5c <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2025a:	f5a4 7090 	sub.w	r0, r4, #288	; 0x120
   2025e:	2108      	movs	r1, #8
   20260:	f7ff fb4e 	bl	1f900 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   20264:	2104      	movs	r1, #4
   20266:	f5a4 708e 	sub.w	r0, r4, #284	; 0x11c
}
   2026a:	b006      	add	sp, #24
   2026c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   20270:	f00d be82 	b.w	2df78 <atomic_set_bit>
   20274:	00033731 	.word	0x00033731
   20278:	000302fc 	.word	0x000302fc

0002027c <bt_smp_update_keys>:
{
   2027c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20280:	af00      	add	r7, sp, #0
   20282:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   20284:	f00d fe6d 	bl	2df62 <smp_chan_get>
	if (!smp) {
   20288:	4605      	mov	r5, r0
   2028a:	b360      	cbz	r0, 202e6 <bt_smp_update_keys+0x6a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2028c:	1d06      	adds	r6, r0, #4
   2028e:	2103      	movs	r1, #3
   20290:	4630      	mov	r0, r6
   20292:	f00d fe28 	bl	2dee6 <atomic_test_bit>
   20296:	b330      	cbz	r0, 202e6 <bt_smp_update_keys+0x6a>
	if (conn->le.keys) {
   20298:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   2029c:	b108      	cbz	r0, 202a2 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   2029e:	f000 f9b9 	bl	20614 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   202a2:	f104 0888 	add.w	r8, r4, #136	; 0x88
   202a6:	7a20      	ldrb	r0, [r4, #8]
   202a8:	4641      	mov	r1, r8
   202aa:	f000 f89d 	bl	203e8 <bt_keys_get_addr>
   202ae:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys) {
   202b2:	b9d8      	cbnz	r0, 202ec <bt_smp_update_keys+0x70>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   202b4:	4640      	mov	r0, r8
   202b6:	f7f7 fc0f 	bl	17ad8 <bt_addr_le_str>
   202ba:	466c      	mov	r4, sp
   202bc:	b088      	sub	sp, #32
   202be:	466a      	mov	r2, sp
   202c0:	4b3b      	ldr	r3, [pc, #236]	; (203b0 <bt_smp_update_keys+0x134>)
   202c2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   202c6:	f44f 7300 	mov.w	r3, #512	; 0x200
   202ca:	8393      	strh	r3, [r2, #28]
   202cc:	4b39      	ldr	r3, [pc, #228]	; (203b4 <bt_smp_update_keys+0x138>)
   202ce:	483a      	ldr	r0, [pc, #232]	; (203b8 <bt_smp_update_keys+0x13c>)
   202d0:	f842 3f10 	str.w	r3, [r2, #16]!
   202d4:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   202d8:	f00d fe40 	bl	2df5c <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   202dc:	2108      	movs	r1, #8
   202de:	46a5      	mov	sp, r4
   202e0:	4628      	mov	r0, r5
   202e2:	f7ff fba9 	bl	1fa38 <smp_error>
}
   202e6:	46bd      	mov	sp, r7
   202e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   202ec:	210e      	movs	r1, #14
   202ee:	4630      	mov	r0, r6
   202f0:	f00d fdf9 	bl	2dee6 <atomic_test_bit>
   202f4:	b128      	cbz	r0, 20302 <bt_smp_update_keys+0x86>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   202f6:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   202fa:	7b53      	ldrb	r3, [r2, #13]
   202fc:	f043 0302 	orr.w	r3, r3, #2
   20300:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   20302:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   20304:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
	switch (smp->method) {
   20308:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   2030a:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   2030c:	d83c      	bhi.n	20388 <bt_smp_update_keys+0x10c>
   2030e:	2a00      	cmp	r2, #0
   20310:	d041      	beq.n	20396 <bt_smp_update_keys+0x11a>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   20312:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   20316:	7b53      	ldrb	r3, [r2, #13]
   20318:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   2031c:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   2031e:	7d2b      	ldrb	r3, [r5, #20]
   20320:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   20322:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	return MIN(req->max_key_size, rsp->max_key_size);
   20326:	428b      	cmp	r3, r1
   20328:	bf28      	it	cs
   2032a:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   2032c:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2032e:	2105      	movs	r1, #5
   20330:	4630      	mov	r0, r6
   20332:	f00d fdd8 	bl	2dee6 <atomic_test_bit>
   20336:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
		conn->le.keys->flags |= BT_KEYS_SC;
   2033a:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2033c:	b3a0      	cbz	r0, 203a8 <bt_smp_update_keys+0x12c>
		conn->le.keys->flags |= BT_KEYS_SC;
   2033e:	f042 0210 	orr.w	r2, r2, #16
   20342:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   20344:	210d      	movs	r1, #13
   20346:	4630      	mov	r0, r6
   20348:	f00d fdcd 	bl	2dee6 <atomic_test_bit>
   2034c:	2800      	cmp	r0, #0
   2034e:	d0ca      	beq.n	202e6 <bt_smp_update_keys+0x6a>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   20350:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   20354:	2120      	movs	r1, #32
   20356:	f00e f8c8 	bl	2e4ea <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   2035a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   2035e:	f105 0147 	add.w	r1, r5, #71	; 0x47
   20362:	2210      	movs	r2, #16
   20364:	301a      	adds	r0, #26
   20366:	f00b ffba 	bl	2c2de <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   2036a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   2036e:	2208      	movs	r2, #8
   20370:	2100      	movs	r1, #0
   20372:	3010      	adds	r0, #16
   20374:	f00b ffbe 	bl	2c2f4 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   20378:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   2037c:	2202      	movs	r2, #2
   2037e:	2100      	movs	r1, #0
   20380:	3018      	adds	r0, #24
   20382:	f00b ffb7 	bl	2c2f4 <memset>
   20386:	e7ae      	b.n	202e6 <bt_smp_update_keys+0x6a>
	switch (smp->method) {
   20388:	3a05      	subs	r2, #5
   2038a:	2a01      	cmp	r2, #1
   2038c:	d803      	bhi.n	20396 <bt_smp_update_keys+0x11a>
		conn->le.keys->flags |= BT_KEYS_OOB;
   2038e:	f043 0320 	orr.w	r3, r3, #32
   20392:	734b      	strb	r3, [r1, #13]
   20394:	e7bd      	b.n	20312 <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   20396:	f023 0320 	bic.w	r3, r3, #32
   2039a:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   2039c:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   203a0:	7b53      	ldrb	r3, [r2, #13]
   203a2:	f023 0301 	bic.w	r3, r3, #1
   203a6:	e7b9      	b.n	2031c <bt_smp_update_keys+0xa0>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   203a8:	f022 0210 	bic.w	r2, r2, #16
   203ac:	735a      	strb	r2, [r3, #13]
   203ae:	e79a      	b.n	202e6 <bt_smp_update_keys+0x6a>
   203b0:	000333bf 	.word	0x000333bf
   203b4:	01000003 	.word	0x01000003
   203b8:	000302fc 	.word	0x000302fc

000203bc <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   203bc:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   203be:	4b07      	ldr	r3, [pc, #28]	; (203dc <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   203c0:	4807      	ldr	r0, [pc, #28]	; (203e0 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   203c2:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   203c6:	f003 0306 	and.w	r3, r3, #6
   203ca:	1f9a      	subs	r2, r3, #6
   203cc:	4253      	negs	r3, r2
   203ce:	4153      	adcs	r3, r2
   203d0:	4a04      	ldr	r2, [pc, #16]	; (203e4 <bt_smp_init+0x28>)
   203d2:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   203d4:	f7fa fb4a 	bl	1aa6c <bt_pub_key_gen>
	}

	return smp_self_test();
}
   203d8:	2000      	movs	r0, #0
   203da:	bd08      	pop	{r3, pc}
   203dc:	200004f0 	.word	0x200004f0
   203e0:	20000930 	.word	0x20000930
   203e4:	200056dc 	.word	0x200056dc

000203e8 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   203e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   203ec:	4d1b      	ldr	r5, [pc, #108]	; (2045c <bt_keys_get_addr+0x74>)
   203ee:	4680      	mov	r8, r0
   203f0:	460f      	mov	r7, r1

	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   203f2:	2600      	movs	r6, #0
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   203f4:	2405      	movs	r4, #5
		keys = &key_pool[i];

		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   203f6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   203fa:	4543      	cmp	r3, r8
   203fc:	d01d      	beq.n	2043a <bt_keys_get_addr+0x52>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   203fe:	2c05      	cmp	r4, #5
   20400:	d107      	bne.n	20412 <bt_keys_get_addr+0x2a>
	return memcmp(a, b, sizeof(*a));
   20402:	4917      	ldr	r1, [pc, #92]	; (20460 <bt_keys_get_addr+0x78>)
   20404:	2207      	movs	r2, #7
   20406:	4628      	mov	r0, r5
   20408:	f00b ff42 	bl	2c290 <memcmp>
   2040c:	2800      	cmp	r0, #0
   2040e:	bf08      	it	eq
   20410:	4634      	moveq	r4, r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   20412:	3601      	adds	r6, #1
   20414:	2e05      	cmp	r6, #5
   20416:	f105 055c 	add.w	r5, r5, #92	; 0x5c
   2041a:	d1ec      	bne.n	203f6 <bt_keys_get_addr+0xe>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   2041c:	2c05      	cmp	r4, #5
   2041e:	d01a      	beq.n	20456 <bt_keys_get_addr+0x6e>
		keys = &key_pool[first_free_slot];
   20420:	235c      	movs	r3, #92	; 0x5c
   20422:	435c      	muls	r4, r3
   20424:	480f      	ldr	r0, [pc, #60]	; (20464 <bt_keys_get_addr+0x7c>)
		keys->id = id;
   20426:	f800 8004 	strb.w	r8, [r0, r4]
		keys = &key_pool[first_free_slot];
   2042a:	1825      	adds	r5, r4, r0
		bt_addr_le_copy(&keys->addr, addr);
   2042c:	3401      	adds	r4, #1
	memcpy(dst, src, sizeof(*dst));
   2042e:	2207      	movs	r2, #7
   20430:	4639      	mov	r1, r7
   20432:	4420      	add	r0, r4
   20434:	f00b ff53 	bl	2c2de <memcpy>
}
   20438:	e00a      	b.n	20450 <bt_keys_get_addr+0x68>
	return memcmp(a, b, sizeof(*a));
   2043a:	2207      	movs	r2, #7
   2043c:	4639      	mov	r1, r7
   2043e:	4628      	mov	r0, r5
   20440:	f00b ff26 	bl	2c290 <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   20444:	2800      	cmp	r0, #0
   20446:	d1da      	bne.n	203fe <bt_keys_get_addr+0x16>
		keys = &key_pool[i];
   20448:	4d06      	ldr	r5, [pc, #24]	; (20464 <bt_keys_get_addr+0x7c>)
   2044a:	235c      	movs	r3, #92	; 0x5c
   2044c:	fb03 5506 	mla	r5, r3, r6, r5
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   20450:	4628      	mov	r0, r5
   20452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   20456:	2500      	movs	r5, #0
   20458:	e7fa      	b.n	20450 <bt_keys_get_addr+0x68>
   2045a:	bf00      	nop
   2045c:	20003c35 	.word	0x20003c35
   20460:	00031bf1 	.word	0x00031bf1
   20464:	20003c34 	.word	0x20003c34

00020468 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   20468:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2046c:	4c0d      	ldr	r4, [pc, #52]	; (204a4 <bt_foreach_bond+0x3c>)
   2046e:	4605      	mov	r5, r0
   20470:	460e      	mov	r6, r1
   20472:	4617      	mov	r7, r2
   20474:	f504 78e6 	add.w	r8, r4, #460	; 0x1cc
	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   20478:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   2047c:	b15b      	cbz	r3, 20496 <bt_foreach_bond+0x2e>
   2047e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   20482:	42ab      	cmp	r3, r5
   20484:	d107      	bne.n	20496 <bt_foreach_bond+0x2e>
	memcpy(dst, src, sizeof(*dst));
   20486:	4621      	mov	r1, r4
   20488:	2207      	movs	r2, #7
   2048a:	4668      	mov	r0, sp
   2048c:	f00b ff27 	bl	2c2de <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   20490:	4639      	mov	r1, r7
   20492:	4668      	mov	r0, sp
   20494:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   20496:	345c      	adds	r4, #92	; 0x5c
   20498:	4544      	cmp	r4, r8
   2049a:	d1ed      	bne.n	20478 <bt_foreach_bond+0x10>
		}
	}
}
   2049c:	b002      	add	sp, #8
   2049e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   204a2:	bf00      	nop
   204a4:	20003c35 	.word	0x20003c35

000204a8 <bt_keys_foreach_type>:

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   204a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   204ac:	4c08      	ldr	r4, [pc, #32]	; (204d0 <bt_keys_foreach_type+0x28>)
   204ae:	4605      	mov	r5, r0
   204b0:	460e      	mov	r6, r1
   204b2:	4617      	mov	r7, r2
   204b4:	f504 78e6 	add.w	r8, r4, #460	; 0x1cc
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   204b8:	89e3      	ldrh	r3, [r4, #14]
   204ba:	422b      	tst	r3, r5
   204bc:	d002      	beq.n	204c4 <bt_keys_foreach_type+0x1c>
			func(&key_pool[i], data);
   204be:	4639      	mov	r1, r7
   204c0:	4620      	mov	r0, r4
   204c2:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   204c4:	345c      	adds	r4, #92	; 0x5c
   204c6:	4544      	cmp	r4, r8
   204c8:	d1f6      	bne.n	204b8 <bt_keys_foreach_type+0x10>
		}
	}
}
   204ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   204ce:	bf00      	nop
   204d0:	20003c34 	.word	0x20003c34

000204d4 <keys_commit>:

	bt_id_add(keys);
}

static int keys_commit(void)
{
   204d4:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   204d6:	4903      	ldr	r1, [pc, #12]	; (204e4 <keys_commit+0x10>)
   204d8:	2200      	movs	r2, #0
   204da:	2002      	movs	r0, #2
   204dc:	f7ff ffe4 	bl	204a8 <bt_keys_foreach_type>
	}

	return 0;
}
   204e0:	2000      	movs	r0, #0
   204e2:	bd08      	pop	{r3, pc}
   204e4:	0002e4c7 	.word	0x0002e4c7

000204e8 <bt_keys_find>:
{
   204e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   204ec:	4d0f      	ldr	r5, [pc, #60]	; (2052c <bt_keys_find+0x44>)
   204ee:	4606      	mov	r6, r0
   204f0:	460f      	mov	r7, r1
   204f2:	4690      	mov	r8, r2
   204f4:	2400      	movs	r4, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   204f6:	f8b5 300d 	ldrh.w	r3, [r5, #13]
   204fa:	4233      	tst	r3, r6
   204fc:	d00d      	beq.n	2051a <bt_keys_find+0x32>
   204fe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   20502:	42bb      	cmp	r3, r7
   20504:	d109      	bne.n	2051a <bt_keys_find+0x32>
	return memcmp(a, b, sizeof(*a));
   20506:	2207      	movs	r2, #7
   20508:	4641      	mov	r1, r8
   2050a:	4628      	mov	r0, r5
   2050c:	f00b fec0 	bl	2c290 <memcmp>
   20510:	b918      	cbnz	r0, 2051a <bt_keys_find+0x32>
			return &key_pool[i];
   20512:	4807      	ldr	r0, [pc, #28]	; (20530 <bt_keys_find+0x48>)
   20514:	4420      	add	r0, r4
}
   20516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2051a:	345c      	adds	r4, #92	; 0x5c
   2051c:	f5b4 7fe6 	cmp.w	r4, #460	; 0x1cc
   20520:	f105 055c 	add.w	r5, r5, #92	; 0x5c
   20524:	d1e7      	bne.n	204f6 <bt_keys_find+0xe>
	return NULL;
   20526:	2000      	movs	r0, #0
   20528:	e7f5      	b.n	20516 <bt_keys_find+0x2e>
   2052a:	bf00      	nop
   2052c:	20003c35 	.word	0x20003c35
   20530:	20003c34 	.word	0x20003c34

00020534 <bt_keys_find_irk>:
{
   20534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   20538:	780b      	ldrb	r3, [r1, #0]
   2053a:	2b01      	cmp	r3, #1
   2053c:	4607      	mov	r7, r0
   2053e:	460d      	mov	r5, r1
   20540:	d002      	beq.n	20548 <bt_keys_find_irk+0x14>
		return NULL;
   20542:	2000      	movs	r0, #0
}
   20544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   20548:	798b      	ldrb	r3, [r1, #6]
   2054a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2054e:	2b40      	cmp	r3, #64	; 0x40
   20550:	d1f7      	bne.n	20542 <bt_keys_find_irk+0xe>
   20552:	4e1e      	ldr	r6, [pc, #120]	; (205cc <bt_keys_find_irk+0x98>)
   20554:	2400      	movs	r4, #0
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   20556:	f101 0801 	add.w	r8, r1, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2055a:	f836 3c2c 	ldrh.w	r3, [r6, #-44]
   2055e:	079a      	lsls	r2, r3, #30
   20560:	d50c      	bpl.n	2057c <bt_keys_find_irk+0x48>
		if (key_pool[i].id == id &&
   20562:	f816 3c3a 	ldrb.w	r3, [r6, #-58]
   20566:	42bb      	cmp	r3, r7
   20568:	d108      	bne.n	2057c <bt_keys_find_irk+0x48>
	return memcmp(a, b, sizeof(*a));
   2056a:	2206      	movs	r2, #6
   2056c:	4631      	mov	r1, r6
   2056e:	4640      	mov	r0, r8
   20570:	f00b fe8e 	bl	2c290 <memcmp>
   20574:	b910      	cbnz	r0, 2057c <bt_keys_find_irk+0x48>
			return &key_pool[i];
   20576:	4816      	ldr	r0, [pc, #88]	; (205d0 <bt_keys_find_irk+0x9c>)
   20578:	4420      	add	r0, r4
   2057a:	e7e3      	b.n	20544 <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2057c:	345c      	adds	r4, #92	; 0x5c
   2057e:	f5b4 7fe6 	cmp.w	r4, #460	; 0x1cc
   20582:	f106 065c 	add.w	r6, r6, #92	; 0x5c
   20586:	d1e8      	bne.n	2055a <bt_keys_find_irk+0x26>
   20588:	4e12      	ldr	r6, [pc, #72]	; (205d4 <bt_keys_find_irk+0xa0>)
   2058a:	2400      	movs	r4, #0
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   2058c:	3501      	adds	r5, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2058e:	f836 3c1c 	ldrh.w	r3, [r6, #-28]
   20592:	079b      	lsls	r3, r3, #30
   20594:	d512      	bpl.n	205bc <bt_keys_find_irk+0x88>
		if (key_pool[i].id != id) {
   20596:	f816 3c2a 	ldrb.w	r3, [r6, #-42]
   2059a:	42bb      	cmp	r3, r7
   2059c:	d10e      	bne.n	205bc <bt_keys_find_irk+0x88>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   2059e:	4629      	mov	r1, r5
   205a0:	4630      	mov	r0, r6
   205a2:	f00b fee2 	bl	2c36a <bt_rpa_irk_matches>
   205a6:	b148      	cbz	r0, 205bc <bt_keys_find_irk+0x88>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   205a8:	4e09      	ldr	r6, [pc, #36]	; (205d0 <bt_keys_find_irk+0x9c>)
   205aa:	f104 003a 	add.w	r0, r4, #58	; 0x3a
	memcpy(dst, src, sizeof(*dst));
   205ae:	2206      	movs	r2, #6
   205b0:	4629      	mov	r1, r5
   205b2:	4430      	add	r0, r6
   205b4:	f00b fe93 	bl	2c2de <memcpy>
			return &key_pool[i];
   205b8:	19a0      	adds	r0, r4, r6
   205ba:	e7c3      	b.n	20544 <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   205bc:	345c      	adds	r4, #92	; 0x5c
   205be:	f5b4 7fe6 	cmp.w	r4, #460	; 0x1cc
   205c2:	f106 065c 	add.w	r6, r6, #92	; 0x5c
   205c6:	d1e2      	bne.n	2058e <bt_keys_find_irk+0x5a>
   205c8:	e7bb      	b.n	20542 <bt_keys_find_irk+0xe>
   205ca:	bf00      	nop
   205cc:	20003c6e 	.word	0x20003c6e
   205d0:	20003c34 	.word	0x20003c34
   205d4:	20003c5e 	.word	0x20003c5e

000205d8 <bt_keys_find_addr>:
{
   205d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   205da:	4d0c      	ldr	r5, [pc, #48]	; (2060c <bt_keys_find_addr+0x34>)
   205dc:	4606      	mov	r6, r0
   205de:	460f      	mov	r7, r1
   205e0:	2400      	movs	r4, #0
		if (key_pool[i].id == id &&
   205e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   205e6:	42b3      	cmp	r3, r6
   205e8:	d108      	bne.n	205fc <bt_keys_find_addr+0x24>
	return memcmp(a, b, sizeof(*a));
   205ea:	2207      	movs	r2, #7
   205ec:	4639      	mov	r1, r7
   205ee:	4628      	mov	r0, r5
   205f0:	f00b fe4e 	bl	2c290 <memcmp>
   205f4:	b910      	cbnz	r0, 205fc <bt_keys_find_addr+0x24>
			return &key_pool[i];
   205f6:	4806      	ldr	r0, [pc, #24]	; (20610 <bt_keys_find_addr+0x38>)
   205f8:	4420      	add	r0, r4
}
   205fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   205fc:	345c      	adds	r4, #92	; 0x5c
   205fe:	f5b4 7fe6 	cmp.w	r4, #460	; 0x1cc
   20602:	f105 055c 	add.w	r5, r5, #92	; 0x5c
   20606:	d1ec      	bne.n	205e2 <bt_keys_find_addr+0xa>
	return NULL;
   20608:	2000      	movs	r0, #0
   2060a:	e7f6      	b.n	205fa <bt_keys_find_addr+0x22>
   2060c:	20003c35 	.word	0x20003c35
   20610:	20003c34 	.word	0x20003c34

00020614 <bt_keys_clear>:
{
   20614:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   20616:	7a03      	ldrb	r3, [r0, #8]
   20618:	075b      	lsls	r3, r3, #29
{
   2061a:	b08c      	sub	sp, #48	; 0x30
   2061c:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2061e:	d501      	bpl.n	20624 <bt_keys_clear+0x10>
		bt_id_del(keys);
   20620:	f7f9 fc9e 	bl	19f60 <bt_id_del>
		if (keys->id) {
   20624:	4625      	mov	r5, r4
   20626:	f815 2b01 	ldrb.w	r2, [r5], #1
   2062a:	b1b2      	cbz	r2, 2065a <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   2062c:	ae02      	add	r6, sp, #8
   2062e:	2104      	movs	r1, #4
   20630:	4630      	mov	r0, r6
   20632:	f009 fefe 	bl	2a432 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   20636:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   20638:	4a09      	ldr	r2, [pc, #36]	; (20660 <bt_keys_clear+0x4c>)
   2063a:	462b      	mov	r3, r5
   2063c:	2124      	movs	r1, #36	; 0x24
   2063e:	a803      	add	r0, sp, #12
   20640:	f7f7 fb64 	bl	17d0c <bt_settings_encode_key>
		settings_delete(key);
   20644:	a803      	add	r0, sp, #12
   20646:	f00b fa3b 	bl	2bac0 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   2064a:	225c      	movs	r2, #92	; 0x5c
   2064c:	2100      	movs	r1, #0
   2064e:	4620      	mov	r0, r4
}
   20650:	b00c      	add	sp, #48	; 0x30
   20652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   20656:	f00b be4d 	b.w	2c2f4 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   2065a:	9200      	str	r2, [sp, #0]
   2065c:	e7ec      	b.n	20638 <bt_keys_clear+0x24>
   2065e:	bf00      	nop
   20660:	00033835 	.word	0x00033835

00020664 <keys_set>:
{
   20664:	b5f0      	push	{r4, r5, r6, r7, lr}
   20666:	b099      	sub	sp, #100	; 0x64
   20668:	4614      	mov	r4, r2
   2066a:	af00      	add	r7, sp, #0
	if (!name) {
   2066c:	4606      	mov	r6, r0
   2066e:	b988      	cbnz	r0, 20694 <keys_set+0x30>
		LOG_ERR("Insufficient number of arguments");
   20670:	4b60      	ldr	r3, [pc, #384]	; (207f4 <keys_set+0x190>)
   20672:	627b      	str	r3, [r7, #36]	; 0x24
   20674:	2302      	movs	r3, #2
   20676:	623b      	str	r3, [r7, #32]
   20678:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2067c:	4603      	mov	r3, r0
   2067e:	f107 0220 	add.w	r2, r7, #32
   20682:	485d      	ldr	r0, [pc, #372]	; (207f8 <keys_set+0x194>)
   20684:	f7f4 fa9e 	bl	14bc4 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   20688:	f06f 0515 	mvn.w	r5, #21
}
   2068c:	4628      	mov	r0, r5
   2068e:	3764      	adds	r7, #100	; 0x64
   20690:	46bd      	mov	sp, r7
   20692:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   20694:	2250      	movs	r2, #80	; 0x50
   20696:	f107 0110 	add.w	r1, r7, #16
   2069a:	4618      	mov	r0, r3
   2069c:	47a0      	blx	r4
	if (len < 0) {
   2069e:	1e04      	subs	r4, r0, #0
   206a0:	da10      	bge.n	206c4 <keys_set+0x60>
		LOG_ERR("Failed to read value (err %zd)", len);
   206a2:	466d      	mov	r5, sp
   206a4:	b088      	sub	sp, #32
   206a6:	466a      	mov	r2, sp
   206a8:	4b54      	ldr	r3, [pc, #336]	; (207fc <keys_set+0x198>)
   206aa:	e9c2 3405 	strd	r3, r4, [r2, #20]
   206ae:	2303      	movs	r3, #3
   206b0:	f842 3f10 	str.w	r3, [r2, #16]!
   206b4:	4850      	ldr	r0, [pc, #320]	; (207f8 <keys_set+0x194>)
   206b6:	2300      	movs	r3, #0
   206b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   206bc:	f7f4 fa82 	bl	14bc4 <z_impl_z_log_msg_static_create>
   206c0:	46ad      	mov	sp, r5
		return -EINVAL;
   206c2:	e7e1      	b.n	20688 <keys_set+0x24>
	err = bt_settings_decode_key(name, &addr);
   206c4:	f107 0108 	add.w	r1, r7, #8
   206c8:	4630      	mov	r0, r6
   206ca:	f00b fe7b 	bl	2c3c4 <bt_settings_decode_key>
	if (err) {
   206ce:	4605      	mov	r5, r0
   206d0:	b198      	cbz	r0, 206fa <keys_set+0x96>
		LOG_ERR("Unable to decode address %s", name);
   206d2:	466c      	mov	r4, sp
   206d4:	b088      	sub	sp, #32
   206d6:	466a      	mov	r2, sp
   206d8:	4b49      	ldr	r3, [pc, #292]	; (20800 <keys_set+0x19c>)
   206da:	e9c2 3605 	strd	r3, r6, [r2, #20]
   206de:	f44f 7300 	mov.w	r3, #512	; 0x200
   206e2:	8393      	strh	r3, [r2, #28]
   206e4:	4b47      	ldr	r3, [pc, #284]	; (20804 <keys_set+0x1a0>)
   206e6:	f842 3f10 	str.w	r3, [r2, #16]!
   206ea:	2300      	movs	r3, #0
   206ec:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   206f0:	4841      	ldr	r0, [pc, #260]	; (207f8 <keys_set+0x194>)
   206f2:	f7f4 fa67 	bl	14bc4 <z_impl_z_log_msg_static_create>
   206f6:	46a5      	mov	sp, r4
			return -EINVAL;
   206f8:	e7c6      	b.n	20688 <keys_set+0x24>
	settings_name_next(name, &next);
   206fa:	1d39      	adds	r1, r7, #4
   206fc:	4630      	mov	r0, r6
   206fe:	f00b fa07 	bl	2bb10 <settings_name_next>
	if (!next) {
   20702:	6878      	ldr	r0, [r7, #4]
   20704:	b188      	cbz	r0, 2072a <keys_set+0xc6>
		unsigned long next_id = strtoul(next, NULL, 10);
   20706:	220a      	movs	r2, #10
   20708:	4629      	mov	r1, r5
   2070a:	f00b fd10 	bl	2c12e <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   2070e:	b160      	cbz	r0, 2072a <keys_set+0xc6>
			LOG_ERR("Invalid local identity %lu", next_id);
   20710:	466c      	mov	r4, sp
   20712:	b088      	sub	sp, #32
   20714:	466a      	mov	r2, sp
   20716:	4b3c      	ldr	r3, [pc, #240]	; (20808 <keys_set+0x1a4>)
   20718:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2071c:	2303      	movs	r3, #3
   2071e:	f842 3f10 	str.w	r3, [r2, #16]!
   20722:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20726:	462b      	mov	r3, r5
   20728:	e7e2      	b.n	206f0 <keys_set+0x8c>
	if (!len) {
   2072a:	bb1c      	cbnz	r4, 20774 <keys_set+0x110>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   2072c:	f107 0208 	add.w	r2, r7, #8
   20730:	4621      	mov	r1, r4
   20732:	203f      	movs	r0, #63	; 0x3f
   20734:	f7ff fed8 	bl	204e8 <bt_keys_find>
		if (keys) {
   20738:	b120      	cbz	r0, 20744 <keys_set+0xe0>
			(void)memset(keys, 0, sizeof(*keys));
   2073a:	225c      	movs	r2, #92	; 0x5c
   2073c:	4621      	mov	r1, r4
   2073e:	f00b fdd9 	bl	2c2f4 <memset>
			LOG_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   20742:	e7a3      	b.n	2068c <keys_set+0x28>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   20744:	f107 0008 	add.w	r0, r7, #8
   20748:	f7f7 f9c6 	bl	17ad8 <bt_addr_le_str>
   2074c:	466e      	mov	r6, sp
   2074e:	b088      	sub	sp, #32
   20750:	466a      	mov	r2, sp
   20752:	4b2e      	ldr	r3, [pc, #184]	; (2080c <keys_set+0x1a8>)
   20754:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20758:	f44f 7300 	mov.w	r3, #512	; 0x200
   2075c:	8393      	strh	r3, [r2, #28]
   2075e:	4b29      	ldr	r3, [pc, #164]	; (20804 <keys_set+0x1a0>)
   20760:	f842 3f10 	str.w	r3, [r2, #16]!
   20764:	4824      	ldr	r0, [pc, #144]	; (207f8 <keys_set+0x194>)
   20766:	4623      	mov	r3, r4
   20768:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   2076c:	f7f4 fa2a 	bl	14bc4 <z_impl_z_log_msg_static_create>
   20770:	46b5      	mov	sp, r6
   20772:	e78b      	b.n	2068c <keys_set+0x28>
	keys = bt_keys_get_addr(id, &addr);
   20774:	f107 0108 	add.w	r1, r7, #8
   20778:	2000      	movs	r0, #0
   2077a:	f7ff fe35 	bl	203e8 <bt_keys_get_addr>
	if (!keys) {
   2077e:	4606      	mov	r6, r0
   20780:	b9c8      	cbnz	r0, 207b6 <keys_set+0x152>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   20782:	f107 0008 	add.w	r0, r7, #8
   20786:	f7f7 f9a7 	bl	17ad8 <bt_addr_le_str>
   2078a:	466c      	mov	r4, sp
   2078c:	b088      	sub	sp, #32
   2078e:	466a      	mov	r2, sp
   20790:	4b1f      	ldr	r3, [pc, #124]	; (20810 <keys_set+0x1ac>)
   20792:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20796:	f44f 7300 	mov.w	r3, #512	; 0x200
   2079a:	8393      	strh	r3, [r2, #28]
   2079c:	4b19      	ldr	r3, [pc, #100]	; (20804 <keys_set+0x1a0>)
   2079e:	f842 3f10 	str.w	r3, [r2, #16]!
   207a2:	4815      	ldr	r0, [pc, #84]	; (207f8 <keys_set+0x194>)
   207a4:	4633      	mov	r3, r6
   207a6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   207aa:	f7f4 fa0b 	bl	14bc4 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   207ae:	f06f 050b 	mvn.w	r5, #11
   207b2:	46a5      	mov	sp, r4
   207b4:	e76a      	b.n	2068c <keys_set+0x28>
	if (len != BT_KEYS_STORAGE_LEN) {
   207b6:	2c50      	cmp	r4, #80	; 0x50
   207b8:	d015      	beq.n	207e6 <keys_set+0x182>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   207ba:	466d      	mov	r5, sp
   207bc:	b088      	sub	sp, #32
   207be:	466a      	mov	r2, sp
   207c0:	4b14      	ldr	r3, [pc, #80]	; (20814 <keys_set+0x1b0>)
   207c2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   207c6:	2350      	movs	r3, #80	; 0x50
   207c8:	61d3      	str	r3, [r2, #28]
   207ca:	2304      	movs	r3, #4
   207cc:	f842 3f10 	str.w	r3, [r2, #16]!
   207d0:	4809      	ldr	r0, [pc, #36]	; (207f8 <keys_set+0x194>)
   207d2:	2300      	movs	r3, #0
   207d4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   207d8:	f7f4 f9f4 	bl	14bc4 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   207dc:	4630      	mov	r0, r6
   207de:	46ad      	mov	sp, r5
   207e0:	f7ff ff18 	bl	20614 <bt_keys_clear>
			return -EINVAL;
   207e4:	e750      	b.n	20688 <keys_set+0x24>
		memcpy(keys->storage_start, val, len);
   207e6:	4622      	mov	r2, r4
   207e8:	f107 0110 	add.w	r1, r7, #16
   207ec:	300c      	adds	r0, #12
   207ee:	f00b fd76 	bl	2c2de <memcpy>
	return 0;
   207f2:	e74b      	b.n	2068c <keys_set+0x28>
   207f4:	00031c6a 	.word	0x00031c6a
   207f8:	000302c4 	.word	0x000302c4
   207fc:	00033796 	.word	0x00033796
   20800:	00032f79 	.word	0x00032f79
   20804:	01000003 	.word	0x01000003
   20808:	00032f95 	.word	0x00032f95
   2080c:	000337b5 	.word	0x000337b5
   20810:	000337d8 	.word	0x000337d8
   20814:	000337f7 	.word	0x000337f7

00020818 <bt_keys_store>:
{
   20818:	b5b0      	push	{r4, r5, r7, lr}
	if (keys->id) {
   2081a:	4605      	mov	r5, r0
{
   2081c:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   2081e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   20822:	af02      	add	r7, sp, #8
   20824:	4604      	mov	r4, r0
	if (keys->id) {
   20826:	b332      	cbz	r2, 20876 <bt_keys_store+0x5e>
		u8_to_dec(id, sizeof(id), keys->id);
   20828:	2104      	movs	r1, #4
   2082a:	4638      	mov	r0, r7
   2082c:	f009 fe01 	bl	2a432 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   20830:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   20832:	4a12      	ldr	r2, [pc, #72]	; (2087c <bt_keys_store+0x64>)
   20834:	462b      	mov	r3, r5
   20836:	2124      	movs	r1, #36	; 0x24
   20838:	1d38      	adds	r0, r7, #4
   2083a:	f7f7 fa67 	bl	17d0c <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   2083e:	f104 010c 	add.w	r1, r4, #12
   20842:	2250      	movs	r2, #80	; 0x50
   20844:	1d38      	adds	r0, r7, #4
   20846:	f7f5 fecf 	bl	165e8 <settings_save_one>
	if (err) {
   2084a:	4604      	mov	r4, r0
   2084c:	b178      	cbz	r0, 2086e <bt_keys_store+0x56>
		LOG_ERR("Failed to save keys (err %d)", err);
   2084e:	466d      	mov	r5, sp
   20850:	b088      	sub	sp, #32
   20852:	aa02      	add	r2, sp, #8
   20854:	4b0a      	ldr	r3, [pc, #40]	; (20880 <bt_keys_store+0x68>)
   20856:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2085a:	2303      	movs	r3, #3
   2085c:	f842 3f10 	str.w	r3, [r2, #16]!
   20860:	4808      	ldr	r0, [pc, #32]	; (20884 <bt_keys_store+0x6c>)
   20862:	2300      	movs	r3, #0
   20864:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20868:	f7f4 f9ac 	bl	14bc4 <z_impl_z_log_msg_static_create>
   2086c:	46ad      	mov	sp, r5
}
   2086e:	4620      	mov	r0, r4
   20870:	3728      	adds	r7, #40	; 0x28
   20872:	46bd      	mov	sp, r7
   20874:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   20876:	9200      	str	r2, [sp, #0]
   20878:	e7db      	b.n	20832 <bt_keys_store+0x1a>
   2087a:	bf00      	nop
   2087c:	00033835 	.word	0x00033835
   20880:	00033815 	.word	0x00033815
   20884:	000302c4 	.word	0x000302c4

00020888 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   20888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2088c:	b09a      	sub	sp, #104	; 0x68
   2088e:	461d      	mov	r5, r3
   20890:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   20894:	4b2e      	ldr	r3, [pc, #184]	; (20950 <bt_crypto_f5+0xc8>)
{
   20896:	4616      	mov	r6, r2
	uint8_t m[53] = {0x00,						 /* counter */
   20898:	aa0c      	add	r2, sp, #48	; 0x30
{
   2089a:	4684      	mov	ip, r0
   2089c:	468a      	mov	sl, r1
	uint8_t m[53] = {0x00,						 /* counter */
   2089e:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   208a2:	4690      	mov	r8, r2
   208a4:	6818      	ldr	r0, [r3, #0]
   208a6:	6859      	ldr	r1, [r3, #4]
   208a8:	4614      	mov	r4, r2
   208aa:	c403      	stmia	r4!, {r0, r1}
   208ac:	3308      	adds	r3, #8
   208ae:	4573      	cmp	r3, lr
   208b0:	4622      	mov	r2, r4
   208b2:	d1f7      	bne.n	208a4 <bt_crypto_f5+0x1c>
   208b4:	6818      	ldr	r0, [r3, #0]
   208b6:	791b      	ldrb	r3, [r3, #4]
   208b8:	6020      	str	r0, [r4, #0]
   208ba:	7123      	strb	r3, [r4, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   208bc:	4661      	mov	r1, ip
   208be:	2220      	movs	r2, #32
   208c0:	a804      	add	r0, sp, #16
   208c2:	f00d fe16 	bl	2e4f2 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   208c6:	4823      	ldr	r0, [pc, #140]	; (20954 <bt_crypto_f5+0xcc>)
   208c8:	466b      	mov	r3, sp
   208ca:	2220      	movs	r2, #32
   208cc:	a904      	add	r1, sp, #16
   208ce:	f00d fe28 	bl	2e522 <bt_crypto_aes_cmac>
	if (err) {
   208d2:	4604      	mov	r4, r0
   208d4:	bbc0      	cbnz	r0, 20948 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   208d6:	2210      	movs	r2, #16
   208d8:	4651      	mov	r1, sl
   208da:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   208de:	f00d fe08 	bl	2e4f2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   208e2:	2210      	movs	r2, #16
   208e4:	4631      	mov	r1, r6
   208e6:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   208ea:	f00d fe02 	bl	2e4f2 <sys_memcpy_swap>
	m[37] = a1->type;
   208ee:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   208f0:	2206      	movs	r2, #6
	m[37] = a1->type;
   208f2:	f811 3b01 	ldrb.w	r3, [r1], #1
   208f6:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   208fa:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   208fe:	f00d fdf8 	bl	2e4f2 <sys_memcpy_swap>
	m[44] = a2->type;
   20902:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   20904:	2206      	movs	r2, #6
	m[44] = a2->type;
   20906:	f811 3b01 	ldrb.w	r3, [r1], #1
   2090a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   2090e:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   20912:	f00d fdee 	bl	2e4f2 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   20916:	464b      	mov	r3, r9
   20918:	2235      	movs	r2, #53	; 0x35
   2091a:	4641      	mov	r1, r8
   2091c:	4668      	mov	r0, sp
   2091e:	f00d fe00 	bl	2e522 <bt_crypto_aes_cmac>
	if (err) {
   20922:	4604      	mov	r4, r0
   20924:	b980      	cbnz	r0, 20948 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   20926:	4648      	mov	r0, r9
   20928:	f00d fded 	bl	2e506 <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   2092c:	2301      	movs	r3, #1
   2092e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   20932:	2235      	movs	r2, #53	; 0x35
   20934:	463b      	mov	r3, r7
   20936:	4641      	mov	r1, r8
   20938:	4668      	mov	r0, sp
   2093a:	f00d fdf2 	bl	2e522 <bt_crypto_aes_cmac>
	if (err) {
   2093e:	4604      	mov	r4, r0
   20940:	b910      	cbnz	r0, 20948 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   20942:	4638      	mov	r0, r7
   20944:	f00d fddf 	bl	2e506 <sys_mem_swap.constprop.0>

	return 0;
}
   20948:	4620      	mov	r0, r4
   2094a:	b01a      	add	sp, #104	; 0x68
   2094c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20950:	000304f1 	.word	0x000304f1
   20954:	00033842 	.word	0x00033842

00020958 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   20958:	b5f0      	push	{r4, r5, r6, r7, lr}
   2095a:	b099      	sub	sp, #100	; 0x64
   2095c:	4614      	mov	r4, r2
   2095e:	460f      	mov	r7, r1
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   20960:	2220      	movs	r2, #32
   20962:	4601      	mov	r1, r0
   20964:	a804      	add	r0, sp, #16
{
   20966:	461e      	mov	r6, r3
   20968:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   2096a:	f00d fdc2 	bl	2e4f2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2096e:	2220      	movs	r2, #32
   20970:	4639      	mov	r1, r7
   20972:	a80c      	add	r0, sp, #48	; 0x30
   20974:	f00d fdbd 	bl	2e4f2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   20978:	2210      	movs	r2, #16
   2097a:	4631      	mov	r1, r6
   2097c:	a814      	add	r0, sp, #80	; 0x50
   2097e:	f00d fdb8 	bl	2e4f2 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   20982:	4621      	mov	r1, r4
   20984:	2210      	movs	r2, #16
   20986:	4668      	mov	r0, sp
   20988:	f00d fdb3 	bl	2e4f2 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   2098c:	466b      	mov	r3, sp
   2098e:	2250      	movs	r2, #80	; 0x50
   20990:	a904      	add	r1, sp, #16
   20992:	4618      	mov	r0, r3
   20994:	f00d fdc5 	bl	2e522 <bt_crypto_aes_cmac>
	if (err) {
   20998:	4604      	mov	r4, r0
   2099a:	b960      	cbnz	r0, 209b6 <bt_crypto_g2+0x5e>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   2099c:	2204      	movs	r2, #4
   2099e:	a903      	add	r1, sp, #12
   209a0:	4628      	mov	r0, r5
   209a2:	f00b fc9c 	bl	2c2de <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   209a6:	682b      	ldr	r3, [r5, #0]
   209a8:	4a04      	ldr	r2, [pc, #16]	; (209bc <bt_crypto_g2+0x64>)
   209aa:	ba1b      	rev	r3, r3
   209ac:	fbb3 f1f2 	udiv	r1, r3, r2
   209b0:	fb02 3311 	mls	r3, r2, r1, r3
   209b4:	602b      	str	r3, [r5, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   209b6:	4620      	mov	r0, r4
   209b8:	b019      	add	sp, #100	; 0x64
   209ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   209bc:	000f4240 	.word	0x000f4240

000209c0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   209c0:	4b02      	ldr	r3, [pc, #8]	; (209cc <net_buf_pool_get+0xc>)
   209c2:	222c      	movs	r2, #44	; 0x2c
   209c4:	fb02 3000 	mla	r0, r2, r0, r3
   209c8:	4770      	bx	lr
   209ca:	bf00      	nop
   209cc:	20000d4c 	.word	0x20000d4c

000209d0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   209d0:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   209d2:	4b06      	ldr	r3, [pc, #24]	; (209ec <net_buf_id+0x1c>)
   209d4:	212c      	movs	r1, #44	; 0x2c
   209d6:	fb01 3302 	mla	r3, r1, r2, r3
   209da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   209dc:	7f1b      	ldrb	r3, [r3, #28]
   209de:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   209e0:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   209e2:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   209e6:	fbb0 f0f3 	udiv	r0, r0, r3
   209ea:	4770      	bx	lr
   209ec:	20000d4c 	.word	0x20000d4c

000209f0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   209f0:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   209f2:	4b0a      	ldr	r3, [pc, #40]	; (20a1c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   209f4:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   209f6:	242c      	movs	r4, #44	; 0x2c
   209f8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   209fc:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   209fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20a00:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   20a02:	681a      	ldr	r2, [r3, #0]
   20a04:	4294      	cmp	r4, r2
   20a06:	bf94      	ite	ls
   20a08:	600c      	strls	r4, [r1, #0]
   20a0a:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   20a0c:	e9d3 5400 	ldrd	r5, r4, [r3]
   20a10:	f7ff ffde 	bl	209d0 <net_buf_id>
}
   20a14:	fb05 4000 	mla	r0, r5, r0, r4
   20a18:	bd38      	pop	{r3, r4, r5, pc}
   20a1a:	bf00      	nop
   20a1c:	20000d4c 	.word	0x20000d4c

00020a20 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   20a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a24:	4605      	mov	r5, r0
   20a26:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20a28:	4610      	mov	r0, r2
   20a2a:	4619      	mov	r1, r3
{
   20a2c:	4691      	mov	r9, r2
   20a2e:	4698      	mov	r8, r3
   20a30:	4617      	mov	r7, r2
   20a32:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20a34:	f00f f866 	bl	2fb04 <sys_clock_timeout_end_calc>
   20a38:	4682      	mov	sl, r0
   20a3a:	468b      	mov	fp, r1
	__asm__ volatile(
   20a3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20a40:	f3ef 8111 	mrs	r1, BASEPRI
   20a44:	f383 8812 	msr	BASEPRI_MAX, r3
   20a48:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   20a4c:	8b6b      	ldrh	r3, [r5, #26]
   20a4e:	2b00      	cmp	r3, #0
   20a50:	d058      	beq.n	20b04 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   20a52:	8b2a      	ldrh	r2, [r5, #24]
   20a54:	429a      	cmp	r2, r3
   20a56:	d93c      	bls.n	20ad2 <net_buf_alloc_len+0xb2>
   20a58:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   20a5a:	2200      	movs	r2, #0
   20a5c:	2300      	movs	r3, #0
   20a5e:	4628      	mov	r0, r5
   20a60:	f005 fbe6 	bl	26230 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   20a64:	9900      	ldr	r1, [sp, #0]
   20a66:	4604      	mov	r4, r0
   20a68:	2800      	cmp	r0, #0
   20a6a:	d032      	beq.n	20ad2 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   20a6c:	f381 8811 	msr	BASEPRI, r1
   20a70:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   20a74:	9b01      	ldr	r3, [sp, #4]
   20a76:	2b00      	cmp	r3, #0
   20a78:	d055      	beq.n	20b26 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   20a7a:	ea58 0309 	orrs.w	r3, r8, r9
   20a7e:	d00f      	beq.n	20aa0 <net_buf_alloc_len+0x80>
   20a80:	f1b8 3fff 	cmp.w	r8, #4294967295
   20a84:	bf08      	it	eq
   20a86:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   20a8a:	d009      	beq.n	20aa0 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   20a8c:	f006 fb16 	bl	270bc <sys_clock_tick_get>
   20a90:	ebba 0700 	subs.w	r7, sl, r0
   20a94:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   20a98:	2e00      	cmp	r6, #0
   20a9a:	bfbc      	itt	lt
   20a9c:	2700      	movlt	r7, #0
   20a9e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20aa0:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   20aa2:	4d26      	ldr	r5, [pc, #152]	; (20b3c <net_buf_alloc_len+0x11c>)
   20aa4:	f04f 082c 	mov.w	r8, #44	; 0x2c
   20aa8:	fb08 5303 	mla	r3, r8, r3, r5
   20aac:	463a      	mov	r2, r7
   20aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20ab0:	681b      	ldr	r3, [r3, #0]
   20ab2:	a901      	add	r1, sp, #4
   20ab4:	f8d3 9000 	ldr.w	r9, [r3]
   20ab8:	4620      	mov	r0, r4
   20aba:	4633      	mov	r3, r6
   20abc:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   20abe:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   20ac0:	2800      	cmp	r0, #0
   20ac2:	d131      	bne.n	20b28 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   20ac4:	7aa0      	ldrb	r0, [r4, #10]
   20ac6:	4621      	mov	r1, r4
   20ac8:	fb00 5008 	mla	r0, r0, r8, r5
   20acc:	f00e fd93 	bl	2f5f6 <k_queue_prepend>
}
   20ad0:	e024      	b.n	20b1c <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   20ad2:	8b68      	ldrh	r0, [r5, #26]
   20ad4:	1e43      	subs	r3, r0, #1
   20ad6:	836b      	strh	r3, [r5, #26]
   20ad8:	f381 8811 	msr	BASEPRI, r1
   20adc:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20ae0:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   20ae2:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   20ae4:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20ae6:	331b      	adds	r3, #27
   20ae8:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   20aec:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   20aee:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   20af2:	4b12      	ldr	r3, [pc, #72]	; (20b3c <net_buf_alloc_len+0x11c>)
   20af4:	4a12      	ldr	r2, [pc, #72]	; (20b40 <net_buf_alloc_len+0x120>)
   20af6:	1aeb      	subs	r3, r5, r3
   20af8:	109b      	asrs	r3, r3, #2
   20afa:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   20afc:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   20afe:	7f2b      	ldrb	r3, [r5, #28]
   20b00:	72e3      	strb	r3, [r4, #11]
		goto success;
   20b02:	e7b7      	b.n	20a74 <net_buf_alloc_len+0x54>
   20b04:	f381 8811 	msr	BASEPRI, r1
   20b08:	f3bf 8f6f 	isb	sy
   20b0c:	464a      	mov	r2, r9
   20b0e:	4643      	mov	r3, r8
   20b10:	4628      	mov	r0, r5
   20b12:	f005 fb8d 	bl	26230 <z_impl_k_queue_get>
	if (!buf) {
   20b16:	4604      	mov	r4, r0
   20b18:	2800      	cmp	r0, #0
   20b1a:	d1ab      	bne.n	20a74 <net_buf_alloc_len+0x54>
		return NULL;
   20b1c:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   20b1e:	4620      	mov	r0, r4
   20b20:	b003      	add	sp, #12
   20b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   20b26:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   20b28:	2300      	movs	r3, #0
	buf->ref   = 1U;
   20b2a:	2201      	movs	r2, #1
	buf->frags = NULL;
   20b2c:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   20b2e:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   20b30:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   20b32:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   20b34:	6963      	ldr	r3, [r4, #20]
   20b36:	8262      	strh	r2, [r4, #18]
   20b38:	60e3      	str	r3, [r4, #12]
	return buf;
   20b3a:	e7f0      	b.n	20b1e <net_buf_alloc_len+0xfe>
   20b3c:	20000d4c 	.word	0x20000d4c
   20b40:	ba2e8ba3 	.word	0xba2e8ba3

00020b44 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   20b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b48:	4d16      	ldr	r5, [pc, #88]	; (20ba4 <net_buf_unref+0x60>)
   20b4a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   20b4c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   20b4e:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   20b50:	b90c      	cbnz	r4, 20b56 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   20b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   20b56:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   20b58:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   20b5c:	3b01      	subs	r3, #1
   20b5e:	b2db      	uxtb	r3, r3
   20b60:	7223      	strb	r3, [r4, #8]
   20b62:	2b00      	cmp	r3, #0
   20b64:	d1f5      	bne.n	20b52 <net_buf_unref+0xe>
		if (buf->__buf) {
   20b66:	6961      	ldr	r1, [r4, #20]
   20b68:	b159      	cbz	r1, 20b82 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   20b6a:	7a63      	ldrb	r3, [r4, #9]
   20b6c:	07db      	lsls	r3, r3, #31
   20b6e:	d407      	bmi.n	20b80 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20b70:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   20b72:	fb07 5303 	mla	r3, r7, r3, r5
   20b76:	4620      	mov	r0, r4
   20b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20b7a:	681b      	ldr	r3, [r3, #0]
   20b7c:	689b      	ldr	r3, [r3, #8]
   20b7e:	4798      	blx	r3
			buf->__buf = NULL;
   20b80:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   20b82:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   20b84:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   20b86:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   20b8a:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   20b8c:	6a1b      	ldr	r3, [r3, #32]
   20b8e:	b11b      	cbz	r3, 20b98 <net_buf_unref+0x54>
			pool->destroy(buf);
   20b90:	4620      	mov	r0, r4
   20b92:	4798      	blx	r3
{
   20b94:	4644      	mov	r4, r8
   20b96:	e7db      	b.n	20b50 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   20b98:	4621      	mov	r1, r4
   20b9a:	fb00 5007 	mla	r0, r0, r7, r5
   20b9e:	f00e fd2a 	bl	2f5f6 <k_queue_prepend>
}
   20ba2:	e7f7      	b.n	20b94 <net_buf_unref+0x50>
   20ba4:	20000d4c 	.word	0x20000d4c

00020ba8 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   20ba8:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   20baa:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
   20bae:	d512      	bpl.n	20bd6 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   20bb0:	2b08      	cmp	r3, #8
   20bb2:	d105      	bne.n	20bc0 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   20bb4:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   20bb6:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   20bba:	d506      	bpl.n	20bca <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   20bbc:	480e      	ldr	r0, [pc, #56]	; (20bf8 <endpoint_ctx+0x50>)
   20bbe:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
   20bc0:	f010 0f78 	tst.w	r0, #120	; 0x78
   20bc4:	d112      	bne.n	20bec <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
   20bc6:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
   20bca:	204c      	movs	r0, #76	; 0x4c
   20bcc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   20bd0:	4b0a      	ldr	r3, [pc, #40]	; (20bfc <endpoint_ctx+0x54>)
   20bd2:	4418      	add	r0, r3
   20bd4:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   20bd6:	2b08      	cmp	r3, #8
   20bd8:	d105      	bne.n	20be6 <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   20bda:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   20bdc:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   20be0:	d506      	bpl.n	20bf0 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   20be2:	4807      	ldr	r0, [pc, #28]	; (20c00 <endpoint_ctx+0x58>)
   20be4:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
   20be6:	f010 0f78 	tst.w	r0, #120	; 0x78
   20bea:	d0f6      	beq.n	20bda <endpoint_ctx+0x32>
		return NULL;
   20bec:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
   20bee:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   20bf0:	4804      	ldr	r0, [pc, #16]	; (20c04 <endpoint_ctx+0x5c>)
   20bf2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   20bf6:	4770      	bx	lr
   20bf8:	20003f4c 	.word	0x20003f4c
   20bfc:	20003e00 	.word	0x20003e00
   20c00:	2000406c 	.word	0x2000406c
   20c04:	20003f6c 	.word	0x20003f6c

00020c08 <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   20c08:	4901      	ldr	r1, [pc, #4]	; (20c10 <usbd_work_schedule+0x8>)
   20c0a:	4802      	ldr	r0, [pc, #8]	; (20c14 <usbd_work_schedule+0xc>)
   20c0c:	f00e bdb1 	b.w	2f772 <k_work_submit_to_queue>
   20c10:	20003e28 	.word	0x20003e28
   20c14:	20002710 	.word	0x20002710

00020c18 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   20c18:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   20c1a:	4801      	ldr	r0, [pc, #4]	; (20c20 <usbd_evt_put+0x8>)
   20c1c:	f00e bce0 	b.w	2f5e0 <k_queue_append>
   20c20:	20000d34 	.word	0x20000d34

00020c24 <usbd_evt_get>:
   20c24:	4802      	ldr	r0, [pc, #8]	; (20c30 <usbd_evt_get+0xc>)
   20c26:	2200      	movs	r2, #0
   20c28:	2300      	movs	r3, #0
   20c2a:	f005 bb01 	b.w	26230 <z_impl_k_queue_get>
   20c2e:	bf00      	nop
   20c30:	20000d34 	.word	0x20000d34

00020c34 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
   20c34:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   20c36:	4c05      	ldr	r4, [pc, #20]	; (20c4c <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
   20c38:	f7ff fff4 	bl	20c24 <usbd_evt_get>
		if (ev) {
   20c3c:	b120      	cbz	r0, 20c48 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   20c3e:	1d01      	adds	r1, r0, #4
   20c40:	4620      	mov	r0, r4
   20c42:	f00e fc03 	bl	2f44c <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
   20c46:	e7f7      	b.n	20c38 <usbd_evt_flush+0x4>
}
   20c48:	bd10      	pop	{r4, pc}
   20c4a:	bf00      	nop
   20c4c:	20000c10 	.word	0x20000c10

00020c50 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
   20c50:	b510      	push	{r4, lr}
   20c52:	b088      	sub	sp, #32
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
   20c54:	4818      	ldr	r0, [pc, #96]	; (20cb8 <usbd_evt_alloc+0x68>)
   20c56:	2200      	movs	r2, #0
   20c58:	2300      	movs	r3, #0
   20c5a:	a901      	add	r1, sp, #4
   20c5c:	f005 f92e 	bl	25ebc <k_mem_slab_alloc>
   20c60:	b330      	cbz	r0, 20cb0 <usbd_evt_alloc+0x60>
			     (void **)&block.data, K_NO_WAIT)) {
		LOG_ERR("USBD event allocation failed!");
   20c62:	4b16      	ldr	r3, [pc, #88]	; (20cbc <usbd_evt_alloc+0x6c>)
   20c64:	4816      	ldr	r0, [pc, #88]	; (20cc0 <usbd_evt_alloc+0x70>)
   20c66:	9307      	str	r3, [sp, #28]
   20c68:	aa06      	add	r2, sp, #24
   20c6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20c6e:	2402      	movs	r4, #2
   20c70:	9406      	str	r4, [sp, #24]
   20c72:	f00d fd9c 	bl	2e7ae <z_log_msg_static_create.constprop.0>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
   20c76:	f7ff ffdd 	bl	20c34 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   20c7a:	480f      	ldr	r0, [pc, #60]	; (20cb8 <usbd_evt_alloc+0x68>)
   20c7c:	2200      	movs	r2, #0
   20c7e:	2300      	movs	r3, #0
   20c80:	a901      	add	r1, sp, #4
   20c82:	f005 f91b 	bl	25ebc <k_mem_slab_alloc>
   20c86:	b150      	cbz	r0, 20c9e <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
   20c88:	4b0e      	ldr	r3, [pc, #56]	; (20cc4 <usbd_evt_alloc+0x74>)
   20c8a:	480d      	ldr	r0, [pc, #52]	; (20cc0 <usbd_evt_alloc+0x70>)
   20c8c:	aa06      	add	r2, sp, #24
   20c8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20c92:	e9cd 4306 	strd	r4, r3, [sp, #24]
   20c96:	f00d fd8a 	bl	2e7ae <z_log_msg_static_create.constprop.0>
			__ASSERT_NO_MSG(0);
			return NULL;
   20c9a:	2000      	movs	r0, #0
   20c9c:	e00a      	b.n	20cb4 <usbd_evt_alloc+0x64>
		}

		ev = (struct usbd_event *)block.data;
   20c9e:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
   20ca0:	2304      	movs	r3, #4
		ev->block = block;
   20ca2:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   20ca4:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   20ca6:	f7ff ffb7 	bl	20c18 <usbd_evt_put>
		usbd_work_schedule();
   20caa:	f7ff ffad 	bl	20c08 <usbd_work_schedule>

		return NULL;
   20cae:	e7f4      	b.n	20c9a <usbd_evt_alloc+0x4a>
	}

	ev = (struct usbd_event *)block.data;
   20cb0:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   20cb2:	6040      	str	r0, [r0, #4]

	return ev;
}
   20cb4:	b008      	add	sp, #32
   20cb6:	bd10      	pop	{r4, pc}
   20cb8:	20000c10 	.word	0x20000c10
   20cbc:	00033873 	.word	0x00033873
   20cc0:	000303b4 	.word	0x000303b4
   20cc4:	00033891 	.word	0x00033891

00020cc8 <usb_dc_power_event_handler>:

static K_TIMER_DEFINE(delay_timer, attached_evt_delay_handler, NULL);
#endif

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
   20cc8:	b598      	push	{r3, r4, r7, lr}
   20cca:	2802      	cmp	r0, #2
   20ccc:	af00      	add	r7, sp, #0
   20cce:	d811      	bhi.n	20cf4 <usb_dc_power_event_handler+0x2c>
   20cd0:	4b10      	ldr	r3, [pc, #64]	; (20d14 <usb_dc_power_event_handler+0x4c>)
   20cd2:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   20cd4:	f7ff ffbc 	bl	20c50 <usbd_evt_alloc>
	if (!ev) {
   20cd8:	b150      	cbz	r0, 20cf0 <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
   20cda:	2200      	movs	r2, #0
   20cdc:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   20cde:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   20ce0:	f7ff ff9a 	bl	20c18 <usbd_evt_put>
	if (usbd_ctx.attached) {
   20ce4:	4b0c      	ldr	r3, [pc, #48]	; (20d18 <usb_dc_power_event_handler+0x50>)
   20ce6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   20cea:	b10b      	cbz	r3, 20cf0 <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
   20cec:	f7ff ff8c 	bl	20c08 <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
   20cf0:	46bd      	mov	sp, r7
   20cf2:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
   20cf4:	466c      	mov	r4, sp
   20cf6:	b088      	sub	sp, #32
   20cf8:	466a      	mov	r2, sp
   20cfa:	4b08      	ldr	r3, [pc, #32]	; (20d1c <usb_dc_power_event_handler+0x54>)
	switch (event) {
   20cfc:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
   20d00:	2303      	movs	r3, #3
   20d02:	f842 3f10 	str.w	r3, [r2, #16]!
   20d06:	4806      	ldr	r0, [pc, #24]	; (20d20 <usb_dc_power_event_handler+0x58>)
   20d08:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20d0c:	f00d fd4f 	bl	2e7ae <z_log_msg_static_create.constprop.0>
   20d10:	46a5      	mov	sp, r4
   20d12:	e7ed      	b.n	20cf0 <usb_dc_power_event_handler+0x28>
   20d14:	00033a83 	.word	0x00033a83
   20d18:	20003e00 	.word	0x20003e00
   20d1c:	000338ad 	.word	0x000338ad
   20d20:	000303b4 	.word	0x000303b4

00020d24 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
   20d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
   20d28:	f890 8002 	ldrb.w	r8, [r0, #2]
{
   20d2c:	4606      	mov	r6, r0
   20d2e:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
   20d30:	4640      	mov	r0, r8
   20d32:	f7ff ff39 	bl	20ba8 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   20d36:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
   20d3a:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   20d3c:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   20d3e:	d025      	beq.n	20d8c <usbd_event_transfer_data+0x68>
		switch (p_event->data.eptransfer.status) {
   20d40:	b19c      	cbz	r4, 20d6a <usbd_event_transfer_data+0x46>
   20d42:	2c03      	cmp	r4, #3
   20d44:	d01f      	beq.n	20d86 <usbd_event_transfer_data+0x62>
			usbd_work_schedule();
		}
		break;

		default: {
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   20d46:	466d      	mov	r5, sp
   20d48:	b088      	sub	sp, #32
   20d4a:	466a      	mov	r2, sp
   20d4c:	4b2a      	ldr	r3, [pc, #168]	; (20df8 <usbd_event_transfer_data+0xd4>)
   20d4e:	f8c2 801c 	str.w	r8, [r2, #28]
   20d52:	e9c2 3405 	strd	r3, r4, [r2, #20]
   20d56:	2304      	movs	r3, #4
   20d58:	f842 3f10 	str.w	r3, [r2, #16]!
   20d5c:	4827      	ldr	r0, [pc, #156]	; (20dfc <usbd_event_transfer_data+0xd8>)
   20d5e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20d62:	f00d fd24 	bl	2e7ae <z_log_msg_static_create.constprop.0>
   20d66:	46ad      	mov	sp, r5
   20d68:	e00d      	b.n	20d86 <usbd_event_transfer_data+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
   20d6a:	f7ff ff71 	bl	20c50 <usbd_evt_alloc>
			if (!ev) {
   20d6e:	4603      	mov	r3, r0
   20d70:	b148      	cbz	r0, 20d86 <usbd_event_transfer_data+0x62>
			ev->evt_type = USBD_EVT_EP;
   20d72:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   20d74:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   20d76:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   20d78:	2203      	movs	r2, #3
   20d7a:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   20d7c:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
   20d7e:	f7ff ff4b 	bl	20c18 <usbd_evt_put>
			usbd_work_schedule();
   20d82:	f7ff ff41 	bl	20c08 <usbd_work_schedule>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
   20d86:	46bd      	mov	sp, r7
   20d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (p_event->data.eptransfer.status) {
   20d8c:	b154      	cbz	r4, 20da4 <usbd_event_transfer_data+0x80>
   20d8e:	2c01      	cmp	r4, #1
   20d90:	d1d9      	bne.n	20d46 <usbd_event_transfer_data+0x22>
			struct usbd_event *ev = usbd_evt_alloc();
   20d92:	f7ff ff5d 	bl	20c50 <usbd_evt_alloc>
			if (!ev) {
   20d96:	4603      	mov	r3, r0
   20d98:	2800      	cmp	r0, #0
   20d9a:	d0f4      	beq.n	20d86 <usbd_event_transfer_data+0x62>
			ep_ctx->read_pending = true;
   20d9c:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   20d9e:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   20da0:	7304      	strb	r4, [r0, #12]
   20da2:	e7eb      	b.n	20d7c <usbd_event_transfer_data+0x58>
			struct usbd_event *ev = usbd_evt_alloc();
   20da4:	f7ff ff54 	bl	20c50 <usbd_evt_alloc>
			if (!ev) {
   20da8:	2800      	cmp	r0, #0
   20daa:	d0ec      	beq.n	20d86 <usbd_event_transfer_data+0x62>
				p_event->data.eptransfer.ep);
   20dac:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   20dae:	4b14      	ldr	r3, [pc, #80]	; (20e00 <usbd_event_transfer_data+0xdc>)
   20db0:	f012 0f80 	tst.w	r2, #128	; 0x80
   20db4:	f002 0108 	and.w	r1, r2, #8
   20db8:	d011      	beq.n	20dde <usbd_event_transfer_data+0xba>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   20dba:	b141      	cbz	r1, 20dce <usbd_event_transfer_data+0xaa>
        {
            ret = p_reg->ISOIN.AMOUNT;
   20dbc:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   20dc0:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
   20dc2:	2301      	movs	r3, #1
   20dc4:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   20dc6:	2302      	movs	r3, #2
   20dc8:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   20dca:	6085      	str	r5, [r0, #8]
   20dcc:	e7d7      	b.n	20d7e <usbd_event_transfer_data+0x5a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   20dce:	f002 020f 	and.w	r2, r2, #15
   20dd2:	2114      	movs	r1, #20
   20dd4:	fb01 3302 	mla	r3, r1, r2, r3
   20dd8:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   20ddc:	e7f0      	b.n	20dc0 <usbd_event_transfer_data+0x9c>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   20dde:	b111      	cbz	r1, 20de6 <usbd_event_transfer_data+0xc2>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   20de0:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   20de4:	e7ec      	b.n	20dc0 <usbd_event_transfer_data+0x9c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   20de6:	f002 020f 	and.w	r2, r2, #15
   20dea:	2114      	movs	r1, #20
   20dec:	fb01 3302 	mla	r3, r1, r2, r3
   20df0:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   20df4:	e7e4      	b.n	20dc0 <usbd_event_transfer_data+0x9c>
   20df6:	bf00      	nop
   20df8:	000338c8 	.word	0x000338c8
   20dfc:	000303b4 	.word	0x000303b4
   20e00:	40027000 	.word	0x40027000

00020e04 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
   20e04:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
   20e06:	4812      	ldr	r0, [pc, #72]	; (20e50 <usb_init+0x4c>)
   20e08:	f004 fa3e 	bl	25288 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   20e0c:	4b11      	ldr	r3, [pc, #68]	; (20e54 <usb_init+0x50>)
   20e0e:	4298      	cmp	r0, r3
   20e10:	d11a      	bne.n	20e48 <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   20e12:	4811      	ldr	r0, [pc, #68]	; (20e58 <usb_init+0x54>)
   20e14:	f003 feac 	bl	24b70 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   20e18:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   20e1a:	4810      	ldr	r0, [pc, #64]	; (20e5c <usb_init+0x58>)
   20e1c:	f003 feee 	bl	24bfc <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   20e20:	490f      	ldr	r1, [pc, #60]	; (20e60 <usb_init+0x5c>)
   20e22:	4810      	ldr	r0, [pc, #64]	; (20e64 <usb_init+0x60>)
   20e24:	9400      	str	r4, [sp, #0]
   20e26:	f04f 33ff 	mov.w	r3, #4294967295
   20e2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20e2e:	f005 fbd7 	bl	265e0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   20e32:	490d      	ldr	r1, [pc, #52]	; (20e68 <usb_init+0x64>)
   20e34:	480b      	ldr	r0, [pc, #44]	; (20e64 <usb_init+0x60>)
   20e36:	f00e fb38 	bl	2f4aa <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
   20e3a:	480c      	ldr	r0, [pc, #48]	; (20e6c <usb_init+0x68>)
   20e3c:	490c      	ldr	r1, [pc, #48]	; (20e70 <usb_init+0x6c>)
   20e3e:	f00e fc6b 	bl	2f718 <k_work_init>

	return 0;
   20e42:	4620      	mov	r0, r4
}
   20e44:	b002      	add	sp, #8
   20e46:	bd10      	pop	{r4, pc}
		return -EIO;
   20e48:	f06f 0004 	mvn.w	r0, #4
   20e4c:	e7fa      	b.n	20e44 <usb_init+0x40>
   20e4e:	bf00      	nop
   20e50:	00020eb5 	.word	0x00020eb5
   20e54:	0bad0000 	.word	0x0bad0000
   20e58:	00033a86 	.word	0x00033a86
   20e5c:	00030b40 	.word	0x00030b40
   20e60:	20007880 	.word	0x20007880
   20e64:	20002710 	.word	0x20002710
   20e68:	000338f4 	.word	0x000338f4
   20e6c:	20003e28 	.word	0x20003e28
   20e70:	0002108d 	.word	0x0002108d

00020e74 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   20e74:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20e76:	490e      	ldr	r1, [pc, #56]	; (20eb0 <hfxo_stop.constprop.0.isra.0+0x3c>)
   20e78:	f3bf 8f5b 	dmb	ish
   20e7c:	2300      	movs	r3, #0
   20e7e:	e851 2f00 	ldrex	r2, [r1]
   20e82:	2a01      	cmp	r2, #1
   20e84:	d103      	bne.n	20e8e <hfxo_stop.constprop.0.isra.0+0x1a>
   20e86:	e841 3000 	strex	r0, r3, [r1]
   20e8a:	2800      	cmp	r0, #0
   20e8c:	d1f7      	bne.n	20e7e <hfxo_stop.constprop.0.isra.0+0xa>
   20e8e:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   20e92:	d10c      	bne.n	20eae <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   20e94:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   20e98:	3914      	subs	r1, #20
   20e9a:	4620      	mov	r0, r4
   20e9c:	f009 fe3d 	bl	2ab1a <onoff_cancel>

	if (rv == -EALREADY) {
   20ea0:	3078      	adds	r0, #120	; 0x78
   20ea2:	d104      	bne.n	20eae <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
   20ea4:	4620      	mov	r0, r4
}
   20ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20eaa:	f009 be11 	b.w	2aad0 <onoff_release>
   20eae:	bd10      	pop	{r4, pc}
   20eb0:	20003e20 	.word	0x20003e20

00020eb4 <usbd_event_handler>:
{
   20eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20eb8:	b088      	sub	sp, #32
   20eba:	4606      	mov	r6, r0
   20ebc:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
   20ebe:	2214      	movs	r2, #20
   20ec0:	2100      	movs	r1, #0
   20ec2:	f107 000c 	add.w	r0, r7, #12
   20ec6:	f00b fa15 	bl	2c2f4 <memset>
	switch (p_event->type) {
   20eca:	7833      	ldrb	r3, [r6, #0]
   20ecc:	3b01      	subs	r3, #1
   20ece:	2b05      	cmp	r3, #5
   20ed0:	d821      	bhi.n	20f16 <usbd_event_handler+0x62>
   20ed2:	e8df f003 	tbb	[pc, r3]
   20ed6:	039b      	.short	0x039b
   20ed8:	158d1313 	.word	0x158d1313
   20edc:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   20ede:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
   20ee0:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   20ee2:	f7ff feb5 	bl	20c50 <usbd_evt_alloc>
		if (!ev) {
   20ee6:	4603      	mov	r3, r0
   20ee8:	b1a8      	cbz	r0, 20f16 <usbd_event_handler+0x62>
		ev->evt_type = evt.evt_type;
   20eea:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   20eec:	f100 0208 	add.w	r2, r0, #8
   20ef0:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
   20ef4:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   20ef8:	4618      	mov	r0, r3
   20efa:	e034      	b.n	20f66 <usbd_event_handler+0xb2>
	switch (p_event->type) {
   20efc:	2304      	movs	r3, #4
   20efe:	e7ee      	b.n	20ede <usbd_event_handler+0x2a>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   20f00:	f896 8002 	ldrb.w	r8, [r6, #2]
   20f04:	4640      	mov	r0, r8
   20f06:	f7ff fe4f 	bl	20ba8 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   20f0a:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   20f0c:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
   20f0e:	b133      	cbz	r3, 20f1e <usbd_event_handler+0x6a>
   20f10:	3b01      	subs	r3, #1
   20f12:	2b02      	cmp	r3, #2
   20f14:	d968      	bls.n	20fe8 <usbd_event_handler+0x134>
}
   20f16:	3720      	adds	r7, #32
   20f18:	46bd      	mov	sp, r7
   20f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   20f1e:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
   20f22:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   20f24:	d024      	beq.n	20f70 <usbd_event_handler+0xbc>
		switch (p_event->data.eptransfer.status) {
   20f26:	b19c      	cbz	r4, 20f50 <usbd_event_handler+0x9c>
   20f28:	2c03      	cmp	r4, #3
   20f2a:	d0f4      	beq.n	20f16 <usbd_event_handler+0x62>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   20f2c:	466d      	mov	r5, sp
   20f2e:	b088      	sub	sp, #32
   20f30:	466a      	mov	r2, sp
   20f32:	4b37      	ldr	r3, [pc, #220]	; (21010 <usbd_event_handler+0x15c>)
   20f34:	f8c2 801c 	str.w	r8, [r2, #28]
   20f38:	e9c2 3405 	strd	r3, r4, [r2, #20]
   20f3c:	2304      	movs	r3, #4
   20f3e:	f842 3f10 	str.w	r3, [r2, #16]!
   20f42:	4834      	ldr	r0, [pc, #208]	; (21014 <usbd_event_handler+0x160>)
   20f44:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20f48:	f00d fc31 	bl	2e7ae <z_log_msg_static_create.constprop.0>
   20f4c:	46ad      	mov	sp, r5
   20f4e:	e7e2      	b.n	20f16 <usbd_event_handler+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
   20f50:	f7ff fe7e 	bl	20c50 <usbd_evt_alloc>
			if (!ev) {
   20f54:	4603      	mov	r3, r0
   20f56:	2800      	cmp	r0, #0
   20f58:	d0dd      	beq.n	20f16 <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
   20f5a:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   20f5c:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   20f5e:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   20f60:	2203      	movs	r2, #3
   20f62:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   20f64:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
   20f66:	f7ff fe57 	bl	20c18 <usbd_evt_put>
		usbd_work_schedule();
   20f6a:	f7ff fe4d 	bl	20c08 <usbd_work_schedule>
   20f6e:	e7d2      	b.n	20f16 <usbd_event_handler+0x62>
		switch (p_event->data.eptransfer.status) {
   20f70:	b154      	cbz	r4, 20f88 <usbd_event_handler+0xd4>
   20f72:	2c01      	cmp	r4, #1
   20f74:	d1da      	bne.n	20f2c <usbd_event_handler+0x78>
			struct usbd_event *ev = usbd_evt_alloc();
   20f76:	f7ff fe6b 	bl	20c50 <usbd_evt_alloc>
			if (!ev) {
   20f7a:	4603      	mov	r3, r0
   20f7c:	2800      	cmp	r0, #0
   20f7e:	d0ca      	beq.n	20f16 <usbd_event_handler+0x62>
			ep_ctx->read_pending = true;
   20f80:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   20f82:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   20f84:	7304      	strb	r4, [r0, #12]
   20f86:	e7ed      	b.n	20f64 <usbd_event_handler+0xb0>
			struct usbd_event *ev = usbd_evt_alloc();
   20f88:	f7ff fe62 	bl	20c50 <usbd_evt_alloc>
			if (!ev) {
   20f8c:	4604      	mov	r4, r0
   20f8e:	2800      	cmp	r0, #0
   20f90:	d0c1      	beq.n	20f16 <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
   20f92:	2301      	movs	r3, #1
   20f94:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   20f96:	2302      	movs	r3, #2
   20f98:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   20f9a:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   20f9c:	78b0      	ldrb	r0, [r6, #2]
   20f9e:	f105 010c 	add.w	r1, r5, #12
   20fa2:	f00e f97f 	bl	2f2a4 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
   20fa6:	b170      	cbz	r0, 20fc6 <usbd_event_handler+0x112>
				LOG_ERR("_ep_status_get failed! Code: %d",
   20fa8:	466e      	mov	r6, sp
   20faa:	b088      	sub	sp, #32
   20fac:	466a      	mov	r2, sp
   20fae:	4b1a      	ldr	r3, [pc, #104]	; (21018 <usbd_event_handler+0x164>)
   20fb0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20fb4:	2303      	movs	r3, #3
   20fb6:	f842 3f10 	str.w	r3, [r2, #16]!
   20fba:	4816      	ldr	r0, [pc, #88]	; (21014 <usbd_event_handler+0x160>)
   20fbc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20fc0:	f00d fbf5 	bl	2e7ae <z_log_msg_static_create.constprop.0>
   20fc4:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   20fc6:	4a15      	ldr	r2, [pc, #84]	; (2101c <usbd_event_handler+0x168>)
   20fc8:	68e9      	ldr	r1, [r5, #12]
   20fca:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   20fce:	428b      	cmp	r3, r1
   20fd0:	d906      	bls.n	20fe0 <usbd_event_handler+0x12c>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   20fd2:	1a5b      	subs	r3, r3, r1
   20fd4:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   20fd8:	f004 fb92 	bl	25700 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   20fdc:	4620      	mov	r0, r4
   20fde:	e7c2      	b.n	20f66 <usbd_event_handler+0xb2>
				ctx->ctrl_read_len = 0U;
   20fe0:	2300      	movs	r3, #0
   20fe2:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
   20fe6:	e7f9      	b.n	20fdc <usbd_event_handler+0x128>
			usbd_event_transfer_data(p_event);
   20fe8:	4630      	mov	r0, r6
   20fea:	f7ff fe9b 	bl	20d24 <usbd_event_transfer_data>
	if (put_evt) {
   20fee:	e792      	b.n	20f16 <usbd_event_handler+0x62>
		nrfx_usbd_setup_get(&drv_setup);
   20ff0:	1d38      	adds	r0, r7, #4
   20ff2:	f004 fb5f 	bl	256b4 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   20ff6:	797b      	ldrb	r3, [r7, #5]
   20ff8:	2b05      	cmp	r3, #5
   20ffa:	d103      	bne.n	21004 <usbd_event_handler+0x150>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   20ffc:	793b      	ldrb	r3, [r7, #4]
   20ffe:	f013 0f60 	tst.w	r3, #96	; 0x60
   21002:	d088      	beq.n	20f16 <usbd_event_handler+0x62>
			evt.evt.ep_evt.ep = ep_ctx;
   21004:	4b06      	ldr	r3, [pc, #24]	; (21020 <usbd_event_handler+0x16c>)
   21006:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
   21008:	2401      	movs	r4, #1
   2100a:	e76a      	b.n	20ee2 <usbd_event_handler+0x2e>
	switch (p_event->type) {
   2100c:	2402      	movs	r4, #2
   2100e:	e768      	b.n	20ee2 <usbd_event_handler+0x2e>
   21010:	000338c8 	.word	0x000338c8
   21014:	000303b4 	.word	0x000303b4
   21018:	000338ff 	.word	0x000338ff
   2101c:	20003e00 	.word	0x20003e00
   21020:	20003f6c 	.word	0x20003f6c

00021024 <eps_ctx_init>:
{
   21024:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   21026:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   21028:	f064 007f 	orn	r0, r4, #127	; 0x7f
   2102c:	b2c0      	uxtb	r0, r0
   2102e:	f7ff fdbb 	bl	20ba8 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   21032:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   21034:	f00d fba8 	bl	2e788 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   21038:	2c08      	cmp	r4, #8
   2103a:	d1f5      	bne.n	21028 <eps_ctx_init+0x4>
   2103c:	4d0e      	ldr	r5, [pc, #56]	; (21078 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   2103e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   21040:	b2e0      	uxtb	r0, r4
   21042:	f7ff fdb1 	bl	20ba8 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   21046:	6903      	ldr	r3, [r0, #16]
   21048:	b903      	cbnz	r3, 2104c <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   2104a:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   2104c:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   2104e:	f00d fb9b 	bl	2e788 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   21052:	2c08      	cmp	r4, #8
   21054:	f105 0540 	add.w	r5, r5, #64	; 0x40
   21058:	d1f2      	bne.n	21040 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   2105a:	4808      	ldr	r0, [pc, #32]	; (2107c <eps_ctx_init+0x58>)
   2105c:	f00d fb94 	bl	2e788 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   21060:	4b07      	ldr	r3, [pc, #28]	; (21080 <eps_ctx_init+0x5c>)
   21062:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
   21066:	b912      	cbnz	r2, 2106e <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   21068:	4a06      	ldr	r2, [pc, #24]	; (21084 <eps_ctx_init+0x60>)
   2106a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   2106e:	4806      	ldr	r0, [pc, #24]	; (21088 <eps_ctx_init+0x64>)
   21070:	f00d fb8a 	bl	2e788 <ep_ctx_reset>
}
   21074:	2000      	movs	r0, #0
   21076:	bd38      	pop	{r3, r4, r5, pc}
   21078:	20004490 	.word	0x20004490
   2107c:	20003f4c 	.word	0x20003f4c
   21080:	20003e00 	.word	0x20003e00
   21084:	20004090 	.word	0x20004090
   21088:	2000406c 	.word	0x2000406c

0002108c <usbd_work_handler>:
{
   2108c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
   21090:	4ca3      	ldr	r4, [pc, #652]	; (21320 <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   21092:	f8df a290 	ldr.w	sl, [pc, #656]	; 21324 <usbd_work_handler+0x298>
{
   21096:	b086      	sub	sp, #24
   21098:	4680      	mov	r8, r0
   2109a:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
   2109c:	f7ff fdc2 	bl	20c24 <usbd_evt_get>
   210a0:	4606      	mov	r6, r0
   210a2:	b918      	cbnz	r0, 210ac <usbd_work_handler+0x20>
}
   210a4:	3718      	adds	r7, #24
   210a6:	46bd      	mov	sp, r7
   210a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
   210ac:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   210b0:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   210b2:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   210b6:	b93a      	cbnz	r2, 210c8 <usbd_work_handler+0x3c>
   210b8:	2b00      	cmp	r3, #0
   210ba:	f000 80af 	beq.w	2121c <usbd_work_handler+0x190>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   210be:	4899      	ldr	r0, [pc, #612]	; (21324 <usbd_work_handler+0x298>)
   210c0:	4649      	mov	r1, r9
   210c2:	f00e f9c3 	bl	2f44c <k_mem_slab_free>
}
   210c6:	e7e9      	b.n	2109c <usbd_work_handler+0x10>
		switch (ev->evt_type) {
   210c8:	2b04      	cmp	r3, #4
   210ca:	f200 8195 	bhi.w	213f8 <usbd_work_handler+0x36c>
   210ce:	e8df f013 	tbh	[pc, r3, lsl #1]
   210d2:	00a5      	.short	0x00a5
   210d4:	013b0005 	.word	0x013b0005
   210d8:	01780151 	.word	0x01780151
			if (!ctx->attached) {
   210dc:	f818 3c04 	ldrb.w	r3, [r8, #-4]
   210e0:	b983      	cbnz	r3, 21104 <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
   210e2:	68b3      	ldr	r3, [r6, #8]
   210e4:	466d      	mov	r5, sp
   210e6:	b088      	sub	sp, #32
   210e8:	7a5b      	ldrb	r3, [r3, #9]
   210ea:	466a      	mov	r2, sp
   210ec:	498e      	ldr	r1, [pc, #568]	; (21328 <usbd_work_handler+0x29c>)
   210ee:	488f      	ldr	r0, [pc, #572]	; (2132c <usbd_work_handler+0x2a0>)
   210f0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   210f4:	2303      	movs	r3, #3
   210f6:	f842 3f10 	str.w	r3, [r2, #16]!
   210fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   210fe:	f00d fb56 	bl	2e7ae <z_log_msg_static_create.constprop.0>
   21102:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
   21104:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   21106:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
   21108:	2b03      	cmp	r3, #3
   2110a:	d839      	bhi.n	21180 <usbd_work_handler+0xf4>
   2110c:	e8df f003 	tbb	[pc, r3]
   21110:	736e3f02 	.word	0x736e3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   21114:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   21116:	2208      	movs	r2, #8
   21118:	2100      	movs	r1, #0
   2111a:	4630      	mov	r0, r6
   2111c:	f00b f8ea 	bl	2c2f4 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   21120:	4b83      	ldr	r3, [pc, #524]	; (21330 <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   21122:	4884      	ldr	r0, [pc, #528]	; (21334 <usbd_work_handler+0x2a8>)
   21124:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   21128:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   2112a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   2112e:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   21130:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   21134:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   21138:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   2113c:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   2113e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   21142:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   21146:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   2114a:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   2114c:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   21150:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   21154:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   21158:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   2115a:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   2115c:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   2115e:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   21160:	f00b f8bd 	bl	2c2de <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   21164:	682b      	ldr	r3, [r5, #0]
   21166:	7a68      	ldrb	r0, [r5, #9]
   21168:	2100      	movs	r1, #0
   2116a:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   2116c:	f996 3000 	ldrsb.w	r3, [r6]
   21170:	2b00      	cmp	r3, #0
   21172:	db08      	blt.n	21186 <usbd_work_handler+0xfa>
   21174:	88f3      	ldrh	r3, [r6, #6]
   21176:	b133      	cbz	r3, 21186 <usbd_work_handler+0xfa>
		ctx->ctrl_read_len = usbd_setup->wLength;
   21178:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   2117c:	f004 fac0 	bl	25700 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   21180:	4649      	mov	r1, r9
   21182:	4650      	mov	r0, sl
   21184:	e79d      	b.n	210c2 <usbd_work_handler+0x36>
		ctx->ctrl_read_len = 0U;
   21186:	2300      	movs	r3, #0
   21188:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   2118c:	e7f8      	b.n	21180 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_pending) {
   2118e:	7f6b      	ldrb	r3, [r5, #29]
   21190:	2b00      	cmp	r3, #0
   21192:	d0f5      	beq.n	21180 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_complete) {
   21194:	7f2b      	ldrb	r3, [r5, #28]
   21196:	2b00      	cmp	r3, #0
   21198:	d0f2      	beq.n	21180 <usbd_work_handler+0xf4>
	ep_ctx->read_pending = false;
   2119a:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2119c:	4866      	ldr	r0, [pc, #408]	; (21338 <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
   2119e:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   211a0:	f04f 32ff 	mov.w	r2, #4294967295
   211a4:	f04f 33ff 	mov.w	r3, #4294967295
	ep_ctx->read_complete = false;
   211a8:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   211aa:	f00d fb03 	bl	2e7b4 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   211ae:	696b      	ldr	r3, [r5, #20]
   211b0:	603b      	str	r3, [r7, #0]
   211b2:	686b      	ldr	r3, [r5, #4]
   211b4:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   211b8:	4639      	mov	r1, r7
   211ba:	7a68      	ldrb	r0, [r5, #9]
   211bc:	f004 f8a6 	bl	2530c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   211c0:	4b5e      	ldr	r3, [pc, #376]	; (2133c <usbd_work_handler+0x2b0>)
   211c2:	4298      	cmp	r0, r3
   211c4:	d00e      	beq.n	211e4 <usbd_work_handler+0x158>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
   211c6:	466d      	mov	r5, sp
   211c8:	b088      	sub	sp, #32
   211ca:	466a      	mov	r2, sp
   211cc:	4b5c      	ldr	r3, [pc, #368]	; (21340 <usbd_work_handler+0x2b4>)
   211ce:	e9c2 3005 	strd	r3, r0, [r2, #20]
   211d2:	2303      	movs	r3, #3
   211d4:	f842 3f10 	str.w	r3, [r2, #16]!
   211d8:	4854      	ldr	r0, [pc, #336]	; (2132c <usbd_work_handler+0x2a0>)
   211da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   211de:	f00d fae6 	bl	2e7ae <z_log_msg_static_create.constprop.0>
   211e2:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
   211e4:	4854      	ldr	r0, [pc, #336]	; (21338 <usbd_work_handler+0x2ac>)
   211e6:	f00d fae7 	bl	2e7b8 <k_mutex_unlock.isra.0>
   211ea:	e7c9      	b.n	21180 <usbd_work_handler+0xf4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   211ec:	682b      	ldr	r3, [r5, #0]
   211ee:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   211f0:	7a68      	ldrb	r0, [r5, #9]
   211f2:	4798      	blx	r3
		break;
   211f4:	e7c4      	b.n	21180 <usbd_work_handler+0xf4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   211f6:	7aab      	ldrb	r3, [r5, #10]
   211f8:	b96b      	cbnz	r3, 21216 <usbd_work_handler+0x18a>
   211fa:	7feb      	ldrb	r3, [r5, #31]
   211fc:	b95b      	cbnz	r3, 21216 <usbd_work_handler+0x18a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   211fe:	484e      	ldr	r0, [pc, #312]	; (21338 <usbd_work_handler+0x2ac>)
   21200:	f04f 32ff 	mov.w	r2, #4294967295
   21204:	f04f 33ff 	mov.w	r3, #4294967295
   21208:	f00d fad4 	bl	2e7b4 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   2120c:	f004 faa8 	bl	25760 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   21210:	4849      	ldr	r0, [pc, #292]	; (21338 <usbd_work_handler+0x2ac>)
   21212:	f00d fad1 	bl	2e7b8 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   21216:	682b      	ldr	r3, [r5, #0]
   21218:	2102      	movs	r1, #2
   2121a:	e7e9      	b.n	211f0 <usbd_work_handler+0x164>
	switch (pwr_evt->state) {
   2121c:	7a33      	ldrb	r3, [r6, #8]
   2121e:	2b04      	cmp	r3, #4
   21220:	d8ae      	bhi.n	21180 <usbd_work_handler+0xf4>
   21222:	e8df f003 	tbb	[pc, r3]
   21226:	0359      	.short	0x0359
   21228:	6723      	.short	0x6723
   2122a:	73          	.byte	0x73
   2122b:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   2122c:	f003 fff6 	bl	2521c <nrfx_usbd_is_enabled>
   21230:	4605      	mov	r5, r0
   21232:	2800      	cmp	r0, #0
   21234:	d1a4      	bne.n	21180 <usbd_work_handler+0xf4>
			nrfx_usbd_enable();
   21236:	f003 ff2d 	bl	25094 <nrfx_usbd_enable>
   2123a:	f3bf 8f5b 	dmb	ish
   2123e:	4941      	ldr	r1, [pc, #260]	; (21344 <usbd_work_handler+0x2b8>)
   21240:	2301      	movs	r3, #1
   21242:	e851 2f00 	ldrex	r2, [r1]
   21246:	2a00      	cmp	r2, #0
   21248:	d103      	bne.n	21252 <usbd_work_handler+0x1c6>
   2124a:	e841 3000 	strex	r0, r3, [r1]
   2124e:	2800      	cmp	r0, #0
   21250:	d1f7      	bne.n	21242 <usbd_work_handler+0x1b6>
   21252:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   21256:	d193      	bne.n	21180 <usbd_work_handler+0xf4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   21258:	f841 5c08 	str.w	r5, [r1, #-8]
   2125c:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   21260:	69e0      	ldr	r0, [r4, #28]
   21262:	6163      	str	r3, [r4, #20]
   21264:	3914      	subs	r1, #20
   21266:	f009 fbdb 	bl	2aa20 <onoff_request>
   2126a:	e789      	b.n	21180 <usbd_work_handler+0xf4>
	switch (pwr_evt->state) {
   2126c:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   2126e:	f065 007f 	orn	r0, r5, #127	; 0x7f
   21272:	b2c0      	uxtb	r0, r0
   21274:	f7ff fc98 	bl	20ba8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   21278:	7a03      	ldrb	r3, [r0, #8]
   2127a:	b113      	cbz	r3, 21282 <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2127c:	7a40      	ldrb	r0, [r0, #9]
   2127e:	f004 fc1f 	bl	25ac0 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   21282:	3501      	adds	r5, #1
   21284:	2d08      	cmp	r5, #8
   21286:	d1f2      	bne.n	2126e <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
   21288:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   2128c:	b11b      	cbz	r3, 21296 <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2128e:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   21292:	f004 fc15 	bl	25ac0 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   21296:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   21298:	b2e8      	uxtb	r0, r5
   2129a:	f7ff fc85 	bl	20ba8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2129e:	7a03      	ldrb	r3, [r0, #8]
   212a0:	b113      	cbz	r3, 212a8 <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   212a2:	7a40      	ldrb	r0, [r0, #9]
   212a4:	f004 fc0c 	bl	25ac0 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   212a8:	3501      	adds	r5, #1
   212aa:	2d08      	cmp	r5, #8
   212ac:	d1f4      	bne.n	21298 <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
   212ae:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   212b2:	b11b      	cbz	r3, 212bc <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   212b4:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   212b8:	f004 fc02 	bl	25ac0 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   212bc:	2001      	movs	r0, #1
   212be:	f003 ff8f 	bl	251e0 <nrfx_usbd_start>
		ctx->ready = true;
   212c2:	2301      	movs	r3, #1
   212c4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   212c8:	6823      	ldr	r3, [r4, #0]
   212ca:	2b00      	cmp	r3, #0
   212cc:	f43f af58 	beq.w	21180 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   212d0:	2100      	movs	r1, #0
   212d2:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
   212d4:	4798      	blx	r3
   212d6:	e753      	b.n	21180 <usbd_work_handler+0xf4>
		ctx->ready = false;
   212d8:	2500      	movs	r5, #0
   212da:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   212de:	f004 fbab 	bl	25a38 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   212e2:	f7ff fdc7 	bl	20e74 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   212e6:	6823      	ldr	r3, [r4, #0]
   212e8:	2b00      	cmp	r3, #0
   212ea:	f43f af49 	beq.w	21180 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   212ee:	4629      	mov	r1, r5
   212f0:	2004      	movs	r0, #4
   212f2:	e7ef      	b.n	212d4 <usbd_work_handler+0x248>
		if (dev_ready()) {
   212f4:	2a00      	cmp	r2, #0
   212f6:	f43f af43 	beq.w	21180 <usbd_work_handler+0xf4>
			nrfx_usbd_suspend();
   212fa:	f003 ff99 	bl	25230 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   212fe:	6823      	ldr	r3, [r4, #0]
   21300:	2b00      	cmp	r3, #0
   21302:	f43f af3d 	beq.w	21180 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   21306:	2100      	movs	r1, #0
   21308:	2005      	movs	r0, #5
   2130a:	e7e3      	b.n	212d4 <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
   2130c:	6823      	ldr	r3, [r4, #0]
   2130e:	2b00      	cmp	r3, #0
   21310:	f43f af36 	beq.w	21180 <usbd_work_handler+0xf4>
   21314:	2a00      	cmp	r2, #0
   21316:	f43f af33 	beq.w	21180 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_RESUME, NULL);
   2131a:	2100      	movs	r1, #0
   2131c:	2006      	movs	r0, #6
   2131e:	e7d9      	b.n	212d4 <usbd_work_handler+0x248>
   21320:	20003e00 	.word	0x20003e00
   21324:	20000c10 	.word	0x20000c10
   21328:	0003391f 	.word	0x0003391f
   2132c:	000303b4 	.word	0x000303b4
   21330:	40027000 	.word	0x40027000
   21334:	20003e04 	.word	0x20003e04
   21338:	20003e38 	.word	0x20003e38
   2133c:	0bad0000 	.word	0x0bad0000
   21340:	00033945 	.word	0x00033945
   21344:	20003e20 	.word	0x20003e20
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   21348:	f108 0510 	add.w	r5, r8, #16
   2134c:	f04f 33ff 	mov.w	r3, #4294967295
   21350:	f04f 32ff 	mov.w	r2, #4294967295
   21354:	4628      	mov	r0, r5
   21356:	f00d fa2d 	bl	2e7b4 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   2135a:	f7ff fe63 	bl	21024 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   2135e:	4628      	mov	r0, r5
   21360:	f00d fa2a 	bl	2e7b8 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   21364:	f858 3c28 	ldr.w	r3, [r8, #-40]
   21368:	2b00      	cmp	r3, #0
   2136a:	f43f af09 	beq.w	21180 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_RESET, NULL);
   2136e:	2100      	movs	r1, #0
   21370:	2001      	movs	r0, #1
   21372:	e7af      	b.n	212d4 <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
   21374:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   21378:	b193      	cbz	r3, 213a0 <usbd_work_handler+0x314>
		ep_ctx->read_pending = true;
   2137a:	2501      	movs	r5, #1
   2137c:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   21380:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   21384:	f7ff fc64 	bl	20c50 <usbd_evt_alloc>
		if (!ev) {
   21388:	b990      	cbnz	r0, 213b0 <usbd_work_handler+0x324>
			LOG_ERR("Failed to alloc evt");
   2138a:	4b23      	ldr	r3, [pc, #140]	; (21418 <usbd_work_handler+0x38c>)
   2138c:	617b      	str	r3, [r7, #20]
   2138e:	2302      	movs	r3, #2
   21390:	4822      	ldr	r0, [pc, #136]	; (2141c <usbd_work_handler+0x390>)
   21392:	613b      	str	r3, [r7, #16]
   21394:	f107 0210 	add.w	r2, r7, #16
   21398:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2139c:	f00d fa07 	bl	2e7ae <z_log_msg_static_create.constprop.0>
			if (ctx->status_cb) {
   213a0:	f858 3c28 	ldr.w	r3, [r8, #-40]
   213a4:	2b00      	cmp	r3, #0
   213a6:	f43f aeeb 	beq.w	21180 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SOF, NULL);
   213aa:	2100      	movs	r1, #0
   213ac:	200a      	movs	r0, #10
   213ae:	e791      	b.n	212d4 <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
   213b0:	4a1b      	ldr	r2, [pc, #108]	; (21420 <usbd_work_handler+0x394>)
		ev->evt_type = USBD_EVT_EP;
   213b2:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   213b4:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   213b6:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   213b8:	f7ff fc2e 	bl	20c18 <usbd_evt_put>
		usbd_work_schedule();
   213bc:	f7ff fc24 	bl	20c08 <usbd_work_schedule>
   213c0:	e7ee      	b.n	213a0 <usbd_work_handler+0x314>
				LOG_ERR("USBD event queue full!");
   213c2:	4b18      	ldr	r3, [pc, #96]	; (21424 <usbd_work_handler+0x398>)
   213c4:	617b      	str	r3, [r7, #20]
   213c6:	2302      	movs	r3, #2
   213c8:	613b      	str	r3, [r7, #16]
   213ca:	f107 0210 	add.w	r2, r7, #16
   213ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   213d2:	4812      	ldr	r0, [pc, #72]	; (2141c <usbd_work_handler+0x390>)
   213d4:	f00d f9eb 	bl	2e7ae <z_log_msg_static_create.constprop.0>
	nrfx_power_usbevt_disable();
   213d8:	f00d fedb 	bl	2f192 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   213dc:	f004 fb2c 	bl	25a38 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   213e0:	f003 fe4e 	bl	25080 <nrfx_usbd_uninit>
	usbd_evt_flush();
   213e4:	f7ff fc26 	bl	20c34 <usbd_evt_flush>
	ret = eps_ctx_init();
   213e8:	f7ff fe1c 	bl	21024 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   213ec:	f00d feca 	bl	2f184 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   213f0:	480d      	ldr	r0, [pc, #52]	; (21428 <usbd_work_handler+0x39c>)
   213f2:	f003 ff49 	bl	25288 <nrfx_usbd_init>
}
   213f6:	e6c3      	b.n	21180 <usbd_work_handler+0xf4>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   213f8:	466d      	mov	r5, sp
   213fa:	b088      	sub	sp, #32
   213fc:	466a      	mov	r2, sp
   213fe:	490b      	ldr	r1, [pc, #44]	; (2142c <usbd_work_handler+0x3a0>)
   21400:	4806      	ldr	r0, [pc, #24]	; (2141c <usbd_work_handler+0x390>)
		switch (ev->evt_type) {
   21402:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   21406:	2303      	movs	r3, #3
   21408:	f842 3f10 	str.w	r3, [r2, #16]!
   2140c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21410:	f00d f9cd 	bl	2e7ae <z_log_msg_static_create.constprop.0>
   21414:	46ad      	mov	sp, r5
   21416:	e6b3      	b.n	21180 <usbd_work_handler+0xf4>
   21418:	0003396b 	.word	0x0003396b
   2141c:	000303b4 	.word	0x000303b4
   21420:	2000406c 	.word	0x2000406c
   21424:	0003397f 	.word	0x0003397f
   21428:	00020eb5 	.word	0x00020eb5
   2142c:	00033996 	.word	0x00033996

00021430 <usb_dc_attach>:
{
   21430:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   21432:	4d16      	ldr	r5, [pc, #88]	; (2148c <usb_dc_attach+0x5c>)
   21434:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   21438:	bb2c      	cbnz	r4, 21486 <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
   2143a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2143e:	f00e f84a 	bl	2f4d6 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   21442:	4620      	mov	r0, r4
   21444:	f000 fbc2 	bl	21bcc <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   21448:	4622      	mov	r2, r4
   2144a:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
   2144c:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2144e:	2027      	movs	r0, #39	; 0x27
   21450:	f7f5 fcee 	bl	16e30 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
   21454:	f00d fe96 	bl	2f184 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   21458:	f7ff fde4 	bl	21024 <eps_ctx_init>
	if (ret == 0) {
   2145c:	4604      	mov	r4, r0
   2145e:	b910      	cbnz	r0, 21466 <usb_dc_attach+0x36>
		ctx->attached = true;
   21460:	2301      	movs	r3, #1
   21462:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   21466:	4b0a      	ldr	r3, [pc, #40]	; (21490 <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   21468:	681b      	ldr	r3, [r3, #0]
   2146a:	b10b      	cbz	r3, 21470 <usb_dc_attach+0x40>
		usbd_work_schedule();
   2146c:	f7ff fbcc 	bl	20c08 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   21470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21474:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   21478:	07db      	lsls	r3, r3, #31
   2147a:	d502      	bpl.n	21482 <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   2147c:	2000      	movs	r0, #0
   2147e:	f7ff fc23 	bl	20cc8 <usb_dc_power_event_handler>
}
   21482:	4620      	mov	r0, r4
   21484:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   21486:	2400      	movs	r4, #0
   21488:	e7fb      	b.n	21482 <usb_dc_attach+0x52>
   2148a:	bf00      	nop
   2148c:	20003e00 	.word	0x20003e00
   21490:	20000d34 	.word	0x20000d34

00021494 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   21494:	4b07      	ldr	r3, [pc, #28]	; (214b4 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   21496:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   2149a:	b13a      	cbz	r2, 214ac <usb_dc_set_address+0x18>
   2149c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
   214a0:	2b00      	cmp	r3, #0
   214a2:	bf14      	ite	ne
   214a4:	2000      	movne	r0, #0
   214a6:	f06f 0012 	mvneq.w	r0, #18
   214aa:	4770      	bx	lr
   214ac:	f06f 0012 	mvn.w	r0, #18
}
   214b0:	4770      	bx	lr
   214b2:	bf00      	nop
   214b4:	20003e00 	.word	0x20003e00

000214b8 <usb_dc_ep_check_cap>:
{
   214b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   214ba:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   214bc:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   214be:	791b      	ldrb	r3, [r3, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   214c0:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   214c4:	b97b      	cbnz	r3, 214e6 <usb_dc_ep_check_cap+0x2e>
   214c6:	b158      	cbz	r0, 214e0 <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
   214c8:	4b10      	ldr	r3, [pc, #64]	; (2150c <usb_dc_ep_check_cap+0x54>)
		LOG_ERR("invalid endpoint index/address");
   214ca:	9305      	str	r3, [sp, #20]
   214cc:	2302      	movs	r3, #2
   214ce:	9304      	str	r3, [sp, #16]
   214d0:	aa04      	add	r2, sp, #16
   214d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   214d6:	480e      	ldr	r0, [pc, #56]	; (21510 <usb_dc_ep_check_cap+0x58>)
   214d8:	f00d f969 	bl	2e7ae <z_log_msg_static_create.constprop.0>
		return -1;
   214dc:	f04f 30ff 	mov.w	r0, #4294967295
}
   214e0:	b007      	add	sp, #28
   214e2:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   214e6:	2808      	cmp	r0, #8
   214e8:	d901      	bls.n	214ee <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
   214ea:	4b0a      	ldr	r3, [pc, #40]	; (21514 <usb_dc_ep_check_cap+0x5c>)
   214ec:	e7ed      	b.n	214ca <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   214ee:	2b01      	cmp	r3, #1
   214f0:	d109      	bne.n	21506 <usb_dc_ep_check_cap+0x4e>
   214f2:	0713      	lsls	r3, r2, #28
   214f4:	d407      	bmi.n	21506 <usb_dc_ep_check_cap+0x4e>
		LOG_WRN("invalid endpoint type");
   214f6:	4b08      	ldr	r3, [pc, #32]	; (21518 <usb_dc_ep_check_cap+0x60>)
   214f8:	9305      	str	r3, [sp, #20]
   214fa:	2302      	movs	r3, #2
   214fc:	9304      	str	r3, [sp, #16]
   214fe:	aa04      	add	r2, sp, #16
   21500:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   21504:	e7e7      	b.n	214d6 <usb_dc_ep_check_cap+0x1e>
	return 0;
   21506:	2000      	movs	r0, #0
   21508:	e7ea      	b.n	214e0 <usb_dc_ep_check_cap+0x28>
   2150a:	bf00      	nop
   2150c:	000339ad 	.word	0x000339ad
   21510:	000303b4 	.word	0x000303b4
   21514:	000339cc 	.word	0x000339cc
   21518:	000339eb 	.word	0x000339eb

0002151c <usb_dc_ep_configure>:
{
   2151c:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
   2151e:	4b16      	ldr	r3, [pc, #88]	; (21578 <usb_dc_ep_configure+0x5c>)
	if (!dev_attached()) {
   21520:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   21524:	b087      	sub	sp, #28
   21526:	4604      	mov	r4, r0
	if (!dev_attached()) {
   21528:	b31b      	cbz	r3, 21572 <usb_dc_ep_configure+0x56>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   2152a:	7805      	ldrb	r5, [r0, #0]
   2152c:	4628      	mov	r0, r5
   2152e:	f7ff fb3b 	bl	20ba8 <endpoint_ctx>
	if (!ep_ctx) {
   21532:	b1b0      	cbz	r0, 21562 <usb_dc_ep_configure+0x46>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   21534:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   21536:	7923      	ldrb	r3, [r4, #4]
   21538:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   2153a:	8863      	ldrh	r3, [r4, #2]
   2153c:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   2153e:	7820      	ldrb	r0, [r4, #0]
   21540:	8861      	ldrh	r1, [r4, #2]
   21542:	f010 0f08 	tst.w	r0, #8
   21546:	d110      	bne.n	2156a <usb_dc_ep_configure+0x4e>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   21548:	1e4b      	subs	r3, r1, #1
   2154a:	420b      	tst	r3, r1
   2154c:	d00d      	beq.n	2156a <usb_dc_ep_configure+0x4e>
			LOG_ERR("EP max packet size must be a power of 2");
   2154e:	4b0b      	ldr	r3, [pc, #44]	; (2157c <usb_dc_ep_configure+0x60>)
   21550:	9305      	str	r3, [sp, #20]
   21552:	480b      	ldr	r0, [pc, #44]	; (21580 <usb_dc_ep_configure+0x64>)
   21554:	2302      	movs	r3, #2
   21556:	aa04      	add	r2, sp, #16
   21558:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2155c:	9304      	str	r3, [sp, #16]
   2155e:	f00d f926 	bl	2e7ae <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   21562:	f06f 0015 	mvn.w	r0, #21
}
   21566:	b007      	add	sp, #28
   21568:	bd30      	pop	{r4, r5, pc}
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   2156a:	f00d fe96 	bl	2f29a <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   2156e:	2000      	movs	r0, #0
   21570:	e7f9      	b.n	21566 <usb_dc_ep_configure+0x4a>
		return -ENODEV;
   21572:	f06f 0012 	mvn.w	r0, #18
   21576:	e7f6      	b.n	21566 <usb_dc_ep_configure+0x4a>
   21578:	20003e00 	.word	0x20003e00
   2157c:	00033a01 	.word	0x00033a01
   21580:	000303b4 	.word	0x000303b4

00021584 <usb_dc_ep_set_stall>:
{
   21584:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
   21586:	4b19      	ldr	r3, [pc, #100]	; (215ec <usb_dc_ep_set_stall+0x68>)
	if (!dev_attached() || !dev_ready()) {
   21588:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   2158c:	b087      	sub	sp, #28
   2158e:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   21590:	b342      	cbz	r2, 215e4 <usb_dc_ep_set_stall+0x60>
   21592:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   21596:	b32b      	cbz	r3, 215e4 <usb_dc_ep_set_stall+0x60>
	ep_ctx = endpoint_ctx(ep);
   21598:	f7ff fb06 	bl	20ba8 <endpoint_ctx>
	if (!ep_ctx) {
   2159c:	4604      	mov	r4, r0
   2159e:	b918      	cbnz	r0, 215a8 <usb_dc_ep_set_stall+0x24>
		return -EINVAL;
   215a0:	f06f 0015 	mvn.w	r0, #21
}
   215a4:	b007      	add	sp, #28
   215a6:	bd30      	pop	{r4, r5, pc}
	switch (ep_ctx->cfg.type) {
   215a8:	7a83      	ldrb	r3, [r0, #10]
   215aa:	2b01      	cmp	r3, #1
   215ac:	d00f      	beq.n	215ce <usb_dc_ep_set_stall+0x4a>
   215ae:	d907      	bls.n	215c0 <usb_dc_ep_set_stall+0x3c>
   215b0:	3b02      	subs	r3, #2
   215b2:	2b01      	cmp	r3, #1
   215b4:	d907      	bls.n	215c6 <usb_dc_ep_set_stall+0x42>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   215b6:	6963      	ldr	r3, [r4, #20]
   215b8:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   215ba:	2000      	movs	r0, #0
   215bc:	60e0      	str	r0, [r4, #12]
	return 0;
   215be:	e7f1      	b.n	215a4 <usb_dc_ep_set_stall+0x20>
		nrfx_usbd_setup_stall();
   215c0:	f004 f8d6 	bl	25770 <nrfx_usbd_setup_stall>
		break;
   215c4:	e7f7      	b.n	215b6 <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   215c6:	4628      	mov	r0, r5
   215c8:	f004 f846 	bl	25658 <nrfx_usbd_ep_stall>
		break;
   215cc:	e7f3      	b.n	215b6 <usb_dc_ep_set_stall+0x32>
		LOG_ERR("STALL unsupported on ISO endpoint");
   215ce:	4b08      	ldr	r3, [pc, #32]	; (215f0 <usb_dc_ep_set_stall+0x6c>)
   215d0:	9305      	str	r3, [sp, #20]
   215d2:	4808      	ldr	r0, [pc, #32]	; (215f4 <usb_dc_ep_set_stall+0x70>)
   215d4:	2302      	movs	r3, #2
   215d6:	aa04      	add	r2, sp, #16
   215d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   215dc:	9304      	str	r3, [sp, #16]
   215de:	f00d f8e6 	bl	2e7ae <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   215e2:	e7dd      	b.n	215a0 <usb_dc_ep_set_stall+0x1c>
		return -ENODEV;
   215e4:	f06f 0012 	mvn.w	r0, #18
   215e8:	e7dc      	b.n	215a4 <usb_dc_ep_set_stall+0x20>
   215ea:	bf00      	nop
   215ec:	20003e00 	.word	0x20003e00
   215f0:	00033a29 	.word	0x00033a29
   215f4:	000303b4 	.word	0x000303b4

000215f8 <usb_dc_ep_clear_stall>:
{
   215f8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   215fa:	4b0e      	ldr	r3, [pc, #56]	; (21634 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   215fc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   21600:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   21602:	b182      	cbz	r2, 21626 <usb_dc_ep_clear_stall+0x2e>
   21604:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   21608:	b16b      	cbz	r3, 21626 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   2160a:	f7ff facd 	bl	20ba8 <endpoint_ctx>
	if (!ep_ctx) {
   2160e:	b168      	cbz	r0, 2162c <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   21610:	f015 0408 	ands.w	r4, r5, #8
   21614:	d10a      	bne.n	2162c <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   21616:	4628      	mov	r0, r5
   21618:	f004 f840 	bl	2569c <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   2161c:	4628      	mov	r0, r5
   2161e:	f004 faa3 	bl	25b68 <nrfx_usbd_ep_stall_clear>
	return 0;
   21622:	4620      	mov	r0, r4
}
   21624:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   21626:	f06f 0012 	mvn.w	r0, #18
   2162a:	e7fb      	b.n	21624 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   2162c:	f06f 0015 	mvn.w	r0, #21
   21630:	e7f8      	b.n	21624 <usb_dc_ep_clear_stall+0x2c>
   21632:	bf00      	nop
   21634:	20003e00 	.word	0x20003e00

00021638 <usb_dc_ep_is_stalled>:
{
   21638:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   2163a:	4b0c      	ldr	r3, [pc, #48]	; (2166c <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   2163c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   21640:	4605      	mov	r5, r0
   21642:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   21644:	b162      	cbz	r2, 21660 <usb_dc_ep_is_stalled+0x28>
   21646:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   2164a:	b14b      	cbz	r3, 21660 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   2164c:	f7ff faac 	bl	20ba8 <endpoint_ctx>
	if (!ep_ctx) {
   21650:	b148      	cbz	r0, 21666 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   21652:	b144      	cbz	r4, 21666 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   21654:	4628      	mov	r0, r5
   21656:	f004 f807 	bl	25668 <nrfx_usbd_ep_stall_check>
   2165a:	7020      	strb	r0, [r4, #0]
	return 0;
   2165c:	2000      	movs	r0, #0
}
   2165e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   21660:	f06f 0012 	mvn.w	r0, #18
   21664:	e7fb      	b.n	2165e <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   21666:	f06f 0015 	mvn.w	r0, #21
   2166a:	e7f8      	b.n	2165e <usb_dc_ep_is_stalled+0x26>
   2166c:	20003e00 	.word	0x20003e00

00021670 <usb_dc_ep_enable>:
{
   21670:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   21672:	4e13      	ldr	r6, [pc, #76]	; (216c0 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   21674:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
   21678:	4604      	mov	r4, r0
	if (!dev_attached()) {
   2167a:	b1c3      	cbz	r3, 216ae <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
   2167c:	f7ff fa94 	bl	20ba8 <endpoint_ctx>
	if (!ep_ctx) {
   21680:	4605      	mov	r5, r0
   21682:	b1b8      	cbz	r0, 216b4 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   21684:	0723      	lsls	r3, r4, #28
   21686:	d405      	bmi.n	21694 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   21688:	4620      	mov	r0, r4
   2168a:	f004 f807 	bl	2569c <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   2168e:	4620      	mov	r0, r4
   21690:	f004 fa6a 	bl	25b68 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   21694:	7a2b      	ldrb	r3, [r5, #8]
   21696:	b983      	cbnz	r3, 216ba <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
   21698:	2301      	movs	r3, #1
   2169a:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   2169c:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
   216a0:	b90b      	cbnz	r3, 216a6 <usb_dc_ep_enable+0x36>
	return 0;
   216a2:	2000      	movs	r0, #0
}
   216a4:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   216a6:	4620      	mov	r0, r4
   216a8:	f004 fa0a 	bl	25ac0 <nrfx_usbd_ep_enable>
   216ac:	e7f9      	b.n	216a2 <usb_dc_ep_enable+0x32>
		return -ENODEV;
   216ae:	f06f 0012 	mvn.w	r0, #18
   216b2:	e7f7      	b.n	216a4 <usb_dc_ep_enable+0x34>
		return -EINVAL;
   216b4:	f06f 0015 	mvn.w	r0, #21
   216b8:	e7f4      	b.n	216a4 <usb_dc_ep_enable+0x34>
		return -EALREADY;
   216ba:	f06f 0077 	mvn.w	r0, #119	; 0x77
   216be:	e7f1      	b.n	216a4 <usb_dc_ep_enable+0x34>
   216c0:	20003e00 	.word	0x20003e00

000216c4 <usb_dc_ep_write>:
{
   216c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
   216c8:	f8df 9124 	ldr.w	r9, [pc, #292]	; 217f0 <usb_dc_ep_write+0x12c>
{
   216cc:	b084      	sub	sp, #16
   216ce:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
   216d0:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
   216d4:	af00      	add	r7, sp, #0
   216d6:	4680      	mov	r8, r0
   216d8:	468a      	mov	sl, r1
   216da:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
   216dc:	2b00      	cmp	r3, #0
   216de:	f000 8083 	beq.w	217e8 <usb_dc_ep_write+0x124>
   216e2:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
   216e6:	2b00      	cmp	r3, #0
   216e8:	d07e      	beq.n	217e8 <usb_dc_ep_write+0x124>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   216ea:	f010 0f80 	tst.w	r0, #128	; 0x80
   216ee:	d014      	beq.n	2171a <usb_dc_ep_write+0x56>
	ep_ctx = endpoint_ctx(ep);
   216f0:	f7ff fa5a 	bl	20ba8 <endpoint_ctx>
	if (!ep_ctx) {
   216f4:	4604      	mov	r4, r0
   216f6:	b180      	cbz	r0, 2171a <usb_dc_ep_write+0x56>
	if (!ep_ctx->cfg.en) {
   216f8:	7a03      	ldrb	r3, [r0, #8]
   216fa:	b9ab      	cbnz	r3, 21728 <usb_dc_ep_write+0x64>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   216fc:	466c      	mov	r4, sp
   216fe:	b088      	sub	sp, #32
   21700:	466a      	mov	r2, sp
   21702:	4b3c      	ldr	r3, [pc, #240]	; (217f4 <usb_dc_ep_write+0x130>)
   21704:	483c      	ldr	r0, [pc, #240]	; (217f8 <usb_dc_ep_write+0x134>)
   21706:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2170a:	2303      	movs	r3, #3
   2170c:	f842 3f10 	str.w	r3, [r2, #16]!
   21710:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21714:	f00d f84b 	bl	2e7ae <z_log_msg_static_create.constprop.0>
   21718:	46a5      	mov	sp, r4
		return -EINVAL;
   2171a:	f06f 0415 	mvn.w	r4, #21
}
   2171e:	4620      	mov	r0, r4
   21720:	3710      	adds	r7, #16
   21722:	46bd      	mov	sp, r7
   21724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   21728:	f04f 33ff 	mov.w	r3, #4294967295
   2172c:	f04f 32ff 	mov.w	r2, #4294967295
   21730:	f109 0038 	add.w	r0, r9, #56	; 0x38
   21734:	f00d f83e 	bl	2e7b4 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   21738:	7fa3      	ldrb	r3, [r4, #30]
   2173a:	b133      	cbz	r3, 2174a <usb_dc_ep_write+0x86>
		k_mutex_unlock(&ctx->drv_lock);
   2173c:	f109 0038 	add.w	r0, r9, #56	; 0x38
   21740:	f00d f83a 	bl	2e7b8 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   21744:	f06f 040a 	mvn.w	r4, #10
   21748:	e7e9      	b.n	2171e <usb_dc_ep_write+0x5a>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   2174a:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
   2174c:	b355      	cbz	r5, 217a4 <usb_dc_ep_write+0xe0>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   2174e:	2b00      	cmp	r3, #0
   21750:	d038      	beq.n	217c4 <usb_dc_ep_write+0x100>
	ep_ctx->write_in_progress = true;
   21752:	2301      	movs	r3, #1
   21754:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   21756:	f04f 0900 	mov.w	r9, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   2175a:	1d39      	adds	r1, r7, #4
   2175c:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   2175e:	e9c7 a501 	strd	sl, r5, [r7, #4]
   21762:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   21766:	f003 fdd1 	bl	2530c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   2176a:	4b24      	ldr	r3, [pc, #144]	; (217fc <usb_dc_ep_write+0x138>)
   2176c:	4298      	cmp	r0, r3
   2176e:	d037      	beq.n	217e0 <usb_dc_ep_write+0x11c>
		ep_ctx->write_in_progress = false;
   21770:	f884 901e 	strb.w	r9, [r4, #30]
		if (ret_bytes) {
   21774:	b10e      	cbz	r6, 2177a <usb_dc_ep_write+0xb6>
			*ret_bytes = 0;
   21776:	f8c6 9000 	str.w	r9, [r6]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
   2177a:	466c      	mov	r4, sp
   2177c:	b088      	sub	sp, #32
   2177e:	466a      	mov	r2, sp
   21780:	4b1f      	ldr	r3, [pc, #124]	; (21800 <usb_dc_ep_write+0x13c>)
   21782:	e9c2 3005 	strd	r3, r0, [r2, #20]
   21786:	2303      	movs	r3, #3
   21788:	f842 3f10 	str.w	r3, [r2, #16]!
   2178c:	481a      	ldr	r0, [pc, #104]	; (217f8 <usb_dc_ep_write+0x134>)
   2178e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21792:	f00d f80c 	bl	2e7ae <z_log_msg_static_create.constprop.0>
   21796:	46a5      	mov	sp, r4
		result = -EIO;
   21798:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
   2179c:	4819      	ldr	r0, [pc, #100]	; (21804 <usb_dc_ep_write+0x140>)
   2179e:	f00d f80b 	bl	2e7b8 <k_mutex_unlock.isra.0>
	return result;
   217a2:	e7bc      	b.n	2171e <usb_dc_ep_write+0x5a>
	if (!data_len && ep_ctx->trans_zlp) {
   217a4:	7fe2      	ldrb	r2, [r4, #31]
   217a6:	b102      	cbz	r2, 217aa <usb_dc_ep_write+0xe6>
		ep_ctx->trans_zlp = false;
   217a8:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   217aa:	2b00      	cmp	r3, #0
   217ac:	d1d1      	bne.n	21752 <usb_dc_ep_write+0x8e>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   217ae:	f003 ffe7 	bl	25780 <nrfx_usbd_last_setup_dir_get>
   217b2:	4580      	cmp	r8, r0
   217b4:	d0cd      	beq.n	21752 <usb_dc_ep_write+0x8e>
		nrfx_usbd_setup_clear();
   217b6:	f003 ffd3 	bl	25760 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   217ba:	4812      	ldr	r0, [pc, #72]	; (21804 <usb_dc_ep_write+0x140>)
   217bc:	f00c fffc 	bl	2e7b8 <k_mutex_unlock.isra.0>
		return 0;
   217c0:	2400      	movs	r4, #0
   217c2:	e7ac      	b.n	2171e <usb_dc_ep_write+0x5a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   217c4:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   217c8:	429d      	cmp	r5, r3
   217ca:	d2f0      	bcs.n	217ae <usb_dc_ep_write+0xea>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   217cc:	6862      	ldr	r2, [r4, #4]
   217ce:	fbb5 f3f2 	udiv	r3, r5, r2
   217d2:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   217d6:	2b00      	cmp	r3, #0
   217d8:	d1e9      	bne.n	217ae <usb_dc_ep_write+0xea>
			ep_ctx->trans_zlp = true;
   217da:	2301      	movs	r3, #1
   217dc:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   217de:	e7e6      	b.n	217ae <usb_dc_ep_write+0xea>
		if (ret_bytes) {
   217e0:	b106      	cbz	r6, 217e4 <usb_dc_ep_write+0x120>
			*ret_bytes = data_len;
   217e2:	6035      	str	r5, [r6, #0]
	int result = 0;
   217e4:	2400      	movs	r4, #0
   217e6:	e7d9      	b.n	2179c <usb_dc_ep_write+0xd8>
		return -ENODEV;
   217e8:	f06f 0412 	mvn.w	r4, #18
   217ec:	e797      	b.n	2171e <usb_dc_ep_write+0x5a>
   217ee:	bf00      	nop
   217f0:	20003e00 	.word	0x20003e00
   217f4:	00033a4b 	.word	0x00033a4b
   217f8:	000303b4 	.word	0x000303b4
   217fc:	0bad0000 	.word	0x0bad0000
   21800:	00033a6a 	.word	0x00033a6a
   21804:	20003e38 	.word	0x20003e38

00021808 <usb_dc_ep_read_wait>:
{
   21808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2180c:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   2180e:	4b2d      	ldr	r3, [pc, #180]	; (218c4 <usb_dc_ep_read_wait+0xbc>)
{
   21810:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
   21812:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   21816:	af00      	add	r7, sp, #0
   21818:	4681      	mov	r9, r0
   2181a:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   2181c:	2a00      	cmp	r2, #0
   2181e:	d04d      	beq.n	218bc <usb_dc_ep_read_wait+0xb4>
   21820:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   21824:	2b00      	cmp	r3, #0
   21826:	d049      	beq.n	218bc <usb_dc_ep_read_wait+0xb4>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   21828:	f010 0f80 	tst.w	r0, #128	; 0x80
   2182c:	d119      	bne.n	21862 <usb_dc_ep_read_wait+0x5a>
	if (!data && max_data_len) {
   2182e:	b911      	cbnz	r1, 21836 <usb_dc_ep_read_wait+0x2e>
   21830:	f1b8 0f00 	cmp.w	r8, #0
   21834:	d115      	bne.n	21862 <usb_dc_ep_read_wait+0x5a>
	ep_ctx = endpoint_ctx(ep);
   21836:	4648      	mov	r0, r9
   21838:	f7ff f9b6 	bl	20ba8 <endpoint_ctx>
	if (!ep_ctx) {
   2183c:	4604      	mov	r4, r0
   2183e:	b180      	cbz	r0, 21862 <usb_dc_ep_read_wait+0x5a>
	if (!ep_ctx->cfg.en) {
   21840:	7a03      	ldrb	r3, [r0, #8]
   21842:	b98b      	cbnz	r3, 21868 <usb_dc_ep_read_wait+0x60>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   21844:	466c      	mov	r4, sp
   21846:	b088      	sub	sp, #32
   21848:	466a      	mov	r2, sp
   2184a:	4b1f      	ldr	r3, [pc, #124]	; (218c8 <usb_dc_ep_read_wait+0xc0>)
   2184c:	481f      	ldr	r0, [pc, #124]	; (218cc <usb_dc_ep_read_wait+0xc4>)
   2184e:	e9c2 3905 	strd	r3, r9, [r2, #20]
   21852:	2303      	movs	r3, #3
   21854:	f842 3f10 	str.w	r3, [r2, #16]!
   21858:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2185c:	f00c ffa7 	bl	2e7ae <z_log_msg_static_create.constprop.0>
   21860:	46a5      	mov	sp, r4
		return -EINVAL;
   21862:	f06f 0015 	mvn.w	r0, #21
   21866:	e015      	b.n	21894 <usb_dc_ep_read_wait+0x8c>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   21868:	f04f 33ff 	mov.w	r3, #4294967295
   2186c:	4818      	ldr	r0, [pc, #96]	; (218d0 <usb_dc_ep_read_wait+0xc8>)
   2186e:	f04f 32ff 	mov.w	r2, #4294967295
   21872:	f00c ff9f 	bl	2e7b4 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   21876:	68e3      	ldr	r3, [r4, #12]
   21878:	4598      	cmp	r8, r3
   2187a:	46c1      	mov	r9, r8
   2187c:	bf28      	it	cs
   2187e:	4699      	movcs	r9, r3
	if (!data && !max_data_len) {
   21880:	b95e      	cbnz	r6, 2189a <usb_dc_ep_read_wait+0x92>
   21882:	f1b8 0f00 	cmp.w	r8, #0
   21886:	d108      	bne.n	2189a <usb_dc_ep_read_wait+0x92>
		if (read_bytes) {
   21888:	b105      	cbz	r5, 2188c <usb_dc_ep_read_wait+0x84>
			*read_bytes = ep_ctx->buf.len;
   2188a:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   2188c:	4810      	ldr	r0, [pc, #64]	; (218d0 <usb_dc_ep_read_wait+0xc8>)
   2188e:	f00c ff93 	bl	2e7b8 <k_mutex_unlock.isra.0>
		return 0;
   21892:	2000      	movs	r0, #0
}
   21894:	46bd      	mov	sp, r7
   21896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   2189a:	69a1      	ldr	r1, [r4, #24]
   2189c:	464a      	mov	r2, r9
   2189e:	4630      	mov	r0, r6
   218a0:	f00a fd1d 	bl	2c2de <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   218a4:	69a3      	ldr	r3, [r4, #24]
   218a6:	444b      	add	r3, r9
   218a8:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   218aa:	68e3      	ldr	r3, [r4, #12]
   218ac:	eba3 0309 	sub.w	r3, r3, r9
   218b0:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   218b2:	2d00      	cmp	r5, #0
   218b4:	d0ea      	beq.n	2188c <usb_dc_ep_read_wait+0x84>
		*read_bytes = bytes_to_copy;
   218b6:	f8c5 9000 	str.w	r9, [r5]
   218ba:	e7e7      	b.n	2188c <usb_dc_ep_read_wait+0x84>
		return -ENODEV;
   218bc:	f06f 0012 	mvn.w	r0, #18
   218c0:	e7e8      	b.n	21894 <usb_dc_ep_read_wait+0x8c>
   218c2:	bf00      	nop
   218c4:	20003e00 	.word	0x20003e00
   218c8:	00033a4b 	.word	0x00033a4b
   218cc:	000303b4 	.word	0x000303b4
   218d0:	20003e38 	.word	0x20003e38

000218d4 <usb_dc_ep_read_continue>:
{
   218d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   218d6:	4d27      	ldr	r5, [pc, #156]	; (21974 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
   218d8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
   218dc:	af00      	add	r7, sp, #0
   218de:	4606      	mov	r6, r0
	if (!dev_attached() || !dev_ready()) {
   218e0:	2b00      	cmp	r3, #0
   218e2:	d044      	beq.n	2196e <usb_dc_ep_read_continue+0x9a>
   218e4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   218e8:	2b00      	cmp	r3, #0
   218ea:	d040      	beq.n	2196e <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   218ec:	0603      	lsls	r3, r0, #24
   218ee:	d414      	bmi.n	2191a <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
   218f0:	f7ff f95a 	bl	20ba8 <endpoint_ctx>
	if (!ep_ctx) {
   218f4:	4604      	mov	r4, r0
   218f6:	b180      	cbz	r0, 2191a <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
   218f8:	7a03      	ldrb	r3, [r0, #8]
   218fa:	b993      	cbnz	r3, 21922 <usb_dc_ep_read_continue+0x4e>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   218fc:	466c      	mov	r4, sp
   218fe:	b088      	sub	sp, #32
   21900:	466a      	mov	r2, sp
   21902:	4b1d      	ldr	r3, [pc, #116]	; (21978 <usb_dc_ep_read_continue+0xa4>)
   21904:	481d      	ldr	r0, [pc, #116]	; (2197c <usb_dc_ep_read_continue+0xa8>)
   21906:	e9c2 3605 	strd	r3, r6, [r2, #20]
   2190a:	2303      	movs	r3, #3
   2190c:	f842 3f10 	str.w	r3, [r2, #16]!
   21910:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21914:	f00c ff4b 	bl	2e7ae <z_log_msg_static_create.constprop.0>
   21918:	46a5      	mov	sp, r4
		return -EINVAL;
   2191a:	f06f 0015 	mvn.w	r0, #21
}
   2191e:	46bd      	mov	sp, r7
   21920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   21922:	f04f 33ff 	mov.w	r3, #4294967295
   21926:	f04f 32ff 	mov.w	r2, #4294967295
   2192a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2192e:	f00c ff41 	bl	2e7b4 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   21932:	68e3      	ldr	r3, [r4, #12]
   21934:	b9b3      	cbnz	r3, 21964 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
   21936:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   21938:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   2193a:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   2193c:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   2193e:	7f63      	ldrb	r3, [r4, #29]
   21940:	b183      	cbz	r3, 21964 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
   21942:	f7ff f985 	bl	20c50 <usbd_evt_alloc>
			if (!ev) {
   21946:	b930      	cbnz	r0, 21956 <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
   21948:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2194c:	f00c ff34 	bl	2e7b8 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   21950:	f06f 000b 	mvn.w	r0, #11
   21954:	e7e3      	b.n	2191e <usb_dc_ep_read_continue+0x4a>
			ev->evt_type = USBD_EVT_EP;
   21956:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   21958:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   2195a:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   2195c:	f7ff f95c 	bl	20c18 <usbd_evt_put>
			usbd_work_schedule();
   21960:	f7ff f952 	bl	20c08 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   21964:	4806      	ldr	r0, [pc, #24]	; (21980 <usb_dc_ep_read_continue+0xac>)
   21966:	f00c ff27 	bl	2e7b8 <k_mutex_unlock.isra.0>
	return 0;
   2196a:	2000      	movs	r0, #0
   2196c:	e7d7      	b.n	2191e <usb_dc_ep_read_continue+0x4a>
		return -ENODEV;
   2196e:	f06f 0012 	mvn.w	r0, #18
   21972:	e7d4      	b.n	2191e <usb_dc_ep_read_continue+0x4a>
   21974:	20003e00 	.word	0x20003e00
   21978:	00033a4b 	.word	0x00033a4b
   2197c:	000303b4 	.word	0x000303b4
   21980:	20003e38 	.word	0x20003e38

00021984 <usb_dc_ep_set_callback>:
{
   21984:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
   21986:	4b08      	ldr	r3, [pc, #32]	; (219a8 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   21988:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   2198c:	460c      	mov	r4, r1
	if (!dev_attached()) {
   2198e:	b12b      	cbz	r3, 2199c <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
   21990:	f7ff f90a 	bl	20ba8 <endpoint_ctx>
	if (!ep_ctx) {
   21994:	b128      	cbz	r0, 219a2 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
   21996:	6004      	str	r4, [r0, #0]
	return 0;
   21998:	2000      	movs	r0, #0
}
   2199a:	bd10      	pop	{r4, pc}
		return -ENODEV;
   2199c:	f06f 0012 	mvn.w	r0, #18
   219a0:	e7fb      	b.n	2199a <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
   219a2:	f06f 0015 	mvn.w	r0, #21
   219a6:	e7f8      	b.n	2199a <usb_dc_ep_set_callback+0x16>
   219a8:	20003e00 	.word	0x20003e00

000219ac <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   219ac:	4b01      	ldr	r3, [pc, #4]	; (219b4 <usb_dc_set_status_callback+0x8>)
   219ae:	6018      	str	r0, [r3, #0]
}
   219b0:	4770      	bx	lr
   219b2:	bf00      	nop
   219b4:	20003e00 	.word	0x20003e00

000219b8 <usb_dc_ep_mps>:
{
   219b8:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   219ba:	4b07      	ldr	r3, [pc, #28]	; (219d8 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   219bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   219c0:	b123      	cbz	r3, 219cc <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   219c2:	f7ff f8f1 	bl	20ba8 <endpoint_ctx>
	if (!ep_ctx) {
   219c6:	b120      	cbz	r0, 219d2 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   219c8:	6840      	ldr	r0, [r0, #4]
}
   219ca:	bd08      	pop	{r3, pc}
		return -ENODEV;
   219cc:	f06f 0012 	mvn.w	r0, #18
   219d0:	e7fb      	b.n	219ca <usb_dc_ep_mps+0x12>
		return -EINVAL;
   219d2:	f06f 0015 	mvn.w	r0, #21
   219d6:	e7f8      	b.n	219ca <usb_dc_ep_mps+0x12>
   219d8:	20003e00 	.word	0x20003e00

000219dc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   219dc:	4b08      	ldr	r3, [pc, #32]	; (21a00 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   219de:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   219e0:	1ac3      	subs	r3, r0, r3
{
   219e2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   219e4:	4907      	ldr	r1, [pc, #28]	; (21a04 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   219e6:	109b      	asrs	r3, r3, #2
{
   219e8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   219ea:	4359      	muls	r1, r3
   219ec:	4806      	ldr	r0, [pc, #24]	; (21a08 <onoff_stop+0x2c>)
   219ee:	2240      	movs	r2, #64	; 0x40
   219f0:	f00c ff28 	bl	2e844 <stop>
	notify(mgr, res);
   219f4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   219f6:	4601      	mov	r1, r0
	notify(mgr, res);
   219f8:	4620      	mov	r0, r4
}
   219fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   219fe:	4718      	bx	r3
   21a00:	200046a4 	.word	0x200046a4
   21a04:	b6db6db7 	.word	0xb6db6db7
   21a08:	0002ff48 	.word	0x0002ff48

00021a0c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   21a0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   21a0e:	4c0c      	ldr	r4, [pc, #48]	; (21a40 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   21a10:	4a0c      	ldr	r2, [pc, #48]	; (21a44 <onoff_start+0x38>)
   21a12:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   21a14:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   21a16:	9300      	str	r3, [sp, #0]
{
   21a18:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   21a1a:	460b      	mov	r3, r1
   21a1c:	490a      	ldr	r1, [pc, #40]	; (21a48 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   21a1e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   21a20:	4361      	muls	r1, r4
{
   21a22:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   21a24:	4809      	ldr	r0, [pc, #36]	; (21a4c <onoff_start+0x40>)
   21a26:	f00c ff39 	bl	2e89c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   21a2a:	1e01      	subs	r1, r0, #0
   21a2c:	da05      	bge.n	21a3a <onoff_start+0x2e>
		notify(mgr, err);
   21a2e:	4630      	mov	r0, r6
   21a30:	462b      	mov	r3, r5
	}
}
   21a32:	b002      	add	sp, #8
   21a34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   21a38:	4718      	bx	r3
}
   21a3a:	b002      	add	sp, #8
   21a3c:	bd70      	pop	{r4, r5, r6, pc}
   21a3e:	bf00      	nop
   21a40:	200046a4 	.word	0x200046a4
   21a44:	0002e907 	.word	0x0002e907
   21a48:	b6db6db7 	.word	0xb6db6db7
   21a4c:	0002ff48 	.word	0x0002ff48

00021a50 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   21a50:	2200      	movs	r2, #0
{
   21a52:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   21a54:	2101      	movs	r1, #1
{
   21a56:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   21a58:	4610      	mov	r0, r2
   21a5a:	f7f5 f9e9 	bl	16e30 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   21a5e:	480f      	ldr	r0, [pc, #60]	; (21a9c <clk_init+0x4c>)
   21a60:	f002 fa94 	bl	23f8c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   21a64:	4b0e      	ldr	r3, [pc, #56]	; (21aa0 <clk_init+0x50>)
   21a66:	4298      	cmp	r0, r3
   21a68:	d115      	bne.n	21a96 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   21a6a:	f00d fb05 	bl	2f078 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   21a6e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   21a70:	490c      	ldr	r1, [pc, #48]	; (21aa4 <clk_init+0x54>)
   21a72:	4630      	mov	r0, r6
   21a74:	f008 ffc1 	bl	2a9fa <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   21a78:	2800      	cmp	r0, #0
   21a7a:	db0b      	blt.n	21a94 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   21a7c:	2501      	movs	r5, #1
   21a7e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   21a80:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   21a82:	4908      	ldr	r1, [pc, #32]	; (21aa4 <clk_init+0x54>)
   21a84:	f104 001c 	add.w	r0, r4, #28
   21a88:	f008 ffb7 	bl	2a9fa <onoff_manager_init>
		if (err < 0) {
   21a8c:	2800      	cmp	r0, #0
   21a8e:	db01      	blt.n	21a94 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   21a90:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   21a92:	2000      	movs	r0, #0
}
   21a94:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   21a96:	f06f 0004 	mvn.w	r0, #4
   21a9a:	e7fb      	b.n	21a94 <clk_init+0x44>
   21a9c:	00021add 	.word	0x00021add
   21aa0:	0bad0000 	.word	0x0bad0000
   21aa4:	00030b44 	.word	0x00030b44

00021aa8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   21aa8:	b570      	push	{r4, r5, r6, lr}
   21aaa:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   21aac:	230c      	movs	r3, #12
   21aae:	4809      	ldr	r0, [pc, #36]	; (21ad4 <clkstarted_handle.constprop.0+0x2c>)
   21ab0:	434b      	muls	r3, r1
   21ab2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   21ab4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   21ab8:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   21aba:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   21abc:	4418      	add	r0, r3
	sub_data->cb = NULL;
   21abe:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   21ac0:	f00c fead 	bl	2e81e <set_on_state>
	if (callback) {
   21ac4:	b12d      	cbz	r5, 21ad2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   21ac6:	4632      	mov	r2, r6
   21ac8:	462b      	mov	r3, r5
   21aca:	4803      	ldr	r0, [pc, #12]	; (21ad8 <clkstarted_handle.constprop.0+0x30>)
}
   21acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   21ad0:	4718      	bx	r3
}
   21ad2:	bd70      	pop	{r4, r5, r6, pc}
   21ad4:	200046a4 	.word	0x200046a4
   21ad8:	0002ff48 	.word	0x0002ff48

00021adc <clock_event_handler>:
	switch (event) {
   21adc:	b110      	cbz	r0, 21ae4 <clock_event_handler+0x8>
   21ade:	2801      	cmp	r0, #1
   21ae0:	d004      	beq.n	21aec <clock_event_handler+0x10>
   21ae2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   21ae4:	4b03      	ldr	r3, [pc, #12]	; (21af4 <clock_event_handler+0x18>)
   21ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   21ae8:	075b      	lsls	r3, r3, #29
   21aea:	d101      	bne.n	21af0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   21aec:	f7ff bfdc 	b.w	21aa8 <clkstarted_handle.constprop.0>
}
   21af0:	4770      	bx	lr
   21af2:	bf00      	nop
   21af4:	200046a4 	.word	0x200046a4

00021af8 <generic_hfclk_start>:
{
   21af8:	b508      	push	{r3, lr}
	__asm__ volatile(
   21afa:	f04f 0340 	mov.w	r3, #64	; 0x40
   21afe:	f3ef 8111 	mrs	r1, BASEPRI
   21b02:	f383 8812 	msr	BASEPRI_MAX, r3
   21b06:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   21b0a:	4a12      	ldr	r2, [pc, #72]	; (21b54 <generic_hfclk_start+0x5c>)
   21b0c:	6813      	ldr	r3, [r2, #0]
   21b0e:	f043 0002 	orr.w	r0, r3, #2
   21b12:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   21b14:	07da      	lsls	r2, r3, #31
   21b16:	d408      	bmi.n	21b2a <generic_hfclk_start+0x32>
	__asm__ volatile(
   21b18:	f381 8811 	msr	BASEPRI, r1
   21b1c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   21b20:	2001      	movs	r0, #1
}
   21b22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   21b26:	f002 ba21 	b.w	23f6c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   21b2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21b2e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21b32:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   21b36:	07d3      	lsls	r3, r2, #31
   21b38:	d5ee      	bpl.n	21b18 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   21b3a:	4807      	ldr	r0, [pc, #28]	; (21b58 <generic_hfclk_start+0x60>)
   21b3c:	f00c fe6f 	bl	2e81e <set_on_state>
   21b40:	f381 8811 	msr	BASEPRI, r1
   21b44:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   21b48:	2000      	movs	r0, #0
}
   21b4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   21b4e:	f7ff bfab 	b.w	21aa8 <clkstarted_handle.constprop.0>
   21b52:	bf00      	nop
   21b54:	200046f4 	.word	0x200046f4
   21b58:	200046e4 	.word	0x200046e4

00021b5c <api_blocking_start>:
{
   21b5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   21b5e:	2200      	movs	r2, #0
   21b60:	2301      	movs	r3, #1
   21b62:	e9cd 2302 	strd	r2, r3, [sp, #8]
   21b66:	ab04      	add	r3, sp, #16
   21b68:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   21b6c:	4a09      	ldr	r2, [pc, #36]	; (21b94 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   21b6e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   21b72:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   21b74:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   21b78:	f00c febe 	bl	2e8f8 <api_start>
	if (err < 0) {
   21b7c:	2800      	cmp	r0, #0
   21b7e:	db05      	blt.n	21b8c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   21b80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   21b84:	2300      	movs	r3, #0
   21b86:	4668      	mov	r0, sp
   21b88:	f004 fbac 	bl	262e4 <z_impl_k_sem_take>
}
   21b8c:	b007      	add	sp, #28
   21b8e:	f85d fb04 	ldr.w	pc, [sp], #4
   21b92:	bf00      	nop
   21b94:	0002e925 	.word	0x0002e925

00021b98 <generic_hfclk_stop>:
{
   21b98:	b510      	push	{r4, lr}
	__asm__ volatile(
   21b9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b9e:	f3ef 8411 	mrs	r4, BASEPRI
   21ba2:	f383 8812 	msr	BASEPRI_MAX, r3
   21ba6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   21baa:	4a07      	ldr	r2, [pc, #28]	; (21bc8 <generic_hfclk_stop+0x30>)
   21bac:	6813      	ldr	r3, [r2, #0]
   21bae:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   21bb2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   21bb4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   21bb6:	d402      	bmi.n	21bbe <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   21bb8:	2001      	movs	r0, #1
   21bba:	f00d fa58 	bl	2f06e <nrfx_clock_stop>
	__asm__ volatile(
   21bbe:	f384 8811 	msr	BASEPRI, r4
   21bc2:	f3bf 8f6f 	isb	sy
}
   21bc6:	bd10      	pop	{r4, pc}
   21bc8:	200046f4 	.word	0x200046f4

00021bcc <z_nrf_clock_control_get_onoff>:
}
   21bcc:	4a02      	ldr	r2, [pc, #8]	; (21bd8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   21bce:	b2c3      	uxtb	r3, r0
}
   21bd0:	201c      	movs	r0, #28
   21bd2:	fb03 2000 	mla	r0, r3, r0, r2
   21bd6:	4770      	bx	lr
   21bd8:	200046a4 	.word	0x200046a4

00021bdc <z_nrf_clock_control_lf_on>:
{
   21bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21be0:	4938      	ldr	r1, [pc, #224]	; (21cc4 <z_nrf_clock_control_lf_on+0xe8>)
   21be2:	f3bf 8f5b 	dmb	ish
   21be6:	4607      	mov	r7, r0
   21be8:	2201      	movs	r2, #1
   21bea:	e851 3f00 	ldrex	r3, [r1]
   21bee:	e841 2000 	strex	r0, r2, [r1]
   21bf2:	2800      	cmp	r0, #0
   21bf4:	d1f9      	bne.n	21bea <z_nrf_clock_control_lf_on+0xe>
   21bf6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   21bfa:	b933      	cbnz	r3, 21c0a <z_nrf_clock_control_lf_on+0x2e>
   21bfc:	4932      	ldr	r1, [pc, #200]	; (21cc8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   21bfe:	4833      	ldr	r0, [pc, #204]	; (21ccc <z_nrf_clock_control_lf_on+0xf0>)
   21c00:	604b      	str	r3, [r1, #4]
   21c02:	60cb      	str	r3, [r1, #12]
   21c04:	608a      	str	r2, [r1, #8]
   21c06:	f008 ff0b 	bl	2aa20 <onoff_request>
	switch (start_mode) {
   21c0a:	1e7b      	subs	r3, r7, #1
   21c0c:	2b01      	cmp	r3, #1
   21c0e:	d82b      	bhi.n	21c68 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   21c10:	2f01      	cmp	r7, #1
   21c12:	d107      	bne.n	21c24 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   21c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21c18:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   21c1c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   21c20:	2b01      	cmp	r3, #1
   21c22:	d021      	beq.n	21c68 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   21c24:	f00d fc3b 	bl	2f49e <k_is_in_isr>
   21c28:	4605      	mov	r5, r0
   21c2a:	b9f8      	cbnz	r0, 21c6c <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   21c2c:	4b28      	ldr	r3, [pc, #160]	; (21cd0 <z_nrf_clock_control_lf_on+0xf4>)
   21c2e:	781b      	ldrb	r3, [r3, #0]
   21c30:	b1e3      	cbz	r3, 21c6c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   21c32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21c36:	2202      	movs	r2, #2
   21c38:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   21c3c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21c3e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 21cd4 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   21c42:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   21c46:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21c4a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   21c4e:	03d2      	lsls	r2, r2, #15
   21c50:	d516      	bpl.n	21c80 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   21c52:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   21c56:	2b01      	cmp	r3, #1
   21c58:	d001      	beq.n	21c5e <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   21c5a:	2f01      	cmp	r7, #1
   21c5c:	d110      	bne.n	21c80 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   21c5e:	b35d      	cbz	r5, 21cb8 <z_nrf_clock_control_lf_on+0xdc>
   21c60:	f386 8811 	msr	BASEPRI, r6
   21c64:	f3bf 8f6f 	isb	sy
}
   21c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   21c6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c70:	f3ef 8611 	mrs	r6, BASEPRI
   21c74:	f383 8812 	msr	BASEPRI_MAX, r3
   21c78:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   21c7c:	2501      	movs	r5, #1
   21c7e:	e7de      	b.n	21c3e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   21c80:	b1ad      	cbz	r5, 21cae <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   21c82:	4630      	mov	r0, r6
   21c84:	f7f5 f832 	bl	16cec <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   21c88:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   21c8c:	2b00      	cmp	r3, #0
   21c8e:	d1da      	bne.n	21c46 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   21c90:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   21c94:	2a00      	cmp	r2, #0
   21c96:	d0d6      	beq.n	21c46 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21c98:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   21c9c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   21ca0:	2301      	movs	r3, #1
   21ca2:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   21ca6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21caa:	60a3      	str	r3, [r4, #8]
}
   21cac:	e7cb      	b.n	21c46 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   21cae:	2100      	movs	r1, #0
   21cb0:	2021      	movs	r0, #33	; 0x21
   21cb2:	f004 fff3 	bl	26c9c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   21cb6:	e7e7      	b.n	21c88 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   21cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21cbc:	2202      	movs	r2, #2
   21cbe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   21cc2:	e7d1      	b.n	21c68 <z_nrf_clock_control_lf_on+0x8c>
   21cc4:	200046a0 	.word	0x200046a0
   21cc8:	20004690 	.word	0x20004690
   21ccc:	200046c0 	.word	0x200046c0
   21cd0:	200057f7 	.word	0x200057f7
   21cd4:	e000e100 	.word	0xe000e100

00021cd8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   21cd8:	b508      	push	{r3, lr}
   21cda:	4807      	ldr	r0, [pc, #28]	; (21cf8 <uart_console_init+0x20>)
   21cdc:	f00d fb11 	bl	2f302 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   21ce0:	b138      	cbz	r0, 21cf2 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   21ce2:	4806      	ldr	r0, [pc, #24]	; (21cfc <uart_console_init+0x24>)
   21ce4:	f7f5 fe36 	bl	17954 <__stdout_hook_install>
	__printk_hook_install(console_out);
   21ce8:	4804      	ldr	r0, [pc, #16]	; (21cfc <uart_console_init+0x24>)
   21cea:	f7f1 fc75 	bl	135d8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   21cee:	2000      	movs	r0, #0
}
   21cf0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   21cf2:	f06f 0012 	mvn.w	r0, #18
   21cf6:	e7fb      	b.n	21cf0 <uart_console_init+0x18>
   21cf8:	0002ffd8 	.word	0x0002ffd8
   21cfc:	00021d01 	.word	0x00021d01

00021d00 <console_out>:
	if ('\n' == c) {
   21d00:	280a      	cmp	r0, #10
{
   21d02:	b538      	push	{r3, r4, r5, lr}
   21d04:	4d07      	ldr	r5, [pc, #28]	; (21d24 <console_out+0x24>)
   21d06:	4604      	mov	r4, r0
	if ('\n' == c) {
   21d08:	d104      	bne.n	21d14 <console_out+0x14>
   21d0a:	68ab      	ldr	r3, [r5, #8]
   21d0c:	210d      	movs	r1, #13
   21d0e:	685b      	ldr	r3, [r3, #4]
   21d10:	4628      	mov	r0, r5
   21d12:	4798      	blx	r3
   21d14:	68ab      	ldr	r3, [r5, #8]
   21d16:	4803      	ldr	r0, [pc, #12]	; (21d24 <console_out+0x24>)
   21d18:	685b      	ldr	r3, [r3, #4]
   21d1a:	b2e1      	uxtb	r1, r4
   21d1c:	4798      	blx	r3
}
   21d1e:	4620      	mov	r0, r4
   21d20:	bd38      	pop	{r3, r4, r5, pc}
   21d22:	bf00      	nop
   21d24:	0002ffd8 	.word	0x0002ffd8

00021d28 <random_byte_get>:
   21d28:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d2c:	f3ef 8211 	mrs	r2, BASEPRI
   21d30:	f383 8812 	msr	BASEPRI_MAX, r3
   21d34:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   21d38:	4b09      	ldr	r3, [pc, #36]	; (21d60 <random_byte_get+0x38>)
   21d3a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   21d3e:	b161      	cbz	r1, 21d5a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21d40:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   21d42:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21d46:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   21d4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   21d4e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   21d50:	f382 8811 	msr	BASEPRI, r2
   21d54:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   21d58:	4770      	bx	lr
	int retval = -EAGAIN;
   21d5a:	f06f 000a 	mvn.w	r0, #10
   21d5e:	e7f7      	b.n	21d50 <random_byte_get+0x28>
   21d60:	4000d000 	.word	0x4000d000

00021d64 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   21d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d66:	4603      	mov	r3, r0
   21d68:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   21d6a:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   21d6c:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   21d70:	f04f 0540 	mov.w	r5, #64	; 0x40
   21d74:	f3ef 8211 	mrs	r2, BASEPRI
   21d78:	f385 8812 	msr	BASEPRI_MAX, r5
   21d7c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   21d80:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   21d82:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   21d86:	1be4      	subs	r4, r4, r7
   21d88:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   21d8c:	42a0      	cmp	r0, r4
		len = available;
   21d8e:	bf88      	it	hi
   21d90:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   21d92:	183e      	adds	r6, r7, r0
   21d94:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   21d98:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   21d9a:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   21d9c:	f382 8811 	msr	BASEPRI, r2
   21da0:	f3bf 8f6f 	isb	sy
   21da4:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   21da6:	428a      	cmp	r2, r1
   21da8:	d117      	bne.n	21dda <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   21daa:	4577      	cmp	r7, lr
   21dac:	d10d      	bne.n	21dca <rng_pool_get+0x66>
	__asm__ volatile(
   21dae:	f04f 0140 	mov.w	r1, #64	; 0x40
   21db2:	f3ef 8211 	mrs	r2, BASEPRI
   21db6:	f381 8812 	msr	BASEPRI_MAX, r1
   21dba:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   21dbe:	7819      	ldrb	r1, [r3, #0]
   21dc0:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   21dc2:	f382 8811 	msr	BASEPRI, r2
   21dc6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   21dca:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   21dcc:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   21dce:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21dd0:	bf22      	ittt	cs
   21dd2:	4b06      	ldrcs	r3, [pc, #24]	; (21dec <rng_pool_get+0x88>)
   21dd4:	2201      	movcs	r2, #1
   21dd6:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   21dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   21dda:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   21ddc:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   21dde:	7976      	ldrb	r6, [r6, #5]
   21de0:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   21de4:	ea05 050c 	and.w	r5, r5, ip
   21de8:	e7dd      	b.n	21da6 <rng_pool_get+0x42>
   21dea:	bf00      	nop
   21dec:	4000d000 	.word	0x4000d000

00021df0 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   21df0:	43db      	mvns	r3, r3
{
   21df2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   21df6:	f013 0501 	ands.w	r5, r3, #1
{
   21dfa:	460e      	mov	r6, r1
   21dfc:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   21dfe:	d004      	beq.n	21e0a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   21e00:	4823      	ldr	r0, [pc, #140]	; (21e90 <entropy_nrf5_get_entropy_isr+0xa0>)
   21e02:	f7ff ffaf 	bl	21d64 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   21e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   21e0a:	b3a2      	cbz	r2, 21e76 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   21e0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e10:	f3ef 8811 	mrs	r8, BASEPRI
   21e14:	f383 8812 	msr	BASEPRI_MAX, r3
   21e18:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   21e1c:	200d      	movs	r0, #13
   21e1e:	f7f4 fff9 	bl	16e14 <arch_irq_is_enabled>
   21e22:	4607      	mov	r7, r0
		irq_disable(IRQN);
   21e24:	200d      	movs	r0, #13
   21e26:	f7f4 ffe1 	bl	16dec <arch_irq_disable>
	__asm__ volatile(
   21e2a:	f388 8811 	msr	BASEPRI, r8
   21e2e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21e32:	f8df a060 	ldr.w	sl, [pc, #96]	; 21e94 <entropy_nrf5_get_entropy_isr+0xa4>
   21e36:	f8df 8060 	ldr.w	r8, [pc, #96]	; 21e98 <entropy_nrf5_get_entropy_isr+0xa8>
   21e3a:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   21e3e:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   21e42:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21e46:	2301      	movs	r3, #1
   21e48:	f8ca 3000 	str.w	r3, [sl]
   21e4c:	4625      	mov	r5, r4
   21e4e:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   21e52:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   21e56:	b183      	cbz	r3, 21e7a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   21e58:	f7ff ff66 	bl	21d28 <random_byte_get>
			if (byte < 0) {
   21e5c:	1e03      	subs	r3, r0, #0
   21e5e:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   21e62:	dbf6      	blt.n	21e52 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   21e64:	3d01      	subs	r5, #1
   21e66:	b2ad      	uxth	r5, r5
   21e68:	5573      	strb	r3, [r6, r5]
		} while (len);
   21e6a:	2d00      	cmp	r5, #0
   21e6c:	d1f1      	bne.n	21e52 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   21e6e:	b117      	cbz	r7, 21e76 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   21e70:	200d      	movs	r0, #13
   21e72:	f7f4 ffad 	bl	16dd0 <arch_irq_enable>
	return cnt;
   21e76:	4620      	mov	r0, r4
   21e78:	e7c5      	b.n	21e06 <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   21e7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e7e:	f3ef 8011 	mrs	r0, BASEPRI
   21e82:	f383 8812 	msr	BASEPRI_MAX, r3
   21e86:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   21e8a:	f7f4 ff2f 	bl	16cec <arch_cpu_atomic_idle>
}
   21e8e:	e7e0      	b.n	21e52 <entropy_nrf5_get_entropy_isr+0x62>
   21e90:	20004728 	.word	0x20004728
   21e94:	4000d000 	.word	0x4000d000
   21e98:	e000e100 	.word	0xe000e100

00021e9c <entropy_nrf5_get_entropy>:
{
   21e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   21ea0:	4f12      	ldr	r7, [pc, #72]	; (21eec <entropy_nrf5_get_entropy+0x50>)
   21ea2:	460d      	mov	r5, r1
   21ea4:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   21ea6:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   21eaa:	b914      	cbnz	r4, 21eb2 <entropy_nrf5_get_entropy+0x16>
}
   21eac:	4620      	mov	r0, r4
   21eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21eb2:	f04f 33ff 	mov.w	r3, #4294967295
   21eb6:	f04f 32ff 	mov.w	r2, #4294967295
   21eba:	4638      	mov	r0, r7
   21ebc:	f004 fa12 	bl	262e4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   21ec0:	4622      	mov	r2, r4
   21ec2:	4629      	mov	r1, r5
   21ec4:	4640      	mov	r0, r8
   21ec6:	f7ff ff4d 	bl	21d64 <rng_pool_get>
   21eca:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   21ecc:	4638      	mov	r0, r7
   21ece:	f004 f9e3 	bl	26298 <z_impl_k_sem_give>
		if (bytes == 0U) {
   21ed2:	b93e      	cbnz	r6, 21ee4 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   21ed4:	f04f 32ff 	mov.w	r2, #4294967295
   21ed8:	f04f 33ff 	mov.w	r3, #4294967295
   21edc:	4804      	ldr	r0, [pc, #16]	; (21ef0 <entropy_nrf5_get_entropy+0x54>)
   21ede:	f004 fa01 	bl	262e4 <z_impl_k_sem_take>
	while (len) {
   21ee2:	e7e6      	b.n	21eb2 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   21ee4:	1ba4      	subs	r4, r4, r6
   21ee6:	b2a4      	uxth	r4, r4
		buf += bytes;
   21ee8:	4435      	add	r5, r6
   21eea:	e7de      	b.n	21eaa <entropy_nrf5_get_entropy+0xe>
   21eec:	200046f8 	.word	0x200046f8
   21ef0:	20004710 	.word	0x20004710

00021ef4 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   21ef4:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   21ef6:	4c19      	ldr	r4, [pc, #100]	; (21f5c <entropy_nrf5_init+0x68>)
   21ef8:	2201      	movs	r2, #1
   21efa:	4611      	mov	r1, r2
   21efc:	4620      	mov	r0, r4
   21efe:	f00d fb88 	bl	2f612 <z_impl_k_sem_init>
   21f02:	2201      	movs	r2, #1
   21f04:	2100      	movs	r1, #0
   21f06:	f104 0018 	add.w	r0, r4, #24
   21f0a:	f00d fb82 	bl	2f612 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   21f0e:	f240 4307 	movw	r3, #1031	; 0x407
   21f12:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   21f16:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   21f1a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   21f1c:	230c      	movs	r3, #12
   21f1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   21f22:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   21f24:	4b0e      	ldr	r3, [pc, #56]	; (21f60 <entropy_nrf5_init+0x6c>)
   21f26:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   21f2a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   21f2e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   21f32:	f022 0201 	bic.w	r2, r2, #1
   21f36:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   21f3a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21f3c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   21f40:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   21f44:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   21f48:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21f4a:	6019      	str	r1, [r3, #0]
   21f4c:	200d      	movs	r0, #13
   21f4e:	f7f4 ff6f 	bl	16e30 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   21f52:	200d      	movs	r0, #13
   21f54:	f7f4 ff3c 	bl	16dd0 <arch_irq_enable>

	return 0;
}
   21f58:	4628      	mov	r0, r5
   21f5a:	bd38      	pop	{r3, r4, r5, pc}
   21f5c:	200046f8 	.word	0x200046f8
   21f60:	4000d000 	.word	0x4000d000

00021f64 <isr>:
{
   21f64:	b510      	push	{r4, lr}
	byte = random_byte_get();
   21f66:	f7ff fedf 	bl	21d28 <random_byte_get>
	if (byte < 0) {
   21f6a:	2800      	cmp	r0, #0
   21f6c:	db20      	blt.n	21fb0 <isr+0x4c>
	uint8_t last  = rngp->last;
   21f6e:	4b17      	ldr	r3, [pc, #92]	; (21fcc <isr+0x68>)
   21f70:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   21f74:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   21f78:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   21f7c:	1b14      	subs	r4, r2, r4
   21f7e:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   21f82:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   21f84:	d10d      	bne.n	21fa2 <isr+0x3e>
	uint8_t last  = rngp->last;
   21f86:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   21f8a:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   21f8e:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   21f92:	1b14      	subs	r4, r2, r4
   21f94:	ea31 0404 	bics.w	r4, r1, r4
   21f98:	d10b      	bne.n	21fb2 <isr+0x4e>
   21f9a:	4b0d      	ldr	r3, [pc, #52]	; (21fd0 <isr+0x6c>)
   21f9c:	2201      	movs	r2, #1
   21f9e:	605a      	str	r2, [r3, #4]
}
   21fa0:	e00e      	b.n	21fc0 <isr+0x5c>
	rngp->buffer[last] = byte;
   21fa2:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   21fa4:	3201      	adds	r2, #1
   21fa6:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   21fa8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   21fac:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   21fb0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   21fb2:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   21fb4:	3201      	adds	r2, #1
   21fb6:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   21fb8:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   21fbc:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   21fc0:	4804      	ldr	r0, [pc, #16]	; (21fd4 <isr+0x70>)
}
   21fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21fc6:	f004 b967 	b.w	26298 <z_impl_k_sem_give>
   21fca:	bf00      	nop
   21fcc:	200046f8 	.word	0x200046f8
   21fd0:	4000d000 	.word	0x4000d000
   21fd4:	20004710 	.word	0x20004710

00021fd8 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   21fd8:	4b02      	ldr	r3, [pc, #8]	; (21fe4 <flash_nrf_pages_layout+0xc>)
   21fda:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   21fdc:	2301      	movs	r3, #1
   21fde:	6013      	str	r3, [r2, #0]
}
   21fe0:	4770      	bx	lr
   21fe2:	bf00      	nop
   21fe4:	2000474c 	.word	0x2000474c

00021fe8 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   21fe8:	4800      	ldr	r0, [pc, #0]	; (21fec <flash_nrf_get_parameters+0x4>)
   21fea:	4770      	bx	lr
   21fec:	00030bb0 	.word	0x00030bb0

00021ff0 <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
   21ff0:	b580      	push	{r7, lr}
   21ff2:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21ff4:	b088      	sub	sp, #32
   21ff6:	466a      	mov	r2, sp
   21ff8:	4b08      	ldr	r3, [pc, #32]	; (2201c <flash_nrf_read.part.0+0x2c>)
   21ffa:	61d1      	str	r1, [r2, #28]
   21ffc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   22000:	2304      	movs	r3, #4
   22002:	f842 3f10 	str.w	r3, [r2, #16]!
   22006:	4806      	ldr	r0, [pc, #24]	; (22020 <flash_nrf_read.part.0+0x30>)
   22008:	2300      	movs	r3, #0
   2200a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2200e:	f7f2 fdd9 	bl	14bc4 <z_impl_z_log_msg_static_create>
}
   22012:	f06f 0015 	mvn.w	r0, #21
   22016:	46bd      	mov	sp, r7
   22018:	bd80      	pop	{r7, pc}
   2201a:	bf00      	nop
   2201c:	00033ae8 	.word	0x00033ae8
   22020:	00030324 	.word	0x00030324

00022024 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   22024:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   22026:	2201      	movs	r2, #1
   22028:	4611      	mov	r1, r2
   2202a:	4807      	ldr	r0, [pc, #28]	; (22048 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2202c:	4c07      	ldr	r4, [pc, #28]	; (2204c <nrf_flash_init+0x28>)
   2202e:	f00d faf0 	bl	2f612 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   22032:	f001 fff5 	bl	24020 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   22036:	f00d f895 	bl	2f164 <nrfx_nvmc_flash_page_count_get>
   2203a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2203c:	f00d f88e 	bl	2f15c <nrfx_nvmc_flash_page_size_get>
   22040:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   22042:	2000      	movs	r0, #0
   22044:	bd10      	pop	{r4, pc}
   22046:	bf00      	nop
   22048:	20004754 	.word	0x20004754
   2204c:	2000474c 	.word	0x2000474c

00022050 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   22050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   22054:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   22058:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   2205c:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   22060:	f023 031f 	bic.w	r3, r3, #31
   22064:	430b      	orrs	r3, r1
    pofcon |=
   22066:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   2206a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   2206e:	4b02      	ldr	r3, [pc, #8]	; (22078 <restore_pofwarn.part.0+0x28>)
   22070:	2200      	movs	r2, #0
   22072:	701a      	strb	r2, [r3, #0]
	}
}
   22074:	4770      	bx	lr
   22076:	bf00      	nop
   22078:	200056df 	.word	0x200056df

0002207c <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2207c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   22080:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22084:	2b08      	cmp	r3, #8
   22086:	d120      	bne.n	220ca <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   22088:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2208c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   22090:	07cb      	lsls	r3, r1, #31
   22092:	d51a      	bpl.n	220ca <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   22094:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   22098:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2209c:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
   220a0:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
   220a2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   220a6:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   220aa:	b15b      	cbz	r3, 220c4 <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
   220ac:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   220b0:	f023 031f 	bic.w	r3, r3, #31
   220b4:	430b      	orrs	r3, r1
    pofcon |=
   220b6:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   220ba:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   220be:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   220c2:	4770      	bx	lr
		pofcon_enabled = enabled;
   220c4:	4b02      	ldr	r3, [pc, #8]	; (220d0 <suspend_pofwarn+0x54>)
   220c6:	2201      	movs	r2, #1
   220c8:	701a      	strb	r2, [r3, #0]
		return 0;
   220ca:	2000      	movs	r0, #0
}
   220cc:	4770      	bx	lr
   220ce:	bf00      	nop
   220d0:	200056df 	.word	0x200056df

000220d4 <erase_op>:
{
   220d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   220d6:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   220d8:	f00d f840 	bl	2f15c <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   220dc:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   220de:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   220e0:	b10b      	cbz	r3, 220e6 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   220e2:	f00c ffce 	bl	2f082 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   220e6:	4f13      	ldr	r7, [pc, #76]	; (22134 <erase_op+0x60>)
{
   220e8:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   220ea:	f7ff ffc7 	bl	2207c <suspend_pofwarn>
   220ee:	b9e8      	cbnz	r0, 2212c <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   220f0:	6860      	ldr	r0, [r4, #4]
   220f2:	f002 fd0f 	bl	24b14 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   220f6:	68a3      	ldr	r3, [r4, #8]
   220f8:	1b5b      	subs	r3, r3, r5
   220fa:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   220fc:	6863      	ldr	r3, [r4, #4]
   220fe:	442b      	add	r3, r5
   22100:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   22102:	783b      	ldrb	r3, [r7, #0]
   22104:	b10b      	cbz	r3, 2210a <erase_op+0x36>
   22106:	f7ff ffa3 	bl	22050 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   2210a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   2210c:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   2210e:	b93b      	cbnz	r3, 22120 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   22110:	68a3      	ldr	r3, [r4, #8]
   22112:	2b00      	cmp	r3, #0
   22114:	d1e9      	bne.n	220ea <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   22116:	68a0      	ldr	r0, [r4, #8]
   22118:	3800      	subs	r0, #0
   2211a:	bf18      	it	ne
   2211c:	2001      	movne	r0, #1
}
   2211e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   22120:	4630      	mov	r0, r6
   22122:	f002 f81f 	bl	24164 <nrf_flash_sync_check_time_limit>
   22126:	2800      	cmp	r0, #0
   22128:	d0f2      	beq.n	22110 <erase_op+0x3c>
   2212a:	e7f4      	b.n	22116 <erase_op+0x42>
			return -ECANCELED;
   2212c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   22130:	e7f5      	b.n	2211e <erase_op+0x4a>
   22132:	bf00      	nop
   22134:	200056df 	.word	0x200056df

00022138 <write_op>:
{
   22138:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   2213a:	7b03      	ldrb	r3, [r0, #12]
{
   2213c:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   2213e:	b10b      	cbz	r3, 22144 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   22140:	f00c ff9f 	bl	2f082 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   22144:	4e19      	ldr	r6, [pc, #100]	; (221ac <write_op+0x74>)
{
   22146:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   22148:	68a3      	ldr	r3, [r4, #8]
   2214a:	2b03      	cmp	r3, #3
   2214c:	d806      	bhi.n	2215c <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2214e:	4a18      	ldr	r2, [pc, #96]	; (221b0 <write_op+0x78>)
   22150:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   22154:	07db      	lsls	r3, r3, #31
   22156:	d5fb      	bpl.n	22150 <write_op+0x18>
	return FLASH_OP_DONE;
   22158:	2000      	movs	r0, #0
}
   2215a:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   2215c:	f7ff ff8e 	bl	2207c <suspend_pofwarn>
   22160:	bb08      	cbnz	r0, 221a6 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   22162:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   22164:	6860      	ldr	r0, [r4, #4]
   22166:	6819      	ldr	r1, [r3, #0]
   22168:	f002 fcf4 	bl	24b54 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   2216c:	7833      	ldrb	r3, [r6, #0]
   2216e:	b10b      	cbz	r3, 22174 <write_op+0x3c>
   22170:	f7ff ff6e 	bl	22050 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   22174:	6863      	ldr	r3, [r4, #4]
   22176:	3304      	adds	r3, #4
   22178:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   2217a:	6823      	ldr	r3, [r4, #0]
   2217c:	3304      	adds	r3, #4
   2217e:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   22180:	68a3      	ldr	r3, [r4, #8]
   22182:	3b04      	subs	r3, #4
   22184:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   22186:	7b23      	ldrb	r3, [r4, #12]
		i++;
   22188:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   2218a:	2b00      	cmp	r3, #0
   2218c:	d0dc      	beq.n	22148 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   2218e:	4628      	mov	r0, r5
   22190:	f001 ffe8 	bl	24164 <nrf_flash_sync_check_time_limit>
   22194:	2800      	cmp	r0, #0
   22196:	d0d7      	beq.n	22148 <write_op+0x10>
   22198:	4a05      	ldr	r2, [pc, #20]	; (221b0 <write_op+0x78>)
   2219a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2219e:	07d9      	lsls	r1, r3, #31
   221a0:	d5fb      	bpl.n	2219a <write_op+0x62>
				return FLASH_OP_ONGOING;
   221a2:	2001      	movs	r0, #1
   221a4:	e7d9      	b.n	2215a <write_op+0x22>
			return -ECANCELED;
   221a6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   221aa:	e7d6      	b.n	2215a <write_op+0x22>
   221ac:	200056df 	.word	0x200056df
   221b0:	4001e000 	.word	0x4001e000

000221b4 <flash_nrf_erase>:
{
   221b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   221b8:	b086      	sub	sp, #24
   221ba:	af00      	add	r7, sp, #0
   221bc:	460e      	mov	r6, r1
   221be:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   221c0:	f00c ffcc 	bl	2f15c <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   221c4:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   221c6:	4680      	mov	r8, r0
	if (is_regular_addr_valid(addr, size)) {
   221c8:	4630      	mov	r0, r6
   221ca:	f00c fbec 	bl	2e9a6 <is_regular_addr_valid>
   221ce:	4603      	mov	r3, r0
   221d0:	b3c8      	cbz	r0, 22246 <flash_nrf_erase+0x92>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   221d2:	fbb6 f3f8 	udiv	r3, r6, r8
   221d6:	fb08 6313 	mls	r3, r8, r3, r6
   221da:	b923      	cbnz	r3, 221e6 <flash_nrf_erase+0x32>
   221dc:	fbb5 f4f8 	udiv	r4, r5, r8
   221e0:	fb08 5414 	mls	r4, r8, r4, r5
   221e4:	b1bc      	cbz	r4, 22216 <flash_nrf_erase+0x62>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   221e6:	466c      	mov	r4, sp
   221e8:	b088      	sub	sp, #32
   221ea:	466a      	mov	r2, sp
   221ec:	4b27      	ldr	r3, [pc, #156]	; (2228c <flash_nrf_erase+0xd8>)
   221ee:	61d5      	str	r5, [r2, #28]
   221f0:	e9c2 3605 	strd	r3, r6, [r2, #20]
   221f4:	2304      	movs	r3, #4
   221f6:	f842 3f10 	str.w	r3, [r2, #16]!
   221fa:	2300      	movs	r3, #0
   221fc:	4824      	ldr	r0, [pc, #144]	; (22290 <flash_nrf_erase+0xdc>)
   221fe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   22202:	f7f2 fcdf 	bl	14bc4 <z_impl_z_log_msg_static_create>
   22206:	46a5      	mov	sp, r4
			return -EINVAL;
   22208:	f06f 0415 	mvn.w	r4, #21
}
   2220c:	4620      	mov	r0, r4
   2220e:	3718      	adds	r7, #24
   22210:	46bd      	mov	sp, r7
   22212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!n_pages) {
   22216:	45a8      	cmp	r8, r5
   22218:	d8f8      	bhi.n	2220c <flash_nrf_erase+0x58>
	return z_impl_k_sem_take(sem, timeout);
   2221a:	f04f 33ff 	mov.w	r3, #4294967295
   2221e:	f04f 32ff 	mov.w	r2, #4294967295
   22222:	481c      	ldr	r0, [pc, #112]	; (22294 <flash_nrf_erase+0xe0>)
   22224:	f004 f85e 	bl	262e4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   22228:	f00c ff29 	bl	2f07e <nrf_flash_sync_is_required>
   2222c:	f107 0308 	add.w	r3, r7, #8
   22230:	4601      	mov	r1, r0
   22232:	b998      	cbnz	r0, 2225c <flash_nrf_erase+0xa8>
	struct flash_context context = {
   22234:	2210      	movs	r2, #16
   22236:	4618      	mov	r0, r3
   22238:	f00a f85c 	bl	2c2f4 <memset>
   2223c:	e9c7 6503 	strd	r6, r5, [r7, #12]
	return	erase_op(&context);
   22240:	f7ff ff48 	bl	220d4 <erase_op>
   22244:	e01c      	b.n	22280 <flash_nrf_erase+0xcc>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   22246:	466c      	mov	r4, sp
   22248:	b088      	sub	sp, #32
   2224a:	466a      	mov	r2, sp
   2224c:	4912      	ldr	r1, [pc, #72]	; (22298 <flash_nrf_erase+0xe4>)
   2224e:	61d5      	str	r5, [r2, #28]
   22250:	e9c2 1605 	strd	r1, r6, [r2, #20]
   22254:	2104      	movs	r1, #4
   22256:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   2225a:	e7cf      	b.n	221fc <flash_nrf_erase+0x48>
	struct flash_context context = {
   2225c:	2210      	movs	r2, #16
   2225e:	4621      	mov	r1, r4
   22260:	4618      	mov	r0, r3
   22262:	f00a f847 	bl	2c2f4 <memset>
   22266:	2201      	movs	r2, #1
   22268:	753a      	strb	r2, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   2226a:	4a0c      	ldr	r2, [pc, #48]	; (2229c <flash_nrf_erase+0xe8>)
	struct flash_context context = {
   2226c:	e9c7 6503 	strd	r6, r5, [r7, #12]
	struct flash_op_desc flash_op_desc = {
   22270:	e9c7 2000 	strd	r2, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   22274:	480a      	ldr	r0, [pc, #40]	; (222a0 <flash_nrf_erase+0xec>)
   22276:	f001 fedb 	bl	24030 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   2227a:	4638      	mov	r0, r7
   2227c:	f001 fede 	bl	2403c <nrf_flash_sync_exe>
	return	erase_op(&context);
   22280:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   22282:	4804      	ldr	r0, [pc, #16]	; (22294 <flash_nrf_erase+0xe0>)
   22284:	f004 f808 	bl	26298 <z_impl_k_sem_give>
}
   22288:	e7c0      	b.n	2220c <flash_nrf_erase+0x58>
   2228a:	bf00      	nop
   2228c:	00033b05 	.word	0x00033b05
   22290:	00030324 	.word	0x00030324
   22294:	20004754 	.word	0x20004754
   22298:	00033ae8 	.word	0x00033ae8
   2229c:	000220d5 	.word	0x000220d5
   222a0:	00015e64 	.word	0x00015e64

000222a4 <flash_nrf_write>:
{
   222a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   222a6:	460d      	mov	r5, r1
   222a8:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   222aa:	4619      	mov	r1, r3
{
   222ac:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   222ae:	4628      	mov	r0, r5
{
   222b0:	461c      	mov	r4, r3
   222b2:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   222b4:	f00c fb77 	bl	2e9a6 <is_regular_addr_valid>
   222b8:	4603      	mov	r3, r0
   222ba:	b9a8      	cbnz	r0, 222e8 <flash_nrf_write+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   222bc:	466e      	mov	r6, sp
   222be:	b088      	sub	sp, #32
   222c0:	466a      	mov	r2, sp
   222c2:	4925      	ldr	r1, [pc, #148]	; (22358 <flash_nrf_write+0xb4>)
   222c4:	61d4      	str	r4, [r2, #28]
   222c6:	e9c2 1505 	strd	r1, r5, [r2, #20]
   222ca:	2104      	movs	r1, #4
   222cc:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   222d0:	4822      	ldr	r0, [pc, #136]	; (2235c <flash_nrf_write+0xb8>)
   222d2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   222d6:	f7f2 fc75 	bl	14bc4 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   222da:	f06f 0415 	mvn.w	r4, #21
   222de:	46b5      	mov	sp, r6
}
   222e0:	4620      	mov	r0, r4
   222e2:	371c      	adds	r7, #28
   222e4:	46bd      	mov	sp, r7
   222e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   222e8:	ea45 0304 	orr.w	r3, r5, r4
   222ec:	079b      	lsls	r3, r3, #30
   222ee:	d00b      	beq.n	22308 <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   222f0:	466e      	mov	r6, sp
   222f2:	b088      	sub	sp, #32
   222f4:	466a      	mov	r2, sp
   222f6:	4b1a      	ldr	r3, [pc, #104]	; (22360 <flash_nrf_write+0xbc>)
   222f8:	61d4      	str	r4, [r2, #28]
   222fa:	e9c2 3505 	strd	r3, r5, [r2, #20]
   222fe:	2304      	movs	r3, #4
   22300:	f842 3f10 	str.w	r3, [r2, #16]!
   22304:	2300      	movs	r3, #0
   22306:	e7e3      	b.n	222d0 <flash_nrf_write+0x2c>
	if (!len) {
   22308:	2c00      	cmp	r4, #0
   2230a:	d0e9      	beq.n	222e0 <flash_nrf_write+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   2230c:	f04f 33ff 	mov.w	r3, #4294967295
   22310:	f04f 32ff 	mov.w	r2, #4294967295
   22314:	4813      	ldr	r0, [pc, #76]	; (22364 <flash_nrf_write+0xc0>)
   22316:	f003 ffe5 	bl	262e4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   2231a:	f00c feb0 	bl	2f07e <nrf_flash_sync_is_required>
   2231e:	4603      	mov	r3, r0
	struct flash_context context = {
   22320:	e9c7 6502 	strd	r6, r5, [r7, #8]
   22324:	f107 0008 	add.w	r0, r7, #8
   22328:	613c      	str	r4, [r7, #16]
	if (nrf_flash_sync_is_required()) {
   2232a:	b183      	cbz	r3, 2234e <flash_nrf_write+0xaa>
	struct flash_context context = {
   2232c:	2301      	movs	r3, #1
   2232e:	753b      	strb	r3, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   22330:	4b0d      	ldr	r3, [pc, #52]	; (22368 <flash_nrf_write+0xc4>)
   22332:	e9c7 3000 	strd	r3, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   22336:	f641 504c 	movw	r0, #7500	; 0x1d4c
   2233a:	f001 fe79 	bl	24030 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   2233e:	4638      	mov	r0, r7
   22340:	f001 fe7c 	bl	2403c <nrf_flash_sync_exe>
	return write_op(&context);
   22344:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   22346:	4807      	ldr	r0, [pc, #28]	; (22364 <flash_nrf_write+0xc0>)
   22348:	f003 ffa6 	bl	26298 <z_impl_k_sem_give>
}
   2234c:	e7c8      	b.n	222e0 <flash_nrf_write+0x3c>
	struct flash_context context = {
   2234e:	753b      	strb	r3, [r7, #20]
	return write_op(&context);
   22350:	f7ff fef2 	bl	22138 <write_op>
   22354:	e7f6      	b.n	22344 <flash_nrf_write+0xa0>
   22356:	bf00      	nop
   22358:	00033ae8 	.word	0x00033ae8
   2235c:	00030324 	.word	0x00030324
   22360:	00033b24 	.word	0x00033b24
   22364:	20004754 	.word	0x20004754
   22368:	00022139 	.word	0x00022139

0002236c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   2236c:	b530      	push	{r4, r5, lr}
	return port->config;
   2236e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   22370:	7b05      	ldrb	r5, [r0, #12]
   22372:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   22376:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   2237a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2237c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   22380:	d105      	bne.n	2238e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   22382:	4620      	mov	r0, r4
   22384:	f002 fa90 	bl	248a8 <nrfx_gpiote_trigger_disable>

		return 0;
   22388:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   2238a:	b005      	add	sp, #20
   2238c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   2238e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   22390:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   22394:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   22398:	d114      	bne.n	223c4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2239a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2239e:	bf0c      	ite	eq
   223a0:	2304      	moveq	r3, #4
   223a2:	2305      	movne	r3, #5
   223a4:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   223a8:	2300      	movs	r3, #0
   223aa:	4619      	mov	r1, r3
   223ac:	aa02      	add	r2, sp, #8
   223ae:	4620      	mov	r0, r4
   223b0:	f002 f8b8 	bl	24524 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   223b4:	4b1f      	ldr	r3, [pc, #124]	; (22434 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   223b6:	4298      	cmp	r0, r3
   223b8:	d139      	bne.n	2242e <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   223ba:	2101      	movs	r1, #1
   223bc:	4620      	mov	r0, r4
   223be:	f002 fa2b 	bl	24818 <nrfx_gpiote_trigger_enable>
	return 0;
   223c2:	e7e1      	b.n	22388 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   223c4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   223c8:	d026      	beq.n	22418 <gpio_nrfx_pin_interrupt_configure+0xac>
   223ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   223ce:	bf14      	ite	ne
   223d0:	2301      	movne	r3, #1
   223d2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   223d4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   223d8:	6883      	ldr	r3, [r0, #8]
   223da:	40cb      	lsrs	r3, r1
   223dc:	07d9      	lsls	r1, r3, #31
   223de:	d4e3      	bmi.n	223a8 <gpio_nrfx_pin_interrupt_configure+0x3c>
   223e0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   223e4:	d1e0      	bne.n	223a8 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   223e6:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   223e8:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   223ea:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   223ee:	4a12      	ldr	r2, [pc, #72]	; (22438 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   223f0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   223f4:	bf18      	it	ne
   223f6:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   223fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   223fe:	07db      	lsls	r3, r3, #31
   22400:	d4d2      	bmi.n	223a8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   22402:	f10d 0507 	add.w	r5, sp, #7
   22406:	4629      	mov	r1, r5
   22408:	4620      	mov	r0, r4
   2240a:	f002 f9b1 	bl	24770 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   2240e:	4b0b      	ldr	r3, [pc, #44]	; (2243c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   22410:	4298      	cmp	r0, r3
   22412:	d003      	beq.n	2241c <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   22414:	9503      	str	r5, [sp, #12]
   22416:	e7c7      	b.n	223a8 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   22418:	2303      	movs	r3, #3
   2241a:	e7db      	b.n	223d4 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   2241c:	4628      	mov	r0, r5
   2241e:	f002 f9f5 	bl	2480c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   22422:	4b04      	ldr	r3, [pc, #16]	; (22434 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   22424:	4298      	cmp	r0, r3
   22426:	d0f5      	beq.n	22414 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   22428:	f06f 000b 	mvn.w	r0, #11
   2242c:	e7ad      	b.n	2238a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   2242e:	f06f 0015 	mvn.w	r0, #21
   22432:	e7aa      	b.n	2238a <gpio_nrfx_pin_interrupt_configure+0x1e>
   22434:	0bad0000 	.word	0x0bad0000
   22438:	50000300 	.word	0x50000300
   2243c:	0bad0004 	.word	0x0bad0004

00022440 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   22440:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   22442:	f002 f9d3 	bl	247ec <nrfx_gpiote_is_init>
   22446:	4604      	mov	r4, r0
   22448:	b968      	cbnz	r0, 22466 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   2244a:	f002 f9a7 	bl	2479c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   2244e:	4b08      	ldr	r3, [pc, #32]	; (22470 <gpio_nrfx_init+0x30>)
   22450:	4298      	cmp	r0, r3
   22452:	d10a      	bne.n	2246a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   22454:	4807      	ldr	r0, [pc, #28]	; (22474 <gpio_nrfx_init+0x34>)
   22456:	4621      	mov	r1, r4
   22458:	f002 f984 	bl	24764 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2245c:	4622      	mov	r2, r4
   2245e:	2105      	movs	r1, #5
   22460:	2006      	movs	r0, #6
   22462:	f7f4 fce5 	bl	16e30 <z_arm_irq_priority_set>
		return 0;
   22466:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   22468:	bd10      	pop	{r4, pc}
		return -EIO;
   2246a:	f06f 0004 	mvn.w	r0, #4
   2246e:	e7fb      	b.n	22468 <gpio_nrfx_init+0x28>
   22470:	0bad0000 	.word	0x0bad0000
   22474:	00022479 	.word	0x00022479

00022478 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   22478:	0942      	lsrs	r2, r0, #5
{
   2247a:	b570      	push	{r4, r5, r6, lr}
   2247c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2247e:	d002      	beq.n	22486 <nrfx_gpio_handler+0xe>
   22480:	2a01      	cmp	r2, #1
   22482:	d017      	beq.n	224b4 <nrfx_gpio_handler+0x3c>
}
   22484:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   22486:	4e0d      	ldr	r6, [pc, #52]	; (224bc <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   22488:	6932      	ldr	r2, [r6, #16]
   2248a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2248c:	2900      	cmp	r1, #0
   2248e:	d0f9      	beq.n	22484 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   22490:	f003 031f 	and.w	r3, r3, #31
   22494:	2501      	movs	r5, #1
   22496:	680c      	ldr	r4, [r1, #0]
   22498:	409d      	lsls	r5, r3
   2249a:	2900      	cmp	r1, #0
   2249c:	d0f2      	beq.n	22484 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   2249e:	688a      	ldr	r2, [r1, #8]
   224a0:	402a      	ands	r2, r5
   224a2:	d002      	beq.n	224aa <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   224a4:	684b      	ldr	r3, [r1, #4]
   224a6:	4630      	mov	r0, r6
   224a8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   224aa:	b12c      	cbz	r4, 224b8 <nrfx_gpio_handler+0x40>
   224ac:	6823      	ldr	r3, [r4, #0]
   224ae:	4621      	mov	r1, r4
   224b0:	461c      	mov	r4, r3
   224b2:	e7f2      	b.n	2249a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   224b4:	4e02      	ldr	r6, [pc, #8]	; (224c0 <nrfx_gpio_handler+0x48>)
   224b6:	e7e7      	b.n	22488 <nrfx_gpio_handler+0x10>
   224b8:	4623      	mov	r3, r4
   224ba:	e7f8      	b.n	224ae <nrfx_gpio_handler+0x36>
   224bc:	0002ff78 	.word	0x0002ff78
   224c0:	0002ff60 	.word	0x0002ff60

000224c4 <gpio_nrfx_pin_configure>:
{
   224c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   224c8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   224ca:	7b3b      	ldrb	r3, [r7, #12]
   224cc:	f001 051f 	and.w	r5, r1, #31
   224d0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   224d4:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   224d6:	4628      	mov	r0, r5
   224d8:	f10d 0103 	add.w	r1, sp, #3
{
   224dc:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   224de:	f002 f947 	bl	24770 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   224e2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   224e6:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   224e8:	d10b      	bne.n	22502 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   224ea:	4628      	mov	r0, r5
   224ec:	f002 fa04 	bl	248f8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   224f0:	4b3d      	ldr	r3, [pc, #244]	; (225e8 <gpio_nrfx_pin_configure+0x124>)
   224f2:	4598      	cmp	r8, r3
   224f4:	d103      	bne.n	224fe <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   224f6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   224fa:	f002 f981 	bl	24800 <nrfx_gpiote_channel_free>
		return 0;
   224fe:	2000      	movs	r0, #0
   22500:	e00c      	b.n	2251c <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   22502:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   22504:	4619      	mov	r1, r3
   22506:	aa02      	add	r2, sp, #8
   22508:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   2250a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2250e:	f002 f809 	bl	24524 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   22512:	4b35      	ldr	r3, [pc, #212]	; (225e8 <gpio_nrfx_pin_configure+0x124>)
   22514:	4298      	cmp	r0, r3
   22516:	d004      	beq.n	22522 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   22518:	f06f 0015 	mvn.w	r0, #21
}
   2251c:	b004      	add	sp, #16
   2251e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   22522:	4580      	cmp	r8, r0
   22524:	d103      	bne.n	2252e <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   22526:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2252a:	f002 f969 	bl	24800 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   2252e:	03a3      	lsls	r3, r4, #14
   22530:	d54b      	bpl.n	225ca <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   22532:	f240 3306 	movw	r3, #774	; 0x306
   22536:	4023      	ands	r3, r4
   22538:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   2253c:	d019      	beq.n	22572 <gpio_nrfx_pin_configure+0xae>
   2253e:	d80c      	bhi.n	2255a <gpio_nrfx_pin_configure+0x96>
   22540:	2b06      	cmp	r3, #6
   22542:	d017      	beq.n	22574 <gpio_nrfx_pin_configure+0xb0>
   22544:	d804      	bhi.n	22550 <gpio_nrfx_pin_configure+0x8c>
   22546:	b1ab      	cbz	r3, 22574 <gpio_nrfx_pin_configure+0xb0>
   22548:	2b02      	cmp	r3, #2
   2254a:	d1e5      	bne.n	22518 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   2254c:	2304      	movs	r3, #4
   2254e:	e011      	b.n	22574 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   22550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   22554:	d1e0      	bne.n	22518 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   22556:	2301      	movs	r3, #1
   22558:	e00c      	b.n	22574 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2255a:	f240 2202 	movw	r2, #514	; 0x202
   2255e:	4293      	cmp	r3, r2
   22560:	d027      	beq.n	225b2 <gpio_nrfx_pin_configure+0xee>
   22562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   22566:	d026      	beq.n	225b6 <gpio_nrfx_pin_configure+0xf2>
   22568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2256c:	d1d4      	bne.n	22518 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   2256e:	2302      	movs	r3, #2
   22570:	e000      	b.n	22574 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   22572:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   22574:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   22578:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   2257c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   22580:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   22582:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   22586:	bf54      	ite	pl
   22588:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2258c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2258e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   22590:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   22594:	d511      	bpl.n	225ba <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   22596:	687a      	ldr	r2, [r7, #4]
   22598:	2301      	movs	r3, #1
   2259a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   2259c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   225a0:	2200      	movs	r2, #0
   225a2:	a901      	add	r1, sp, #4
   225a4:	4628      	mov	r0, r5
   225a6:	f002 f86b 	bl	24680 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   225aa:	4b0f      	ldr	r3, [pc, #60]	; (225e8 <gpio_nrfx_pin_configure+0x124>)
   225ac:	4298      	cmp	r0, r3
   225ae:	d0a6      	beq.n	224fe <gpio_nrfx_pin_configure+0x3a>
   225b0:	e7b2      	b.n	22518 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   225b2:	2305      	movs	r3, #5
   225b4:	e7de      	b.n	22574 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   225b6:	2303      	movs	r3, #3
   225b8:	e7dc      	b.n	22574 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   225ba:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   225bc:	bf41      	itttt	mi
   225be:	2301      	movmi	r3, #1
   225c0:	687a      	ldrmi	r2, [r7, #4]
   225c2:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   225c4:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   225c8:	e7ea      	b.n	225a0 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   225ca:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   225cc:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   225d0:	bf54      	ite	pl
   225d2:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   225d6:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   225d8:	461a      	mov	r2, r3
   225da:	a901      	add	r1, sp, #4
   225dc:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   225de:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   225e2:	f001 ff9f 	bl	24524 <nrfx_gpiote_input_configure>
   225e6:	e7e0      	b.n	225aa <gpio_nrfx_pin_configure+0xe6>
   225e8:	0bad0000 	.word	0x0bad0000

000225ec <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   225ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
   225f0:	4e4d      	ldr	r6, [pc, #308]	; (22728 <pinctrl_configure_pins+0x13c>)
   225f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   225f6:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   225f8:	4281      	cmp	r1, r0
   225fa:	d102      	bne.n	22602 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   225fc:	2000      	movs	r0, #0
}
   225fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   22602:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   22604:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   22608:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
   2260c:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2260e:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   22612:	bf08      	it	eq
   22614:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   22618:	2d19      	cmp	r5, #25
   2261a:	f200 8081 	bhi.w	22720 <pinctrl_configure_pins+0x134>
   2261e:	e8df f005 	tbb	[pc, r5]
   22622:	1f0d      	.short	0x1f0d
   22624:	3e2a2724 	.word	0x3e2a2724
   22628:	7f7f7f27 	.word	0x7f7f7f27
   2262c:	7f6b427f 	.word	0x7f6b427f
   22630:	7f7f7f7f 	.word	0x7f7f7f7f
   22634:	7f7f7f7f 	.word	0x7f7f7f7f
   22638:	7c79766e 	.word	0x7c79766e
			NRF_PSEL_UART(reg, TXD) = pin;
   2263c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   22640:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
   22644:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   22648:	f003 051f 	and.w	r5, r3, #31
        case 1: return NRF_P1;
   2264c:	bf14      	ite	ne
   2264e:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
   22652:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22654:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   22658:	f8cc 5508 	str.w	r5, [ip, #1288]	; 0x508
   2265c:	2501      	movs	r5, #1
   2265e:	e002      	b.n	22666 <pinctrl_configure_pins+0x7a>
			NRF_PSEL_UART(reg, RXD) = pin;
   22660:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   22664:	2500      	movs	r5, #0
   22666:	46ae      	mov	lr, r5
   22668:	e024      	b.n	226b4 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_UART(reg, RTS) = pin;
   2266a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   2266e:	e7e7      	b.n	22640 <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = pin;
   22670:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   22674:	e7f6      	b.n	22664 <pinctrl_configure_pins+0x78>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   22676:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2267a:	2500      	movs	r5, #0
    return pin_number >> 5;
   2267c:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
   22680:	f1be 0f01 	cmp.w	lr, #1
   22684:	bf14      	ite	ne
   22686:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
   2268a:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
   2268c:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22690:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   22694:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
   22698:	f04f 0e01 	mov.w	lr, #1
   2269c:	e00a      	b.n	226b4 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2269e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   226a2:	2501      	movs	r5, #1
   226a4:	e7ea      	b.n	2267c <pinctrl_configure_pins+0x90>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   226a6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   226aa:	2c00      	cmp	r4, #0
   226ac:	d1da      	bne.n	22664 <pinctrl_configure_pins+0x78>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   226ae:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   226b0:	46ae      	mov	lr, r5
				drive = NRF_DRIVE_S0D1;
   226b2:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   226b4:	f850 cb04 	ldr.w	ip, [r0], #4
   226b8:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   226bc:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   226c0:	ea4f 2404 	mov.w	r4, r4, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   226c4:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
   226c8:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   226cc:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   226d0:	bf1c      	itt	ne
   226d2:	2501      	movne	r5, #1
   226d4:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   226d8:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
        case 0: return NRF_P0;
   226dc:	2b01      	cmp	r3, #1
   226de:	bf0c      	ite	eq
   226e0:	4633      	moveq	r3, r6
   226e2:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   226e6:	ea44 040e 	orr.w	r4, r4, lr
    reg->PIN_CNF[pin_number] = cnf;
   226ea:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   226ee:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   226f2:	f843 402c 	str.w	r4, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   226f6:	e77f      	b.n	225f8 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   226f8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   226fc:	e7d5      	b.n	226aa <pinctrl_configure_pins+0xbe>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   226fe:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   22702:	6805      	ldr	r5, [r0, #0]
   22704:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
   22708:	2d00      	cmp	r5, #0
   2270a:	d0ca      	beq.n	226a2 <pinctrl_configure_pins+0xb6>
   2270c:	e798      	b.n	22640 <pinctrl_configure_pins+0x54>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2270e:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   22712:	e7f6      	b.n	22702 <pinctrl_configure_pins+0x116>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   22714:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   22718:	e7f3      	b.n	22702 <pinctrl_configure_pins+0x116>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2271a:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   2271e:	e7f0      	b.n	22702 <pinctrl_configure_pins+0x116>
		switch (NRF_GET_FUN(pins[i])) {
   22720:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22724:	e76b      	b.n	225fe <pinctrl_configure_pins+0x12>
   22726:	bf00      	nop
   22728:	50000300 	.word	0x50000300

0002272c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   2272c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2272e:	794b      	ldrb	r3, [r1, #5]
   22730:	2b01      	cmp	r3, #1
   22732:	d026      	beq.n	22782 <uarte_nrfx_configure+0x56>
   22734:	2b03      	cmp	r3, #3
   22736:	d121      	bne.n	2277c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   22738:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2273a:	798b      	ldrb	r3, [r1, #6]
   2273c:	2b03      	cmp	r3, #3
   2273e:	d11d      	bne.n	2277c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   22740:	79ce      	ldrb	r6, [r1, #7]
   22742:	b10e      	cbz	r6, 22748 <uarte_nrfx_configure+0x1c>
   22744:	2e01      	cmp	r6, #1
   22746:	d119      	bne.n	2277c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   22748:	790a      	ldrb	r2, [r1, #4]
   2274a:	b112      	cbz	r2, 22752 <uarte_nrfx_configure+0x26>
   2274c:	2a02      	cmp	r2, #2
   2274e:	d115      	bne.n	2277c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   22750:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   22752:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   22754:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   22756:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2275a:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   2275c:	d067      	beq.n	2282e <uarte_nrfx_configure+0x102>
   2275e:	d82d      	bhi.n	227bc <uarte_nrfx_configure+0x90>
   22760:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   22764:	d066      	beq.n	22834 <uarte_nrfx_configure+0x108>
   22766:	d816      	bhi.n	22796 <uarte_nrfx_configure+0x6a>
   22768:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2276c:	d064      	beq.n	22838 <uarte_nrfx_configure+0x10c>
   2276e:	d80a      	bhi.n	22786 <uarte_nrfx_configure+0x5a>
   22770:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   22774:	d063      	beq.n	2283e <uarte_nrfx_configure+0x112>
   22776:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2277a:	d063      	beq.n	22844 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   2277c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22780:	e054      	b.n	2282c <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   22782:	2500      	movs	r5, #0
   22784:	e7d9      	b.n	2273a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   22786:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2278a:	d05e      	beq.n	2284a <uarte_nrfx_configure+0x11e>
   2278c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   22790:	d1f4      	bne.n	2277c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   22792:	4b38      	ldr	r3, [pc, #224]	; (22874 <uarte_nrfx_configure+0x148>)
   22794:	e03c      	b.n	22810 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   22796:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2279a:	d059      	beq.n	22850 <uarte_nrfx_configure+0x124>
   2279c:	d807      	bhi.n	227ae <uarte_nrfx_configure+0x82>
   2279e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   227a2:	d057      	beq.n	22854 <uarte_nrfx_configure+0x128>
   227a4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   227a8:	d1e8      	bne.n	2277c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   227aa:	4b33      	ldr	r3, [pc, #204]	; (22878 <uarte_nrfx_configure+0x14c>)
   227ac:	e030      	b.n	22810 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   227ae:	f647 2412 	movw	r4, #31250	; 0x7a12
   227b2:	42a3      	cmp	r3, r4
   227b4:	d1e2      	bne.n	2277c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   227b6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   227ba:	e029      	b.n	22810 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   227bc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   227c0:	d04a      	beq.n	22858 <uarte_nrfx_configure+0x12c>
   227c2:	d813      	bhi.n	227ec <uarte_nrfx_configure+0xc0>
   227c4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   227c8:	d049      	beq.n	2285e <uarte_nrfx_configure+0x132>
   227ca:	d809      	bhi.n	227e0 <uarte_nrfx_configure+0xb4>
   227cc:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   227d0:	42a3      	cmp	r3, r4
   227d2:	d046      	beq.n	22862 <uarte_nrfx_configure+0x136>
   227d4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   227d8:	d1d0      	bne.n	2277c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   227da:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   227de:	e017      	b.n	22810 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   227e0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   227e4:	d1ca      	bne.n	2277c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   227e6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   227ea:	e011      	b.n	22810 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   227ec:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   227f0:	d03a      	beq.n	22868 <uarte_nrfx_configure+0x13c>
   227f2:	d808      	bhi.n	22806 <uarte_nrfx_configure+0xda>
   227f4:	4c21      	ldr	r4, [pc, #132]	; (2287c <uarte_nrfx_configure+0x150>)
   227f6:	42a3      	cmp	r3, r4
   227f8:	d039      	beq.n	2286e <uarte_nrfx_configure+0x142>
   227fa:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   227fe:	d1bd      	bne.n	2277c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   22800:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   22804:	e004      	b.n	22810 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   22806:	4c1e      	ldr	r4, [pc, #120]	; (22880 <uarte_nrfx_configure+0x154>)
   22808:	42a3      	cmp	r3, r4
   2280a:	d1b7      	bne.n	2277c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2280c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   22810:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   22812:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   22816:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   22818:	4335      	orrs	r5, r6
   2281a:	681b      	ldr	r3, [r3, #0]
   2281c:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2281e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   22822:	c903      	ldmia	r1, {r0, r1}
   22824:	1d23      	adds	r3, r4, #4
   22826:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   2282a:	2000      	movs	r0, #0
}
   2282c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2282e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   22832:	e7ed      	b.n	22810 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   22834:	4b13      	ldr	r3, [pc, #76]	; (22884 <uarte_nrfx_configure+0x158>)
   22836:	e7eb      	b.n	22810 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   22838:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2283c:	e7e8      	b.n	22810 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   2283e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   22842:	e7e5      	b.n	22810 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   22844:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   22848:	e7e2      	b.n	22810 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2284a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2284e:	e7df      	b.n	22810 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   22850:	4b0d      	ldr	r3, [pc, #52]	; (22888 <uarte_nrfx_configure+0x15c>)
   22852:	e7dd      	b.n	22810 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   22854:	4b0d      	ldr	r3, [pc, #52]	; (2288c <uarte_nrfx_configure+0x160>)
   22856:	e7db      	b.n	22810 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   22858:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2285c:	e7d8      	b.n	22810 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2285e:	4b0c      	ldr	r3, [pc, #48]	; (22890 <uarte_nrfx_configure+0x164>)
   22860:	e7d6      	b.n	22810 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   22862:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   22866:	e7d3      	b.n	22810 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   22868:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2286c:	e7d0      	b.n	22810 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2286e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   22872:	e7cd      	b.n	22810 <uarte_nrfx_configure+0xe4>
   22874:	0013b000 	.word	0x0013b000
   22878:	004ea000 	.word	0x004ea000
   2287c:	0003d090 	.word	0x0003d090
   22880:	000f4240 	.word	0x000f4240
   22884:	00275000 	.word	0x00275000
   22888:	0075c000 	.word	0x0075c000
   2288c:	003af000 	.word	0x003af000
   22890:	013a9000 	.word	0x013a9000

00022894 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   22894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22898:	2200      	movs	r2, #0
   2289a:	b087      	sub	sp, #28
   2289c:	4680      	mov	r8, r0
   2289e:	2101      	movs	r1, #1
   228a0:	2002      	movs	r0, #2
   228a2:	f7f4 fac5 	bl	16e30 <z_arm_irq_priority_set>
   228a6:	2002      	movs	r0, #2
   228a8:	f7f4 fa92 	bl	16dd0 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   228ac:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   228b0:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   228b4:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   228b6:	2100      	movs	r1, #0
   228b8:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   228bc:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   228c0:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   228c4:	466a      	mov	r2, sp
   228c6:	4648      	mov	r0, r9
   228c8:	f00c f95f 	bl	2eb8a <pinctrl_lookup_state>
	if (ret < 0) {
   228cc:	1e05      	subs	r5, r0, #0
   228ce:	db25      	blt.n	2291c <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   228d0:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   228d2:	f8d9 2000 	ldr.w	r2, [r9]
   228d6:	7919      	ldrb	r1, [r3, #4]
   228d8:	6818      	ldr	r0, [r3, #0]
   228da:	f7ff fe87 	bl	225ec <pinctrl_configure_pins>
	if (err < 0) {
   228de:	1e05      	subs	r5, r0, #0
   228e0:	db1c      	blt.n	2291c <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   228e2:	1d31      	adds	r1, r6, #4
   228e4:	4640      	mov	r0, r8
   228e6:	f7ff ff21 	bl	2272c <uarte_nrfx_configure>
	if (err) {
   228ea:	4605      	mov	r5, r0
   228ec:	b9b0      	cbnz	r0, 2291c <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   228ee:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   228f0:	0799      	lsls	r1, r3, #30
   228f2:	d52b      	bpl.n	2294c <uarte_0_init+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   228f4:	f106 001c 	add.w	r0, r6, #28
   228f8:	f002 f9da 	bl	24cb0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   228fc:	4b27      	ldr	r3, [pc, #156]	; (2299c <uarte_0_init+0x108>)
   228fe:	4298      	cmp	r0, r3
   22900:	d010      	beq.n	22924 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   22902:	4b27      	ldr	r3, [pc, #156]	; (229a0 <uarte_0_init+0x10c>)
   22904:	9305      	str	r3, [sp, #20]
   22906:	2302      	movs	r3, #2
   22908:	9304      	str	r3, [sp, #16]
   2290a:	4826      	ldr	r0, [pc, #152]	; (229a4 <uarte_0_init+0x110>)
   2290c:	462b      	mov	r3, r5
   2290e:	aa04      	add	r2, sp, #16
   22910:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
   22914:	f06f 0504 	mvn.w	r5, #4
   22918:	f7f2 f954 	bl	14bc4 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   2291c:	4628      	mov	r0, r5
   2291e:	b007      	add	sp, #28
   22920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   22924:	7f33      	ldrb	r3, [r6, #28]
   22926:	00db      	lsls	r3, r3, #3
   22928:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2292c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   22930:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   22934:	f504 7190 	add.w	r1, r4, #288	; 0x120
   22938:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2293c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   22940:	7f32      	ldrb	r2, [r6, #28]
   22942:	2301      	movs	r3, #1
   22944:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   22946:	4a18      	ldr	r2, [pc, #96]	; (229a8 <uarte_0_init+0x114>)
   22948:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2294c:	2308      	movs	r3, #8
   2294e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   22952:	7a3b      	ldrb	r3, [r7, #8]
   22954:	b953      	cbnz	r3, 2296c <uarte_0_init+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22956:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2295a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2295e:	69b3      	ldr	r3, [r6, #24]
   22960:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   22964:	2301      	movs	r3, #1
   22966:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2296a:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2296c:	687b      	ldr	r3, [r7, #4]
   2296e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   22970:	bf5c      	itt	pl
   22972:	f44f 7380 	movpl.w	r3, #256	; 0x100
   22976:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2297a:	687b      	ldr	r3, [r7, #4]
   2297c:	06db      	lsls	r3, r3, #27
   2297e:	bf44      	itt	mi
   22980:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   22984:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22988:	6973      	ldr	r3, [r6, #20]
   2298a:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2298e:	2300      	movs	r3, #0
   22990:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22994:	2301      	movs	r3, #1
   22996:	60a3      	str	r3, [r4, #8]
   22998:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   2299a:	e7bf      	b.n	2291c <uarte_0_init+0x88>
   2299c:	0bad0000 	.word	0x0bad0000
   229a0:	00033b82 	.word	0x00033b82
   229a4:	00030394 	.word	0x00030394
   229a8:	4001f000 	.word	0x4001f000

000229ac <uarte_nrfx_poll_out>:
{
   229ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   229ae:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   229b0:	6907      	ldr	r7, [r0, #16]
{
   229b2:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   229b4:	f00c fd73 	bl	2f49e <k_is_in_isr>
   229b8:	b9b0      	cbnz	r0, 229e8 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   229ba:	4b21      	ldr	r3, [pc, #132]	; (22a40 <uarte_nrfx_poll_out+0x94>)
   229bc:	781b      	ldrb	r3, [r3, #0]
   229be:	b19b      	cbz	r3, 229e8 <uarte_nrfx_poll_out+0x3c>
{
   229c0:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   229c2:	6860      	ldr	r0, [r4, #4]
   229c4:	f00c f9c3 	bl	2ed4e <is_tx_ready.isra.0>
   229c8:	bb00      	cbnz	r0, 22a0c <uarte_nrfx_poll_out+0x60>
   229ca:	2001      	movs	r0, #1
   229cc:	f00c fb66 	bl	2f09c <nrfx_busy_wait>
   229d0:	3e01      	subs	r6, #1
   229d2:	d1f6      	bne.n	229c2 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   229d4:	2100      	movs	r1, #0
   229d6:	2021      	movs	r0, #33	; 0x21
   229d8:	f004 f960 	bl	26c9c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   229dc:	e7f0      	b.n	229c0 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   229de:	f381 8811 	msr	BASEPRI, r1
   229e2:	f3bf 8f6f 	isb	sy
}
   229e6:	e7f5      	b.n	229d4 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   229e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   229ec:	f3ef 8111 	mrs	r1, BASEPRI
   229f0:	f383 8812 	msr	BASEPRI_MAX, r3
   229f4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   229f8:	6860      	ldr	r0, [r4, #4]
   229fa:	460e      	mov	r6, r1
   229fc:	f00c f9a7 	bl	2ed4e <is_tx_ready.isra.0>
   22a00:	b990      	cbnz	r0, 22a28 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   22a02:	f381 8811 	msr	BASEPRI, r1
   22a06:	f3bf 8f6f 	isb	sy
}
   22a0a:	e7ed      	b.n	229e8 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   22a0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22a10:	f3ef 8111 	mrs	r1, BASEPRI
   22a14:	f383 8812 	msr	BASEPRI_MAX, r3
   22a18:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   22a1c:	6860      	ldr	r0, [r4, #4]
   22a1e:	460e      	mov	r6, r1
   22a20:	f00c f995 	bl	2ed4e <is_tx_ready.isra.0>
   22a24:	2800      	cmp	r0, #0
   22a26:	d0da      	beq.n	229de <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   22a28:	697b      	ldr	r3, [r7, #20]
   22a2a:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   22a2c:	6979      	ldr	r1, [r7, #20]
   22a2e:	2201      	movs	r2, #1
   22a30:	4620      	mov	r0, r4
   22a32:	f00c f8cc 	bl	2ebce <tx_start>
	__asm__ volatile(
   22a36:	f386 8811 	msr	BASEPRI, r6
   22a3a:	f3bf 8f6f 	isb	sy
}
   22a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22a40:	200057f7 	.word	0x200057f7

00022a44 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   22a44:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   22a46:	2301      	movs	r3, #1
   22a48:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22a4a:	4a0e      	ldr	r2, [pc, #56]	; (22a84 <compare_int_lock+0x40>)
   22a4c:	f3bf 8f5b 	dmb	ish
   22a50:	43dc      	mvns	r4, r3
   22a52:	e852 1f00 	ldrex	r1, [r2]
   22a56:	ea01 0504 	and.w	r5, r1, r4
   22a5a:	e842 5600 	strex	r6, r5, [r2]
   22a5e:	2e00      	cmp	r6, #0
   22a60:	d1f7      	bne.n	22a52 <compare_int_lock+0xe>
   22a62:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22a66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   22a6a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   22a6c:	4806      	ldr	r0, [pc, #24]	; (22a88 <compare_int_lock+0x44>)
   22a6e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   22a72:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22a76:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   22a7a:	420b      	tst	r3, r1
}
   22a7c:	bf14      	ite	ne
   22a7e:	2001      	movne	r0, #1
   22a80:	2000      	moveq	r0, #0
   22a82:	bd70      	pop	{r4, r5, r6, pc}
   22a84:	20004788 	.word	0x20004788
   22a88:	40011000 	.word	0x40011000

00022a8c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   22a8c:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   22a8e:	490e      	ldr	r1, [pc, #56]	; (22ac8 <sys_clock_timeout_handler+0x3c>)
   22a90:	e9d1 3400 	ldrd	r3, r4, [r1]
   22a94:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   22a96:	18c3      	adds	r3, r0, r3
   22a98:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   22a9c:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   22aa0:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   22aa4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   22aa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   22aac:	d209      	bcs.n	22ac2 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   22aae:	4b07      	ldr	r3, [pc, #28]	; (22acc <sys_clock_timeout_handler+0x40>)
   22ab0:	681b      	ldr	r3, [r3, #0]
   22ab2:	0a1a      	lsrs	r2, r3, #8
   22ab4:	061b      	lsls	r3, r3, #24
   22ab6:	199c      	adds	r4, r3, r6
   22ab8:	4b05      	ldr	r3, [pc, #20]	; (22ad0 <sys_clock_timeout_handler+0x44>)
   22aba:	f142 0500 	adc.w	r5, r2, #0
   22abe:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   22ac2:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   22ac4:	f004 ba90 	b.w	26fe8 <sys_clock_announce>
   22ac8:	200027c0 	.word	0x200027c0
   22acc:	2000478c 	.word	0x2000478c
   22ad0:	200027c8 	.word	0x200027c8

00022ad4 <compare_int_unlock>:
	if (key) {
   22ad4:	b311      	cbz	r1, 22b1c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22ad6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   22ada:	2301      	movs	r3, #1
   22adc:	4a10      	ldr	r2, [pc, #64]	; (22b20 <compare_int_unlock+0x4c>)
   22ade:	4083      	lsls	r3, r0
   22ae0:	e852 cf00 	ldrex	ip, [r2]
   22ae4:	ea4c 0c03 	orr.w	ip, ip, r3
   22ae8:	e842 c100 	strex	r1, ip, [r2]
   22aec:	2900      	cmp	r1, #0
   22aee:	d1f7      	bne.n	22ae0 <compare_int_unlock+0xc>
   22af0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   22af4:	4a0b      	ldr	r2, [pc, #44]	; (22b24 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22afa:	4083      	lsls	r3, r0
   22afc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22b00:	4b09      	ldr	r3, [pc, #36]	; (22b28 <compare_int_unlock+0x54>)
   22b02:	f3bf 8f5b 	dmb	ish
   22b06:	681b      	ldr	r3, [r3, #0]
   22b08:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   22b0c:	40c3      	lsrs	r3, r0
   22b0e:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22b10:	bf42      	ittt	mi
   22b12:	4b06      	ldrmi	r3, [pc, #24]	; (22b2c <compare_int_unlock+0x58>)
   22b14:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   22b18:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   22b1c:	4770      	bx	lr
   22b1e:	bf00      	nop
   22b20:	20004788 	.word	0x20004788
   22b24:	40011000 	.word	0x40011000
   22b28:	20004784 	.word	0x20004784
   22b2c:	e000e100 	.word	0xe000e100

00022b30 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   22b30:	4b0d      	ldr	r3, [pc, #52]	; (22b68 <z_nrf_rtc_timer_read+0x38>)
   22b32:	6818      	ldr	r0, [r3, #0]
   22b34:	0a01      	lsrs	r1, r0, #8
   22b36:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   22b38:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   22b3c:	4b0b      	ldr	r3, [pc, #44]	; (22b6c <z_nrf_rtc_timer_read+0x3c>)
   22b3e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   22b42:	1818      	adds	r0, r3, r0
   22b44:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   22b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22b4c:	d20a      	bcs.n	22b64 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   22b4e:	4b08      	ldr	r3, [pc, #32]	; (22b70 <z_nrf_rtc_timer_read+0x40>)
   22b50:	e9d3 2300 	ldrd	r2, r3, [r3]
   22b54:	4290      	cmp	r0, r2
   22b56:	eb71 0303 	sbcs.w	r3, r1, r3
   22b5a:	d203      	bcs.n	22b64 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   22b5c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   22b60:	f141 0100 	adc.w	r1, r1, #0
}
   22b64:	4770      	bx	lr
   22b66:	bf00      	nop
   22b68:	2000478c 	.word	0x2000478c
   22b6c:	40011000 	.word	0x40011000
   22b70:	200027c8 	.word	0x200027c8

00022b74 <compare_set>:
{
   22b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b78:	4616      	mov	r6, r2
   22b7a:	461f      	mov	r7, r3
   22b7c:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   22b7e:	f7ff ff61 	bl	22a44 <compare_int_lock>
   22b82:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   22b84:	f7ff ffd4 	bl	22b30 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   22b88:	42b0      	cmp	r0, r6
   22b8a:	eb71 0307 	sbcs.w	r3, r1, r7
   22b8e:	d251      	bcs.n	22c34 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   22b90:	4b3a      	ldr	r3, [pc, #232]	; (22c7c <compare_set+0x108>)
   22b92:	1a30      	subs	r0, r6, r0
   22b94:	eb67 0101 	sbc.w	r1, r7, r1
   22b98:	4298      	cmp	r0, r3
   22b9a:	f171 0100 	sbcs.w	r1, r1, #0
   22b9e:	d26a      	bcs.n	22c76 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   22ba0:	4b37      	ldr	r3, [pc, #220]	; (22c80 <compare_set+0x10c>)
   22ba2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   22ba6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   22baa:	429f      	cmp	r7, r3
   22bac:	bf08      	it	eq
   22bae:	4296      	cmpeq	r6, r2
   22bb0:	d04e      	beq.n	22c50 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   22bb2:	4934      	ldr	r1, [pc, #208]	; (22c84 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22bb4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   22bb8:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22bbc:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   22bc0:	00ad      	lsls	r5, r5, #2
   22bc2:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   22bc6:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22bc8:	b2ad      	uxth	r5, r5
   22bca:	f00c f96d 	bl	2eea8 <event_clear>
	return absolute_time & COUNTER_MAX;
   22bce:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   22bd2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   22bd6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   22bda:	4a2b      	ldr	r2, [pc, #172]	; (22c88 <compare_set+0x114>)
   22bdc:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22bde:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   22be2:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   22be4:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   22be8:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22bea:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   22bee:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   22bf2:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   22bf6:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   22bfa:	f06f 0002 	mvn.w	r0, #2
   22bfe:	eba0 0008 	sub.w	r0, r0, r8
   22c02:	4460      	add	r0, ip
   22c04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   22c08:	4290      	cmp	r0, r2
   22c0a:	d921      	bls.n	22c50 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22c0c:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   22c0e:	b160      	cbz	r0, 22c2a <compare_set+0xb6>
     return p_reg->COUNTER;
   22c10:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   22c14:	eba8 000b 	sub.w	r0, r8, fp
   22c18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   22c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22c20:	d916      	bls.n	22c50 <compare_set+0xdc>
					event_clear(chan);
   22c22:	4620      	mov	r0, r4
   22c24:	f00c f940 	bl	2eea8 <event_clear>
   22c28:	4a17      	ldr	r2, [pc, #92]	; (22c88 <compare_set+0x114>)
			cc_val = now + cc_inc;
   22c2a:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   22c2e:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   22c32:	e7d9      	b.n	22be8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   22c34:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22c36:	4a15      	ldr	r2, [pc, #84]	; (22c8c <compare_set+0x118>)
   22c38:	f3bf 8f5b 	dmb	ish
   22c3c:	40a3      	lsls	r3, r4
   22c3e:	e852 0f00 	ldrex	r0, [r2]
   22c42:	4318      	orrs	r0, r3
   22c44:	e842 0100 	strex	r1, r0, [r2]
   22c48:	2900      	cmp	r1, #0
   22c4a:	d1f8      	bne.n	22c3e <compare_set+0xca>
   22c4c:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   22c50:	490b      	ldr	r1, [pc, #44]	; (22c80 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   22c52:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   22c54:	0123      	lsls	r3, r4, #4
   22c56:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   22c5a:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   22c5e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   22c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22c62:	6053      	str	r3, [r2, #4]
	return ret;
   22c64:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   22c66:	4620      	mov	r0, r4
   22c68:	9900      	ldr	r1, [sp, #0]
   22c6a:	f7ff ff33 	bl	22ad4 <compare_int_unlock>
}
   22c6e:	4628      	mov	r0, r5
   22c70:	b003      	add	sp, #12
   22c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   22c76:	f06f 0515 	mvn.w	r5, #21
   22c7a:	e7f4      	b.n	22c66 <compare_set+0xf2>
   22c7c:	00800001 	.word	0x00800001
   22c80:	200027b0 	.word	0x200027b0
   22c84:	40011000 	.word	0x40011000
   22c88:	007ffffd 	.word	0x007ffffd
   22c8c:	20004784 	.word	0x20004784

00022c90 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   22c90:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   22c92:	4c1b      	ldr	r4, [pc, #108]	; (22d00 <sys_clock_driver_init+0x70>)
   22c94:	4b1b      	ldr	r3, [pc, #108]	; (22d04 <sys_clock_driver_init+0x74>)
   22c96:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   22c9a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   22c9e:	4b1a      	ldr	r3, [pc, #104]	; (22d08 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
   22ca0:	2500      	movs	r5, #0
   22ca2:	f04f 30ff 	mov.w	r0, #4294967295
   22ca6:	f04f 31ff 	mov.w	r1, #4294967295
   22caa:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   22cae:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   22cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22cb6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22cba:	4b14      	ldr	r3, [pc, #80]	; (22d0c <sys_clock_driver_init+0x7c>)
   22cbc:	2602      	movs	r6, #2
   22cbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   22cc2:	2101      	movs	r1, #1
   22cc4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   22cc8:	2011      	movs	r0, #17
   22cca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   22cce:	462a      	mov	r2, r5
   22cd0:	f7f4 f8ae 	bl	16e30 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   22cd4:	2011      	movs	r0, #17
   22cd6:	f7f4 f87b 	bl	16dd0 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   22cda:	4a0d      	ldr	r2, [pc, #52]	; (22d10 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   22cdc:	2301      	movs	r3, #1
   22cde:	60a3      	str	r3, [r4, #8]
   22ce0:	6023      	str	r3, [r4, #0]
   22ce2:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22ce4:	4b0b      	ldr	r3, [pc, #44]	; (22d14 <sys_clock_driver_init+0x84>)
   22ce6:	4a0c      	ldr	r2, [pc, #48]	; (22d18 <sys_clock_driver_init+0x88>)
   22ce8:	9300      	str	r3, [sp, #0]
   22cea:	9501      	str	r5, [sp, #4]
   22cec:	2300      	movs	r3, #0
   22cee:	4628      	mov	r0, r5
   22cf0:	f7ff ff40 	bl	22b74 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   22cf4:	4630      	mov	r0, r6
   22cf6:	f7fe ff71 	bl	21bdc <z_nrf_clock_control_lf_on>

	return 0;
}
   22cfa:	4628      	mov	r0, r5
   22cfc:	b002      	add	sp, #8
   22cfe:	bd70      	pop	{r4, r5, r6, pc}
   22d00:	40011000 	.word	0x40011000
   22d04:	000f0003 	.word	0x000f0003
   22d08:	200027b0 	.word	0x200027b0
   22d0c:	e000e100 	.word	0xe000e100
   22d10:	20004788 	.word	0x20004788
   22d14:	00022a8d 	.word	0x00022a8d
   22d18:	007fffff 	.word	0x007fffff

00022d1c <rtc_nrf_isr>:
{
   22d1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   22d20:	4c2b      	ldr	r4, [pc, #172]	; (22dd0 <rtc_nrf_isr+0xb4>)
   22d22:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   22d26:	0799      	lsls	r1, r3, #30
   22d28:	d50b      	bpl.n	22d42 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22d2a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   22d2e:	b143      	cbz	r3, 22d42 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   22d30:	4a28      	ldr	r2, [pc, #160]	; (22dd4 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22d32:	2300      	movs	r3, #0
   22d34:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   22d38:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   22d3c:	6813      	ldr	r3, [r2, #0]
   22d3e:	3301      	adds	r3, #1
   22d40:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   22d42:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   22d46:	03da      	lsls	r2, r3, #15
   22d48:	d523      	bpl.n	22d92 <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22d4a:	f3bf 8f5b 	dmb	ish
   22d4e:	4b22      	ldr	r3, [pc, #136]	; (22dd8 <rtc_nrf_isr+0xbc>)
   22d50:	e853 2f00 	ldrex	r2, [r3]
   22d54:	f022 0101 	bic.w	r1, r2, #1
   22d58:	e843 1000 	strex	r0, r1, [r3]
   22d5c:	2800      	cmp	r0, #0
   22d5e:	d1f7      	bne.n	22d50 <rtc_nrf_isr+0x34>
   22d60:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   22d64:	07d3      	lsls	r3, r2, #31
   22d66:	d402      	bmi.n	22d6e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22d68:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   22d6c:	b18b      	cbz	r3, 22d92 <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22d6e:	2500      	movs	r5, #0
   22d70:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   22d74:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   22d78:	f7ff feda 	bl	22b30 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   22d7c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   22d80:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   22d82:	4b16      	ldr	r3, [pc, #88]	; (22ddc <rtc_nrf_isr+0xc0>)
   22d84:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   22d88:	42b0      	cmp	r0, r6
   22d8a:	41b9      	sbcs	r1, r7
   22d8c:	d204      	bcs.n	22d98 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   22d8e:	f382 8810 	msr	PRIMASK, r2
}
   22d92:	b003      	add	sp, #12
   22d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22d98:	f04f 38ff 	mov.w	r8, #4294967295
   22d9c:	f04f 39ff 	mov.w	r9, #4294967295
   22da0:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   22da4:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   22da8:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   22daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22dae:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22db2:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   22db6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   22dba:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   22dbe:	2900      	cmp	r1, #0
   22dc0:	d0e7      	beq.n	22d92 <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   22dc2:	9000      	str	r0, [sp, #0]
   22dc4:	4632      	mov	r2, r6
   22dc6:	463b      	mov	r3, r7
   22dc8:	4628      	mov	r0, r5
   22dca:	4788      	blx	r1
   22dcc:	e7e1      	b.n	22d92 <rtc_nrf_isr+0x76>
   22dce:	bf00      	nop
   22dd0:	40011000 	.word	0x40011000
   22dd4:	2000478c 	.word	0x2000478c
   22dd8:	20004784 	.word	0x20004784
   22ddc:	200027b0 	.word	0x200027b0

00022de0 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   22de0:	1c43      	adds	r3, r0, #1
{
   22de2:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   22de4:	d022      	beq.n	22e2c <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   22de6:	2801      	cmp	r0, #1
   22de8:	dd22      	ble.n	22e30 <sys_clock_set_timeout+0x50>
   22dea:	4a12      	ldr	r2, [pc, #72]	; (22e34 <sys_clock_set_timeout+0x54>)
   22dec:	4b12      	ldr	r3, [pc, #72]	; (22e38 <sys_clock_set_timeout+0x58>)
   22dee:	4290      	cmp	r0, r2
   22df0:	bfd4      	ite	le
   22df2:	4604      	movle	r4, r0
   22df4:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   22df6:	f7ff fe9b 	bl	22b30 <z_nrf_rtc_timer_read>
   22dfa:	4b10      	ldr	r3, [pc, #64]	; (22e3c <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   22dfc:	490e      	ldr	r1, [pc, #56]	; (22e38 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   22dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   22e02:	1a80      	subs	r0, r0, r2
		cyc = 0;
   22e04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22e08:	bf28      	it	cs
   22e0a:	2400      	movcs	r4, #0
	cyc += unannounced;
   22e0c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   22e0e:	428c      	cmp	r4, r1
   22e10:	bf28      	it	cs
   22e12:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   22e14:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   22e16:	490a      	ldr	r1, [pc, #40]	; (22e40 <sys_clock_set_timeout+0x60>)
   22e18:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   22e1a:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   22e1e:	9001      	str	r0, [sp, #4]
   22e20:	f143 0300 	adc.w	r3, r3, #0
   22e24:	f7ff fea6 	bl	22b74 <compare_set>
}
   22e28:	b002      	add	sp, #8
   22e2a:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   22e2c:	4c02      	ldr	r4, [pc, #8]	; (22e38 <sys_clock_set_timeout+0x58>)
   22e2e:	e7e2      	b.n	22df6 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   22e30:	2401      	movs	r4, #1
   22e32:	e7e0      	b.n	22df6 <sys_clock_set_timeout+0x16>
   22e34:	007ffffe 	.word	0x007ffffe
   22e38:	007fffff 	.word	0x007fffff
   22e3c:	200027c0 	.word	0x200027c0
   22e40:	00022a8d 	.word	0x00022a8d

00022e44 <sys_clock_elapsed>:
{
   22e44:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   22e46:	f7ff fe73 	bl	22b30 <z_nrf_rtc_timer_read>
   22e4a:	4b02      	ldr	r3, [pc, #8]	; (22e54 <sys_clock_elapsed+0x10>)
   22e4c:	681b      	ldr	r3, [r3, #0]
}
   22e4e:	1ac0      	subs	r0, r0, r3
   22e50:	bd08      	pop	{r3, pc}
   22e52:	bf00      	nop
   22e54:	200027c0 	.word	0x200027c0

00022e58 <sys_clock_disable>:
{
   22e58:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   22e5a:	4c08      	ldr	r4, [pc, #32]	; (22e7c <sys_clock_disable+0x24>)
   22e5c:	2301      	movs	r3, #1
   22e5e:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
   22e60:	2011      	movs	r0, #17
   22e62:	f7f3 ffc3 	bl	16dec <arch_irq_disable>
    p_reg->INTENCLR = mask;
   22e66:	4b06      	ldr	r3, [pc, #24]	; (22e80 <sys_clock_disable+0x28>)
   22e68:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   22e6c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   22e70:	4b04      	ldr	r3, [pc, #16]	; (22e84 <sys_clock_disable+0x2c>)
   22e72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   22e76:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   22e7a:	bd10      	pop	{r4, pc}
   22e7c:	40011000 	.word	0x40011000
   22e80:	000f0003 	.word	0x000f0003
   22e84:	e000e100 	.word	0xe000e100

00022e88 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   22e88:	4602      	mov	r2, r0
   22e8a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   22e8c:	4801      	ldr	r0, [pc, #4]	; (22e94 <multithreading_lock_acquire+0xc>)
   22e8e:	f003 b919 	b.w	260c4 <z_impl_k_mutex_lock>
   22e92:	bf00      	nop
   22e94:	20000c5c 	.word	0x20000c5c

00022e98 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   22e98:	4801      	ldr	r0, [pc, #4]	; (22ea0 <multithreading_lock_release+0x8>)
   22e9a:	f003 b98d 	b.w	261b8 <z_impl_k_mutex_unlock>
   22e9e:	bf00      	nop
   22ea0:	20000c5c 	.word	0x20000c5c

00022ea4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   22ea4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   22ea6:	f7f1 fdad 	bl	14a04 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   22eaa:	4b07      	ldr	r3, [pc, #28]	; (22ec8 <k_sys_fatal_error_handler+0x24>)
   22eac:	9305      	str	r3, [sp, #20]
   22eae:	2302      	movs	r3, #2
   22eb0:	9304      	str	r3, [sp, #16]
   22eb2:	4806      	ldr	r0, [pc, #24]	; (22ecc <k_sys_fatal_error_handler+0x28>)
   22eb4:	2300      	movs	r3, #0
   22eb6:	aa04      	add	r2, sp, #16
   22eb8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22ebc:	f7f1 fe82 	bl	14bc4 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   22ec0:	2000      	movs	r0, #0
   22ec2:	f7f4 fd7d 	bl	179c0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   22ec6:	bf00      	nop
   22ec8:	00033bd3 	.word	0x00033bd3
   22ecc:	0003031c 	.word	0x0003031c

00022ed0 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   22ed0:	b598      	push	{r3, r4, r7, lr}
   22ed2:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   22ed4:	466c      	mov	r4, sp
   22ed6:	b08a      	sub	sp, #40	; 0x28
   22ed8:	466a      	mov	r2, sp
   22eda:	4b0c      	ldr	r3, [pc, #48]	; (22f0c <sdc_assertion_handler+0x3c>)
   22edc:	61d1      	str	r1, [r2, #28]
   22ede:	e9c2 3005 	strd	r3, r0, [r2, #20]
   22ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
   22ee6:	8413      	strh	r3, [r2, #32]
   22ee8:	4b09      	ldr	r3, [pc, #36]	; (22f10 <sdc_assertion_handler+0x40>)
   22eea:	f842 3f10 	str.w	r3, [r2, #16]!
   22eee:	4809      	ldr	r0, [pc, #36]	; (22f14 <sdc_assertion_handler+0x44>)
   22ef0:	2300      	movs	r3, #0
   22ef2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   22ef6:	f7f1 fe65 	bl	14bc4 <z_impl_z_log_msg_static_create>
   22efa:	46a5      	mov	sp, r4
	k_oops();
   22efc:	4040      	eors	r0, r0
   22efe:	f380 8811 	msr	BASEPRI, r0
   22f02:	f04f 0003 	mov.w	r0, #3
   22f06:	df02      	svc	2
}
   22f08:	46bd      	mov	sp, r7
   22f0a:	bd98      	pop	{r3, r4, r7, pc}
   22f0c:	00033bf0 	.word	0x00033bf0
   22f10:	01000004 	.word	0x01000004
   22f14:	000302ec 	.word	0x000302ec

00022f18 <rand_prio_low_vector_get>:
}

static const struct device *entropy_source = DEVICE_DT_GET(DT_NODELABEL(rng));

static uint8_t rand_prio_low_vector_get(uint8_t *p_buff, uint8_t length)
{
   22f18:	b538      	push	{r3, r4, r5, lr}
   22f1a:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   22f1c:	4807      	ldr	r0, [pc, #28]	; (22f3c <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   22f1e:	6883      	ldr	r3, [r0, #8]
   22f20:	685d      	ldr	r5, [r3, #4]
   22f22:	460a      	mov	r2, r1
   22f24:	b135      	cbz	r5, 22f34 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   22f26:	2300      	movs	r3, #0
   22f28:	4621      	mov	r1, r4
   22f2a:	47a8      	blx	r5
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);

	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
	return ret >= 0 ? ret : 0;
   22f2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   22f30:	b2c0      	uxtb	r0, r0
   22f32:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   22f34:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22f38:	e7f8      	b.n	22f2c <rand_prio_low_vector_get+0x14>
   22f3a:	bf00      	nop
   22f3c:	0002ff90 	.word	0x0002ff90

00022f40 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   22f40:	4901      	ldr	r1, [pc, #4]	; (22f48 <receive_signal_raise+0x8>)
   22f42:	4802      	ldr	r0, [pc, #8]	; (22f4c <receive_signal_raise+0xc>)
   22f44:	f00c bc15 	b.w	2f772 <k_work_submit_to_queue>
   22f48:	20004790 	.word	0x20004790
   22f4c:	20003050 	.word	0x20003050

00022f50 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   22f50:	b410      	push	{r4}
   22f52:	4603      	mov	r3, r0
   22f54:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   22f56:	4803      	ldr	r0, [pc, #12]	; (22f64 <rand_prio_low_vector_get_blocking+0x14>)
   22f58:	6881      	ldr	r1, [r0, #8]
   22f5a:	680c      	ldr	r4, [r1, #0]
   22f5c:	4619      	mov	r1, r3
   22f5e:	4623      	mov	r3, r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   22f60:	bc10      	pop	{r4}
   22f62:	4718      	bx	r3
   22f64:	0002ff90 	.word	0x0002ff90

00022f68 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   22f68:	b5b0      	push	{r4, r5, r7, lr}
   22f6a:	b082      	sub	sp, #8
	int err = 0;

	bt_hci_driver_register(&drv);
   22f6c:	4839      	ldr	r0, [pc, #228]	; (23054 <hci_driver_init+0xec>)
{
   22f6e:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   22f70:	f7f6 faea 	bl	19548 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   22f74:	4838      	ldr	r0, [pc, #224]	; (23058 <hci_driver_init+0xf0>)
   22f76:	f7de fcd5 	bl	1924 <sdc_init>
		err = sdc_support_adv();
   22f7a:	f7de fd4d 	bl	1a18 <sdc_support_adv>
		if (err) {
   22f7e:	b120      	cbz	r0, 22f8a <hci_driver_init+0x22>
			return -ENOTSUP;
   22f80:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   22f84:	3708      	adds	r7, #8
   22f86:	46bd      	mov	sp, r7
   22f88:	bdb0      	pop	{r4, r5, r7, pc}
		err = sdc_support_peripheral();
   22f8a:	f7de fd75 	bl	1a78 <sdc_support_peripheral>
		if (err) {
   22f8e:	2800      	cmp	r0, #0
   22f90:	d1f6      	bne.n	22f80 <hci_driver_init+0x18>
			err = sdc_support_dle_peripheral();
   22f92:	f7de fd51 	bl	1a38 <sdc_support_dle_peripheral>
			if (err) {
   22f96:	2800      	cmp	r0, #0
   22f98:	d1f2      	bne.n	22f80 <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   22f9a:	f7de fd5d 	bl	1a58 <sdc_support_le_2m_phy>
		if (err) {
   22f9e:	2800      	cmp	r0, #0
   22fa0:	d1ee      	bne.n	22f80 <hci_driver_init+0x18>
			err = sdc_support_phy_update_peripheral();
   22fa2:	f7de fd79 	bl	1a98 <sdc_support_phy_update_peripheral>
			if (err) {
   22fa6:	4604      	mov	r4, r0
   22fa8:	2800      	cmp	r0, #0
   22faa:	d1e9      	bne.n	22f80 <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   22fac:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fae:	1d3a      	adds	r2, r7, #4
   22fb0:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   22fb2:	713d      	strb	r5, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fb4:	f7de fc2c 	bl	1810 <sdc_cfg_set>
	if (required_memory < 0) {
   22fb8:	2800      	cmp	r0, #0
   22fba:	dbe3      	blt.n	22f84 <hci_driver_init+0x1c>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   22fbc:	2108      	movs	r1, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fbe:	1d3a      	adds	r2, r7, #4
   22fc0:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   22fc2:	80b9      	strh	r1, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fc4:	f7de fc24 	bl	1810 <sdc_cfg_set>
	if (required_memory < 0) {
   22fc8:	2800      	cmp	r0, #0
   22fca:	dbdb      	blt.n	22f84 <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   22fcc:	4b23      	ldr	r3, [pc, #140]	; (2305c <hci_driver_init+0xf4>)
   22fce:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fd0:	1d3a      	adds	r2, r7, #4
   22fd2:	2103      	movs	r1, #3
   22fd4:	4620      	mov	r0, r4
   22fd6:	f7de fc1b 	bl	1810 <sdc_cfg_set>
	if (required_memory < 0) {
   22fda:	2800      	cmp	r0, #0
   22fdc:	dbd2      	blt.n	22f84 <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   22fde:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fe2:	1d3a      	adds	r2, r7, #4
   22fe4:	2104      	movs	r1, #4
   22fe6:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   22fe8:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fea:	f7de fc11 	bl	1810 <sdc_cfg_set>
	if (required_memory < 0) {
   22fee:	2800      	cmp	r0, #0
   22ff0:	dbc8      	blt.n	22f84 <hci_driver_init+0x1c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22ff2:	1d3a      	adds	r2, r7, #4
   22ff4:	2105      	movs	r1, #5
   22ff6:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   22ff8:	713d      	strb	r5, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22ffa:	f7de fc09 	bl	1810 <sdc_cfg_set>
	if (required_memory < 0) {
   22ffe:	2800      	cmp	r0, #0
   23000:	dbc0      	blt.n	22f84 <hci_driver_init+0x1c>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   23002:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   23004:	1d3a      	adds	r2, r7, #4
   23006:	2107      	movs	r1, #7
   23008:	2000      	movs	r0, #0
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   2300a:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2300c:	f7de fc00 	bl	1810 <sdc_cfg_set>
	if (required_memory < 0) {
   23010:	2800      	cmp	r0, #0
   23012:	dbb7      	blt.n	22f84 <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   23014:	f240 73fa 	movw	r3, #2042	; 0x7fa
   23018:	4298      	cmp	r0, r3
   2301a:	dd19      	ble.n	23050 <hci_driver_init+0xe8>
		LOG_ERR("Allocated memory too low: %u < %u",
   2301c:	466c      	mov	r4, sp
   2301e:	b088      	sub	sp, #32
   23020:	466a      	mov	r2, sp
   23022:	490f      	ldr	r1, [pc, #60]	; (23060 <hci_driver_init+0xf8>)
   23024:	61d0      	str	r0, [r2, #28]
   23026:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2302a:	2304      	movs	r3, #4
   2302c:	f842 3f10 	str.w	r3, [r2, #16]!
   23030:	480c      	ldr	r0, [pc, #48]	; (23064 <hci_driver_init+0xfc>)
   23032:	2300      	movs	r3, #0
   23034:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   23038:	f7f1 fdc4 	bl	14bc4 <z_impl_z_log_msg_static_create>
   2303c:	46a5      	mov	sp, r4
		k_panic();
   2303e:	4040      	eors	r0, r0
   23040:	f380 8811 	msr	BASEPRI, r0
   23044:	f04f 0004 	mov.w	r0, #4
   23048:	df02      	svc	2
		return -ENOMEM;
   2304a:	f06f 000b 	mvn.w	r0, #11
   2304e:	e799      	b.n	22f84 <hci_driver_init+0x1c>
	return 0;
   23050:	2000      	movs	r0, #0
	if (err) {
   23052:	e797      	b.n	22f84 <hci_driver_init+0x1c>
   23054:	00030c7c 	.word	0x00030c7c
   23058:	00022ed1 	.word	0x00022ed1
   2305c:	02031b1b 	.word	0x02031b1b
   23060:	00033c15 	.word	0x00033c15
   23064:	000302ec 	.word	0x000302ec

00023068 <hci_driver_open>:
{
   23068:	b590      	push	{r4, r7, lr}
   2306a:	b08d      	sub	sp, #52	; 0x34
	k_work_init(&receive_work, receive_work_handler);
   2306c:	492f      	ldr	r1, [pc, #188]	; (2312c <hci_driver_open+0xc4>)
   2306e:	4830      	ldr	r0, [pc, #192]	; (23130 <hci_driver_open+0xc8>)
{
   23070:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   23072:	f00c fb51 	bl	2f718 <k_work_init>
		hci_ecdh_init();
   23076:	f000 fe77 	bl	23d68 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   2307a:	1d38      	adds	r0, r7, #4
   2307c:	f7de fbba 	bl	17f4 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   23080:	466c      	mov	r4, sp
   23082:	b088      	sub	sp, #32
   23084:	466a      	mov	r2, sp
   23086:	4b2b      	ldr	r3, [pc, #172]	; (23134 <hci_driver_open+0xcc>)
   23088:	6153      	str	r3, [r2, #20]
   2308a:	4b2b      	ldr	r3, [pc, #172]	; (23138 <hci_driver_open+0xd0>)
   2308c:	6193      	str	r3, [r2, #24]
   2308e:	f44f 7300 	mov.w	r3, #512	; 0x200
   23092:	8393      	strh	r3, [r2, #28]
   23094:	4b29      	ldr	r3, [pc, #164]	; (2313c <hci_driver_open+0xd4>)
   23096:	f842 3f10 	str.w	r3, [r2, #16]!
   2309a:	4929      	ldr	r1, [pc, #164]	; (23140 <hci_driver_open+0xd8>)
   2309c:	4829      	ldr	r0, [pc, #164]	; (23144 <hci_driver_open+0xdc>)
   2309e:	1d3b      	adds	r3, r7, #4
   230a0:	f7f1 fd90 	bl	14bc4 <z_impl_z_log_msg_static_create>
   230a4:	46a5      	mov	sp, r4
   230a6:	4828      	ldr	r0, [pc, #160]	; (23148 <hci_driver_open+0xe0>)
   230a8:	f00c f92b 	bl	2f302 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   230ac:	4603      	mov	r3, r0
   230ae:	b980      	cbnz	r0, 230d2 <hci_driver_open+0x6a>
		LOG_ERR("Entropy source device not ready");
   230b0:	4a26      	ldr	r2, [pc, #152]	; (2314c <hci_driver_open+0xe4>)
   230b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   230b4:	2202      	movs	r2, #2
   230b6:	62ba      	str	r2, [r7, #40]	; 0x28
   230b8:	4822      	ldr	r0, [pc, #136]	; (23144 <hci_driver_open+0xdc>)
   230ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
   230be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   230c2:	f06f 0412 	mvn.w	r4, #18
   230c6:	f7f1 fd7d 	bl	14bc4 <z_impl_z_log_msg_static_create>
}
   230ca:	4620      	mov	r0, r4
   230cc:	3734      	adds	r7, #52	; 0x34
   230ce:	46bd      	mov	sp, r7
   230d0:	bd90      	pop	{r4, r7, pc}
	sdc_rand_source_t rand_functions = {
   230d2:	4a1f      	ldr	r2, [pc, #124]	; (23150 <hci_driver_open+0xe8>)
   230d4:	ca07      	ldmia	r2, {r0, r1, r2}
   230d6:	f107 0318 	add.w	r3, r7, #24
   230da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   230de:	4618      	mov	r0, r3
   230e0:	f7de fd32 	bl	1b48 <sdc_rand_source_register>
	if (err) {
   230e4:	b188      	cbz	r0, 2310a <hci_driver_open+0xa2>
		LOG_ERR("Failed to register rand source (%d)", err);
   230e6:	b088      	sub	sp, #32
   230e8:	466a      	mov	r2, sp
   230ea:	4b1a      	ldr	r3, [pc, #104]	; (23154 <hci_driver_open+0xec>)
   230ec:	e9c2 3005 	strd	r3, r0, [r2, #20]
   230f0:	2303      	movs	r3, #3
   230f2:	f842 3f10 	str.w	r3, [r2, #16]!
   230f6:	4813      	ldr	r0, [pc, #76]	; (23144 <hci_driver_open+0xdc>)
   230f8:	2300      	movs	r3, #0
   230fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   230fe:	f7f1 fd61 	bl	14bc4 <z_impl_z_log_msg_static_create>
   23102:	46a5      	mov	sp, r4
		return -EINVAL;
   23104:	f06f 0415 	mvn.w	r4, #21
   23108:	e7df      	b.n	230ca <hci_driver_open+0x62>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2310a:	f04f 30ff 	mov.w	r0, #4294967295
   2310e:	f04f 31ff 	mov.w	r1, #4294967295
   23112:	f7ff feb9 	bl	22e88 <multithreading_lock_acquire>
	if (err) {
   23116:	4604      	mov	r4, r0
   23118:	2800      	cmp	r0, #0
   2311a:	d1d6      	bne.n	230ca <hci_driver_open+0x62>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   2311c:	490e      	ldr	r1, [pc, #56]	; (23158 <hci_driver_open+0xf0>)
   2311e:	480f      	ldr	r0, [pc, #60]	; (2315c <hci_driver_open+0xf4>)
   23120:	f7de fbd6 	bl	18d0 <sdc_enable>
	if (err) {
   23124:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   23126:	f7ff feb7 	bl	22e98 <multithreading_lock_release>
	return 0;
   2312a:	e7ce      	b.n	230ca <hci_driver_open+0x62>
   2312c:	0002ef5d 	.word	0x0002ef5d
   23130:	20004790 	.word	0x20004790
   23134:	00032283 	.word	0x00032283
   23138:	00033c37 	.word	0x00033c37
   2313c:	01000003 	.word	0x01000003
   23140:	01401cc0 	.word	0x01401cc0
   23144:	000302ec 	.word	0x000302ec
   23148:	0002ff90 	.word	0x0002ff90
   2314c:	00033c5e 	.word	0x00033c5e
   23150:	000304dc 	.word	0x000304dc
   23154:	00033c7e 	.word	0x00033c7e
   23158:	200027d0 	.word	0x200027d0
   2315c:	00022f41 	.word	0x00022f41

00023160 <hci_driver_receive_process>:
{
   23160:	b5f0      	push	{r4, r5, r6, r7, lr}
   23162:	b089      	sub	sp, #36	; 0x24
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   23164:	f04f 30ff 	mov.w	r0, #4294967295
{
   23168:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2316a:	f04f 31ff 	mov.w	r1, #4294967295
   2316e:	f7ff fe8b 	bl	22e88 <multithreading_lock_acquire>
	if (!errcode) {
   23172:	bb40      	cbnz	r0, 231c6 <hci_driver_receive_process+0x66>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   23174:	4d33      	ldr	r5, [pc, #204]	; (23244 <hci_driver_receive_process+0xe4>)
   23176:	1df9      	adds	r1, r7, #7
   23178:	4628      	mov	r0, r5
   2317a:	f000 fcc3 	bl	23b04 <hci_internal_msg_get>
   2317e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   23180:	f7ff fe8a 	bl	22e98 <multithreading_lock_release>
	if (errcode) {
   23184:	b9fc      	cbnz	r4, 231c6 <hci_driver_receive_process+0x66>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   23186:	79fe      	ldrb	r6, [r7, #7]
   23188:	2e04      	cmp	r6, #4
   2318a:	d133      	bne.n	231f4 <hci_driver_receive_process+0x94>
	switch (hdr->evt) {
   2318c:	7828      	ldrb	r0, [r5, #0]
   2318e:	283e      	cmp	r0, #62	; 0x3e
   23190:	d01c      	beq.n	231cc <hci_driver_receive_process+0x6c>
   23192:	28ff      	cmp	r0, #255	; 0xff
   23194:	d021      	beq.n	231da <hci_driver_receive_process+0x7a>
		switch (subevent) {
   23196:	f04f 32ff 	mov.w	r2, #4294967295
   2319a:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   2319e:	4621      	mov	r1, r4
   231a0:	f7f4 fed8 	bl	17f54 <bt_buf_get_evt>
	if (!evt_buf) {
   231a4:	4606      	mov	r6, r0
   231a6:	b9d8      	cbnz	r0, 231e0 <hci_driver_receive_process+0x80>
		if (discardable) {
   231a8:	b95c      	cbnz	r4, 231c2 <hci_driver_receive_process+0x62>
		LOG_ERR("No event buffer available");
   231aa:	4b27      	ldr	r3, [pc, #156]	; (23248 <hci_driver_receive_process+0xe8>)
   231ac:	61fb      	str	r3, [r7, #28]
   231ae:	2302      	movs	r3, #2
   231b0:	61bb      	str	r3, [r7, #24]
   231b2:	4826      	ldr	r0, [pc, #152]	; (2324c <hci_driver_receive_process+0xec>)
   231b4:	4623      	mov	r3, r4
   231b6:	f107 0218 	add.w	r2, r7, #24
   231ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   231be:	f7f1 fd01 	bl	14bc4 <z_impl_z_log_msg_static_create>
		receive_signal_raise();
   231c2:	f7ff febd 	bl	22f40 <receive_signal_raise>
}
   231c6:	3724      	adds	r7, #36	; 0x24
   231c8:	46bd      	mov	sp, r7
   231ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (me->subevent) {
   231cc:	78ab      	ldrb	r3, [r5, #2]
   231ce:	2b02      	cmp	r3, #2
		switch (subevent) {
   231d0:	d1e1      	bne.n	23196 <hci_driver_receive_process+0x36>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   231d2:	2200      	movs	r2, #0
   231d4:	2300      	movs	r3, #0
			return true;
   231d6:	2401      	movs	r4, #1
   231d8:	e7e1      	b.n	2319e <hci_driver_receive_process+0x3e>
		switch (subevent) {
   231da:	78ab      	ldrb	r3, [r5, #2]
   231dc:	2b80      	cmp	r3, #128	; 0x80
   231de:	e7f7      	b.n	231d0 <hci_driver_receive_process+0x70>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   231e0:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   231e2:	4918      	ldr	r1, [pc, #96]	; (23244 <hci_driver_receive_process+0xe4>)
   231e4:	3202      	adds	r2, #2
   231e6:	300c      	adds	r0, #12
   231e8:	f00b fa91 	bl	2e70e <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   231ec:	4630      	mov	r0, r6
	bt_recv(data_buf);
   231ee:	f7f6 f977 	bl	194e0 <bt_recv>
   231f2:	e7e6      	b.n	231c2 <hci_driver_receive_process+0x62>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   231f4:	2e02      	cmp	r6, #2
   231f6:	d114      	bne.n	23222 <hci_driver_receive_process+0xc2>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   231f8:	f04f 32ff 	mov.w	r2, #4294967295
   231fc:	f04f 33ff 	mov.w	r3, #4294967295
   23200:	2003      	movs	r0, #3
   23202:	f7f4 fe77 	bl	17ef4 <bt_buf_get_rx>
	if (!data_buf) {
   23206:	4604      	mov	r4, r0
   23208:	b918      	cbnz	r0, 23212 <hci_driver_receive_process+0xb2>
		LOG_ERR("No data buffer available");
   2320a:	4b11      	ldr	r3, [pc, #68]	; (23250 <hci_driver_receive_process+0xf0>)
   2320c:	e9c7 6306 	strd	r6, r3, [r7, #24]
   23210:	e7cf      	b.n	231b2 <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   23212:	886a      	ldrh	r2, [r5, #2]
   23214:	4629      	mov	r1, r5
   23216:	3204      	adds	r2, #4
   23218:	300c      	adds	r0, #12
   2321a:	f00b fa78 	bl	2e70e <net_buf_simple_add_mem>
	bt_recv(data_buf);
   2321e:	4620      	mov	r0, r4
   23220:	e7e5      	b.n	231ee <hci_driver_receive_process+0x8e>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   23222:	466d      	mov	r5, sp
   23224:	b088      	sub	sp, #32
   23226:	466a      	mov	r2, sp
   23228:	4b0a      	ldr	r3, [pc, #40]	; (23254 <hci_driver_receive_process+0xf4>)
   2322a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   2322e:	2303      	movs	r3, #3
   23230:	f842 3f10 	str.w	r3, [r2, #16]!
   23234:	4805      	ldr	r0, [pc, #20]	; (2324c <hci_driver_receive_process+0xec>)
   23236:	4623      	mov	r3, r4
   23238:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2323c:	f7f1 fcc2 	bl	14bc4 <z_impl_z_log_msg_static_create>
   23240:	46ad      	mov	sp, r5
   23242:	e7be      	b.n	231c2 <hci_driver_receive_process+0x62>
   23244:	20005702 	.word	0x20005702
   23248:	00033ca2 	.word	0x00033ca2
   2324c:	000302ec 	.word	0x000302ec
   23250:	00033cbc 	.word	0x00033cbc
   23254:	00033cd5 	.word	0x00033cd5

00023258 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   23258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   2325a:	4cca      	ldr	r4, [pc, #808]	; (23584 <hci_internal_cmd_put+0x32c>)
   2325c:	8806      	ldrh	r6, [r0, #0]
   2325e:	7823      	ldrb	r3, [r4, #0]
{
   23260:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   23262:	2b00      	cmp	r3, #0
   23264:	f040 8446 	bne.w	23af4 <hci_internal_cmd_put+0x89c>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   23268:	2304      	movs	r3, #4
   2326a:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   2326e:	4bc6      	ldr	r3, [pc, #792]	; (23588 <hci_internal_cmd_put+0x330>)
   23270:	681f      	ldr	r7, [r3, #0]
   23272:	b1bf      	cbz	r7, 232a4 <hci_internal_cmd_put+0x4c>
		status = user_cmd_handler(cmd_in,
   23274:	f10d 0306 	add.w	r3, sp, #6
   23278:	f10d 0207 	add.w	r2, sp, #7
   2327c:	1c61      	adds	r1, r4, #1
   2327e:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   23280:	2801      	cmp	r0, #1
   23282:	d00f      	beq.n	232a4 <hci_internal_cmd_put+0x4c>
	if (generate_command_status_event ||
   23284:	f89d 3006 	ldrb.w	r3, [sp, #6]
   23288:	2b00      	cmp	r3, #0
   2328a:	f040 8411 	bne.w	23ab0 <hci_internal_cmd_put+0x858>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   2328e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   23292:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   23294:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   23296:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   23298:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   2329a:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   2329c:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2329e:	71a0      	strb	r0, [r4, #6]
}
   232a0:	f000 bc0f 	b.w	23ac2 <hci_internal_cmd_put+0x86a>
		switch (BT_OGF(opcode)) {
   232a4:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   232a8:	ea4f 2396 	mov.w	r3, r6, lsr #10
   232ac:	d20f      	bcs.n	232ce <hci_internal_cmd_put+0x76>
   232ae:	2b00      	cmp	r3, #0
   232b0:	d079      	beq.n	233a6 <hci_internal_cmd_put+0x14e>
   232b2:	3b01      	subs	r3, #1
   232b4:	2b07      	cmp	r3, #7
   232b6:	f200 83f1 	bhi.w	23a9c <hci_internal_cmd_put+0x844>
   232ba:	e8df f013 	tbh	[pc, r3, lsl #1]
   232be:	000d      	.short	0x000d
   232c0:	003f03ef 	.word	0x003f03ef
   232c4:	03ef008e 	.word	0x03ef008e
   232c8:	03ef03ef 	.word	0x03ef03ef
   232cc:	0169      	.short	0x0169
   232ce:	2b3f      	cmp	r3, #63	; 0x3f
   232d0:	f000 8315 	beq.w	238fe <hci_internal_cmd_put+0x6a6>
	switch (opcode)	{
   232d4:	2001      	movs	r0, #1
   232d6:	e36d      	b.n	239b4 <hci_internal_cmd_put+0x75c>
	return ((uint16_t)src[1] << 8) | src[0];
   232d8:	4628      	mov	r0, r5
	switch (opcode)	{
   232da:	f240 4206 	movw	r2, #1030	; 0x406
   232de:	f930 3b03 	ldrsh.w	r3, [r0], #3
   232e2:	4293      	cmp	r3, r2
   232e4:	d010      	beq.n	23308 <hci_internal_cmd_put+0xb0>
   232e6:	f240 421d 	movw	r2, #1053	; 0x41d
   232ea:	4293      	cmp	r3, r2
   232ec:	d023      	beq.n	23336 <hci_internal_cmd_put+0xde>
   232ee:	2001      	movs	r0, #1
	switch (hci_opcode) {
   232f0:	f240 4306 	movw	r3, #1030	; 0x406
   232f4:	429e      	cmp	r6, r3
   232f6:	f040 83cb 	bne.w	23a90 <hci_internal_cmd_put+0x838>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   232fa:	230f      	movs	r3, #15
   232fc:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   232fe:	2304      	movs	r3, #4
   23300:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   23302:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   23304:	2301      	movs	r3, #1
   23306:	e033      	b.n	23370 <hci_internal_cmd_put+0x118>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   23308:	f7ea ffaf 	bl	e26a <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   2330c:	f242 0332 	movw	r3, #8242	; 0x2032
   23310:	429e      	cmp	r6, r3
   23312:	f240 83b5 	bls.w	23a80 <hci_internal_cmd_put+0x828>
   23316:	f242 0385 	movw	r3, #8325	; 0x2085
   2331a:	429e      	cmp	r6, r3
   2331c:	d840      	bhi.n	233a0 <hci_internal_cmd_put+0x148>
   2331e:	f242 036c 	movw	r3, #8300	; 0x206c
   23322:	429e      	cmp	r6, r3
   23324:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   23328:	f200 83ba 	bhi.w	23aa0 <hci_internal_cmd_put+0x848>
   2332c:	3b03      	subs	r3, #3
   2332e:	b29b      	uxth	r3, r3
   23330:	2b01      	cmp	r3, #1
   23332:	d835      	bhi.n	233a0 <hci_internal_cmd_put+0x148>
   23334:	e7e1      	b.n	232fa <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   23336:	f7ea ff9a 	bl	e26e <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   2333a:	e7e7      	b.n	2330c <hci_internal_cmd_put+0xb4>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2333c:	4628      	mov	r0, r5
	switch (opcode)	{
   2333e:	f640 4263 	movw	r2, #3171	; 0xc63
   23342:	f930 3b03 	ldrsh.w	r3, [r0], #3
   23346:	4293      	cmp	r3, r2
   23348:	d03b      	beq.n	233c2 <hci_internal_cmd_put+0x16a>
   2334a:	dc16      	bgt.n	2337a <hci_internal_cmd_put+0x122>
   2334c:	f640 4203 	movw	r2, #3075	; 0xc03
   23350:	4293      	cmp	r3, r2
   23352:	d02a      	beq.n	233aa <hci_internal_cmd_put+0x152>
   23354:	f640 422d 	movw	r2, #3117	; 0xc2d
   23358:	4293      	cmp	r3, r2
   2335a:	d029      	beq.n	233b0 <hci_internal_cmd_put+0x158>
   2335c:	f640 4201 	movw	r2, #3073	; 0xc01
   23360:	4293      	cmp	r3, r2
   23362:	d01b      	beq.n	2339c <hci_internal_cmd_put+0x144>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23364:	230f      	movs	r3, #15
   23366:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   23368:	2304      	movs	r3, #4
   2336a:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   2336c:	2301      	movs	r3, #1
   2336e:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   23370:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   23372:	f8a4 6005 	strh.w	r6, [r4, #5]
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
   23376:	7023      	strb	r3, [r4, #0]
   23378:	e0db      	b.n	23532 <hci_internal_cmd_put+0x2da>
	switch (opcode)	{
   2337a:	f640 427b 	movw	r2, #3195	; 0xc7b
   2337e:	4293      	cmp	r3, r2
   23380:	d022      	beq.n	233c8 <hci_internal_cmd_put+0x170>
   23382:	f640 427c 	movw	r2, #3196	; 0xc7c
   23386:	4293      	cmp	r3, r2
   23388:	d1ec      	bne.n	23364 <hci_internal_cmd_put+0x10c>
		*param_length_out +=
   2338a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2338e:	497f      	ldr	r1, [pc, #508]	; (2358c <hci_internal_cmd_put+0x334>)
		*param_length_out +=
   23390:	3302      	adds	r3, #2
   23392:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   23396:	f7ea fee8 	bl	e16a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   2339a:	e001      	b.n	233a0 <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2339c:	f7ea fedb 	bl	e156 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   233a0:	2801      	cmp	r0, #1
   233a2:	f47f af74 	bne.w	2328e <hci_internal_cmd_put+0x36>
	switch (hci_opcode) {
   233a6:	2001      	movs	r0, #1
   233a8:	e382      	b.n	23ab0 <hci_internal_cmd_put+0x858>
		return sdc_hci_cmd_cb_reset();
   233aa:	f7de fccd 	bl	1d48 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   233ae:	e7f7      	b.n	233a0 <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   233b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   233b4:	4975      	ldr	r1, [pc, #468]	; (2358c <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   233b6:	3303      	adds	r3, #3
   233b8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   233bc:	f7ea fec9 	bl	e152 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   233c0:	e7ee      	b.n	233a0 <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   233c2:	f7ea fecd 	bl	e160 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   233c6:	e7eb      	b.n	233a0 <hci_internal_cmd_put+0x148>
		*param_length_out +=
   233c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   233cc:	496f      	ldr	r1, [pc, #444]	; (2358c <hci_internal_cmd_put+0x334>)
		*param_length_out +=
   233ce:	3304      	adds	r3, #4
   233d0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   233d4:	f7ea febb 	bl	e14e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   233d8:	e7e2      	b.n	233a0 <hci_internal_cmd_put+0x148>
	switch (opcode)	{
   233da:	882b      	ldrh	r3, [r5, #0]
   233dc:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   233e0:	3b01      	subs	r3, #1
   233e2:	2b08      	cmp	r3, #8
   233e4:	d8be      	bhi.n	23364 <hci_internal_cmd_put+0x10c>
   233e6:	a201      	add	r2, pc, #4	; (adr r2, 233ec <hci_internal_cmd_put+0x194>)
   233e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   233ec:	00023411 	.word	0x00023411
   233f0:	00023423 	.word	0x00023423
   233f4:	00023539 	.word	0x00023539
   233f8:	00023365 	.word	0x00023365
   233fc:	00023365 	.word	0x00023365
   23400:	00023365 	.word	0x00023365
   23404:	00023365 	.word	0x00023365
   23408:	00023365 	.word	0x00023365
   2340c:	00023571 	.word	0x00023571
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   23410:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   23414:	485d      	ldr	r0, [pc, #372]	; (2358c <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   23416:	3308      	adds	r3, #8
   23418:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2341c:	f7ea fed8 	bl	e1d0 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   23420:	e7be      	b.n	233a0 <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   23422:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   23426:	4d59      	ldr	r5, [pc, #356]	; (2358c <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   23428:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   2342a:	2230      	movs	r2, #48	; 0x30
   2342c:	2100      	movs	r1, #0
   2342e:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   23430:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   23434:	f008 ff5e 	bl	2c2f4 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   23438:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   2343c:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2343e:	2300      	movs	r3, #0
   23440:	71a3      	strb	r3, [r4, #6]
	cmds->hci_disconnect = 1;
   23442:	79e3      	ldrb	r3, [r4, #7]
	evt_data->opcode = hci_opcode;
   23444:	80a6      	strh	r6, [r4, #4]
	cmds->hci_disconnect = 1;
   23446:	f043 0320 	orr.w	r3, r3, #32
   2344a:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   2344c:	7a63      	ldrb	r3, [r4, #9]
   2344e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23452:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   23454:	7b23      	ldrb	r3, [r4, #12]
   23456:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2345a:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   2345c:	7c63      	ldrb	r3, [r4, #17]
   2345e:	f043 0304 	orr.w	r3, r3, #4
   23462:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   23464:	7d63      	ldrb	r3, [r4, #21]
   23466:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   2346a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   2346e:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   23470:	7da3      	ldrb	r3, [r4, #22]
   23472:	f043 0302 	orr.w	r3, r3, #2
   23476:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   23478:	7f63      	ldrb	r3, [r4, #29]
   2347a:	f043 0304 	orr.w	r3, r3, #4
   2347e:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   23480:	f894 3020 	ldrb.w	r3, [r4, #32]
   23484:	f063 0308 	orn	r3, r3, #8
   23488:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   2348c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   23490:	f063 033c 	orn	r3, r3, #60	; 0x3c
   23494:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   23498:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2349c:	f063 030c 	orn	r3, r3, #12
   234a0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   234a4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   234a8:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   234ac:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   234b0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   234b4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   234b8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   234bc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   234c0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   234c4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   234c8:	220e      	movs	r2, #14
   234ca:	7062      	strb	r2, [r4, #1]
	cmds->hci_le_set_data_length = 1;
   234cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
	evt_data->ncmd = 1;
   234d0:	2201      	movs	r2, #1
   234d2:	70e2      	strb	r2, [r4, #3]
	cmds->hci_le_set_data_length = 1;
   234d4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   234d8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   234dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   234e0:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   234e4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   234e8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   234ec:	f063 0301 	orn	r3, r3, #1
   234f0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   234f4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   234f8:	4313      	orrs	r3, r2
   234fa:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   234fe:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   23502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23506:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   2350a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2350e:	f043 0304 	orr.w	r3, r3, #4
   23512:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   23516:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2351a:	f043 0304 	orr.w	r3, r3, #4
   2351e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   23522:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   23526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2352a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	cmd_complete_or_status.occurred = true;
   2352e:	f805 2c07 	strb.w	r2, [r5, #-7]
	}

	return 0;
   23532:	2000      	movs	r0, #0
}
   23534:	b003      	add	sp, #12
   23536:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   23538:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   2353c:	4d13      	ldr	r5, [pc, #76]	; (2358c <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2353e:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   23540:	2208      	movs	r2, #8
   23542:	2100      	movs	r1, #0
   23544:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   23546:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   2354a:	f008 fed3 	bl	2c2f4 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   2354e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   23552:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   23554:	2300      	movs	r3, #0
   23556:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
   23558:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
   2355a:	80a6      	strh	r6, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2355c:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
   2355e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   23562:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
   23564:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
   23568:	2201      	movs	r2, #1
   2356a:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
   2356c:	72e3      	strb	r3, [r4, #11]
   2356e:	e7de      	b.n	2352e <hci_internal_cmd_put+0x2d6>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   23570:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   23574:	4805      	ldr	r0, [pc, #20]	; (2358c <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   23576:	3306      	adds	r3, #6
   23578:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2357c:	f7ea fe26 	bl	e1cc <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   23580:	e70e      	b.n	233a0 <hci_internal_cmd_put+0x148>
   23582:	bf00      	nop
   23584:	2000574b 	.word	0x2000574b
   23588:	200047a0 	.word	0x200047a0
   2358c:	20005752 	.word	0x20005752
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   23590:	4628      	mov	r0, r5
	switch (opcode)	{
   23592:	f242 015e 	movw	r1, #8286	; 0x205e
   23596:	f830 3b03 	ldrh.w	r3, [r0], #3
   2359a:	b21a      	sxth	r2, r3
   2359c:	428a      	cmp	r2, r1
   2359e:	f242 0132 	movw	r1, #8242	; 0x2032
   235a2:	f300 8086 	bgt.w	236b2 <hci_internal_cmd_put+0x45a>
   235a6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   235aa:	dc01      	bgt.n	235b0 <hci_internal_cmd_put+0x358>
	switch (hci_opcode) {
   235ac:	428e      	cmp	r6, r1
   235ae:	e067      	b.n	23680 <hci_internal_cmd_put+0x428>
	switch (opcode)	{
   235b0:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   235b4:	3b01      	subs	r3, #1
   235b6:	2b5d      	cmp	r3, #93	; 0x5d
   235b8:	d85f      	bhi.n	2367a <hci_internal_cmd_put+0x422>
   235ba:	e8df f013 	tbh	[pc, r3, lsl #1]
   235be:	008e      	.short	0x008e
   235c0:	00a4009b 	.word	0x00a4009b
   235c4:	00d7005e 	.word	0x00d7005e
   235c8:	00dd00da 	.word	0x00dd00da
   235cc:	00e900e6 	.word	0x00e900e6
   235d0:	005e00ec 	.word	0x005e00ec
   235d4:	005e005e 	.word	0x005e005e
   235d8:	00ef005e 	.word	0x00ef005e
   235dc:	00fb00f8 	.word	0x00fb00f8
   235e0:	005e00fe 	.word	0x005e00fe
   235e4:	0101005e 	.word	0x0101005e
   235e8:	010d010a 	.word	0x010d010a
   235ec:	005e0116 	.word	0x005e0116
   235f0:	0128011f 	.word	0x0128011f
   235f4:	005e0131 	.word	0x005e0131
   235f8:	005e005e 	.word	0x005e005e
   235fc:	005e005e 	.word	0x005e005e
   23600:	014f0146 	.word	0x014f0146
   23604:	015b0158 	.word	0x015b0158
   23608:	0164015e 	.word	0x0164015e
   2360c:	016a0167 	.word	0x016a0167
   23610:	005e016d 	.word	0x005e016d
   23614:	0176005e 	.word	0x0176005e
   23618:	017c0179 	.word	0x017c0179
   2361c:	018e0185 	.word	0x018e0185
   23620:	005e0191 	.word	0x005e0191
   23624:	005e005e 	.word	0x005e005e
   23628:	005e005e 	.word	0x005e005e
   2362c:	005e005e 	.word	0x005e005e
   23630:	005e005e 	.word	0x005e005e
   23634:	005e005e 	.word	0x005e005e
   23638:	005e005e 	.word	0x005e005e
   2363c:	005e005e 	.word	0x005e005e
   23640:	005e005e 	.word	0x005e005e
   23644:	005e005e 	.word	0x005e005e
   23648:	005e005e 	.word	0x005e005e
   2364c:	005e005e 	.word	0x005e005e
   23650:	0194005e 	.word	0x0194005e
   23654:	005e005e 	.word	0x005e005e
   23658:	005e019d 	.word	0x005e019d
   2365c:	005e005e 	.word	0x005e005e
   23660:	005e005e 	.word	0x005e005e
   23664:	005e005e 	.word	0x005e005e
   23668:	005e005e 	.word	0x005e005e
   2366c:	005e005e 	.word	0x005e005e
   23670:	005e005e 	.word	0x005e005e
   23674:	005e005e 	.word	0x005e005e
   23678:	0161      	.short	0x0161
	switch (hci_opcode) {
   2367a:	f242 0332 	movw	r3, #8242	; 0x2032
   2367e:	429e      	cmp	r6, r3
   23680:	d01f      	beq.n	236c2 <hci_internal_cmd_put+0x46a>
   23682:	f200 8231 	bhi.w	23ae8 <hci_internal_cmd_put+0x890>
   23686:	f242 0326 	movw	r3, #8230	; 0x2026
   2368a:	429e      	cmp	r6, r3
   2368c:	f63f ae8b 	bhi.w	233a6 <hci_internal_cmd_put+0x14e>
   23690:	2001      	movs	r0, #1
   23692:	f242 030c 	movw	r3, #8204	; 0x200c
   23696:	429e      	cmp	r6, r3
   23698:	f67f ae2a 	bls.w	232f0 <hci_internal_cmd_put+0x98>
   2369c:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   236a0:	4ac7      	ldr	r2, [pc, #796]	; (239c0 <hci_internal_cmd_put+0x768>)
   236a2:	3b0d      	subs	r3, #13
   236a4:	b29b      	uxth	r3, r3
   236a6:	fa22 f303 	lsr.w	r3, r2, r3
   236aa:	07db      	lsls	r3, r3, #31
   236ac:	f57f ae78 	bpl.w	233a0 <hci_internal_cmd_put+0x148>
   236b0:	e623      	b.n	232fa <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   236b2:	f242 037c 	movw	r3, #8316	; 0x207c
   236b6:	429a      	cmp	r2, r3
   236b8:	f47f af78 	bne.w	235ac <hci_internal_cmd_put+0x354>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   236bc:	f7ea fdc0 	bl	e240 <sdc_hci_cmd_le_set_data_related_address_changes>
   236c0:	e00d      	b.n	236de <hci_internal_cmd_put+0x486>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   236c2:	230f      	movs	r3, #15
   236c4:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   236c6:	2304      	movs	r3, #4
   236c8:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   236ca:	2301      	movs	r3, #1
   236cc:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   236ce:	2232      	movs	r2, #50	; 0x32
   236d0:	7162      	strb	r2, [r4, #5]
   236d2:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   236d4:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   236d6:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   236d8:	e64d      	b.n	23376 <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   236da:	f7ea fdb5 	bl	e248 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   236de:	f242 0332 	movw	r3, #8242	; 0x2032
   236e2:	429e      	cmp	r6, r3
   236e4:	f47f ae12 	bne.w	2330c <hci_internal_cmd_put+0xb4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   236e8:	230f      	movs	r3, #15
   236ea:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   236ec:	2304      	movs	r3, #4
   236ee:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   236f0:	70e0      	strb	r0, [r4, #3]
   236f2:	e0a8      	b.n	23846 <hci_internal_cmd_put+0x5ee>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   236f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   236f8:	48b2      	ldr	r0, [pc, #712]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   236fa:	3303      	adds	r3, #3
   236fc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   23700:	f7ea fd7e 	bl	e200 <sdc_hci_cmd_le_read_buffer_size>
   23704:	e7eb      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   23706:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   2370a:	4dae      	ldr	r5, [pc, #696]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2370c:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   2370e:	2208      	movs	r2, #8
   23710:	2100      	movs	r1, #0
   23712:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   23714:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   23718:	f008 fdec 	bl	2c2f4 <memset>
	features->params.le_encryption = 1;
   2371c:	79e3      	ldrb	r3, [r4, #7]
   2371e:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
   23722:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   23726:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   23728:	7a23      	ldrb	r3, [r4, #8]
   2372a:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   2372e:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   23732:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   23734:	f242 0332 	movw	r3, #8242	; 0x2032
   23738:	429e      	cmp	r6, r3
   2373a:	d008      	beq.n	2374e <hci_internal_cmd_put+0x4f6>
   2373c:	f200 81ce 	bhi.w	23adc <hci_internal_cmd_put+0x884>
   23740:	f242 0326 	movw	r3, #8230	; 0x2026
   23744:	429e      	cmp	r6, r3
   23746:	f240 81a1 	bls.w	23a8c <hci_internal_cmd_put+0x834>
		return 0;
   2374a:	2000      	movs	r0, #0
   2374c:	e59f      	b.n	2328e <hci_internal_cmd_put+0x36>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2374e:	230f      	movs	r3, #15
   23750:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   23752:	2304      	movs	r3, #4
	evt_data->opcode = hci_opcode;
   23754:	2232      	movs	r2, #50	; 0x32
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   23756:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   23758:	2300      	movs	r3, #0
   2375a:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   2375c:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
   2375e:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
   23760:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   23762:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   23764:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   23766:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   2376a:	e6e2      	b.n	23532 <hci_internal_cmd_put+0x2da>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2376c:	f7ea fd75 	bl	e25a <sdc_hci_cmd_le_set_random_address>
   23770:	e7b5      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   23772:	f7ea fd61 	bl	e238 <sdc_hci_cmd_le_set_adv_params>
   23776:	e7b2      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out +=
   23778:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   2377c:	4891      	ldr	r0, [pc, #580]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   2377e:	3301      	adds	r3, #1
   23780:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   23784:	f7ea fd3a 	bl	e1fc <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   23788:	e7a9      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   2378a:	f7ea fd51 	bl	e230 <sdc_hci_cmd_le_set_adv_data>
   2378e:	e7a6      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   23790:	f7ea fd67 	bl	e262 <sdc_hci_cmd_le_set_scan_response_data>
   23794:	e7a3      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   23796:	f7ea fd4d 	bl	e234 <sdc_hci_cmd_le_set_adv_enable>
   2379a:	e7a0      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   2379c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   237a0:	4888      	ldr	r0, [pc, #544]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   237a2:	3301      	adds	r3, #1
   237a4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   237a8:	f7ea fd2e 	bl	e208 <sdc_hci_cmd_le_read_filter_accept_list_size>
   237ac:	e797      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   237ae:	f7ea fd15 	bl	e1dc <sdc_hci_cmd_le_clear_filter_accept_list>
   237b2:	e794      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   237b4:	f7ea fd0e 	bl	e1d4 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   237b8:	e791      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   237ba:	f7ea fd33 	bl	e224 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   237be:	e78e      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   237c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   237c4:	497f      	ldr	r1, [pc, #508]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   237c6:	3307      	adds	r3, #7
   237c8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   237cc:	f7ea fd1a 	bl	e204 <sdc_hci_cmd_le_read_channel_map>
   237d0:	e785      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   237d2:	f7ea fd1f 	bl	e214 <sdc_hci_cmd_le_read_remote_features>
   237d6:	e782      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   237d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   237dc:	4979      	ldr	r1, [pc, #484]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   237de:	3310      	adds	r3, #16
   237e0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   237e4:	f7ea fcfe 	bl	e1e4 <sdc_hci_cmd_le_encrypt>
   237e8:	e779      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   237ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   237ee:	4875      	ldr	r0, [pc, #468]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   237f0:	3308      	adds	r3, #8
   237f2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   237f6:	f7ea fcff 	bl	e1f8 <sdc_hci_cmd_le_rand>
   237fa:	e770      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   237fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   23800:	4970      	ldr	r1, [pc, #448]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   23802:	3302      	adds	r3, #2
   23804:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   23808:	f7ea fcf2 	bl	e1f0 <sdc_hci_cmd_le_long_term_key_request_reply>
   2380c:	e767      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out +=
   2380e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   23812:	496c      	ldr	r1, [pc, #432]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   23814:	3302      	adds	r3, #2
   23816:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   2381a:	f7ea fce5 	bl	e1e8 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   2381e:	e75e      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   23820:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23824:	3308      	adds	r3, #8
   23826:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   2382a:	238f      	movs	r3, #143	; 0x8f
   2382c:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   2382e:	23c0      	movs	r3, #192	; 0xc0
   23830:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
   23832:	f242 0332 	movw	r3, #8242	; 0x2032
   23836:	429e      	cmp	r6, r3
   23838:	d180      	bne.n	2373c <hci_internal_cmd_put+0x4e4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2383a:	230f      	movs	r3, #15
   2383c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2383e:	2304      	movs	r3, #4
   23840:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   23842:	2300      	movs	r3, #0
   23844:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   23846:	2301      	movs	r3, #1
   23848:	e741      	b.n	236ce <hci_internal_cmd_put+0x476>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2384a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2384e:	495d      	ldr	r1, [pc, #372]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   23850:	3302      	adds	r3, #2
   23852:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   23856:	f7ea fcf1 	bl	e23c <sdc_hci_cmd_le_set_data_length>
   2385a:	e740      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out +=
   2385c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   23860:	4858      	ldr	r0, [pc, #352]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   23862:	3304      	adds	r3, #4
   23864:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   23868:	f7ea fcd8 	bl	e21c <sdc_hci_cmd_le_read_suggested_default_data_length>
   2386c:	e737      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   2386e:	f7ea fcfa 	bl	e266 <sdc_hci_cmd_le_write_suggested_default_data_length>
   23872:	e734      	b.n	236de <hci_internal_cmd_put+0x486>
		return hci_cmd_le_read_local_p256_public_key();
   23874:	f000 faa8 	bl	23dc8 <hci_cmd_le_read_local_p256_public_key>
   23878:	e731      	b.n	236de <hci_internal_cmd_put+0x486>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   2387a:	f00b fbb0 	bl	2efde <hci_cmd_le_generate_dhkey>
   2387e:	e72e      	b.n	236de <hci_internal_cmd_put+0x486>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   23880:	f00b fbb0 	bl	2efe4 <hci_cmd_le_generate_dhkey_v2>
   23884:	e72b      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   23886:	f7ea fca7 	bl	e1d8 <sdc_hci_cmd_le_add_device_to_resolving_list>
   2388a:	e728      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   2388c:	f7ea fccc 	bl	e228 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   23890:	e725      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_clear_resolving_list();
   23892:	f7ea fca5 	bl	e1e0 <sdc_hci_cmd_le_clear_resolving_list>
   23896:	e722      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   23898:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   2389c:	4849      	ldr	r0, [pc, #292]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   2389e:	3301      	adds	r3, #1
   238a0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   238a4:	f7ea fcb8 	bl	e218 <sdc_hci_cmd_le_read_resolving_list_size>
   238a8:	e719      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   238aa:	f7ea fcbf 	bl	e22c <sdc_hci_cmd_le_set_address_resolution_enable>
   238ae:	e716      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   238b0:	f7ea fcd5 	bl	e25e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   238b4:	e713      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   238b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   238ba:	4842      	ldr	r0, [pc, #264]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   238bc:	3308      	adds	r3, #8
   238be:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   238c2:	f7ea fca3 	bl	e20c <sdc_hci_cmd_le_read_max_data_length>
   238c6:	e70a      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   238c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   238cc:	493d      	ldr	r1, [pc, #244]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   238ce:	3304      	adds	r3, #4
   238d0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   238d4:	f7ea fc9c 	bl	e210 <sdc_hci_cmd_le_read_phy>
   238d8:	e701      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   238da:	f7ea fcb3 	bl	e244 <sdc_hci_cmd_le_set_default_phy>
   238de:	e6fe      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   238e0:	f7ea fcb7 	bl	e252 <sdc_hci_cmd_le_set_phy>
   238e4:	e6fb      	b.n	236de <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   238e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   238ea:	4836      	ldr	r0, [pc, #216]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   238ec:	3302      	adds	r3, #2
   238ee:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   238f2:	f7ea fc95 	bl	e220 <sdc_hci_cmd_le_read_transmit_power>
   238f6:	e6f2      	b.n	236de <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   238f8:	f7ea fcad 	bl	e256 <sdc_hci_cmd_le_set_privacy_mode>
   238fc:	e6ef      	b.n	236de <hci_internal_cmd_put+0x486>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   238fe:	4628      	mov	r0, r5
	switch (opcode)	{
   23900:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   23904:	f830 3b03 	ldrh.w	r3, [r0], #3
   23908:	4293      	cmp	r3, r2
   2390a:	d823      	bhi.n	23954 <hci_internal_cmd_put+0x6fc>
   2390c:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   23910:	f67f ace0 	bls.w	232d4 <hci_internal_cmd_put+0x7c>
   23914:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   23918:	3b01      	subs	r3, #1
   2391a:	2b0a      	cmp	r3, #10
   2391c:	f63f acda 	bhi.w	232d4 <hci_internal_cmd_put+0x7c>
   23920:	a201      	add	r2, pc, #4	; (adr r2, 23928 <hci_internal_cmd_put+0x6d0>)
   23922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23926:	bf00      	nop
   23928:	000239a5 	.word	0x000239a5
   2392c:	000239c9 	.word	0x000239c9
   23930:	000232d5 	.word	0x000232d5
   23934:	000232d5 	.word	0x000232d5
   23938:	000232d5 	.word	0x000232d5
   2393c:	00023a1d 	.word	0x00023a1d
   23940:	000232d5 	.word	0x000232d5
   23944:	000232d5 	.word	0x000232d5
   23948:	000239f9 	.word	0x000239f9
   2394c:	00023a0b 	.word	0x00023a0b
   23950:	00023a23 	.word	0x00023a23
   23954:	f503 7240 	add.w	r2, r3, #768	; 0x300
   23958:	b292      	uxth	r2, r2
   2395a:	2a0c      	cmp	r2, #12
   2395c:	f63f acba 	bhi.w	232d4 <hci_internal_cmd_put+0x7c>
   23960:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   23964:	2b0c      	cmp	r3, #12
   23966:	f63f acb5 	bhi.w	232d4 <hci_internal_cmd_put+0x7c>
   2396a:	a201      	add	r2, pc, #4	; (adr r2, 23970 <hci_internal_cmd_put+0x718>)
   2396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23970:	00023a35 	.word	0x00023a35
   23974:	00023a57 	.word	0x00023a57
   23978:	00023a5d 	.word	0x00023a5d
   2397c:	00023a63 	.word	0x00023a63
   23980:	00023a69 	.word	0x00023a69
   23984:	00023a6f 	.word	0x00023a6f
   23988:	000232d5 	.word	0x000232d5
   2398c:	000232d5 	.word	0x000232d5
   23990:	000232d5 	.word	0x000232d5
   23994:	00023a75 	.word	0x00023a75
   23998:	000232d5 	.word	0x000232d5
   2399c:	000232d5 	.word	0x000232d5
   239a0:	00023a7b 	.word	0x00023a7b
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   239a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   239a8:	4806      	ldr	r0, [pc, #24]	; (239c4 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   239aa:	330c      	adds	r3, #12
   239ac:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   239b0:	f7de fa72 	bl	1e98 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   239b4:	f026 0308 	bic.w	r3, r6, #8
   239b8:	f64f 5202 	movw	r2, #64770	; 0xfd02
   239bc:	4293      	cmp	r3, r2
   239be:	e06a      	b.n	23a96 <hci_internal_cmd_put+0x83e>
   239c0:	03001241 	.word	0x03001241
   239c4:	20005752 	.word	0x20005752
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   239c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   239cc:	484b      	ldr	r0, [pc, #300]	; (23afc <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   239ce:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   239d0:	2202      	movs	r2, #2
   239d2:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   239d4:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   239d8:	f008 fc8c 	bl	2c2f4 <memset>
	cmds->read_version_info = 1;
   239dc:	79e3      	ldrb	r3, [r4, #7]
   239de:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   239e2:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   239e6:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   239e8:	7a23      	ldrb	r3, [r4, #8]
   239ea:	f023 0307 	bic.w	r3, r3, #7
   239ee:	f043 0307 	orr.w	r3, r3, #7
   239f2:	7223      	strb	r3, [r4, #8]
		return 0;
   239f4:	2000      	movs	r0, #0
   239f6:	e7dd      	b.n	239b4 <hci_internal_cmd_put+0x75c>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   239f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   239fc:	483f      	ldr	r0, [pc, #252]	; (23afc <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   239fe:	3317      	adds	r3, #23
   23a00:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   23a04:	f7de f9fc 	bl	1e00 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   23a08:	e7d4      	b.n	239b4 <hci_internal_cmd_put+0x75c>
		*param_length_out +=
   23a0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   23a0e:	483b      	ldr	r0, [pc, #236]	; (23afc <hci_internal_cmd_put+0x8a4>)
		*param_length_out +=
   23a10:	3320      	adds	r3, #32
   23a12:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   23a16:	f7de f9ab 	bl	1d70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   23a1a:	e7cb      	b.n	239b4 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   23a1c:	f7ea fbd4 	bl	e1c8 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   23a20:	e7c8      	b.n	239b4 <hci_internal_cmd_put+0x75c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   23a22:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   23a26:	4835      	ldr	r0, [pc, #212]	; (23afc <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   23a28:	3301      	adds	r3, #1
   23a2a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   23a2e:	f7ea fbb7 	bl	e1a0 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   23a32:	e7bf      	b.n	239b4 <hci_internal_cmd_put+0x75c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   23a34:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   23a38:	4830      	ldr	r0, [pc, #192]	; (23afc <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   23a3a:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   23a3c:	2202      	movs	r2, #2
   23a3e:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   23a40:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   23a44:	f008 fc56 	bl	2c2f4 <memset>
	cmds->read_supported_vs_commands = 1;
   23a48:	79e3      	ldrb	r3, [r4, #7]
   23a4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   23a4e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   23a52:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   23a54:	e7ce      	b.n	239f4 <hci_internal_cmd_put+0x79c>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   23a56:	f7ea fb96 	bl	e186 <sdc_hci_cmd_vs_llpm_mode_set>
   23a5a:	e7ab      	b.n	239b4 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   23a5c:	f7ea fb8f 	bl	e17e <sdc_hci_cmd_vs_conn_update>
   23a60:	e7a8      	b.n	239b4 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   23a62:	f7ea fb84 	bl	e16e <sdc_hci_cmd_vs_conn_event_extend>
   23a66:	e7a5      	b.n	239b4 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   23a68:	f7ea fb93 	bl	e192 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   23a6c:	e7a2      	b.n	239b4 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   23a6e:	f7ea fb88 	bl	e182 <sdc_hci_cmd_vs_event_length_set>
   23a72:	e79f      	b.n	239b4 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   23a74:	f7ea fb89 	bl	e18a <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   23a78:	e79c      	b.n	239b4 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   23a7a:	f7ea fb8f 	bl	e19c <sdc_hci_cmd_vs_set_adv_randomness>
   23a7e:	e799      	b.n	239b4 <hci_internal_cmd_put+0x75c>
	switch (hci_opcode) {
   23a80:	f242 0326 	movw	r3, #8230	; 0x2026
   23a84:	429e      	cmp	r6, r3
   23a86:	f67f ae04 	bls.w	23692 <hci_internal_cmd_put+0x43a>
   23a8a:	e489      	b.n	233a0 <hci_internal_cmd_put+0x148>
		return 0;
   23a8c:	2000      	movs	r0, #0
   23a8e:	e600      	b.n	23692 <hci_internal_cmd_put+0x43a>
	switch (hci_opcode) {
   23a90:	f240 431d 	movw	r3, #1053	; 0x41d
   23a94:	429e      	cmp	r6, r3
   23a96:	f43f ac30 	beq.w	232fa <hci_internal_cmd_put+0xa2>
   23a9a:	e481      	b.n	233a0 <hci_internal_cmd_put+0x148>
		switch (BT_OGF(opcode)) {
   23a9c:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   23a9e:	e47f      	b.n	233a0 <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   23aa0:	4a17      	ldr	r2, [pc, #92]	; (23b00 <hci_internal_cmd_put+0x8a8>)
   23aa2:	3b2d      	subs	r3, #45	; 0x2d
   23aa4:	b29b      	uxth	r3, r3
   23aa6:	fa22 f303 	lsr.w	r3, r2, r3
   23aaa:	07da      	lsls	r2, r3, #31
   23aac:	f57f ac78 	bpl.w	233a0 <hci_internal_cmd_put+0x148>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23ab0:	230f      	movs	r3, #15
   23ab2:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   23ab4:	2304      	movs	r3, #4
   23ab6:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   23ab8:	2301      	movs	r3, #1
	evt_data->status = status_code;
   23aba:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   23abc:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   23abe:	f8a4 6005 	strh.w	r6, [r4, #5]
	cmd_complete_or_status.occurred = true;
   23ac2:	2301      	movs	r3, #1
   23ac4:	7023      	strb	r3, [r4, #0]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   23ac6:	f242 0383 	movw	r3, #8323	; 0x2083
   23aca:	429e      	cmp	r6, r3
   23acc:	f47f ad31 	bne.w	23532 <hci_internal_cmd_put+0x2da>
		&&
   23ad0:	7863      	ldrb	r3, [r4, #1]
   23ad2:	2b0e      	cmp	r3, #14
   23ad4:	f47f ad2d 	bne.w	23532 <hci_internal_cmd_put+0x2da>
		cmd_complete_or_status.occurred = false;
   23ad8:	2300      	movs	r3, #0
   23ada:	e44c      	b.n	23376 <hci_internal_cmd_put+0x11e>
	switch (hci_opcode) {
   23adc:	f242 0385 	movw	r3, #8325	; 0x2085
   23ae0:	429e      	cmp	r6, r3
   23ae2:	d905      	bls.n	23af0 <hci_internal_cmd_put+0x898>
		return 0;
   23ae4:	2000      	movs	r0, #0
   23ae6:	e45b      	b.n	233a0 <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   23ae8:	f242 0385 	movw	r3, #8325	; 0x2085
   23aec:	2001      	movs	r0, #1
   23aee:	e414      	b.n	2331a <hci_internal_cmd_put+0xc2>
		return 0;
   23af0:	2000      	movs	r0, #0
   23af2:	e414      	b.n	2331e <hci_internal_cmd_put+0xc6>
		return -NRF_EPERM;
   23af4:	f04f 30ff 	mov.w	r0, #4294967295
   23af8:	e51c      	b.n	23534 <hci_internal_cmd_put+0x2dc>
   23afa:	bf00      	nop
   23afc:	20005752 	.word	0x20005752
   23b00:	01000401 	.word	0x01000401

00023b04 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   23b04:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   23b06:	4c09      	ldr	r4, [pc, #36]	; (23b2c <hci_internal_msg_get+0x28>)
   23b08:	7823      	ldrb	r3, [r4, #0]
{
   23b0a:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   23b0c:	b91b      	cbnz	r3, 23b16 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   23b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   23b12:	f7ea bb0c 	b.w	e12e <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   23b16:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   23b18:	1c61      	adds	r1, r4, #1
   23b1a:	3202      	adds	r2, #2
   23b1c:	f008 fbdf 	bl	2c2de <memcpy>
		cmd_complete_or_status.occurred = false;
   23b20:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   23b22:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   23b24:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   23b26:	702b      	strb	r3, [r5, #0]
}
   23b28:	bd38      	pop	{r3, r4, r5, pc}
   23b2a:	bf00      	nop
   23b2c:	2000574b 	.word	0x2000574b

00023b30 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   23b30:	b570      	push	{r4, r5, r6, lr}
   23b32:	4605      	mov	r5, r0
   23b34:	460e      	mov	r6, r1
   23b36:	4c08      	ldr	r4, [pc, #32]	; (23b58 <bt_rand+0x28>)
   23b38:	4620      	mov	r0, r4
   23b3a:	f00b fbe2 	bl	2f302 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   23b3e:	b138      	cbz	r0, 23b50 <bt_rand+0x20>
   23b40:	68a3      	ldr	r3, [r4, #8]
   23b42:	b2b2      	uxth	r2, r6
   23b44:	4629      	mov	r1, r5
   23b46:	4620      	mov	r0, r4
   23b48:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   23b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23b4e:	4718      	bx	r3
   23b50:	f06f 0012 	mvn.w	r0, #18
   23b54:	bd70      	pop	{r4, r5, r6, pc}
   23b56:	bf00      	nop
   23b58:	0002ff90 	.word	0x0002ff90

00023b5c <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   23b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   23b5e:	4b24      	ldr	r3, [pc, #144]	; (23bf0 <ecdh_p256_common_secret+0x94>)
   23b60:	4924      	ldr	r1, [pc, #144]	; (23bf4 <ecdh_p256_common_secret+0x98>)
   23b62:	f103 0220 	add.w	r2, r3, #32
   23b66:	2800      	cmp	r0, #0
   23b68:	bf08      	it	eq
   23b6a:	4619      	moveq	r1, r3
{
   23b6c:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   23b6e:	4610      	mov	r0, r2
   23b70:	f003 fc1e 	bl	273b0 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   23b74:	4604      	mov	r4, r0
   23b76:	b180      	cbz	r0, 23b9a <ecdh_p256_common_secret+0x3e>
		LOG_ERR("public key is not valid (err %d)", err);
   23b78:	466d      	mov	r5, sp
   23b7a:	b088      	sub	sp, #32
   23b7c:	466a      	mov	r2, sp
   23b7e:	4b1e      	ldr	r3, [pc, #120]	; (23bf8 <ecdh_p256_common_secret+0x9c>)
   23b80:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23b84:	2303      	movs	r3, #3
   23b86:	f842 3f10 	str.w	r3, [r2, #16]!
   23b8a:	481c      	ldr	r0, [pc, #112]	; (23bfc <ecdh_p256_common_secret+0xa0>)
   23b8c:	2300      	movs	r3, #0
   23b8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23b92:	f7f1 f817 	bl	14bc4 <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   23b96:	2412      	movs	r4, #18
   23b98:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   23b9a:	f04f 32ff 	mov.w	r2, #4294967295
   23b9e:	f04f 33ff 	mov.w	r3, #4294967295
   23ba2:	2001      	movs	r0, #1
   23ba4:	f7f4 f9a6 	bl	17ef4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   23ba8:	f100 060c 	add.w	r6, r0, #12
   23bac:	2102      	movs	r1, #2
   23bae:	4605      	mov	r5, r0
   23bb0:	4630      	mov	r0, r6
   23bb2:	f00a fda6 	bl	2e702 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   23bb6:	233e      	movs	r3, #62	; 0x3e
   23bb8:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   23bba:	2322      	movs	r3, #34	; 0x22
   23bbc:	7043      	strb	r3, [r0, #1]
   23bbe:	2101      	movs	r1, #1
   23bc0:	4630      	mov	r0, r6
   23bc2:	f00a fd9e 	bl	2e702 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   23bc6:	2309      	movs	r3, #9
   23bc8:	7003      	strb	r3, [r0, #0]
   23bca:	2121      	movs	r1, #33	; 0x21
   23bcc:	4630      	mov	r0, r6
   23bce:	f00a fd98 	bl	2e702 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   23bd2:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   23bd6:	b134      	cbz	r4, 23be6 <ecdh_p256_common_secret+0x8a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   23bd8:	2220      	movs	r2, #32
   23bda:	21ff      	movs	r1, #255	; 0xff
   23bdc:	f008 fb8a 	bl	2c2f4 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   23be0:	4628      	mov	r0, r5
   23be2:	46bd      	mov	sp, r7
   23be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   23be6:	4906      	ldr	r1, [pc, #24]	; (23c00 <ecdh_p256_common_secret+0xa4>)
   23be8:	f00b f9ef 	bl	2efca <sys_memcpy_swap.constprop.0>
   23bec:	e7f8      	b.n	23be0 <ecdh_p256_common_secret+0x84>
   23bee:	bf00      	nop
   23bf0:	20005792 	.word	0x20005792
   23bf4:	00033d82 	.word	0x00033d82
   23bf8:	00033d44 	.word	0x00033d44
   23bfc:	000302e4 	.word	0x000302e4
   23c00:	200057b2 	.word	0x200057b2

00023c04 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   23c04:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23c06:	4c42      	ldr	r4, [pc, #264]	; (23d10 <ecdh_cmd_process+0x10c>)
   23c08:	f3bf 8f5b 	dmb	ish
   23c0c:	6823      	ldr	r3, [r4, #0]
   23c0e:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   23c12:	2b02      	cmp	r3, #2
{
   23c14:	b087      	sub	sp, #28
   23c16:	4627      	mov	r7, r4
	switch (atomic_get(&cmd)) {
   23c18:	d05a      	beq.n	23cd0 <ecdh_cmd_process+0xcc>
   23c1a:	2b04      	cmp	r3, #4
   23c1c:	d05d      	beq.n	23cda <ecdh_cmd_process+0xd6>
   23c1e:	2b01      	cmp	r3, #1
   23c20:	d15d      	bne.n	23cde <ecdh_cmd_process+0xda>
		err = bt_rand(ecdh.private_key_be, 32);
   23c22:	4c3c      	ldr	r4, [pc, #240]	; (23d14 <ecdh_cmd_process+0x110>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   23c24:	4e3c      	ldr	r6, [pc, #240]	; (23d18 <ecdh_cmd_process+0x114>)
		err = bt_rand(ecdh.private_key_be, 32);
   23c26:	2120      	movs	r1, #32
   23c28:	4620      	mov	r0, r4
   23c2a:	f7ff ff81 	bl	23b30 <bt_rand>
		if (err) {
   23c2e:	2800      	cmp	r0, #0
   23c30:	d143      	bne.n	23cba <ecdh_cmd_process+0xb6>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   23c32:	2220      	movs	r2, #32
   23c34:	4631      	mov	r1, r6
   23c36:	4620      	mov	r0, r4
   23c38:	f008 fb2a 	bl	2c290 <memcmp>
   23c3c:	2800      	cmp	r0, #0
   23c3e:	d0f2      	beq.n	23c26 <ecdh_cmd_process+0x22>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   23c40:	4836      	ldr	r0, [pc, #216]	; (23d1c <ecdh_cmd_process+0x118>)
   23c42:	4621      	mov	r1, r4
   23c44:	f003 fba0 	bl	27388 <ocrypto_ecdh_p256_public_key>
	} while (err);
   23c48:	4605      	mov	r5, r0
   23c4a:	2800      	cmp	r0, #0
   23c4c:	d1eb      	bne.n	23c26 <ecdh_cmd_process+0x22>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   23c4e:	f04f 32ff 	mov.w	r2, #4294967295
   23c52:	f04f 33ff 	mov.w	r3, #4294967295
   23c56:	2001      	movs	r0, #1
   23c58:	f7f4 f94c 	bl	17ef4 <bt_buf_get_rx>
   23c5c:	f100 060c 	add.w	r6, r0, #12
   23c60:	2102      	movs	r1, #2
   23c62:	4604      	mov	r4, r0
   23c64:	4630      	mov	r0, r6
   23c66:	f00a fd4c 	bl	2e702 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   23c6a:	233e      	movs	r3, #62	; 0x3e
   23c6c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   23c6e:	2342      	movs	r3, #66	; 0x42
   23c70:	7043      	strb	r3, [r0, #1]
   23c72:	2101      	movs	r1, #1
   23c74:	4630      	mov	r0, r6
   23c76:	f00a fd44 	bl	2e702 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   23c7a:	2308      	movs	r3, #8
   23c7c:	7003      	strb	r3, [r0, #0]
   23c7e:	2141      	movs	r1, #65	; 0x41
   23c80:	4630      	mov	r0, r6
   23c82:	f00a fd3e 	bl	2e702 <net_buf_simple_add>
   23c86:	4606      	mov	r6, r0
	evt->status = status;
   23c88:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   23c8c:	b1bd      	cbz	r5, 23cbe <ecdh_cmd_process+0xba>
		(void)memset(evt->key, 0, sizeof(evt->key));
   23c8e:	2240      	movs	r2, #64	; 0x40
   23c90:	2100      	movs	r1, #0
   23c92:	f008 fb2f 	bl	2c2f4 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23c96:	f3bf 8f5b 	dmb	ish
   23c9a:	2300      	movs	r3, #0
   23c9c:	e857 2f00 	ldrex	r2, [r7]
   23ca0:	e847 3100 	strex	r1, r3, [r7]
   23ca4:	2900      	cmp	r1, #0
   23ca6:	d1f9      	bne.n	23c9c <ecdh_cmd_process+0x98>
   23ca8:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   23cac:	b36c      	cbz	r4, 23d0a <ecdh_cmd_process+0x106>
		bt_recv(buf);
   23cae:	4620      	mov	r0, r4
	}
}
   23cb0:	b007      	add	sp, #28
   23cb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   23cb6:	f7f5 bc13 	b.w	194e0 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   23cba:	251f      	movs	r5, #31
   23cbc:	e7c7      	b.n	23c4e <ecdh_cmd_process+0x4a>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   23cbe:	4917      	ldr	r1, [pc, #92]	; (23d1c <ecdh_cmd_process+0x118>)
   23cc0:	f00b f983 	bl	2efca <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   23cc4:	3120      	adds	r1, #32
   23cc6:	f106 0021 	add.w	r0, r6, #33	; 0x21
   23cca:	f00b f97e 	bl	2efca <sys_memcpy_swap.constprop.0>
		break;
   23cce:	e7e2      	b.n	23c96 <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(false);
   23cd0:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   23cd2:	f7ff ff43 	bl	23b5c <ecdh_p256_common_secret>
   23cd6:	4604      	mov	r4, r0
		break;
   23cd8:	e7dd      	b.n	23c96 <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(true);
   23cda:	2001      	movs	r0, #1
   23cdc:	e7f9      	b.n	23cd2 <ecdh_cmd_process+0xce>
		LOG_WRN("Unknown command");
   23cde:	4b10      	ldr	r3, [pc, #64]	; (23d20 <ecdh_cmd_process+0x11c>)
   23ce0:	9305      	str	r3, [sp, #20]
   23ce2:	2302      	movs	r3, #2
   23ce4:	9304      	str	r3, [sp, #16]
   23ce6:	2300      	movs	r3, #0
   23ce8:	480e      	ldr	r0, [pc, #56]	; (23d24 <ecdh_cmd_process+0x120>)
   23cea:	aa04      	add	r2, sp, #16
   23cec:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   23cf0:	f7f0 ff68 	bl	14bc4 <z_impl_z_log_msg_static_create>
   23cf4:	f3bf 8f5b 	dmb	ish
   23cf8:	2300      	movs	r3, #0
   23cfa:	e854 2f00 	ldrex	r2, [r4]
   23cfe:	e844 3100 	strex	r1, r3, [r4]
   23d02:	2900      	cmp	r1, #0
   23d04:	d1f9      	bne.n	23cfa <ecdh_cmd_process+0xf6>
   23d06:	f3bf 8f5b 	dmb	ish
}
   23d0a:	b007      	add	sp, #28
   23d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23d0e:	bf00      	nop
   23d10:	200047b4 	.word	0x200047b4
   23d14:	20005792 	.word	0x20005792
   23d18:	00033d82 	.word	0x00033d82
   23d1c:	200057b2 	.word	0x200057b2
   23d20:	00033d65 	.word	0x00033d65
   23d24:	000302e4 	.word	0x000302e4

00023d28 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   23d28:	b510      	push	{r4, lr}
   23d2a:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   23d2c:	2210      	movs	r2, #16
   23d2e:	2100      	movs	r1, #0
   23d30:	a801      	add	r0, sp, #4
   23d32:	f008 fadf 	bl	2c2f4 <memset>
   23d36:	4c0b      	ldr	r4, [pc, #44]	; (23d64 <ecdh_thread+0x3c>)
   23d38:	9405      	str	r4, [sp, #20]
   23d3a:	2301      	movs	r3, #1
   23d3c:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   23d40:	f04f 32ff 	mov.w	r2, #4294967295
   23d44:	f04f 33ff 	mov.w	r3, #4294967295
   23d48:	2101      	movs	r1, #1
   23d4a:	a801      	add	r0, sp, #4
   23d4c:	f003 fa72 	bl	27234 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   23d50:	4620      	mov	r0, r4
   23d52:	f00c f875 	bl	2fe40 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   23d56:	9b04      	ldr	r3, [sp, #16]
   23d58:	f36f 3394 	bfc	r3, #14, #7
   23d5c:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   23d5e:	f7ff ff51 	bl	23c04 <ecdh_cmd_process>
	while (true) {
   23d62:	e7ed      	b.n	23d40 <ecdh_thread+0x18>
   23d64:	200047a4 	.word	0x200047a4

00023d68 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   23d68:	b510      	push	{r4, lr}
   23d6a:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   23d6c:	480e      	ldr	r0, [pc, #56]	; (23da8 <hci_ecdh_init+0x40>)
   23d6e:	f00c f862 	bl	2fe36 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23d72:	4c0e      	ldr	r4, [pc, #56]	; (23dac <hci_ecdh_init+0x44>)
   23d74:	490e      	ldr	r1, [pc, #56]	; (23db0 <hci_ecdh_init+0x48>)
   23d76:	2200      	movs	r2, #0
   23d78:	2300      	movs	r3, #0
   23d7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23d7e:	2300      	movs	r3, #0
   23d80:	220a      	movs	r2, #10
   23d82:	e9cd 2303 	strd	r2, r3, [sp, #12]
   23d86:	e9cd 3301 	strd	r3, r3, [sp, #4]
   23d8a:	9300      	str	r3, [sp, #0]
   23d8c:	f44f 7262 	mov.w	r2, #904	; 0x388
   23d90:	4b08      	ldr	r3, [pc, #32]	; (23db4 <hci_ecdh_init+0x4c>)
   23d92:	4620      	mov	r0, r4
   23d94:	f002 f8f2 	bl	25f7c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   23d98:	4907      	ldr	r1, [pc, #28]	; (23db8 <hci_ecdh_init+0x50>)
   23d9a:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   23d9c:	b008      	add	sp, #32
   23d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23da2:	f00b bb82 	b.w	2f4aa <z_impl_k_thread_name_set>
   23da6:	bf00      	nop
   23da8:	200047a4 	.word	0x200047a4
   23dac:	20002fd0 	.word	0x20002fd0
   23db0:	20007cc0 	.word	0x20007cc0
   23db4:	00023d29 	.word	0x00023d29
   23db8:	00033d75 	.word	0x00033d75

00023dbc <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   23dbc:	4801      	ldr	r0, [pc, #4]	; (23dc4 <hci_ecdh_uninit+0x8>)
   23dbe:	f7f3 bcc9 	b.w	17754 <z_impl_k_thread_abort>
   23dc2:	bf00      	nop
   23dc4:	20002fd0 	.word	0x20002fd0

00023dc8 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   23dc8:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23dca:	4b0b      	ldr	r3, [pc, #44]	; (23df8 <hci_cmd_le_read_local_p256_public_key+0x30>)
   23dcc:	f3bf 8f5b 	dmb	ish
   23dd0:	2201      	movs	r2, #1
   23dd2:	e853 1f00 	ldrex	r1, [r3]
   23dd6:	2900      	cmp	r1, #0
   23dd8:	d103      	bne.n	23de2 <hci_cmd_le_read_local_p256_public_key+0x1a>
   23dda:	e843 2000 	strex	r0, r2, [r3]
   23dde:	2800      	cmp	r0, #0
   23de0:	d1f7      	bne.n	23dd2 <hci_cmd_le_read_local_p256_public_key+0xa>
   23de2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   23de6:	d105      	bne.n	23df4 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   23de8:	4804      	ldr	r0, [pc, #16]	; (23dfc <hci_cmd_le_read_local_p256_public_key+0x34>)
   23dea:	2100      	movs	r1, #0
   23dec:	f003 fa7e 	bl	272ec <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   23df0:	2000      	movs	r0, #0
}
   23df2:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   23df4:	200c      	movs	r0, #12
   23df6:	e7fc      	b.n	23df2 <hci_cmd_le_read_local_p256_public_key+0x2a>
   23df8:	200047b4 	.word	0x200047b4
   23dfc:	200047a4 	.word	0x200047a4

00023e00 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   23e00:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   23e02:	2900      	cmp	r1, #0
   23e04:	4b11      	ldr	r3, [pc, #68]	; (23e4c <cmd_le_generate_dhkey+0x4c>)
   23e06:	f3bf 8f5b 	dmb	ish
{
   23e0a:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   23e0c:	bf0c      	ite	eq
   23e0e:	2202      	moveq	r2, #2
   23e10:	2204      	movne	r2, #4
   23e12:	e853 1f00 	ldrex	r1, [r3]
   23e16:	2900      	cmp	r1, #0
   23e18:	d103      	bne.n	23e22 <cmd_le_generate_dhkey+0x22>
   23e1a:	e843 2000 	strex	r0, r2, [r3]
   23e1e:	2800      	cmp	r0, #0
   23e20:	d1f7      	bne.n	23e12 <cmd_le_generate_dhkey+0x12>
   23e22:	f3bf 8f5b 	dmb	ish
   23e26:	d10e      	bne.n	23e46 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   23e28:	4621      	mov	r1, r4
   23e2a:	4809      	ldr	r0, [pc, #36]	; (23e50 <cmd_le_generate_dhkey+0x50>)
   23e2c:	f00b f8cd 	bl	2efca <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   23e30:	4808      	ldr	r0, [pc, #32]	; (23e54 <cmd_le_generate_dhkey+0x54>)
   23e32:	f104 0120 	add.w	r1, r4, #32
   23e36:	f00b f8c8 	bl	2efca <sys_memcpy_swap.constprop.0>
   23e3a:	4807      	ldr	r0, [pc, #28]	; (23e58 <cmd_le_generate_dhkey+0x58>)
   23e3c:	2100      	movs	r1, #0
   23e3e:	f003 fa55 	bl	272ec <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   23e42:	2000      	movs	r0, #0
}
   23e44:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   23e46:	200c      	movs	r0, #12
   23e48:	e7fc      	b.n	23e44 <cmd_le_generate_dhkey+0x44>
   23e4a:	bf00      	nop
   23e4c:	200047b4 	.word	0x200047b4
   23e50:	200057b2 	.word	0x200057b2
   23e54:	200057d2 	.word	0x200057d2
   23e58:	200047a4 	.word	0x200047a4

00023e5c <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   23e5c:	4901      	ldr	r1, [pc, #4]	; (23e64 <mpsl_low_prio_irq_handler+0x8>)
   23e5e:	4802      	ldr	r0, [pc, #8]	; (23e68 <mpsl_low_prio_irq_handler+0xc>)
   23e60:	f00b bc87 	b.w	2f772 <k_work_submit_to_queue>
   23e64:	200047e8 	.word	0x200047e8
   23e68:	20003050 	.word	0x20003050

00023e6c <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
   23e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   23e6e:	2332      	movs	r3, #50	; 0x32
   23e70:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   23e74:	4a13      	ldr	r2, [pc, #76]	; (23ec4 <mpsl_lib_init_sys+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   23e76:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   23e78:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   23e7a:	2119      	movs	r1, #25
   23e7c:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   23e7e:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   23e82:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   23e86:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   23e8a:	f7e9 fb19 	bl	d4c0 <mpsl_init>
	if (err) {
   23e8e:	4604      	mov	r4, r0
   23e90:	b9a0      	cbnz	r0, 23ebc <mpsl_lib_init_sys+0x50>
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   23e92:	480d      	ldr	r0, [pc, #52]	; (23ec8 <mpsl_lib_init_sys+0x5c>)
   23e94:	4629      	mov	r1, r5
   23e96:	f7ed fe2a 	bl	11aee <mpsl_timeslot_session_count_set>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   23e9a:	4604      	mov	r4, r0
   23e9c:	b970      	cbnz	r0, 23ebc <mpsl_lib_init_sys+0x50>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   23e9e:	4601      	mov	r1, r0
   23ea0:	462a      	mov	r2, r5
   23ea2:	2008      	movs	r0, #8
   23ea4:	f7f2 ffc4 	bl	16e30 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   23ea8:	462a      	mov	r2, r5
   23eaa:	4621      	mov	r1, r4
   23eac:	200b      	movs	r0, #11
   23eae:	f7f2 ffbf 	bl	16e30 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   23eb2:	462a      	mov	r2, r5
   23eb4:	4621      	mov	r1, r4
   23eb6:	4628      	mov	r0, r5
   23eb8:	f7f2 ffba 	bl	16e30 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   23ebc:	4620      	mov	r0, r4
   23ebe:	b003      	add	sp, #12
   23ec0:	bd30      	pop	{r4, r5, pc}
   23ec2:	bf00      	nop
   23ec4:	00023ecd 	.word	0x00023ecd
   23ec8:	200047b8 	.word	0x200047b8

00023ecc <m_assert_handler>:
{
   23ecc:	b598      	push	{r3, r4, r7, lr}
   23ece:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   23ed0:	466c      	mov	r4, sp
   23ed2:	b08a      	sub	sp, #40	; 0x28
   23ed4:	466a      	mov	r2, sp
   23ed6:	4b0c      	ldr	r3, [pc, #48]	; (23f08 <m_assert_handler+0x3c>)
   23ed8:	61d1      	str	r1, [r2, #28]
   23eda:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23ede:	f44f 7300 	mov.w	r3, #512	; 0x200
   23ee2:	8413      	strh	r3, [r2, #32]
   23ee4:	4b09      	ldr	r3, [pc, #36]	; (23f0c <m_assert_handler+0x40>)
   23ee6:	f842 3f10 	str.w	r3, [r2, #16]!
   23eea:	4809      	ldr	r0, [pc, #36]	; (23f10 <m_assert_handler+0x44>)
   23eec:	2300      	movs	r3, #0
   23eee:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   23ef2:	f7f0 fe67 	bl	14bc4 <z_impl_z_log_msg_static_create>
   23ef6:	46a5      	mov	sp, r4
	k_oops();
   23ef8:	4040      	eors	r0, r0
   23efa:	f380 8811 	msr	BASEPRI, r0
   23efe:	f04f 0003 	mov.w	r0, #3
   23f02:	df02      	svc	2
}
   23f04:	46bd      	mov	sp, r7
   23f06:	bd98      	pop	{r3, r4, r7, pc}
   23f08:	00033dae 	.word	0x00033dae
   23f0c:	01000004 	.word	0x01000004
   23f10:	00030354 	.word	0x00030354

00023f14 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
   23f14:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   23f16:	4d0d      	ldr	r5, [pc, #52]	; (23f4c <mpsl_low_prio_init+0x38>)
   23f18:	490d      	ldr	r1, [pc, #52]	; (23f50 <mpsl_low_prio_init+0x3c>)
   23f1a:	2400      	movs	r4, #0
   23f1c:	9400      	str	r4, [sp, #0]
   23f1e:	f06f 0309 	mvn.w	r3, #9
   23f22:	f44f 6280 	mov.w	r2, #1024	; 0x400
   23f26:	4628      	mov	r0, r5
   23f28:	f002 fb5a 	bl	265e0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   23f2c:	4909      	ldr	r1, [pc, #36]	; (23f54 <mpsl_low_prio_init+0x40>)
   23f2e:	4628      	mov	r0, r5
   23f30:	f00b fabb 	bl	2f4aa <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   23f34:	4908      	ldr	r1, [pc, #32]	; (23f58 <mpsl_low_prio_init+0x44>)
   23f36:	4809      	ldr	r0, [pc, #36]	; (23f5c <mpsl_low_prio_init+0x48>)
   23f38:	f00b fbee 	bl	2f718 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   23f3c:	4622      	mov	r2, r4
   23f3e:	2104      	movs	r1, #4
   23f40:	2019      	movs	r0, #25
   23f42:	f7f2 ff75 	bl	16e30 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   23f46:	4620      	mov	r0, r4
   23f48:	b003      	add	sp, #12
   23f4a:	bd30      	pop	{r4, r5, pc}
   23f4c:	20003050 	.word	0x20003050
   23f50:	200080c0 	.word	0x200080c0
   23f54:	00033dc2 	.word	0x00033dc2
   23f58:	0002f013 	.word	0x0002f013
   23f5c:	200047e8 	.word	0x200047e8

00023f60 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   23f60:	4b01      	ldr	r3, [pc, #4]	; (23f68 <mpsl_hfclk_callback+0x8>)
   23f62:	2000      	movs	r0, #0
   23f64:	681b      	ldr	r3, [r3, #0]
   23f66:	4718      	bx	r3
   23f68:	200047f8 	.word	0x200047f8

00023f6c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   23f6c:	b120      	cbz	r0, 23f78 <nrfx_clock_start+0xc>
   23f6e:	2801      	cmp	r0, #1
   23f70:	d106      	bne.n	23f80 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   23f72:	4804      	ldr	r0, [pc, #16]	; (23f84 <nrfx_clock_start+0x18>)
   23f74:	f7e9 b906 	b.w	d184 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   23f78:	4b03      	ldr	r3, [pc, #12]	; (23f88 <nrfx_clock_start+0x1c>)
   23f7a:	2001      	movs	r0, #1
   23f7c:	681b      	ldr	r3, [r3, #0]
   23f7e:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   23f80:	4770      	bx	lr
   23f82:	bf00      	nop
   23f84:	00023f61 	.word	0x00023f61
   23f88:	200047f8 	.word	0x200047f8

00023f8c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   23f8c:	4b01      	ldr	r3, [pc, #4]	; (23f94 <nrfx_clock_init+0x8>)
   23f8e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   23f90:	4801      	ldr	r0, [pc, #4]	; (23f98 <nrfx_clock_init+0xc>)
   23f92:	4770      	bx	lr
   23f94:	200047f8 	.word	0x200047f8
   23f98:	0bad0000 	.word	0x0bad0000

00023f9c <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   23f9c:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23f9e:	481d      	ldr	r0, [pc, #116]	; (24014 <timeslot_callback+0x78>)
   23fa0:	f3bf 8f5b 	dmb	ish
   23fa4:	6803      	ldr	r3, [r0, #0]
   23fa6:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   23faa:	b923      	cbnz	r3, 23fb6 <timeslot_callback+0x1a>
		return NULL;
	}

	switch (signal) {
   23fac:	2906      	cmp	r1, #6
   23fae:	d804      	bhi.n	23fba <timeslot_callback+0x1e>
   23fb0:	2904      	cmp	r1, #4
   23fb2:	d823      	bhi.n	23ffc <timeslot_callback+0x60>
   23fb4:	b139      	cbz	r1, 23fc6 <timeslot_callback+0x2a>
		return NULL;
   23fb6:	2000      	movs	r0, #0
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   23fb8:	bd10      	pop	{r4, pc}
	switch (signal) {
   23fba:	2907      	cmp	r1, #7
   23fbc:	d1fb      	bne.n	23fb6 <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   23fbe:	3840      	subs	r0, #64	; 0x40
   23fc0:	f002 f96a 	bl	26298 <z_impl_k_sem_give>
}
   23fc4:	e7f7      	b.n	23fb6 <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   23fc6:	f850 3c20 	ldr.w	r3, [r0, #-32]
   23fca:	f1a0 0440 	sub.w	r4, r0, #64	; 0x40
   23fce:	e9d3 2000 	ldrd	r2, r0, [r3]
   23fd2:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   23fd4:	2801      	cmp	r0, #1
   23fd6:	d005      	beq.n	23fe4 <timeslot_callback+0x48>
			_context.return_param.callback_action =
   23fd8:	2302      	movs	r3, #2
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   23fda:	63e0      	str	r0, [r4, #60]	; 0x3c
			_context.return_param.callback_action =
   23fdc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		return NULL;
   23fe0:	480d      	ldr	r0, [pc, #52]	; (24018 <timeslot_callback+0x7c>)
   23fe2:	e7e9      	b.n	23fb8 <timeslot_callback+0x1c>
			_context.timeslot_request.params.earliest.timeout_us =
   23fe4:	f247 5330 	movw	r3, #30000	; 0x7530
   23fe8:	6323      	str	r3, [r4, #48]	; 0x30
			_context.return_param.callback_action =
   23fea:	2303      	movs	r3, #3
   23fec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			_context.return_param.params.request.p_next =
   23ff0:	f104 0324 	add.w	r3, r4, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   23ff4:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
			_context.return_param.params.request.p_next =
   23ff8:	63a3      	str	r3, [r4, #56]	; 0x38
   23ffa:	e7f1      	b.n	23fe0 <timeslot_callback+0x44>
	_context.timeslot_request.params.earliest.priority =
   23ffc:	f800 3c17 	strb.w	r3, [r0, #-23]
	_context.timeslot_request.params.earliest.timeout_us =
   24000:	4b06      	ldr	r3, [pc, #24]	; (2401c <timeslot_callback+0x80>)
   24002:	f840 3c10 	str.w	r3, [r0, #-16]
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   24006:	f1a0 011c 	sub.w	r1, r0, #28
	_context.timeslot_request.params.earliest.priority =
   2400a:	3840      	subs	r0, #64	; 0x40
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   2400c:	7e00      	ldrb	r0, [r0, #24]
   2400e:	f7ed fd12 	bl	11a36 <mpsl_timeslot_request>
}
   24012:	e7d0      	b.n	23fb6 <timeslot_callback+0x1a>
   24014:	2000483c 	.word	0x2000483c
   24018:	20004830 	.word	0x20004830
   2401c:	0f423fff 	.word	0x0f423fff

00024020 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   24020:	4802      	ldr	r0, [pc, #8]	; (2402c <nrf_flash_sync_init+0xc>)
   24022:	2201      	movs	r2, #1
   24024:	2100      	movs	r1, #0
   24026:	f00b baf4 	b.w	2f612 <z_impl_k_sem_init>
   2402a:	bf00      	nop
   2402c:	200047fc 	.word	0x200047fc

00024030 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   24030:	4b01      	ldr	r3, [pc, #4]	; (24038 <nrf_flash_sync_set_context+0x8>)
   24032:	61d8      	str	r0, [r3, #28]
}
   24034:	4770      	bx	lr
   24036:	bf00      	nop
   24038:	200047fc 	.word	0x200047fc

0002403c <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   2403c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2403e:	b087      	sub	sp, #28
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   24040:	f04f 31ff 	mov.w	r1, #4294967295
{
   24044:	af00      	add	r7, sp, #0
   24046:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   24048:	f04f 30ff 	mov.w	r0, #4294967295
   2404c:	f7fe ff1c 	bl	22e88 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   24050:	493d      	ldr	r1, [pc, #244]	; (24148 <nrf_flash_sync_exe+0x10c>)
   24052:	483e      	ldr	r0, [pc, #248]	; (2414c <nrf_flash_sync_exe+0x110>)
   24054:	f7e5 fdd0 	bl	9bf8 <mpsl_timeslot_session_open>
   24058:	4604      	mov	r4, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   2405a:	f7fe ff1d 	bl	22e98 <multithreading_lock_release>

	if (ret < 0) {
   2405e:	2c00      	cmp	r4, #0
   24060:	da14      	bge.n	2408c <nrf_flash_sync_exe+0x50>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   24062:	466d      	mov	r5, sp
   24064:	b088      	sub	sp, #32
   24066:	466a      	mov	r2, sp
   24068:	4b39      	ldr	r3, [pc, #228]	; (24150 <nrf_flash_sync_exe+0x114>)
   2406a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   2406e:	2303      	movs	r3, #3
   24070:	f842 3f10 	str.w	r3, [r2, #16]!
   24074:	4837      	ldr	r0, [pc, #220]	; (24154 <nrf_flash_sync_exe+0x118>)
   24076:	2300      	movs	r3, #0
   24078:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2407c:	f7f0 fda2 	bl	14bc4 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   24080:	f06f 000b 	mvn.w	r0, #11
   24084:	46ad      	mov	sp, r5
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   24086:	371c      	adds	r7, #28
   24088:	46bd      	mov	sp, r7
   2408a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   2408c:	4c32      	ldr	r4, [pc, #200]	; (24158 <nrf_flash_sync_exe+0x11c>)
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   2408e:	f240 1301 	movw	r3, #257	; 0x101
   24092:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   24094:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   24096:	6225      	str	r5, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   24098:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   2409a:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   2409c:	f247 5330 	movw	r3, #30000	; 0x7530
   240a0:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   240a2:	2600      	movs	r6, #0
	_context.status = -ETIMEDOUT;
   240a4:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   240a8:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   240ac:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   240ae:	f104 0540 	add.w	r5, r4, #64	; 0x40
   240b2:	f3bf 8f5b 	dmb	ish
   240b6:	e855 3f00 	ldrex	r3, [r5]
   240ba:	e845 6200 	strex	r2, r6, [r5]
   240be:	2a00      	cmp	r2, #0
   240c0:	d1f9      	bne.n	240b6 <nrf_flash_sync_exe+0x7a>
   240c2:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   240c6:	f04f 31ff 	mov.w	r1, #4294967295
   240ca:	f04f 30ff 	mov.w	r0, #4294967295
   240ce:	f7fe fedb 	bl	22e88 <multithreading_lock_acquire>
	ret = mpsl_timeslot_request(_context.session_id, req);
   240d2:	f104 0124 	add.w	r1, r4, #36	; 0x24
   240d6:	7e20      	ldrb	r0, [r4, #24]
   240d8:	f7ed fcad 	bl	11a36 <mpsl_timeslot_request>
	MULTITHREADING_LOCK_RELEASE();
   240dc:	f7fe fedc 	bl	22e98 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   240e0:	4a1e      	ldr	r2, [pc, #120]	; (2415c <nrf_flash_sync_exe+0x120>)
   240e2:	2300      	movs	r3, #0
   240e4:	4620      	mov	r0, r4
   240e6:	f002 f8fd 	bl	262e4 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   240ea:	42b0      	cmp	r0, r6
   240ec:	da16      	bge.n	2411c <nrf_flash_sync_exe+0xe0>
		LOG_ERR("timeout");
   240ee:	4b1c      	ldr	r3, [pc, #112]	; (24160 <nrf_flash_sync_exe+0x124>)
   240f0:	617b      	str	r3, [r7, #20]
   240f2:	2302      	movs	r3, #2
   240f4:	613b      	str	r3, [r7, #16]
   240f6:	4817      	ldr	r0, [pc, #92]	; (24154 <nrf_flash_sync_exe+0x118>)
   240f8:	4633      	mov	r3, r6
   240fa:	f107 0210 	add.w	r2, r7, #16
   240fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   24102:	f7f0 fd5f 	bl	14bc4 <z_impl_z_log_msg_static_create>
   24106:	f3bf 8f5b 	dmb	ish
   2410a:	2301      	movs	r3, #1
   2410c:	e855 2f00 	ldrex	r2, [r5]
   24110:	e845 3100 	strex	r1, r3, [r5]
   24114:	2900      	cmp	r1, #0
   24116:	d1f9      	bne.n	2410c <nrf_flash_sync_exe+0xd0>
   24118:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2411c:	f04f 31ff 	mov.w	r1, #4294967295
   24120:	f04f 30ff 	mov.w	r0, #4294967295
   24124:	f7fe feb0 	bl	22e88 <multithreading_lock_acquire>
	mpsl_timeslot_session_close(_context.session_id);
   24128:	7e20      	ldrb	r0, [r4, #24]
   2412a:	f7ed fcbf 	bl	11aac <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   2412e:	f7fe feb3 	bl	22e98 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24132:	f3bf 8f5b 	dmb	ish
   24136:	6c23      	ldr	r3, [r4, #64]	; 0x40
   24138:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   2413c:	b113      	cbz	r3, 24144 <nrf_flash_sync_exe+0x108>
	z_impl_k_sem_reset(sem);
   2413e:	4806      	ldr	r0, [pc, #24]	; (24158 <nrf_flash_sync_exe+0x11c>)
   24140:	f002 f8f8 	bl	26334 <z_impl_k_sem_reset>
	return _context.status;
   24144:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   24146:	e79e      	b.n	24086 <nrf_flash_sync_exe+0x4a>
   24148:	20004814 	.word	0x20004814
   2414c:	00023f9d 	.word	0x00023f9d
   24150:	00033dd6 	.word	0x00033dd6
   24154:	0003032c 	.word	0x0003032c
   24158:	200047fc 	.word	0x200047fc
   2415c:	000b7b44 	.word	0x000b7b44
   24160:	000329aa 	.word	0x000329aa

00024164 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24164:	4b07      	ldr	r3, [pc, #28]	; (24184 <nrf_flash_sync_check_time_limit+0x20>)
   24166:	2201      	movs	r2, #1
   24168:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   2416a:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   2416e:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   24172:	4418      	add	r0, r3
   24174:	4b04      	ldr	r3, [pc, #16]	; (24188 <nrf_flash_sync_check_time_limit+0x24>)
   24176:	69db      	ldr	r3, [r3, #28]
}
   24178:	4298      	cmp	r0, r3
   2417a:	bf34      	ite	cc
   2417c:	2000      	movcc	r0, #0
   2417e:	2001      	movcs	r0, #1
   24180:	4770      	bx	lr
   24182:	bf00      	nop
   24184:	40008000 	.word	0x40008000
   24188:	200047fc 	.word	0x200047fc

0002418c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   2418c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   24190:	4905      	ldr	r1, [pc, #20]	; (241a8 <__NVIC_SystemReset+0x1c>)
   24192:	4b06      	ldr	r3, [pc, #24]	; (241ac <__NVIC_SystemReset+0x20>)
   24194:	68ca      	ldr	r2, [r1, #12]
   24196:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2419a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2419c:	60cb      	str	r3, [r1, #12]
   2419e:	f3bf 8f4f 	dsb	sy
    __NOP();
   241a2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   241a4:	e7fd      	b.n	241a2 <__NVIC_SystemReset+0x16>
   241a6:	bf00      	nop
   241a8:	e000ed00 	.word	0xe000ed00
   241ac:	05fa0004 	.word	0x05fa0004

000241b0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   241b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   241b4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   241b8:	2a08      	cmp	r2, #8
   241ba:	d106      	bne.n	241ca <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   241bc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   241c0:	2b05      	cmp	r3, #5
   241c2:	d802      	bhi.n	241ca <nrf52_errata_103+0x1a>
   241c4:	4a02      	ldr	r2, [pc, #8]	; (241d0 <nrf52_errata_103+0x20>)
   241c6:	5cd0      	ldrb	r0, [r2, r3]
   241c8:	4770      	bx	lr
                        return false;
   241ca:	2000      	movs	r0, #0
}
   241cc:	4770      	bx	lr
   241ce:	bf00      	nop
   241d0:	00033e12 	.word	0x00033e12

000241d4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   241d4:	4a02      	ldr	r2, [pc, #8]	; (241e0 <nvmc_wait+0xc>)
   241d6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   241da:	2b00      	cmp	r3, #0
   241dc:	d0fb      	beq.n	241d6 <nvmc_wait+0x2>
}
   241de:	4770      	bx	lr
   241e0:	4001e000 	.word	0x4001e000

000241e4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   241e4:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   241e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   241ea:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   241ee:	2a08      	cmp	r2, #8
   241f0:	d14e      	bne.n	24290 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   241f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   241f6:	2100      	movs	r1, #0
   241f8:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   241fc:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   24200:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   24204:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   24208:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   2420c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   24210:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   24214:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   24218:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   2421c:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   24220:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   24224:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   24228:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   2422c:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   24230:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   24234:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   24238:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   2423c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   24240:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   24244:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   24248:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   2424c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   24250:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   24254:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   24258:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   2425c:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   24260:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   24264:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   24268:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   2426c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   24270:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   24274:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   24278:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   2427c:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   24280:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   24284:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   24288:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   2428c:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   24290:	f7ff ff8e 	bl	241b0 <nrf52_errata_103>
   24294:	b118      	cbz	r0, 2429e <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   24296:	4b3f      	ldr	r3, [pc, #252]	; (24394 <SystemInit+0x1b0>)
   24298:	4a3f      	ldr	r2, [pc, #252]	; (24398 <SystemInit+0x1b4>)
   2429a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   2429e:	f7ff ff87 	bl	241b0 <nrf52_errata_103>
   242a2:	b118      	cbz	r0, 242ac <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   242a4:	4b3d      	ldr	r3, [pc, #244]	; (2439c <SystemInit+0x1b8>)
   242a6:	22fb      	movs	r2, #251	; 0xfb
   242a8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   242ac:	f7ff ff80 	bl	241b0 <nrf52_errata_103>
   242b0:	b170      	cbz	r0, 242d0 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   242b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   242b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   242ba:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   242be:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   242c2:	f022 020f 	bic.w	r2, r2, #15
   242c6:	f003 030f 	and.w	r3, r3, #15
   242ca:	4313      	orrs	r3, r2
   242cc:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   242d0:	f7ff ff6e 	bl	241b0 <nrf52_errata_103>
   242d4:	b120      	cbz	r0, 242e0 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   242d6:	4b32      	ldr	r3, [pc, #200]	; (243a0 <SystemInit+0x1bc>)
   242d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   242dc:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   242e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   242e4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   242e8:	2b08      	cmp	r3, #8
   242ea:	d11a      	bne.n	24322 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   242ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   242f0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   242f4:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   242f6:	bf44      	itt	mi
   242f8:	f06f 0201 	mvnmi.w	r2, #1
   242fc:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   24300:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24304:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   24308:	2b05      	cmp	r3, #5
   2430a:	d802      	bhi.n	24312 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2430c:	4a25      	ldr	r2, [pc, #148]	; (243a4 <SystemInit+0x1c0>)
   2430e:	5cd3      	ldrb	r3, [r2, r3]
   24310:	b13b      	cbz	r3, 24322 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   24312:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   24316:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2431a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2431e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   24322:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   24326:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   2432a:	07db      	lsls	r3, r3, #31
   2432c:	d514      	bpl.n	24358 <SystemInit+0x174>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2432e:	481e      	ldr	r0, [pc, #120]	; (243a8 <SystemInit+0x1c4>)
   24330:	2301      	movs	r3, #1
   24332:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   24336:	f7ff ff4d 	bl	241d4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   2433a:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   2433e:	f023 0301 	bic.w	r3, r3, #1
   24342:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   24346:	f7ff ff45 	bl	241d4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2434a:	2300      	movs	r3, #0
   2434c:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   24350:	f7ff ff40 	bl	241d4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   24354:	f7ff ff1a 	bl	2418c <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   24358:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   2435c:	2b00      	cmp	r3, #0
   2435e:	db03      	blt.n	24368 <SystemInit+0x184>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   24360:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   24364:	2b00      	cmp	r3, #0
   24366:	da14      	bge.n	24392 <SystemInit+0x1ae>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   24368:	490f      	ldr	r1, [pc, #60]	; (243a8 <SystemInit+0x1c4>)
   2436a:	2301      	movs	r3, #1
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2436c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   24370:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   24374:	2412      	movs	r4, #18
    nvmc_wait();
   24376:	f7ff ff2d 	bl	241d4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2437a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2437e:	f7ff ff29 	bl	241d4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   24382:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   24386:	f7ff ff25 	bl	241d4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2438a:	2300      	movs	r3, #0
   2438c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   24390:	e7de      	b.n	24350 <SystemInit+0x16c>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   24392:	bd10      	pop	{r4, pc}
   24394:	40005000 	.word	0x40005000
   24398:	00038148 	.word	0x00038148
   2439c:	4000f000 	.word	0x4000f000
   243a0:	40029000 	.word	0x40029000
   243a4:	00033e0c 	.word	0x00033e0c
   243a8:	4001e000 	.word	0x4001e000

000243ac <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   243ac:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   243ae:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   243b0:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   243b2:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   243b6:	fab2 f382 	clz	r3, r2
   243ba:	f1c3 031f 	rsb	r3, r3, #31
   243be:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   243c0:	fa05 f403 	lsl.w	r4, r5, r3
   243c4:	ea22 0404 	bic.w	r4, r2, r4
   243c8:	e850 6f00 	ldrex	r6, [r0]
   243cc:	4296      	cmp	r6, r2
   243ce:	d104      	bne.n	243da <nrfx_flag32_alloc+0x2e>
   243d0:	e840 4c00 	strex	ip, r4, [r0]
   243d4:	f1bc 0f00 	cmp.w	ip, #0
   243d8:	d1f6      	bne.n	243c8 <nrfx_flag32_alloc+0x1c>
   243da:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   243de:	d1e7      	bne.n	243b0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   243e0:	4801      	ldr	r0, [pc, #4]	; (243e8 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   243e2:	700b      	strb	r3, [r1, #0]
}
   243e4:	bd70      	pop	{r4, r5, r6, pc}
   243e6:	bf00      	nop
   243e8:	0bad0000 	.word	0x0bad0000

000243ec <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   243ec:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   243ee:	6803      	ldr	r3, [r0, #0]
   243f0:	40cb      	lsrs	r3, r1
   243f2:	07db      	lsls	r3, r3, #31
   243f4:	d414      	bmi.n	24420 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   243f6:	2301      	movs	r3, #1
   243f8:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   243fa:	6802      	ldr	r2, [r0, #0]
   243fc:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   24400:	ea43 0102 	orr.w	r1, r3, r2
   24404:	e850 4f00 	ldrex	r4, [r0]
   24408:	4294      	cmp	r4, r2
   2440a:	d104      	bne.n	24416 <nrfx_flag32_free+0x2a>
   2440c:	e840 1c00 	strex	ip, r1, [r0]
   24410:	f1bc 0f00 	cmp.w	ip, #0
   24414:	d1f6      	bne.n	24404 <nrfx_flag32_free+0x18>
   24416:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2441a:	d1ee      	bne.n	243fa <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   2441c:	4801      	ldr	r0, [pc, #4]	; (24424 <nrfx_flag32_free+0x38>)
}
   2441e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   24420:	4801      	ldr	r0, [pc, #4]	; (24428 <nrfx_flag32_free+0x3c>)
   24422:	e7fc      	b.n	2441e <nrfx_flag32_free+0x32>
   24424:	0bad0000 	.word	0x0bad0000
   24428:	0bad0004 	.word	0x0bad0004

0002442c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   2442c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2442e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   24432:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   24434:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   24436:	6002      	str	r2, [r0, #0]
}
   24438:	4802      	ldr	r0, [pc, #8]	; (24444 <nrf_gpio_pin_port_decode+0x18>)
   2443a:	bf18      	it	ne
   2443c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   24440:	4770      	bx	lr
   24442:	bf00      	nop
   24444:	50000300 	.word	0x50000300

00024448 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   24448:	4b03      	ldr	r3, [pc, #12]	; (24458 <pin_in_use_by_te+0x10>)
   2444a:	3008      	adds	r0, #8
   2444c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   24450:	f3c0 1040 	ubfx	r0, r0, #5, #1
   24454:	4770      	bx	lr
   24456:	bf00      	nop
   24458:	2000096c 	.word	0x2000096c

0002445c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   2445c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2445e:	f100 0308 	add.w	r3, r0, #8
   24462:	4c0c      	ldr	r4, [pc, #48]	; (24494 <call_handler+0x38>)
   24464:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   24468:	05da      	lsls	r2, r3, #23
{
   2446a:	4605      	mov	r5, r0
   2446c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2446e:	d507      	bpl.n	24480 <call_handler+0x24>
   24470:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   24474:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   24478:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   2447c:	6852      	ldr	r2, [r2, #4]
   2447e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   24480:	68a3      	ldr	r3, [r4, #8]
   24482:	b12b      	cbz	r3, 24490 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   24484:	68e2      	ldr	r2, [r4, #12]
   24486:	4631      	mov	r1, r6
   24488:	4628      	mov	r0, r5
    }
}
   2448a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2448e:	4718      	bx	r3
}
   24490:	bd70      	pop	{r4, r5, r6, pc}
   24492:	bf00      	nop
   24494:	2000096c 	.word	0x2000096c

00024498 <release_handler>:
{
   24498:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2449a:	4a12      	ldr	r2, [pc, #72]	; (244e4 <release_handler+0x4c>)
   2449c:	3008      	adds	r0, #8
   2449e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   244a2:	05d9      	lsls	r1, r3, #23
   244a4:	d51b      	bpl.n	244de <release_handler+0x46>
   244a6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   244aa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   244ae:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   244b2:	f102 040e 	add.w	r4, r2, #14
   244b6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   244b8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   244bc:	f413 7f80 	tst.w	r3, #256	; 0x100
   244c0:	d003      	beq.n	244ca <release_handler+0x32>
   244c2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   244c6:	4299      	cmp	r1, r3
   244c8:	d009      	beq.n	244de <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   244ca:	3001      	adds	r0, #1
   244cc:	2830      	cmp	r0, #48	; 0x30
   244ce:	d1f3      	bne.n	244b8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   244d0:	2300      	movs	r3, #0
   244d2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   244d6:	4804      	ldr	r0, [pc, #16]	; (244e8 <release_handler+0x50>)
}
   244d8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   244da:	f7ff bf87 	b.w	243ec <nrfx_flag32_free>
}
   244de:	bc10      	pop	{r4}
   244e0:	4770      	bx	lr
   244e2:	bf00      	nop
   244e4:	2000096c 	.word	0x2000096c
   244e8:	200009e0 	.word	0x200009e0

000244ec <pin_handler_trigger_uninit>:
{
   244ec:	b538      	push	{r3, r4, r5, lr}
   244ee:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   244f0:	f7ff ffaa 	bl	24448 <pin_in_use_by_te>
   244f4:	4c09      	ldr	r4, [pc, #36]	; (2451c <pin_handler_trigger_uninit+0x30>)
   244f6:	f102 0508 	add.w	r5, r2, #8
   244fa:	b140      	cbz	r0, 2450e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   244fc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   24500:	4907      	ldr	r1, [pc, #28]	; (24520 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   24502:	0b5b      	lsrs	r3, r3, #13
   24504:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   24508:	2000      	movs	r0, #0
   2450a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   2450e:	4610      	mov	r0, r2
   24510:	f7ff ffc2 	bl	24498 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   24514:	2300      	movs	r3, #0
   24516:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   2451a:	bd38      	pop	{r3, r4, r5, pc}
   2451c:	2000096c 	.word	0x2000096c
   24520:	40006000 	.word	0x40006000

00024524 <nrfx_gpiote_input_configure>:
{
   24524:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   24528:	4604      	mov	r4, r0
   2452a:	4616      	mov	r6, r2
   2452c:	461d      	mov	r5, r3
    if (p_input_config)
   2452e:	b301      	cbz	r1, 24572 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   24530:	4f4e      	ldr	r7, [pc, #312]	; (2466c <nrfx_gpiote_input_configure+0x148>)
   24532:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   24536:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   2453a:	079b      	lsls	r3, r3, #30
   2453c:	d502      	bpl.n	24544 <nrfx_gpiote_input_configure+0x20>
   2453e:	f7ff ff83 	bl	24448 <pin_in_use_by_te>
   24542:	bb10      	cbnz	r0, 2458a <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   24544:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   24546:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2454a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2454e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   24552:	f10d 020f 	add.w	r2, sp, #15
   24556:	460b      	mov	r3, r1
   24558:	4620      	mov	r0, r4
   2455a:	f10d 010e 	add.w	r1, sp, #14
   2455e:	f00a fd9f 	bl	2f0a0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   24562:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   24566:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2456a:	f043 0301 	orr.w	r3, r3, #1
   2456e:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   24572:	b346      	cbz	r6, 245c6 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   24574:	4b3d      	ldr	r3, [pc, #244]	; (2466c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   24576:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2457a:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2457c:	f104 0708 	add.w	r7, r4, #8
   24580:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   24584:	0788      	lsls	r0, r1, #30
   24586:	d502      	bpl.n	2458e <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   24588:	b1aa      	cbz	r2, 245b6 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   2458a:	4839      	ldr	r0, [pc, #228]	; (24670 <nrfx_gpiote_input_configure+0x14c>)
   2458c:	e01d      	b.n	245ca <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2458e:	f021 0120 	bic.w	r1, r1, #32
   24592:	04c9      	lsls	r1, r1, #19
   24594:	0cc9      	lsrs	r1, r1, #19
   24596:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   2459a:	b162      	cbz	r2, 245b6 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   2459c:	f1bc 0f03 	cmp.w	ip, #3
   245a0:	d8f3      	bhi.n	2458a <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   245a2:	6872      	ldr	r2, [r6, #4]
   245a4:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   245a6:	f1bc 0f00 	cmp.w	ip, #0
   245aa:	d111      	bne.n	245d0 <nrfx_gpiote_input_configure+0xac>
   245ac:	4a31      	ldr	r2, [pc, #196]	; (24674 <nrfx_gpiote_input_configure+0x150>)
   245ae:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   245b2:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   245b6:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   245ba:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   245be:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   245c2:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   245c6:	bb45      	cbnz	r5, 2461a <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   245c8:	482b      	ldr	r0, [pc, #172]	; (24678 <nrfx_gpiote_input_configure+0x154>)
}
   245ca:	b004      	add	sp, #16
   245cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   245d0:	00b2      	lsls	r2, r6, #2
   245d2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   245d6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   245da:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   245de:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   245e2:	f020 0003 	bic.w	r0, r0, #3
   245e6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   245ea:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   245ee:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   245f2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   245f6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   245fa:	0220      	lsls	r0, r4, #8
   245fc:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   24600:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   24604:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   24608:	ea40 000e 	orr.w	r0, r0, lr
   2460c:	f041 0120 	orr.w	r1, r1, #32
   24610:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   24614:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   24618:	e7cd      	b.n	245b6 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   2461a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   2461e:	4620      	mov	r0, r4
   24620:	f7ff ff3a 	bl	24498 <release_handler>
    if (!handler)
   24624:	2e00      	cmp	r6, #0
   24626:	d0cf      	beq.n	245c8 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   24628:	4d10      	ldr	r5, [pc, #64]	; (2466c <nrfx_gpiote_input_configure+0x148>)
   2462a:	e9d5 2300 	ldrd	r2, r3, [r5]
   2462e:	4296      	cmp	r6, r2
   24630:	d101      	bne.n	24636 <nrfx_gpiote_input_configure+0x112>
   24632:	429f      	cmp	r7, r3
   24634:	d018      	beq.n	24668 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   24636:	4811      	ldr	r0, [pc, #68]	; (2467c <nrfx_gpiote_input_configure+0x158>)
   24638:	f10d 010f 	add.w	r1, sp, #15
   2463c:	f7ff feb6 	bl	243ac <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   24640:	4b0d      	ldr	r3, [pc, #52]	; (24678 <nrfx_gpiote_input_configure+0x154>)
   24642:	4298      	cmp	r0, r3
   24644:	d1c1      	bne.n	245ca <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   24646:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   2464a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   2464e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   24652:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   24654:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   24656:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   2465a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   2465e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   24662:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   24666:	e7af      	b.n	245c8 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   24668:	2200      	movs	r2, #0
   2466a:	e7ee      	b.n	2464a <nrfx_gpiote_input_configure+0x126>
   2466c:	2000096c 	.word	0x2000096c
   24670:	0bad0004 	.word	0x0bad0004
   24674:	40006000 	.word	0x40006000
   24678:	0bad0000 	.word	0x0bad0000
   2467c:	200009e0 	.word	0x200009e0

00024680 <nrfx_gpiote_output_configure>:
{
   24680:	b5f0      	push	{r4, r5, r6, r7, lr}
   24682:	4604      	mov	r4, r0
   24684:	b085      	sub	sp, #20
   24686:	4615      	mov	r5, r2
    if (p_config)
   24688:	b319      	cbz	r1, 246d2 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2468a:	4e33      	ldr	r6, [pc, #204]	; (24758 <nrfx_gpiote_output_configure+0xd8>)
   2468c:	f100 0708 	add.w	r7, r0, #8
   24690:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   24694:	0793      	lsls	r3, r2, #30
   24696:	d403      	bmi.n	246a0 <nrfx_gpiote_output_configure+0x20>
   24698:	f7ff fed6 	bl	24448 <pin_in_use_by_te>
   2469c:	2800      	cmp	r0, #0
   2469e:	d158      	bne.n	24752 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   246a0:	f012 0f1c 	tst.w	r2, #28
   246a4:	d002      	beq.n	246ac <nrfx_gpiote_output_configure+0x2c>
   246a6:	784b      	ldrb	r3, [r1, #1]
   246a8:	2b01      	cmp	r3, #1
   246aa:	d052      	beq.n	24752 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   246ac:	2301      	movs	r3, #1
   246ae:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   246b2:	2300      	movs	r3, #0
   246b4:	e9cd 1300 	strd	r1, r3, [sp]
   246b8:	1c4a      	adds	r2, r1, #1
   246ba:	1c8b      	adds	r3, r1, #2
   246bc:	4620      	mov	r0, r4
   246be:	f10d 010f 	add.w	r1, sp, #15
   246c2:	f00a fced 	bl	2f0a0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   246c6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   246ca:	f043 0303 	orr.w	r3, r3, #3
   246ce:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   246d2:	b915      	cbnz	r5, 246da <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   246d4:	4821      	ldr	r0, [pc, #132]	; (2475c <nrfx_gpiote_output_configure+0xdc>)
}
   246d6:	b005      	add	sp, #20
   246d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   246da:	4e1f      	ldr	r6, [pc, #124]	; (24758 <nrfx_gpiote_output_configure+0xd8>)
   246dc:	f104 0708 	add.w	r7, r4, #8
   246e0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   246e4:	0783      	lsls	r3, r0, #30
   246e6:	d534      	bpl.n	24752 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   246e8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   246ec:	4661      	mov	r1, ip
   246ee:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   246f0:	f020 0020 	bic.w	r0, r0, #32
   246f4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   246f8:	04c0      	lsls	r0, r0, #19
   246fa:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   246fe:	0cc0      	lsrs	r0, r0, #19
   24700:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   24704:	2300      	movs	r3, #0
   24706:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   2470a:	786a      	ldrb	r2, [r5, #1]
   2470c:	2a00      	cmp	r2, #0
   2470e:	d0e1      	beq.n	246d4 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   24710:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   24714:	78ad      	ldrb	r5, [r5, #2]
   24716:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   2471a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2471e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24722:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   24726:	0223      	lsls	r3, r4, #8
   24728:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2472c:	0412      	lsls	r2, r2, #16
   2472e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24732:	ea43 030e 	orr.w	r3, r3, lr
   24736:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   24738:	052a      	lsls	r2, r5, #20
   2473a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2473e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24742:	4313      	orrs	r3, r2
   24744:	f040 0020 	orr.w	r0, r0, #32
   24748:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2474c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   24750:	e7c0      	b.n	246d4 <nrfx_gpiote_output_configure+0x54>
{
   24752:	4803      	ldr	r0, [pc, #12]	; (24760 <nrfx_gpiote_output_configure+0xe0>)
   24754:	e7bf      	b.n	246d6 <nrfx_gpiote_output_configure+0x56>
   24756:	bf00      	nop
   24758:	2000096c 	.word	0x2000096c
   2475c:	0bad0000 	.word	0x0bad0000
   24760:	0bad0004 	.word	0x0bad0004

00024764 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   24764:	4b01      	ldr	r3, [pc, #4]	; (2476c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   24766:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   2476a:	4770      	bx	lr
   2476c:	2000096c 	.word	0x2000096c

00024770 <nrfx_gpiote_channel_get>:
{
   24770:	b508      	push	{r3, lr}
   24772:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   24774:	f7ff fe68 	bl	24448 <pin_in_use_by_te>
   24778:	b138      	cbz	r0, 2478a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2477a:	4b05      	ldr	r3, [pc, #20]	; (24790 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   2477c:	4805      	ldr	r0, [pc, #20]	; (24794 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2477e:	3208      	adds	r2, #8
   24780:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   24784:	0b5b      	lsrs	r3, r3, #13
   24786:	700b      	strb	r3, [r1, #0]
}
   24788:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2478a:	4803      	ldr	r0, [pc, #12]	; (24798 <nrfx_gpiote_channel_get+0x28>)
   2478c:	e7fc      	b.n	24788 <nrfx_gpiote_channel_get+0x18>
   2478e:	bf00      	nop
   24790:	2000096c 	.word	0x2000096c
   24794:	0bad0000 	.word	0x0bad0000
   24798:	0bad0004 	.word	0x0bad0004

0002479c <nrfx_gpiote_init>:
{
   2479c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2479e:	4c0f      	ldr	r4, [pc, #60]	; (247dc <nrfx_gpiote_init+0x40>)
   247a0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   247a4:	b9bd      	cbnz	r5, 247d6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   247a6:	2260      	movs	r2, #96	; 0x60
   247a8:	4629      	mov	r1, r5
   247aa:	f104 0010 	add.w	r0, r4, #16
   247ae:	f007 fda1 	bl	2c2f4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   247b2:	2006      	movs	r0, #6
   247b4:	f7f2 fb0c 	bl	16dd0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   247b8:	4b09      	ldr	r3, [pc, #36]	; (247e0 <nrfx_gpiote_init+0x44>)
    return err_code;
   247ba:	480a      	ldr	r0, [pc, #40]	; (247e4 <nrfx_gpiote_init+0x48>)
   247bc:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   247c0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   247c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   247c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   247cc:	2301      	movs	r3, #1
   247ce:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   247d2:	6763      	str	r3, [r4, #116]	; 0x74
}
   247d4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   247d6:	4804      	ldr	r0, [pc, #16]	; (247e8 <nrfx_gpiote_init+0x4c>)
   247d8:	e7fc      	b.n	247d4 <nrfx_gpiote_init+0x38>
   247da:	bf00      	nop
   247dc:	2000096c 	.word	0x2000096c
   247e0:	40006000 	.word	0x40006000
   247e4:	0bad0000 	.word	0x0bad0000
   247e8:	0bad0005 	.word	0x0bad0005

000247ec <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   247ec:	4b03      	ldr	r3, [pc, #12]	; (247fc <nrfx_gpiote_is_init+0x10>)
   247ee:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   247f2:	3800      	subs	r0, #0
   247f4:	bf18      	it	ne
   247f6:	2001      	movne	r0, #1
   247f8:	4770      	bx	lr
   247fa:	bf00      	nop
   247fc:	2000096c 	.word	0x2000096c

00024800 <nrfx_gpiote_channel_free>:
{
   24800:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   24802:	4801      	ldr	r0, [pc, #4]	; (24808 <nrfx_gpiote_channel_free+0x8>)
   24804:	f7ff bdf2 	b.w	243ec <nrfx_flag32_free>
   24808:	200009dc 	.word	0x200009dc

0002480c <nrfx_gpiote_channel_alloc>:
{
   2480c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2480e:	4801      	ldr	r0, [pc, #4]	; (24814 <nrfx_gpiote_channel_alloc+0x8>)
   24810:	f7ff bdcc 	b.w	243ac <nrfx_flag32_alloc>
   24814:	200009dc 	.word	0x200009dc

00024818 <nrfx_gpiote_trigger_enable>:
{
   24818:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2481a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2481c:	f7ff fe14 	bl	24448 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   24820:	f104 0208 	add.w	r2, r4, #8
   24824:	4b1e      	ldr	r3, [pc, #120]	; (248a0 <nrfx_gpiote_trigger_enable+0x88>)
   24826:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2482a:	b1e8      	cbz	r0, 24868 <nrfx_gpiote_trigger_enable+0x50>
   2482c:	f013 0502 	ands.w	r5, r3, #2
   24830:	d11a      	bne.n	24868 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   24832:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   24834:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   24836:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   2483a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   2483e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   24842:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24846:	6005      	str	r5, [r0, #0]
   24848:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2484a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2484e:	f040 0001 	orr.w	r0, r0, #1
   24852:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   24856:	b129      	cbz	r1, 24864 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   24858:	2201      	movs	r2, #1
   2485a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   2485e:	4a11      	ldr	r2, [pc, #68]	; (248a4 <nrfx_gpiote_trigger_enable+0x8c>)
   24860:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   24864:	b003      	add	sp, #12
   24866:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   24868:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2486c:	2b04      	cmp	r3, #4
   2486e:	d012      	beq.n	24896 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   24870:	2b05      	cmp	r3, #5
   24872:	d012      	beq.n	2489a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24874:	a801      	add	r0, sp, #4
   24876:	9401      	str	r4, [sp, #4]
   24878:	f7ff fdd8 	bl	2442c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2487c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   2487e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   24882:	40d9      	lsrs	r1, r3
   24884:	f001 0101 	and.w	r1, r1, #1
   24888:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2488a:	4620      	mov	r0, r4
}
   2488c:	b003      	add	sp, #12
   2488e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   24892:	f00a bc4e 	b.w	2f132 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   24896:	2103      	movs	r1, #3
   24898:	e7f7      	b.n	2488a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2489a:	2102      	movs	r1, #2
   2489c:	e7f5      	b.n	2488a <nrfx_gpiote_trigger_enable+0x72>
   2489e:	bf00      	nop
   248a0:	2000096c 	.word	0x2000096c
   248a4:	40006000 	.word	0x40006000

000248a8 <nrfx_gpiote_trigger_disable>:
{
   248a8:	b508      	push	{r3, lr}
   248aa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   248ac:	f7ff fdcc 	bl	24448 <pin_in_use_by_te>
   248b0:	b1c0      	cbz	r0, 248e4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   248b2:	f102 0108 	add.w	r1, r2, #8
   248b6:	4b0e      	ldr	r3, [pc, #56]	; (248f0 <nrfx_gpiote_trigger_disable+0x48>)
   248b8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   248bc:	0799      	lsls	r1, r3, #30
   248be:	d411      	bmi.n	248e4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   248c0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   248c2:	2201      	movs	r2, #1
   248c4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   248c6:	009b      	lsls	r3, r3, #2
   248c8:	490a      	ldr	r1, [pc, #40]	; (248f4 <nrfx_gpiote_trigger_disable+0x4c>)
   248ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   248ce:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   248d2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   248d6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   248da:	f022 0203 	bic.w	r2, r2, #3
   248de:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   248e2:	bd08      	pop	{r3, pc}
   248e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   248e8:	2100      	movs	r1, #0
   248ea:	4610      	mov	r0, r2
   248ec:	f00a bc21 	b.w	2f132 <nrf_gpio_cfg_sense_set>
   248f0:	2000096c 	.word	0x2000096c
   248f4:	40006000 	.word	0x40006000

000248f8 <nrfx_gpiote_pin_uninit>:
{
   248f8:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   248fa:	4b0e      	ldr	r3, [pc, #56]	; (24934 <nrfx_gpiote_pin_uninit+0x3c>)
   248fc:	f100 0208 	add.w	r2, r0, #8
{
   24900:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   24902:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   24906:	07db      	lsls	r3, r3, #31
   24908:	d511      	bpl.n	2492e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   2490a:	f7ff ffcd 	bl	248a8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2490e:	4620      	mov	r0, r4
   24910:	f7ff fdec 	bl	244ec <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24914:	a801      	add	r0, sp, #4
   24916:	9401      	str	r4, [sp, #4]
   24918:	f7ff fd88 	bl	2442c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2491c:	9b01      	ldr	r3, [sp, #4]
   2491e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   24922:	2202      	movs	r2, #2
   24924:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   24928:	4803      	ldr	r0, [pc, #12]	; (24938 <nrfx_gpiote_pin_uninit+0x40>)
}
   2492a:	b002      	add	sp, #8
   2492c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2492e:	4803      	ldr	r0, [pc, #12]	; (2493c <nrfx_gpiote_pin_uninit+0x44>)
   24930:	e7fb      	b.n	2492a <nrfx_gpiote_pin_uninit+0x32>
   24932:	bf00      	nop
   24934:	2000096c 	.word	0x2000096c
   24938:	0bad0000 	.word	0x0bad0000
   2493c:	0bad0004 	.word	0x0bad0004

00024940 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   24940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24944:	4b68      	ldr	r3, [pc, #416]	; (24ae8 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   24946:	4869      	ldr	r0, [pc, #420]	; (24aec <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   24948:	4969      	ldr	r1, [pc, #420]	; (24af0 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   2494a:	2600      	movs	r6, #0
{
   2494c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   2494e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24950:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24952:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   24954:	b135      	cbz	r5, 24964 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   24956:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   2495a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2495c:	bf1e      	ittt	ne
   2495e:	601c      	strne	r4, [r3, #0]
   24960:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   24962:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   24964:	3304      	adds	r3, #4
   24966:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   24968:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2496c:	d1f1      	bne.n	24952 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2496e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 24aec <nrfx_gpiote_irq_handler+0x1ac>
   24972:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   24976:	2b00      	cmp	r3, #0
   24978:	f000 8099 	beq.w	24aae <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   2497c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   24980:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   24984:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   24986:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2498a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   2498e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   24990:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   24994:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   24998:	f10d 0a10 	add.w	sl, sp, #16
   2499c:	ea4f 1348 	mov.w	r3, r8, lsl #5
   249a0:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   249a2:	f04f 0b01 	mov.w	fp, #1
   249a6:	e049      	b.n	24a3c <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   249a8:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   249aa:	4a52      	ldr	r2, [pc, #328]	; (24af4 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   249ac:	fa94 f4a4 	rbit	r4, r4
   249b0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   249b4:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   249b6:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   249b8:	f104 0308 	add.w	r3, r4, #8
   249bc:	9403      	str	r4, [sp, #12]
   249be:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   249c2:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   249c6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   249ca:	fa0b f202 	lsl.w	r2, fp, r2
   249ce:	ea23 0302 	bic.w	r3, r3, r2
   249d2:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   249d6:	a803      	add	r0, sp, #12
   249d8:	f7ff fd28 	bl	2442c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   249dc:	9b03      	ldr	r3, [sp, #12]
   249de:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   249e2:	08b9      	lsrs	r1, r7, #2
   249e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   249e8:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   249ec:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   249ee:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   249f0:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   249f4:	d52c      	bpl.n	24a50 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   249f6:	4620      	mov	r0, r4
   249f8:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   249fa:	b2dd      	uxtb	r5, r3
   249fc:	f7ff fd2e 	bl	2445c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24a00:	a803      	add	r0, sp, #12
   24a02:	9403      	str	r4, [sp, #12]
   24a04:	f7ff fd12 	bl	2442c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   24a08:	9b03      	ldr	r3, [sp, #12]
   24a0a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   24a0e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   24a12:	f3c3 4301 	ubfx	r3, r3, #16, #2
   24a16:	429d      	cmp	r5, r3
   24a18:	d107      	bne.n	24a2a <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   24a1a:	2100      	movs	r1, #0
   24a1c:	4620      	mov	r0, r4
   24a1e:	f00a fb88 	bl	2f132 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   24a22:	4629      	mov	r1, r5
   24a24:	4620      	mov	r0, r4
   24a26:	f00a fb84 	bl	2f132 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24a2a:	a803      	add	r0, sp, #12
   24a2c:	9403      	str	r4, [sp, #12]
   24a2e:	f7ff fcfd 	bl	2442c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   24a32:	9b03      	ldr	r3, [sp, #12]
   24a34:	fa0b f303 	lsl.w	r3, fp, r3
   24a38:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   24a3c:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   24a40:	2c00      	cmp	r4, #0
   24a42:	d1b1      	bne.n	249a8 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   24a44:	f1b8 0f00 	cmp.w	r8, #0
   24a48:	d11d      	bne.n	24a86 <nrfx_gpiote_irq_handler+0x146>
   24a4a:	f04f 0801 	mov.w	r8, #1
   24a4e:	e7a5      	b.n	2499c <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   24a50:	2b02      	cmp	r3, #2
   24a52:	d10c      	bne.n	24a6e <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   24a54:	2103      	movs	r1, #3
   24a56:	4620      	mov	r0, r4
   24a58:	f00a fb6b 	bl	2f132 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   24a5c:	f005 0305 	and.w	r3, r5, #5
   24a60:	2b01      	cmp	r3, #1
   24a62:	d1e2      	bne.n	24a2a <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   24a64:	4639      	mov	r1, r7
   24a66:	4620      	mov	r0, r4
   24a68:	f7ff fcf8 	bl	2445c <call_handler>
   24a6c:	e7dd      	b.n	24a2a <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   24a6e:	2102      	movs	r1, #2
   24a70:	4620      	mov	r0, r4
   24a72:	9301      	str	r3, [sp, #4]
   24a74:	f00a fb5d 	bl	2f132 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   24a78:	2d03      	cmp	r5, #3
   24a7a:	d0f3      	beq.n	24a64 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   24a7c:	9b01      	ldr	r3, [sp, #4]
   24a7e:	2b03      	cmp	r3, #3
   24a80:	d1d3      	bne.n	24a2a <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   24a82:	2d02      	cmp	r5, #2
   24a84:	e7ed      	b.n	24a62 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   24a86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24a8a:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   24a8e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   24a92:	4919      	ldr	r1, [pc, #100]	; (24af8 <nrfx_gpiote_irq_handler+0x1b8>)
   24a94:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   24a98:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   24a9a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   24a9e:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   24aa2:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   24aa4:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   24aa6:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   24aaa:	f47f af73 	bne.w	24994 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   24aae:	2401      	movs	r4, #1
    while (mask)
   24ab0:	b916      	cbnz	r6, 24ab8 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   24ab2:	b007      	add	sp, #28
   24ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   24ab8:	fa96 f3a6 	rbit	r3, r6
   24abc:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   24ac0:	fa04 f203 	lsl.w	r2, r4, r3
   24ac4:	009b      	lsls	r3, r3, #2
   24ac6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24aca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   24ace:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   24ad2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   24ad6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   24ada:	f3c0 2005 	ubfx	r0, r0, #8, #6
   24ade:	f3c1 4101 	ubfx	r1, r1, #16, #2
   24ae2:	f7ff fcbb 	bl	2445c <call_handler>
   24ae6:	e7e3      	b.n	24ab0 <nrfx_gpiote_irq_handler+0x170>
   24ae8:	40006100 	.word	0x40006100
   24aec:	40006000 	.word	0x40006000
   24af0:	40006120 	.word	0x40006120
   24af4:	2000096c 	.word	0x2000096c
   24af8:	50000300 	.word	0x50000300

00024afc <nvmc_word_write>:
   24afc:	4a04      	ldr	r2, [pc, #16]	; (24b10 <nvmc_word_write+0x14>)
   24afe:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   24b02:	07db      	lsls	r3, r3, #31
   24b04:	d5fb      	bpl.n	24afe <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   24b06:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   24b08:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   24b0c:	4770      	bx	lr
   24b0e:	bf00      	nop
   24b10:	4001e000 	.word	0x4001e000

00024b14 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   24b14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24b18:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   24b1a:	fbb0 f3f2 	udiv	r3, r0, r2
   24b1e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   24b22:	b973      	cbnz	r3, 24b42 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   24b24:	4b08      	ldr	r3, [pc, #32]	; (24b48 <nrfx_nvmc_page_erase+0x34>)
   24b26:	2202      	movs	r2, #2
   24b28:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   24b2c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   24b30:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   24b34:	07d2      	lsls	r2, r2, #31
   24b36:	d5fb      	bpl.n	24b30 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   24b38:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   24b3a:	4804      	ldr	r0, [pc, #16]	; (24b4c <nrfx_nvmc_page_erase+0x38>)
   24b3c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   24b40:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   24b42:	4803      	ldr	r0, [pc, #12]	; (24b50 <nrfx_nvmc_page_erase+0x3c>)
}
   24b44:	4770      	bx	lr
   24b46:	bf00      	nop
   24b48:	4001e000 	.word	0x4001e000
   24b4c:	0bad0000 	.word	0x0bad0000
   24b50:	0bad000a 	.word	0x0bad000a

00024b54 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   24b54:	b510      	push	{r4, lr}
   24b56:	4c05      	ldr	r4, [pc, #20]	; (24b6c <nrfx_nvmc_word_write+0x18>)
   24b58:	2301      	movs	r3, #1
   24b5a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   24b5e:	f7ff ffcd 	bl	24afc <nvmc_word_write>
   24b62:	2300      	movs	r3, #0
   24b64:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   24b68:	bd10      	pop	{r4, pc}
   24b6a:	bf00      	nop
   24b6c:	4001e000 	.word	0x4001e000

00024b70 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   24b70:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   24b72:	4c18      	ldr	r4, [pc, #96]	; (24bd4 <nrfx_power_init+0x64>)
   24b74:	7823      	ldrb	r3, [r4, #0]
   24b76:	bb53      	cbnz	r3, 24bce <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   24b78:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   24b7a:	f3c2 0340 	ubfx	r3, r2, #1, #1
   24b7e:	0792      	lsls	r2, r2, #30
   24b80:	d512      	bpl.n	24ba8 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   24b82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   24b86:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   24b8a:	2a08      	cmp	r2, #8
   24b8c:	d10b      	bne.n	24ba6 <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   24b8e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   24b92:	2b05      	cmp	r3, #5
   24b94:	d807      	bhi.n	24ba6 <nrfx_power_init+0x36>
   24b96:	4a10      	ldr	r2, [pc, #64]	; (24bd8 <nrfx_power_init+0x68>)
   24b98:	5cd3      	ldrb	r3, [r2, r3]
   24b9a:	b123      	cbz	r3, 24ba6 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   24b9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24ba0:	2201      	movs	r2, #1
   24ba2:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   24ba6:	2301      	movs	r3, #1
   24ba8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   24bac:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
   24bb0:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   24bb2:	f003 0301 	and.w	r3, r3, #1
   24bb6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   24bba:	2000      	movs	r0, #0
   24bbc:	f7f2 f92a 	bl	16e14 <arch_irq_is_enabled>
   24bc0:	b908      	cbnz	r0, 24bc6 <nrfx_power_init+0x56>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   24bc2:	f7f2 f905 	bl	16dd0 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   24bc6:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   24bc8:	4804      	ldr	r0, [pc, #16]	; (24bdc <nrfx_power_init+0x6c>)
    m_initialized = true;
   24bca:	7023      	strb	r3, [r4, #0]
}
   24bcc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   24bce:	4804      	ldr	r0, [pc, #16]	; (24be0 <nrfx_power_init+0x70>)
   24bd0:	e7fc      	b.n	24bcc <nrfx_power_init+0x5c>
   24bd2:	bf00      	nop
   24bd4:	200057f2 	.word	0x200057f2
   24bd8:	00033e24 	.word	0x00033e24
   24bdc:	0bad0000 	.word	0x0bad0000
   24be0:	0bad000c 	.word	0x0bad000c

00024be4 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   24be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24be8:	f44f 7260 	mov.w	r2, #896	; 0x380
   24bec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   24bf0:	4b01      	ldr	r3, [pc, #4]	; (24bf8 <nrfx_power_usbevt_uninit+0x14>)
   24bf2:	2200      	movs	r2, #0
   24bf4:	601a      	str	r2, [r3, #0]
}
   24bf6:	4770      	bx	lr
   24bf8:	20004840 	.word	0x20004840

00024bfc <nrfx_power_usbevt_init>:
{
   24bfc:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   24bfe:	f7ff fff1 	bl	24be4 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   24c02:	6803      	ldr	r3, [r0, #0]
   24c04:	b10b      	cbz	r3, 24c0a <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   24c06:	4a01      	ldr	r2, [pc, #4]	; (24c0c <nrfx_power_usbevt_init+0x10>)
   24c08:	6013      	str	r3, [r2, #0]
}
   24c0a:	bd08      	pop	{r3, pc}
   24c0c:	20004840 	.word	0x20004840

00024c10 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   24c10:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
   24c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24c16:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   24c1a:	0762      	lsls	r2, r4, #29
   24c1c:	d507      	bpl.n	24c2e <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   24c1e:	f44f 7084 	mov.w	r0, #264	; 0x108
   24c22:	f00a faa3 	bl	2f16c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   24c26:	b110      	cbz	r0, 24c2e <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   24c28:	4b1e      	ldr	r3, [pc, #120]	; (24ca4 <nrfx_power_irq_handler+0x94>)
   24c2a:	681b      	ldr	r3, [r3, #0]
   24c2c:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   24c2e:	06a3      	lsls	r3, r4, #26
   24c30:	d508      	bpl.n	24c44 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   24c32:	f44f 708a 	mov.w	r0, #276	; 0x114
   24c36:	f00a fa99 	bl	2f16c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   24c3a:	b118      	cbz	r0, 24c44 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   24c3c:	4b1a      	ldr	r3, [pc, #104]	; (24ca8 <nrfx_power_irq_handler+0x98>)
   24c3e:	2000      	movs	r0, #0
   24c40:	681b      	ldr	r3, [r3, #0]
   24c42:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   24c44:	0660      	lsls	r0, r4, #25
   24c46:	d508      	bpl.n	24c5a <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   24c48:	f44f 708c 	mov.w	r0, #280	; 0x118
   24c4c:	f00a fa8e 	bl	2f16c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   24c50:	b118      	cbz	r0, 24c5a <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   24c52:	4b15      	ldr	r3, [pc, #84]	; (24ca8 <nrfx_power_irq_handler+0x98>)
   24c54:	2001      	movs	r0, #1
   24c56:	681b      	ldr	r3, [r3, #0]
   24c58:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   24c5a:	0621      	lsls	r1, r4, #24
   24c5c:	d508      	bpl.n	24c70 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   24c5e:	f44f 708e 	mov.w	r0, #284	; 0x11c
   24c62:	f00a fa83 	bl	2f16c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   24c66:	b118      	cbz	r0, 24c70 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   24c68:	4b10      	ldr	r3, [pc, #64]	; (24cac <nrfx_power_irq_handler+0x9c>)
   24c6a:	2000      	movs	r0, #0
   24c6c:	681b      	ldr	r3, [r3, #0]
   24c6e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   24c70:	05e2      	lsls	r2, r4, #23
   24c72:	d508      	bpl.n	24c86 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   24c74:	f44f 7090 	mov.w	r0, #288	; 0x120
   24c78:	f00a fa78 	bl	2f16c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   24c7c:	b118      	cbz	r0, 24c86 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   24c7e:	4b0b      	ldr	r3, [pc, #44]	; (24cac <nrfx_power_irq_handler+0x9c>)
   24c80:	2001      	movs	r0, #1
   24c82:	681b      	ldr	r3, [r3, #0]
   24c84:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   24c86:	05a3      	lsls	r3, r4, #22
   24c88:	d50a      	bpl.n	24ca0 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   24c8a:	f44f 7092 	mov.w	r0, #292	; 0x124
   24c8e:	f00a fa6d 	bl	2f16c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   24c92:	b128      	cbz	r0, 24ca0 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   24c94:	4b05      	ldr	r3, [pc, #20]	; (24cac <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   24c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   24c9a:	681b      	ldr	r3, [r3, #0]
   24c9c:	2002      	movs	r0, #2
   24c9e:	4718      	bx	r3
}
   24ca0:	bd10      	pop	{r4, pc}
   24ca2:	bf00      	nop
   24ca4:	20004848 	.word	0x20004848
   24ca8:	20004844 	.word	0x20004844
   24cac:	20004840 	.word	0x20004840

00024cb0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   24cb0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   24cb2:	4801      	ldr	r0, [pc, #4]	; (24cb8 <nrfx_ppi_channel_alloc+0x8>)
   24cb4:	f7ff bb7a 	b.w	243ac <nrfx_flag32_alloc>
   24cb8:	200009e8 	.word	0x200009e8

00024cbc <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   24cbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   24cc0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   24cc4:	2a08      	cmp	r2, #8
   24cc6:	d106      	bne.n	24cd6 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   24cc8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   24ccc:	2b05      	cmp	r3, #5
   24cce:	d804      	bhi.n	24cda <nrf52_errata_187+0x1e>
   24cd0:	4a03      	ldr	r2, [pc, #12]	; (24ce0 <nrf52_errata_187+0x24>)
   24cd2:	5cd0      	ldrb	r0, [r2, r3]
   24cd4:	4770      	bx	lr
                        return false;
   24cd6:	2000      	movs	r0, #0
   24cd8:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   24cda:	2001      	movs	r0, #1
}
   24cdc:	4770      	bx	lr
   24cde:	bf00      	nop
   24ce0:	00033e33 	.word	0x00033e33

00024ce4 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24ce4:	4b05      	ldr	r3, [pc, #20]	; (24cfc <ep_state_access+0x18>)
   24ce6:	f010 0f80 	tst.w	r0, #128	; 0x80
   24cea:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   24cee:	bf08      	it	eq
   24cf0:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   24cf2:	f000 000f 	and.w	r0, r0, #15
}
   24cf6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   24cfa:	4770      	bx	lr
   24cfc:	200049f4 	.word	0x200049f4

00024d00 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   24d00:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   24d02:	4a07      	ldr	r2, [pc, #28]	; (24d20 <ev_usbreset_handler+0x20>)
   24d04:	2300      	movs	r3, #0
   24d06:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   24d08:	4a06      	ldr	r2, [pc, #24]	; (24d24 <ev_usbreset_handler+0x24>)
   24d0a:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   24d0c:	2301      	movs	r3, #1
   24d0e:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   24d10:	4b05      	ldr	r3, [pc, #20]	; (24d28 <ev_usbreset_handler+0x28>)
   24d12:	a801      	add	r0, sp, #4
   24d14:	681b      	ldr	r3, [r3, #0]
   24d16:	4798      	blx	r3
}
   24d18:	b003      	add	sp, #12
   24d1a:	f85d fb04 	ldr.w	pc, [sp], #4
   24d1e:	bf00      	nop
   24d20:	200057f5 	.word	0x200057f5
   24d24:	200057f4 	.word	0x200057f4
   24d28:	20004a8c 	.word	0x20004a8c

00024d2c <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   24d2c:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
   24d2e:	4b19      	ldr	r3, [pc, #100]	; (24d94 <ev_usbevent_handler+0x68>)
   24d30:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   24d34:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   24d38:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   24d3a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   24d3e:	d508      	bpl.n	24d52 <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   24d40:	4b15      	ldr	r3, [pc, #84]	; (24d98 <ev_usbevent_handler+0x6c>)
   24d42:	2201      	movs	r2, #1
   24d44:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   24d46:	2302      	movs	r3, #2
   24d48:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   24d4a:	4b14      	ldr	r3, [pc, #80]	; (24d9c <ev_usbevent_handler+0x70>)
   24d4c:	a801      	add	r0, sp, #4
   24d4e:	681b      	ldr	r3, [r3, #0]
   24d50:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   24d52:	05a2      	lsls	r2, r4, #22
   24d54:	d508      	bpl.n	24d68 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   24d56:	4b10      	ldr	r3, [pc, #64]	; (24d98 <ev_usbevent_handler+0x6c>)
   24d58:	2200      	movs	r2, #0
   24d5a:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   24d5c:	2303      	movs	r3, #3
   24d5e:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   24d60:	4b0e      	ldr	r3, [pc, #56]	; (24d9c <ev_usbevent_handler+0x70>)
   24d62:	a801      	add	r0, sp, #4
   24d64:	681b      	ldr	r3, [r3, #0]
   24d66:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   24d68:	0563      	lsls	r3, r4, #21
   24d6a:	d510      	bpl.n	24d8e <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   24d6c:	4b0a      	ldr	r3, [pc, #40]	; (24d98 <ev_usbevent_handler+0x6c>)
   24d6e:	781a      	ldrb	r2, [r3, #0]
   24d70:	b16a      	cbz	r2, 24d8e <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   24d72:	2200      	movs	r2, #0
   24d74:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   24d76:	4b07      	ldr	r3, [pc, #28]	; (24d94 <ev_usbevent_handler+0x68>)
   24d78:	2201      	movs	r2, #1
   24d7a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   24d7e:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   24d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   24d82:	2304      	movs	r3, #4
   24d84:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   24d86:	4b05      	ldr	r3, [pc, #20]	; (24d9c <ev_usbevent_handler+0x70>)
   24d88:	a801      	add	r0, sp, #4
   24d8a:	681b      	ldr	r3, [r3, #0]
   24d8c:	4798      	blx	r3
        }
    }
}
   24d8e:	b002      	add	sp, #8
   24d90:	bd10      	pop	{r4, pc}
   24d92:	bf00      	nop
   24d94:	40027000 	.word	0x40027000
   24d98:	200057f5 	.word	0x200057f5
   24d9c:	20004a8c 	.word	0x20004a8c

00024da0 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   24da0:	f04f 0340 	mov.w	r3, #64	; 0x40
   24da4:	f3ef 8011 	mrs	r0, BASEPRI
   24da8:	f383 8812 	msr	BASEPRI_MAX, r3
   24dac:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   24db0:	4b0a      	ldr	r3, [pc, #40]	; (24ddc <usbd_errata_187_211_begin+0x3c>)
   24db2:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   24db6:	2203      	movs	r2, #3
   24db8:	b961      	cbnz	r1, 24dd4 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   24dba:	f249 3175 	movw	r1, #37749	; 0x9375
   24dbe:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   24dc2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   24dc6:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   24dca:	f380 8811 	msr	BASEPRI, r0
   24dce:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   24dd2:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   24dd4:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   24dd8:	e7f7      	b.n	24dca <usbd_errata_187_211_begin+0x2a>
   24dda:	bf00      	nop
   24ddc:	4006e000 	.word	0x4006e000

00024de0 <usbd_errata_187_211_end>:
	__asm__ volatile(
   24de0:	f04f 0340 	mov.w	r3, #64	; 0x40
   24de4:	f3ef 8011 	mrs	r0, BASEPRI
   24de8:	f383 8812 	msr	BASEPRI_MAX, r3
   24dec:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   24df0:	4b0a      	ldr	r3, [pc, #40]	; (24e1c <usbd_errata_187_211_end+0x3c>)
   24df2:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   24df6:	b961      	cbnz	r1, 24e12 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   24df8:	f249 3275 	movw	r2, #37749	; 0x9375
   24dfc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   24e00:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   24e04:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   24e08:	f380 8811 	msr	BASEPRI, r0
   24e0c:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   24e10:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   24e12:	2200      	movs	r2, #0
   24e14:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   24e18:	e7f6      	b.n	24e08 <usbd_errata_187_211_end+0x28>
   24e1a:	bf00      	nop
   24e1c:	4006e000 	.word	0x4006e000

00024e20 <nrfx_usbd_feeder_flash>:
{
   24e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24e22:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   24e24:	4f0b      	ldr	r7, [pc, #44]	; (24e54 <nrfx_usbd_feeder_flash+0x34>)
   24e26:	429a      	cmp	r2, r3
   24e28:	bf28      	it	cs
   24e2a:	461a      	movcs	r2, r3
{
   24e2c:	460c      	mov	r4, r1
   24e2e:	4615      	mov	r5, r2
   24e30:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   24e32:	6809      	ldr	r1, [r1, #0]
   24e34:	4638      	mov	r0, r7
   24e36:	f007 fa52 	bl	2c2de <memcpy>
    p_next->size = tx_size;
   24e3a:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
   24e3e:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   24e40:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
   24e42:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
   24e44:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
   24e46:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   24e48:	6023      	str	r3, [r4, #0]
}
   24e4a:	3800      	subs	r0, #0
   24e4c:	bf18      	it	ne
   24e4e:	2001      	movne	r0, #1
   24e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24e52:	bf00      	nop
   24e54:	2000484c 	.word	0x2000484c

00024e58 <nrfx_usbd_feeder_flash_zlp>:
{
   24e58:	b570      	push	{r4, r5, r6, lr}
   24e5a:	684b      	ldr	r3, [r1, #4]
   24e5c:	429a      	cmp	r2, r3
   24e5e:	bf28      	it	cs
   24e60:	461a      	movcs	r2, r3
   24e62:	4606      	mov	r6, r0
   24e64:	460d      	mov	r5, r1
   24e66:	4614      	mov	r4, r2
    if (tx_size != 0)
   24e68:	b182      	cbz	r2, 24e8c <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   24e6a:	6809      	ldr	r1, [r1, #0]
   24e6c:	4808      	ldr	r0, [pc, #32]	; (24e90 <nrfx_usbd_feeder_flash_zlp+0x38>)
   24e6e:	f007 fa36 	bl	2c2de <memcpy>
        p_next->p_data.tx = p_buffer;
   24e72:	4b07      	ldr	r3, [pc, #28]	; (24e90 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
   24e74:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
   24e78:	686b      	ldr	r3, [r5, #4]
   24e7a:	1b1b      	subs	r3, r3, r4
   24e7c:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   24e7e:	682b      	ldr	r3, [r5, #0]
   24e80:	4423      	add	r3, r4
}
   24e82:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   24e84:	602b      	str	r3, [r5, #0]
}
   24e86:	bf18      	it	ne
   24e88:	2001      	movne	r0, #1
   24e8a:	bd70      	pop	{r4, r5, r6, pc}
   24e8c:	4613      	mov	r3, r2
   24e8e:	e7f1      	b.n	24e74 <nrfx_usbd_feeder_flash_zlp+0x1c>
   24e90:	2000484c 	.word	0x2000484c

00024e94 <ev_sof_handler>:
{
   24e94:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   24e96:	2300      	movs	r3, #0
   24e98:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   24e9c:	4b0b      	ldr	r3, [pc, #44]	; (24ecc <ev_sof_handler+0x38>)
   24e9e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   24ea2:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   24ea6:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   24eaa:	4a09      	ldr	r2, [pc, #36]	; (24ed0 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   24eac:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   24eae:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   24eb0:	bf14      	ite	ne
   24eb2:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
   24eb6:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
   24eba:	430b      	orrs	r3, r1
   24ebc:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   24ebe:	4b05      	ldr	r3, [pc, #20]	; (24ed4 <ev_sof_handler+0x40>)
   24ec0:	a801      	add	r0, sp, #4
   24ec2:	681b      	ldr	r3, [r3, #0]
   24ec4:	4798      	blx	r3
}
   24ec6:	b003      	add	sp, #12
   24ec8:	f85d fb04 	ldr.w	pc, [sp], #4
   24ecc:	40027000 	.word	0x40027000
   24ed0:	20004a88 	.word	0x20004a88
   24ed4:	20004a8c 	.word	0x20004a8c

00024ed8 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24ed8:	4b06      	ldr	r3, [pc, #24]	; (24ef4 <atomic_and.constprop.0.isra.0+0x1c>)
   24eda:	f3bf 8f5b 	dmb	ish
   24ede:	e853 1f00 	ldrex	r1, [r3]
   24ee2:	4001      	ands	r1, r0
   24ee4:	e843 1200 	strex	r2, r1, [r3]
   24ee8:	2a00      	cmp	r2, #0
   24eea:	d1f8      	bne.n	24ede <atomic_and.constprop.0.isra.0+0x6>
   24eec:	f3bf 8f5b 	dmb	ish
}
   24ef0:	4770      	bx	lr
   24ef2:	bf00      	nop
   24ef4:	20004a84 	.word	0x20004a84

00024ef8 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   24ef8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   24efc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   24f00:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   24f02:	bf02      	ittt	eq
   24f04:	4b03      	ldreq	r3, [pc, #12]	; (24f14 <usbd_dma_pending_clear+0x1c>)
   24f06:	2200      	moveq	r2, #0
   24f08:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
   24f0c:	4b02      	ldr	r3, [pc, #8]	; (24f18 <usbd_dma_pending_clear+0x20>)
   24f0e:	2200      	movs	r2, #0
   24f10:	701a      	strb	r2, [r3, #0]
}
   24f12:	4770      	bx	lr
   24f14:	40027000 	.word	0x40027000
   24f18:	200057f3 	.word	0x200057f3

00024f1c <nrf_usbd_ep0in_dma_handler>:
{
   24f1c:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   24f1e:	f7ff ffeb 	bl	24ef8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   24f22:	4b08      	ldr	r3, [pc, #32]	; (24f44 <nrf_usbd_ep0in_dma_handler+0x28>)
   24f24:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   24f28:	2a03      	cmp	r2, #3
   24f2a:	d105      	bne.n	24f38 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   24f2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   24f30:	f06f 0001 	mvn.w	r0, #1
   24f34:	f7ff bfd0 	b.w	24ed8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   24f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   24f3c:	2b00      	cmp	r3, #0
   24f3e:	d0f5      	beq.n	24f2c <nrf_usbd_ep0in_dma_handler+0x10>
}
   24f40:	bd08      	pop	{r3, pc}
   24f42:	bf00      	nop
   24f44:	20004964 	.word	0x20004964

00024f48 <usbd_ep_data_handler>:
{
   24f48:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   24f4a:	2201      	movs	r2, #1
   24f4c:	fa02 f501 	lsl.w	r5, r2, r1
   24f50:	491c      	ldr	r1, [pc, #112]	; (24fc4 <usbd_ep_data_handler+0x7c>)
   24f52:	4e1d      	ldr	r6, [pc, #116]	; (24fc8 <usbd_ep_data_handler+0x80>)
   24f54:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   24f56:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   24f5a:	ea43 0305 	orr.w	r3, r3, r5
{
   24f5e:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   24f60:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   24f62:	d024      	beq.n	24fae <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   24f64:	f000 020f 	and.w	r2, r0, #15
   24f68:	4b18      	ldr	r3, [pc, #96]	; (24fcc <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   24f6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   24f6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24f72:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   24f76:	681a      	ldr	r2, [r3, #0]
    if (ret)
   24f78:	b132      	cbz	r2, 24f88 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   24f7a:	2200      	movs	r2, #0
   24f7c:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   24f7e:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   24f80:	681b      	ldr	r3, [r3, #0]
   24f82:	d011      	beq.n	24fa8 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   24f84:	f00a f95a 	bl	2f23c <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   24f88:	6833      	ldr	r3, [r6, #0]
   24f8a:	402b      	ands	r3, r5
   24f8c:	d10a      	bne.n	24fa4 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   24f8e:	2206      	movs	r2, #6
   24f90:	f88d 2004 	strb.w	r2, [sp, #4]
   24f94:	f88d 4006 	strb.w	r4, [sp, #6]
   24f98:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   24f9c:	4b0c      	ldr	r3, [pc, #48]	; (24fd0 <usbd_ep_data_handler+0x88>)
   24f9e:	a801      	add	r0, sp, #4
   24fa0:	681b      	ldr	r3, [r3, #0]
   24fa2:	4798      	blx	r3
}
   24fa4:	b002      	add	sp, #8
   24fa6:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   24fa8:	f7ff ffb8 	bl	24f1c <nrf_usbd_ep0in_dma_handler>
   24fac:	e7ec      	b.n	24f88 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   24fae:	6833      	ldr	r3, [r6, #0]
   24fb0:	421d      	tst	r5, r3
   24fb2:	d1f7      	bne.n	24fa4 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   24fb4:	2306      	movs	r3, #6
   24fb6:	f88d 3004 	strb.w	r3, [sp, #4]
   24fba:	f88d 0006 	strb.w	r0, [sp, #6]
   24fbe:	f88d 2007 	strb.w	r2, [sp, #7]
   24fc2:	e7eb      	b.n	24f9c <usbd_ep_data_handler+0x54>
   24fc4:	20004a88 	.word	0x20004a88
   24fc8:	20004a84 	.word	0x20004a84
   24fcc:	00030fc2 	.word	0x00030fc2
   24fd0:	20004a8c 	.word	0x20004a8c

00024fd4 <ev_setup_data_handler>:
{
   24fd4:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   24fd6:	4b05      	ldr	r3, [pc, #20]	; (24fec <ev_setup_data_handler+0x18>)
   24fd8:	781a      	ldrb	r2, [r3, #0]
   24fda:	4610      	mov	r0, r2
   24fdc:	f00a f925 	bl	2f22a <ep2bit>
}
   24fe0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   24fe4:	4601      	mov	r1, r0
   24fe6:	4610      	mov	r0, r2
   24fe8:	f7ff bfae 	b.w	24f48 <usbd_ep_data_handler>
   24fec:	200057f4 	.word	0x200057f4

00024ff0 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   24ff0:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   24ff2:	f7ff ff81 	bl	24ef8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   24ff6:	4b0c      	ldr	r3, [pc, #48]	; (25028 <ev_dma_epout8_handler+0x38>)
   24ff8:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   24ffc:	2a03      	cmp	r2, #3
   24ffe:	d010      	beq.n	25022 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   25000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   25004:	b96b      	cbnz	r3, 25022 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   25006:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   2500a:	f7ff ff65 	bl	24ed8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2500e:	2306      	movs	r3, #6
   25010:	f88d 3004 	strb.w	r3, [sp, #4]
   25014:	2308      	movs	r3, #8
   25016:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   2501a:	4b04      	ldr	r3, [pc, #16]	; (2502c <ev_dma_epout8_handler+0x3c>)
   2501c:	a801      	add	r0, sp, #4
   2501e:	681b      	ldr	r3, [r3, #0]
   25020:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   25022:	b003      	add	sp, #12
   25024:	f85d fb04 	ldr.w	pc, [sp], #4
   25028:	20004964 	.word	0x20004964
   2502c:	20004a8c 	.word	0x20004a8c

00025030 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   25030:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   25032:	f7ff ff61 	bl	24ef8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   25036:	4b10      	ldr	r3, [pc, #64]	; (25078 <ev_dma_epin8_handler+0x48>)
   25038:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   2503c:	2a03      	cmp	r2, #3
   2503e:	d106      	bne.n	2504e <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   25040:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   25044:	b003      	add	sp, #12
   25046:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2504a:	f7ff bf45 	b.w	24ed8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2504e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   25052:	b96b      	cbnz	r3, 25070 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   25054:	f46f 7080 	mvn.w	r0, #256	; 0x100
   25058:	f7ff ff3e 	bl	24ed8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2505c:	2306      	movs	r3, #6
   2505e:	f88d 3004 	strb.w	r3, [sp, #4]
   25062:	2388      	movs	r3, #136	; 0x88
   25064:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   25068:	4b04      	ldr	r3, [pc, #16]	; (2507c <ev_dma_epin8_handler+0x4c>)
   2506a:	a801      	add	r0, sp, #4
   2506c:	681b      	ldr	r3, [r3, #0]
   2506e:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   25070:	b003      	add	sp, #12
   25072:	f85d fb04 	ldr.w	pc, [sp], #4
   25076:	bf00      	nop
   25078:	20004964 	.word	0x20004964
   2507c:	20004a8c 	.word	0x20004a8c

00025080 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   25080:	4a02      	ldr	r2, [pc, #8]	; (2508c <nrfx_usbd_uninit+0xc>)
   25082:	2300      	movs	r3, #0
   25084:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   25086:	4a02      	ldr	r2, [pc, #8]	; (25090 <nrfx_usbd_uninit+0x10>)
   25088:	7013      	strb	r3, [r2, #0]
    return;
}
   2508a:	4770      	bx	lr
   2508c:	20004a8c 	.word	0x20004a8c
   25090:	200057f6 	.word	0x200057f6

00025094 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   25094:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   25096:	4b4c      	ldr	r3, [pc, #304]	; (251c8 <nrfx_usbd_enable+0x134>)
   25098:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2509c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   250a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   250a4:	f7ff fe0a 	bl	24cbc <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   250a8:	b108      	cbz	r0, 250ae <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   250aa:	f7ff fe79 	bl	24da0 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   250ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   250b2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   250b6:	2b08      	cmp	r3, #8
   250b8:	d119      	bne.n	250ee <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
   250ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   250be:	f3ef 8011 	mrs	r0, BASEPRI
   250c2:	f383 8812 	msr	BASEPRI_MAX, r3
   250c6:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   250ca:	4b40      	ldr	r3, [pc, #256]	; (251cc <nrfx_usbd_enable+0x138>)
   250cc:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   250d0:	22c0      	movs	r2, #192	; 0xc0
   250d2:	2900      	cmp	r1, #0
   250d4:	d170      	bne.n	251b8 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   250d6:	f249 3175 	movw	r1, #37749	; 0x9375
   250da:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   250de:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   250e2:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   250e6:	f380 8811 	msr	BASEPRI, r0
   250ea:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   250ee:	4b36      	ldr	r3, [pc, #216]	; (251c8 <nrfx_usbd_enable+0x134>)
   250f0:	2201      	movs	r2, #1
   250f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   250f6:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   250fa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   250fe:	0512      	lsls	r2, r2, #20
   25100:	d5fb      	bpl.n	250fa <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
   25102:	f44f 6200 	mov.w	r2, #2048	; 0x800
   25106:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   2510a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2510e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   25112:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   25116:	2b08      	cmp	r3, #8
   25118:	d118      	bne.n	2514c <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
   2511a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2511e:	f3ef 8011 	mrs	r0, BASEPRI
   25122:	f383 8812 	msr	BASEPRI_MAX, r3
   25126:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2512a:	4b28      	ldr	r3, [pc, #160]	; (251cc <nrfx_usbd_enable+0x138>)
   2512c:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   25130:	2900      	cmp	r1, #0
   25132:	d144      	bne.n	251be <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   25134:	f249 3275 	movw	r2, #37749	; 0x9375
   25138:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   2513c:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   25140:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   25144:	f380 8811 	msr	BASEPRI, r0
   25148:	f3bf 8f6f 	isb	sy
   2514c:	f7ff fdb6 	bl	24cbc <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   25150:	b130      	cbz	r0, 25160 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
   25152:	f7ff fe45 	bl	24de0 <usbd_errata_187_211_end>
   25156:	f7ff fdb1 	bl	24cbc <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   2515a:	b108      	cbz	r0, 25160 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
   2515c:	f7ff fe20 	bl	24da0 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   25160:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   25164:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   25168:	2b08      	cmp	r3, #8
   2516a:	4b17      	ldr	r3, [pc, #92]	; (251c8 <nrfx_usbd_enable+0x134>)
   2516c:	d10a      	bne.n	25184 <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   2516e:	f240 72e3 	movw	r2, #2019	; 0x7e3
   25172:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   25176:	2240      	movs	r2, #64	; 0x40
   25178:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   2517c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   25180:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   25184:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   25186:	2280      	movs	r2, #128	; 0x80
   25188:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   2518c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   25190:	4b0f      	ldr	r3, [pc, #60]	; (251d0 <nrfx_usbd_enable+0x13c>)
   25192:	f240 12ff 	movw	r2, #511	; 0x1ff
   25196:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   25198:	4b0e      	ldr	r3, [pc, #56]	; (251d4 <nrfx_usbd_enable+0x140>)
   2519a:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   2519c:	f7ff feac 	bl	24ef8 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   251a0:	4b0d      	ldr	r3, [pc, #52]	; (251d8 <nrfx_usbd_enable+0x144>)
   251a2:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   251a4:	4b0d      	ldr	r3, [pc, #52]	; (251dc <nrfx_usbd_enable+0x148>)
   251a6:	2202      	movs	r2, #2
   251a8:	701a      	strb	r2, [r3, #0]
   251aa:	f7ff fd87 	bl	24cbc <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   251ae:	b150      	cbz	r0, 251c6 <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   251b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   251b4:	f7ff be14 	b.w	24de0 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   251b8:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   251bc:	e793      	b.n	250e6 <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   251be:	2200      	movs	r2, #0
   251c0:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   251c4:	e7be      	b.n	25144 <nrfx_usbd_enable+0xb0>
}
   251c6:	bd08      	pop	{r3, pc}
   251c8:	40027000 	.word	0x40027000
   251cc:	4006e000 	.word	0x4006e000
   251d0:	20004a88 	.word	0x20004a88
   251d4:	20004a84 	.word	0x20004a84
   251d8:	200057f4 	.word	0x200057f4
   251dc:	200057f6 	.word	0x200057f6

000251e0 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   251e0:	4b0a      	ldr	r3, [pc, #40]	; (2520c <nrfx_usbd_start+0x2c>)
   251e2:	2200      	movs	r2, #0
{
   251e4:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   251e6:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
   251e8:	4a09      	ldr	r2, [pc, #36]	; (25210 <nrfx_usbd_start+0x30>)
   251ea:	4b0a      	ldr	r3, [pc, #40]	; (25214 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   251ec:	4c0a      	ldr	r4, [pc, #40]	; (25218 <nrfx_usbd_start+0x38>)
   251ee:	2800      	cmp	r0, #0
   251f0:	bf08      	it	eq
   251f2:	4613      	moveq	r3, r2
   251f4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   251f8:	2027      	movs	r0, #39	; 0x27
   251fa:	f7f1 fde9 	bl	16dd0 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   251fe:	2301      	movs	r3, #1
   25200:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   25204:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   25208:	bd10      	pop	{r4, pc}
   2520a:	bf00      	nop
   2520c:	200057f5 	.word	0x200057f5
   25210:	01c01407 	.word	0x01c01407
   25214:	01e01407 	.word	0x01e01407
   25218:	40027000 	.word	0x40027000

0002521c <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   2521c:	4b03      	ldr	r3, [pc, #12]	; (2522c <nrfx_usbd_is_enabled+0x10>)
   2521e:	7818      	ldrb	r0, [r3, #0]
}
   25220:	2801      	cmp	r0, #1
   25222:	bf94      	ite	ls
   25224:	2000      	movls	r0, #0
   25226:	2001      	movhi	r0, #1
   25228:	4770      	bx	lr
   2522a:	bf00      	nop
   2522c:	200057f6 	.word	0x200057f6

00025230 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
   25230:	b510      	push	{r4, lr}
	__asm__ volatile(
   25232:	f04f 0340 	mov.w	r3, #64	; 0x40
   25236:	f3ef 8111 	mrs	r1, BASEPRI
   2523a:	f383 8812 	msr	BASEPRI_MAX, r3
   2523e:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
   25242:	4b0f      	ldr	r3, [pc, #60]	; (25280 <nrfx_usbd_suspend+0x50>)
   25244:	781b      	ldrb	r3, [r3, #0]
   25246:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   2524a:	b193      	cbz	r3, 25272 <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
   2524c:	4b0d      	ldr	r3, [pc, #52]	; (25284 <nrfx_usbd_suspend+0x54>)
   2524e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   25252:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   25256:	d10c      	bne.n	25272 <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   25258:	2401      	movs	r4, #1
   2525a:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   2525e:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   25262:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   25266:	05a4      	lsls	r4, r4, #22
   25268:	d504      	bpl.n	25274 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   2526a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   2526e:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   25272:	2000      	movs	r0, #0
	__asm__ volatile(
   25274:	f381 8811 	msr	BASEPRI, r1
   25278:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
   2527c:	bd10      	pop	{r4, pc}
   2527e:	bf00      	nop
   25280:	200057f5 	.word	0x200057f5
   25284:	40027000 	.word	0x40027000

00025288 <nrfx_usbd_init>:
{
   25288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   2528a:	4b1c      	ldr	r3, [pc, #112]	; (252fc <nrfx_usbd_init+0x74>)
   2528c:	781c      	ldrb	r4, [r3, #0]
   2528e:	bb94      	cbnz	r4, 252f6 <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
   25290:	4a1b      	ldr	r2, [pc, #108]	; (25300 <nrfx_usbd_init+0x78>)
   25292:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   25294:	2201      	movs	r2, #1
   25296:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   25298:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   2529c:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   2529e:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   252a2:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   252a6:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   252a8:	bf14      	ite	ne
   252aa:	4639      	movne	r1, r7
   252ac:	2140      	moveq	r1, #64	; 0x40
   252ae:	4628      	mov	r0, r5
   252b0:	f009 fff3 	bl	2f29a <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   252b4:	4628      	mov	r0, r5
   252b6:	f7ff fd15 	bl	24ce4 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   252ba:	3401      	adds	r4, #1
   252bc:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   252be:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
   252c0:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
   252c2:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   252c4:	d1eb      	bne.n	2529e <nrfx_usbd_init+0x16>
   252c6:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   252c8:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   252cc:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   252ce:	f014 0f08 	tst.w	r4, #8
   252d2:	b2e6      	uxtb	r6, r4
   252d4:	bf14      	ite	ne
   252d6:	4639      	movne	r1, r7
   252d8:	2140      	moveq	r1, #64	; 0x40
   252da:	4630      	mov	r0, r6
   252dc:	f009 ffdd 	bl	2f29a <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   252e0:	4630      	mov	r0, r6
   252e2:	f7ff fcff 	bl	24ce4 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   252e6:	3401      	adds	r4, #1
   252e8:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   252ea:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   252ec:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   252ee:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   252f0:	d1ed      	bne.n	252ce <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
   252f2:	4804      	ldr	r0, [pc, #16]	; (25304 <nrfx_usbd_init+0x7c>)
}
   252f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
   252f6:	4804      	ldr	r0, [pc, #16]	; (25308 <nrfx_usbd_init+0x80>)
   252f8:	e7fc      	b.n	252f4 <nrfx_usbd_init+0x6c>
   252fa:	bf00      	nop
   252fc:	200057f6 	.word	0x200057f6
   25300:	20004a8c 	.word	0x20004a8c
   25304:	0bad0000 	.word	0x0bad0000
   25308:	0bad0005 	.word	0x0bad0005

0002530c <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   2530c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25310:	4604      	mov	r4, r0
	__asm__ volatile(
   25312:	f04f 0340 	mov.w	r3, #64	; 0x40
   25316:	f3ef 8611 	mrs	r6, BASEPRI
   2531a:	f383 8812 	msr	BASEPRI_MAX, r3
   2531e:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   25322:	f010 090f 	ands.w	r9, r0, #15
   25326:	d103      	bne.n	25330 <nrfx_usbd_ep_transfer+0x24>
   25328:	4b27      	ldr	r3, [pc, #156]	; (253c8 <nrfx_usbd_ep_transfer+0xbc>)
   2532a:	781b      	ldrb	r3, [r3, #0]
   2532c:	4283      	cmp	r3, r0
   2532e:	d147      	bne.n	253c0 <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   25330:	4b26      	ldr	r3, [pc, #152]	; (253cc <nrfx_usbd_ep_transfer+0xc0>)
   25332:	4f27      	ldr	r7, [pc, #156]	; (253d0 <nrfx_usbd_ep_transfer+0xc4>)
   25334:	681a      	ldr	r2, [r3, #0]
   25336:	683b      	ldr	r3, [r7, #0]
   25338:	43d2      	mvns	r2, r2
   2533a:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
   2533c:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2533e:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
   25340:	f009 ff73 	bl	2f22a <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   25344:	f04f 0801 	mov.w	r8, #1
   25348:	fa08 f800 	lsl.w	r8, r8, r0
   2534c:	ea12 0f08 	tst.w	r2, r8
   25350:	d138      	bne.n	253c4 <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   25352:	4620      	mov	r0, r4
   25354:	f7ff fcc6 	bl	24ce4 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   25358:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
   2535a:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   2535c:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   2535e:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
   25362:	d529      	bpl.n	253b8 <nrfx_usbd_ep_transfer+0xac>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   25364:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   25366:	6888      	ldr	r0, [r1, #8]
   25368:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   2536c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   25370:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   25374:	d11d      	bne.n	253b2 <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   25376:	4a17      	ldr	r2, [pc, #92]	; (253d4 <nrfx_usbd_ep_transfer+0xc8>)
   25378:	4c17      	ldr	r4, [pc, #92]	; (253d8 <nrfx_usbd_ep_transfer+0xcc>)
   2537a:	2800      	cmp	r0, #0
   2537c:	bf08      	it	eq
   2537e:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   25380:	4816      	ldr	r0, [pc, #88]	; (253dc <nrfx_usbd_ep_transfer+0xd0>)
   25382:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   25384:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
   25386:	c907      	ldmia	r1, {r0, r1, r2}
   25388:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
   2538c:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
   2538e:	2300      	movs	r3, #0
   25390:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   25392:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   25394:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
   25396:	4812      	ldr	r0, [pc, #72]	; (253e0 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   25398:	ea43 0308 	orr.w	r3, r3, r8
   2539c:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2539e:	4b11      	ldr	r3, [pc, #68]	; (253e4 <nrfx_usbd_ep_transfer+0xd8>)
   253a0:	2280      	movs	r2, #128	; 0x80
   253a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   253a6:	f386 8811 	msr	BASEPRI, r6
   253aa:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   253ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   253b2:	4a0d      	ldr	r2, [pc, #52]	; (253e8 <nrfx_usbd_ep_transfer+0xdc>)
   253b4:	4c0d      	ldr	r4, [pc, #52]	; (253ec <nrfx_usbd_ep_transfer+0xe0>)
   253b6:	e7e0      	b.n	2537a <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   253b8:	4a0d      	ldr	r2, [pc, #52]	; (253f0 <nrfx_usbd_ep_transfer+0xe4>)
   253ba:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   253bc:	4a0d      	ldr	r2, [pc, #52]	; (253f4 <nrfx_usbd_ep_transfer+0xe8>)
   253be:	e7e1      	b.n	25384 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
   253c0:	480d      	ldr	r0, [pc, #52]	; (253f8 <nrfx_usbd_ep_transfer+0xec>)
   253c2:	e7f0      	b.n	253a6 <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
   253c4:	480d      	ldr	r0, [pc, #52]	; (253fc <nrfx_usbd_ep_transfer+0xf0>)
   253c6:	e7ee      	b.n	253a6 <nrfx_usbd_ep_transfer+0x9a>
   253c8:	200057f4 	.word	0x200057f4
   253cc:	20004a88 	.word	0x20004a88
   253d0:	20004a84 	.word	0x20004a84
   253d4:	0002f203 	.word	0x0002f203
   253d8:	0002f1e1 	.word	0x0002f1e1
   253dc:	200048f8 	.word	0x200048f8
   253e0:	0bad0000 	.word	0x0bad0000
   253e4:	e000e100 	.word	0xe000e100
   253e8:	00024e59 	.word	0x00024e59
   253ec:	00024e21 	.word	0x00024e21
   253f0:	2000488c 	.word	0x2000488c
   253f4:	0002f1af 	.word	0x0002f1af
   253f8:	0bad000a 	.word	0x0bad000a
   253fc:	0bad000b 	.word	0x0bad000b

00025400 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   25400:	f010 0f08 	tst.w	r0, #8
   25404:	4b07      	ldr	r3, [pc, #28]	; (25424 <nrfx_usbd_epout_size_get+0x24>)
   25406:	d006      	beq.n	25416 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   25408:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   2540c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   25410:	bf18      	it	ne
   25412:	2000      	movne	r0, #0
   25414:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   25416:	f000 000f 	and.w	r0, r0, #15
   2541a:	f500 7094 	add.w	r0, r0, #296	; 0x128
   2541e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   25422:	4770      	bx	lr
   25424:	40027000 	.word	0x40027000

00025428 <usbd_dmareq_process>:
{
   25428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   2542c:	4e59      	ldr	r6, [pc, #356]	; (25594 <usbd_dmareq_process+0x16c>)
   2542e:	7833      	ldrb	r3, [r6, #0]
{
   25430:	b085      	sub	sp, #20
    if (!m_dma_pending)
   25432:	2b00      	cmp	r3, #0
   25434:	d173      	bne.n	2551e <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   25436:	f8df 8160 	ldr.w	r8, [pc, #352]	; 25598 <usbd_dmareq_process+0x170>
   2543a:	4d58      	ldr	r5, [pc, #352]	; (2559c <usbd_dmareq_process+0x174>)
   2543c:	f8d8 4000 	ldr.w	r4, [r8]
   25440:	682b      	ldr	r3, [r5, #0]
   25442:	401c      	ands	r4, r3
   25444:	d06b      	beq.n	2551e <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   25446:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
   2544a:	bf14      	ite	ne
   2544c:	fa93 f4a3 	rbitne	r4, r3
   25450:	fa94 f4a4 	rbiteq	r4, r4
   25454:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   25458:	f04f 0901 	mov.w	r9, #1
   2545c:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   25460:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   25462:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   25466:	d95d      	bls.n	25524 <usbd_dmareq_process+0xfc>
   25468:	3c10      	subs	r4, #16
   2546a:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   2546c:	4620      	mov	r0, r4
   2546e:	f7ff fc39 	bl	24ce4 <ep_state_access>
   25472:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   25474:	4620      	mov	r0, r4
   25476:	f7ff ffc3 	bl	25400 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   2547a:	f8da 7000 	ldr.w	r7, [sl]
   2547e:	f8ba 200c 	ldrh.w	r2, [sl, #12]
   25482:	f8da 1004 	ldr.w	r1, [sl, #4]
   25486:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   25488:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
   2548a:	a802      	add	r0, sp, #8
   2548c:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
   2548e:	9b02      	ldr	r3, [sp, #8]
   25490:	2b00      	cmp	r3, #0
   25492:	d153      	bne.n	2553c <usbd_dmareq_process+0x114>
                if (!continue_transfer)
   25494:	b908      	cbnz	r0, 2549a <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
   25496:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2549a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
   2549e:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
   254a0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   254a4:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   254a6:	bf02      	ittt	eq
   254a8:	4b3d      	ldreq	r3, [pc, #244]	; (255a0 <usbd_dmareq_process+0x178>)
   254aa:	2282      	moveq	r2, #130	; 0x82
   254ac:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   254b0:	2301      	movs	r3, #1
   254b2:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
   254b4:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   254b6:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   254b8:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
   254ba:	ea03 0309 	and.w	r3, r3, r9
   254be:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   254c0:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
   254c4:	2900      	cmp	r1, #0
   254c6:	4413      	add	r3, r2
   254c8:	f8ca 3008 	str.w	r3, [sl, #8]
   254cc:	f004 0508 	and.w	r5, r4, #8
   254d0:	4b33      	ldr	r3, [pc, #204]	; (255a0 <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   254d2:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   254d6:	da4e      	bge.n	25576 <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
   254d8:	2d00      	cmp	r5, #0
   254da:	d044      	beq.n	25566 <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
   254dc:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   254e0:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   254e4:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   254e6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   254ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   254ee:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   254f2:	2201      	movs	r2, #1
   254f4:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   254f6:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   254f8:	4a2a      	ldr	r2, [pc, #168]	; (255a4 <usbd_dmareq_process+0x17c>)
   254fa:	4b2b      	ldr	r3, [pc, #172]	; (255a8 <usbd_dmareq_process+0x180>)
   254fc:	ea13 0321 	ands.w	r3, r3, r1, asr #32
   25500:	bf38      	it	cc
   25502:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   25504:	4926      	ldr	r1, [pc, #152]	; (255a0 <usbd_dmareq_process+0x178>)
   25506:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2550a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2550e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   25512:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   25514:	b91a      	cbnz	r2, 2551e <usbd_dmareq_process+0xf6>
   25516:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   2551a:	2a00      	cmp	r2, #0
   2551c:	d0f9      	beq.n	25512 <usbd_dmareq_process+0xea>
}
   2551e:	b005      	add	sp, #20
   25520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   25524:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
   25528:	4620      	mov	r0, r4
   2552a:	f7ff fbdb 	bl	24ce4 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
   2552e:	6803      	ldr	r3, [r0, #0]
   25530:	8982      	ldrh	r2, [r0, #12]
   25532:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
   25534:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
   25536:	a802      	add	r0, sp, #8
   25538:	4798      	blx	r3
   2553a:	e7ab      	b.n	25494 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
   2553c:	9b03      	ldr	r3, [sp, #12]
   2553e:	459b      	cmp	fp, r3
   25540:	d9a8      	bls.n	25494 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   25542:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   25544:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   25546:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2554a:	f7ff fcc5 	bl	24ed8 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   2554e:	2306      	movs	r3, #6
   25550:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   25554:	4b15      	ldr	r3, [pc, #84]	; (255ac <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   25556:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   2555a:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   2555c:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   25560:	a801      	add	r0, sp, #4
   25562:	4798      	blx	r3
                    continue;
   25564:	e76a      	b.n	2543c <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
   25566:	2514      	movs	r5, #20
   25568:	fb05 3304 	mla	r3, r5, r4, r3
   2556c:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   25570:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
   25574:	e7b6      	b.n	254e4 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
   25576:	b12d      	cbz	r5, 25584 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
   25578:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   2557c:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
   25580:	2328      	movs	r3, #40	; 0x28
   25582:	e7b0      	b.n	254e6 <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
   25584:	2514      	movs	r5, #20
   25586:	fb05 3304 	mla	r3, r5, r4, r3
   2558a:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   2558e:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   25592:	e7f5      	b.n	25580 <usbd_dmareq_process+0x158>
   25594:	200057f3 	.word	0x200057f3
   25598:	20004a84 	.word	0x20004a84
   2559c:	20004a88 	.word	0x20004a88
   255a0:	40027000 	.word	0x40027000
   255a4:	00030fb0 	.word	0x00030fb0
   255a8:	00030fc2 	.word	0x00030fc2
   255ac:	20004a8c 	.word	0x20004a8c

000255b0 <ev_epdata_handler>:
{
   255b0:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   255b2:	4b0f      	ldr	r3, [pc, #60]	; (255f0 <ev_epdata_handler+0x40>)
   255b4:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   255b8:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   255bc:	2501      	movs	r5, #1
    while (dataepstatus)
   255be:	b91c      	cbnz	r4, 255c8 <ev_epdata_handler+0x18>
}
   255c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   255c4:	f7ff bf30 	b.w	25428 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   255c8:	fa94 f3a4 	rbit	r3, r4
   255cc:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   255d0:	2b0f      	cmp	r3, #15
   255d2:	bfc8      	it	gt
   255d4:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   255d8:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   255da:	bfd4      	ite	le
   255dc:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   255e0:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   255e2:	fa05 f303 	lsl.w	r3, r5, r3
   255e6:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   255ea:	f7ff fcad 	bl	24f48 <usbd_ep_data_handler>
   255ee:	e7e6      	b.n	255be <ev_epdata_handler+0xe>
   255f0:	40027000 	.word	0x40027000

000255f4 <nrf_usbd_epout_dma_handler>:
{
   255f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
   255f6:	f7ff fc7f 	bl	24ef8 <usbd_dma_pending_clear>
{
   255fa:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   255fc:	f7ff fb72 	bl	24ce4 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   25600:	7b83      	ldrb	r3, [r0, #14]
   25602:	2b03      	cmp	r3, #3
   25604:	d10d      	bne.n	25622 <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   25606:	4620      	mov	r0, r4
   25608:	f009 fe0f 	bl	2f22a <ep2bit>
   2560c:	2301      	movs	r3, #1
   2560e:	fa03 f000 	lsl.w	r0, r3, r0
   25612:	43c0      	mvns	r0, r0
   25614:	f7ff fc60 	bl	24ed8 <atomic_and.constprop.0.isra.0>
}
   25618:	b003      	add	sp, #12
   2561a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   2561e:	f7ff bf03 	b.w	25428 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   25622:	6805      	ldr	r5, [r0, #0]
   25624:	2d00      	cmp	r5, #0
   25626:	d1f7      	bne.n	25618 <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   25628:	4620      	mov	r0, r4
   2562a:	f009 fdfe 	bl	2f22a <ep2bit>
   2562e:	2301      	movs	r3, #1
   25630:	fa03 f000 	lsl.w	r0, r3, r0
   25634:	43c0      	mvns	r0, r0
   25636:	f7ff fc4f 	bl	24ed8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2563a:	2306      	movs	r3, #6
   2563c:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   25640:	4b04      	ldr	r3, [pc, #16]	; (25654 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   25642:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   25646:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   25648:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   2564c:	a801      	add	r0, sp, #4
   2564e:	4798      	blx	r3
   25650:	e7e2      	b.n	25618 <nrf_usbd_epout_dma_handler+0x24>
   25652:	bf00      	nop
   25654:	20004a8c 	.word	0x20004a8c

00025658 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   25658:	4b02      	ldr	r3, [pc, #8]	; (25664 <nrfx_usbd_ep_stall+0xc>)
   2565a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   2565e:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   25662:	4770      	bx	lr
   25664:	40027000 	.word	0x40027000

00025668 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   25668:	0702      	lsls	r2, r0, #28
   2566a:	d413      	bmi.n	25694 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   2566c:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   25670:	f010 0f80 	tst.w	r0, #128	; 0x80
   25674:	4a08      	ldr	r2, [pc, #32]	; (25698 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   25676:	bf0b      	itete	eq
   25678:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   2567c:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   25680:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   25684:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   25688:	bf08      	it	eq
   2568a:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   2568c:	1e43      	subs	r3, r0, #1
   2568e:	4258      	negs	r0, r3
   25690:	4158      	adcs	r0, r3
   25692:	4770      	bx	lr
        return false;
   25694:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   25696:	4770      	bx	lr
   25698:	40027000 	.word	0x40027000

0002569c <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   2569c:	4b04      	ldr	r3, [pc, #16]	; (256b0 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   2569e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   256a2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   256a6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   256aa:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   256ae:	4770      	bx	lr
   256b0:	40027000 	.word	0x40027000

000256b4 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   256b4:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   256b6:	2208      	movs	r2, #8
   256b8:	2100      	movs	r1, #0
{
   256ba:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   256bc:	f006 fe1a 	bl	2c2f4 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   256c0:	4b0e      	ldr	r3, [pc, #56]	; (256fc <nrfx_usbd_setup_get+0x48>)
   256c2:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   256c6:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   256c8:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   256cc:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   256ce:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   256d2:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   256d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   256da:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   256dc:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   256e0:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   256e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   256e8:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   256ea:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   256ee:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   256f2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   256f6:	80e3      	strh	r3, [r4, #6]
}
   256f8:	bd10      	pop	{r4, pc}
   256fa:	bf00      	nop
   256fc:	40027000 	.word	0x40027000

00025700 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   25700:	4b02      	ldr	r3, [pc, #8]	; (2570c <nrfx_usbd_setup_data_clear+0xc>)
   25702:	2201      	movs	r2, #1
   25704:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   25706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   25708:	4770      	bx	lr
   2570a:	bf00      	nop
   2570c:	40027000 	.word	0x40027000

00025710 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   25710:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   25712:	f7ff fbf1 	bl	24ef8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   25716:	4b10      	ldr	r3, [pc, #64]	; (25758 <ev_dma_epout0_handler+0x48>)
   25718:	7b9a      	ldrb	r2, [r3, #14]
   2571a:	2a03      	cmp	r2, #3
   2571c:	d106      	bne.n	2572c <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2571e:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   25722:	b002      	add	sp, #8
   25724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   25728:	f7ff bbd6 	b.w	24ed8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   2572c:	681c      	ldr	r4, [r3, #0]
   2572e:	b974      	cbnz	r4, 2574e <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   25730:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   25734:	f7ff fbd0 	bl	24ed8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   25738:	2306      	movs	r3, #6
   2573a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   2573e:	4b07      	ldr	r3, [pc, #28]	; (2575c <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   25740:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   25744:	681b      	ldr	r3, [r3, #0]
   25746:	a801      	add	r0, sp, #4
   25748:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   2574a:	b002      	add	sp, #8
   2574c:	bd10      	pop	{r4, pc}
   2574e:	b002      	add	sp, #8
   25750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   25754:	f7ff bfd4 	b.w	25700 <nrfx_usbd_setup_data_clear>
   25758:	20004964 	.word	0x20004964
   2575c:	20004a8c 	.word	0x20004a8c

00025760 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   25760:	4b02      	ldr	r3, [pc, #8]	; (2576c <nrfx_usbd_setup_clear+0xc>)
   25762:	2201      	movs	r2, #1
   25764:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   25766:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   25768:	4770      	bx	lr
   2576a:	bf00      	nop
   2576c:	40027000 	.word	0x40027000

00025770 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   25770:	4b02      	ldr	r3, [pc, #8]	; (2577c <nrfx_usbd_setup_stall+0xc>)
   25772:	2201      	movs	r2, #1
   25774:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   25776:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   25778:	4770      	bx	lr
   2577a:	bf00      	nop
   2577c:	40027000 	.word	0x40027000

00025780 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   25780:	4b01      	ldr	r3, [pc, #4]	; (25788 <nrfx_usbd_last_setup_dir_get+0x8>)
   25782:	7818      	ldrb	r0, [r3, #0]
   25784:	4770      	bx	lr
   25786:	bf00      	nop
   25788:	200057f4 	.word	0x200057f4

0002578c <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   2578c:	b510      	push	{r4, lr}
   2578e:	4602      	mov	r2, r0
	__asm__ volatile(
   25790:	f04f 0340 	mov.w	r3, #64	; 0x40
   25794:	f3ef 8411 	mrs	r4, BASEPRI
   25798:	f383 8812 	msr	BASEPRI_MAX, r3
   2579c:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   257a0:	f009 fd43 	bl	2f22a <ep2bit>
   257a4:	490d      	ldr	r1, [pc, #52]	; (257dc <nrfx_usbd_transfer_out_drop+0x50>)
   257a6:	2301      	movs	r3, #1
   257a8:	fa03 f000 	lsl.w	r0, r3, r0
   257ac:	680b      	ldr	r3, [r1, #0]
   257ae:	ea23 0300 	bic.w	r3, r3, r0
   257b2:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   257b4:	f012 0108 	ands.w	r1, r2, #8
   257b8:	d10a      	bne.n	257d0 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   257ba:	f002 030f 	and.w	r3, r2, #15
   257be:	009b      	lsls	r3, r3, #2
   257c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   257c4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   257c8:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   257cc:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   257d0:	f384 8811 	msr	BASEPRI, r4
   257d4:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   257d8:	bd10      	pop	{r4, pc}
   257da:	bf00      	nop
   257dc:	20004a88 	.word	0x20004a88

000257e0 <usbd_ep_abort>:
{
   257e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   257e2:	4601      	mov	r1, r0
	__asm__ volatile(
   257e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   257e8:	f3ef 8511 	mrs	r5, BASEPRI
   257ec:	f383 8812 	msr	BASEPRI_MAX, r3
   257f0:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   257f4:	f7ff fa76 	bl	24ce4 <ep_state_access>
   257f8:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   257fa:	4608      	mov	r0, r1
   257fc:	f009 fd15 	bl	2f22a <ep2bit>
   25800:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   25802:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   25806:	fa02 f200 	lsl.w	r2, r2, r0
   2580a:	482e      	ldr	r0, [pc, #184]	; (258c4 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   2580c:	d119      	bne.n	25842 <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2580e:	6803      	ldr	r3, [r0, #0]
   25810:	ea32 0303 	bics.w	r3, r2, r3
   25814:	d00a      	beq.n	2582c <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   25816:	4608      	mov	r0, r1
   25818:	f7ff ffb8 	bl	2578c <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   2581c:	2303      	movs	r3, #3
   2581e:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   25820:	f385 8811 	msr	BASEPRI, r5
   25824:	f3bf 8f6f 	isb	sy
}
   25828:	b003      	add	sp, #12
   2582a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
   2582c:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2582e:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   25830:	4925      	ldr	r1, [pc, #148]	; (258c8 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   25832:	ea23 0302 	bic.w	r3, r3, r2
   25836:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   25838:	680b      	ldr	r3, [r1, #0]
   2583a:	ea23 0302 	bic.w	r3, r3, r2
   2583e:	600b      	str	r3, [r1, #0]
   25840:	e7ec      	b.n	2581c <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   25842:	070b      	lsls	r3, r1, #28
   25844:	d415      	bmi.n	25872 <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
   25846:	2980      	cmp	r1, #128	; 0x80
   25848:	4b20      	ldr	r3, [pc, #128]	; (258cc <usbd_ep_abort+0xec>)
   2584a:	d02f      	beq.n	258ac <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   2584c:	f001 040f 	and.w	r4, r1, #15
   25850:	f204 34da 	addw	r4, r4, #986	; 0x3da
   25854:	0064      	lsls	r4, r4, #1
   25856:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2585a:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2585e:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   25862:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   25864:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   25868:	433c      	orrs	r4, r7
   2586a:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   2586e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   25872:	4f15      	ldr	r7, [pc, #84]	; (258c8 <usbd_ep_abort+0xe8>)
   25874:	6804      	ldr	r4, [r0, #0]
   25876:	683b      	ldr	r3, [r7, #0]
   25878:	ea64 0c03 	orn	ip, r4, r3
   2587c:	ea1c 0f02 	tst.w	ip, r2
   25880:	d0ce      	beq.n	25820 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   25882:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   25884:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   25888:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   2588a:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2588c:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   2588e:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   25890:	2303      	movs	r3, #3
   25892:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   25894:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   25898:	4b0d      	ldr	r3, [pc, #52]	; (258d0 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   2589a:	f88d 1006 	strb.w	r1, [sp, #6]
   2589e:	2206      	movs	r2, #6
            m_event_handler(&evt);
   258a0:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   258a2:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   258a6:	a801      	add	r0, sp, #4
   258a8:	4798      	blx	r3
   258aa:	e7b9      	b.n	25820 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   258ac:	f240 74b4 	movw	r4, #1972	; 0x7b4
   258b0:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   258b4:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   258b8:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   258bc:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   258be:	f044 0404 	orr.w	r4, r4, #4
   258c2:	e7d1      	b.n	25868 <usbd_ep_abort+0x88>
   258c4:	20004a84 	.word	0x20004a84
   258c8:	20004a88 	.word	0x20004a88
   258cc:	40027000 	.word	0x40027000
   258d0:	20004a8c 	.word	0x20004a8c

000258d4 <ev_setup_handler>:
{
   258d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   258d6:	4b14      	ldr	r3, [pc, #80]	; (25928 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   258d8:	4c14      	ldr	r4, [pc, #80]	; (2592c <ev_setup_handler+0x58>)
   258da:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   258de:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   258e0:	4e13      	ldr	r6, [pc, #76]	; (25930 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   258e2:	43da      	mvns	r2, r3
   258e4:	4b13      	ldr	r3, [pc, #76]	; (25934 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
   258e6:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   258e8:	681b      	ldr	r3, [r3, #0]
   258ea:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   258ec:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   258ee:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   258f0:	f009 fc9b 	bl	2f22a <ep2bit>
   258f4:	2301      	movs	r3, #1
   258f6:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   258f8:	4213      	tst	r3, r2
   258fa:	d002      	beq.n	25902 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   258fc:	4608      	mov	r0, r1
   258fe:	f7ff ff6f 	bl	257e0 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   25902:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
   25906:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   2590a:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   2590c:	f7ff fae4 	bl	24ed8 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   25910:	6823      	ldr	r3, [r4, #0]
   25912:	f043 0301 	orr.w	r3, r3, #1
   25916:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   25918:	2305      	movs	r3, #5
   2591a:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
   2591c:	4b06      	ldr	r3, [pc, #24]	; (25938 <ev_setup_handler+0x64>)
   2591e:	a801      	add	r0, sp, #4
   25920:	681b      	ldr	r3, [r3, #0]
   25922:	4798      	blx	r3
}
   25924:	b002      	add	sp, #8
   25926:	bd70      	pop	{r4, r5, r6, pc}
   25928:	40027000 	.word	0x40027000
   2592c:	20004a88 	.word	0x20004a88
   25930:	200057f4 	.word	0x200057f4
   25934:	20004a84 	.word	0x20004a84
   25938:	20004a8c 	.word	0x20004a8c

0002593c <nrfx_usbd_irq_handler>:
{
   2593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
   25940:	4b1a      	ldr	r3, [pc, #104]	; (259ac <nrfx_usbd_irq_handler+0x70>)
   25942:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   25946:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
   25948:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2594a:	461d      	mov	r5, r3
    while (to_process)
   2594c:	b970      	cbnz	r0, 2596c <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   2594e:	4f18      	ldr	r7, [pc, #96]	; (259b0 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   25950:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   25954:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   25958:	f04f 0801 	mov.w	r8, #1
    while (active)
   2595c:	b9bc      	cbnz	r4, 2598e <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   2595e:	f7ff fd63 	bl	25428 <usbd_dmareq_process>
    if (setup_active)
   25962:	b306      	cbz	r6, 259a6 <nrfx_usbd_irq_handler+0x6a>
}
   25964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   25968:	f7ff bfb4 	b.w	258d4 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   2596c:	fa90 f2a0 	rbit	r2, r0
   25970:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   25974:	490f      	ldr	r1, [pc, #60]	; (259b4 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   25976:	0096      	lsls	r6, r2, #2
   25978:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   2597a:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2597e:	680e      	ldr	r6, [r1, #0]
    if (ret)
   25980:	b116      	cbz	r6, 25988 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   25982:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   25984:	6809      	ldr	r1, [r1, #0]
   25986:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   25988:	ea20 0002 	bic.w	r0, r0, r2
   2598c:	e7de      	b.n	2594c <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   2598e:	fa94 f5a4 	rbit	r5, r4
   25992:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   25996:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   2599a:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   2599e:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   259a0:	ea24 0405 	bic.w	r4, r4, r5
   259a4:	e7da      	b.n	2595c <nrfx_usbd_irq_handler+0x20>
}
   259a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   259aa:	bf00      	nop
   259ac:	40027000 	.word	0x40027000
   259b0:	00030c94 	.word	0x00030c94
   259b4:	40027100 	.word	0x40027100

000259b8 <nrfx_usbd_stop>:
{
   259b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   259ba:	4b1b      	ldr	r3, [pc, #108]	; (25a28 <nrfx_usbd_stop+0x70>)
   259bc:	2280      	movs	r2, #128	; 0x80
   259be:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   259c2:	2027      	movs	r0, #39	; 0x27
   259c4:	f7f1 fa26 	bl	16e14 <arch_irq_is_enabled>
   259c8:	b1b8      	cbz	r0, 259fa <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   259ca:	4e18      	ldr	r6, [pc, #96]	; (25a2c <nrfx_usbd_stop+0x74>)
   259cc:	4b18      	ldr	r3, [pc, #96]	; (25a30 <nrfx_usbd_stop+0x78>)
   259ce:	6834      	ldr	r4, [r6, #0]
   259d0:	681b      	ldr	r3, [r3, #0]
   259d2:	0c24      	lsrs	r4, r4, #16
   259d4:	0424      	lsls	r4, r4, #16
   259d6:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   259d8:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   259da:	b97c      	cbnz	r4, 259fc <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   259dc:	4d15      	ldr	r5, [pc, #84]	; (25a34 <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   259de:	f240 13ff 	movw	r3, #511	; 0x1ff
   259e2:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
   259e4:	2027      	movs	r0, #39	; 0x27
   259e6:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   259ea:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   259ee:	f7f1 f9fd 	bl	16dec <arch_irq_disable>
    p_reg->INTENCLR = mask;
   259f2:	f04f 33ff 	mov.w	r3, #4294967295
   259f6:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
   259fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   259fc:	fa94 f5a4 	rbit	r5, r4
   25a00:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   25a04:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   25a06:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   25a08:	bfc6      	itte	gt
   25a0a:	f1a5 0010 	subgt.w	r0, r5, #16
   25a0e:	b2c0      	uxtbgt	r0, r0
   25a10:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   25a14:	0703      	lsls	r3, r0, #28
   25a16:	d401      	bmi.n	25a1c <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
   25a18:	f7ff fee2 	bl	257e0 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   25a1c:	fa07 f505 	lsl.w	r5, r7, r5
   25a20:	ea24 0405 	bic.w	r4, r4, r5
   25a24:	e7d9      	b.n	259da <nrfx_usbd_stop+0x22>
   25a26:	bf00      	nop
   25a28:	e000e100 	.word	0xe000e100
   25a2c:	20004a88 	.word	0x20004a88
   25a30:	20004a84 	.word	0x20004a84
   25a34:	40027000 	.word	0x40027000

00025a38 <nrfx_usbd_disable>:
{
   25a38:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   25a3a:	f7ff ffbd 	bl	259b8 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   25a3e:	4b08      	ldr	r3, [pc, #32]	; (25a60 <nrfx_usbd_disable+0x28>)
   25a40:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   25a44:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   25a48:	2200      	movs	r2, #0
   25a4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   25a4e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   25a52:	f7ff fa51 	bl	24ef8 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   25a56:	4b03      	ldr	r3, [pc, #12]	; (25a64 <nrfx_usbd_disable+0x2c>)
   25a58:	2201      	movs	r2, #1
   25a5a:	701a      	strb	r2, [r3, #0]
}
   25a5c:	bd08      	pop	{r3, pc}
   25a5e:	bf00      	nop
   25a60:	40027000 	.word	0x40027000
   25a64:	200057f6 	.word	0x200057f6

00025a68 <nrfx_usbd_ep_disable>:
{
   25a68:	b510      	push	{r4, lr}
   25a6a:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   25a6c:	f7ff feb8 	bl	257e0 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   25a70:	4a10      	ldr	r2, [pc, #64]	; (25ab4 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   25a72:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   25a76:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   25a7a:	f04f 0301 	mov.w	r3, #1
   25a7e:	bf14      	ite	ne
   25a80:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   25a84:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   25a88:	fa03 f300 	lsl.w	r3, r3, r0
   25a8c:	ea6f 0303 	mvn.w	r3, r3
   25a90:	bf15      	itete	ne
   25a92:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   25a94:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   25a96:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   25a9a:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   25a9e:	bf14      	ite	ne
   25aa0:	4b05      	ldrne	r3, [pc, #20]	; (25ab8 <nrfx_usbd_ep_disable+0x50>)
   25aa2:	4b06      	ldreq	r3, [pc, #24]	; (25abc <nrfx_usbd_ep_disable+0x54>)
   25aa4:	5c1a      	ldrb	r2, [r3, r0]
   25aa6:	2301      	movs	r3, #1
   25aa8:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   25aaa:	4a02      	ldr	r2, [pc, #8]	; (25ab4 <nrfx_usbd_ep_disable+0x4c>)
   25aac:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   25ab0:	bd10      	pop	{r4, pc}
   25ab2:	bf00      	nop
   25ab4:	40027000 	.word	0x40027000
   25ab8:	00033e42 	.word	0x00033e42
   25abc:	00033e39 	.word	0x00033e39

00025ac0 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   25ac0:	f010 0f80 	tst.w	r0, #128	; 0x80
{
   25ac4:	b570      	push	{r4, r5, r6, lr}
   25ac6:	4924      	ldr	r1, [pc, #144]	; (25b58 <nrfx_usbd_ep_enable+0x98>)
   25ac8:	4604      	mov	r4, r0
   25aca:	f000 030f 	and.w	r3, r0, #15
   25ace:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   25ad2:	d012      	beq.n	25afa <nrfx_usbd_ep_enable+0x3a>
   25ad4:	4a21      	ldr	r2, [pc, #132]	; (25b5c <nrfx_usbd_ep_enable+0x9c>)
   25ad6:	5cd2      	ldrb	r2, [r2, r3]
   25ad8:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   25adc:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   25ae0:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   25ae4:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   25ae6:	07d0      	lsls	r0, r2, #31
   25ae8:	d406      	bmi.n	25af8 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
   25aea:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   25aee:	fa05 f303 	lsl.w	r3, r5, r3
   25af2:	4313      	orrs	r3, r2
   25af4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
   25af8:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   25afa:	4a19      	ldr	r2, [pc, #100]	; (25b60 <nrfx_usbd_ep_enable+0xa0>)
   25afc:	5cd2      	ldrb	r2, [r2, r3]
   25afe:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   25b02:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   25b06:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
   25b0a:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   25b0c:	07d2      	lsls	r2, r2, #31
   25b0e:	d4f3      	bmi.n	25af8 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
   25b10:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
   25b14:	fa05 f203 	lsl.w	r2, r5, r3
   25b18:	4332      	orrs	r2, r6
   25b1a:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   25b1e:	2b00      	cmp	r3, #0
   25b20:	d0ea      	beq.n	25af8 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
   25b22:	0703      	lsls	r3, r0, #28
   25b24:	d4e8      	bmi.n	25af8 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
   25b26:	f04f 0340 	mov.w	r3, #64	; 0x40
   25b2a:	f3ef 8611 	mrs	r6, BASEPRI
   25b2e:	f383 8812 	msr	BASEPRI_MAX, r3
   25b32:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   25b36:	f7ff fe29 	bl	2578c <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   25b3a:	4620      	mov	r0, r4
   25b3c:	f009 fb75 	bl	2f22a <ep2bit>
   25b40:	4a08      	ldr	r2, [pc, #32]	; (25b64 <nrfx_usbd_ep_enable+0xa4>)
   25b42:	6813      	ldr	r3, [r2, #0]
   25b44:	fa05 f000 	lsl.w	r0, r5, r0
   25b48:	ea23 0300 	bic.w	r3, r3, r0
   25b4c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   25b4e:	f386 8811 	msr	BASEPRI, r6
   25b52:	f3bf 8f6f 	isb	sy
}
   25b56:	e7cf      	b.n	25af8 <nrfx_usbd_ep_enable+0x38>
   25b58:	40027000 	.word	0x40027000
   25b5c:	00033e42 	.word	0x00033e42
   25b60:	00033e39 	.word	0x00033e39
   25b64:	20004a84 	.word	0x20004a84

00025b68 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   25b68:	0603      	lsls	r3, r0, #24
{
   25b6a:	b510      	push	{r4, lr}
   25b6c:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   25b6e:	d405      	bmi.n	25b7c <nrfx_usbd_ep_stall_clear+0x14>
   25b70:	f7ff fd7a 	bl	25668 <nrfx_usbd_ep_stall_check>
   25b74:	b110      	cbz	r0, 25b7c <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   25b76:	4620      	mov	r0, r4
   25b78:	f7ff fe08 	bl	2578c <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   25b7c:	4b01      	ldr	r3, [pc, #4]	; (25b84 <nrfx_usbd_ep_stall_clear+0x1c>)
   25b7e:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   25b82:	bd10      	pop	{r4, pc}
   25b84:	40027000 	.word	0x40027000

00025b88 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   25b88:	4b01      	ldr	r3, [pc, #4]	; (25b90 <z_impl_z_errno+0x8>)
   25b8a:	6898      	ldr	r0, [r3, #8]
}
   25b8c:	3064      	adds	r0, #100	; 0x64
   25b8e:	4770      	bx	lr
   25b90:	20004a90 	.word	0x20004a90

00025b94 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   25b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25b98:	b086      	sub	sp, #24
   25b9a:	4605      	mov	r5, r0
   25b9c:	af00      	add	r7, sp, #0
   25b9e:	460e      	mov	r6, r1
	__asm__ volatile(
   25ba0:	f04f 0340 	mov.w	r3, #64	; 0x40
   25ba4:	f3ef 8811 	mrs	r8, BASEPRI
   25ba8:	f383 8812 	msr	BASEPRI_MAX, r3
   25bac:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   25bb0:	f001 f8a8 	bl	26d04 <z_impl_z_current_get>
   25bb4:	2d04      	cmp	r5, #4
   25bb6:	bf96      	itet	ls
   25bb8:	4b2c      	ldrls	r3, [pc, #176]	; (25c6c <z_fatal_error+0xd8>)
   25bba:	4b2d      	ldrhi	r3, [pc, #180]	; (25c70 <z_fatal_error+0xdc>)
   25bbc:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   25bc0:	46e9      	mov	r9, sp
   25bc2:	b08a      	sub	sp, #40	; 0x28
   25bc4:	4604      	mov	r4, r0
   25bc6:	466a      	mov	r2, sp
   25bc8:	492a      	ldr	r1, [pc, #168]	; (25c74 <z_fatal_error+0xe0>)
   25bca:	61d3      	str	r3, [r2, #28]
   25bcc:	f240 3301 	movw	r3, #769	; 0x301
   25bd0:	8493      	strh	r3, [r2, #36]	; 0x24
   25bd2:	f04f 0a00 	mov.w	sl, #0
   25bd6:	4b28      	ldr	r3, [pc, #160]	; (25c78 <z_fatal_error+0xe4>)
   25bd8:	f8c2 a020 	str.w	sl, [r2, #32]
   25bdc:	e9c2 1505 	strd	r1, r5, [r2, #20]
   25be0:	f842 3f10 	str.w	r3, [r2, #16]!
   25be4:	4825      	ldr	r0, [pc, #148]	; (25c7c <z_fatal_error+0xe8>)
   25be6:	4653      	mov	r3, sl
   25be8:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   25bec:	f7ee ffea 	bl	14bc4 <z_impl_z_log_msg_static_create>
   25bf0:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   25bf2:	b17e      	cbz	r6, 25c14 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   25bf4:	69f3      	ldr	r3, [r6, #28]
   25bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   25bfa:	b15b      	cbz	r3, 25c14 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   25bfc:	4b20      	ldr	r3, [pc, #128]	; (25c80 <z_fatal_error+0xec>)
   25bfe:	617b      	str	r3, [r7, #20]
   25c00:	2302      	movs	r3, #2
   25c02:	613b      	str	r3, [r7, #16]
   25c04:	481d      	ldr	r0, [pc, #116]	; (25c7c <z_fatal_error+0xe8>)
   25c06:	4653      	mov	r3, sl
   25c08:	f107 0210 	add.w	r2, r7, #16
   25c0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   25c10:	f7ee ffd8 	bl	14bc4 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   25c14:	b12c      	cbz	r4, 25c22 <z_fatal_error+0x8e>
   25c16:	4620      	mov	r0, r4
   25c18:	f009 fc4a 	bl	2f4b0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   25c1c:	b108      	cbz	r0, 25c22 <z_fatal_error+0x8e>
   25c1e:	7803      	ldrb	r3, [r0, #0]
   25c20:	b903      	cbnz	r3, 25c24 <z_fatal_error+0x90>
		thread_name = "unknown";
   25c22:	4818      	ldr	r0, [pc, #96]	; (25c84 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   25c24:	46e9      	mov	r9, sp
   25c26:	b08a      	sub	sp, #40	; 0x28
   25c28:	466a      	mov	r2, sp
   25c2a:	4b17      	ldr	r3, [pc, #92]	; (25c88 <z_fatal_error+0xf4>)
   25c2c:	61d0      	str	r0, [r2, #28]
   25c2e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   25c32:	f240 3301 	movw	r3, #769	; 0x301
   25c36:	8413      	strh	r3, [r2, #32]
   25c38:	4b14      	ldr	r3, [pc, #80]	; (25c8c <z_fatal_error+0xf8>)
   25c3a:	f842 3f10 	str.w	r3, [r2, #16]!
   25c3e:	2300      	movs	r3, #0
   25c40:	480e      	ldr	r0, [pc, #56]	; (25c7c <z_fatal_error+0xe8>)
   25c42:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   25c46:	f7ee ffbd 	bl	14bc4 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   25c4a:	4631      	mov	r1, r6
   25c4c:	46cd      	mov	sp, r9
   25c4e:	4628      	mov	r0, r5
   25c50:	f7fd f928 	bl	22ea4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   25c54:	f388 8811 	msr	BASEPRI, r8
   25c58:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   25c5c:	4620      	mov	r0, r4
   25c5e:	f7f1 fd79 	bl	17754 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   25c62:	3718      	adds	r7, #24
   25c64:	46bd      	mov	sp, r7
   25c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25c6a:	bf00      	nop
   25c6c:	00030cfc 	.word	0x00030cfc
   25c70:	00033e55 	.word	0x00033e55
   25c74:	00033e63 	.word	0x00033e63
   25c78:	01000005 	.word	0x01000005
   25c7c:	00030374 	.word	0x00030374
   25c80:	00033e8b 	.word	0x00033e8b
   25c84:	00031db1 	.word	0x00031db1
   25c88:	00033eac 	.word	0x00033eac
   25c8c:	01000004 	.word	0x01000004

00025c90 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25c90:	4b10      	ldr	r3, [pc, #64]	; (25cd4 <z_sys_init_run_level+0x44>)
{
   25c92:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25c94:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   25c98:	3001      	adds	r0, #1
   25c9a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   25c9e:	42a6      	cmp	r6, r4
   25ca0:	d800      	bhi.n	25ca4 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   25ca2:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   25ca4:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   25ca8:	b18d      	cbz	r5, 25cce <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   25caa:	4628      	mov	r0, r5
   25cac:	4798      	blx	r3
			if (rc != 0) {
   25cae:	b138      	cbz	r0, 25cc0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   25cb0:	2800      	cmp	r0, #0
   25cb2:	bfb8      	it	lt
   25cb4:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   25cb6:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   25cb8:	28ff      	cmp	r0, #255	; 0xff
   25cba:	bfa8      	it	ge
   25cbc:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   25cbe:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   25cc0:	68ea      	ldr	r2, [r5, #12]
   25cc2:	7853      	ldrb	r3, [r2, #1]
   25cc4:	f043 0301 	orr.w	r3, r3, #1
   25cc8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25cca:	3408      	adds	r4, #8
   25ccc:	e7e7      	b.n	25c9e <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   25cce:	4798      	blx	r3
   25cd0:	e7fb      	b.n	25cca <z_sys_init_run_level+0x3a>
   25cd2:	bf00      	nop
   25cd4:	00030d10 	.word	0x00030d10

00025cd8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   25cd8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   25cda:	4b0a      	ldr	r3, [pc, #40]	; (25d04 <bg_thread_main+0x2c>)
   25cdc:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   25cde:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   25ce0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   25ce2:	f7ff ffd5 	bl	25c90 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   25ce6:	f001 fb49 	bl	2737c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   25cea:	2004      	movs	r0, #4
   25cec:	f7ff ffd0 	bl	25c90 <z_sys_init_run_level>

	z_init_static_threads();
   25cf0:	f000 f970 	bl	25fd4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   25cf4:	f7ec fcfa 	bl	126ec <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   25cf8:	4a03      	ldr	r2, [pc, #12]	; (25d08 <bg_thread_main+0x30>)
   25cfa:	7b13      	ldrb	r3, [r2, #12]
   25cfc:	f023 0301 	bic.w	r3, r3, #1
   25d00:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   25d02:	bd08      	pop	{r3, pc}
   25d04:	200057f7 	.word	0x200057f7
   25d08:	20003170 	.word	0x20003170

00025d0c <z_bss_zero>:
{
   25d0c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   25d0e:	4803      	ldr	r0, [pc, #12]	; (25d1c <z_bss_zero+0x10>)
   25d10:	4a03      	ldr	r2, [pc, #12]	; (25d20 <z_bss_zero+0x14>)
   25d12:	2100      	movs	r1, #0
   25d14:	1a12      	subs	r2, r2, r0
   25d16:	f009 faff 	bl	2f318 <z_early_memset>
}
   25d1a:	bd08      	pop	{r3, pc}
   25d1c:	20000fb8 	.word	0x20000fb8
   25d20:	200057fc 	.word	0x200057fc

00025d24 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   25d24:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   25d26:	2300      	movs	r3, #0
{
   25d28:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   25d2a:	2201      	movs	r2, #1
   25d2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   25d30:	4e13      	ldr	r6, [pc, #76]	; (25d80 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25d32:	4d14      	ldr	r5, [pc, #80]	; (25d84 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   25d34:	9301      	str	r3, [sp, #4]
   25d36:	220f      	movs	r2, #15
   25d38:	e9cd 3202 	strd	r3, r2, [sp, #8]
   25d3c:	4912      	ldr	r1, [pc, #72]	; (25d88 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25d3e:	2314      	movs	r3, #20
   25d40:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   25d44:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   25d48:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   25d4a:	f44f 70c0 	mov.w	r0, #384	; 0x180
   25d4e:	fb00 1104 	mla	r1, r0, r4, r1
   25d52:	4b0e      	ldr	r3, [pc, #56]	; (25d8c <z_init_cpu+0x68>)
   25d54:	9500      	str	r5, [sp, #0]
   25d56:	f44f 72a0 	mov.w	r2, #320	; 0x140
   25d5a:	4630      	mov	r0, r6
   25d5c:	f000 f8dc 	bl	25f18 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25d60:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   25d62:	4a0b      	ldr	r2, [pc, #44]	; (25d90 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   25d64:	60ee      	str	r6, [r5, #12]
   25d66:	f023 0304 	bic.w	r3, r3, #4
   25d6a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   25d6c:	f44f 6304 	mov.w	r3, #2112	; 0x840
   25d70:	fb04 3303 	mla	r3, r4, r3, r3
   25d74:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   25d76:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   25d78:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   25d7a:	b006      	add	sp, #24
   25d7c:	bd70      	pop	{r4, r5, r6, pc}
   25d7e:	bf00      	nop
   25d80:	200030f0 	.word	0x200030f0
   25d84:	20004a90 	.word	0x20004a90
   25d88:	20008d40 	.word	0x20008d40
   25d8c:	0002608d 	.word	0x0002608d
   25d90:	20008500 	.word	0x20008500

00025d94 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   25d94:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   25d96:	2000      	movs	r0, #0
{
   25d98:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   25d9a:	f7ff ff79 	bl	25c90 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   25d9e:	4b2e      	ldr	r3, [pc, #184]	; (25e58 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   25da0:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   25da4:	4d2d      	ldr	r5, [pc, #180]	; (25e5c <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   25da6:	4e2e      	ldr	r6, [pc, #184]	; (25e60 <z_cstart+0xcc>)
   25da8:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25daa:	4f2e      	ldr	r7, [pc, #184]	; (25e64 <z_cstart+0xd0>)
   25dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   25db0:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25db2:	23e0      	movs	r3, #224	; 0xe0
   25db4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   25db8:	2400      	movs	r4, #0
   25dba:	2320      	movs	r3, #32
   25dbc:	77eb      	strb	r3, [r5, #31]
   25dbe:	762c      	strb	r4, [r5, #24]
   25dc0:	766c      	strb	r4, [r5, #25]
   25dc2:	76ac      	strb	r4, [r5, #26]
   25dc4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   25dc8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   25dca:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   25dce:	626b      	str	r3, [r5, #36]	; 0x24
   25dd0:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   25dd4:	f7f1 fc32 	bl	1763c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   25dd8:	f7f0 ff74 	bl	16cc4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   25ddc:	f04f 33ff 	mov.w	r3, #4294967295
   25de0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   25de2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   25de4:	f7f1 fd86 	bl	178f4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   25de8:	f7f1 fcca 	bl	17780 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   25dec:	f7ee fd76 	bl	148dc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   25df0:	f240 1301 	movw	r3, #257	; 0x101
   25df4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   25df8:	ab06      	add	r3, sp, #24
   25dfa:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   25dfc:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   25e00:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   25e02:	f009 fa7d 	bl	2f300 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   25e06:	2001      	movs	r0, #1
   25e08:	f7ff ff42 	bl	25c90 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   25e0c:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   25e0e:	4d16      	ldr	r5, [pc, #88]	; (25e68 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   25e10:	f7ff ff3e 	bl	25c90 <z_sys_init_run_level>
	z_sched_init();
   25e14:	f000 feb8 	bl	26b88 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25e18:	4b14      	ldr	r3, [pc, #80]	; (25e6c <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   25e1a:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25e1c:	9305      	str	r3, [sp, #20]
   25e1e:	2301      	movs	r3, #1
   25e20:	4913      	ldr	r1, [pc, #76]	; (25e70 <z_cstart+0xdc>)
   25e22:	9400      	str	r4, [sp, #0]
   25e24:	e9cd 4303 	strd	r4, r3, [sp, #12]
   25e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
   25e2c:	463b      	mov	r3, r7
   25e2e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   25e32:	4628      	mov	r0, r5
   25e34:	f000 f870 	bl	25f18 <z_setup_new_thread>
   25e38:	7b6a      	ldrb	r2, [r5, #13]
   25e3a:	4606      	mov	r6, r0
   25e3c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   25e40:	4628      	mov	r0, r5
   25e42:	736a      	strb	r2, [r5, #13]
   25e44:	f009 fd42 	bl	2f8cc <z_ready_thread>
	z_init_cpu(0);
   25e48:	4620      	mov	r0, r4
   25e4a:	f7ff ff6b 	bl	25d24 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   25e4e:	463a      	mov	r2, r7
   25e50:	4631      	mov	r1, r6
   25e52:	4628      	mov	r0, r5
   25e54:	f7f1 f8ba 	bl	16fcc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   25e58:	20008d40 	.word	0x20008d40
   25e5c:	e000ed00 	.word	0xe000ed00
   25e60:	20004a90 	.word	0x20004a90
   25e64:	00025cd9 	.word	0x00025cd9
   25e68:	20003170 	.word	0x20003170
   25e6c:	00033f0e 	.word	0x00033f0e
   25e70:	20008ec0 	.word	0x20008ec0

00025e74 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   25e74:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25e76:	4c06      	ldr	r4, [pc, #24]	; (25e90 <statics_init+0x1c>)
   25e78:	4d06      	ldr	r5, [pc, #24]	; (25e94 <statics_init+0x20>)
   25e7a:	42ac      	cmp	r4, r5
   25e7c:	d301      	bcc.n	25e82 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   25e7e:	2000      	movs	r0, #0
   25e80:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   25e82:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   25e86:	4620      	mov	r0, r4
   25e88:	f009 fa4a 	bl	2f320 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25e8c:	3414      	adds	r4, #20
   25e8e:	e7f4      	b.n	25e7a <statics_init+0x6>
   25e90:	20000c48 	.word	0x20000c48
   25e94:	20000c48 	.word	0x20000c48

00025e98 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   25e98:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   25e9a:	4c06      	ldr	r4, [pc, #24]	; (25eb4 <init_mem_slab_module+0x1c>)
   25e9c:	4d06      	ldr	r5, [pc, #24]	; (25eb8 <init_mem_slab_module+0x20>)
	int rc = 0;
   25e9e:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   25ea0:	42ac      	cmp	r4, r5
   25ea2:	d300      	bcc.n	25ea6 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   25ea4:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   25ea6:	4620      	mov	r0, r4
   25ea8:	f009 faac 	bl	2f404 <create_free_list>
		if (rc < 0) {
   25eac:	2800      	cmp	r0, #0
   25eae:	dbf9      	blt.n	25ea4 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   25eb0:	341c      	adds	r4, #28
   25eb2:	e7f5      	b.n	25ea0 <init_mem_slab_module+0x8>
   25eb4:	20000bd8 	.word	0x20000bd8
   25eb8:	20000c48 	.word	0x20000c48

00025ebc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   25ebc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25ebe:	460c      	mov	r4, r1
	__asm__ volatile(
   25ec0:	f04f 0540 	mov.w	r5, #64	; 0x40
   25ec4:	f3ef 8111 	mrs	r1, BASEPRI
   25ec8:	f385 8812 	msr	BASEPRI_MAX, r5
   25ecc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   25ed0:	6945      	ldr	r5, [r0, #20]
   25ed2:	b15d      	cbz	r5, 25eec <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   25ed4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   25ed6:	682b      	ldr	r3, [r5, #0]
   25ed8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   25eda:	6983      	ldr	r3, [r0, #24]
   25edc:	3301      	adds	r3, #1
   25ede:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   25ee0:	2000      	movs	r0, #0
	__asm__ volatile(
   25ee2:	f381 8811 	msr	BASEPRI, r1
   25ee6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   25eea:	e011      	b.n	25f10 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   25eec:	ea52 0603 	orrs.w	r6, r2, r3
   25ef0:	d103      	bne.n	25efa <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   25ef2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   25ef4:	f06f 000b 	mvn.w	r0, #11
   25ef8:	e7f3      	b.n	25ee2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   25efa:	e9cd 2300 	strd	r2, r3, [sp]
   25efe:	4602      	mov	r2, r0
   25f00:	3008      	adds	r0, #8
   25f02:	f000 fd4b 	bl	2699c <z_pend_curr>
		if (result == 0) {
   25f06:	b918      	cbnz	r0, 25f10 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   25f08:	4b02      	ldr	r3, [pc, #8]	; (25f14 <k_mem_slab_alloc+0x58>)
   25f0a:	689b      	ldr	r3, [r3, #8]
   25f0c:	695b      	ldr	r3, [r3, #20]
   25f0e:	6023      	str	r3, [r4, #0]
}
   25f10:	b002      	add	sp, #8
   25f12:	bd70      	pop	{r4, r5, r6, pc}
   25f14:	20004a90 	.word	0x20004a90

00025f18 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   25f18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   25f1c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   25f1e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   25f20:	2604      	movs	r6, #4
   25f22:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   25f24:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   25f26:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   25f28:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   25f2c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25f2e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   25f30:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25f34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   25f36:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25f38:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   25f3c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   25f3e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   25f42:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   25f46:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   25f48:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   25f4a:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25f4c:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25f50:	9202      	str	r2, [sp, #8]
   25f52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25f54:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   25f56:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25f5a:	9200      	str	r2, [sp, #0]
   25f5c:	4642      	mov	r2, r8
{
   25f5e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25f60:	f7f1 f802 	bl	16f68 <arch_new_thread>
	if (!_current) {
   25f64:	4b04      	ldr	r3, [pc, #16]	; (25f78 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   25f66:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   25f68:	689b      	ldr	r3, [r3, #8]
   25f6a:	b103      	cbz	r3, 25f6e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   25f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   25f6e:	6763      	str	r3, [r4, #116]	; 0x74
}
   25f70:	4640      	mov	r0, r8
   25f72:	b004      	add	sp, #16
   25f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25f78:	20004a90 	.word	0x20004a90

00025f7c <z_impl_k_thread_create>:
{
   25f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   25f7e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   25f80:	2500      	movs	r5, #0
   25f82:	9505      	str	r5, [sp, #20]
   25f84:	9d10      	ldr	r5, [sp, #64]	; 0x40
   25f86:	9504      	str	r5, [sp, #16]
   25f88:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   25f8a:	9503      	str	r5, [sp, #12]
   25f8c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   25f8e:	9502      	str	r5, [sp, #8]
{
   25f90:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   25f94:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   25f96:	9501      	str	r5, [sp, #4]
   25f98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   25f9a:	9500      	str	r5, [sp, #0]
{
   25f9c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   25f9e:	f7ff ffbb 	bl	25f18 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   25fa2:	f1b6 3fff 	cmp.w	r6, #4294967295
   25fa6:	bf08      	it	eq
   25fa8:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   25fac:	d005      	beq.n	25fba <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25fae:	ea56 0307 	orrs.w	r3, r6, r7
   25fb2:	d105      	bne.n	25fc0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   25fb4:	4620      	mov	r0, r4
   25fb6:	f000 fd67 	bl	26a88 <z_sched_start>
}
   25fba:	4620      	mov	r0, r4
   25fbc:	b007      	add	sp, #28
   25fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25fc0:	4903      	ldr	r1, [pc, #12]	; (25fd0 <z_impl_k_thread_create+0x54>)
   25fc2:	463a      	mov	r2, r7
   25fc4:	4633      	mov	r3, r6
   25fc6:	f104 0018 	add.w	r0, r4, #24
   25fca:	f000 ff97 	bl	26efc <z_add_timeout>
   25fce:	e7f4      	b.n	25fba <z_impl_k_thread_create+0x3e>
   25fd0:	0002f955 	.word	0x0002f955

00025fd4 <z_init_static_threads>:
{
   25fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25fd8:	4c29      	ldr	r4, [pc, #164]	; (26080 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   25fda:	4d2a      	ldr	r5, [pc, #168]	; (26084 <z_init_static_threads+0xb0>)
{
   25fdc:	b087      	sub	sp, #28
   25fde:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   25fe0:	42ae      	cmp	r6, r5
   25fe2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   25fe6:	d30f      	bcc.n	26008 <z_init_static_threads+0x34>
	k_sched_lock();
   25fe8:	f000 fd9e 	bl	26b28 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   25fec:	4c24      	ldr	r4, [pc, #144]	; (26080 <z_init_static_threads+0xac>)
   25fee:	f8df 9098 	ldr.w	r9, [pc, #152]	; 26088 <z_init_static_threads+0xb4>
   25ff2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   25ff6:	f240 37e7 	movw	r7, #999	; 0x3e7
   25ffa:	42ac      	cmp	r4, r5
   25ffc:	d320      	bcc.n	26040 <z_init_static_threads+0x6c>
}
   25ffe:	b007      	add	sp, #28
   26000:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   26004:	f000 bda4 	b.w	26b50 <k_sched_unlock>
		z_setup_new_thread(
   26008:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2600c:	9305      	str	r3, [sp, #20]
   2600e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   26012:	9304      	str	r3, [sp, #16]
   26014:	f854 3c10 	ldr.w	r3, [r4, #-16]
   26018:	9303      	str	r3, [sp, #12]
   2601a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2601e:	9302      	str	r3, [sp, #8]
   26020:	f854 3c18 	ldr.w	r3, [r4, #-24]
   26024:	9301      	str	r3, [sp, #4]
   26026:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2602a:	9300      	str	r3, [sp, #0]
   2602c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   26030:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   26034:	f7ff ff70 	bl	25f18 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   26038:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2603c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2603e:	e7ce      	b.n	25fde <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   26040:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26042:	1c5a      	adds	r2, r3, #1
   26044:	d00d      	beq.n	26062 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   26046:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2604a:	2100      	movs	r1, #0
   2604c:	4638      	mov	r0, r7
   2604e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26052:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   26056:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2605a:	d104      	bne.n	26066 <z_init_static_threads+0x92>
	z_sched_start(thread);
   2605c:	4640      	mov	r0, r8
   2605e:	f000 fd13 	bl	26a88 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   26062:	342c      	adds	r4, #44	; 0x2c
   26064:	e7c9      	b.n	25ffa <z_init_static_threads+0x26>
   26066:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2606a:	2300      	movs	r3, #0
   2606c:	f7db f848 	bl	1100 <__aeabi_uldivmod>
   26070:	4602      	mov	r2, r0
   26072:	460b      	mov	r3, r1
   26074:	f108 0018 	add.w	r0, r8, #24
   26078:	4649      	mov	r1, r9
   2607a:	f000 ff3f 	bl	26efc <z_add_timeout>
   2607e:	e7f0      	b.n	26062 <z_init_static_threads+0x8e>
   26080:	000301b8 	.word	0x000301b8
   26084:	000301e4 	.word	0x000301e4
   26088:	0002f955 	.word	0x0002f955

0002608c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   2608c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2608e:	4c0b      	ldr	r4, [pc, #44]	; (260bc <idle+0x30>)
	return !z_sys_post_kernel;
   26090:	4d0b      	ldr	r5, [pc, #44]	; (260c0 <idle+0x34>)
	__asm__ volatile(
   26092:	f04f 0240 	mov.w	r2, #64	; 0x40
   26096:	f3ef 8311 	mrs	r3, BASEPRI
   2609a:	f382 8812 	msr	BASEPRI_MAX, r2
   2609e:	f3bf 8f6f 	isb	sy
   260a2:	f009 fd15 	bl	2fad0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   260a6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   260a8:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   260aa:	b913      	cbnz	r3, 260b2 <idle+0x26>
	arch_cpu_idle();
   260ac:	f7f0 fe10 	bl	16cd0 <arch_cpu_idle>
}
   260b0:	e7ef      	b.n	26092 <idle+0x6>
   260b2:	f7ef f8df 	bl	15274 <pm_system_suspend>
   260b6:	2800      	cmp	r0, #0
   260b8:	d1eb      	bne.n	26092 <idle+0x6>
   260ba:	e7f7      	b.n	260ac <idle+0x20>
   260bc:	20004a90 	.word	0x20004a90
   260c0:	200057f7 	.word	0x200057f7

000260c4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   260c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   260c8:	4604      	mov	r4, r0
   260ca:	4617      	mov	r7, r2
   260cc:	461e      	mov	r6, r3
   260ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   260d2:	f3ef 8811 	mrs	r8, BASEPRI
   260d6:	f383 8812 	msr	BASEPRI_MAX, r3
   260da:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   260de:	68c3      	ldr	r3, [r0, #12]
   260e0:	4a33      	ldr	r2, [pc, #204]	; (261b0 <z_impl_k_mutex_lock+0xec>)
   260e2:	b17b      	cbz	r3, 26104 <z_impl_k_mutex_lock+0x40>
   260e4:	6880      	ldr	r0, [r0, #8]
   260e6:	6891      	ldr	r1, [r2, #8]
   260e8:	4288      	cmp	r0, r1
   260ea:	d019      	beq.n	26120 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   260ec:	ea57 0306 	orrs.w	r3, r7, r6
   260f0:	d118      	bne.n	26124 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   260f2:	f388 8811 	msr	BASEPRI, r8
   260f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   260fa:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   260fe:	b002      	add	sp, #8
   26100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   26104:	6891      	ldr	r1, [r2, #8]
   26106:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2610a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   2610c:	3301      	adds	r3, #1
   2610e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   26110:	6893      	ldr	r3, [r2, #8]
   26112:	60a3      	str	r3, [r4, #8]
   26114:	f388 8811 	msr	BASEPRI, r8
   26118:	f3bf 8f6f 	isb	sy
		return 0;
   2611c:	2000      	movs	r0, #0
   2611e:	e7ee      	b.n	260fe <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   26120:	6921      	ldr	r1, [r4, #16]
   26122:	e7f2      	b.n	2610a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   26124:	f991 100e 	ldrsb.w	r1, [r1, #14]
   26128:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2612c:	4299      	cmp	r1, r3
   2612e:	bfa8      	it	ge
   26130:	4619      	movge	r1, r3
   26132:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   26136:	4291      	cmp	r1, r2
   26138:	bfb8      	it	lt
   2613a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2613c:	428b      	cmp	r3, r1
   2613e:	dd2e      	ble.n	2619e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   26140:	f009 f9c1 	bl	2f4c6 <adjust_owner_prio.isra.0>
   26144:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   26146:	e9cd 7600 	strd	r7, r6, [sp]
   2614a:	481a      	ldr	r0, [pc, #104]	; (261b4 <z_impl_k_mutex_lock+0xf0>)
   2614c:	4622      	mov	r2, r4
   2614e:	4641      	mov	r1, r8
   26150:	f000 fc24 	bl	2699c <z_pend_curr>
	if (got_mutex == 0) {
   26154:	2800      	cmp	r0, #0
   26156:	d0e1      	beq.n	2611c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   26158:	f04f 0340 	mov.w	r3, #64	; 0x40
   2615c:	f3ef 8611 	mrs	r6, BASEPRI
   26160:	f383 8812 	msr	BASEPRI_MAX, r3
   26164:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   26168:	68a0      	ldr	r0, [r4, #8]
   2616a:	b1d0      	cbz	r0, 261a2 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2616c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2616e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26170:	429c      	cmp	r4, r3
   26172:	d00a      	beq.n	2618a <z_impl_k_mutex_lock+0xc6>
   26174:	b14b      	cbz	r3, 2618a <z_impl_k_mutex_lock+0xc6>
   26176:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2617a:	4299      	cmp	r1, r3
   2617c:	bfa8      	it	ge
   2617e:	4619      	movge	r1, r3
   26180:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   26184:	4299      	cmp	r1, r3
   26186:	bfb8      	it	lt
   26188:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   2618a:	f009 f99c 	bl	2f4c6 <adjust_owner_prio.isra.0>
   2618e:	b140      	cbz	r0, 261a2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   26190:	4808      	ldr	r0, [pc, #32]	; (261b4 <z_impl_k_mutex_lock+0xf0>)
   26192:	4631      	mov	r1, r6
   26194:	f000 fc66 	bl	26a64 <z_reschedule>
	return -EAGAIN;
   26198:	f06f 000a 	mvn.w	r0, #10
   2619c:	e7af      	b.n	260fe <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   2619e:	2500      	movs	r5, #0
   261a0:	e7d1      	b.n	26146 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   261a2:	2d00      	cmp	r5, #0
   261a4:	d1f4      	bne.n	26190 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   261a6:	f386 8811 	msr	BASEPRI, r6
   261aa:	f3bf 8f6f 	isb	sy
   261ae:	e7f3      	b.n	26198 <z_impl_k_mutex_lock+0xd4>
   261b0:	20004a90 	.word	0x20004a90
   261b4:	200057f8 	.word	0x200057f8

000261b8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   261b8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   261ba:	6883      	ldr	r3, [r0, #8]
{
   261bc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   261be:	b36b      	cbz	r3, 2621c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   261c0:	4a19      	ldr	r2, [pc, #100]	; (26228 <z_impl_k_mutex_unlock+0x70>)
   261c2:	6892      	ldr	r2, [r2, #8]
   261c4:	4293      	cmp	r3, r2
   261c6:	d12c      	bne.n	26222 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   261c8:	68c3      	ldr	r3, [r0, #12]
   261ca:	2b01      	cmp	r3, #1
   261cc:	d903      	bls.n	261d6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   261ce:	3b01      	subs	r3, #1
   261d0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   261d2:	2000      	movs	r0, #0
}
   261d4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   261d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   261da:	f3ef 8511 	mrs	r5, BASEPRI
   261de:	f383 8812 	msr	BASEPRI_MAX, r3
   261e2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   261e6:	6901      	ldr	r1, [r0, #16]
   261e8:	6880      	ldr	r0, [r0, #8]
   261ea:	f009 f96c 	bl	2f4c6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   261ee:	4620      	mov	r0, r4
   261f0:	f009 fbcb 	bl	2f98a <z_unpend_first_thread>
	mutex->owner = new_owner;
   261f4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   261f6:	b158      	cbz	r0, 26210 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   261f8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   261fc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   261fe:	2200      	movs	r2, #0
   26200:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   26202:	f009 fb63 	bl	2f8cc <z_ready_thread>
		z_reschedule(&lock, key);
   26206:	4809      	ldr	r0, [pc, #36]	; (2622c <z_impl_k_mutex_unlock+0x74>)
   26208:	4629      	mov	r1, r5
   2620a:	f000 fc2b 	bl	26a64 <z_reschedule>
   2620e:	e7e0      	b.n	261d2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   26210:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   26212:	f385 8811 	msr	BASEPRI, r5
   26216:	f3bf 8f6f 	isb	sy
   2621a:	e7da      	b.n	261d2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   2621c:	f06f 0015 	mvn.w	r0, #21
   26220:	e7d8      	b.n	261d4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   26222:	f04f 30ff 	mov.w	r0, #4294967295
   26226:	e7d5      	b.n	261d4 <z_impl_k_mutex_unlock+0x1c>
   26228:	20004a90 	.word	0x20004a90
   2622c:	200057f8 	.word	0x200057f8

00026230 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   26230:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26232:	4611      	mov	r1, r2
	__asm__ volatile(
   26234:	f04f 0240 	mov.w	r2, #64	; 0x40
   26238:	f3ef 8511 	mrs	r5, BASEPRI
   2623c:	f382 8812 	msr	BASEPRI_MAX, r2
   26240:	f3bf 8f6f 	isb	sy
   26244:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   26246:	b19c      	cbz	r4, 26270 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26248:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2624a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2624c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   26250:	4294      	cmp	r4, r2
	list->head = node;
   26252:	6003      	str	r3, [r0, #0]
	list->tail = node;
   26254:	bf08      	it	eq
   26256:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   26258:	2101      	movs	r1, #1
   2625a:	4620      	mov	r0, r4
   2625c:	f009 f9a8 	bl	2f5b0 <z_queue_node_peek>
   26260:	4604      	mov	r4, r0
	__asm__ volatile(
   26262:	f385 8811 	msr	BASEPRI, r5
   26266:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2626a:	4620      	mov	r0, r4
   2626c:	b003      	add	sp, #12
   2626e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26270:	ea51 0203 	orrs.w	r2, r1, r3
   26274:	d0f5      	beq.n	26262 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26276:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2627a:	e9cd 1300 	strd	r1, r3, [sp]
   2627e:	4610      	mov	r0, r2
   26280:	4629      	mov	r1, r5
   26282:	f000 fb8b 	bl	2699c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   26286:	2800      	cmp	r0, #0
   26288:	d1ef      	bne.n	2626a <z_impl_k_queue_get+0x3a>
   2628a:	4b02      	ldr	r3, [pc, #8]	; (26294 <z_impl_k_queue_get+0x64>)
   2628c:	689b      	ldr	r3, [r3, #8]
   2628e:	695c      	ldr	r4, [r3, #20]
   26290:	e7eb      	b.n	2626a <z_impl_k_queue_get+0x3a>
   26292:	bf00      	nop
   26294:	20004a90 	.word	0x20004a90

00026298 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   26298:	b538      	push	{r3, r4, r5, lr}
   2629a:	4604      	mov	r4, r0
	__asm__ volatile(
   2629c:	f04f 0340 	mov.w	r3, #64	; 0x40
   262a0:	f3ef 8511 	mrs	r5, BASEPRI
   262a4:	f383 8812 	msr	BASEPRI_MAX, r3
   262a8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   262ac:	f009 fb6d 	bl	2f98a <z_unpend_first_thread>

	if (thread != NULL) {
   262b0:	b148      	cbz	r0, 262c6 <z_impl_k_sem_give+0x2e>
   262b2:	2200      	movs	r2, #0
   262b4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   262b6:	f009 fb09 	bl	2f8cc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   262ba:	4629      	mov	r1, r5
   262bc:	4808      	ldr	r0, [pc, #32]	; (262e0 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   262be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   262c2:	f000 bbcf 	b.w	26a64 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   262c6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   262ca:	429a      	cmp	r2, r3
   262cc:	bf18      	it	ne
   262ce:	3301      	addne	r3, #1
   262d0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   262d2:	2102      	movs	r1, #2
   262d4:	f104 0010 	add.w	r0, r4, #16
   262d8:	f009 fd9f 	bl	2fe1a <z_handle_obj_poll_events>
}
   262dc:	e7ed      	b.n	262ba <z_impl_k_sem_give+0x22>
   262de:	bf00      	nop
   262e0:	200057f8 	.word	0x200057f8

000262e4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   262e4:	b513      	push	{r0, r1, r4, lr}
   262e6:	f04f 0440 	mov.w	r4, #64	; 0x40
   262ea:	f3ef 8111 	mrs	r1, BASEPRI
   262ee:	f384 8812 	msr	BASEPRI_MAX, r4
   262f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   262f6:	6884      	ldr	r4, [r0, #8]
   262f8:	b144      	cbz	r4, 2630c <z_impl_k_sem_take+0x28>
		sem->count--;
   262fa:	3c01      	subs	r4, #1
   262fc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   262fe:	f381 8811 	msr	BASEPRI, r1
   26302:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   26306:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   26308:	b002      	add	sp, #8
   2630a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2630c:	ea52 0403 	orrs.w	r4, r2, r3
   26310:	d106      	bne.n	26320 <z_impl_k_sem_take+0x3c>
   26312:	f381 8811 	msr	BASEPRI, r1
   26316:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2631a:	f06f 000f 	mvn.w	r0, #15
   2631e:	e7f3      	b.n	26308 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   26320:	e9cd 2300 	strd	r2, r3, [sp]
   26324:	4602      	mov	r2, r0
   26326:	4802      	ldr	r0, [pc, #8]	; (26330 <z_impl_k_sem_take+0x4c>)
   26328:	f000 fb38 	bl	2699c <z_pend_curr>
	return ret;
   2632c:	e7ec      	b.n	26308 <z_impl_k_sem_take+0x24>
   2632e:	bf00      	nop
   26330:	200057f8 	.word	0x200057f8

00026334 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   26334:	b570      	push	{r4, r5, r6, lr}
   26336:	4604      	mov	r4, r0
	__asm__ volatile(
   26338:	f04f 0340 	mov.w	r3, #64	; 0x40
   2633c:	f3ef 8511 	mrs	r5, BASEPRI
   26340:	f383 8812 	msr	BASEPRI_MAX, r3
   26344:	f3bf 8f6f 	isb	sy
   26348:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   2634c:	4620      	mov	r0, r4
   2634e:	f009 fb1c 	bl	2f98a <z_unpend_first_thread>
		if (thread == NULL) {
   26352:	b118      	cbz	r0, 2635c <z_impl_k_sem_reset+0x28>
   26354:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   26356:	f009 fab9 	bl	2f8cc <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   2635a:	e7f7      	b.n	2634c <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   2635c:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2635e:	2102      	movs	r1, #2
   26360:	f104 0010 	add.w	r0, r4, #16
   26364:	f009 fd59 	bl	2fe1a <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   26368:	4629      	mov	r1, r5
   2636a:	4802      	ldr	r0, [pc, #8]	; (26374 <z_impl_k_sem_reset+0x40>)
}
   2636c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   26370:	f000 bb78 	b.w	26a64 <z_reschedule>
   26374:	200057f8 	.word	0x200057f8

00026378 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   26378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   2637a:	4b09      	ldr	r3, [pc, #36]	; (263a0 <k_sys_work_q_init+0x28>)
   2637c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2637e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   26380:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   26382:	9300      	str	r3, [sp, #0]
   26384:	4907      	ldr	r1, [pc, #28]	; (263a4 <k_sys_work_q_init+0x2c>)
   26386:	4808      	ldr	r0, [pc, #32]	; (263a8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   26388:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   2638c:	f04f 33ff 	mov.w	r3, #4294967295
   26390:	f44f 6200 	mov.w	r2, #2048	; 0x800
   26394:	f000 f924 	bl	265e0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   26398:	4620      	mov	r0, r4
   2639a:	b004      	add	sp, #16
   2639c:	bd10      	pop	{r4, pc}
   2639e:	bf00      	nop
   263a0:	00033f16 	.word	0x00033f16
   263a4:	20009700 	.word	0x20009700
   263a8:	200031f0 	.word	0x200031f0

000263ac <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   263ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   263b0:	4e4a      	ldr	r6, [pc, #296]	; (264dc <work_queue_main+0x130>)
   263b2:	b085      	sub	sp, #20
   263b4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   263b6:	f04f 38ff 	mov.w	r8, #4294967295
   263ba:	f04f 39ff 	mov.w	r9, #4294967295
   263be:	f04f 0340 	mov.w	r3, #64	; 0x40
   263c2:	f3ef 8711 	mrs	r7, BASEPRI
   263c6:	f383 8812 	msr	BASEPRI_MAX, r3
   263ca:	f3bf 8f6f 	isb	sy
   263ce:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   263d2:	b98d      	cbnz	r5, 263f8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   263d4:	2102      	movs	r1, #2
   263d6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   263da:	f009 f92a 	bl	2f632 <flag_test_and_clear>
   263de:	2800      	cmp	r0, #0
   263e0:	d143      	bne.n	2646a <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   263e2:	2300      	movs	r3, #0
   263e4:	e9cd 8900 	strd	r8, r9, [sp]
   263e8:	9302      	str	r3, [sp, #8]
   263ea:	f104 0288 	add.w	r2, r4, #136	; 0x88
   263ee:	4639      	mov	r1, r7
   263f0:	483b      	ldr	r0, [pc, #236]	; (264e0 <work_queue_main+0x134>)
   263f2:	f000 fced 	bl	26dd0 <z_sched_wait>
			continue;
   263f6:	e7e2      	b.n	263be <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   263f8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   263fc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   263fe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26402:	4295      	cmp	r5, r2
	list->tail = node;
   26404:	bf08      	it	eq
   26406:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   2640a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2640e:	f043 0302 	orr.w	r3, r3, #2
   26412:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   26416:	68eb      	ldr	r3, [r5, #12]
   26418:	f023 0304 	bic.w	r3, r3, #4
   2641c:	f043 0301 	orr.w	r3, r3, #1
   26420:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   26422:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   26424:	f387 8811 	msr	BASEPRI, r7
   26428:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   2642c:	4628      	mov	r0, r5
   2642e:	4798      	blx	r3
	__asm__ volatile(
   26430:	f04f 0340 	mov.w	r3, #64	; 0x40
   26434:	f3ef 8b11 	mrs	fp, BASEPRI
   26438:	f383 8812 	msr	BASEPRI_MAX, r3
   2643c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   26440:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26442:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   26444:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26448:	d419      	bmi.n	2647e <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   2644a:	60ea      	str	r2, [r5, #12]
   2644c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   26450:	f023 0302 	bic.w	r3, r3, #2
   26454:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   26458:	f38b 8811 	msr	BASEPRI, fp
   2645c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   26460:	05db      	lsls	r3, r3, #23
   26462:	d4ac      	bmi.n	263be <work_queue_main+0x12>
	z_impl_k_yield();
   26464:	f000 fb98 	bl	26b98 <z_impl_k_yield>
}
   26468:	e7a9      	b.n	263be <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   2646a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2646e:	2200      	movs	r2, #0
   26470:	2101      	movs	r1, #1
   26472:	4628      	mov	r0, r5
   26474:	f009 fae3 	bl	2fa3e <z_sched_wake>
   26478:	2800      	cmp	r0, #0
   2647a:	d1f8      	bne.n	2646e <work_queue_main+0xc2>
   2647c:	e7b1      	b.n	263e2 <work_queue_main+0x36>
	return list->head;
   2647e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   26480:	f023 0303 	bic.w	r3, r3, #3
   26484:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26486:	2800      	cmp	r0, #0
   26488:	d0e0      	beq.n	2644c <work_queue_main+0xa0>
	return node->next;
   2648a:	2700      	movs	r7, #0
   2648c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   26490:	463b      	mov	r3, r7
   26492:	2800      	cmp	r0, #0
   26494:	d0da      	beq.n	2644c <work_queue_main+0xa0>
		if (wc->work == work) {
   26496:	6842      	ldr	r2, [r0, #4]
   26498:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   2649a:	4601      	mov	r1, r0
		if (wc->work == work) {
   2649c:	d10c      	bne.n	264b8 <work_queue_main+0x10c>
	return node->next;
   2649e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   264a0:	b99f      	cbnz	r7, 264ca <work_queue_main+0x11e>
   264a2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   264a4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   264a6:	4282      	cmp	r2, r0
   264a8:	d100      	bne.n	264ac <work_queue_main+0x100>
	list->tail = node;
   264aa:	6071      	str	r1, [r6, #4]
	parent->next = child;
   264ac:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   264b0:	f7ff fef2 	bl	26298 <z_impl_k_sem_give>
}
   264b4:	4639      	mov	r1, r7
   264b6:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   264b8:	f1ba 0f00 	cmp.w	sl, #0
   264bc:	d00b      	beq.n	264d6 <work_queue_main+0x12a>
	return node->next;
   264be:	f8da 2000 	ldr.w	r2, [sl]
   264c2:	4650      	mov	r0, sl
   264c4:	460f      	mov	r7, r1
   264c6:	4692      	mov	sl, r2
   264c8:	e7e3      	b.n	26492 <work_queue_main+0xe6>
	parent->next = child;
   264ca:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   264cc:	6872      	ldr	r2, [r6, #4]
   264ce:	4282      	cmp	r2, r0
	list->tail = node;
   264d0:	bf08      	it	eq
   264d2:	6077      	streq	r7, [r6, #4]
}
   264d4:	e7ea      	b.n	264ac <work_queue_main+0x100>
   264d6:	4652      	mov	r2, sl
   264d8:	e7f3      	b.n	264c2 <work_queue_main+0x116>
   264da:	bf00      	nop
   264dc:	20004ab4 	.word	0x20004ab4
   264e0:	200057f8 	.word	0x200057f8

000264e4 <cancel_sync_locked>:
{
   264e4:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   264e6:	68c3      	ldr	r3, [r0, #12]
   264e8:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   264ec:	079b      	lsls	r3, r3, #30
{
   264ee:	4605      	mov	r5, r0
   264f0:	460c      	mov	r4, r1
	if (ret) {
   264f2:	d50d      	bpl.n	26510 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   264f4:	2201      	movs	r2, #1
   264f6:	2100      	movs	r1, #0
   264f8:	f104 0008 	add.w	r0, r4, #8
   264fc:	f009 f889 	bl	2f612 <z_impl_k_sem_init>
	parent->next = child;
   26500:	2300      	movs	r3, #0
   26502:	6023      	str	r3, [r4, #0]
	return list->tail;
   26504:	4b05      	ldr	r3, [pc, #20]	; (2651c <cancel_sync_locked+0x38>)
	canceler->work = work;
   26506:	6065      	str	r5, [r4, #4]
   26508:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2650a:	b91a      	cbnz	r2, 26514 <cancel_sync_locked+0x30>
	list->head = node;
   2650c:	e9c3 4400 	strd	r4, r4, [r3]
}
   26510:	4630      	mov	r0, r6
   26512:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   26514:	6014      	str	r4, [r2, #0]
	list->tail = node;
   26516:	605c      	str	r4, [r3, #4]
}
   26518:	e7fa      	b.n	26510 <cancel_sync_locked+0x2c>
   2651a:	bf00      	nop
   2651c:	20004ab4 	.word	0x20004ab4

00026520 <submit_to_queue_locked>:
{
   26520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   26522:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26524:	079a      	lsls	r2, r3, #30
{
   26526:	4604      	mov	r4, r0
   26528:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2652a:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2652e:	d42c      	bmi.n	2658a <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   26530:	075b      	lsls	r3, r3, #29
   26532:	d41a      	bmi.n	2656a <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   26534:	680b      	ldr	r3, [r1, #0]
   26536:	b90b      	cbnz	r3, 2653c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   26538:	6883      	ldr	r3, [r0, #8]
   2653a:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   2653c:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2653e:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   26540:	bf44      	itt	mi
   26542:	68a3      	ldrmi	r3, [r4, #8]
   26544:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   26546:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   26548:	bf4c      	ite	mi
   2654a:	2602      	movmi	r6, #2
		ret = 1;
   2654c:	2601      	movpl	r6, #1
	if (queue == NULL) {
   2654e:	2d00      	cmp	r5, #0
   26550:	d03a      	beq.n	265c8 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   26552:	4b1f      	ldr	r3, [pc, #124]	; (265d0 <submit_to_queue_locked+0xb0>)
   26554:	689b      	ldr	r3, [r3, #8]
   26556:	42ab      	cmp	r3, r5
   26558:	d00a      	beq.n	26570 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   2655a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2655e:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   26560:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   26564:	d414      	bmi.n	26590 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   26566:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   2656a:	2300      	movs	r3, #0
   2656c:	603b      	str	r3, [r7, #0]
	return ret;
   2656e:	e025      	b.n	265bc <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   26570:	f008 ff95 	bl	2f49e <k_is_in_isr>
   26574:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   26578:	2800      	cmp	r0, #0
   2657a:	d1f0      	bne.n	2655e <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2657c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2657e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   26582:	d5f0      	bpl.n	26566 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   26584:	b152      	cbz	r2, 2659c <submit_to_queue_locked+0x7c>
   26586:	075b      	lsls	r3, r3, #29
   26588:	d408      	bmi.n	2659c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   2658a:	f06f 060f 	mvn.w	r6, #15
   2658e:	e7ec      	b.n	2656a <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   26590:	2a00      	cmp	r2, #0
   26592:	d1fa      	bne.n	2658a <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   26594:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   26598:	2b00      	cmp	r3, #0
   2659a:	d1f6      	bne.n	2658a <submit_to_queue_locked+0x6a>
	parent->next = child;
   2659c:	2300      	movs	r3, #0
   2659e:	6023      	str	r3, [r4, #0]
	return list->tail;
   265a0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   265a4:	b963      	cbnz	r3, 265c0 <submit_to_queue_locked+0xa0>
	list->head = node;
   265a6:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   265aa:	4628      	mov	r0, r5
   265ac:	f009 f85b 	bl	2f666 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   265b0:	68e3      	ldr	r3, [r4, #12]
   265b2:	f043 0304 	orr.w	r3, r3, #4
   265b6:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   265b8:	683b      	ldr	r3, [r7, #0]
   265ba:	60a3      	str	r3, [r4, #8]
}
   265bc:	4630      	mov	r0, r6
   265be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   265c0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   265c2:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   265c6:	e7f0      	b.n	265aa <submit_to_queue_locked+0x8a>
		return -EINVAL;
   265c8:	f06f 0615 	mvn.w	r6, #21
   265cc:	e7cd      	b.n	2656a <submit_to_queue_locked+0x4a>
   265ce:	bf00      	nop
   265d0:	20004a90 	.word	0x20004a90

000265d4 <k_work_submit>:
{
   265d4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   265d6:	4801      	ldr	r0, [pc, #4]	; (265dc <k_work_submit+0x8>)
   265d8:	f009 b8cb 	b.w	2f772 <k_work_submit_to_queue>
   265dc:	200031f0 	.word	0x200031f0

000265e0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   265e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   265e2:	b089      	sub	sp, #36	; 0x24
   265e4:	4604      	mov	r4, r0
	list->head = NULL;
   265e6:	2000      	movs	r0, #0
	list->tail = NULL;
   265e8:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   265ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   265ee:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   265f2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   265f6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   265fa:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   265fe:	b31d      	cbz	r5, 26648 <k_work_queue_start+0x68>
   26600:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   26602:	2800      	cmp	r0, #0
   26604:	f240 1001 	movw	r0, #257	; 0x101
   26608:	bf08      	it	eq
   2660a:	2001      	moveq	r0, #1
	*flagp = flags;
   2660c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   26610:	2000      	movs	r0, #0
   26612:	f04f 36ff 	mov.w	r6, #4294967295
   26616:	f04f 37ff 	mov.w	r7, #4294967295
   2661a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2661e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   26622:	e9cd 6706 	strd	r6, r7, [sp, #24]
   26626:	4b09      	ldr	r3, [pc, #36]	; (2664c <k_work_queue_start+0x6c>)
   26628:	9400      	str	r4, [sp, #0]
   2662a:	4620      	mov	r0, r4
   2662c:	f7ff fca6 	bl	25f7c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   26630:	b125      	cbz	r5, 2663c <k_work_queue_start+0x5c>
   26632:	6829      	ldr	r1, [r5, #0]
   26634:	b111      	cbz	r1, 2663c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   26636:	4620      	mov	r0, r4
   26638:	f008 ff37 	bl	2f4aa <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2663c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   2663e:	b009      	add	sp, #36	; 0x24
   26640:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   26644:	f008 bf36 	b.w	2f4b4 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   26648:	2001      	movs	r0, #1
   2664a:	e7df      	b.n	2660c <k_work_queue_start+0x2c>
   2664c:	000263ad 	.word	0x000263ad

00026650 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   26650:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26652:	9001      	str	r0, [sp, #4]
   26654:	4608      	mov	r0, r1
	__asm__ volatile(
   26656:	f04f 0140 	mov.w	r1, #64	; 0x40
   2665a:	f3ef 8411 	mrs	r4, BASEPRI
   2665e:	f381 8812 	msr	BASEPRI_MAX, r1
   26662:	f3bf 8f6f 	isb	sy
	return *flagp;
   26666:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   26668:	f011 0f0e 	tst.w	r1, #14
   2666c:	d116      	bne.n	2669c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2666e:	ea53 0502 	orrs.w	r5, r3, r2
   26672:	d108      	bne.n	26686 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   26674:	a901      	add	r1, sp, #4
   26676:	f7ff ff53 	bl	26520 <submit_to_queue_locked>
	__asm__ volatile(
   2667a:	f384 8811 	msr	BASEPRI, r4
   2667e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   26682:	b003      	add	sp, #12
   26684:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   26686:	f041 0108 	orr.w	r1, r1, #8
   2668a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   2668c:	9901      	ldr	r1, [sp, #4]
   2668e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26690:	3010      	adds	r0, #16
   26692:	4903      	ldr	r1, [pc, #12]	; (266a0 <k_work_schedule_for_queue+0x50>)
   26694:	f000 fc32 	bl	26efc <z_add_timeout>
	return ret;
   26698:	2001      	movs	r0, #1
   2669a:	e7ee      	b.n	2667a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   2669c:	2000      	movs	r0, #0
   2669e:	e7ec      	b.n	2667a <k_work_schedule_for_queue+0x2a>
   266a0:	0002f6db 	.word	0x0002f6db

000266a4 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   266a4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   266a6:	4801      	ldr	r0, [pc, #4]	; (266ac <k_work_schedule+0x8>)
   266a8:	f7ff bfd2 	b.w	26650 <k_work_schedule_for_queue>
   266ac:	200031f0 	.word	0x200031f0

000266b0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   266b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   266b2:	460c      	mov	r4, r1
   266b4:	9001      	str	r0, [sp, #4]
   266b6:	4616      	mov	r6, r2
   266b8:	461d      	mov	r5, r3
	__asm__ volatile(
   266ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   266be:	f3ef 8711 	mrs	r7, BASEPRI
   266c2:	f383 8812 	msr	BASEPRI_MAX, r3
   266c6:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   266ca:	4608      	mov	r0, r1
   266cc:	f008 ffbc 	bl	2f648 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   266d0:	ea55 0306 	orrs.w	r3, r5, r6
   266d4:	d109      	bne.n	266ea <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   266d6:	a901      	add	r1, sp, #4
   266d8:	4620      	mov	r0, r4
   266da:	f7ff ff21 	bl	26520 <submit_to_queue_locked>
	__asm__ volatile(
   266de:	f387 8811 	msr	BASEPRI, r7
   266e2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   266e6:	b003      	add	sp, #12
   266e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   266ea:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   266ec:	4906      	ldr	r1, [pc, #24]	; (26708 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   266ee:	f043 0308 	orr.w	r3, r3, #8
   266f2:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   266f4:	9b01      	ldr	r3, [sp, #4]
   266f6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   266f8:	f104 0010 	add.w	r0, r4, #16
   266fc:	4632      	mov	r2, r6
   266fe:	462b      	mov	r3, r5
   26700:	f000 fbfc 	bl	26efc <z_add_timeout>
	return ret;
   26704:	2001      	movs	r0, #1
   26706:	e7ea      	b.n	266de <k_work_reschedule_for_queue+0x2e>
   26708:	0002f6db 	.word	0x0002f6db

0002670c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   2670c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2670e:	4801      	ldr	r0, [pc, #4]	; (26714 <k_work_reschedule+0x8>)
   26710:	f7ff bfce 	b.w	266b0 <k_work_reschedule_for_queue>
   26714:	200031f0 	.word	0x200031f0

00026718 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   26718:	89c3      	ldrh	r3, [r0, #14]
   2671a:	2b7f      	cmp	r3, #127	; 0x7f
   2671c:	d812      	bhi.n	26744 <sliceable+0x2c>
	int ret = slice_ticks;
   2671e:	4b0a      	ldr	r3, [pc, #40]	; (26748 <sliceable+0x30>)
   26720:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   26722:	b163      	cbz	r3, 2673e <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   26724:	4b09      	ldr	r3, [pc, #36]	; (2674c <sliceable+0x34>)
   26726:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2672a:	681b      	ldr	r3, [r3, #0]
   2672c:	429a      	cmp	r2, r3
   2672e:	db09      	blt.n	26744 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   26730:	7b43      	ldrb	r3, [r0, #13]
   26732:	06db      	lsls	r3, r3, #27
   26734:	d106      	bne.n	26744 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   26736:	4b06      	ldr	r3, [pc, #24]	; (26750 <sliceable+0x38>)
   26738:	1ac3      	subs	r3, r0, r3
   2673a:	bf18      	it	ne
   2673c:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   2673e:	f003 0001 	and.w	r0, r3, #1
   26742:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   26744:	2300      	movs	r3, #0
   26746:	e7fa      	b.n	2673e <sliceable+0x26>
   26748:	20004ac4 	.word	0x20004ac4
   2674c:	20004ac0 	.word	0x20004ac0
   26750:	200030f0 	.word	0x200030f0

00026754 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   26754:	4b04      	ldr	r3, [pc, #16]	; (26768 <slice_timeout+0x14>)
   26756:	1ac0      	subs	r0, r0, r3
   26758:	4b04      	ldr	r3, [pc, #16]	; (2676c <slice_timeout+0x18>)
   2675a:	10c0      	asrs	r0, r0, #3
   2675c:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   2675e:	4b04      	ldr	r3, [pc, #16]	; (26770 <slice_timeout+0x1c>)
   26760:	2201      	movs	r2, #1
   26762:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   26764:	4770      	bx	lr
   26766:	bf00      	nop
   26768:	20003290 	.word	0x20003290
   2676c:	aaaaaaab 	.word	0xaaaaaaab
   26770:	200057f8 	.word	0x200057f8

00026774 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   26774:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   26776:	4b0e      	ldr	r3, [pc, #56]	; (267b0 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   26778:	4c0e      	ldr	r4, [pc, #56]	; (267b4 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   2677a:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   2677c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   26780:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   26784:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   26786:	4620      	mov	r0, r4
   26788:	f009 f97c 	bl	2fa84 <z_abort_timeout>
	slice_expired[cpu] = false;
   2678c:	4b0a      	ldr	r3, [pc, #40]	; (267b8 <z_reset_time_slice+0x44>)
   2678e:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   26790:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   26792:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   26794:	f7ff ffc0 	bl	26718 <sliceable>
   26798:	b148      	cbz	r0, 267ae <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   2679a:	4b08      	ldr	r3, [pc, #32]	; (267bc <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2679c:	4908      	ldr	r1, [pc, #32]	; (267c0 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   2679e:	681a      	ldr	r2, [r3, #0]
   267a0:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   267a2:	4620      	mov	r0, r4
   267a4:	17d3      	asrs	r3, r2, #31
	}
}
   267a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   267aa:	f000 bba7 	b.w	26efc <z_add_timeout>
}
   267ae:	bd70      	pop	{r4, r5, r6, pc}
   267b0:	20004a90 	.word	0x20004a90
   267b4:	20003290 	.word	0x20003290
   267b8:	200057f8 	.word	0x200057f8
   267bc:	20004ac4 	.word	0x20004ac4
   267c0:	00026755 	.word	0x00026755

000267c4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   267c4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   267c6:	4d0d      	ldr	r5, [pc, #52]	; (267fc <update_cache+0x38>)
   267c8:	462b      	mov	r3, r5
   267ca:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   267ce:	429c      	cmp	r4, r3
   267d0:	d000      	beq.n	267d4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   267d2:	b904      	cbnz	r4, 267d6 <update_cache+0x12>
   267d4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   267d6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   267d8:	b938      	cbnz	r0, 267ea <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   267da:	7b5a      	ldrb	r2, [r3, #13]
   267dc:	06d2      	lsls	r2, r2, #27
   267de:	d104      	bne.n	267ea <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   267e0:	69a2      	ldr	r2, [r4, #24]
   267e2:	b912      	cbnz	r2, 267ea <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   267e4:	89da      	ldrh	r2, [r3, #14]
   267e6:	2a7f      	cmp	r2, #127	; 0x7f
   267e8:	d805      	bhi.n	267f6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   267ea:	429c      	cmp	r4, r3
   267ec:	d002      	beq.n	267f4 <update_cache+0x30>
			z_reset_time_slice(thread);
   267ee:	4620      	mov	r0, r4
   267f0:	f7ff ffc0 	bl	26774 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   267f4:	4623      	mov	r3, r4
   267f6:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   267f8:	bd38      	pop	{r3, r4, r5, pc}
   267fa:	bf00      	nop
   267fc:	20004a90 	.word	0x20004a90

00026800 <move_thread_to_end_of_prio_q>:
{
   26800:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   26802:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   26806:	7b43      	ldrb	r3, [r0, #13]
   26808:	2a00      	cmp	r2, #0
{
   2680a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2680c:	da04      	bge.n	26818 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2680e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26812:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   26814:	f009 f817 	bl	2f846 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   26818:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   2681a:	4a15      	ldr	r2, [pc, #84]	; (26870 <move_thread_to_end_of_prio_q+0x70>)
   2681c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26820:	4610      	mov	r0, r2
   26822:	734b      	strb	r3, [r1, #13]
   26824:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   26828:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2682a:	4283      	cmp	r3, r0
   2682c:	bf08      	it	eq
   2682e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26830:	b923      	cbnz	r3, 2683c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   26832:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   26836:	6021      	str	r1, [r4, #0]
	list->tail = node;
   26838:	6211      	str	r1, [r2, #32]
}
   2683a:	e00c      	b.n	26856 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   2683c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   26840:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   26844:	42b5      	cmp	r5, r6
   26846:	d00e      	beq.n	26866 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26848:	42ae      	cmp	r6, r5
   2684a:	dd0c      	ble.n	26866 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2684c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2684e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   26852:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   26854:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   26856:	6890      	ldr	r0, [r2, #8]
   26858:	1a43      	subs	r3, r0, r1
   2685a:	4258      	negs	r0, r3
}
   2685c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   26860:	4158      	adcs	r0, r3
   26862:	f7ff bfaf 	b.w	267c4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   26866:	429c      	cmp	r4, r3
   26868:	d0e3      	beq.n	26832 <move_thread_to_end_of_prio_q+0x32>
   2686a:	681b      	ldr	r3, [r3, #0]
   2686c:	e7e0      	b.n	26830 <move_thread_to_end_of_prio_q+0x30>
   2686e:	bf00      	nop
   26870:	20004a90 	.word	0x20004a90

00026874 <ready_thread>:
{
   26874:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   26876:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2687a:	7b42      	ldrb	r2, [r0, #13]
   2687c:	2b00      	cmp	r3, #0
   2687e:	db29      	blt.n	268d4 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26880:	06d3      	lsls	r3, r2, #27
   26882:	d127      	bne.n	268d4 <ready_thread+0x60>
	return node->next != NULL;
   26884:	6983      	ldr	r3, [r0, #24]
   26886:	bb2b      	cbnz	r3, 268d4 <ready_thread+0x60>
	return list->head == list;
   26888:	4913      	ldr	r1, [pc, #76]	; (268d8 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2688a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2688e:	7342      	strb	r2, [r0, #13]
   26890:	460a      	mov	r2, r1
   26892:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26896:	4294      	cmp	r4, r2
   26898:	bf18      	it	ne
   2689a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   2689c:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2689e:	b923      	cbnz	r3, 268aa <ready_thread+0x36>
	node->prev = tail;
   268a0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   268a4:	6020      	str	r0, [r4, #0]
	list->tail = node;
   268a6:	6208      	str	r0, [r1, #32]
}
   268a8:	e00c      	b.n	268c4 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   268aa:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   268ae:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   268b2:	42b5      	cmp	r5, r6
   268b4:	d00a      	beq.n	268cc <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   268b6:	42ae      	cmp	r6, r5
   268b8:	dd08      	ble.n	268cc <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   268ba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   268bc:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   268c0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   268c2:	6058      	str	r0, [r3, #4]
}
   268c4:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   268c6:	2000      	movs	r0, #0
   268c8:	f7ff bf7c 	b.w	267c4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   268cc:	42a3      	cmp	r3, r4
   268ce:	d0e7      	beq.n	268a0 <ready_thread+0x2c>
   268d0:	681b      	ldr	r3, [r3, #0]
   268d2:	e7e4      	b.n	2689e <ready_thread+0x2a>
}
   268d4:	bc70      	pop	{r4, r5, r6}
   268d6:	4770      	bx	lr
   268d8:	20004a90 	.word	0x20004a90

000268dc <unready_thread>:
{
   268dc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   268de:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   268e2:	7b43      	ldrb	r3, [r0, #13]
   268e4:	2a00      	cmp	r2, #0
{
   268e6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   268e8:	da04      	bge.n	268f4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   268ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   268ee:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   268f0:	f008 ffa9 	bl	2f846 <sys_dlist_remove>
	update_cache(thread == _current);
   268f4:	4b04      	ldr	r3, [pc, #16]	; (26908 <unready_thread+0x2c>)
   268f6:	6898      	ldr	r0, [r3, #8]
   268f8:	1a43      	subs	r3, r0, r1
   268fa:	4258      	negs	r0, r3
   268fc:	4158      	adcs	r0, r3
}
   268fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   26902:	f7ff bf5f 	b.w	267c4 <update_cache>
   26906:	bf00      	nop
   26908:	20004a90 	.word	0x20004a90

0002690c <pend_locked>:
{
   2690c:	b570      	push	{r4, r5, r6, lr}
   2690e:	4615      	mov	r5, r2
   26910:	461c      	mov	r4, r3
   26912:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   26914:	f008 ffb2 	bl	2f87c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26918:	f1b4 3fff 	cmp.w	r4, #4294967295
   2691c:	bf08      	it	eq
   2691e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   26922:	d008      	beq.n	26936 <pend_locked+0x2a>
   26924:	462a      	mov	r2, r5
   26926:	4623      	mov	r3, r4
   26928:	f106 0018 	add.w	r0, r6, #24
   2692c:	4902      	ldr	r1, [pc, #8]	; (26938 <pend_locked+0x2c>)
}
   2692e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26932:	f000 bae3 	b.w	26efc <z_add_timeout>
   26936:	bd70      	pop	{r4, r5, r6, pc}
   26938:	0002f955 	.word	0x0002f955

0002693c <z_time_slice>:
{
   2693c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2693e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26942:	f3ef 8511 	mrs	r5, BASEPRI
   26946:	f383 8812 	msr	BASEPRI_MAX, r3
   2694a:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   2694e:	4b10      	ldr	r3, [pc, #64]	; (26990 <z_time_slice+0x54>)
	if (pending_current == curr) {
   26950:	4a10      	ldr	r2, [pc, #64]	; (26994 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   26952:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   26954:	6810      	ldr	r0, [r2, #0]
   26956:	42a0      	cmp	r0, r4
   26958:	d106      	bne.n	26968 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   2695a:	f7ff ff0b 	bl	26774 <z_reset_time_slice>
	__asm__ volatile(
   2695e:	f385 8811 	msr	BASEPRI, r5
   26962:	f3bf 8f6f 	isb	sy
}
   26966:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   26968:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   2696a:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   2696c:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   2696e:	4a0a      	ldr	r2, [pc, #40]	; (26998 <z_time_slice+0x5c>)
   26970:	5cd3      	ldrb	r3, [r2, r3]
   26972:	2b00      	cmp	r3, #0
   26974:	d0f3      	beq.n	2695e <z_time_slice+0x22>
   26976:	4620      	mov	r0, r4
   26978:	f7ff fece 	bl	26718 <sliceable>
   2697c:	2800      	cmp	r0, #0
   2697e:	d0ee      	beq.n	2695e <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   26980:	7b63      	ldrb	r3, [r4, #13]
   26982:	06db      	lsls	r3, r3, #27
   26984:	d102      	bne.n	2698c <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   26986:	4620      	mov	r0, r4
   26988:	f7ff ff3a 	bl	26800 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   2698c:	4620      	mov	r0, r4
   2698e:	e7e4      	b.n	2695a <z_time_slice+0x1e>
   26990:	20004a90 	.word	0x20004a90
   26994:	20004abc 	.word	0x20004abc
   26998:	200057f8 	.word	0x200057f8

0002699c <z_pend_curr>:
{
   2699c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   2699e:	480c      	ldr	r0, [pc, #48]	; (269d0 <z_pend_curr+0x34>)
   269a0:	4d0c      	ldr	r5, [pc, #48]	; (269d4 <z_pend_curr+0x38>)
   269a2:	6886      	ldr	r6, [r0, #8]
   269a4:	602e      	str	r6, [r5, #0]
{
   269a6:	460c      	mov	r4, r1
   269a8:	4611      	mov	r1, r2
   269aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   269ae:	f04f 0640 	mov.w	r6, #64	; 0x40
   269b2:	f3ef 8511 	mrs	r5, BASEPRI
   269b6:	f386 8812 	msr	BASEPRI_MAX, r6
   269ba:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   269be:	6880      	ldr	r0, [r0, #8]
   269c0:	f7ff ffa4 	bl	2690c <pend_locked>
	ret = arch_swap(key);
   269c4:	4620      	mov	r0, r4
}
   269c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   269ca:	f7f0 ba79 	b.w	16ec0 <arch_swap>
   269ce:	bf00      	nop
   269d0:	20004a90 	.word	0x20004a90
   269d4:	20004abc 	.word	0x20004abc

000269d8 <z_set_prio>:
{
   269d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   269da:	4604      	mov	r4, r0
   269dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   269e0:	f3ef 8611 	mrs	r6, BASEPRI
   269e4:	f383 8812 	msr	BASEPRI_MAX, r3
   269e8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   269ec:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   269ee:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   269f0:	b249      	sxtb	r1, r1
   269f2:	d119      	bne.n	26a28 <z_set_prio+0x50>
	return node->next != NULL;
   269f4:	6985      	ldr	r5, [r0, #24]
   269f6:	b9bd      	cbnz	r5, 26a28 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   269f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   269fc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   269fe:	f008 ff22 	bl	2f846 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   26a02:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   26a04:	4a16      	ldr	r2, [pc, #88]	; (26a60 <z_set_prio+0x88>)
				thread->base.prio = prio;
   26a06:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   26a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26a0c:	7343      	strb	r3, [r0, #13]
   26a0e:	4613      	mov	r3, r2
   26a10:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26a14:	4298      	cmp	r0, r3
   26a16:	bf18      	it	ne
   26a18:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   26a1a:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26a1c:	b95d      	cbnz	r5, 26a36 <z_set_prio+0x5e>
	node->prev = tail;
   26a1e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   26a22:	6004      	str	r4, [r0, #0]
	list->tail = node;
   26a24:	6214      	str	r4, [r2, #32]
}
   26a26:	e011      	b.n	26a4c <z_set_prio+0x74>
			thread->base.prio = prio;
   26a28:	73a1      	strb	r1, [r4, #14]
   26a2a:	2000      	movs	r0, #0
	__asm__ volatile(
   26a2c:	f386 8811 	msr	BASEPRI, r6
   26a30:	f3bf 8f6f 	isb	sy
}
   26a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   26a36:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   26a3a:	42b9      	cmp	r1, r7
   26a3c:	d00b      	beq.n	26a56 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26a3e:	428f      	cmp	r7, r1
   26a40:	dd09      	ble.n	26a56 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   26a42:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   26a44:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   26a48:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   26a4a:	606c      	str	r4, [r5, #4]
			update_cache(1);
   26a4c:	2001      	movs	r0, #1
   26a4e:	f7ff feb9 	bl	267c4 <update_cache>
   26a52:	2001      	movs	r0, #1
   26a54:	e7ea      	b.n	26a2c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   26a56:	42a8      	cmp	r0, r5
   26a58:	d0e1      	beq.n	26a1e <z_set_prio+0x46>
   26a5a:	682d      	ldr	r5, [r5, #0]
   26a5c:	e7de      	b.n	26a1c <z_set_prio+0x44>
   26a5e:	bf00      	nop
   26a60:	20004a90 	.word	0x20004a90

00026a64 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26a64:	b949      	cbnz	r1, 26a7a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26a66:	f3ef 8005 	mrs	r0, IPSR
   26a6a:	b930      	cbnz	r0, 26a7a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   26a6c:	4b05      	ldr	r3, [pc, #20]	; (26a84 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   26a6e:	699a      	ldr	r2, [r3, #24]
   26a70:	689b      	ldr	r3, [r3, #8]
   26a72:	429a      	cmp	r2, r3
   26a74:	d001      	beq.n	26a7a <z_reschedule+0x16>
   26a76:	f7f0 ba23 	b.w	16ec0 <arch_swap>
   26a7a:	f381 8811 	msr	BASEPRI, r1
   26a7e:	f3bf 8f6f 	isb	sy
}
   26a82:	4770      	bx	lr
   26a84:	20004a90 	.word	0x20004a90

00026a88 <z_sched_start>:
{
   26a88:	b510      	push	{r4, lr}
	__asm__ volatile(
   26a8a:	f04f 0240 	mov.w	r2, #64	; 0x40
   26a8e:	f3ef 8411 	mrs	r4, BASEPRI
   26a92:	f382 8812 	msr	BASEPRI_MAX, r2
   26a96:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   26a9a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   26a9c:	0751      	lsls	r1, r2, #29
   26a9e:	d404      	bmi.n	26aaa <z_sched_start+0x22>
	__asm__ volatile(
   26aa0:	f384 8811 	msr	BASEPRI, r4
   26aa4:	f3bf 8f6f 	isb	sy
}
   26aa8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   26aaa:	f022 0204 	bic.w	r2, r2, #4
   26aae:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   26ab0:	f7ff fee0 	bl	26874 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   26ab4:	4621      	mov	r1, r4
   26ab6:	4802      	ldr	r0, [pc, #8]	; (26ac0 <z_sched_start+0x38>)
}
   26ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   26abc:	f7ff bfd2 	b.w	26a64 <z_reschedule>
   26ac0:	200057f9 	.word	0x200057f9

00026ac4 <z_impl_k_thread_suspend>:
{
   26ac4:	b570      	push	{r4, r5, r6, lr}
   26ac6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   26ac8:	3018      	adds	r0, #24
   26aca:	f008 ffdb 	bl	2fa84 <z_abort_timeout>
	__asm__ volatile(
   26ace:	f04f 0340 	mov.w	r3, #64	; 0x40
   26ad2:	f3ef 8611 	mrs	r6, BASEPRI
   26ad6:	f383 8812 	msr	BASEPRI_MAX, r3
   26ada:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   26ade:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   26ae2:	7b63      	ldrb	r3, [r4, #13]
   26ae4:	2a00      	cmp	r2, #0
   26ae6:	da05      	bge.n	26af4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26aec:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26aee:	4620      	mov	r0, r4
   26af0:	f008 fea9 	bl	2f846 <sys_dlist_remove>
		update_cache(thread == _current);
   26af4:	4d0b      	ldr	r5, [pc, #44]	; (26b24 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   26af6:	7b63      	ldrb	r3, [r4, #13]
   26af8:	68a8      	ldr	r0, [r5, #8]
   26afa:	f043 0310 	orr.w	r3, r3, #16
   26afe:	7363      	strb	r3, [r4, #13]
   26b00:	1b03      	subs	r3, r0, r4
   26b02:	4258      	negs	r0, r3
   26b04:	4158      	adcs	r0, r3
   26b06:	f7ff fe5d 	bl	267c4 <update_cache>
	__asm__ volatile(
   26b0a:	f386 8811 	msr	BASEPRI, r6
   26b0e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   26b12:	68ab      	ldr	r3, [r5, #8]
   26b14:	42a3      	cmp	r3, r4
   26b16:	d103      	bne.n	26b20 <z_impl_k_thread_suspend+0x5c>
}
   26b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   26b1c:	f008 bf75 	b.w	2fa0a <z_reschedule_unlocked>
}
   26b20:	bd70      	pop	{r4, r5, r6, pc}
   26b22:	bf00      	nop
   26b24:	20004a90 	.word	0x20004a90

00026b28 <k_sched_lock>:
	__asm__ volatile(
   26b28:	f04f 0340 	mov.w	r3, #64	; 0x40
   26b2c:	f3ef 8111 	mrs	r1, BASEPRI
   26b30:	f383 8812 	msr	BASEPRI_MAX, r3
   26b34:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   26b38:	4b04      	ldr	r3, [pc, #16]	; (26b4c <k_sched_lock+0x24>)
   26b3a:	689a      	ldr	r2, [r3, #8]
   26b3c:	7bd3      	ldrb	r3, [r2, #15]
   26b3e:	3b01      	subs	r3, #1
   26b40:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   26b42:	f381 8811 	msr	BASEPRI, r1
   26b46:	f3bf 8f6f 	isb	sy
}
   26b4a:	4770      	bx	lr
   26b4c:	20004a90 	.word	0x20004a90

00026b50 <k_sched_unlock>:
{
   26b50:	b510      	push	{r4, lr}
	__asm__ volatile(
   26b52:	f04f 0340 	mov.w	r3, #64	; 0x40
   26b56:	f3ef 8411 	mrs	r4, BASEPRI
   26b5a:	f383 8812 	msr	BASEPRI_MAX, r3
   26b5e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   26b62:	4b08      	ldr	r3, [pc, #32]	; (26b84 <k_sched_unlock+0x34>)
   26b64:	689a      	ldr	r2, [r3, #8]
   26b66:	7bd3      	ldrb	r3, [r2, #15]
   26b68:	3301      	adds	r3, #1
   26b6a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   26b6c:	2000      	movs	r0, #0
   26b6e:	f7ff fe29 	bl	267c4 <update_cache>
	__asm__ volatile(
   26b72:	f384 8811 	msr	BASEPRI, r4
   26b76:	f3bf 8f6f 	isb	sy
}
   26b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   26b7e:	f008 bf44 	b.w	2fa0a <z_reschedule_unlocked>
   26b82:	bf00      	nop
   26b84:	20004a90 	.word	0x20004a90

00026b88 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   26b88:	4b02      	ldr	r3, [pc, #8]	; (26b94 <z_sched_init+0xc>)
   26b8a:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   26b8e:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   26b92:	4770      	bx	lr
   26b94:	20004a90 	.word	0x20004a90

00026b98 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   26b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   26b9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   26b9e:	f3ef 8511 	mrs	r5, BASEPRI
   26ba2:	f383 8812 	msr	BASEPRI_MAX, r3
   26ba6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   26baa:	4919      	ldr	r1, [pc, #100]	; (26c10 <z_impl_k_yield+0x78>)
   26bac:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26bae:	7b43      	ldrb	r3, [r0, #13]
   26bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26bb4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26bb6:	f008 fe46 	bl	2f846 <sys_dlist_remove>
	}
	queue_thread(_current);
   26bba:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   26bbc:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   26bbe:	4608      	mov	r0, r1
   26bc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   26bc4:	735a      	strb	r2, [r3, #13]
   26bc6:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   26bca:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26bcc:	4282      	cmp	r2, r0
   26bce:	bf08      	it	eq
   26bd0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26bd2:	b922      	cbnz	r2, 26bde <z_impl_k_yield+0x46>
	node->prev = tail;
   26bd4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   26bd8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   26bda:	620b      	str	r3, [r1, #32]
}
   26bdc:	e00c      	b.n	26bf8 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   26bde:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   26be2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   26be6:	42be      	cmp	r6, r7
   26be8:	d00e      	beq.n	26c08 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26bea:	42b7      	cmp	r7, r6
   26bec:	dd0c      	ble.n	26c08 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   26bee:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   26bf0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   26bf4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   26bf6:	6053      	str	r3, [r2, #4]
	update_cache(1);
   26bf8:	2001      	movs	r0, #1
   26bfa:	f7ff fde3 	bl	267c4 <update_cache>
   26bfe:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   26c00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   26c04:	f7f0 b95c 	b.w	16ec0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   26c08:	42a2      	cmp	r2, r4
   26c0a:	d0e3      	beq.n	26bd4 <z_impl_k_yield+0x3c>
   26c0c:	6812      	ldr	r2, [r2, #0]
   26c0e:	e7e0      	b.n	26bd2 <z_impl_k_yield+0x3a>
   26c10:	20004a90 	.word	0x20004a90

00026c14 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   26c14:	ea50 0301 	orrs.w	r3, r0, r1
{
   26c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26c1c:	4605      	mov	r5, r0
   26c1e:	460e      	mov	r6, r1
	if (ticks == 0) {
   26c20:	d103      	bne.n	26c2a <z_tick_sleep+0x16>
	z_impl_k_yield();
   26c22:	f7ff ffb9 	bl	26b98 <z_impl_k_yield>
		k_yield();
		return 0;
   26c26:	2000      	movs	r0, #0
   26c28:	e02c      	b.n	26c84 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   26c2a:	1c83      	adds	r3, r0, #2
   26c2c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   26c30:	db2a      	blt.n	26c88 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   26c32:	f008 ff5d 	bl	2faf0 <sys_clock_tick_get_32>
   26c36:	182c      	adds	r4, r5, r0
   26c38:	f04f 0340 	mov.w	r3, #64	; 0x40
   26c3c:	f3ef 8811 	mrs	r8, BASEPRI
   26c40:	f383 8812 	msr	BASEPRI_MAX, r3
   26c44:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   26c48:	4f11      	ldr	r7, [pc, #68]	; (26c90 <z_tick_sleep+0x7c>)
   26c4a:	4b12      	ldr	r3, [pc, #72]	; (26c94 <z_tick_sleep+0x80>)
   26c4c:	68b8      	ldr	r0, [r7, #8]
   26c4e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   26c50:	f7ff fe44 	bl	268dc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   26c54:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   26c56:	4910      	ldr	r1, [pc, #64]	; (26c98 <z_tick_sleep+0x84>)
   26c58:	462a      	mov	r2, r5
   26c5a:	4633      	mov	r3, r6
   26c5c:	3018      	adds	r0, #24
   26c5e:	f000 f94d 	bl	26efc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   26c62:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   26c64:	7b53      	ldrb	r3, [r2, #13]
   26c66:	f043 0310 	orr.w	r3, r3, #16
   26c6a:	7353      	strb	r3, [r2, #13]
   26c6c:	4640      	mov	r0, r8
   26c6e:	f7f0 f927 	bl	16ec0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   26c72:	f008 ff3d 	bl	2faf0 <sys_clock_tick_get_32>
   26c76:	1a20      	subs	r0, r4, r0
   26c78:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   26c7c:	2801      	cmp	r0, #1
   26c7e:	f173 0300 	sbcs.w	r3, r3, #0
   26c82:	dbd0      	blt.n	26c26 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   26c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   26c88:	f06f 0401 	mvn.w	r4, #1
   26c8c:	1a24      	subs	r4, r4, r0
   26c8e:	e7d3      	b.n	26c38 <z_tick_sleep+0x24>
   26c90:	20004a90 	.word	0x20004a90
   26c94:	20004abc 	.word	0x20004abc
   26c98:	0002f955 	.word	0x0002f955

00026c9c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26c9c:	f1b1 3fff 	cmp.w	r1, #4294967295
   26ca0:	bf08      	it	eq
   26ca2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   26ca6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26ca8:	d106      	bne.n	26cb8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   26caa:	4b08      	ldr	r3, [pc, #32]	; (26ccc <z_impl_k_sleep+0x30>)
   26cac:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   26cae:	f7ff ff09 	bl	26ac4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   26cb2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   26cb6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   26cb8:	f7ff ffac 	bl	26c14 <z_tick_sleep>
   26cbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   26cc0:	fb80 0303 	smull	r0, r3, r0, r3
   26cc4:	0bc0      	lsrs	r0, r0, #15
   26cc6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   26cca:	e7f4      	b.n	26cb6 <z_impl_k_sleep+0x1a>
   26ccc:	20004a90 	.word	0x20004a90

00026cd0 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   26cd0:	b538      	push	{r3, r4, r5, lr}
   26cd2:	4c0a      	ldr	r4, [pc, #40]	; (26cfc <z_impl_k_usleep+0x2c>)
   26cd4:	4a0a      	ldr	r2, [pc, #40]	; (26d00 <z_impl_k_usleep+0x30>)
   26cd6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   26cda:	2100      	movs	r1, #0
   26cdc:	fbc0 4105 	smlal	r4, r1, r0, r5
   26ce0:	2300      	movs	r3, #0
   26ce2:	4620      	mov	r0, r4
   26ce4:	f7da fa0c 	bl	1100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   26ce8:	17c1      	asrs	r1, r0, #31
   26cea:	f7ff ff93 	bl	26c14 <z_tick_sleep>
   26cee:	4b04      	ldr	r3, [pc, #16]	; (26d00 <z_impl_k_usleep+0x30>)
   26cf0:	fb80 0303 	smull	r0, r3, r0, r3
   26cf4:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
   26cf6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   26cfa:	bd38      	pop	{r3, r4, r5, pc}
   26cfc:	000f423f 	.word	0x000f423f
   26d00:	000f4240 	.word	0x000f4240

00026d04 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   26d04:	4b01      	ldr	r3, [pc, #4]	; (26d0c <z_impl_z_current_get+0x8>)
   26d06:	6898      	ldr	r0, [r3, #8]
   26d08:	4770      	bx	lr
   26d0a:	bf00      	nop
   26d0c:	20004a90 	.word	0x20004a90

00026d10 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   26d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26d14:	4604      	mov	r4, r0
   26d16:	f04f 0340 	mov.w	r3, #64	; 0x40
   26d1a:	f3ef 8611 	mrs	r6, BASEPRI
   26d1e:	f383 8812 	msr	BASEPRI_MAX, r3
   26d22:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   26d26:	7b03      	ldrb	r3, [r0, #12]
   26d28:	07d9      	lsls	r1, r3, #31
   26d2a:	d50b      	bpl.n	26d44 <z_thread_abort+0x34>
	__asm__ volatile(
   26d2c:	f386 8811 	msr	BASEPRI, r6
   26d30:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   26d34:	4040      	eors	r0, r0
   26d36:	f380 8811 	msr	BASEPRI, r0
   26d3a:	f04f 0004 	mov.w	r0, #4
   26d3e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   26d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   26d44:	7b43      	ldrb	r3, [r0, #13]
   26d46:	071a      	lsls	r2, r3, #28
   26d48:	d504      	bpl.n	26d54 <z_thread_abort+0x44>
   26d4a:	f386 8811 	msr	BASEPRI, r6
   26d4e:	f3bf 8f6f 	isb	sy
   26d52:	e7f5      	b.n	26d40 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   26d54:	f023 0220 	bic.w	r2, r3, #32
   26d58:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   26d5c:	09d2      	lsrs	r2, r2, #7
   26d5e:	d120      	bne.n	26da2 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   26d60:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   26d62:	68a3      	ldr	r3, [r4, #8]
   26d64:	b113      	cbz	r3, 26d6c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   26d66:	4620      	mov	r0, r4
   26d68:	f008 fd75 	bl	2f856 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   26d6c:	f104 0018 	add.w	r0, r4, #24
   26d70:	f008 fe88 	bl	2fa84 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   26d74:	f104 0758 	add.w	r7, r4, #88	; 0x58
   26d78:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   26d7c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26d7e:	42bd      	cmp	r5, r7
   26d80:	d000      	beq.n	26d84 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   26d82:	b9b5      	cbnz	r5, 26db2 <z_thread_abort+0xa2>
		update_cache(1);
   26d84:	2001      	movs	r0, #1
   26d86:	f7ff fd1d 	bl	267c4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   26d8a:	4b10      	ldr	r3, [pc, #64]	; (26dcc <z_thread_abort+0xbc>)
   26d8c:	689b      	ldr	r3, [r3, #8]
   26d8e:	42a3      	cmp	r3, r4
   26d90:	d1db      	bne.n	26d4a <z_thread_abort+0x3a>
   26d92:	f3ef 8305 	mrs	r3, IPSR
   26d96:	2b00      	cmp	r3, #0
   26d98:	d1d7      	bne.n	26d4a <z_thread_abort+0x3a>
   26d9a:	4630      	mov	r0, r6
   26d9c:	f7f0 f890 	bl	16ec0 <arch_swap>
	return ret;
   26da0:	e7d3      	b.n	26d4a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26da2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   26da6:	f043 0308 	orr.w	r3, r3, #8
   26daa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26dac:	f008 fd4b 	bl	2f846 <sys_dlist_remove>
}
   26db0:	e7d7      	b.n	26d62 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   26db2:	4628      	mov	r0, r5
   26db4:	f008 fd4f 	bl	2f856 <unpend_thread_no_timeout>
   26db8:	f105 0018 	add.w	r0, r5, #24
   26dbc:	f008 fe62 	bl	2fa84 <z_abort_timeout>
   26dc0:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   26dc4:	4628      	mov	r0, r5
   26dc6:	f7ff fd55 	bl	26874 <ready_thread>
   26dca:	e7d7      	b.n	26d7c <z_thread_abort+0x6c>
   26dcc:	20004a90 	.word	0x20004a90

00026dd0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   26dd0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   26dd2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   26dd6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   26dd8:	e9cd 6700 	strd	r6, r7, [sp]
   26ddc:	f7ff fdde 	bl	2699c <z_pend_curr>

	if (data != NULL) {
   26de0:	b11c      	cbz	r4, 26dea <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   26de2:	4b03      	ldr	r3, [pc, #12]	; (26df0 <z_sched_wait+0x20>)
   26de4:	689b      	ldr	r3, [r3, #8]
   26de6:	695b      	ldr	r3, [r3, #20]
   26de8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   26dea:	b002      	add	sp, #8
   26dec:	bdd0      	pop	{r4, r6, r7, pc}
   26dee:	bf00      	nop
   26df0:	20004a90 	.word	0x20004a90

00026df4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   26df4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   26df6:	4806      	ldr	r0, [pc, #24]	; (26e10 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   26df8:	4a06      	ldr	r2, [pc, #24]	; (26e14 <z_data_copy+0x20>)
   26dfa:	4907      	ldr	r1, [pc, #28]	; (26e18 <z_data_copy+0x24>)
   26dfc:	1a12      	subs	r2, r2, r0
   26dfe:	f008 fa8d 	bl	2f31c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   26e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   26e06:	4a05      	ldr	r2, [pc, #20]	; (26e1c <z_data_copy+0x28>)
   26e08:	4905      	ldr	r1, [pc, #20]	; (26e20 <z_data_copy+0x2c>)
   26e0a:	4806      	ldr	r0, [pc, #24]	; (26e24 <z_data_copy+0x30>)
   26e0c:	f008 ba86 	b.w	2f31c <z_early_memcpy>
   26e10:	20000000 	.word	0x20000000
   26e14:	20000fb8 	.word	0x20000fb8
   26e18:	00033f50 	.word	0x00033f50
   26e1c:	00000000 	.word	0x00000000
   26e20:	00033f50 	.word	0x00033f50
   26e24:	20000000 	.word	0x20000000

00026e28 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   26e28:	4b03      	ldr	r3, [pc, #12]	; (26e38 <elapsed+0x10>)
   26e2a:	681b      	ldr	r3, [r3, #0]
   26e2c:	b90b      	cbnz	r3, 26e32 <elapsed+0xa>
   26e2e:	f7fc b809 	b.w	22e44 <sys_clock_elapsed>
}
   26e32:	2000      	movs	r0, #0
   26e34:	4770      	bx	lr
   26e36:	bf00      	nop
   26e38:	20004ac8 	.word	0x20004ac8

00026e3c <next_timeout>:

static int32_t next_timeout(void)
{
   26e3c:	b510      	push	{r4, lr}
	return list->head == list;
   26e3e:	4b0e      	ldr	r3, [pc, #56]	; (26e78 <next_timeout+0x3c>)
   26e40:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26e42:	429c      	cmp	r4, r3
   26e44:	d104      	bne.n	26e50 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   26e46:	f7ff ffef 	bl	26e28 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   26e4a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   26e4e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   26e50:	f7ff ffea 	bl	26e28 <elapsed>
	if ((to == NULL) ||
   26e54:	2c00      	cmp	r4, #0
   26e56:	d0f8      	beq.n	26e4a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   26e58:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   26e5c:	1a1b      	subs	r3, r3, r0
   26e5e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   26e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   26e66:	f172 0100 	sbcs.w	r1, r2, #0
   26e6a:	daee      	bge.n	26e4a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   26e6c:	2a00      	cmp	r2, #0
   26e6e:	bfac      	ite	ge
   26e70:	4618      	movge	r0, r3
   26e72:	2000      	movlt	r0, #0
	return ret;
   26e74:	e7eb      	b.n	26e4e <next_timeout+0x12>
   26e76:	bf00      	nop
   26e78:	200009ec 	.word	0x200009ec

00026e7c <remove_timeout>:
{
   26e7c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26e7e:	b170      	cbz	r0, 26e9e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   26e80:	4b0b      	ldr	r3, [pc, #44]	; (26eb0 <remove_timeout+0x34>)
   26e82:	685b      	ldr	r3, [r3, #4]
   26e84:	4298      	cmp	r0, r3
   26e86:	d00a      	beq.n	26e9e <remove_timeout+0x22>
   26e88:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   26e8a:	b143      	cbz	r3, 26e9e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   26e8c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   26e90:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   26e94:	1912      	adds	r2, r2, r4
   26e96:	eb41 0105 	adc.w	r1, r1, r5
   26e9a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   26e9e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   26ea2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26ea4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26ea6:	2300      	movs	r3, #0
	node->prev = NULL;
   26ea8:	e9c0 3300 	strd	r3, r3, [r0]
}
   26eac:	bd30      	pop	{r4, r5, pc}
   26eae:	bf00      	nop
   26eb0:	200009ec 	.word	0x200009ec

00026eb4 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   26eb4:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   26eb6:	6804      	ldr	r4, [r0, #0]
   26eb8:	b1d4      	cbz	r4, 26ef0 <timeout_rem+0x3c>
	return list->head == list;
   26eba:	4a0f      	ldr	r2, [pc, #60]	; (26ef8 <timeout_rem+0x44>)
   26ebc:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
   26ebe:	6851      	ldr	r1, [r2, #4]
   26ec0:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26ec2:	4293      	cmp	r3, r2
   26ec4:	bf08      	it	eq
   26ec6:	2300      	moveq	r3, #0
	return (node == list->tail) ? NULL : node->next;
   26ec8:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   26eca:	b933      	cbnz	r3, 26eda <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   26ecc:	f7ff ffac 	bl	26e28 <elapsed>
   26ed0:	4603      	mov	r3, r0
   26ed2:	1a20      	subs	r0, r4, r0
   26ed4:	eb65 71e3 	sbc.w	r1, r5, r3, asr #31
}
   26ed8:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   26eda:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   26ede:	18a4      	adds	r4, r4, r2
   26ee0:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   26ee4:	4283      	cmp	r3, r0
   26ee6:	d0f1      	beq.n	26ecc <timeout_rem+0x18>
   26ee8:	4299      	cmp	r1, r3
   26eea:	d0ef      	beq.n	26ecc <timeout_rem+0x18>
   26eec:	681b      	ldr	r3, [r3, #0]
   26eee:	e7ec      	b.n	26eca <timeout_rem+0x16>
		return 0;
   26ef0:	4620      	mov	r0, r4
   26ef2:	4621      	mov	r1, r4
   26ef4:	e7f0      	b.n	26ed8 <timeout_rem+0x24>
   26ef6:	bf00      	nop
   26ef8:	200009ec 	.word	0x200009ec

00026efc <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26efc:	f1b3 3fff 	cmp.w	r3, #4294967295
   26f00:	bf08      	it	eq
   26f02:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   26f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f08:	4604      	mov	r4, r0
   26f0a:	461d      	mov	r5, r3
   26f0c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26f0e:	d05c      	beq.n	26fca <z_add_timeout+0xce>
	to->fn = fn;
   26f10:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   26f12:	f04f 0340 	mov.w	r3, #64	; 0x40
   26f16:	f3ef 8711 	mrs	r7, BASEPRI
   26f1a:	f383 8812 	msr	BASEPRI_MAX, r3
   26f1e:	f3bf 8f6f 	isb	sy
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   26f22:	3201      	adds	r2, #1
   26f24:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   26f28:	da24      	bge.n	26f74 <z_add_timeout+0x78>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   26f2a:	492d      	ldr	r1, [pc, #180]	; (26fe0 <z_add_timeout+0xe4>)
   26f2c:	e9d1 2000 	ldrd	r2, r0, [r1]
   26f30:	f06f 0301 	mvn.w	r3, #1
   26f34:	1a9b      	subs	r3, r3, r2
   26f36:	f04f 32ff 	mov.w	r2, #4294967295
   26f3a:	eb62 0000 	sbc.w	r0, r2, r0
   26f3e:	1b9e      	subs	r6, r3, r6
   26f40:	eb60 0005 	sbc.w	r0, r0, r5
			to->dticks = MAX(1, ticks);
   26f44:	2e01      	cmp	r6, #1
   26f46:	f170 0300 	sbcs.w	r3, r0, #0
   26f4a:	da01      	bge.n	26f50 <z_add_timeout+0x54>
   26f4c:	2601      	movs	r6, #1
   26f4e:	2000      	movs	r0, #0
   26f50:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   26f54:	4e23      	ldr	r6, [pc, #140]	; (26fe4 <z_add_timeout+0xe8>)
   26f56:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   26f5a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26f5c:	45b4      	cmp	ip, r6
   26f5e:	bf08      	it	eq
   26f60:	f04f 0c00 	moveq.w	ip, #0
		for (t = first(); t != NULL; t = next(t)) {
   26f64:	f1bc 0f00 	cmp.w	ip, #0
   26f68:	d10d      	bne.n	26f86 <z_add_timeout+0x8a>
	node->prev = tail;
   26f6a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   26f6e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   26f70:	6074      	str	r4, [r6, #4]
}
   26f72:	e01c      	b.n	26fae <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   26f74:	f7ff ff58 	bl	26e28 <elapsed>
   26f78:	3601      	adds	r6, #1
   26f7a:	f145 0500 	adc.w	r5, r5, #0
   26f7e:	1836      	adds	r6, r6, r0
   26f80:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   26f84:	e7e4      	b.n	26f50 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   26f86:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   26f8a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   26f8e:	4293      	cmp	r3, r2
   26f90:	eb71 0e00 	sbcs.w	lr, r1, r0
   26f94:	da1a      	bge.n	26fcc <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   26f96:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   26f98:	f8dc 3004 	ldr.w	r3, [ip, #4]
   26f9c:	eb60 0001 	sbc.w	r0, r0, r1
   26fa0:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   26fa4:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   26fa8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   26faa:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   26fae:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26fb0:	42b3      	cmp	r3, r6
   26fb2:	d006      	beq.n	26fc2 <z_add_timeout+0xc6>
		if (to == first()) {
   26fb4:	429c      	cmp	r4, r3
   26fb6:	d104      	bne.n	26fc2 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   26fb8:	f7ff ff40 	bl	26e3c <next_timeout>
   26fbc:	2100      	movs	r1, #0
   26fbe:	f7fb ff0f 	bl	22de0 <sys_clock_set_timeout>
	__asm__ volatile(
   26fc2:	f387 8811 	msr	BASEPRI, r7
   26fc6:	f3bf 8f6f 	isb	sy
}
   26fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   26fcc:	1a9b      	subs	r3, r3, r2
   26fce:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   26fd2:	45ac      	cmp	ip, r5
   26fd4:	e9c4 3104 	strd	r3, r1, [r4, #16]
   26fd8:	d0c7      	beq.n	26f6a <z_add_timeout+0x6e>
   26fda:	f8dc c000 	ldr.w	ip, [ip]
   26fde:	e7c1      	b.n	26f64 <z_add_timeout+0x68>
   26fe0:	200032a8 	.word	0x200032a8
   26fe4:	200009ec 	.word	0x200009ec

00026fe8 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   26fe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   26fec:	f04f 0340 	mov.w	r3, #64	; 0x40
   26ff0:	f3ef 8c11 	mrs	ip, BASEPRI
   26ff4:	f383 8812 	msr	BASEPRI_MAX, r3
   26ff8:	f3bf 8f6f 	isb	sy
	return list->head == list;
   26ffc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 270b0 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   27000:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 270b4 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   27004:	4f2c      	ldr	r7, [pc, #176]	; (270b8 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   27006:	f8c9 0000 	str.w	r0, [r9]
   2700a:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   2700e:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27010:	4550      	cmp	r0, sl
   27012:	bf08      	it	eq
   27014:	2000      	moveq	r0, #0
   27016:	2500      	movs	r5, #0
		curr_tick += dt;
   27018:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   2701c:	f8d9 3000 	ldr.w	r3, [r9]
   27020:	46e0      	mov	r8, ip
   27022:	b380      	cbz	r0, 27086 <sys_clock_announce+0x9e>
   27024:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   27028:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   2702c:	42b3      	cmp	r3, r6
   2702e:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   27032:	da05      	bge.n	27040 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   27034:	1af6      	subs	r6, r6, r3
   27036:	eb6c 040e 	sbc.w	r4, ip, lr
   2703a:	e9c0 6404 	strd	r6, r4, [r0, #16]
   2703e:	e022      	b.n	27086 <sys_clock_announce+0x9e>
		curr_tick += dt;
   27040:	18b2      	adds	r2, r6, r2
   27042:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   27046:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   2704a:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   2704e:	f7ff ff15 	bl	26e7c <remove_timeout>
	__asm__ volatile(
   27052:	f388 8811 	msr	BASEPRI, r8
   27056:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2705a:	6883      	ldr	r3, [r0, #8]
   2705c:	4798      	blx	r3
	__asm__ volatile(
   2705e:	f04f 0340 	mov.w	r3, #64	; 0x40
   27062:	f3ef 8811 	mrs	r8, BASEPRI
   27066:	f383 8812 	msr	BASEPRI_MAX, r3
   2706a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   2706e:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   27072:	f8da 0000 	ldr.w	r0, [sl]
   27076:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27078:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   2707a:	46c4      	mov	ip, r8
   2707c:	f8c9 3000 	str.w	r3, [r9]
   27080:	d1ca      	bne.n	27018 <sys_clock_announce+0x30>
		curr_tick += dt;
   27082:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   27086:	189a      	adds	r2, r3, r2
   27088:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   2708c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2708e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   27092:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   27096:	f7ff fed1 	bl	26e3c <next_timeout>
   2709a:	4621      	mov	r1, r4
   2709c:	f7fb fea0 	bl	22de0 <sys_clock_set_timeout>
	__asm__ volatile(
   270a0:	f388 8811 	msr	BASEPRI, r8
   270a4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   270a8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   270ac:	f7ff bc46 	b.w	2693c <z_time_slice>
   270b0:	200009ec 	.word	0x200009ec
   270b4:	20004ac8 	.word	0x20004ac8
   270b8:	200032a8 	.word	0x200032a8

000270bc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   270bc:	b510      	push	{r4, lr}
	__asm__ volatile(
   270be:	f04f 0340 	mov.w	r3, #64	; 0x40
   270c2:	f3ef 8411 	mrs	r4, BASEPRI
   270c6:	f383 8812 	msr	BASEPRI_MAX, r3
   270ca:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   270ce:	f7ff feab 	bl	26e28 <elapsed>
   270d2:	4a06      	ldr	r2, [pc, #24]	; (270ec <sys_clock_tick_get+0x30>)
   270d4:	4603      	mov	r3, r0
   270d6:	e9d2 0100 	ldrd	r0, r1, [r2]
   270da:	1818      	adds	r0, r3, r0
   270dc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   270e0:	f384 8811 	msr	BASEPRI, r4
   270e4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   270e8:	bd10      	pop	{r4, pc}
   270ea:	bf00      	nop
   270ec:	200032a8 	.word	0x200032a8

000270f0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   270f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   270f2:	4604      	mov	r4, r0
	__asm__ volatile(
   270f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   270f8:	f3ef 8711 	mrs	r7, BASEPRI
   270fc:	f383 8812 	msr	BASEPRI_MAX, r3
   27100:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   27104:	6802      	ldr	r2, [r0, #0]
   27106:	b122      	cbz	r2, 27112 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   27108:	f387 8811 	msr	BASEPRI, r7
   2710c:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   27110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   27112:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   27116:	1c58      	adds	r0, r3, #1
   27118:	f146 0100 	adc.w	r1, r6, #0
   2711c:	2802      	cmp	r0, #2
   2711e:	f171 0100 	sbcs.w	r1, r1, #0
   27122:	d327      	bcc.n	27174 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   27124:	2b01      	cmp	r3, #1
   27126:	f176 0100 	sbcs.w	r1, r6, #0
   2712a:	bfbc      	itt	lt
   2712c:	2301      	movlt	r3, #1
   2712e:	4616      	movlt	r6, r2
   27130:	1e5d      	subs	r5, r3, #1
   27132:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   27136:	f008 fcdf 	bl	2faf8 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   2713a:	3001      	adds	r0, #1
   2713c:	f141 0100 	adc.w	r1, r1, #0
   27140:	1940      	adds	r0, r0, r5
   27142:	eb46 0101 	adc.w	r1, r6, r1
   27146:	2801      	cmp	r0, #1
   27148:	f171 0100 	sbcs.w	r1, r1, #0
   2714c:	db3a      	blt.n	271c4 <z_timer_expiration_handler+0xd4>
   2714e:	f008 fcd3 	bl	2faf8 <z_impl_k_uptime_ticks>
   27152:	3001      	adds	r0, #1
   27154:	f141 0100 	adc.w	r1, r1, #0
   27158:	f06f 0201 	mvn.w	r2, #1
   2715c:	1940      	adds	r0, r0, r5
   2715e:	eb46 0301 	adc.w	r3, r6, r1
   27162:	1a12      	subs	r2, r2, r0
   27164:	f04f 31ff 	mov.w	r1, #4294967295
   27168:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2716c:	4918      	ldr	r1, [pc, #96]	; (271d0 <z_timer_expiration_handler+0xe0>)
   2716e:	4620      	mov	r0, r4
   27170:	f7ff fec4 	bl	26efc <z_add_timeout>
	timer->status += 1U;
   27174:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27176:	3301      	adds	r3, #1
   27178:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   2717a:	6a23      	ldr	r3, [r4, #32]
   2717c:	b173      	cbz	r3, 2719c <z_timer_expiration_handler+0xac>
   2717e:	f387 8811 	msr	BASEPRI, r7
   27182:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   27186:	6a23      	ldr	r3, [r4, #32]
   27188:	4620      	mov	r0, r4
   2718a:	4798      	blx	r3
	__asm__ volatile(
   2718c:	f04f 0340 	mov.w	r3, #64	; 0x40
   27190:	f3ef 8711 	mrs	r7, BASEPRI
   27194:	f383 8812 	msr	BASEPRI_MAX, r3
   27198:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2719c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   271a0:	42a5      	cmp	r5, r4
   271a2:	d0b1      	beq.n	27108 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   271a4:	2d00      	cmp	r5, #0
   271a6:	d0af      	beq.n	27108 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   271a8:	4628      	mov	r0, r5
   271aa:	f008 fb9f 	bl	2f8ec <z_unpend_thread_no_timeout>
   271ae:	2300      	movs	r3, #0
   271b0:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
   271b2:	f387 8811 	msr	BASEPRI, r7
   271b6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   271ba:	4628      	mov	r0, r5
}
   271bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   271c0:	f008 bb84 	b.w	2f8cc <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   271c4:	f06f 0201 	mvn.w	r2, #1
   271c8:	f04f 33ff 	mov.w	r3, #4294967295
   271cc:	e7ce      	b.n	2716c <z_timer_expiration_handler+0x7c>
   271ce:	bf00      	nop
   271d0:	000270f1 	.word	0x000270f1

000271d4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   271d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   271d8:	f1b3 3fff 	cmp.w	r3, #4294967295
   271dc:	bf08      	it	eq
   271de:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   271e2:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   271e6:	4605      	mov	r5, r0
   271e8:	461c      	mov	r4, r3
   271ea:	4691      	mov	r9, r2
   271ec:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   271ee:	d01c      	beq.n	2722a <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   271f0:	1c53      	adds	r3, r2, #1
   271f2:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   271f6:	db09      	blt.n	2720c <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   271f8:	2a01      	cmp	r2, #1
   271fa:	f174 0300 	sbcs.w	r3, r4, #0
   271fe:	bfbc      	itt	lt
   27200:	2201      	movlt	r2, #1
   27202:	2400      	movlt	r4, #0
   27204:	f112 39ff 	adds.w	r9, r2, #4294967295
   27208:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   2720c:	4628      	mov	r0, r5
   2720e:	f008 fc39 	bl	2fa84 <z_abort_timeout>
	timer->period = period;
   27212:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   27216:	2300      	movs	r3, #0
   27218:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2721a:	464a      	mov	r2, r9
   2721c:	4643      	mov	r3, r8
   2721e:	4628      	mov	r0, r5
   27220:	4903      	ldr	r1, [pc, #12]	; (27230 <z_impl_k_timer_start+0x5c>)
		     duration);
}
   27222:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27226:	f7ff be69 	b.w	26efc <z_add_timeout>
}
   2722a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2722e:	bf00      	nop
   27230:	000270f1 	.word	0x000270f1

00027234 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   27234:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   27238:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2723a:	4b29      	ldr	r3, [pc, #164]	; (272e0 <z_impl_k_poll+0xac>)
   2723c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   2723e:	2301      	movs	r3, #1
   27240:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   27244:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   27248:	ea52 0305 	orrs.w	r3, r2, r5
{
   2724c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   2724e:	bf0c      	ite	eq
   27250:	2301      	moveq	r3, #1
   27252:	2300      	movne	r3, #0
   27254:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   27258:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   2725a:	f008 fccf 	bl	2fbfc <register_events>
   2725e:	4681      	mov	r9, r0
	__asm__ volatile(
   27260:	f04f 0340 	mov.w	r3, #64	; 0x40
   27264:	f3ef 8a11 	mrs	sl, BASEPRI
   27268:	f383 8812 	msr	BASEPRI_MAX, r3
   2726c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   27270:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   27274:	b964      	cbnz	r4, 27290 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   27276:	4601      	mov	r1, r0
   27278:	4652      	mov	r2, sl
   2727a:	4640      	mov	r0, r8
   2727c:	f008 fd8f 	bl	2fd9e <clear_event_registrations>
	__asm__ volatile(
   27280:	f38a 8811 	msr	BASEPRI, sl
   27284:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   27288:	4620      	mov	r0, r4
   2728a:	b002      	add	sp, #8
   2728c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   27290:	2300      	movs	r3, #0
   27292:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27296:	ea56 0305 	orrs.w	r3, r6, r5
   2729a:	d106      	bne.n	272aa <z_impl_k_poll+0x76>
   2729c:	f38a 8811 	msr	BASEPRI, sl
   272a0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   272a4:	f06f 040a 	mvn.w	r4, #10
   272a8:	e7ee      	b.n	27288 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   272aa:	e9cd 6500 	strd	r6, r5, [sp]
   272ae:	4a0d      	ldr	r2, [pc, #52]	; (272e4 <z_impl_k_poll+0xb0>)
   272b0:	480d      	ldr	r0, [pc, #52]	; (272e8 <z_impl_k_poll+0xb4>)
   272b2:	4651      	mov	r1, sl
   272b4:	f7ff fb72 	bl	2699c <z_pend_curr>
   272b8:	4604      	mov	r4, r0
	__asm__ volatile(
   272ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   272be:	f3ef 8511 	mrs	r5, BASEPRI
   272c2:	f383 8812 	msr	BASEPRI_MAX, r3
   272c6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   272ca:	462a      	mov	r2, r5
   272cc:	4649      	mov	r1, r9
   272ce:	4640      	mov	r0, r8
   272d0:	f008 fd65 	bl	2fd9e <clear_event_registrations>
	__asm__ volatile(
   272d4:	f385 8811 	msr	BASEPRI, r5
   272d8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   272dc:	e7d4      	b.n	27288 <z_impl_k_poll+0x54>
   272de:	bf00      	nop
   272e0:	20004a90 	.word	0x20004a90
   272e4:	200009f4 	.word	0x200009f4
   272e8:	200057f9 	.word	0x200057f9

000272ec <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   272ec:	b538      	push	{r3, r4, r5, lr}
   272ee:	4603      	mov	r3, r0
	__asm__ volatile(
   272f0:	f04f 0240 	mov.w	r2, #64	; 0x40
   272f4:	f3ef 8511 	mrs	r5, BASEPRI
   272f8:	f382 8812 	msr	BASEPRI_MAX, r2
   272fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   27300:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   27302:	2101      	movs	r1, #1
   27304:	6081      	str	r1, [r0, #8]
	return list->head == list;
   27306:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   27308:	4283      	cmp	r3, r0
   2730a:	d106      	bne.n	2731a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   2730c:	f385 8811 	msr	BASEPRI, r5
   27310:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   27314:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   27316:	4620      	mov	r0, r4
   27318:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   2731a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2731e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27320:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27322:	2300      	movs	r3, #0
	node->prev = NULL;
   27324:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   27328:	f008 fcdf 	bl	2fcea <signal_poll_event>
	z_reschedule(&lock, key);
   2732c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2732e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   27330:	4801      	ldr	r0, [pc, #4]	; (27338 <z_impl_k_poll_signal_raise+0x4c>)
   27332:	f7ff fb97 	bl	26a64 <z_reschedule>
	return rc;
   27336:	e7ee      	b.n	27316 <z_impl_k_poll_signal_raise+0x2a>
   27338:	200057f9 	.word	0x200057f9

0002733c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2733c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2733e:	4606      	mov	r6, r0
   27340:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   27342:	f008 f8ac 	bl	2f49e <k_is_in_isr>
   27346:	b978      	cbnz	r0, 27368 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   27348:	4b0b      	ldr	r3, [pc, #44]	; (27378 <z_thread_aligned_alloc+0x3c>)
   2734a:	689b      	ldr	r3, [r3, #8]
   2734c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2734e:	b17c      	cbz	r4, 27370 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   27350:	1d2a      	adds	r2, r5, #4
   27352:	d209      	bcs.n	27368 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   27354:	2000      	movs	r0, #0
   27356:	2100      	movs	r1, #0
   27358:	e9cd 0100 	strd	r0, r1, [sp]
   2735c:	f046 0104 	orr.w	r1, r6, #4
   27360:	4620      	mov	r0, r4
   27362:	f007 ffe5 	bl	2f330 <k_heap_aligned_alloc>
	if (mem == NULL) {
   27366:	b908      	cbnz	r0, 2736c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   27368:	2400      	movs	r4, #0
	}

	return ret;
   2736a:	e001      	b.n	27370 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   2736c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   2736e:	1d04      	adds	r4, r0, #4
}
   27370:	4620      	mov	r0, r4
   27372:	b002      	add	sp, #8
   27374:	bd70      	pop	{r4, r5, r6, pc}
   27376:	bf00      	nop
   27378:	20004a90 	.word	0x20004a90

0002737c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2737c:	4801      	ldr	r0, [pc, #4]	; (27384 <boot_banner+0x8>)
   2737e:	f003 b8e8 	b.w	2a552 <printk>
   27382:	bf00      	nop
   27384:	00033f1f 	.word	0x00033f1f

00027388 <ocrypto_ecdh_p256_public_key>:
   27388:	b530      	push	{r4, r5, lr}
   2738a:	b099      	sub	sp, #100	; 0x64
   2738c:	4605      	mov	r5, r0
   2738e:	4668      	mov	r0, sp
   27390:	f000 f828 	bl	273e4 <ocrypto_sc_p256_from32bytes>
   27394:	4669      	mov	r1, sp
   27396:	4604      	mov	r4, r0
   27398:	a808      	add	r0, sp, #32
   2739a:	f000 fa53 	bl	27844 <ocrypto_curve_p256_scalarmult_base>
   2739e:	a908      	add	r1, sp, #32
   273a0:	4304      	orrs	r4, r0
   273a2:	4628      	mov	r0, r5
   273a4:	f000 f98a 	bl	276bc <ocrypto_curve_p256_to64bytes>
   273a8:	4620      	mov	r0, r4
   273aa:	b019      	add	sp, #100	; 0x64
   273ac:	bd30      	pop	{r4, r5, pc}
   273ae:	bf00      	nop

000273b0 <ocrypto_ecdh_p256_common_secret>:
   273b0:	b570      	push	{r4, r5, r6, lr}
   273b2:	b098      	sub	sp, #96	; 0x60
   273b4:	4605      	mov	r5, r0
   273b6:	4668      	mov	r0, sp
   273b8:	4616      	mov	r6, r2
   273ba:	f000 f813 	bl	273e4 <ocrypto_sc_p256_from32bytes>
   273be:	4631      	mov	r1, r6
   273c0:	4604      	mov	r4, r0
   273c2:	a808      	add	r0, sp, #32
   273c4:	f000 f946 	bl	27654 <ocrypto_curve_p256_from64bytes>
   273c8:	a908      	add	r1, sp, #32
   273ca:	466a      	mov	r2, sp
   273cc:	4304      	orrs	r4, r0
   273ce:	4608      	mov	r0, r1
   273d0:	f000 f982 	bl	276d8 <ocrypto_curve_p256_scalarmult>
   273d4:	a908      	add	r1, sp, #32
   273d6:	4304      	orrs	r4, r0
   273d8:	4628      	mov	r0, r5
   273da:	f000 f96d 	bl	276b8 <ocrypto_curve_p256_to32bytes>
   273de:	4620      	mov	r0, r4
   273e0:	b018      	add	sp, #96	; 0x60
   273e2:	bd70      	pop	{r4, r5, r6, pc}

000273e4 <ocrypto_sc_p256_from32bytes>:
   273e4:	b570      	push	{r4, r5, r6, lr}
   273e6:	680b      	ldr	r3, [r1, #0]
   273e8:	4e12      	ldr	r6, [pc, #72]	; (27434 <ocrypto_sc_p256_from32bytes+0x50>)
   273ea:	ba1b      	rev	r3, r3
   273ec:	61c3      	str	r3, [r0, #28]
   273ee:	684b      	ldr	r3, [r1, #4]
   273f0:	ba1b      	rev	r3, r3
   273f2:	6183      	str	r3, [r0, #24]
   273f4:	688b      	ldr	r3, [r1, #8]
   273f6:	ba1b      	rev	r3, r3
   273f8:	6143      	str	r3, [r0, #20]
   273fa:	68cb      	ldr	r3, [r1, #12]
   273fc:	ba1b      	rev	r3, r3
   273fe:	6103      	str	r3, [r0, #16]
   27400:	690b      	ldr	r3, [r1, #16]
   27402:	ba1b      	rev	r3, r3
   27404:	60c3      	str	r3, [r0, #12]
   27406:	694b      	ldr	r3, [r1, #20]
   27408:	ba1b      	rev	r3, r3
   2740a:	6083      	str	r3, [r0, #8]
   2740c:	698b      	ldr	r3, [r1, #24]
   2740e:	ba1b      	rev	r3, r3
   27410:	6043      	str	r3, [r0, #4]
   27412:	69cb      	ldr	r3, [r1, #28]
   27414:	ba1b      	rev	r3, r3
   27416:	4632      	mov	r2, r6
   27418:	6003      	str	r3, [r0, #0]
   2741a:	4601      	mov	r1, r0
   2741c:	4604      	mov	r4, r0
   2741e:	f7d9 fea9 	bl	1174 <ocrypto_bigint_sub256>
   27422:	4631      	mov	r1, r6
   27424:	4605      	mov	r5, r0
   27426:	4602      	mov	r2, r0
   27428:	4620      	mov	r0, r4
   2742a:	f7d9 fec3 	bl	11b4 <ocrypto_bigint_cadd256>
   2742e:	1e68      	subs	r0, r5, #1
   27430:	bd70      	pop	{r4, r5, r6, pc}
   27432:	bf00      	nop
   27434:	00030d28 	.word	0x00030d28

00027438 <p256_zdblu>:
   27438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2743c:	b088      	sub	sp, #32
   2743e:	460c      	mov	r4, r1
   27440:	4606      	mov	r6, r0
   27442:	f102 0120 	add.w	r1, r2, #32
   27446:	4668      	mov	r0, sp
   27448:	f106 0720 	add.w	r7, r6, #32
   2744c:	4690      	mov	r8, r2
   2744e:	f7da f98b 	bl	1768 <ocrypto_mod_p256_sqr>
   27452:	466a      	mov	r2, sp
   27454:	4669      	mov	r1, sp
   27456:	4668      	mov	r0, sp
   27458:	f7da f8a8 	bl	15ac <ocrypto_mod_p256_add>
   2745c:	4669      	mov	r1, sp
   2745e:	4638      	mov	r0, r7
   27460:	f7da f982 	bl	1768 <ocrypto_mod_p256_sqr>
   27464:	463a      	mov	r2, r7
   27466:	4639      	mov	r1, r7
   27468:	4638      	mov	r0, r7
   2746a:	f104 0520 	add.w	r5, r4, #32
   2746e:	f7da f89d 	bl	15ac <ocrypto_mod_p256_add>
   27472:	466a      	mov	r2, sp
   27474:	4669      	mov	r1, sp
   27476:	4668      	mov	r0, sp
   27478:	f7da f898 	bl	15ac <ocrypto_mod_p256_add>
   2747c:	4641      	mov	r1, r8
   2747e:	4628      	mov	r0, r5
   27480:	f7da f972 	bl	1768 <ocrypto_mod_p256_sqr>
   27484:	466a      	mov	r2, sp
   27486:	4641      	mov	r1, r8
   27488:	4630      	mov	r0, r6
   2748a:	f7da f955 	bl	1738 <ocrypto_mod_p256_mul>
   2748e:	462a      	mov	r2, r5
   27490:	4629      	mov	r1, r5
   27492:	4668      	mov	r0, sp
   27494:	f7da f88a 	bl	15ac <ocrypto_mod_p256_add>
   27498:	462a      	mov	r2, r5
   2749a:	4669      	mov	r1, sp
   2749c:	4668      	mov	r0, sp
   2749e:	f7da f885 	bl	15ac <ocrypto_mod_p256_add>
   274a2:	4a12      	ldr	r2, [pc, #72]	; (274ec <p256_zdblu+0xb4>)
   274a4:	4669      	mov	r1, sp
   274a6:	4668      	mov	r0, sp
   274a8:	f7da f880 	bl	15ac <ocrypto_mod_p256_add>
   274ac:	4669      	mov	r1, sp
   274ae:	4620      	mov	r0, r4
   274b0:	f7da f95a 	bl	1768 <ocrypto_mod_p256_sqr>
   274b4:	4632      	mov	r2, r6
   274b6:	4621      	mov	r1, r4
   274b8:	4620      	mov	r0, r4
   274ba:	f7da f8b5 	bl	1628 <ocrypto_mod_p256_sub>
   274be:	4632      	mov	r2, r6
   274c0:	4621      	mov	r1, r4
   274c2:	4620      	mov	r0, r4
   274c4:	f7da f8b0 	bl	1628 <ocrypto_mod_p256_sub>
   274c8:	4622      	mov	r2, r4
   274ca:	4631      	mov	r1, r6
   274cc:	4628      	mov	r0, r5
   274ce:	f7da f8ab 	bl	1628 <ocrypto_mod_p256_sub>
   274d2:	466a      	mov	r2, sp
   274d4:	4629      	mov	r1, r5
   274d6:	4628      	mov	r0, r5
   274d8:	f7da f92e 	bl	1738 <ocrypto_mod_p256_mul>
   274dc:	463a      	mov	r2, r7
   274de:	4629      	mov	r1, r5
   274e0:	4628      	mov	r0, r5
   274e2:	f7da f8a1 	bl	1628 <ocrypto_mod_p256_sub>
   274e6:	b008      	add	sp, #32
   274e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   274ec:	00030e08 	.word	0x00030e08

000274f0 <p256_zaddc>:
   274f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   274f2:	b099      	sub	sp, #100	; 0x64
   274f4:	4604      	mov	r4, r0
   274f6:	460d      	mov	r5, r1
   274f8:	460a      	mov	r2, r1
   274fa:	4601      	mov	r1, r0
   274fc:	4668      	mov	r0, sp
   274fe:	f7da f893 	bl	1628 <ocrypto_mod_p256_sub>
   27502:	4669      	mov	r1, sp
   27504:	4668      	mov	r0, sp
   27506:	f7da f92f 	bl	1768 <ocrypto_mod_p256_sqr>
   2750a:	466a      	mov	r2, sp
   2750c:	4621      	mov	r1, r4
   2750e:	a808      	add	r0, sp, #32
   27510:	f105 0620 	add.w	r6, r5, #32
   27514:	f104 0720 	add.w	r7, r4, #32
   27518:	f7da f90e 	bl	1738 <ocrypto_mod_p256_mul>
   2751c:	466a      	mov	r2, sp
   2751e:	4629      	mov	r1, r5
   27520:	4668      	mov	r0, sp
   27522:	f7da f909 	bl	1738 <ocrypto_mod_p256_mul>
   27526:	4632      	mov	r2, r6
   27528:	4639      	mov	r1, r7
   2752a:	a810      	add	r0, sp, #64	; 0x40
   2752c:	f7da f83e 	bl	15ac <ocrypto_mod_p256_add>
   27530:	4632      	mov	r2, r6
   27532:	4639      	mov	r1, r7
   27534:	4630      	mov	r0, r6
   27536:	f7da f877 	bl	1628 <ocrypto_mod_p256_sub>
   2753a:	4631      	mov	r1, r6
   2753c:	4628      	mov	r0, r5
   2753e:	f7da f913 	bl	1768 <ocrypto_mod_p256_sqr>
   27542:	466a      	mov	r2, sp
   27544:	a908      	add	r1, sp, #32
   27546:	4620      	mov	r0, r4
   27548:	f7da f830 	bl	15ac <ocrypto_mod_p256_add>
   2754c:	4622      	mov	r2, r4
   2754e:	4629      	mov	r1, r5
   27550:	4628      	mov	r0, r5
   27552:	f7da f869 	bl	1628 <ocrypto_mod_p256_sub>
   27556:	466a      	mov	r2, sp
   27558:	a908      	add	r1, sp, #32
   2755a:	4668      	mov	r0, sp
   2755c:	f7da f864 	bl	1628 <ocrypto_mod_p256_sub>
   27560:	466a      	mov	r2, sp
   27562:	4639      	mov	r1, r7
   27564:	4638      	mov	r0, r7
   27566:	f7da f8e7 	bl	1738 <ocrypto_mod_p256_mul>
   2756a:	462a      	mov	r2, r5
   2756c:	a908      	add	r1, sp, #32
   2756e:	4668      	mov	r0, sp
   27570:	f7da f85a 	bl	1628 <ocrypto_mod_p256_sub>
   27574:	466a      	mov	r2, sp
   27576:	4631      	mov	r1, r6
   27578:	4630      	mov	r0, r6
   2757a:	f7da f8dd 	bl	1738 <ocrypto_mod_p256_mul>
   2757e:	463a      	mov	r2, r7
   27580:	4631      	mov	r1, r6
   27582:	4630      	mov	r0, r6
   27584:	f7da f850 	bl	1628 <ocrypto_mod_p256_sub>
   27588:	a910      	add	r1, sp, #64	; 0x40
   2758a:	4668      	mov	r0, sp
   2758c:	f7da f8ec 	bl	1768 <ocrypto_mod_p256_sqr>
   27590:	4622      	mov	r2, r4
   27592:	4669      	mov	r1, sp
   27594:	4620      	mov	r0, r4
   27596:	f7da f847 	bl	1628 <ocrypto_mod_p256_sub>
   2759a:	a908      	add	r1, sp, #32
   2759c:	4622      	mov	r2, r4
   2759e:	4608      	mov	r0, r1
   275a0:	f7da f842 	bl	1628 <ocrypto_mod_p256_sub>
   275a4:	a910      	add	r1, sp, #64	; 0x40
   275a6:	aa08      	add	r2, sp, #32
   275a8:	4608      	mov	r0, r1
   275aa:	f7da f8c5 	bl	1738 <ocrypto_mod_p256_mul>
   275ae:	463a      	mov	r2, r7
   275b0:	a910      	add	r1, sp, #64	; 0x40
   275b2:	4638      	mov	r0, r7
   275b4:	f7da f838 	bl	1628 <ocrypto_mod_p256_sub>
   275b8:	b019      	add	sp, #100	; 0x64
   275ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000275bc <p256_zaddu>:
   275bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   275c0:	b088      	sub	sp, #32
   275c2:	460c      	mov	r4, r1
   275c4:	4605      	mov	r5, r0
   275c6:	4690      	mov	r8, r2
   275c8:	460a      	mov	r2, r1
   275ca:	4601      	mov	r1, r0
   275cc:	4668      	mov	r0, sp
   275ce:	f7da f82b 	bl	1628 <ocrypto_mod_p256_sub>
   275d2:	4669      	mov	r1, sp
   275d4:	4668      	mov	r0, sp
   275d6:	f7da f8c7 	bl	1768 <ocrypto_mod_p256_sqr>
   275da:	466a      	mov	r2, sp
   275dc:	4629      	mov	r1, r5
   275de:	4628      	mov	r0, r5
   275e0:	f104 0620 	add.w	r6, r4, #32
   275e4:	f7da f8a8 	bl	1738 <ocrypto_mod_p256_mul>
   275e8:	f105 0720 	add.w	r7, r5, #32
   275ec:	466a      	mov	r2, sp
   275ee:	4621      	mov	r1, r4
   275f0:	4668      	mov	r0, sp
   275f2:	f7da f8a1 	bl	1738 <ocrypto_mod_p256_mul>
   275f6:	4632      	mov	r2, r6
   275f8:	4639      	mov	r1, r7
   275fa:	4630      	mov	r0, r6
   275fc:	f7da f814 	bl	1628 <ocrypto_mod_p256_sub>
   27600:	4631      	mov	r1, r6
   27602:	4620      	mov	r0, r4
   27604:	f7da f8b0 	bl	1768 <ocrypto_mod_p256_sqr>
   27608:	462a      	mov	r2, r5
   2760a:	4621      	mov	r1, r4
   2760c:	4620      	mov	r0, r4
   2760e:	f7da f80b 	bl	1628 <ocrypto_mod_p256_sub>
   27612:	466a      	mov	r2, sp
   27614:	4621      	mov	r1, r4
   27616:	4620      	mov	r0, r4
   27618:	f7da f806 	bl	1628 <ocrypto_mod_p256_sub>
   2761c:	466a      	mov	r2, sp
   2761e:	4629      	mov	r1, r5
   27620:	4640      	mov	r0, r8
   27622:	f7da f801 	bl	1628 <ocrypto_mod_p256_sub>
   27626:	4642      	mov	r2, r8
   27628:	4639      	mov	r1, r7
   2762a:	4638      	mov	r0, r7
   2762c:	f7da f884 	bl	1738 <ocrypto_mod_p256_mul>
   27630:	4622      	mov	r2, r4
   27632:	4629      	mov	r1, r5
   27634:	4668      	mov	r0, sp
   27636:	f7d9 fff7 	bl	1628 <ocrypto_mod_p256_sub>
   2763a:	466a      	mov	r2, sp
   2763c:	4631      	mov	r1, r6
   2763e:	4630      	mov	r0, r6
   27640:	f7da f87a 	bl	1738 <ocrypto_mod_p256_mul>
   27644:	463a      	mov	r2, r7
   27646:	4631      	mov	r1, r6
   27648:	4630      	mov	r0, r6
   2764a:	f7d9 ffed 	bl	1628 <ocrypto_mod_p256_sub>
   2764e:	b008      	add	sp, #32
   27650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027654 <ocrypto_curve_p256_from64bytes>:
   27654:	b570      	push	{r4, r5, r6, lr}
   27656:	f100 0620 	add.w	r6, r0, #32
   2765a:	b090      	sub	sp, #64	; 0x40
   2765c:	460d      	mov	r5, r1
   2765e:	4604      	mov	r4, r0
   27660:	f000 f914 	bl	2788c <ocrypto_mod_p256_from_bytes>
   27664:	f105 0120 	add.w	r1, r5, #32
   27668:	4630      	mov	r0, r6
   2766a:	f000 f90f 	bl	2788c <ocrypto_mod_p256_from_bytes>
   2766e:	4621      	mov	r1, r4
   27670:	a808      	add	r0, sp, #32
   27672:	f7da f879 	bl	1768 <ocrypto_mod_p256_sqr>
   27676:	a908      	add	r1, sp, #32
   27678:	4608      	mov	r0, r1
   2767a:	4a0d      	ldr	r2, [pc, #52]	; (276b0 <ocrypto_curve_p256_from64bytes+0x5c>)
   2767c:	f7d9 ff96 	bl	15ac <ocrypto_mod_p256_add>
   27680:	a908      	add	r1, sp, #32
   27682:	4622      	mov	r2, r4
   27684:	4608      	mov	r0, r1
   27686:	f7da f857 	bl	1738 <ocrypto_mod_p256_mul>
   2768a:	a908      	add	r1, sp, #32
   2768c:	4a09      	ldr	r2, [pc, #36]	; (276b4 <ocrypto_curve_p256_from64bytes+0x60>)
   2768e:	4608      	mov	r0, r1
   27690:	f7d9 ff8c 	bl	15ac <ocrypto_mod_p256_add>
   27694:	4631      	mov	r1, r6
   27696:	4668      	mov	r0, sp
   27698:	f7da f866 	bl	1768 <ocrypto_mod_p256_sqr>
   2769c:	2220      	movs	r2, #32
   2769e:	4669      	mov	r1, sp
   276a0:	eb0d 0002 	add.w	r0, sp, r2
   276a4:	f7d9 ff54 	bl	1550 <ocrypto_constant_time_equal>
   276a8:	3801      	subs	r0, #1
   276aa:	b010      	add	sp, #64	; 0x40
   276ac:	bd70      	pop	{r4, r5, r6, pc}
   276ae:	bf00      	nop
   276b0:	00030e08 	.word	0x00030e08
   276b4:	00030de8 	.word	0x00030de8

000276b8 <ocrypto_curve_p256_to32bytes>:
   276b8:	f000 b902 	b.w	278c0 <ocrypto_mod_p256_to_bytes>

000276bc <ocrypto_curve_p256_to64bytes>:
   276bc:	b538      	push	{r3, r4, r5, lr}
   276be:	4604      	mov	r4, r0
   276c0:	460d      	mov	r5, r1
   276c2:	f000 f8fd 	bl	278c0 <ocrypto_mod_p256_to_bytes>
   276c6:	f105 0120 	add.w	r1, r5, #32
   276ca:	f104 0020 	add.w	r0, r4, #32
   276ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   276d2:	f000 b8f5 	b.w	278c0 <ocrypto_mod_p256_to_bytes>
   276d6:	bf00      	nop

000276d8 <ocrypto_curve_p256_scalarmult>:
   276d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   276dc:	4613      	mov	r3, r2
   276de:	b0b8      	sub	sp, #224	; 0xe0
   276e0:	4a54      	ldr	r2, [pc, #336]	; (27834 <ocrypto_curve_p256_scalarmult+0x15c>)
   276e2:	4689      	mov	r9, r1
   276e4:	4680      	mov	r8, r0
   276e6:	4619      	mov	r1, r3
   276e8:	a810      	add	r0, sp, #64	; 0x40
   276ea:	f7d9 fd43 	bl	1174 <ocrypto_bigint_sub256>
   276ee:	4952      	ldr	r1, [pc, #328]	; (27838 <ocrypto_curve_p256_scalarmult+0x160>)
   276f0:	4602      	mov	r2, r0
   276f2:	a810      	add	r0, sp, #64	; 0x40
   276f4:	f7d9 fd5e 	bl	11b4 <ocrypto_bigint_cadd256>
   276f8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   276fa:	494e      	ldr	r1, [pc, #312]	; (27834 <ocrypto_curve_p256_scalarmult+0x15c>)
   276fc:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   27700:	4607      	mov	r7, r0
   27702:	f1c6 0201 	rsb	r2, r6, #1
   27706:	a810      	add	r0, sp, #64	; 0x40
   27708:	f7d9 fd54 	bl	11b4 <ocrypto_bigint_cadd256>
   2770c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2770e:	464a      	mov	r2, r9
   27710:	ea6f 0a03 	mvn.w	sl, r3
   27714:	a928      	add	r1, sp, #160	; 0xa0
   27716:	a818      	add	r0, sp, #96	; 0x60
   27718:	f7ff fe8e 	bl	27438 <p256_zdblu>
   2771c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   27720:	a920      	add	r1, sp, #128	; 0x80
   27722:	f1ca 0201 	rsb	r2, sl, #1
   27726:	4608      	mov	r0, r1
   27728:	f000 f892 	bl	27850 <ocrypto_mod_p256_cneg>
   2772c:	f1c7 0701 	rsb	r7, r7, #1
   27730:	24fe      	movs	r4, #254	; 0xfe
   27732:	466a      	mov	r2, sp
   27734:	a918      	add	r1, sp, #96	; 0x60
   27736:	a828      	add	r0, sp, #160	; 0xa0
   27738:	f7ff ff40 	bl	275bc <p256_zaddu>
   2773c:	1163      	asrs	r3, r4, #5
   2773e:	aa38      	add	r2, sp, #224	; 0xe0
   27740:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   27744:	f004 021f 	and.w	r2, r4, #31
   27748:	f853 3ca0 	ldr.w	r3, [r3, #-160]
   2774c:	40d3      	lsrs	r3, r2
   2774e:	4655      	mov	r5, sl
   27750:	f003 0a01 	and.w	sl, r3, #1
   27754:	ea8a 0505 	eor.w	r5, sl, r5
   27758:	462a      	mov	r2, r5
   2775a:	a928      	add	r1, sp, #160	; 0xa0
   2775c:	a818      	add	r0, sp, #96	; 0x60
   2775e:	f7d9 fd85 	bl	126c <ocrypto_bigint_cswap256>
   27762:	462a      	mov	r2, r5
   27764:	a930      	add	r1, sp, #192	; 0xc0
   27766:	a820      	add	r0, sp, #128	; 0x80
   27768:	f7d9 fd80 	bl	126c <ocrypto_bigint_cswap256>
   2776c:	3c01      	subs	r4, #1
   2776e:	a928      	add	r1, sp, #160	; 0xa0
   27770:	a818      	add	r0, sp, #96	; 0x60
   27772:	f7ff febd 	bl	274f0 <p256_zaddc>
   27776:	1c63      	adds	r3, r4, #1
   27778:	d1db      	bne.n	27732 <ocrypto_curve_p256_scalarmult+0x5a>
   2777a:	f1ca 0201 	rsb	r2, sl, #1
   2777e:	a920      	add	r1, sp, #128	; 0x80
   27780:	a808      	add	r0, sp, #32
   27782:	f000 f865 	bl	27850 <ocrypto_mod_p256_cneg>
   27786:	ea86 060a 	eor.w	r6, r6, sl
   2778a:	466a      	mov	r2, sp
   2778c:	a918      	add	r1, sp, #96	; 0x60
   2778e:	a828      	add	r0, sp, #160	; 0xa0
   27790:	f7ff ff14 	bl	275bc <p256_zaddu>
   27794:	a928      	add	r1, sp, #160	; 0xa0
   27796:	4632      	mov	r2, r6
   27798:	a818      	add	r0, sp, #96	; 0x60
   2779a:	f7d9 fd67 	bl	126c <ocrypto_bigint_cswap256>
   2779e:	4632      	mov	r2, r6
   277a0:	a930      	add	r1, sp, #192	; 0xc0
   277a2:	a820      	add	r0, sp, #128	; 0x80
   277a4:	f7d9 fd62 	bl	126c <ocrypto_bigint_cswap256>
   277a8:	a908      	add	r1, sp, #32
   277aa:	466a      	mov	r2, sp
   277ac:	4608      	mov	r0, r1
   277ae:	f7d9 ffc3 	bl	1738 <ocrypto_mod_p256_mul>
   277b2:	a908      	add	r1, sp, #32
   277b4:	4608      	mov	r0, r1
   277b6:	f000 f89d 	bl	278f4 <ocrypto_mod_p256_inv>
   277ba:	a908      	add	r1, sp, #32
   277bc:	f108 0420 	add.w	r4, r8, #32
   277c0:	f109 0220 	add.w	r2, r9, #32
   277c4:	4608      	mov	r0, r1
   277c6:	f7d9 ffb7 	bl	1738 <ocrypto_mod_p256_mul>
   277ca:	a920      	add	r1, sp, #128	; 0x80
   277cc:	aa08      	add	r2, sp, #32
   277ce:	4620      	mov	r0, r4
   277d0:	f7d9 ffb2 	bl	1738 <ocrypto_mod_p256_mul>
   277d4:	aa08      	add	r2, sp, #32
   277d6:	a918      	add	r1, sp, #96	; 0x60
   277d8:	4668      	mov	r0, sp
   277da:	f7d9 ffad 	bl	1738 <ocrypto_mod_p256_mul>
   277de:	4669      	mov	r1, sp
   277e0:	4668      	mov	r0, sp
   277e2:	f7d9 ffc1 	bl	1768 <ocrypto_mod_p256_sqr>
   277e6:	aa18      	add	r2, sp, #96	; 0x60
   277e8:	4669      	mov	r1, sp
   277ea:	a808      	add	r0, sp, #32
   277ec:	f7d9 ffa4 	bl	1738 <ocrypto_mod_p256_mul>
   277f0:	4621      	mov	r1, r4
   277f2:	4668      	mov	r0, sp
   277f4:	f7d9 ffb8 	bl	1768 <ocrypto_mod_p256_sqr>
   277f8:	aa08      	add	r2, sp, #32
   277fa:	4669      	mov	r1, sp
   277fc:	4610      	mov	r0, r2
   277fe:	f7d9 ff13 	bl	1628 <ocrypto_mod_p256_sub>
   27802:	4a0e      	ldr	r2, [pc, #56]	; (2783c <ocrypto_curve_p256_scalarmult+0x164>)
   27804:	a908      	add	r1, sp, #32
   27806:	4668      	mov	r0, sp
   27808:	f7d9 ff0e 	bl	1628 <ocrypto_mod_p256_sub>
   2780c:	4620      	mov	r0, r4
   2780e:	2120      	movs	r1, #32
   27810:	f7d9 feb2 	bl	1578 <ocrypto_constant_time_is_zero>
   27814:	a908      	add	r1, sp, #32
   27816:	4602      	mov	r2, r0
   27818:	4244      	negs	r4, r0
   2781a:	4668      	mov	r0, sp
   2781c:	f7d9 fd26 	bl	126c <ocrypto_bigint_cswap256>
   27820:	4640      	mov	r0, r8
   27822:	4a07      	ldr	r2, [pc, #28]	; (27840 <ocrypto_curve_p256_scalarmult+0x168>)
   27824:	4669      	mov	r1, sp
   27826:	f7d9 ff87 	bl	1738 <ocrypto_mod_p256_mul>
   2782a:	433c      	orrs	r4, r7
   2782c:	4620      	mov	r0, r4
   2782e:	b038      	add	sp, #224	; 0xe0
   27830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27834:	00030d68 	.word	0x00030d68
   27838:	00030d88 	.word	0x00030d88
   2783c:	00030de8 	.word	0x00030de8
   27840:	00030d48 	.word	0x00030d48

00027844 <ocrypto_curve_p256_scalarmult_base>:
   27844:	460a      	mov	r2, r1
   27846:	4901      	ldr	r1, [pc, #4]	; (2784c <ocrypto_curve_p256_scalarmult_base+0x8>)
   27848:	f7ff bf46 	b.w	276d8 <ocrypto_curve_p256_scalarmult>
   2784c:	00030da8 	.word	0x00030da8

00027850 <ocrypto_mod_p256_cneg>:
   27850:	b570      	push	{r4, r5, r6, lr}
   27852:	b088      	sub	sp, #32
   27854:	4604      	mov	r4, r0
   27856:	460d      	mov	r5, r1
   27858:	4616      	mov	r6, r2
   2785a:	2100      	movs	r1, #0
   2785c:	2220      	movs	r2, #32
   2785e:	4668      	mov	r0, sp
   27860:	f004 fd48 	bl	2c2f4 <memset>
   27864:	2300      	movs	r3, #0
   27866:	4629      	mov	r1, r5
   27868:	2220      	movs	r2, #32
   2786a:	4620      	mov	r0, r4
   2786c:	9300      	str	r3, [sp, #0]
   2786e:	f004 fd36 	bl	2c2de <memcpy>
   27872:	462a      	mov	r2, r5
   27874:	4669      	mov	r1, sp
   27876:	4668      	mov	r0, sp
   27878:	f7d9 fed6 	bl	1628 <ocrypto_mod_p256_sub>
   2787c:	4632      	mov	r2, r6
   2787e:	4669      	mov	r1, sp
   27880:	4620      	mov	r0, r4
   27882:	f7d9 fcf3 	bl	126c <ocrypto_bigint_cswap256>
   27886:	b008      	add	sp, #32
   27888:	bd70      	pop	{r4, r5, r6, pc}
   2788a:	bf00      	nop

0002788c <ocrypto_mod_p256_from_bytes>:
   2788c:	680b      	ldr	r3, [r1, #0]
   2788e:	ba1b      	rev	r3, r3
   27890:	61c3      	str	r3, [r0, #28]
   27892:	684b      	ldr	r3, [r1, #4]
   27894:	ba1b      	rev	r3, r3
   27896:	6183      	str	r3, [r0, #24]
   27898:	688b      	ldr	r3, [r1, #8]
   2789a:	ba1b      	rev	r3, r3
   2789c:	6143      	str	r3, [r0, #20]
   2789e:	68cb      	ldr	r3, [r1, #12]
   278a0:	ba1b      	rev	r3, r3
   278a2:	6103      	str	r3, [r0, #16]
   278a4:	690b      	ldr	r3, [r1, #16]
   278a6:	ba1b      	rev	r3, r3
   278a8:	60c3      	str	r3, [r0, #12]
   278aa:	694b      	ldr	r3, [r1, #20]
   278ac:	ba1b      	rev	r3, r3
   278ae:	6083      	str	r3, [r0, #8]
   278b0:	698b      	ldr	r3, [r1, #24]
   278b2:	ba1b      	rev	r3, r3
   278b4:	6043      	str	r3, [r0, #4]
   278b6:	69cb      	ldr	r3, [r1, #28]
   278b8:	ba1b      	rev	r3, r3
   278ba:	6003      	str	r3, [r0, #0]
   278bc:	4770      	bx	lr
   278be:	bf00      	nop

000278c0 <ocrypto_mod_p256_to_bytes>:
   278c0:	69cb      	ldr	r3, [r1, #28]
   278c2:	ba1b      	rev	r3, r3
   278c4:	6003      	str	r3, [r0, #0]
   278c6:	698b      	ldr	r3, [r1, #24]
   278c8:	ba1b      	rev	r3, r3
   278ca:	6043      	str	r3, [r0, #4]
   278cc:	694b      	ldr	r3, [r1, #20]
   278ce:	ba1b      	rev	r3, r3
   278d0:	6083      	str	r3, [r0, #8]
   278d2:	690b      	ldr	r3, [r1, #16]
   278d4:	ba1b      	rev	r3, r3
   278d6:	60c3      	str	r3, [r0, #12]
   278d8:	68cb      	ldr	r3, [r1, #12]
   278da:	ba1b      	rev	r3, r3
   278dc:	6103      	str	r3, [r0, #16]
   278de:	688b      	ldr	r3, [r1, #8]
   278e0:	ba1b      	rev	r3, r3
   278e2:	6143      	str	r3, [r0, #20]
   278e4:	684b      	ldr	r3, [r1, #4]
   278e6:	ba1b      	rev	r3, r3
   278e8:	6183      	str	r3, [r0, #24]
   278ea:	680b      	ldr	r3, [r1, #0]
   278ec:	ba1b      	rev	r3, r3
   278ee:	61c3      	str	r3, [r0, #28]
   278f0:	4770      	bx	lr
   278f2:	bf00      	nop

000278f4 <ocrypto_mod_p256_inv>:
   278f4:	b570      	push	{r4, r5, r6, lr}
   278f6:	b098      	sub	sp, #96	; 0x60
   278f8:	460d      	mov	r5, r1
   278fa:	4606      	mov	r6, r0
   278fc:	a810      	add	r0, sp, #64	; 0x40
   278fe:	f7d9 ff33 	bl	1768 <ocrypto_mod_p256_sqr>
   27902:	462a      	mov	r2, r5
   27904:	a910      	add	r1, sp, #64	; 0x40
   27906:	4668      	mov	r0, sp
   27908:	f7d9 ff16 	bl	1738 <ocrypto_mod_p256_mul>
   2790c:	4669      	mov	r1, sp
   2790e:	a810      	add	r0, sp, #64	; 0x40
   27910:	f7d9 ff2a 	bl	1768 <ocrypto_mod_p256_sqr>
   27914:	a910      	add	r1, sp, #64	; 0x40
   27916:	4608      	mov	r0, r1
   27918:	f7d9 ff26 	bl	1768 <ocrypto_mod_p256_sqr>
   2791c:	466a      	mov	r2, sp
   2791e:	a910      	add	r1, sp, #64	; 0x40
   27920:	a808      	add	r0, sp, #32
   27922:	f7d9 ff09 	bl	1738 <ocrypto_mod_p256_mul>
   27926:	a908      	add	r1, sp, #32
   27928:	a810      	add	r0, sp, #64	; 0x40
   2792a:	f7d9 ff1d 	bl	1768 <ocrypto_mod_p256_sqr>
   2792e:	a910      	add	r1, sp, #64	; 0x40
   27930:	4608      	mov	r0, r1
   27932:	f7d9 ff19 	bl	1768 <ocrypto_mod_p256_sqr>
   27936:	a910      	add	r1, sp, #64	; 0x40
   27938:	4608      	mov	r0, r1
   2793a:	f7d9 ff15 	bl	1768 <ocrypto_mod_p256_sqr>
   2793e:	a910      	add	r1, sp, #64	; 0x40
   27940:	4608      	mov	r0, r1
   27942:	f7d9 ff11 	bl	1768 <ocrypto_mod_p256_sqr>
   27946:	a910      	add	r1, sp, #64	; 0x40
   27948:	aa08      	add	r2, sp, #32
   2794a:	4608      	mov	r0, r1
   2794c:	f7d9 fef4 	bl	1738 <ocrypto_mod_p256_mul>
   27950:	a910      	add	r1, sp, #64	; 0x40
   27952:	4608      	mov	r0, r1
   27954:	f7d9 ff08 	bl	1768 <ocrypto_mod_p256_sqr>
   27958:	a910      	add	r1, sp, #64	; 0x40
   2795a:	4608      	mov	r0, r1
   2795c:	f7d9 ff04 	bl	1768 <ocrypto_mod_p256_sqr>
   27960:	a910      	add	r1, sp, #64	; 0x40
   27962:	466a      	mov	r2, sp
   27964:	a808      	add	r0, sp, #32
   27966:	f7d9 fee7 	bl	1738 <ocrypto_mod_p256_mul>
   2796a:	2405      	movs	r4, #5
   2796c:	a908      	add	r1, sp, #32
   2796e:	a810      	add	r0, sp, #64	; 0x40
   27970:	f7d9 fefa 	bl	1768 <ocrypto_mod_p256_sqr>
   27974:	a910      	add	r1, sp, #64	; 0x40
   27976:	4608      	mov	r0, r1
   27978:	f7d9 fef6 	bl	1768 <ocrypto_mod_p256_sqr>
   2797c:	3c01      	subs	r4, #1
   2797e:	a910      	add	r1, sp, #64	; 0x40
   27980:	d1f5      	bne.n	2796e <ocrypto_mod_p256_inv+0x7a>
   27982:	aa08      	add	r2, sp, #32
   27984:	4608      	mov	r0, r1
   27986:	f7d9 fed7 	bl	1738 <ocrypto_mod_p256_mul>
   2798a:	2405      	movs	r4, #5
   2798c:	a910      	add	r1, sp, #64	; 0x40
   2798e:	4608      	mov	r0, r1
   27990:	f7d9 feea 	bl	1768 <ocrypto_mod_p256_sqr>
   27994:	a910      	add	r1, sp, #64	; 0x40
   27996:	4608      	mov	r0, r1
   27998:	f7d9 fee6 	bl	1768 <ocrypto_mod_p256_sqr>
   2799c:	3c01      	subs	r4, #1
   2799e:	d1f5      	bne.n	2798c <ocrypto_mod_p256_inv+0x98>
   279a0:	a910      	add	r1, sp, #64	; 0x40
   279a2:	aa08      	add	r2, sp, #32
   279a4:	4608      	mov	r0, r1
   279a6:	f7d9 fec7 	bl	1738 <ocrypto_mod_p256_mul>
   279aa:	a910      	add	r1, sp, #64	; 0x40
   279ac:	a808      	add	r0, sp, #32
   279ae:	f7d9 fedb 	bl	1768 <ocrypto_mod_p256_sqr>
   279b2:	a908      	add	r1, sp, #32
   279b4:	4608      	mov	r0, r1
   279b6:	f7d9 fed7 	bl	1768 <ocrypto_mod_p256_sqr>
   279ba:	a908      	add	r1, sp, #32
   279bc:	466a      	mov	r2, sp
   279be:	4668      	mov	r0, sp
   279c0:	f7d9 feba 	bl	1738 <ocrypto_mod_p256_mul>
   279c4:	2410      	movs	r4, #16
   279c6:	4669      	mov	r1, sp
   279c8:	a810      	add	r0, sp, #64	; 0x40
   279ca:	f7d9 fecd 	bl	1768 <ocrypto_mod_p256_sqr>
   279ce:	a910      	add	r1, sp, #64	; 0x40
   279d0:	4608      	mov	r0, r1
   279d2:	f7d9 fec9 	bl	1768 <ocrypto_mod_p256_sqr>
   279d6:	3c01      	subs	r4, #1
   279d8:	a910      	add	r1, sp, #64	; 0x40
   279da:	d1f5      	bne.n	279c8 <ocrypto_mod_p256_inv+0xd4>
   279dc:	462a      	mov	r2, r5
   279de:	4608      	mov	r0, r1
   279e0:	f7d9 feaa 	bl	1738 <ocrypto_mod_p256_mul>
   279e4:	2440      	movs	r4, #64	; 0x40
   279e6:	a910      	add	r1, sp, #64	; 0x40
   279e8:	4608      	mov	r0, r1
   279ea:	f7d9 febd 	bl	1768 <ocrypto_mod_p256_sqr>
   279ee:	a910      	add	r1, sp, #64	; 0x40
   279f0:	4608      	mov	r0, r1
   279f2:	f7d9 feb9 	bl	1768 <ocrypto_mod_p256_sqr>
   279f6:	3c01      	subs	r4, #1
   279f8:	d1f5      	bne.n	279e6 <ocrypto_mod_p256_inv+0xf2>
   279fa:	a910      	add	r1, sp, #64	; 0x40
   279fc:	466a      	mov	r2, sp
   279fe:	4608      	mov	r0, r1
   27a00:	f7d9 fe9a 	bl	1738 <ocrypto_mod_p256_mul>
   27a04:	2410      	movs	r4, #16
   27a06:	a910      	add	r1, sp, #64	; 0x40
   27a08:	4608      	mov	r0, r1
   27a0a:	f7d9 fead 	bl	1768 <ocrypto_mod_p256_sqr>
   27a0e:	a910      	add	r1, sp, #64	; 0x40
   27a10:	4608      	mov	r0, r1
   27a12:	f7d9 fea9 	bl	1768 <ocrypto_mod_p256_sqr>
   27a16:	3c01      	subs	r4, #1
   27a18:	d1f5      	bne.n	27a06 <ocrypto_mod_p256_inv+0x112>
   27a1a:	a910      	add	r1, sp, #64	; 0x40
   27a1c:	466a      	mov	r2, sp
   27a1e:	4608      	mov	r0, r1
   27a20:	f7d9 fe8a 	bl	1738 <ocrypto_mod_p256_mul>
   27a24:	2410      	movs	r4, #16
   27a26:	a910      	add	r1, sp, #64	; 0x40
   27a28:	4608      	mov	r0, r1
   27a2a:	f7d9 fe9d 	bl	1768 <ocrypto_mod_p256_sqr>
   27a2e:	a910      	add	r1, sp, #64	; 0x40
   27a30:	4608      	mov	r0, r1
   27a32:	f7d9 fe99 	bl	1768 <ocrypto_mod_p256_sqr>
   27a36:	3c01      	subs	r4, #1
   27a38:	d1f5      	bne.n	27a26 <ocrypto_mod_p256_inv+0x132>
   27a3a:	a910      	add	r1, sp, #64	; 0x40
   27a3c:	aa08      	add	r2, sp, #32
   27a3e:	4608      	mov	r0, r1
   27a40:	f7d9 fe7a 	bl	1738 <ocrypto_mod_p256_mul>
   27a44:	462a      	mov	r2, r5
   27a46:	a910      	add	r1, sp, #64	; 0x40
   27a48:	4630      	mov	r0, r6
   27a4a:	f7d9 fe75 	bl	1738 <ocrypto_mod_p256_mul>
   27a4e:	b018      	add	sp, #96	; 0x60
   27a50:	bd70      	pop	{r4, r5, r6, pc}
   27a52:	bf00      	nop

00027a54 <nrf_cc3xx_platform_init>:
   27a54:	b510      	push	{r4, lr}
   27a56:	4c0c      	ldr	r4, [pc, #48]	; (27a88 <nrf_cc3xx_platform_init+0x34>)
   27a58:	6823      	ldr	r3, [r4, #0]
   27a5a:	b113      	cbz	r3, 27a62 <nrf_cc3xx_platform_init+0xe>
   27a5c:	4b0b      	ldr	r3, [pc, #44]	; (27a8c <nrf_cc3xx_platform_init+0x38>)
   27a5e:	681b      	ldr	r3, [r3, #0]
   27a60:	b92b      	cbnz	r3, 27a6e <nrf_cc3xx_platform_init+0x1a>
   27a62:	f000 fe29 	bl	286b8 <CC_LibInit>
   27a66:	b930      	cbnz	r0, 27a76 <nrf_cc3xx_platform_init+0x22>
   27a68:	4b08      	ldr	r3, [pc, #32]	; (27a8c <nrf_cc3xx_platform_init+0x38>)
   27a6a:	2201      	movs	r2, #1
   27a6c:	601a      	str	r2, [r3, #0]
   27a6e:	2301      	movs	r3, #1
   27a70:	6023      	str	r3, [r4, #0]
   27a72:	2000      	movs	r0, #0
   27a74:	bd10      	pop	{r4, pc}
   27a76:	3801      	subs	r0, #1
   27a78:	2806      	cmp	r0, #6
   27a7a:	d901      	bls.n	27a80 <nrf_cc3xx_platform_init+0x2c>
   27a7c:	4804      	ldr	r0, [pc, #16]	; (27a90 <nrf_cc3xx_platform_init+0x3c>)
   27a7e:	bd10      	pop	{r4, pc}
   27a80:	4b04      	ldr	r3, [pc, #16]	; (27a94 <nrf_cc3xx_platform_init+0x40>)
   27a82:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   27a86:	bd10      	pop	{r4, pc}
   27a88:	20004ad0 	.word	0x20004ad0
   27a8c:	20004acc 	.word	0x20004acc
   27a90:	ffff8ffe 	.word	0xffff8ffe
   27a94:	00030e28 	.word	0x00030e28

00027a98 <nrf_cc3xx_platform_abort>:
   27a98:	f3bf 8f4f 	dsb	sy
   27a9c:	4905      	ldr	r1, [pc, #20]	; (27ab4 <nrf_cc3xx_platform_abort+0x1c>)
   27a9e:	4b06      	ldr	r3, [pc, #24]	; (27ab8 <nrf_cc3xx_platform_abort+0x20>)
   27aa0:	68ca      	ldr	r2, [r1, #12]
   27aa2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   27aa6:	4313      	orrs	r3, r2
   27aa8:	60cb      	str	r3, [r1, #12]
   27aaa:	f3bf 8f4f 	dsb	sy
   27aae:	bf00      	nop
   27ab0:	e7fd      	b.n	27aae <nrf_cc3xx_platform_abort+0x16>
   27ab2:	bf00      	nop
   27ab4:	e000ed00 	.word	0xe000ed00
   27ab8:	05fa0004 	.word	0x05fa0004

00027abc <CC_PalAbort>:
   27abc:	b410      	push	{r4}
   27abe:	4b09      	ldr	r3, [pc, #36]	; (27ae4 <CC_PalAbort+0x28>)
   27ac0:	4909      	ldr	r1, [pc, #36]	; (27ae8 <CC_PalAbort+0x2c>)
   27ac2:	4c0a      	ldr	r4, [pc, #40]	; (27aec <CC_PalAbort+0x30>)
   27ac4:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   27ac8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   27acc:	6849      	ldr	r1, [r1, #4]
   27ace:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   27ad2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   27ad6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   27ada:	2300      	movs	r3, #0
   27adc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   27ae0:	bc10      	pop	{r4}
   27ae2:	4708      	bx	r1
   27ae4:	5002b000 	.word	0x5002b000
   27ae8:	200009fc 	.word	0x200009fc
   27aec:	5002a000 	.word	0x5002a000

00027af0 <nrf_cc3xx_platform_set_abort>:
   27af0:	e9d0 1200 	ldrd	r1, r2, [r0]
   27af4:	4b01      	ldr	r3, [pc, #4]	; (27afc <nrf_cc3xx_platform_set_abort+0xc>)
   27af6:	e9c3 1200 	strd	r1, r2, [r3]
   27afa:	4770      	bx	lr
   27afc:	200009fc 	.word	0x200009fc

00027b00 <nrf_cc3xx_platform_ctr_drbg_init>:
   27b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27b04:	4b13      	ldr	r3, [pc, #76]	; (27b54 <nrf_cc3xx_platform_ctr_drbg_init+0x54>)
   27b06:	4e14      	ldr	r6, [pc, #80]	; (27b58 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   27b08:	2800      	cmp	r0, #0
   27b0a:	bf14      	ite	ne
   27b0c:	4604      	movne	r4, r0
   27b0e:	461c      	moveq	r4, r3
   27b10:	b083      	sub	sp, #12
   27b12:	6823      	ldr	r3, [r4, #0]
   27b14:	42b3      	cmp	r3, r6
   27b16:	d019      	beq.n	27b4c <nrf_cc3xx_platform_ctr_drbg_init+0x4c>
   27b18:	460d      	mov	r5, r1
   27b1a:	4620      	mov	r0, r4
   27b1c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   27b20:	f104 0904 	add.w	r9, r4, #4
   27b24:	4617      	mov	r7, r2
   27b26:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   27b2a:	f000 f8e9 	bl	27d00 <mbedtls_platform_zeroize>
   27b2e:	4648      	mov	r0, r9
   27b30:	f000 fcac 	bl	2848c <cc_mbedtls_entropy_init>
   27b34:	4640      	mov	r0, r8
   27b36:	f000 fadb 	bl	280f0 <cc_mbedtls_ctr_drbg_init>
   27b3a:	4908      	ldr	r1, [pc, #32]	; (27b5c <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   27b3c:	9700      	str	r7, [sp, #0]
   27b3e:	462b      	mov	r3, r5
   27b40:	464a      	mov	r2, r9
   27b42:	4640      	mov	r0, r8
   27b44:	f000 faea 	bl	2811c <cc_mbedtls_ctr_drbg_seed>
   27b48:	b908      	cbnz	r0, 27b4e <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   27b4a:	6026      	str	r6, [r4, #0]
   27b4c:	2000      	movs	r0, #0
   27b4e:	b003      	add	sp, #12
   27b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27b54:	20004ad4 	.word	0x20004ad4
   27b58:	5ac9bca5 	.word	0x5ac9bca5
   27b5c:	00028515 	.word	0x00028515

00027b60 <nrf_cc3xx_platform_ctr_drbg_get>:
   27b60:	b570      	push	{r4, r5, r6, lr}
   27b62:	461d      	mov	r5, r3
   27b64:	4b0c      	ldr	r3, [pc, #48]	; (27b98 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   27b66:	2800      	cmp	r0, #0
   27b68:	bf18      	it	ne
   27b6a:	4603      	movne	r3, r0
   27b6c:	480b      	ldr	r0, [pc, #44]	; (27b9c <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   27b6e:	681e      	ldr	r6, [r3, #0]
   27b70:	4286      	cmp	r6, r0
   27b72:	b082      	sub	sp, #8
   27b74:	d10d      	bne.n	27b92 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   27b76:	2600      	movs	r6, #0
   27b78:	f503 708e 	add.w	r0, r3, #284	; 0x11c
   27b7c:	9600      	str	r6, [sp, #0]
   27b7e:	4633      	mov	r3, r6
   27b80:	4614      	mov	r4, r2
   27b82:	f000 fb17 	bl	281b4 <cc_mbedtls_ctr_drbg_random_with_add>
   27b86:	2800      	cmp	r0, #0
   27b88:	bf18      	it	ne
   27b8a:	4634      	movne	r4, r6
   27b8c:	602c      	str	r4, [r5, #0]
   27b8e:	b002      	add	sp, #8
   27b90:	bd70      	pop	{r4, r5, r6, pc}
   27b92:	4803      	ldr	r0, [pc, #12]	; (27ba0 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   27b94:	e7fb      	b.n	27b8e <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   27b96:	bf00      	nop
   27b98:	20004ad4 	.word	0x20004ad4
   27b9c:	5ac9bca5 	.word	0x5ac9bca5
   27ba0:	ffff8fe8 	.word	0xffff8fe8

00027ba4 <mutex_free>:
   27ba4:	b510      	push	{r4, lr}
   27ba6:	4604      	mov	r4, r0
   27ba8:	b150      	cbz	r0, 27bc0 <mutex_free+0x1c>
   27baa:	6863      	ldr	r3, [r4, #4]
   27bac:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   27bb0:	d005      	beq.n	27bbe <mutex_free+0x1a>
   27bb2:	4a06      	ldr	r2, [pc, #24]	; (27bcc <mutex_free+0x28>)
   27bb4:	4293      	cmp	r3, r2
   27bb6:	d002      	beq.n	27bbe <mutex_free+0x1a>
   27bb8:	2300      	movs	r3, #0
   27bba:	6023      	str	r3, [r4, #0]
   27bbc:	6062      	str	r2, [r4, #4]
   27bbe:	bd10      	pop	{r4, pc}
   27bc0:	4b03      	ldr	r3, [pc, #12]	; (27bd0 <mutex_free+0x2c>)
   27bc2:	4804      	ldr	r0, [pc, #16]	; (27bd4 <mutex_free+0x30>)
   27bc4:	685b      	ldr	r3, [r3, #4]
   27bc6:	4798      	blx	r3
   27bc8:	e7ef      	b.n	27baa <mutex_free+0x6>
   27bca:	bf00      	nop
   27bcc:	a95c5f2c 	.word	0xa95c5f2c
   27bd0:	200009fc 	.word	0x200009fc
   27bd4:	00030e44 	.word	0x00030e44

00027bd8 <mutex_lock>:
   27bd8:	b1c8      	cbz	r0, 27c0e <mutex_lock+0x36>
   27bda:	6843      	ldr	r3, [r0, #4]
   27bdc:	4a0d      	ldr	r2, [pc, #52]	; (27c14 <mutex_lock+0x3c>)
   27bde:	4293      	cmp	r3, r2
   27be0:	d013      	beq.n	27c0a <mutex_lock+0x32>
   27be2:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   27be6:	d00e      	beq.n	27c06 <mutex_lock+0x2e>
   27be8:	2301      	movs	r3, #1
   27bea:	e850 2f00 	ldrex	r2, [r0]
   27bee:	4619      	mov	r1, r3
   27bf0:	e840 1c00 	strex	ip, r1, [r0]
   27bf4:	f09c 0f00 	teq	ip, #0
   27bf8:	d1f7      	bne.n	27bea <mutex_lock+0x12>
   27bfa:	2a01      	cmp	r2, #1
   27bfc:	d0f5      	beq.n	27bea <mutex_lock+0x12>
   27bfe:	f3bf 8f5f 	dmb	sy
   27c02:	2000      	movs	r0, #0
   27c04:	4770      	bx	lr
   27c06:	4804      	ldr	r0, [pc, #16]	; (27c18 <mutex_lock+0x40>)
   27c08:	4770      	bx	lr
   27c0a:	4804      	ldr	r0, [pc, #16]	; (27c1c <mutex_lock+0x44>)
   27c0c:	4770      	bx	lr
   27c0e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   27c12:	4770      	bx	lr
   27c14:	a95c5f2c 	.word	0xa95c5f2c
   27c18:	ffff8fe9 	.word	0xffff8fe9
   27c1c:	ffff8fea 	.word	0xffff8fea

00027c20 <mutex_unlock>:
   27c20:	b180      	cbz	r0, 27c44 <mutex_unlock+0x24>
   27c22:	6843      	ldr	r3, [r0, #4]
   27c24:	4a09      	ldr	r2, [pc, #36]	; (27c4c <mutex_unlock+0x2c>)
   27c26:	4293      	cmp	r3, r2
   27c28:	d00a      	beq.n	27c40 <mutex_unlock+0x20>
   27c2a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   27c2e:	d005      	beq.n	27c3c <mutex_unlock+0x1c>
   27c30:	f3bf 8f5f 	dmb	sy
   27c34:	2300      	movs	r3, #0
   27c36:	6003      	str	r3, [r0, #0]
   27c38:	4618      	mov	r0, r3
   27c3a:	4770      	bx	lr
   27c3c:	4804      	ldr	r0, [pc, #16]	; (27c50 <mutex_unlock+0x30>)
   27c3e:	4770      	bx	lr
   27c40:	4804      	ldr	r0, [pc, #16]	; (27c54 <mutex_unlock+0x34>)
   27c42:	4770      	bx	lr
   27c44:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   27c48:	4770      	bx	lr
   27c4a:	bf00      	nop
   27c4c:	a95c5f2c 	.word	0xa95c5f2c
   27c50:	ffff8fe9 	.word	0xffff8fe9
   27c54:	ffff8fea 	.word	0xffff8fea

00027c58 <mutex_init>:
   27c58:	b510      	push	{r4, lr}
   27c5a:	4604      	mov	r4, r0
   27c5c:	b120      	cbz	r0, 27c68 <mutex_init+0x10>
   27c5e:	4b04      	ldr	r3, [pc, #16]	; (27c70 <mutex_init+0x18>)
   27c60:	6063      	str	r3, [r4, #4]
   27c62:	2200      	movs	r2, #0
   27c64:	6022      	str	r2, [r4, #0]
   27c66:	bd10      	pop	{r4, pc}
   27c68:	4802      	ldr	r0, [pc, #8]	; (27c74 <mutex_init+0x1c>)
   27c6a:	f7ff ff27 	bl	27abc <CC_PalAbort>
   27c6e:	e7f6      	b.n	27c5e <mutex_init+0x6>
   27c70:	3a00003a 	.word	0x3a00003a
   27c74:	00030e6c 	.word	0x00030e6c

00027c78 <nrf_cc3xx_platform_set_mutexes>:
   27c78:	b570      	push	{r4, r5, r6, lr}
   27c7a:	e9d0 2300 	ldrd	r2, r3, [r0]
   27c7e:	4c17      	ldr	r4, [pc, #92]	; (27cdc <nrf_cc3xx_platform_set_mutexes+0x64>)
   27c80:	4d17      	ldr	r5, [pc, #92]	; (27ce0 <nrf_cc3xx_platform_set_mutexes+0x68>)
   27c82:	6063      	str	r3, [r4, #4]
   27c84:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   27c88:	e9c4 3002 	strd	r3, r0, [r4, #8]
   27c8c:	6022      	str	r2, [r4, #0]
   27c8e:	6848      	ldr	r0, [r1, #4]
   27c90:	f8d1 c000 	ldr.w	ip, [r1]
   27c94:	4b13      	ldr	r3, [pc, #76]	; (27ce4 <nrf_cc3xx_platform_set_mutexes+0x6c>)
   27c96:	e9c3 c000 	strd	ip, r0, [r3]
   27c9a:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
   27c9e:	f8d1 c008 	ldr.w	ip, [r1, #8]
   27ca2:	f8c3 c008 	str.w	ip, [r3, #8]
   27ca6:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
   27caa:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   27cae:	6909      	ldr	r1, [r1, #16]
   27cb0:	f8c3 c00c 	str.w	ip, [r3, #12]
   27cb4:	6119      	str	r1, [r3, #16]
   27cb6:	d010      	beq.n	27cda <nrf_cc3xx_platform_set_mutexes+0x62>
   27cb8:	490b      	ldr	r1, [pc, #44]	; (27ce8 <nrf_cc3xx_platform_set_mutexes+0x70>)
   27cba:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   27cbe:	2300      	movs	r3, #0
   27cc0:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   27cc4:	f505 708a 	add.w	r0, r5, #276	; 0x114
   27cc8:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   27ccc:	4790      	blx	r2
   27cce:	6823      	ldr	r3, [r4, #0]
   27cd0:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   27cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27cd8:	4718      	bx	r3
   27cda:	bd70      	pop	{r4, r5, r6, pc}
   27cdc:	20000a18 	.word	0x20000a18
   27ce0:	20004ad4 	.word	0x20004ad4
   27ce4:	20000a04 	.word	0x20000a04
   27ce8:	a95c5f2c 	.word	0xa95c5f2c

00027cec <mbedtls_zeroize_internal>:
   27cec:	b138      	cbz	r0, 27cfe <mbedtls_zeroize_internal+0x12>
   27cee:	b131      	cbz	r1, 27cfe <mbedtls_zeroize_internal+0x12>
   27cf0:	4401      	add	r1, r0
   27cf2:	2200      	movs	r2, #0
   27cf4:	4603      	mov	r3, r0
   27cf6:	3001      	adds	r0, #1
   27cf8:	4281      	cmp	r1, r0
   27cfa:	701a      	strb	r2, [r3, #0]
   27cfc:	d1fa      	bne.n	27cf4 <mbedtls_zeroize_internal+0x8>
   27cfe:	4770      	bx	lr

00027d00 <mbedtls_platform_zeroize>:
   27d00:	b138      	cbz	r0, 27d12 <mbedtls_platform_zeroize+0x12>
   27d02:	b131      	cbz	r1, 27d12 <mbedtls_platform_zeroize+0x12>
   27d04:	4401      	add	r1, r0
   27d06:	2200      	movs	r2, #0
   27d08:	4603      	mov	r3, r0
   27d0a:	3001      	adds	r0, #1
   27d0c:	4288      	cmp	r0, r1
   27d0e:	701a      	strb	r2, [r3, #0]
   27d10:	d1fa      	bne.n	27d08 <mbedtls_platform_zeroize+0x8>
   27d12:	4770      	bx	lr

00027d14 <block_cipher_df>:
   27d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d18:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   27d1c:	b0b5      	sub	sp, #212	; 0xd4
   27d1e:	f200 80d7 	bhi.w	27ed0 <block_cipher_df+0x1bc>
   27d22:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 27ed8 <block_cipher_df+0x1c4>
   27d26:	4614      	mov	r4, r2
   27d28:	460d      	mov	r5, r1
   27d2a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   27d2e:	2100      	movs	r1, #0
   27d30:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
   27d34:	4607      	mov	r7, r0
   27d36:	4648      	mov	r0, r9
   27d38:	f004 fadc 	bl	2c2f4 <memset>
   27d3c:	4640      	mov	r0, r8
   27d3e:	f001 f951 	bl	28fe4 <cc_mbedtls_aes_init>
   27d42:	2300      	movs	r3, #0
   27d44:	f8a9 3010 	strh.w	r3, [r9, #16]
   27d48:	ba63      	rev16	r3, r4
   27d4a:	f109 0618 	add.w	r6, r9, #24
   27d4e:	f8a9 3012 	strh.w	r3, [r9, #18]
   27d52:	2320      	movs	r3, #32
   27d54:	4629      	mov	r1, r5
   27d56:	4622      	mov	r2, r4
   27d58:	f889 3017 	strb.w	r3, [r9, #23]
   27d5c:	4630      	mov	r0, r6
   27d5e:	f004 fabe 	bl	2c2de <memcpy>
   27d62:	4b5e      	ldr	r3, [pc, #376]	; (27edc <block_cipher_df+0x1c8>)
   27d64:	9307      	str	r3, [sp, #28]
   27d66:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   27d6a:	2280      	movs	r2, #128	; 0x80
   27d6c:	9308      	str	r3, [sp, #32]
   27d6e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   27d72:	9309      	str	r3, [sp, #36]	; 0x24
   27d74:	5532      	strb	r2, [r6, r4]
   27d76:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   27d7a:	a907      	add	r1, sp, #28
   27d7c:	4640      	mov	r0, r8
   27d7e:	930a      	str	r3, [sp, #40]	; 0x28
   27d80:	f001 f946 	bl	29010 <cc_mbedtls_aes_setkey_enc>
   27d84:	4682      	mov	sl, r0
   27d86:	2800      	cmp	r0, #0
   27d88:	d17f      	bne.n	27e8a <block_cipher_df+0x176>
   27d8a:	f104 0319 	add.w	r3, r4, #25
   27d8e:	ae0b      	add	r6, sp, #44	; 0x2c
   27d90:	ac0f      	add	r4, sp, #60	; 0x3c
   27d92:	9302      	str	r3, [sp, #8]
   27d94:	9703      	str	r7, [sp, #12]
   27d96:	9601      	str	r6, [sp, #4]
   27d98:	9404      	str	r4, [sp, #16]
   27d9a:	9801      	ldr	r0, [sp, #4]
   27d9c:	f8df b140 	ldr.w	fp, [pc, #320]	; 27ee0 <block_cipher_df+0x1cc>
   27da0:	2210      	movs	r2, #16
   27da2:	2100      	movs	r1, #0
   27da4:	f004 faa6 	bl	2c2f4 <memset>
   27da8:	f8dd a008 	ldr.w	sl, [sp, #8]
   27dac:	9405      	str	r4, [sp, #20]
   27dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27db0:	f85b 4c04 	ldr.w	r4, [fp, #-4]
   27db4:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
   27db8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   27dba:	f85b 0c10 	ldr.w	r0, [fp, #-16]
   27dbe:	f85b 5c08 	ldr.w	r5, [fp, #-8]
   27dc2:	e9dd 620c 	ldrd	r6, r2, [sp, #48]	; 0x30
   27dc6:	405c      	eors	r4, r3
   27dc8:	9b01      	ldr	r3, [sp, #4]
   27dca:	407e      	eors	r6, r7
   27dcc:	4055      	eors	r5, r2
   27dce:	ea81 0700 	eor.w	r7, r1, r0
   27dd2:	461a      	mov	r2, r3
   27dd4:	2101      	movs	r1, #1
   27dd6:	4640      	mov	r0, r8
   27dd8:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
   27ddc:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
   27de0:	f001 f930 	bl	29044 <cc_mbedtls_aes_crypt_ecb>
   27de4:	f1ba 0f10 	cmp.w	sl, #16
   27de8:	bf94      	ite	ls
   27dea:	ebaa 0a0a 	subls.w	sl, sl, sl
   27dee:	f1aa 0a10 	subhi.w	sl, sl, #16
   27df2:	f10b 0b10 	add.w	fp, fp, #16
   27df6:	2800      	cmp	r0, #0
   27df8:	d165      	bne.n	27ec6 <block_cipher_df+0x1b2>
   27dfa:	f1ba 0f00 	cmp.w	sl, #0
   27dfe:	d1d6      	bne.n	27dae <block_cipher_df+0x9a>
   27e00:	9c05      	ldr	r4, [sp, #20]
   27e02:	9901      	ldr	r1, [sp, #4]
   27e04:	4620      	mov	r0, r4
   27e06:	2210      	movs	r2, #16
   27e08:	f004 fa69 	bl	2c2de <memcpy>
   27e0c:	f899 3003 	ldrb.w	r3, [r9, #3]
   27e10:	3410      	adds	r4, #16
   27e12:	3301      	adds	r3, #1
   27e14:	45a0      	cmp	r8, r4
   27e16:	f889 3003 	strb.w	r3, [r9, #3]
   27e1a:	d1be      	bne.n	27d9a <block_cipher_df+0x86>
   27e1c:	9c04      	ldr	r4, [sp, #16]
   27e1e:	9f03      	ldr	r7, [sp, #12]
   27e20:	9e01      	ldr	r6, [sp, #4]
   27e22:	2280      	movs	r2, #128	; 0x80
   27e24:	4621      	mov	r1, r4
   27e26:	4640      	mov	r0, r8
   27e28:	f001 f8f2 	bl	29010 <cc_mbedtls_aes_setkey_enc>
   27e2c:	4682      	mov	sl, r0
   27e2e:	bb70      	cbnz	r0, 27e8e <block_cipher_df+0x17a>
   27e30:	f107 0920 	add.w	r9, r7, #32
   27e34:	463d      	mov	r5, r7
   27e36:	ab13      	add	r3, sp, #76	; 0x4c
   27e38:	461a      	mov	r2, r3
   27e3a:	2101      	movs	r1, #1
   27e3c:	4640      	mov	r0, r8
   27e3e:	f001 f901 	bl	29044 <cc_mbedtls_aes_crypt_ecb>
   27e42:	2210      	movs	r2, #16
   27e44:	4682      	mov	sl, r0
   27e46:	a913      	add	r1, sp, #76	; 0x4c
   27e48:	4628      	mov	r0, r5
   27e4a:	4415      	add	r5, r2
   27e4c:	f1ba 0f00 	cmp.w	sl, #0
   27e50:	d11d      	bne.n	27e8e <block_cipher_df+0x17a>
   27e52:	f004 fa44 	bl	2c2de <memcpy>
   27e56:	454d      	cmp	r5, r9
   27e58:	d1ed      	bne.n	27e36 <block_cipher_df+0x122>
   27e5a:	4640      	mov	r0, r8
   27e5c:	f001 f8d2 	bl	29004 <cc_mbedtls_aes_free>
   27e60:	481d      	ldr	r0, [pc, #116]	; (27ed8 <block_cipher_df+0x1c4>)
   27e62:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   27e66:	f7ff ff4b 	bl	27d00 <mbedtls_platform_zeroize>
   27e6a:	4620      	mov	r0, r4
   27e6c:	2120      	movs	r1, #32
   27e6e:	f7ff ff47 	bl	27d00 <mbedtls_platform_zeroize>
   27e72:	a807      	add	r0, sp, #28
   27e74:	2110      	movs	r1, #16
   27e76:	f7ff ff43 	bl	27d00 <mbedtls_platform_zeroize>
   27e7a:	4630      	mov	r0, r6
   27e7c:	2110      	movs	r1, #16
   27e7e:	f7ff ff3f 	bl	27d00 <mbedtls_platform_zeroize>
   27e82:	4650      	mov	r0, sl
   27e84:	b035      	add	sp, #212	; 0xd4
   27e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e8a:	ac0f      	add	r4, sp, #60	; 0x3c
   27e8c:	ae0b      	add	r6, sp, #44	; 0x2c
   27e8e:	4640      	mov	r0, r8
   27e90:	f001 f8b8 	bl	29004 <cc_mbedtls_aes_free>
   27e94:	4810      	ldr	r0, [pc, #64]	; (27ed8 <block_cipher_df+0x1c4>)
   27e96:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   27e9a:	f7ff ff31 	bl	27d00 <mbedtls_platform_zeroize>
   27e9e:	4620      	mov	r0, r4
   27ea0:	2120      	movs	r1, #32
   27ea2:	f7ff ff2d 	bl	27d00 <mbedtls_platform_zeroize>
   27ea6:	a807      	add	r0, sp, #28
   27ea8:	2110      	movs	r1, #16
   27eaa:	f7ff ff29 	bl	27d00 <mbedtls_platform_zeroize>
   27eae:	2110      	movs	r1, #16
   27eb0:	4630      	mov	r0, r6
   27eb2:	f7ff ff25 	bl	27d00 <mbedtls_platform_zeroize>
   27eb6:	2120      	movs	r1, #32
   27eb8:	4638      	mov	r0, r7
   27eba:	f7ff ff21 	bl	27d00 <mbedtls_platform_zeroize>
   27ebe:	4650      	mov	r0, sl
   27ec0:	b035      	add	sp, #212	; 0xd4
   27ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ec6:	9f03      	ldr	r7, [sp, #12]
   27ec8:	9e01      	ldr	r6, [sp, #4]
   27eca:	9c04      	ldr	r4, [sp, #16]
   27ecc:	4682      	mov	sl, r0
   27ece:	e7de      	b.n	27e8e <block_cipher_df+0x17a>
   27ed0:	f06f 0a37 	mvn.w	sl, #55	; 0x37
   27ed4:	e7f3      	b.n	27ebe <block_cipher_df+0x1aa>
   27ed6:	bf00      	nop
   27ed8:	20004ca4 	.word	0x20004ca4
   27edc:	03020100 	.word	0x03020100
   27ee0:	20004cb4 	.word	0x20004cb4

00027ee4 <ctr_drbg_update_internal>:
   27ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27ee8:	b088      	sub	sp, #32
   27eea:	4604      	mov	r4, r0
   27eec:	460d      	mov	r5, r1
   27eee:	2220      	movs	r2, #32
   27ef0:	2100      	movs	r1, #0
   27ef2:	4668      	mov	r0, sp
   27ef4:	f004 f9fe 	bl	2c2f4 <memset>
   27ef8:	f104 0620 	add.w	r6, r4, #32
   27efc:	466f      	mov	r7, sp
   27efe:	7be2      	ldrb	r2, [r4, #15]
   27f00:	3201      	adds	r2, #1
   27f02:	b2d2      	uxtb	r2, r2
   27f04:	73e2      	strb	r2, [r4, #15]
   27f06:	2a00      	cmp	r2, #0
   27f08:	d14d      	bne.n	27fa6 <ctr_drbg_update_internal+0xc2>
   27f0a:	7ba2      	ldrb	r2, [r4, #14]
   27f0c:	3201      	adds	r2, #1
   27f0e:	b2d2      	uxtb	r2, r2
   27f10:	73a2      	strb	r2, [r4, #14]
   27f12:	2a00      	cmp	r2, #0
   27f14:	d147      	bne.n	27fa6 <ctr_drbg_update_internal+0xc2>
   27f16:	7b63      	ldrb	r3, [r4, #13]
   27f18:	3301      	adds	r3, #1
   27f1a:	b2db      	uxtb	r3, r3
   27f1c:	7363      	strb	r3, [r4, #13]
   27f1e:	2b00      	cmp	r3, #0
   27f20:	d141      	bne.n	27fa6 <ctr_drbg_update_internal+0xc2>
   27f22:	7b23      	ldrb	r3, [r4, #12]
   27f24:	3301      	adds	r3, #1
   27f26:	b2db      	uxtb	r3, r3
   27f28:	7323      	strb	r3, [r4, #12]
   27f2a:	2b00      	cmp	r3, #0
   27f2c:	d13b      	bne.n	27fa6 <ctr_drbg_update_internal+0xc2>
   27f2e:	7ae3      	ldrb	r3, [r4, #11]
   27f30:	3301      	adds	r3, #1
   27f32:	b2db      	uxtb	r3, r3
   27f34:	72e3      	strb	r3, [r4, #11]
   27f36:	2b00      	cmp	r3, #0
   27f38:	d135      	bne.n	27fa6 <ctr_drbg_update_internal+0xc2>
   27f3a:	7aa3      	ldrb	r3, [r4, #10]
   27f3c:	3301      	adds	r3, #1
   27f3e:	b2db      	uxtb	r3, r3
   27f40:	72a3      	strb	r3, [r4, #10]
   27f42:	2b00      	cmp	r3, #0
   27f44:	d12f      	bne.n	27fa6 <ctr_drbg_update_internal+0xc2>
   27f46:	7a63      	ldrb	r3, [r4, #9]
   27f48:	3301      	adds	r3, #1
   27f4a:	b2db      	uxtb	r3, r3
   27f4c:	7263      	strb	r3, [r4, #9]
   27f4e:	bb53      	cbnz	r3, 27fa6 <ctr_drbg_update_internal+0xc2>
   27f50:	7a23      	ldrb	r3, [r4, #8]
   27f52:	3301      	adds	r3, #1
   27f54:	b2db      	uxtb	r3, r3
   27f56:	7223      	strb	r3, [r4, #8]
   27f58:	bb2b      	cbnz	r3, 27fa6 <ctr_drbg_update_internal+0xc2>
   27f5a:	79e3      	ldrb	r3, [r4, #7]
   27f5c:	3301      	adds	r3, #1
   27f5e:	b2db      	uxtb	r3, r3
   27f60:	71e3      	strb	r3, [r4, #7]
   27f62:	bb03      	cbnz	r3, 27fa6 <ctr_drbg_update_internal+0xc2>
   27f64:	79a3      	ldrb	r3, [r4, #6]
   27f66:	3301      	adds	r3, #1
   27f68:	b2db      	uxtb	r3, r3
   27f6a:	71a3      	strb	r3, [r4, #6]
   27f6c:	b9db      	cbnz	r3, 27fa6 <ctr_drbg_update_internal+0xc2>
   27f6e:	7963      	ldrb	r3, [r4, #5]
   27f70:	3301      	adds	r3, #1
   27f72:	b2db      	uxtb	r3, r3
   27f74:	7163      	strb	r3, [r4, #5]
   27f76:	b9b3      	cbnz	r3, 27fa6 <ctr_drbg_update_internal+0xc2>
   27f78:	7923      	ldrb	r3, [r4, #4]
   27f7a:	3301      	adds	r3, #1
   27f7c:	b2db      	uxtb	r3, r3
   27f7e:	7123      	strb	r3, [r4, #4]
   27f80:	b98b      	cbnz	r3, 27fa6 <ctr_drbg_update_internal+0xc2>
   27f82:	78e3      	ldrb	r3, [r4, #3]
   27f84:	3301      	adds	r3, #1
   27f86:	b2db      	uxtb	r3, r3
   27f88:	70e3      	strb	r3, [r4, #3]
   27f8a:	b963      	cbnz	r3, 27fa6 <ctr_drbg_update_internal+0xc2>
   27f8c:	78a3      	ldrb	r3, [r4, #2]
   27f8e:	3301      	adds	r3, #1
   27f90:	b2db      	uxtb	r3, r3
   27f92:	70a3      	strb	r3, [r4, #2]
   27f94:	b93b      	cbnz	r3, 27fa6 <ctr_drbg_update_internal+0xc2>
   27f96:	7863      	ldrb	r3, [r4, #1]
   27f98:	3301      	adds	r3, #1
   27f9a:	b2db      	uxtb	r3, r3
   27f9c:	7063      	strb	r3, [r4, #1]
   27f9e:	b913      	cbnz	r3, 27fa6 <ctr_drbg_update_internal+0xc2>
   27fa0:	7823      	ldrb	r3, [r4, #0]
   27fa2:	3301      	adds	r3, #1
   27fa4:	7023      	strb	r3, [r4, #0]
   27fa6:	463b      	mov	r3, r7
   27fa8:	4622      	mov	r2, r4
   27faa:	2101      	movs	r1, #1
   27fac:	4630      	mov	r0, r6
   27fae:	f001 f849 	bl	29044 <cc_mbedtls_aes_crypt_ecb>
   27fb2:	4680      	mov	r8, r0
   27fb4:	bb50      	cbnz	r0, 2800c <ctr_drbg_update_internal+0x128>
   27fb6:	3710      	adds	r7, #16
   27fb8:	ab08      	add	r3, sp, #32
   27fba:	429f      	cmp	r7, r3
   27fbc:	d19f      	bne.n	27efe <ctr_drbg_update_internal+0x1a>
   27fbe:	9a02      	ldr	r2, [sp, #8]
   27fc0:	68ab      	ldr	r3, [r5, #8]
   27fc2:	9f03      	ldr	r7, [sp, #12]
   27fc4:	9907      	ldr	r1, [sp, #28]
   27fc6:	4053      	eors	r3, r2
   27fc8:	9302      	str	r3, [sp, #8]
   27fca:	4630      	mov	r0, r6
   27fcc:	68ee      	ldr	r6, [r5, #12]
   27fce:	9b00      	ldr	r3, [sp, #0]
   27fd0:	407e      	eors	r6, r7
   27fd2:	9603      	str	r6, [sp, #12]
   27fd4:	9f04      	ldr	r7, [sp, #16]
   27fd6:	692e      	ldr	r6, [r5, #16]
   27fd8:	407e      	eors	r6, r7
   27fda:	9604      	str	r6, [sp, #16]
   27fdc:	696e      	ldr	r6, [r5, #20]
   27fde:	9f05      	ldr	r7, [sp, #20]
   27fe0:	407e      	eors	r6, r7
   27fe2:	9605      	str	r6, [sp, #20]
   27fe4:	9f06      	ldr	r7, [sp, #24]
   27fe6:	69ae      	ldr	r6, [r5, #24]
   27fe8:	407e      	eors	r6, r7
   27fea:	9606      	str	r6, [sp, #24]
   27fec:	69ee      	ldr	r6, [r5, #28]
   27fee:	4071      	eors	r1, r6
   27ff0:	9107      	str	r1, [sp, #28]
   27ff2:	6829      	ldr	r1, [r5, #0]
   27ff4:	404b      	eors	r3, r1
   27ff6:	9300      	str	r3, [sp, #0]
   27ff8:	9901      	ldr	r1, [sp, #4]
   27ffa:	686b      	ldr	r3, [r5, #4]
   27ffc:	2280      	movs	r2, #128	; 0x80
   27ffe:	404b      	eors	r3, r1
   28000:	4669      	mov	r1, sp
   28002:	9301      	str	r3, [sp, #4]
   28004:	f001 f804 	bl	29010 <cc_mbedtls_aes_setkey_enc>
   28008:	4680      	mov	r8, r0
   2800a:	b138      	cbz	r0, 2801c <ctr_drbg_update_internal+0x138>
   2800c:	4668      	mov	r0, sp
   2800e:	2120      	movs	r1, #32
   28010:	f7ff fe76 	bl	27d00 <mbedtls_platform_zeroize>
   28014:	4640      	mov	r0, r8
   28016:	b008      	add	sp, #32
   28018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2801c:	2210      	movs	r2, #16
   2801e:	eb0d 0102 	add.w	r1, sp, r2
   28022:	4620      	mov	r0, r4
   28024:	f004 f95b 	bl	2c2de <memcpy>
   28028:	e7f0      	b.n	2800c <ctr_drbg_update_internal+0x128>
   2802a:	bf00      	nop

0002802c <mbedtls_ctr_drbg_reseed_internal>:
   2802c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28030:	4604      	mov	r4, r0
   28032:	6980      	ldr	r0, [r0, #24]
   28034:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   28038:	d852      	bhi.n	280e0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2803a:	461d      	mov	r5, r3
   2803c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   28040:	42ab      	cmp	r3, r5
   28042:	d34d      	bcc.n	280e0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   28044:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   28048:	1a1b      	subs	r3, r3, r0
   2804a:	4293      	cmp	r3, r2
   2804c:	4616      	mov	r6, r2
   2804e:	d347      	bcc.n	280e0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   28050:	f8df 9098 	ldr.w	r9, [pc, #152]	; 280ec <mbedtls_ctr_drbg_reseed_internal+0xc0>
   28054:	f44f 72c0 	mov.w	r2, #384	; 0x180
   28058:	460f      	mov	r7, r1
   2805a:	4648      	mov	r0, r9
   2805c:	2100      	movs	r1, #0
   2805e:	f004 f949 	bl	2c2f4 <memset>
   28062:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   28066:	69a2      	ldr	r2, [r4, #24]
   28068:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   2806c:	4649      	mov	r1, r9
   2806e:	4798      	blx	r3
   28070:	2800      	cmp	r0, #0
   28072:	d138      	bne.n	280e6 <mbedtls_ctr_drbg_reseed_internal+0xba>
   28074:	f8d4 8018 	ldr.w	r8, [r4, #24]
   28078:	b13d      	cbz	r5, 2808a <mbedtls_ctr_drbg_reseed_internal+0x5e>
   2807a:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   2807e:	462a      	mov	r2, r5
   28080:	eb09 0108 	add.w	r1, r9, r8
   28084:	4798      	blx	r3
   28086:	bb70      	cbnz	r0, 280e6 <mbedtls_ctr_drbg_reseed_internal+0xba>
   28088:	44a8      	add	r8, r5
   2808a:	b107      	cbz	r7, 2808e <mbedtls_ctr_drbg_reseed_internal+0x62>
   2808c:	b9c6      	cbnz	r6, 280c0 <mbedtls_ctr_drbg_reseed_internal+0x94>
   2808e:	4917      	ldr	r1, [pc, #92]	; (280ec <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   28090:	4642      	mov	r2, r8
   28092:	4608      	mov	r0, r1
   28094:	f7ff fe3e 	bl	27d14 <block_cipher_df>
   28098:	4605      	mov	r5, r0
   2809a:	b138      	cbz	r0, 280ac <mbedtls_ctr_drbg_reseed_internal+0x80>
   2809c:	4813      	ldr	r0, [pc, #76]	; (280ec <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2809e:	f44f 71c0 	mov.w	r1, #384	; 0x180
   280a2:	f7ff fe2d 	bl	27d00 <mbedtls_platform_zeroize>
   280a6:	4628      	mov	r0, r5
   280a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   280ac:	490f      	ldr	r1, [pc, #60]	; (280ec <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   280ae:	4620      	mov	r0, r4
   280b0:	f7ff ff18 	bl	27ee4 <ctr_drbg_update_internal>
   280b4:	4605      	mov	r5, r0
   280b6:	2800      	cmp	r0, #0
   280b8:	d1f0      	bne.n	2809c <mbedtls_ctr_drbg_reseed_internal+0x70>
   280ba:	2301      	movs	r3, #1
   280bc:	6123      	str	r3, [r4, #16]
   280be:	e7ed      	b.n	2809c <mbedtls_ctr_drbg_reseed_internal+0x70>
   280c0:	eb09 0008 	add.w	r0, r9, r8
   280c4:	4639      	mov	r1, r7
   280c6:	4632      	mov	r2, r6
   280c8:	f004 f909 	bl	2c2de <memcpy>
   280cc:	4907      	ldr	r1, [pc, #28]	; (280ec <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   280ce:	44b0      	add	r8, r6
   280d0:	4642      	mov	r2, r8
   280d2:	4608      	mov	r0, r1
   280d4:	f7ff fe1e 	bl	27d14 <block_cipher_df>
   280d8:	4605      	mov	r5, r0
   280da:	2800      	cmp	r0, #0
   280dc:	d1de      	bne.n	2809c <mbedtls_ctr_drbg_reseed_internal+0x70>
   280de:	e7e5      	b.n	280ac <mbedtls_ctr_drbg_reseed_internal+0x80>
   280e0:	f06f 0537 	mvn.w	r5, #55	; 0x37
   280e4:	e7df      	b.n	280a6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   280e6:	f06f 0533 	mvn.w	r5, #51	; 0x33
   280ea:	e7dc      	b.n	280a6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   280ec:	20004e44 	.word	0x20004e44

000280f0 <cc_mbedtls_ctr_drbg_init>:
   280f0:	b510      	push	{r4, lr}
   280f2:	22a4      	movs	r2, #164	; 0xa4
   280f4:	4604      	mov	r4, r0
   280f6:	2100      	movs	r1, #0
   280f8:	f004 f8fc 	bl	2c2f4 <memset>
   280fc:	4b06      	ldr	r3, [pc, #24]	; (28118 <cc_mbedtls_ctr_drbg_init+0x28>)
   280fe:	f04f 31ff 	mov.w	r1, #4294967295
   28102:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   28106:	6121      	str	r1, [r4, #16]
   28108:	61e2      	str	r2, [r4, #28]
   2810a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   2810e:	681b      	ldr	r3, [r3, #0]
   28110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28114:	4718      	bx	r3
   28116:	bf00      	nop
   28118:	20000a68 	.word	0x20000a68

0002811c <cc_mbedtls_ctr_drbg_seed>:
   2811c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28120:	b085      	sub	sp, #20
   28122:	4605      	mov	r5, r0
   28124:	460f      	mov	r7, r1
   28126:	4616      	mov	r6, r2
   28128:	2100      	movs	r1, #0
   2812a:	2210      	movs	r2, #16
   2812c:	4668      	mov	r0, sp
   2812e:	4699      	mov	r9, r3
   28130:	f004 f8e0 	bl	2c2f4 <memset>
   28134:	4b1d      	ldr	r3, [pc, #116]	; (281ac <cc_mbedtls_ctr_drbg_seed+0x90>)
   28136:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   2813a:	681b      	ldr	r3, [r3, #0]
   2813c:	4640      	mov	r0, r8
   2813e:	4798      	blx	r3
   28140:	b120      	cbz	r0, 2814c <cc_mbedtls_ctr_drbg_seed+0x30>
   28142:	4604      	mov	r4, r0
   28144:	4620      	mov	r0, r4
   28146:	b005      	add	sp, #20
   28148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2814c:	f105 0420 	add.w	r4, r5, #32
   28150:	4620      	mov	r0, r4
   28152:	f000 ff47 	bl	28fe4 <cc_mbedtls_aes_init>
   28156:	69aa      	ldr	r2, [r5, #24]
   28158:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   2815c:	692e      	ldr	r6, [r5, #16]
   2815e:	b9e2      	cbnz	r2, 2819a <cc_mbedtls_ctr_drbg_seed+0x7e>
   28160:	2220      	movs	r2, #32
   28162:	2e00      	cmp	r6, #0
   28164:	61aa      	str	r2, [r5, #24]
   28166:	db1f      	blt.n	281a8 <cc_mbedtls_ctr_drbg_seed+0x8c>
   28168:	4620      	mov	r0, r4
   2816a:	4669      	mov	r1, sp
   2816c:	2280      	movs	r2, #128	; 0x80
   2816e:	f000 ff4f 	bl	29010 <cc_mbedtls_aes_setkey_enc>
   28172:	4604      	mov	r4, r0
   28174:	b930      	cbnz	r0, 28184 <cc_mbedtls_ctr_drbg_seed+0x68>
   28176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   28178:	4633      	mov	r3, r6
   2817a:	4649      	mov	r1, r9
   2817c:	4628      	mov	r0, r5
   2817e:	f7ff ff55 	bl	2802c <mbedtls_ctr_drbg_reseed_internal>
   28182:	4604      	mov	r4, r0
   28184:	4b0a      	ldr	r3, [pc, #40]	; (281b0 <cc_mbedtls_ctr_drbg_seed+0x94>)
   28186:	4640      	mov	r0, r8
   28188:	681b      	ldr	r3, [r3, #0]
   2818a:	4798      	blx	r3
   2818c:	2800      	cmp	r0, #0
   2818e:	bf18      	it	ne
   28190:	4604      	movne	r4, r0
   28192:	4620      	mov	r0, r4
   28194:	b005      	add	sp, #20
   28196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2819a:	2e00      	cmp	r6, #0
   2819c:	dae4      	bge.n	28168 <cc_mbedtls_ctr_drbg_seed+0x4c>
   2819e:	2a17      	cmp	r2, #23
   281a0:	d802      	bhi.n	281a8 <cc_mbedtls_ctr_drbg_seed+0x8c>
   281a2:	3201      	adds	r2, #1
   281a4:	0856      	lsrs	r6, r2, #1
   281a6:	e7df      	b.n	28168 <cc_mbedtls_ctr_drbg_seed+0x4c>
   281a8:	2600      	movs	r6, #0
   281aa:	e7dd      	b.n	28168 <cc_mbedtls_ctr_drbg_seed+0x4c>
   281ac:	20000a64 	.word	0x20000a64
   281b0:	20000a60 	.word	0x20000a60

000281b4 <cc_mbedtls_ctr_drbg_random_with_add>:
   281b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   281b8:	b08d      	sub	sp, #52	; 0x34
   281ba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   281be:	9f16      	ldr	r7, [sp, #88]	; 0x58
   281c0:	f200 80e3 	bhi.w	2838a <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   281c4:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   281c8:	f200 80dc 	bhi.w	28384 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   281cc:	4604      	mov	r4, r0
   281ce:	4615      	mov	r5, r2
   281d0:	460e      	mov	r6, r1
   281d2:	2220      	movs	r2, #32
   281d4:	2100      	movs	r1, #0
   281d6:	a804      	add	r0, sp, #16
   281d8:	4698      	mov	r8, r3
   281da:	f004 f88b 	bl	2c2f4 <memset>
   281de:	4b6c      	ldr	r3, [pc, #432]	; (28390 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   281e0:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   281e4:	681b      	ldr	r3, [r3, #0]
   281e6:	4648      	mov	r0, r9
   281e8:	4798      	blx	r3
   281ea:	4683      	mov	fp, r0
   281ec:	2800      	cmp	r0, #0
   281ee:	f040 8092 	bne.w	28316 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   281f2:	6922      	ldr	r2, [r4, #16]
   281f4:	69e3      	ldr	r3, [r4, #28]
   281f6:	429a      	cmp	r2, r3
   281f8:	f300 8091 	bgt.w	2831e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   281fc:	6963      	ldr	r3, [r4, #20]
   281fe:	2b00      	cmp	r3, #0
   28200:	f040 808d 	bne.w	2831e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   28204:	2f00      	cmp	r7, #0
   28206:	f040 80a9 	bne.w	2835c <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   2820a:	f8df a188 	ldr.w	sl, [pc, #392]	; 28394 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2820e:	466f      	mov	r7, sp
   28210:	2d00      	cmp	r5, #0
   28212:	f000 8098 	beq.w	28346 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   28216:	f104 0820 	add.w	r8, r4, #32
   2821a:	466f      	mov	r7, sp
   2821c:	e00e      	b.n	2823c <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   2821e:	2d10      	cmp	r5, #16
   28220:	46ab      	mov	fp, r5
   28222:	bf28      	it	cs
   28224:	f04f 0b10 	movcs.w	fp, #16
   28228:	4630      	mov	r0, r6
   2822a:	465a      	mov	r2, fp
   2822c:	4639      	mov	r1, r7
   2822e:	f004 f856 	bl	2c2de <memcpy>
   28232:	ebb5 050b 	subs.w	r5, r5, fp
   28236:	445e      	add	r6, fp
   28238:	f000 8085 	beq.w	28346 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   2823c:	7be3      	ldrb	r3, [r4, #15]
   2823e:	3301      	adds	r3, #1
   28240:	b2db      	uxtb	r3, r3
   28242:	73e3      	strb	r3, [r4, #15]
   28244:	2b00      	cmp	r3, #0
   28246:	d14d      	bne.n	282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28248:	7ba3      	ldrb	r3, [r4, #14]
   2824a:	3301      	adds	r3, #1
   2824c:	b2db      	uxtb	r3, r3
   2824e:	73a3      	strb	r3, [r4, #14]
   28250:	2b00      	cmp	r3, #0
   28252:	d147      	bne.n	282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28254:	7b63      	ldrb	r3, [r4, #13]
   28256:	3301      	adds	r3, #1
   28258:	b2db      	uxtb	r3, r3
   2825a:	7363      	strb	r3, [r4, #13]
   2825c:	2b00      	cmp	r3, #0
   2825e:	d141      	bne.n	282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28260:	7b23      	ldrb	r3, [r4, #12]
   28262:	3301      	adds	r3, #1
   28264:	b2db      	uxtb	r3, r3
   28266:	7323      	strb	r3, [r4, #12]
   28268:	2b00      	cmp	r3, #0
   2826a:	d13b      	bne.n	282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2826c:	7ae3      	ldrb	r3, [r4, #11]
   2826e:	3301      	adds	r3, #1
   28270:	b2db      	uxtb	r3, r3
   28272:	72e3      	strb	r3, [r4, #11]
   28274:	2b00      	cmp	r3, #0
   28276:	d135      	bne.n	282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28278:	7aa3      	ldrb	r3, [r4, #10]
   2827a:	3301      	adds	r3, #1
   2827c:	b2db      	uxtb	r3, r3
   2827e:	72a3      	strb	r3, [r4, #10]
   28280:	2b00      	cmp	r3, #0
   28282:	d12f      	bne.n	282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28284:	7a63      	ldrb	r3, [r4, #9]
   28286:	3301      	adds	r3, #1
   28288:	b2db      	uxtb	r3, r3
   2828a:	7263      	strb	r3, [r4, #9]
   2828c:	bb53      	cbnz	r3, 282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2828e:	7a23      	ldrb	r3, [r4, #8]
   28290:	3301      	adds	r3, #1
   28292:	b2db      	uxtb	r3, r3
   28294:	7223      	strb	r3, [r4, #8]
   28296:	bb2b      	cbnz	r3, 282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28298:	79e3      	ldrb	r3, [r4, #7]
   2829a:	3301      	adds	r3, #1
   2829c:	b2db      	uxtb	r3, r3
   2829e:	71e3      	strb	r3, [r4, #7]
   282a0:	bb03      	cbnz	r3, 282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282a2:	79a3      	ldrb	r3, [r4, #6]
   282a4:	3301      	adds	r3, #1
   282a6:	b2db      	uxtb	r3, r3
   282a8:	71a3      	strb	r3, [r4, #6]
   282aa:	b9db      	cbnz	r3, 282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282ac:	7963      	ldrb	r3, [r4, #5]
   282ae:	3301      	adds	r3, #1
   282b0:	b2db      	uxtb	r3, r3
   282b2:	7163      	strb	r3, [r4, #5]
   282b4:	b9b3      	cbnz	r3, 282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282b6:	7923      	ldrb	r3, [r4, #4]
   282b8:	3301      	adds	r3, #1
   282ba:	b2db      	uxtb	r3, r3
   282bc:	7123      	strb	r3, [r4, #4]
   282be:	b98b      	cbnz	r3, 282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282c0:	78e3      	ldrb	r3, [r4, #3]
   282c2:	3301      	adds	r3, #1
   282c4:	b2db      	uxtb	r3, r3
   282c6:	70e3      	strb	r3, [r4, #3]
   282c8:	b963      	cbnz	r3, 282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282ca:	78a3      	ldrb	r3, [r4, #2]
   282cc:	3301      	adds	r3, #1
   282ce:	b2db      	uxtb	r3, r3
   282d0:	70a3      	strb	r3, [r4, #2]
   282d2:	b93b      	cbnz	r3, 282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282d4:	7863      	ldrb	r3, [r4, #1]
   282d6:	3301      	adds	r3, #1
   282d8:	b2db      	uxtb	r3, r3
   282da:	7063      	strb	r3, [r4, #1]
   282dc:	b913      	cbnz	r3, 282e4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282de:	7823      	ldrb	r3, [r4, #0]
   282e0:	3301      	adds	r3, #1
   282e2:	7023      	strb	r3, [r4, #0]
   282e4:	463b      	mov	r3, r7
   282e6:	4622      	mov	r2, r4
   282e8:	2101      	movs	r1, #1
   282ea:	4640      	mov	r0, r8
   282ec:	f000 feaa 	bl	29044 <cc_mbedtls_aes_crypt_ecb>
   282f0:	4683      	mov	fp, r0
   282f2:	2800      	cmp	r0, #0
   282f4:	d093      	beq.n	2821e <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   282f6:	f8da 3000 	ldr.w	r3, [sl]
   282fa:	4648      	mov	r0, r9
   282fc:	4798      	blx	r3
   282fe:	2120      	movs	r1, #32
   28300:	4603      	mov	r3, r0
   28302:	a804      	add	r0, sp, #16
   28304:	2b00      	cmp	r3, #0
   28306:	bf18      	it	ne
   28308:	469b      	movne	fp, r3
   2830a:	f7ff fcf9 	bl	27d00 <mbedtls_platform_zeroize>
   2830e:	2110      	movs	r1, #16
   28310:	4638      	mov	r0, r7
   28312:	f7ff fcf5 	bl	27d00 <mbedtls_platform_zeroize>
   28316:	4658      	mov	r0, fp
   28318:	b00d      	add	sp, #52	; 0x34
   2831a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2831e:	463a      	mov	r2, r7
   28320:	4641      	mov	r1, r8
   28322:	2300      	movs	r3, #0
   28324:	4620      	mov	r0, r4
   28326:	f7ff fe81 	bl	2802c <mbedtls_ctr_drbg_reseed_internal>
   2832a:	f8df a068 	ldr.w	sl, [pc, #104]	; 28394 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2832e:	2800      	cmp	r0, #0
   28330:	f43f af6d 	beq.w	2820e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   28334:	f8da 3000 	ldr.w	r3, [sl]
   28338:	4648      	mov	r0, r9
   2833a:	4798      	blx	r3
   2833c:	4683      	mov	fp, r0
   2833e:	2800      	cmp	r0, #0
   28340:	f43f af65 	beq.w	2820e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   28344:	e7e7      	b.n	28316 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   28346:	a904      	add	r1, sp, #16
   28348:	4620      	mov	r0, r4
   2834a:	f7ff fdcb 	bl	27ee4 <ctr_drbg_update_internal>
   2834e:	4683      	mov	fp, r0
   28350:	2800      	cmp	r0, #0
   28352:	d1d0      	bne.n	282f6 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   28354:	6923      	ldr	r3, [r4, #16]
   28356:	3301      	adds	r3, #1
   28358:	6123      	str	r3, [r4, #16]
   2835a:	e7cc      	b.n	282f6 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   2835c:	463a      	mov	r2, r7
   2835e:	4641      	mov	r1, r8
   28360:	a804      	add	r0, sp, #16
   28362:	f7ff fcd7 	bl	27d14 <block_cipher_df>
   28366:	4683      	mov	fp, r0
   28368:	b118      	cbz	r0, 28372 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   2836a:	f8df a028 	ldr.w	sl, [pc, #40]	; 28394 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2836e:	466f      	mov	r7, sp
   28370:	e7c1      	b.n	282f6 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   28372:	a904      	add	r1, sp, #16
   28374:	4620      	mov	r0, r4
   28376:	f7ff fdb5 	bl	27ee4 <ctr_drbg_update_internal>
   2837a:	4683      	mov	fp, r0
   2837c:	2800      	cmp	r0, #0
   2837e:	f43f af44 	beq.w	2820a <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   28382:	e7f2      	b.n	2836a <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   28384:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   28388:	e7c5      	b.n	28316 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2838a:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   2838e:	e7c2      	b.n	28316 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   28390:	20000a64 	.word	0x20000a64
   28394:	20000a60 	.word	0x20000a60

00028398 <entropy_update>:
   28398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2839c:	2b20      	cmp	r3, #32
   2839e:	b08b      	sub	sp, #44	; 0x2c
   283a0:	461d      	mov	r5, r3
   283a2:	4606      	mov	r6, r0
   283a4:	4688      	mov	r8, r1
   283a6:	4691      	mov	r9, r2
   283a8:	d826      	bhi.n	283f8 <entropy_update+0x60>
   283aa:	b2db      	uxtb	r3, r3
   283ac:	af02      	add	r7, sp, #8
   283ae:	f88d 8004 	strb.w	r8, [sp, #4]
   283b2:	46b0      	mov	r8, r6
   283b4:	f88d 3005 	strb.w	r3, [sp, #5]
   283b8:	f858 1b04 	ldr.w	r1, [r8], #4
   283bc:	b921      	cbnz	r1, 283c8 <entropy_update+0x30>
   283be:	4640      	mov	r0, r8
   283c0:	f000 fe84 	bl	290cc <cc_mbedtls_sha256_starts>
   283c4:	4604      	mov	r4, r0
   283c6:	b940      	cbnz	r0, 283da <entropy_update+0x42>
   283c8:	2301      	movs	r3, #1
   283ca:	6033      	str	r3, [r6, #0]
   283cc:	2202      	movs	r2, #2
   283ce:	a901      	add	r1, sp, #4
   283d0:	4640      	mov	r0, r8
   283d2:	f000 fe8f 	bl	290f4 <cc_mbedtls_sha256_update>
   283d6:	4604      	mov	r4, r0
   283d8:	b138      	cbz	r0, 283ea <entropy_update+0x52>
   283da:	4638      	mov	r0, r7
   283dc:	2120      	movs	r1, #32
   283de:	f7ff fc8f 	bl	27d00 <mbedtls_platform_zeroize>
   283e2:	4620      	mov	r0, r4
   283e4:	b00b      	add	sp, #44	; 0x2c
   283e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   283ea:	462a      	mov	r2, r5
   283ec:	4649      	mov	r1, r9
   283ee:	4640      	mov	r0, r8
   283f0:	f000 fe80 	bl	290f4 <cc_mbedtls_sha256_update>
   283f4:	4604      	mov	r4, r0
   283f6:	e7f0      	b.n	283da <entropy_update+0x42>
   283f8:	af02      	add	r7, sp, #8
   283fa:	4619      	mov	r1, r3
   283fc:	4610      	mov	r0, r2
   283fe:	2300      	movs	r3, #0
   28400:	463a      	mov	r2, r7
   28402:	f000 fffd 	bl	29400 <cc_mbedtls_sha256>
   28406:	4604      	mov	r4, r0
   28408:	2800      	cmp	r0, #0
   2840a:	d1e6      	bne.n	283da <entropy_update+0x42>
   2840c:	2320      	movs	r3, #32
   2840e:	46b9      	mov	r9, r7
   28410:	461d      	mov	r5, r3
   28412:	e7cc      	b.n	283ae <entropy_update+0x16>

00028414 <entropy_gather_internal.part.0>:
   28414:	b5f0      	push	{r4, r5, r6, r7, lr}
   28416:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   2841a:	b0a7      	sub	sp, #156	; 0x9c
   2841c:	2b00      	cmp	r3, #0
   2841e:	bfd8      	it	le
   28420:	ae02      	addle	r6, sp, #8
   28422:	dd2c      	ble.n	2847e <entropy_gather_internal.part.0+0x6a>
   28424:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   28428:	4605      	mov	r5, r0
   2842a:	2300      	movs	r3, #0
   2842c:	ae02      	add	r6, sp, #8
   2842e:	9301      	str	r3, [sp, #4]
   28430:	f1a4 0701 	sub.w	r7, r4, #1
   28434:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   28438:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   2843c:	ab01      	add	r3, sp, #4
   2843e:	2290      	movs	r2, #144	; 0x90
   28440:	4631      	mov	r1, r6
   28442:	47a0      	blx	r4
   28444:	fab7 f787 	clz	r7, r7
   28448:	097f      	lsrs	r7, r7, #5
   2844a:	4604      	mov	r4, r0
   2844c:	b910      	cbnz	r0, 28454 <entropy_gather_internal.part.0+0x40>
   2844e:	9b01      	ldr	r3, [sp, #4]
   28450:	b93b      	cbnz	r3, 28462 <entropy_gather_internal.part.0+0x4e>
   28452:	b1a7      	cbz	r7, 2847e <entropy_gather_internal.part.0+0x6a>
   28454:	4630      	mov	r0, r6
   28456:	2190      	movs	r1, #144	; 0x90
   28458:	f7ff fc52 	bl	27d00 <mbedtls_platform_zeroize>
   2845c:	4620      	mov	r0, r4
   2845e:	b027      	add	sp, #156	; 0x9c
   28460:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28462:	4601      	mov	r1, r0
   28464:	4632      	mov	r2, r6
   28466:	4628      	mov	r0, r5
   28468:	f7ff ff96 	bl	28398 <entropy_update>
   2846c:	b950      	cbnz	r0, 28484 <entropy_gather_internal.part.0+0x70>
   2846e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   28472:	9a01      	ldr	r2, [sp, #4]
   28474:	4413      	add	r3, r2
   28476:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   2847a:	2f00      	cmp	r7, #0
   2847c:	d1ea      	bne.n	28454 <entropy_gather_internal.part.0+0x40>
   2847e:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   28482:	e7e7      	b.n	28454 <entropy_gather_internal.part.0+0x40>
   28484:	4604      	mov	r4, r0
   28486:	4620      	mov	r0, r4
   28488:	b027      	add	sp, #156	; 0x9c
   2848a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002848c <cc_mbedtls_entropy_init>:
   2848c:	b570      	push	{r4, r5, r6, lr}
   2848e:	2500      	movs	r5, #0
   28490:	4604      	mov	r4, r0
   28492:	f504 7688 	add.w	r6, r4, #272	; 0x110
   28496:	2214      	movs	r2, #20
   28498:	4629      	mov	r1, r5
   2849a:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   2849e:	30fc      	adds	r0, #252	; 0xfc
   284a0:	f003 ff28 	bl	2c2f4 <memset>
   284a4:	2208      	movs	r2, #8
   284a6:	4629      	mov	r1, r5
   284a8:	4630      	mov	r0, r6
   284aa:	f003 ff23 	bl	2c2f4 <memset>
   284ae:	4b15      	ldr	r3, [pc, #84]	; (28504 <cc_mbedtls_entropy_init+0x78>)
   284b0:	4630      	mov	r0, r6
   284b2:	681b      	ldr	r3, [r3, #0]
   284b4:	4798      	blx	r3
   284b6:	4620      	mov	r0, r4
   284b8:	f840 5b04 	str.w	r5, [r0], #4
   284bc:	f000 fdec 	bl	29098 <cc_mbedtls_sha256_init>
   284c0:	4b11      	ldr	r3, [pc, #68]	; (28508 <cc_mbedtls_entropy_init+0x7c>)
   284c2:	4630      	mov	r0, r6
   284c4:	681b      	ldr	r3, [r3, #0]
   284c6:	4798      	blx	r3
   284c8:	b9d8      	cbnz	r0, 28502 <cc_mbedtls_entropy_init+0x76>
   284ca:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   284ce:	42ab      	cmp	r3, r5
   284d0:	dc11      	bgt.n	284f6 <cc_mbedtls_entropy_init+0x6a>
   284d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   284d6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   284da:	2120      	movs	r1, #32
   284dc:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   284e0:	2101      	movs	r1, #1
   284e2:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   284e6:	3301      	adds	r3, #1
   284e8:	4908      	ldr	r1, [pc, #32]	; (2850c <cc_mbedtls_entropy_init+0x80>)
   284ea:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   284ee:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   284f2:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   284f6:	4b06      	ldr	r3, [pc, #24]	; (28510 <cc_mbedtls_entropy_init+0x84>)
   284f8:	4630      	mov	r0, r6
   284fa:	681b      	ldr	r3, [r3, #0]
   284fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28500:	4718      	bx	r3
   28502:	bd70      	pop	{r4, r5, r6, pc}
   28504:	20000a68 	.word	0x20000a68
   28508:	20000a64 	.word	0x20000a64
   2850c:	00028ee9 	.word	0x00028ee9
   28510:	20000a60 	.word	0x20000a60

00028514 <cc_mbedtls_entropy_func>:
   28514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28518:	2a20      	cmp	r2, #32
   2851a:	b088      	sub	sp, #32
   2851c:	d879      	bhi.n	28612 <cc_mbedtls_entropy_func+0xfe>
   2851e:	4b3e      	ldr	r3, [pc, #248]	; (28618 <cc_mbedtls_entropy_func+0x104>)
   28520:	f500 7988 	add.w	r9, r0, #272	; 0x110
   28524:	681b      	ldr	r3, [r3, #0]
   28526:	4604      	mov	r4, r0
   28528:	4648      	mov	r0, r9
   2852a:	4617      	mov	r7, r2
   2852c:	4688      	mov	r8, r1
   2852e:	4798      	blx	r3
   28530:	4605      	mov	r5, r0
   28532:	b9f8      	cbnz	r0, 28574 <cc_mbedtls_entropy_func+0x60>
   28534:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   28538:	f240 1601 	movw	r6, #257	; 0x101
   2853c:	2b00      	cmp	r3, #0
   2853e:	d064      	beq.n	2860a <cc_mbedtls_entropy_func+0xf6>
   28540:	4620      	mov	r0, r4
   28542:	f7ff ff67 	bl	28414 <entropy_gather_internal.part.0>
   28546:	4605      	mov	r5, r0
   28548:	b938      	cbnz	r0, 2855a <cc_mbedtls_entropy_func+0x46>
   2854a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   2854e:	2b00      	cmp	r3, #0
   28550:	dc14      	bgt.n	2857c <cc_mbedtls_entropy_func+0x68>
   28552:	3e01      	subs	r6, #1
   28554:	d1f2      	bne.n	2853c <cc_mbedtls_entropy_func+0x28>
   28556:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   2855a:	466e      	mov	r6, sp
   2855c:	2120      	movs	r1, #32
   2855e:	4630      	mov	r0, r6
   28560:	f7ff fbce 	bl	27d00 <mbedtls_platform_zeroize>
   28564:	4b2d      	ldr	r3, [pc, #180]	; (2861c <cc_mbedtls_entropy_func+0x108>)
   28566:	4648      	mov	r0, r9
   28568:	681b      	ldr	r3, [r3, #0]
   2856a:	4798      	blx	r3
   2856c:	2800      	cmp	r0, #0
   2856e:	bf18      	it	ne
   28570:	f06f 051d 	mvnne.w	r5, #29
   28574:	4628      	mov	r0, r5
   28576:	b008      	add	sp, #32
   28578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2857c:	e9d4 3241 	ldrd	r3, r2, [r4, #260]	; 0x104
   28580:	4293      	cmp	r3, r2
   28582:	d303      	bcc.n	2858c <cc_mbedtls_entropy_func+0x78>
   28584:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   28588:	2a01      	cmp	r2, #1
   2858a:	d002      	beq.n	28592 <cc_mbedtls_entropy_func+0x7e>
   2858c:	3e01      	subs	r6, #1
   2858e:	d1d7      	bne.n	28540 <cc_mbedtls_entropy_func+0x2c>
   28590:	e7e1      	b.n	28556 <cc_mbedtls_entropy_func+0x42>
   28592:	2b1f      	cmp	r3, #31
   28594:	d9fa      	bls.n	2858c <cc_mbedtls_entropy_func+0x78>
   28596:	466e      	mov	r6, sp
   28598:	4601      	mov	r1, r0
   2859a:	2220      	movs	r2, #32
   2859c:	4630      	mov	r0, r6
   2859e:	f104 0a04 	add.w	sl, r4, #4
   285a2:	f003 fea7 	bl	2c2f4 <memset>
   285a6:	4631      	mov	r1, r6
   285a8:	4650      	mov	r0, sl
   285aa:	f000 fdcd 	bl	29148 <cc_mbedtls_sha256_finish>
   285ae:	4605      	mov	r5, r0
   285b0:	2800      	cmp	r0, #0
   285b2:	d1d3      	bne.n	2855c <cc_mbedtls_entropy_func+0x48>
   285b4:	4650      	mov	r0, sl
   285b6:	f000 fd83 	bl	290c0 <cc_mbedtls_sha256_free>
   285ba:	4650      	mov	r0, sl
   285bc:	f000 fd6c 	bl	29098 <cc_mbedtls_sha256_init>
   285c0:	4629      	mov	r1, r5
   285c2:	4650      	mov	r0, sl
   285c4:	f000 fd82 	bl	290cc <cc_mbedtls_sha256_starts>
   285c8:	4605      	mov	r5, r0
   285ca:	2800      	cmp	r0, #0
   285cc:	d1c6      	bne.n	2855c <cc_mbedtls_entropy_func+0x48>
   285ce:	4650      	mov	r0, sl
   285d0:	2220      	movs	r2, #32
   285d2:	4631      	mov	r1, r6
   285d4:	f000 fd8e 	bl	290f4 <cc_mbedtls_sha256_update>
   285d8:	4605      	mov	r5, r0
   285da:	2800      	cmp	r0, #0
   285dc:	d1be      	bne.n	2855c <cc_mbedtls_entropy_func+0x48>
   285de:	4603      	mov	r3, r0
   285e0:	4632      	mov	r2, r6
   285e2:	2120      	movs	r1, #32
   285e4:	4630      	mov	r0, r6
   285e6:	f000 ff0b 	bl	29400 <cc_mbedtls_sha256>
   285ea:	4605      	mov	r5, r0
   285ec:	2800      	cmp	r0, #0
   285ee:	d1b5      	bne.n	2855c <cc_mbedtls_entropy_func+0x48>
   285f0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   285f4:	2b00      	cmp	r3, #0
   285f6:	bfc4      	itt	gt
   285f8:	2300      	movgt	r3, #0
   285fa:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   285fe:	463a      	mov	r2, r7
   28600:	4640      	mov	r0, r8
   28602:	4631      	mov	r1, r6
   28604:	f003 fe6b 	bl	2c2de <memcpy>
   28608:	e7a8      	b.n	2855c <cc_mbedtls_entropy_func+0x48>
   2860a:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   2860e:	466e      	mov	r6, sp
   28610:	e7a4      	b.n	2855c <cc_mbedtls_entropy_func+0x48>
   28612:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   28616:	e7ad      	b.n	28574 <cc_mbedtls_entropy_func+0x60>
   28618:	20000a64 	.word	0x20000a64
   2861c:	20000a60 	.word	0x20000a60

00028620 <RndStartupTest.constprop.0>:
   28620:	b530      	push	{r4, r5, lr}
   28622:	b08d      	sub	sp, #52	; 0x34
   28624:	2100      	movs	r1, #0
   28626:	2228      	movs	r2, #40	; 0x28
   28628:	a802      	add	r0, sp, #8
   2862a:	9101      	str	r1, [sp, #4]
   2862c:	f003 fe62 	bl	2c2f4 <memset>
   28630:	a802      	add	r0, sp, #8
   28632:	f000 ff0d 	bl	29450 <RNG_PLAT_SetUserRngParameters>
   28636:	4604      	mov	r4, r0
   28638:	b110      	cbz	r0, 28640 <RndStartupTest.constprop.0+0x20>
   2863a:	4620      	mov	r0, r4
   2863c:	b00d      	add	sp, #52	; 0x34
   2863e:	bd30      	pop	{r4, r5, pc}
   28640:	4d17      	ldr	r5, [pc, #92]	; (286a0 <RndStartupTest.constprop.0+0x80>)
   28642:	f04f 31ff 	mov.w	r1, #4294967295
   28646:	6828      	ldr	r0, [r5, #0]
   28648:	f000 f944 	bl	288d4 <CC_PalMutexLock>
   2864c:	4604      	mov	r4, r0
   2864e:	b120      	cbz	r0, 2865a <RndStartupTest.constprop.0+0x3a>
   28650:	4814      	ldr	r0, [pc, #80]	; (286a4 <RndStartupTest.constprop.0+0x84>)
   28652:	f7ff fa33 	bl	27abc <CC_PalAbort>
   28656:	2c01      	cmp	r4, #1
   28658:	d018      	beq.n	2868c <RndStartupTest.constprop.0+0x6c>
   2865a:	2000      	movs	r0, #0
   2865c:	f000 f96a 	bl	28934 <CC_PalPowerSaveModeSelect>
   28660:	b9d0      	cbnz	r0, 28698 <RndStartupTest.constprop.0+0x78>
   28662:	4a11      	ldr	r2, [pc, #68]	; (286a8 <RndStartupTest.constprop.0+0x88>)
   28664:	a902      	add	r1, sp, #8
   28666:	a801      	add	r0, sp, #4
   28668:	f000 fc30 	bl	28ecc <LLF_RND_RunTrngStartupTest>
   2866c:	4604      	mov	r4, r0
   2866e:	2001      	movs	r0, #1
   28670:	f000 f960 	bl	28934 <CC_PalPowerSaveModeSelect>
   28674:	b960      	cbnz	r0, 28690 <RndStartupTest.constprop.0+0x70>
   28676:	6828      	ldr	r0, [r5, #0]
   28678:	f000 f934 	bl	288e4 <CC_PalMutexUnlock>
   2867c:	2800      	cmp	r0, #0
   2867e:	d0dc      	beq.n	2863a <RndStartupTest.constprop.0+0x1a>
   28680:	480a      	ldr	r0, [pc, #40]	; (286ac <RndStartupTest.constprop.0+0x8c>)
   28682:	f7ff fa1b 	bl	27abc <CC_PalAbort>
   28686:	4620      	mov	r0, r4
   28688:	b00d      	add	sp, #52	; 0x34
   2868a:	bd30      	pop	{r4, r5, pc}
   2868c:	2405      	movs	r4, #5
   2868e:	e7f2      	b.n	28676 <RndStartupTest.constprop.0+0x56>
   28690:	4807      	ldr	r0, [pc, #28]	; (286b0 <RndStartupTest.constprop.0+0x90>)
   28692:	f7ff fa13 	bl	27abc <CC_PalAbort>
   28696:	e7ee      	b.n	28676 <RndStartupTest.constprop.0+0x56>
   28698:	4806      	ldr	r0, [pc, #24]	; (286b4 <RndStartupTest.constprop.0+0x94>)
   2869a:	f7ff fa0f 	bl	27abc <CC_PalAbort>
   2869e:	e7e0      	b.n	28662 <RndStartupTest.constprop.0+0x42>
   286a0:	20000a4c 	.word	0x20000a4c
   286a4:	00030e90 	.word	0x00030e90
   286a8:	20004fc4 	.word	0x20004fc4
   286ac:	00030ee8 	.word	0x00030ee8
   286b0:	00030ec8 	.word	0x00030ec8
   286b4:	00030ea8 	.word	0x00030ea8

000286b8 <CC_LibInit>:
   286b8:	b530      	push	{r4, r5, lr}
   286ba:	b083      	sub	sp, #12
   286bc:	f000 f85c 	bl	28778 <CC_HalInit>
   286c0:	b128      	cbz	r0, 286ce <CC_LibInit+0x16>
   286c2:	f000 f8ab 	bl	2881c <CC_PalTerminate>
   286c6:	2403      	movs	r4, #3
   286c8:	4620      	mov	r0, r4
   286ca:	b003      	add	sp, #12
   286cc:	bd30      	pop	{r4, r5, pc}
   286ce:	f000 f877 	bl	287c0 <CC_PalInit>
   286d2:	b9d8      	cbnz	r0, 2870c <CC_LibInit+0x54>
   286d4:	f000 f92e 	bl	28934 <CC_PalPowerSaveModeSelect>
   286d8:	b9e0      	cbnz	r0, 28714 <CC_LibInit+0x5c>
   286da:	4c22      	ldr	r4, [pc, #136]	; (28764 <CC_LibInit+0xac>)
   286dc:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   286e0:	0e1b      	lsrs	r3, r3, #24
   286e2:	2bf0      	cmp	r3, #240	; 0xf0
   286e4:	d10a      	bne.n	286fc <CC_LibInit+0x44>
   286e6:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   286ea:	4b1f      	ldr	r3, [pc, #124]	; (28768 <CC_LibInit+0xb0>)
   286ec:	429a      	cmp	r2, r3
   286ee:	d031      	beq.n	28754 <CC_LibInit+0x9c>
   286f0:	f000 f844 	bl	2877c <CC_HalTerminate>
   286f4:	2407      	movs	r4, #7
   286f6:	f000 f891 	bl	2881c <CC_PalTerminate>
   286fa:	e7e5      	b.n	286c8 <CC_LibInit+0x10>
   286fc:	f000 f83e 	bl	2877c <CC_HalTerminate>
   28700:	f000 f88c 	bl	2881c <CC_PalTerminate>
   28704:	2406      	movs	r4, #6
   28706:	4620      	mov	r0, r4
   28708:	b003      	add	sp, #12
   2870a:	bd30      	pop	{r4, r5, pc}
   2870c:	2404      	movs	r4, #4
   2870e:	4620      	mov	r0, r4
   28710:	b003      	add	sp, #12
   28712:	bd30      	pop	{r4, r5, pc}
   28714:	f000 f832 	bl	2877c <CC_HalTerminate>
   28718:	f000 f880 	bl	2881c <CC_PalTerminate>
   2871c:	f7ff ff80 	bl	28620 <RndStartupTest.constprop.0>
   28720:	4604      	mov	r4, r0
   28722:	b998      	cbnz	r0, 2874c <CC_LibInit+0x94>
   28724:	4d11      	ldr	r5, [pc, #68]	; (2876c <CC_LibInit+0xb4>)
   28726:	682b      	ldr	r3, [r5, #0]
   28728:	2b00      	cmp	r3, #0
   2872a:	d1cd      	bne.n	286c8 <CC_LibInit+0x10>
   2872c:	4602      	mov	r2, r0
   2872e:	4601      	mov	r1, r0
   28730:	f7ff f9e6 	bl	27b00 <nrf_cc3xx_platform_ctr_drbg_init>
   28734:	b950      	cbnz	r0, 2874c <CC_LibInit+0x94>
   28736:	490e      	ldr	r1, [pc, #56]	; (28770 <CC_LibInit+0xb8>)
   28738:	ab01      	add	r3, sp, #4
   2873a:	2268      	movs	r2, #104	; 0x68
   2873c:	f7ff fa10 	bl	27b60 <nrf_cc3xx_platform_ctr_drbg_get>
   28740:	b920      	cbnz	r0, 2874c <CC_LibInit+0x94>
   28742:	4b0c      	ldr	r3, [pc, #48]	; (28774 <CC_LibInit+0xbc>)
   28744:	602b      	str	r3, [r5, #0]
   28746:	4620      	mov	r0, r4
   28748:	b003      	add	sp, #12
   2874a:	bd30      	pop	{r4, r5, pc}
   2874c:	2405      	movs	r4, #5
   2874e:	4620      	mov	r0, r4
   28750:	b003      	add	sp, #12
   28752:	bd30      	pop	{r4, r5, pc}
   28754:	2001      	movs	r0, #1
   28756:	f000 f8ed 	bl	28934 <CC_PalPowerSaveModeSelect>
   2875a:	2800      	cmp	r0, #0
   2875c:	d1da      	bne.n	28714 <CC_LibInit+0x5c>
   2875e:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   28762:	e7db      	b.n	2871c <CC_LibInit+0x64>
   28764:	5002b000 	.word	0x5002b000
   28768:	20e00000 	.word	0x20e00000
   2876c:	200051e4 	.word	0x200051e4
   28770:	200051e8 	.word	0x200051e8
   28774:	5a5aea5a 	.word	0x5a5aea5a

00028778 <CC_HalInit>:
   28778:	2000      	movs	r0, #0
   2877a:	4770      	bx	lr

0002877c <CC_HalTerminate>:
   2877c:	2000      	movs	r0, #0
   2877e:	4770      	bx	lr

00028780 <CC_HalClearInterruptBit>:
   28780:	0543      	lsls	r3, r0, #21
   28782:	d504      	bpl.n	2878e <CC_HalClearInterruptBit+0xe>
   28784:	4b04      	ldr	r3, [pc, #16]	; (28798 <CC_HalClearInterruptBit+0x18>)
   28786:	f04f 32ff 	mov.w	r2, #4294967295
   2878a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   2878e:	4b02      	ldr	r3, [pc, #8]	; (28798 <CC_HalClearInterruptBit+0x18>)
   28790:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   28794:	4770      	bx	lr
   28796:	bf00      	nop
   28798:	5002b000 	.word	0x5002b000

0002879c <CC_HalMaskInterrupt>:
   2879c:	4b01      	ldr	r3, [pc, #4]	; (287a4 <CC_HalMaskInterrupt+0x8>)
   2879e:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   287a2:	4770      	bx	lr
   287a4:	5002b000 	.word	0x5002b000

000287a8 <CC_HalWaitInterrupt>:
   287a8:	b108      	cbz	r0, 287ae <CC_HalWaitInterrupt+0x6>
   287aa:	f000 b86b 	b.w	28884 <CC_PalWaitInterrupt>
   287ae:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   287b2:	4770      	bx	lr

000287b4 <CC_HalWaitInterruptRND>:
   287b4:	b108      	cbz	r0, 287ba <CC_HalWaitInterruptRND+0x6>
   287b6:	f000 b84f 	b.w	28858 <CC_PalWaitInterruptRND>
   287ba:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   287be:	4770      	bx	lr

000287c0 <CC_PalInit>:
   287c0:	b510      	push	{r4, lr}
   287c2:	4811      	ldr	r0, [pc, #68]	; (28808 <CC_PalInit+0x48>)
   287c4:	f000 f872 	bl	288ac <CC_PalMutexCreate>
   287c8:	b100      	cbz	r0, 287cc <CC_PalInit+0xc>
   287ca:	bd10      	pop	{r4, pc}
   287cc:	480f      	ldr	r0, [pc, #60]	; (2880c <CC_PalInit+0x4c>)
   287ce:	f000 f86d 	bl	288ac <CC_PalMutexCreate>
   287d2:	2800      	cmp	r0, #0
   287d4:	d1f9      	bne.n	287ca <CC_PalInit+0xa>
   287d6:	4c0e      	ldr	r4, [pc, #56]	; (28810 <CC_PalInit+0x50>)
   287d8:	4620      	mov	r0, r4
   287da:	f000 f867 	bl	288ac <CC_PalMutexCreate>
   287de:	2800      	cmp	r0, #0
   287e0:	d1f3      	bne.n	287ca <CC_PalInit+0xa>
   287e2:	4b0c      	ldr	r3, [pc, #48]	; (28814 <CC_PalInit+0x54>)
   287e4:	480c      	ldr	r0, [pc, #48]	; (28818 <CC_PalInit+0x58>)
   287e6:	601c      	str	r4, [r3, #0]
   287e8:	f000 f860 	bl	288ac <CC_PalMutexCreate>
   287ec:	4601      	mov	r1, r0
   287ee:	2800      	cmp	r0, #0
   287f0:	d1eb      	bne.n	287ca <CC_PalInit+0xa>
   287f2:	f000 f82d 	bl	28850 <CC_PalDmaInit>
   287f6:	4604      	mov	r4, r0
   287f8:	b108      	cbz	r0, 287fe <CC_PalInit+0x3e>
   287fa:	4620      	mov	r0, r4
   287fc:	bd10      	pop	{r4, pc}
   287fe:	f000 f87b 	bl	288f8 <CC_PalPowerSaveModeInit>
   28802:	4620      	mov	r0, r4
   28804:	e7fa      	b.n	287fc <CC_PalInit+0x3c>
   28806:	bf00      	nop
   28808:	20000a5c 	.word	0x20000a5c
   2880c:	20000a58 	.word	0x20000a58
   28810:	20000a54 	.word	0x20000a54
   28814:	20000a4c 	.word	0x20000a4c
   28818:	20000a50 	.word	0x20000a50

0002881c <CC_PalTerminate>:
   2881c:	b508      	push	{r3, lr}
   2881e:	4808      	ldr	r0, [pc, #32]	; (28840 <CC_PalTerminate+0x24>)
   28820:	f000 f84e 	bl	288c0 <CC_PalMutexDestroy>
   28824:	4807      	ldr	r0, [pc, #28]	; (28844 <CC_PalTerminate+0x28>)
   28826:	f000 f84b 	bl	288c0 <CC_PalMutexDestroy>
   2882a:	4807      	ldr	r0, [pc, #28]	; (28848 <CC_PalTerminate+0x2c>)
   2882c:	f000 f848 	bl	288c0 <CC_PalMutexDestroy>
   28830:	4806      	ldr	r0, [pc, #24]	; (2884c <CC_PalTerminate+0x30>)
   28832:	f000 f845 	bl	288c0 <CC_PalMutexDestroy>
   28836:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2883a:	f000 b80b 	b.w	28854 <CC_PalDmaTerminate>
   2883e:	bf00      	nop
   28840:	20000a5c 	.word	0x20000a5c
   28844:	20000a58 	.word	0x20000a58
   28848:	20000a54 	.word	0x20000a54
   2884c:	20000a50 	.word	0x20000a50

00028850 <CC_PalDmaInit>:
   28850:	2000      	movs	r0, #0
   28852:	4770      	bx	lr

00028854 <CC_PalDmaTerminate>:
   28854:	4770      	bx	lr
   28856:	bf00      	nop

00028858 <CC_PalWaitInterruptRND>:
   28858:	b410      	push	{r4}
   2885a:	4c09      	ldr	r4, [pc, #36]	; (28880 <CC_PalWaitInterruptRND+0x28>)
   2885c:	4602      	mov	r2, r0
   2885e:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   28862:	4213      	tst	r3, r2
   28864:	d0fb      	beq.n	2885e <CC_PalWaitInterruptRND+0x6>
   28866:	b121      	cbz	r1, 28872 <CC_PalWaitInterruptRND+0x1a>
   28868:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2886c:	600b      	str	r3, [r1, #0]
   2886e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   28872:	4b03      	ldr	r3, [pc, #12]	; (28880 <CC_PalWaitInterruptRND+0x28>)
   28874:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   28878:	2000      	movs	r0, #0
   2887a:	bc10      	pop	{r4}
   2887c:	4770      	bx	lr
   2887e:	bf00      	nop
   28880:	5002b000 	.word	0x5002b000

00028884 <CC_PalWaitInterrupt>:
   28884:	4a04      	ldr	r2, [pc, #16]	; (28898 <CC_PalWaitInterrupt+0x14>)
   28886:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   2888a:	4218      	tst	r0, r3
   2888c:	d0fb      	beq.n	28886 <CC_PalWaitInterrupt+0x2>
   2888e:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   28892:	2000      	movs	r0, #0
   28894:	4770      	bx	lr
   28896:	bf00      	nop
   28898:	5002b000 	.word	0x5002b000

0002889c <CC_PalMemCopyPlat>:
   2889c:	f003 bd08 	b.w	2c2b0 <memmove>

000288a0 <CC_PalMemSetPlat>:
   288a0:	f003 bd28 	b.w	2c2f4 <memset>

000288a4 <CC_PalMemSetZeroPlat>:
   288a4:	460a      	mov	r2, r1
   288a6:	2100      	movs	r1, #0
   288a8:	f003 bd24 	b.w	2c2f4 <memset>

000288ac <CC_PalMutexCreate>:
   288ac:	b508      	push	{r3, lr}
   288ae:	4b03      	ldr	r3, [pc, #12]	; (288bc <CC_PalMutexCreate+0x10>)
   288b0:	6802      	ldr	r2, [r0, #0]
   288b2:	681b      	ldr	r3, [r3, #0]
   288b4:	6810      	ldr	r0, [r2, #0]
   288b6:	4798      	blx	r3
   288b8:	2000      	movs	r0, #0
   288ba:	bd08      	pop	{r3, pc}
   288bc:	20000a18 	.word	0x20000a18

000288c0 <CC_PalMutexDestroy>:
   288c0:	b508      	push	{r3, lr}
   288c2:	4b03      	ldr	r3, [pc, #12]	; (288d0 <CC_PalMutexDestroy+0x10>)
   288c4:	6802      	ldr	r2, [r0, #0]
   288c6:	685b      	ldr	r3, [r3, #4]
   288c8:	6810      	ldr	r0, [r2, #0]
   288ca:	4798      	blx	r3
   288cc:	2000      	movs	r0, #0
   288ce:	bd08      	pop	{r3, pc}
   288d0:	20000a18 	.word	0x20000a18

000288d4 <CC_PalMutexLock>:
   288d4:	4b02      	ldr	r3, [pc, #8]	; (288e0 <CC_PalMutexLock+0xc>)
   288d6:	6802      	ldr	r2, [r0, #0]
   288d8:	689b      	ldr	r3, [r3, #8]
   288da:	6810      	ldr	r0, [r2, #0]
   288dc:	4718      	bx	r3
   288de:	bf00      	nop
   288e0:	20000a18 	.word	0x20000a18

000288e4 <CC_PalMutexUnlock>:
   288e4:	b508      	push	{r3, lr}
   288e6:	4b03      	ldr	r3, [pc, #12]	; (288f4 <CC_PalMutexUnlock+0x10>)
   288e8:	6802      	ldr	r2, [r0, #0]
   288ea:	68db      	ldr	r3, [r3, #12]
   288ec:	6810      	ldr	r0, [r2, #0]
   288ee:	4798      	blx	r3
   288f0:	2000      	movs	r0, #0
   288f2:	bd08      	pop	{r3, pc}
   288f4:	20000a18 	.word	0x20000a18

000288f8 <CC_PalPowerSaveModeInit>:
   288f8:	b570      	push	{r4, r5, r6, lr}
   288fa:	4c09      	ldr	r4, [pc, #36]	; (28920 <CC_PalPowerSaveModeInit+0x28>)
   288fc:	4d09      	ldr	r5, [pc, #36]	; (28924 <CC_PalPowerSaveModeInit+0x2c>)
   288fe:	6920      	ldr	r0, [r4, #16]
   28900:	68ab      	ldr	r3, [r5, #8]
   28902:	4798      	blx	r3
   28904:	b118      	cbz	r0, 2890e <CC_PalPowerSaveModeInit+0x16>
   28906:	4b08      	ldr	r3, [pc, #32]	; (28928 <CC_PalPowerSaveModeInit+0x30>)
   28908:	4808      	ldr	r0, [pc, #32]	; (2892c <CC_PalPowerSaveModeInit+0x34>)
   2890a:	685b      	ldr	r3, [r3, #4]
   2890c:	4798      	blx	r3
   2890e:	4a08      	ldr	r2, [pc, #32]	; (28930 <CC_PalPowerSaveModeInit+0x38>)
   28910:	68eb      	ldr	r3, [r5, #12]
   28912:	6920      	ldr	r0, [r4, #16]
   28914:	2100      	movs	r1, #0
   28916:	6011      	str	r1, [r2, #0]
   28918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2891c:	4718      	bx	r3
   2891e:	bf00      	nop
   28920:	20000a04 	.word	0x20000a04
   28924:	20000a18 	.word	0x20000a18
   28928:	200009fc 	.word	0x200009fc
   2892c:	00030f00 	.word	0x00030f00
   28930:	20005250 	.word	0x20005250

00028934 <CC_PalPowerSaveModeSelect>:
   28934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28936:	4d1a      	ldr	r5, [pc, #104]	; (289a0 <CC_PalPowerSaveModeSelect+0x6c>)
   28938:	4e1a      	ldr	r6, [pc, #104]	; (289a4 <CC_PalPowerSaveModeSelect+0x70>)
   2893a:	4604      	mov	r4, r0
   2893c:	68b2      	ldr	r2, [r6, #8]
   2893e:	6928      	ldr	r0, [r5, #16]
   28940:	4790      	blx	r2
   28942:	b9e8      	cbnz	r0, 28980 <CC_PalPowerSaveModeSelect+0x4c>
   28944:	4f18      	ldr	r7, [pc, #96]	; (289a8 <CC_PalPowerSaveModeSelect+0x74>)
   28946:	683b      	ldr	r3, [r7, #0]
   28948:	b14c      	cbz	r4, 2895e <CC_PalPowerSaveModeSelect+0x2a>
   2894a:	b1a3      	cbz	r3, 28976 <CC_PalPowerSaveModeSelect+0x42>
   2894c:	2b01      	cmp	r3, #1
   2894e:	d019      	beq.n	28984 <CC_PalPowerSaveModeSelect+0x50>
   28950:	3b01      	subs	r3, #1
   28952:	603b      	str	r3, [r7, #0]
   28954:	6928      	ldr	r0, [r5, #16]
   28956:	68f3      	ldr	r3, [r6, #12]
   28958:	4798      	blx	r3
   2895a:	2000      	movs	r0, #0
   2895c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2895e:	b943      	cbnz	r3, 28972 <CC_PalPowerSaveModeSelect+0x3e>
   28960:	4a12      	ldr	r2, [pc, #72]	; (289ac <CC_PalPowerSaveModeSelect+0x78>)
   28962:	2101      	movs	r1, #1
   28964:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   28968:	4911      	ldr	r1, [pc, #68]	; (289b0 <CC_PalPowerSaveModeSelect+0x7c>)
   2896a:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   2896e:	2a00      	cmp	r2, #0
   28970:	d1fb      	bne.n	2896a <CC_PalPowerSaveModeSelect+0x36>
   28972:	3301      	adds	r3, #1
   28974:	603b      	str	r3, [r7, #0]
   28976:	68f3      	ldr	r3, [r6, #12]
   28978:	6928      	ldr	r0, [r5, #16]
   2897a:	4798      	blx	r3
   2897c:	2000      	movs	r0, #0
   2897e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28980:	480c      	ldr	r0, [pc, #48]	; (289b4 <CC_PalPowerSaveModeSelect+0x80>)
   28982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28984:	4a0a      	ldr	r2, [pc, #40]	; (289b0 <CC_PalPowerSaveModeSelect+0x7c>)
   28986:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2898a:	2b00      	cmp	r3, #0
   2898c:	d1fb      	bne.n	28986 <CC_PalPowerSaveModeSelect+0x52>
   2898e:	4a07      	ldr	r2, [pc, #28]	; (289ac <CC_PalPowerSaveModeSelect+0x78>)
   28990:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   28994:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   28998:	f7ff ff00 	bl	2879c <CC_HalMaskInterrupt>
   2899c:	683b      	ldr	r3, [r7, #0]
   2899e:	e7d7      	b.n	28950 <CC_PalPowerSaveModeSelect+0x1c>
   289a0:	20000a04 	.word	0x20000a04
   289a4:	20000a18 	.word	0x20000a18
   289a8:	20005250 	.word	0x20005250
   289ac:	5002a000 	.word	0x5002a000
   289b0:	5002b000 	.word	0x5002b000
   289b4:	ffff8fe9 	.word	0xffff8fe9

000289b8 <mutex_init>:
   289b8:	4b01      	ldr	r3, [pc, #4]	; (289c0 <mutex_init+0x8>)
   289ba:	681b      	ldr	r3, [r3, #0]
   289bc:	4718      	bx	r3
   289be:	bf00      	nop
   289c0:	20000a18 	.word	0x20000a18

000289c4 <mutex_lock>:
   289c4:	4b01      	ldr	r3, [pc, #4]	; (289cc <mutex_lock+0x8>)
   289c6:	689b      	ldr	r3, [r3, #8]
   289c8:	4718      	bx	r3
   289ca:	bf00      	nop
   289cc:	20000a18 	.word	0x20000a18

000289d0 <mutex_unlock>:
   289d0:	4b01      	ldr	r3, [pc, #4]	; (289d8 <mutex_unlock+0x8>)
   289d2:	68db      	ldr	r3, [r3, #12]
   289d4:	4718      	bx	r3
   289d6:	bf00      	nop
   289d8:	20000a18 	.word	0x20000a18

000289dc <startTrngHW>:
   289dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   289e0:	2800      	cmp	r0, #0
   289e2:	d078      	beq.n	28ad6 <startTrngHW+0xfa>
   289e4:	460c      	mov	r4, r1
   289e6:	2900      	cmp	r1, #0
   289e8:	d075      	beq.n	28ad6 <startTrngHW+0xfa>
   289ea:	461d      	mov	r5, r3
   289ec:	2b00      	cmp	r3, #0
   289ee:	d072      	beq.n	28ad6 <startTrngHW+0xfa>
   289f0:	4607      	mov	r7, r0
   289f2:	b11a      	cbz	r2, 289fc <startTrngHW+0x20>
   289f4:	2201      	movs	r2, #1
   289f6:	2300      	movs	r3, #0
   289f8:	602a      	str	r2, [r5, #0]
   289fa:	6003      	str	r3, [r0, #0]
   289fc:	682b      	ldr	r3, [r5, #0]
   289fe:	2b00      	cmp	r3, #0
   28a00:	d064      	beq.n	28acc <startTrngHW+0xf0>
   28a02:	4629      	mov	r1, r5
   28a04:	4620      	mov	r0, r4
   28a06:	f000 fddb 	bl	295c0 <LLF_RND_GetFastestRosc>
   28a0a:	4680      	mov	r8, r0
   28a0c:	2800      	cmp	r0, #0
   28a0e:	d15f      	bne.n	28ad0 <startTrngHW+0xf4>
   28a10:	6828      	ldr	r0, [r5, #0]
   28a12:	4621      	mov	r1, r4
   28a14:	f000 fdba 	bl	2958c <LLF_RND_GetRoscSampleCnt>
   28a18:	4680      	mov	r8, r0
   28a1a:	2800      	cmp	r0, #0
   28a1c:	d158      	bne.n	28ad0 <startTrngHW+0xf4>
   28a1e:	682b      	ldr	r3, [r5, #0]
   28a20:	2b08      	cmp	r3, #8
   28a22:	d06c      	beq.n	28afe <startTrngHW+0x122>
   28a24:	2b04      	cmp	r3, #4
   28a26:	d06d      	beq.n	28b04 <startTrngHW+0x128>
   28a28:	f1a3 0902 	sub.w	r9, r3, #2
   28a2c:	fab9 f989 	clz	r9, r9
   28a30:	ea4f 1959 	mov.w	r9, r9, lsr #5
   28a34:	4e35      	ldr	r6, [pc, #212]	; (28b0c <startTrngHW+0x130>)
   28a36:	2101      	movs	r1, #1
   28a38:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   28a3c:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
   28a40:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   28a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28a46:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
   28a4a:	f8d6 2130 	ldr.w	r2, [r6, #304]	; 0x130
   28a4e:	4293      	cmp	r3, r2
   28a50:	d1f6      	bne.n	28a40 <startTrngHW+0x64>
   28a52:	f04f 0a00 	mov.w	sl, #0
   28a56:	f04f 30ff 	mov.w	r0, #4294967295
   28a5a:	f8c6 a12c 	str.w	sl, [r6, #300]	; 0x12c
   28a5e:	f7ff fe8f 	bl	28780 <CC_HalClearInterruptBit>
   28a62:	f06f 031b 	mvn.w	r3, #27
   28a66:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
   28a6a:	4650      	mov	r0, sl
   28a6c:	f7ff fe96 	bl	2879c <CC_HalMaskInterrupt>
   28a70:	f8c6 910c 	str.w	r9, [r6, #268]	; 0x10c
   28a74:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   28a78:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   28a7c:	f7ff fe8e 	bl	2879c <CC_HalMaskInterrupt>
   28a80:	230a      	movs	r3, #10
   28a82:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
   28a86:	9b08      	ldr	r3, [sp, #32]
   28a88:	2b01      	cmp	r3, #1
   28a8a:	d029      	beq.n	28ae0 <startTrngHW+0x104>
   28a8c:	6923      	ldr	r3, [r4, #16]
   28a8e:	4a20      	ldr	r2, [pc, #128]	; (28b10 <startTrngHW+0x134>)
   28a90:	fba2 2303 	umull	r2, r3, r2, r3
   28a94:	091b      	lsrs	r3, r3, #4
   28a96:	6a62      	ldr	r2, [r4, #36]	; 0x24
   28a98:	fb02 f303 	mul.w	r3, r2, r3
   28a9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28aa0:	4a1a      	ldr	r2, [pc, #104]	; (28b0c <startTrngHW+0x130>)
   28aa2:	03db      	lsls	r3, r3, #15
   28aa4:	099b      	lsrs	r3, r3, #6
   28aa6:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
   28aaa:	2301      	movs	r3, #1
   28aac:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   28ab0:	683b      	ldr	r3, [r7, #0]
   28ab2:	682a      	ldr	r2, [r5, #0]
   28ab4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   28ab8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   28abc:	603b      	str	r3, [r7, #0]
   28abe:	682a      	ldr	r2, [r5, #0]
   28ac0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28ac4:	603b      	str	r3, [r7, #0]
   28ac6:	4640      	mov	r0, r8
   28ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28acc:	f8df 8044 	ldr.w	r8, [pc, #68]	; 28b14 <startTrngHW+0x138>
   28ad0:	4640      	mov	r0, r8
   28ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28ad6:	f8df 8040 	ldr.w	r8, [pc, #64]	; 28b18 <startTrngHW+0x13c>
   28ada:	4640      	mov	r0, r8
   28adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28ae0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28ae4:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   28ae8:	3201      	adds	r2, #1
   28aea:	d006      	beq.n	28afa <startTrngHW+0x11e>
   28aec:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   28af0:	4a07      	ldr	r2, [pc, #28]	; (28b10 <startTrngHW+0x134>)
   28af2:	fba2 2303 	umull	r2, r3, r2, r3
   28af6:	091b      	lsrs	r3, r3, #4
   28af8:	e7cd      	b.n	28a96 <startTrngHW+0xba>
   28afa:	2316      	movs	r3, #22
   28afc:	e7cb      	b.n	28a96 <startTrngHW+0xba>
   28afe:	f04f 0903 	mov.w	r9, #3
   28b02:	e797      	b.n	28a34 <startTrngHW+0x58>
   28b04:	f04f 0902 	mov.w	r9, #2
   28b08:	e794      	b.n	28a34 <startTrngHW+0x58>
   28b0a:	bf00      	nop
   28b0c:	5002b000 	.word	0x5002b000
   28b10:	aaaaaaab 	.word	0xaaaaaaab
   28b14:	00f10c31 	.word	0x00f10c31
   28b18:	00f10c35 	.word	0x00f10c35

00028b1c <LLF_RND_RepetitionCounterTest>:
   28b1c:	b350      	cbz	r0, 28b74 <LLF_RND_RepetitionCounterTest+0x58>
   28b1e:	1e4b      	subs	r3, r1, #1
   28b20:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   28b24:	d226      	bcs.n	28b74 <LLF_RND_RepetitionCounterTest+0x58>
   28b26:	f04f 0c00 	mov.w	ip, #0
   28b2a:	b530      	push	{r4, r5, lr}
   28b2c:	00cd      	lsls	r5, r1, #3
   28b2e:	46e6      	mov	lr, ip
   28b30:	4664      	mov	r4, ip
   28b32:	0963      	lsrs	r3, r4, #5
   28b34:	f004 011f 	and.w	r1, r4, #31
   28b38:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   28b3c:	291f      	cmp	r1, #31
   28b3e:	fa23 f301 	lsr.w	r3, r3, r1
   28b42:	d006      	beq.n	28b52 <LLF_RND_RepetitionCounterTest+0x36>
   28b44:	f003 0301 	and.w	r3, r3, #1
   28b48:	b91c      	cbnz	r4, 28b52 <LLF_RND_RepetitionCounterTest+0x36>
   28b4a:	2401      	movs	r4, #1
   28b4c:	469e      	mov	lr, r3
   28b4e:	46a4      	mov	ip, r4
   28b50:	e7ef      	b.n	28b32 <LLF_RND_RepetitionCounterTest+0x16>
   28b52:	459e      	cmp	lr, r3
   28b54:	f104 0401 	add.w	r4, r4, #1
   28b58:	d006      	beq.n	28b68 <LLF_RND_RepetitionCounterTest+0x4c>
   28b5a:	469e      	mov	lr, r3
   28b5c:	f04f 0c01 	mov.w	ip, #1
   28b60:	42ac      	cmp	r4, r5
   28b62:	d1e6      	bne.n	28b32 <LLF_RND_RepetitionCounterTest+0x16>
   28b64:	2000      	movs	r0, #0
   28b66:	bd30      	pop	{r4, r5, pc}
   28b68:	f10c 0c01 	add.w	ip, ip, #1
   28b6c:	4594      	cmp	ip, r2
   28b6e:	d1f7      	bne.n	28b60 <LLF_RND_RepetitionCounterTest+0x44>
   28b70:	4801      	ldr	r0, [pc, #4]	; (28b78 <LLF_RND_RepetitionCounterTest+0x5c>)
   28b72:	bd30      	pop	{r4, r5, pc}
   28b74:	4800      	ldr	r0, [pc, #0]	; (28b78 <LLF_RND_RepetitionCounterTest+0x5c>)
   28b76:	4770      	bx	lr
   28b78:	00f10c36 	.word	0x00f10c36

00028b7c <LLF_RND_AdaptiveProportionTest>:
   28b7c:	b3c8      	cbz	r0, 28bf2 <LLF_RND_AdaptiveProportionTest+0x76>
   28b7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28b82:	1e4c      	subs	r4, r1, #1
   28b84:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   28b88:	d21c      	bcs.n	28bc4 <LLF_RND_AdaptiveProportionTest+0x48>
   28b8a:	b1db      	cbz	r3, 28bc4 <LLF_RND_AdaptiveProportionTest+0x48>
   28b8c:	b1d2      	cbz	r2, 28bc4 <LLF_RND_AdaptiveProportionTest+0x48>
   28b8e:	f04f 0e00 	mov.w	lr, #0
   28b92:	00cf      	lsls	r7, r1, #3
   28b94:	4676      	mov	r6, lr
   28b96:	46f0      	mov	r8, lr
   28b98:	4675      	mov	r5, lr
   28b9a:	f103 39ff 	add.w	r9, r3, #4294967295
   28b9e:	096c      	lsrs	r4, r5, #5
   28ba0:	f005 011f 	and.w	r1, r5, #31
   28ba4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   28ba8:	291f      	cmp	r1, #31
   28baa:	fa24 fc01 	lsr.w	ip, r4, r1
   28bae:	d00c      	beq.n	28bca <LLF_RND_AdaptiveProportionTest+0x4e>
   28bb0:	f00c 0c01 	and.w	ip, ip, #1
   28bb4:	b94d      	cbnz	r5, 28bca <LLF_RND_AdaptiveProportionTest+0x4e>
   28bb6:	2601      	movs	r6, #1
   28bb8:	46e0      	mov	r8, ip
   28bba:	4635      	mov	r5, r6
   28bbc:	46b6      	mov	lr, r6
   28bbe:	e7ee      	b.n	28b9e <LLF_RND_AdaptiveProportionTest+0x22>
   28bc0:	4296      	cmp	r6, r2
   28bc2:	d918      	bls.n	28bf6 <LLF_RND_AdaptiveProportionTest+0x7a>
   28bc4:	480d      	ldr	r0, [pc, #52]	; (28bfc <LLF_RND_AdaptiveProportionTest+0x80>)
   28bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28bca:	4573      	cmp	r3, lr
   28bcc:	d00c      	beq.n	28be8 <LLF_RND_AdaptiveProportionTest+0x6c>
   28bce:	45c4      	cmp	ip, r8
   28bd0:	bf08      	it	eq
   28bd2:	3601      	addeq	r6, #1
   28bd4:	45f1      	cmp	r9, lr
   28bd6:	d0f3      	beq.n	28bc0 <LLF_RND_AdaptiveProportionTest+0x44>
   28bd8:	f10e 0e01 	add.w	lr, lr, #1
   28bdc:	3501      	adds	r5, #1
   28bde:	42bd      	cmp	r5, r7
   28be0:	d1dd      	bne.n	28b9e <LLF_RND_AdaptiveProportionTest+0x22>
   28be2:	2000      	movs	r0, #0
   28be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28be8:	f04f 0e01 	mov.w	lr, #1
   28bec:	46e0      	mov	r8, ip
   28bee:	4676      	mov	r6, lr
   28bf0:	e7f4      	b.n	28bdc <LLF_RND_AdaptiveProportionTest+0x60>
   28bf2:	4802      	ldr	r0, [pc, #8]	; (28bfc <LLF_RND_AdaptiveProportionTest+0x80>)
   28bf4:	4770      	bx	lr
   28bf6:	469e      	mov	lr, r3
   28bf8:	e7f0      	b.n	28bdc <LLF_RND_AdaptiveProportionTest+0x60>
   28bfa:	bf00      	nop
   28bfc:	00f10c37 	.word	0x00f10c37

00028c00 <getTrngSource>:
   28c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c04:	b091      	sub	sp, #68	; 0x44
   28c06:	460d      	mov	r5, r1
   28c08:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   28c0c:	4682      	mov	sl, r0
   28c0e:	2900      	cmp	r1, #0
   28c10:	d16e      	bne.n	28cf0 <getTrngSource+0xf0>
   28c12:	6928      	ldr	r0, [r5, #16]
   28c14:	9006      	str	r0, [sp, #24]
   28c16:	981a      	ldr	r0, [sp, #104]	; 0x68
   28c18:	601c      	str	r4, [r3, #0]
   28c1a:	2300      	movs	r3, #0
   28c1c:	6003      	str	r3, [r0, #0]
   28c1e:	2a00      	cmp	r2, #0
   28c20:	f000 812e 	beq.w	28e80 <getTrngSource+0x280>
   28c24:	4b9c      	ldr	r3, [pc, #624]	; (28e98 <getTrngSource+0x298>)
   28c26:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   28c28:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   28c2c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   28c30:	429a      	cmp	r2, r3
   28c32:	d169      	bne.n	28d08 <getTrngSource+0x108>
   28c34:	290a      	cmp	r1, #10
   28c36:	d167      	bne.n	28d08 <getTrngSource+0x108>
   28c38:	f89a 3003 	ldrb.w	r3, [sl, #3]
   28c3c:	9308      	str	r3, [sp, #32]
   28c3e:	f104 0308 	add.w	r3, r4, #8
   28c42:	9906      	ldr	r1, [sp, #24]
   28c44:	9307      	str	r3, [sp, #28]
   28c46:	4b95      	ldr	r3, [pc, #596]	; (28e9c <getTrngSource+0x29c>)
   28c48:	4c93      	ldr	r4, [pc, #588]	; (28e98 <getTrngSource+0x298>)
   28c4a:	fba3 2301 	umull	r2, r3, r3, r1
   28c4e:	089b      	lsrs	r3, r3, #2
   28c50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28c54:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   28c58:	9303      	str	r3, [sp, #12]
   28c5a:	2304      	movs	r3, #4
   28c5c:	9305      	str	r3, [sp, #20]
   28c5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   28c60:	9e06      	ldr	r6, [sp, #24]
   28c62:	601e      	str	r6, [r3, #0]
   28c64:	2e00      	cmp	r6, #0
   28c66:	f000 80e9 	beq.w	28e3c <getTrngSource+0x23c>
   28c6a:	2700      	movs	r7, #0
   28c6c:	f000 fcb8 	bl	295e0 <LLF_RND_TurnOffTrng>
   28c70:	9709      	str	r7, [sp, #36]	; 0x24
   28c72:	f1ba 0f00 	cmp.w	sl, #0
   28c76:	f000 80d5 	beq.w	28e24 <getTrngSource+0x224>
   28c7a:	f8dd 801c 	ldr.w	r8, [sp, #28]
   28c7e:	f04f 0901 	mov.w	r9, #1
   28c82:	2d00      	cmp	r5, #0
   28c84:	f000 80ce 	beq.w	28e24 <getTrngSource+0x224>
   28c88:	9b08      	ldr	r3, [sp, #32]
   28c8a:	2b00      	cmp	r3, #0
   28c8c:	d03e      	beq.n	28d0c <getTrngSource+0x10c>
   28c8e:	a908      	add	r1, sp, #32
   28c90:	4628      	mov	r0, r5
   28c92:	f000 fc95 	bl	295c0 <LLF_RND_GetFastestRosc>
   28c96:	2800      	cmp	r0, #0
   28c98:	d03a      	beq.n	28d10 <getTrngSource+0x110>
   28c9a:	4b81      	ldr	r3, [pc, #516]	; (28ea0 <getTrngSource+0x2a0>)
   28c9c:	4298      	cmp	r0, r3
   28c9e:	d020      	beq.n	28ce2 <getTrngSource+0xe2>
   28ca0:	9b08      	ldr	r3, [sp, #32]
   28ca2:	2b08      	cmp	r3, #8
   28ca4:	f000 80e4 	beq.w	28e70 <getTrngSource+0x270>
   28ca8:	005b      	lsls	r3, r3, #1
   28caa:	2200      	movs	r2, #0
   28cac:	9308      	str	r3, [sp, #32]
   28cae:	9200      	str	r2, [sp, #0]
   28cb0:	ab08      	add	r3, sp, #32
   28cb2:	4629      	mov	r1, r5
   28cb4:	4650      	mov	r0, sl
   28cb6:	f7ff fe91 	bl	289dc <startTrngHW>
   28cba:	4b7a      	ldr	r3, [pc, #488]	; (28ea4 <getTrngSource+0x2a4>)
   28cbc:	4298      	cmp	r0, r3
   28cbe:	f000 80d3 	beq.w	28e68 <getTrngSource+0x268>
   28cc2:	b970      	cbnz	r0, 28ce2 <getTrngSource+0xe2>
   28cc4:	f8da 2000 	ldr.w	r2, [sl]
   28cc8:	0a13      	lsrs	r3, r2, #8
   28cca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   28cce:	4313      	orrs	r3, r2
   28cd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   28cd4:	f8ca 3000 	str.w	r3, [sl]
   28cd8:	9b05      	ldr	r3, [sp, #20]
   28cda:	3b01      	subs	r3, #1
   28cdc:	9305      	str	r3, [sp, #20]
   28cde:	d1be      	bne.n	28c5e <getTrngSource+0x5e>
   28ce0:	2000      	movs	r0, #0
   28ce2:	9003      	str	r0, [sp, #12]
   28ce4:	f000 fc7c 	bl	295e0 <LLF_RND_TurnOffTrng>
   28ce8:	9803      	ldr	r0, [sp, #12]
   28cea:	b011      	add	sp, #68	; 0x44
   28cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28cf0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   28cf4:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   28cf8:	3601      	adds	r6, #1
   28cfa:	bf14      	ite	ne
   28cfc:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   28d00:	f44f 7004 	moveq.w	r0, #528	; 0x210
   28d04:	9006      	str	r0, [sp, #24]
   28d06:	e786      	b.n	28c16 <getTrngSource+0x16>
   28d08:	4867      	ldr	r0, [pc, #412]	; (28ea8 <getTrngSource+0x2a8>)
   28d0a:	e7ea      	b.n	28ce2 <getTrngSource+0xe2>
   28d0c:	4865      	ldr	r0, [pc, #404]	; (28ea4 <getTrngSource+0x2a4>)
   28d0e:	e7c4      	b.n	28c9a <getTrngSource+0x9a>
   28d10:	9808      	ldr	r0, [sp, #32]
   28d12:	4629      	mov	r1, r5
   28d14:	f000 fc3a 	bl	2958c <LLF_RND_GetRoscSampleCnt>
   28d18:	2800      	cmp	r0, #0
   28d1a:	d1be      	bne.n	28c9a <getTrngSource+0x9a>
   28d1c:	9b08      	ldr	r3, [sp, #32]
   28d1e:	2b08      	cmp	r3, #8
   28d20:	f000 80a8 	beq.w	28e74 <getTrngSource+0x274>
   28d24:	2b04      	cmp	r3, #4
   28d26:	f000 80a8 	beq.w	28e7a <getTrngSource+0x27a>
   28d2a:	f1a3 0302 	sub.w	r3, r3, #2
   28d2e:	fab3 f383 	clz	r3, r3
   28d32:	095b      	lsrs	r3, r3, #5
   28d34:	9304      	str	r3, [sp, #16]
   28d36:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   28d3a:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   28d3e:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   28d42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   28d44:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   28d48:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   28d4c:	4293      	cmp	r3, r2
   28d4e:	d1f6      	bne.n	28d3e <getTrngSource+0x13e>
   28d50:	f04f 0b00 	mov.w	fp, #0
   28d54:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   28d58:	f04f 30ff 	mov.w	r0, #4294967295
   28d5c:	f7ff fd10 	bl	28780 <CC_HalClearInterruptBit>
   28d60:	f06f 031b 	mvn.w	r3, #27
   28d64:	4658      	mov	r0, fp
   28d66:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   28d6a:	f7ff fd17 	bl	2879c <CC_HalMaskInterrupt>
   28d6e:	9b04      	ldr	r3, [sp, #16]
   28d70:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   28d74:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   28d78:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   28d7c:	f7ff fd0e 	bl	2879c <CC_HalMaskInterrupt>
   28d80:	230a      	movs	r3, #10
   28d82:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   28d86:	692b      	ldr	r3, [r5, #16]
   28d88:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   28d8c:	fbab 2303 	umull	r2, r3, fp, r3
   28d90:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   28d92:	091b      	lsrs	r3, r3, #4
   28d94:	fb02 f303 	mul.w	r3, r2, r3
   28d98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28d9c:	03db      	lsls	r3, r3, #15
   28d9e:	099b      	lsrs	r3, r3, #6
   28da0:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   28da4:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   28da8:	f8da 3000 	ldr.w	r3, [sl]
   28dac:	9908      	ldr	r1, [sp, #32]
   28dae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   28db2:	020b      	lsls	r3, r1, #8
   28db4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   28db8:	4313      	orrs	r3, r2
   28dba:	f8ca 3000 	str.w	r3, [sl]
   28dbe:	a809      	add	r0, sp, #36	; 0x24
   28dc0:	f000 fbd4 	bl	2956c <LLF_RND_WaitRngInterrupt>
   28dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28dc6:	f003 031a 	and.w	r3, r3, #26
   28dca:	4303      	orrs	r3, r0
   28dcc:	f47f af68 	bne.w	28ca0 <getTrngSource+0xa0>
   28dd0:	fbab 3b06 	umull	r3, fp, fp, r6
   28dd4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   28dd8:	930a      	str	r3, [sp, #40]	; 0x28
   28dda:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   28dde:	930b      	str	r3, [sp, #44]	; 0x2c
   28de0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   28de4:	930c      	str	r3, [sp, #48]	; 0x30
   28de6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   28dea:	930d      	str	r3, [sp, #52]	; 0x34
   28dec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   28df0:	930e      	str	r3, [sp, #56]	; 0x38
   28df2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   28df6:	930f      	str	r3, [sp, #60]	; 0x3c
   28df8:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   28dfc:	d101      	bne.n	28e02 <getTrngSource+0x202>
   28dfe:	9b03      	ldr	r3, [sp, #12]
   28e00:	b993      	cbnz	r3, 28e28 <getTrngSource+0x228>
   28e02:	4640      	mov	r0, r8
   28e04:	2218      	movs	r2, #24
   28e06:	a90a      	add	r1, sp, #40	; 0x28
   28e08:	3e18      	subs	r6, #24
   28e0a:	f7ff fd47 	bl	2889c <CC_PalMemCopyPlat>
   28e0e:	f108 0818 	add.w	r8, r8, #24
   28e12:	3701      	adds	r7, #1
   28e14:	b196      	cbz	r6, 28e3c <getTrngSource+0x23c>
   28e16:	f000 fbe3 	bl	295e0 <LLF_RND_TurnOffTrng>
   28e1a:	2300      	movs	r3, #0
   28e1c:	9309      	str	r3, [sp, #36]	; 0x24
   28e1e:	2d00      	cmp	r5, #0
   28e20:	f47f af32 	bne.w	28c88 <getTrngSource+0x88>
   28e24:	4821      	ldr	r0, [pc, #132]	; (28eac <getTrngSource+0x2ac>)
   28e26:	e738      	b.n	28c9a <getTrngSource+0x9a>
   28e28:	4640      	mov	r0, r8
   28e2a:	1af6      	subs	r6, r6, r3
   28e2c:	461a      	mov	r2, r3
   28e2e:	a90a      	add	r1, sp, #40	; 0x28
   28e30:	4498      	add	r8, r3
   28e32:	3701      	adds	r7, #1
   28e34:	f7ff fd32 	bl	2889c <CC_PalMemCopyPlat>
   28e38:	2e00      	cmp	r6, #0
   28e3a:	d1ec      	bne.n	28e16 <getTrngSource+0x216>
   28e3c:	9f06      	ldr	r7, [sp, #24]
   28e3e:	9e07      	ldr	r6, [sp, #28]
   28e40:	696a      	ldr	r2, [r5, #20]
   28e42:	4639      	mov	r1, r7
   28e44:	4630      	mov	r0, r6
   28e46:	f7ff fe69 	bl	28b1c <LLF_RND_RepetitionCounterTest>
   28e4a:	69aa      	ldr	r2, [r5, #24]
   28e4c:	b940      	cbnz	r0, 28e60 <getTrngSource+0x260>
   28e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   28e52:	4639      	mov	r1, r7
   28e54:	4630      	mov	r0, r6
   28e56:	f7ff fe91 	bl	28b7c <LLF_RND_AdaptiveProportionTest>
   28e5a:	2800      	cmp	r0, #0
   28e5c:	f43f af40 	beq.w	28ce0 <getTrngSource+0xe0>
   28e60:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   28e62:	2300      	movs	r3, #0
   28e64:	6013      	str	r3, [r2, #0]
   28e66:	e718      	b.n	28c9a <getTrngSource+0x9a>
   28e68:	6a2b      	ldr	r3, [r5, #32]
   28e6a:	2b00      	cmp	r3, #0
   28e6c:	f43f af39 	beq.w	28ce2 <getTrngSource+0xe2>
   28e70:	480f      	ldr	r0, [pc, #60]	; (28eb0 <getTrngSource+0x2b0>)
   28e72:	e736      	b.n	28ce2 <getTrngSource+0xe2>
   28e74:	2303      	movs	r3, #3
   28e76:	9304      	str	r3, [sp, #16]
   28e78:	e75d      	b.n	28d36 <getTrngSource+0x136>
   28e7a:	2302      	movs	r3, #2
   28e7c:	9304      	str	r3, [sp, #16]
   28e7e:	e75a      	b.n	28d36 <getTrngSource+0x136>
   28e80:	9100      	str	r1, [sp, #0]
   28e82:	ab08      	add	r3, sp, #32
   28e84:	2201      	movs	r2, #1
   28e86:	4629      	mov	r1, r5
   28e88:	4650      	mov	r0, sl
   28e8a:	f7ff fda7 	bl	289dc <startTrngHW>
   28e8e:	2800      	cmp	r0, #0
   28e90:	f43f aed5 	beq.w	28c3e <getTrngSource+0x3e>
   28e94:	e725      	b.n	28ce2 <getTrngSource+0xe2>
   28e96:	bf00      	nop
   28e98:	5002b000 	.word	0x5002b000
   28e9c:	aaaaaaab 	.word	0xaaaaaaab
   28ea0:	00f10c02 	.word	0x00f10c02
   28ea4:	00f10c31 	.word	0x00f10c31
   28ea8:	00f10c30 	.word	0x00f10c30
   28eac:	00f10c35 	.word	0x00f10c35
   28eb0:	00f10c32 	.word	0x00f10c32

00028eb4 <LLF_RND_GetTrngSource>:
   28eb4:	b410      	push	{r4}
   28eb6:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   28eba:	9401      	str	r4, [sp, #4]
   28ebc:	9c03      	ldr	r4, [sp, #12]
   28ebe:	9402      	str	r4, [sp, #8]
   28ec0:	2400      	movs	r4, #0
   28ec2:	9403      	str	r4, [sp, #12]
   28ec4:	bc10      	pop	{r4}
   28ec6:	f7ff be9b 	b.w	28c00 <getTrngSource>
   28eca:	bf00      	nop

00028ecc <LLF_RND_RunTrngStartupTest>:
   28ecc:	b510      	push	{r4, lr}
   28ece:	b086      	sub	sp, #24
   28ed0:	ab05      	add	r3, sp, #20
   28ed2:	2401      	movs	r4, #1
   28ed4:	e9cd 2401 	strd	r2, r4, [sp, #4]
   28ed8:	9300      	str	r3, [sp, #0]
   28eda:	2200      	movs	r2, #0
   28edc:	ab04      	add	r3, sp, #16
   28ede:	f7ff fe8f 	bl	28c00 <getTrngSource>
   28ee2:	b006      	add	sp, #24
   28ee4:	bd10      	pop	{r4, pc}
   28ee6:	bf00      	nop

00028ee8 <mbedtls_hardware_poll>:
   28ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
   28eea:	b087      	sub	sp, #28
   28eec:	2900      	cmp	r1, #0
   28eee:	d066      	beq.n	28fbe <mbedtls_hardware_poll+0xd6>
   28ef0:	461e      	mov	r6, r3
   28ef2:	2b00      	cmp	r3, #0
   28ef4:	d063      	beq.n	28fbe <mbedtls_hardware_poll+0xd6>
   28ef6:	4614      	mov	r4, r2
   28ef8:	2a00      	cmp	r2, #0
   28efa:	d060      	beq.n	28fbe <mbedtls_hardware_poll+0xd6>
   28efc:	4f31      	ldr	r7, [pc, #196]	; (28fc4 <mbedtls_hardware_poll+0xdc>)
   28efe:	460d      	mov	r5, r1
   28f00:	6838      	ldr	r0, [r7, #0]
   28f02:	f04f 31ff 	mov.w	r1, #4294967295
   28f06:	f7ff fce5 	bl	288d4 <CC_PalMutexLock>
   28f0a:	2800      	cmp	r0, #0
   28f0c:	d14d      	bne.n	28faa <mbedtls_hardware_poll+0xc2>
   28f0e:	2000      	movs	r0, #0
   28f10:	f7ff fd10 	bl	28934 <CC_PalPowerSaveModeSelect>
   28f14:	2800      	cmp	r0, #0
   28f16:	d144      	bne.n	28fa2 <mbedtls_hardware_poll+0xba>
   28f18:	482b      	ldr	r0, [pc, #172]	; (28fc8 <mbedtls_hardware_poll+0xe0>)
   28f1a:	f000 fa99 	bl	29450 <RNG_PLAT_SetUserRngParameters>
   28f1e:	4603      	mov	r3, r0
   28f20:	b1d8      	cbz	r0, 28f5a <mbedtls_hardware_poll+0x72>
   28f22:	2001      	movs	r0, #1
   28f24:	f04f 35ff 	mov.w	r5, #4294967295
   28f28:	f7ff fd04 	bl	28934 <CC_PalPowerSaveModeSelect>
   28f2c:	2800      	cmp	r0, #0
   28f2e:	d134      	bne.n	28f9a <mbedtls_hardware_poll+0xb2>
   28f30:	4826      	ldr	r0, [pc, #152]	; (28fcc <mbedtls_hardware_poll+0xe4>)
   28f32:	f44f 7108 	mov.w	r1, #544	; 0x220
   28f36:	f7fe fed9 	bl	27cec <mbedtls_zeroize_internal>
   28f3a:	4825      	ldr	r0, [pc, #148]	; (28fd0 <mbedtls_hardware_poll+0xe8>)
   28f3c:	2104      	movs	r1, #4
   28f3e:	f7fe fed5 	bl	27cec <mbedtls_zeroize_internal>
   28f42:	4821      	ldr	r0, [pc, #132]	; (28fc8 <mbedtls_hardware_poll+0xe0>)
   28f44:	2128      	movs	r1, #40	; 0x28
   28f46:	f7fe fed1 	bl	27cec <mbedtls_zeroize_internal>
   28f4a:	6838      	ldr	r0, [r7, #0]
   28f4c:	f7ff fcca 	bl	288e4 <CC_PalMutexUnlock>
   28f50:	2800      	cmp	r0, #0
   28f52:	d12e      	bne.n	28fb2 <mbedtls_hardware_poll+0xca>
   28f54:	4628      	mov	r0, r5
   28f56:	b007      	add	sp, #28
   28f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28f5a:	4a1c      	ldr	r2, [pc, #112]	; (28fcc <mbedtls_hardware_poll+0xe4>)
   28f5c:	9202      	str	r2, [sp, #8]
   28f5e:	aa05      	add	r2, sp, #20
   28f60:	9201      	str	r2, [sp, #4]
   28f62:	aa04      	add	r2, sp, #16
   28f64:	9003      	str	r0, [sp, #12]
   28f66:	9200      	str	r2, [sp, #0]
   28f68:	4917      	ldr	r1, [pc, #92]	; (28fc8 <mbedtls_hardware_poll+0xe0>)
   28f6a:	4819      	ldr	r0, [pc, #100]	; (28fd0 <mbedtls_hardware_poll+0xe8>)
   28f6c:	461a      	mov	r2, r3
   28f6e:	f7ff ffa1 	bl	28eb4 <LLF_RND_GetTrngSource>
   28f72:	4603      	mov	r3, r0
   28f74:	2800      	cmp	r0, #0
   28f76:	d1d4      	bne.n	28f22 <mbedtls_hardware_poll+0x3a>
   28f78:	4628      	mov	r0, r5
   28f7a:	461d      	mov	r5, r3
   28f7c:	9b05      	ldr	r3, [sp, #20]
   28f7e:	9904      	ldr	r1, [sp, #16]
   28f80:	429c      	cmp	r4, r3
   28f82:	4622      	mov	r2, r4
   28f84:	bf28      	it	cs
   28f86:	461a      	movcs	r2, r3
   28f88:	6032      	str	r2, [r6, #0]
   28f8a:	3108      	adds	r1, #8
   28f8c:	f7ff fc86 	bl	2889c <CC_PalMemCopyPlat>
   28f90:	2001      	movs	r0, #1
   28f92:	f7ff fccf 	bl	28934 <CC_PalPowerSaveModeSelect>
   28f96:	2800      	cmp	r0, #0
   28f98:	d0ca      	beq.n	28f30 <mbedtls_hardware_poll+0x48>
   28f9a:	480e      	ldr	r0, [pc, #56]	; (28fd4 <mbedtls_hardware_poll+0xec>)
   28f9c:	f7fe fd8e 	bl	27abc <CC_PalAbort>
   28fa0:	e7c6      	b.n	28f30 <mbedtls_hardware_poll+0x48>
   28fa2:	480d      	ldr	r0, [pc, #52]	; (28fd8 <mbedtls_hardware_poll+0xf0>)
   28fa4:	f7fe fd8a 	bl	27abc <CC_PalAbort>
   28fa8:	e7b6      	b.n	28f18 <mbedtls_hardware_poll+0x30>
   28faa:	480c      	ldr	r0, [pc, #48]	; (28fdc <mbedtls_hardware_poll+0xf4>)
   28fac:	f7fe fd86 	bl	27abc <CC_PalAbort>
   28fb0:	e7ad      	b.n	28f0e <mbedtls_hardware_poll+0x26>
   28fb2:	480b      	ldr	r0, [pc, #44]	; (28fe0 <mbedtls_hardware_poll+0xf8>)
   28fb4:	f7fe fd82 	bl	27abc <CC_PalAbort>
   28fb8:	4628      	mov	r0, r5
   28fba:	b007      	add	sp, #28
   28fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28fbe:	f04f 35ff 	mov.w	r5, #4294967295
   28fc2:	e7c7      	b.n	28f54 <mbedtls_hardware_poll+0x6c>
   28fc4:	20000a4c 	.word	0x20000a4c
   28fc8:	20005258 	.word	0x20005258
   28fcc:	20005280 	.word	0x20005280
   28fd0:	20005254 	.word	0x20005254
   28fd4:	00030ec8 	.word	0x00030ec8
   28fd8:	00030ea8 	.word	0x00030ea8
   28fdc:	00030e90 	.word	0x00030e90
   28fe0:	00030f20 	.word	0x00030f20

00028fe4 <cc_mbedtls_aes_init>:
   28fe4:	b510      	push	{r4, lr}
   28fe6:	4604      	mov	r4, r0
   28fe8:	b130      	cbz	r0, 28ff8 <cc_mbedtls_aes_init+0x14>
   28fea:	2200      	movs	r2, #0
   28fec:	2301      	movs	r3, #1
   28fee:	6562      	str	r2, [r4, #84]	; 0x54
   28ff0:	65a2      	str	r2, [r4, #88]	; 0x58
   28ff2:	65e3      	str	r3, [r4, #92]	; 0x5c
   28ff4:	6623      	str	r3, [r4, #96]	; 0x60
   28ff6:	bd10      	pop	{r4, pc}
   28ff8:	4801      	ldr	r0, [pc, #4]	; (29000 <cc_mbedtls_aes_init+0x1c>)
   28ffa:	f7fe fd5f 	bl	27abc <CC_PalAbort>
   28ffe:	e7f4      	b.n	28fea <cc_mbedtls_aes_init+0x6>
   29000:	00030f38 	.word	0x00030f38

00029004 <cc_mbedtls_aes_free>:
   29004:	b118      	cbz	r0, 2900e <cc_mbedtls_aes_free+0xa>
   29006:	2274      	movs	r2, #116	; 0x74
   29008:	2100      	movs	r1, #0
   2900a:	f7ff bc49 	b.w	288a0 <CC_PalMemSetPlat>
   2900e:	4770      	bx	lr

00029010 <cc_mbedtls_aes_setkey_enc>:
   29010:	b190      	cbz	r0, 29038 <cc_mbedtls_aes_setkey_enc+0x28>
   29012:	b1a1      	cbz	r1, 2903e <cc_mbedtls_aes_setkey_enc+0x2e>
   29014:	b510      	push	{r4, lr}
   29016:	2a80      	cmp	r2, #128	; 0x80
   29018:	f04f 0400 	mov.w	r4, #0
   2901c:	6384      	str	r4, [r0, #56]	; 0x38
   2901e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   29022:	d106      	bne.n	29032 <cc_mbedtls_aes_setkey_enc+0x22>
   29024:	2210      	movs	r2, #16
   29026:	6304      	str	r4, [r0, #48]	; 0x30
   29028:	4410      	add	r0, r2
   2902a:	f7ff fc37 	bl	2889c <CC_PalMemCopyPlat>
   2902e:	4620      	mov	r0, r4
   29030:	bd10      	pop	{r4, pc}
   29032:	f06f 001f 	mvn.w	r0, #31
   29036:	bd10      	pop	{r4, pc}
   29038:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2903c:	4770      	bx	lr
   2903e:	f06f 001f 	mvn.w	r0, #31
   29042:	4770      	bx	lr

00029044 <cc_mbedtls_aes_crypt_ecb>:
   29044:	b328      	cbz	r0, 29092 <cc_mbedtls_aes_crypt_ecb+0x4e>
   29046:	b322      	cbz	r2, 29092 <cc_mbedtls_aes_crypt_ecb+0x4e>
   29048:	b31b      	cbz	r3, 29092 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2904a:	2901      	cmp	r1, #1
   2904c:	d821      	bhi.n	29092 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2904e:	b570      	push	{r4, r5, r6, lr}
   29050:	4604      	mov	r4, r0
   29052:	6b81      	ldr	r1, [r0, #56]	; 0x38
   29054:	b086      	sub	sp, #24
   29056:	d017      	beq.n	29088 <cc_mbedtls_aes_crypt_ecb+0x44>
   29058:	2901      	cmp	r1, #1
   2905a:	d117      	bne.n	2908c <cc_mbedtls_aes_crypt_ecb+0x48>
   2905c:	2510      	movs	r5, #16
   2905e:	2100      	movs	r1, #0
   29060:	eb0d 0605 	add.w	r6, sp, r5
   29064:	6361      	str	r1, [r4, #52]	; 0x34
   29066:	4610      	mov	r0, r2
   29068:	9500      	str	r5, [sp, #0]
   2906a:	9601      	str	r6, [sp, #4]
   2906c:	aa02      	add	r2, sp, #8
   2906e:	4629      	mov	r1, r5
   29070:	f000 fac2 	bl	295f8 <SetDataBuffersInfo>
   29074:	b950      	cbnz	r0, 2908c <cc_mbedtls_aes_crypt_ecb+0x48>
   29076:	462b      	mov	r3, r5
   29078:	4632      	mov	r2, r6
   2907a:	a902      	add	r1, sp, #8
   2907c:	4620      	mov	r0, r4
   2907e:	f000 fd43 	bl	29b08 <ProcessAesDrv>
   29082:	b918      	cbnz	r0, 2908c <cc_mbedtls_aes_crypt_ecb+0x48>
   29084:	b006      	add	sp, #24
   29086:	bd70      	pop	{r4, r5, r6, pc}
   29088:	2900      	cmp	r1, #0
   2908a:	d0e7      	beq.n	2905c <cc_mbedtls_aes_crypt_ecb+0x18>
   2908c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   29090:	e7f8      	b.n	29084 <cc_mbedtls_aes_crypt_ecb+0x40>
   29092:	f06f 0021 	mvn.w	r0, #33	; 0x21
   29096:	4770      	bx	lr

00029098 <cc_mbedtls_sha256_init>:
   29098:	b510      	push	{r4, lr}
   2909a:	4604      	mov	r4, r0
   2909c:	b128      	cbz	r0, 290aa <cc_mbedtls_sha256_init+0x12>
   2909e:	4620      	mov	r0, r4
   290a0:	21f4      	movs	r1, #244	; 0xf4
   290a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   290a6:	f7ff bbfd 	b.w	288a4 <CC_PalMemSetZeroPlat>
   290aa:	4804      	ldr	r0, [pc, #16]	; (290bc <cc_mbedtls_sha256_init+0x24>)
   290ac:	f7fe fd06 	bl	27abc <CC_PalAbort>
   290b0:	4620      	mov	r0, r4
   290b2:	21f4      	movs	r1, #244	; 0xf4
   290b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   290b8:	f7ff bbf4 	b.w	288a4 <CC_PalMemSetZeroPlat>
   290bc:	00030f4c 	.word	0x00030f4c

000290c0 <cc_mbedtls_sha256_free>:
   290c0:	b110      	cbz	r0, 290c8 <cc_mbedtls_sha256_free+0x8>
   290c2:	21f4      	movs	r1, #244	; 0xf4
   290c4:	f7fe be12 	b.w	27cec <mbedtls_zeroize_internal>
   290c8:	4770      	bx	lr
   290ca:	bf00      	nop

000290cc <cc_mbedtls_sha256_starts>:
   290cc:	b508      	push	{r3, lr}
   290ce:	b121      	cbz	r1, 290da <cc_mbedtls_sha256_starts+0xe>
   290d0:	2901      	cmp	r1, #1
   290d2:	d008      	beq.n	290e6 <cc_mbedtls_sha256_starts+0x1a>
   290d4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   290d8:	bd08      	pop	{r3, pc}
   290da:	2101      	movs	r1, #1
   290dc:	f000 f858 	bl	29190 <mbedtls_sha_starts_internal>
   290e0:	2800      	cmp	r0, #0
   290e2:	d1f7      	bne.n	290d4 <cc_mbedtls_sha256_starts+0x8>
   290e4:	bd08      	pop	{r3, pc}
   290e6:	2102      	movs	r1, #2
   290e8:	f000 f852 	bl	29190 <mbedtls_sha_starts_internal>
   290ec:	2800      	cmp	r0, #0
   290ee:	d0f9      	beq.n	290e4 <cc_mbedtls_sha256_starts+0x18>
   290f0:	e7f0      	b.n	290d4 <cc_mbedtls_sha256_starts+0x8>
   290f2:	bf00      	nop

000290f4 <cc_mbedtls_sha256_update>:
   290f4:	b530      	push	{r4, r5, lr}
   290f6:	4605      	mov	r5, r0
   290f8:	1888      	adds	r0, r1, r2
   290fa:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   290fe:	b0a1      	sub	sp, #132	; 0x84
   29100:	460b      	mov	r3, r1
   29102:	4614      	mov	r4, r2
   29104:	d801      	bhi.n	2910a <cc_mbedtls_sha256_update+0x16>
   29106:	2a80      	cmp	r2, #128	; 0x80
   29108:	d90c      	bls.n	29124 <cc_mbedtls_sha256_update+0x30>
   2910a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2910e:	d917      	bls.n	29140 <cc_mbedtls_sha256_update+0x4c>
   29110:	4622      	mov	r2, r4
   29112:	4619      	mov	r1, r3
   29114:	4628      	mov	r0, r5
   29116:	f000 f87d 	bl	29214 <mbedtls_sha_update_internal>
   2911a:	4604      	mov	r4, r0
   2911c:	b984      	cbnz	r4, 29140 <cc_mbedtls_sha256_update+0x4c>
   2911e:	4620      	mov	r0, r4
   29120:	b021      	add	sp, #132	; 0x84
   29122:	bd30      	pop	{r4, r5, pc}
   29124:	4668      	mov	r0, sp
   29126:	f7ff fbb9 	bl	2889c <CC_PalMemCopyPlat>
   2912a:	4622      	mov	r2, r4
   2912c:	4669      	mov	r1, sp
   2912e:	4628      	mov	r0, r5
   29130:	f000 f870 	bl	29214 <mbedtls_sha_update_internal>
   29134:	2180      	movs	r1, #128	; 0x80
   29136:	4604      	mov	r4, r0
   29138:	4668      	mov	r0, sp
   2913a:	f7ff fbb3 	bl	288a4 <CC_PalMemSetZeroPlat>
   2913e:	e7ed      	b.n	2911c <cc_mbedtls_sha256_update+0x28>
   29140:	f06f 0436 	mvn.w	r4, #54	; 0x36
   29144:	e7eb      	b.n	2911e <cc_mbedtls_sha256_update+0x2a>
   29146:	bf00      	nop

00029148 <cc_mbedtls_sha256_finish>:
   29148:	b570      	push	{r4, r5, r6, lr}
   2914a:	b1e8      	cbz	r0, 29188 <cc_mbedtls_sha256_finish+0x40>
   2914c:	460e      	mov	r6, r1
   2914e:	b1d9      	cbz	r1, 29188 <cc_mbedtls_sha256_finish+0x40>
   29150:	4604      	mov	r4, r0
   29152:	f000 f831 	bl	291b8 <mbedtls_sha_finish_internal>
   29156:	4605      	mov	r5, r0
   29158:	b9b0      	cbnz	r0, 29188 <cc_mbedtls_sha256_finish+0x40>
   2915a:	6823      	ldr	r3, [r4, #0]
   2915c:	2b01      	cmp	r3, #1
   2915e:	d00b      	beq.n	29178 <cc_mbedtls_sha256_finish+0x30>
   29160:	2b02      	cmp	r3, #2
   29162:	d001      	beq.n	29168 <cc_mbedtls_sha256_finish+0x20>
   29164:	4628      	mov	r0, r5
   29166:	bd70      	pop	{r4, r5, r6, pc}
   29168:	221c      	movs	r2, #28
   2916a:	f104 0108 	add.w	r1, r4, #8
   2916e:	4630      	mov	r0, r6
   29170:	f7ff fb94 	bl	2889c <CC_PalMemCopyPlat>
   29174:	4628      	mov	r0, r5
   29176:	bd70      	pop	{r4, r5, r6, pc}
   29178:	2220      	movs	r2, #32
   2917a:	f104 0108 	add.w	r1, r4, #8
   2917e:	4630      	mov	r0, r6
   29180:	f7ff fb8c 	bl	2889c <CC_PalMemCopyPlat>
   29184:	4628      	mov	r0, r5
   29186:	bd70      	pop	{r4, r5, r6, pc}
   29188:	f06f 0536 	mvn.w	r5, #54	; 0x36
   2918c:	e7ea      	b.n	29164 <cc_mbedtls_sha256_finish+0x1c>
   2918e:	bf00      	nop

00029190 <mbedtls_sha_starts_internal>:
   29190:	b178      	cbz	r0, 291b2 <mbedtls_sha_starts_internal+0x22>
   29192:	b538      	push	{r3, r4, r5, lr}
   29194:	4604      	mov	r4, r0
   29196:	460d      	mov	r5, r1
   29198:	21f0      	movs	r1, #240	; 0xf0
   2919a:	f7ff fb83 	bl	288a4 <CC_PalMemSetZeroPlat>
   2919e:	2340      	movs	r3, #64	; 0x40
   291a0:	6025      	str	r5, [r4, #0]
   291a2:	65e3      	str	r3, [r4, #92]	; 0x5c
   291a4:	4620      	mov	r0, r4
   291a6:	f000 fa5b 	bl	29660 <InitHashDrv>
   291aa:	3800      	subs	r0, #0
   291ac:	bf18      	it	ne
   291ae:	2001      	movne	r0, #1
   291b0:	bd38      	pop	{r3, r4, r5, pc}
   291b2:	2001      	movs	r0, #1
   291b4:	4770      	bx	lr
   291b6:	bf00      	nop

000291b8 <mbedtls_sha_finish_internal>:
   291b8:	b570      	push	{r4, r5, r6, lr}
   291ba:	6e05      	ldr	r5, [r0, #96]	; 0x60
   291bc:	b0a4      	sub	sp, #144	; 0x90
   291be:	4604      	mov	r4, r0
   291c0:	ae04      	add	r6, sp, #16
   291c2:	b9e5      	cbnz	r5, 291fe <mbedtls_sha_finish_internal+0x46>
   291c4:	2201      	movs	r2, #1
   291c6:	2300      	movs	r3, #0
   291c8:	6062      	str	r2, [r4, #4]
   291ca:	4630      	mov	r0, r6
   291cc:	e9cd 3300 	strd	r3, r3, [sp]
   291d0:	aa02      	add	r2, sp, #8
   291d2:	4629      	mov	r1, r5
   291d4:	f000 fa10 	bl	295f8 <SetDataBuffersInfo>
   291d8:	b110      	cbz	r0, 291e0 <mbedtls_sha_finish_internal+0x28>
   291da:	2001      	movs	r0, #1
   291dc:	b024      	add	sp, #144	; 0x90
   291de:	bd70      	pop	{r4, r5, r6, pc}
   291e0:	462a      	mov	r2, r5
   291e2:	a902      	add	r1, sp, #8
   291e4:	4620      	mov	r0, r4
   291e6:	f000 fa63 	bl	296b0 <ProcessHashDrv>
   291ea:	2800      	cmp	r0, #0
   291ec:	d1f5      	bne.n	291da <mbedtls_sha_finish_internal+0x22>
   291ee:	4620      	mov	r0, r4
   291f0:	f000 fb74 	bl	298dc <FinishHashDrv>
   291f4:	2800      	cmp	r0, #0
   291f6:	d1f0      	bne.n	291da <mbedtls_sha_finish_internal+0x22>
   291f8:	6620      	str	r0, [r4, #96]	; 0x60
   291fa:	b024      	add	sp, #144	; 0x90
   291fc:	bd70      	pop	{r4, r5, r6, pc}
   291fe:	2d80      	cmp	r5, #128	; 0x80
   29200:	462a      	mov	r2, r5
   29202:	f100 0164 	add.w	r1, r0, #100	; 0x64
   29206:	bf28      	it	cs
   29208:	2280      	movcs	r2, #128	; 0x80
   2920a:	4630      	mov	r0, r6
   2920c:	f7ff fb46 	bl	2889c <CC_PalMemCopyPlat>
   29210:	6e25      	ldr	r5, [r4, #96]	; 0x60
   29212:	e7d7      	b.n	291c4 <mbedtls_sha_finish_internal+0xc>

00029214 <mbedtls_sha_update_internal>:
   29214:	2800      	cmp	r0, #0
   29216:	f000 80ae 	beq.w	29376 <mbedtls_sha_update_internal+0x162>
   2921a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2921e:	4614      	mov	r4, r2
   29220:	b0a5      	sub	sp, #148	; 0x94
   29222:	2a00      	cmp	r2, #0
   29224:	d03d      	beq.n	292a2 <mbedtls_sha_update_internal+0x8e>
   29226:	460f      	mov	r7, r1
   29228:	2900      	cmp	r1, #0
   2922a:	d049      	beq.n	292c0 <mbedtls_sha_update_internal+0xac>
   2922c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   29230:	4605      	mov	r5, r0
   29232:	6e00      	ldr	r0, [r0, #96]	; 0x60
   29234:	d320      	bcc.n	29278 <mbedtls_sha_update_internal+0x64>
   29236:	f64f 78ff 	movw	r8, #65535	; 0xffff
   2923a:	f105 0a64 	add.w	sl, r5, #100	; 0x64
   2923e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29240:	1a1a      	subs	r2, r3, r0
   29242:	fbb2 f1f3 	udiv	r1, r2, r3
   29246:	fb03 2211 	mls	r2, r3, r1, r2
   2924a:	2a00      	cmp	r2, #0
   2924c:	d165      	bne.n	2931a <mbedtls_sha_update_internal+0x106>
   2924e:	4283      	cmp	r3, r0
   29250:	46b9      	mov	r9, r7
   29252:	f64f 76ff 	movw	r6, #65535	; 0xffff
   29256:	d072      	beq.n	2933e <mbedtls_sha_update_internal+0x12a>
   29258:	fbb6 fbf3 	udiv	fp, r6, r3
   2925c:	fb03 fb0b 	mul.w	fp, r3, fp
   29260:	f1bb 0f00 	cmp.w	fp, #0
   29264:	d130      	bne.n	292c8 <mbedtls_sha_update_internal+0xb4>
   29266:	2e00      	cmp	r6, #0
   29268:	d145      	bne.n	292f6 <mbedtls_sha_update_internal+0xe2>
   2926a:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   2926e:	3cff      	subs	r4, #255	; 0xff
   29270:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   29274:	4447      	add	r7, r8
   29276:	d2e2      	bcs.n	2923e <mbedtls_sha_update_internal+0x2a>
   29278:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   2927a:	1a16      	subs	r6, r2, r0
   2927c:	fbb6 f3f2 	udiv	r3, r6, r2
   29280:	fb02 6613 	mls	r6, r2, r3, r6
   29284:	42a6      	cmp	r6, r4
   29286:	bf28      	it	cs
   29288:	4626      	movcs	r6, r4
   2928a:	2e00      	cmp	r6, #0
   2928c:	d175      	bne.n	2937a <mbedtls_sha_update_internal+0x166>
   2928e:	4282      	cmp	r2, r0
   29290:	f000 808d 	beq.w	293ae <mbedtls_sha_update_internal+0x19a>
   29294:	fbb4 f6f2 	udiv	r6, r4, r2
   29298:	fb02 f606 	mul.w	r6, r2, r6
   2929c:	b92e      	cbnz	r6, 292aa <mbedtls_sha_update_internal+0x96>
   2929e:	2c00      	cmp	r4, #0
   292a0:	d179      	bne.n	29396 <mbedtls_sha_update_internal+0x182>
   292a2:	2000      	movs	r0, #0
   292a4:	b025      	add	sp, #148	; 0x94
   292a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   292aa:	2300      	movs	r3, #0
   292ac:	e9cd 3300 	strd	r3, r3, [sp]
   292b0:	aa02      	add	r2, sp, #8
   292b2:	4631      	mov	r1, r6
   292b4:	4638      	mov	r0, r7
   292b6:	f000 f99f 	bl	295f8 <SetDataBuffersInfo>
   292ba:	2800      	cmp	r0, #0
   292bc:	f000 8095 	beq.w	293ea <mbedtls_sha_update_internal+0x1d6>
   292c0:	2001      	movs	r0, #1
   292c2:	b025      	add	sp, #148	; 0x94
   292c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   292c8:	2300      	movs	r3, #0
   292ca:	e9cd 3300 	strd	r3, r3, [sp]
   292ce:	aa02      	add	r2, sp, #8
   292d0:	4659      	mov	r1, fp
   292d2:	4648      	mov	r0, r9
   292d4:	f000 f990 	bl	295f8 <SetDataBuffersInfo>
   292d8:	2800      	cmp	r0, #0
   292da:	d1f1      	bne.n	292c0 <mbedtls_sha_update_internal+0xac>
   292dc:	a902      	add	r1, sp, #8
   292de:	465a      	mov	r2, fp
   292e0:	4628      	mov	r0, r5
   292e2:	f000 f9e5 	bl	296b0 <ProcessHashDrv>
   292e6:	2800      	cmp	r0, #0
   292e8:	d1ea      	bne.n	292c0 <mbedtls_sha_update_internal+0xac>
   292ea:	eba6 060b 	sub.w	r6, r6, fp
   292ee:	6e28      	ldr	r0, [r5, #96]	; 0x60
   292f0:	44d9      	add	r9, fp
   292f2:	2e00      	cmp	r6, #0
   292f4:	d0b9      	beq.n	2926a <mbedtls_sha_update_internal+0x56>
   292f6:	3019      	adds	r0, #25
   292f8:	4649      	mov	r1, r9
   292fa:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   292fe:	4632      	mov	r2, r6
   29300:	f7ff facc 	bl	2889c <CC_PalMemCopyPlat>
   29304:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   29308:	6e28      	ldr	r0, [r5, #96]	; 0x60
   2930a:	3cff      	subs	r4, #255	; 0xff
   2930c:	4430      	add	r0, r6
   2930e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   29312:	4447      	add	r7, r8
   29314:	6628      	str	r0, [r5, #96]	; 0x60
   29316:	d292      	bcs.n	2923e <mbedtls_sha_update_internal+0x2a>
   29318:	e7ae      	b.n	29278 <mbedtls_sha_update_internal+0x64>
   2931a:	4542      	cmp	r2, r8
   2931c:	bf28      	it	cs
   2931e:	4642      	movcs	r2, r8
   29320:	4450      	add	r0, sl
   29322:	4639      	mov	r1, r7
   29324:	4616      	mov	r6, r2
   29326:	f7ff fab9 	bl	2889c <CC_PalMemCopyPlat>
   2932a:	6e28      	ldr	r0, [r5, #96]	; 0x60
   2932c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2932e:	4430      	add	r0, r6
   29330:	4283      	cmp	r3, r0
   29332:	eb07 0906 	add.w	r9, r7, r6
   29336:	6628      	str	r0, [r5, #96]	; 0x60
   29338:	eba8 0606 	sub.w	r6, r8, r6
   2933c:	d18c      	bne.n	29258 <mbedtls_sha_update_internal+0x44>
   2933e:	2b80      	cmp	r3, #128	; 0x80
   29340:	bf28      	it	cs
   29342:	2380      	movcs	r3, #128	; 0x80
   29344:	461a      	mov	r2, r3
   29346:	4651      	mov	r1, sl
   29348:	a804      	add	r0, sp, #16
   2934a:	f7ff faa7 	bl	2889c <CC_PalMemCopyPlat>
   2934e:	2300      	movs	r3, #0
   29350:	e9cd 3300 	strd	r3, r3, [sp]
   29354:	aa02      	add	r2, sp, #8
   29356:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   29358:	a804      	add	r0, sp, #16
   2935a:	f000 f94d 	bl	295f8 <SetDataBuffersInfo>
   2935e:	2800      	cmp	r0, #0
   29360:	d1ae      	bne.n	292c0 <mbedtls_sha_update_internal+0xac>
   29362:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   29364:	a902      	add	r1, sp, #8
   29366:	4628      	mov	r0, r5
   29368:	f000 f9a2 	bl	296b0 <ProcessHashDrv>
   2936c:	2800      	cmp	r0, #0
   2936e:	d1a7      	bne.n	292c0 <mbedtls_sha_update_internal+0xac>
   29370:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29372:	6628      	str	r0, [r5, #96]	; 0x60
   29374:	e770      	b.n	29258 <mbedtls_sha_update_internal+0x44>
   29376:	2001      	movs	r0, #1
   29378:	4770      	bx	lr
   2937a:	f105 0364 	add.w	r3, r5, #100	; 0x64
   2937e:	4639      	mov	r1, r7
   29380:	4632      	mov	r2, r6
   29382:	4418      	add	r0, r3
   29384:	f7ff fa8a 	bl	2889c <CC_PalMemCopyPlat>
   29388:	6e28      	ldr	r0, [r5, #96]	; 0x60
   2938a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   2938c:	4430      	add	r0, r6
   2938e:	1ba4      	subs	r4, r4, r6
   29390:	4437      	add	r7, r6
   29392:	6628      	str	r0, [r5, #96]	; 0x60
   29394:	e77b      	b.n	2928e <mbedtls_sha_update_internal+0x7a>
   29396:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   29398:	3319      	adds	r3, #25
   2939a:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   2939e:	4622      	mov	r2, r4
   293a0:	4639      	mov	r1, r7
   293a2:	f7ff fa7b 	bl	2889c <CC_PalMemCopyPlat>
   293a6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   293a8:	4423      	add	r3, r4
   293aa:	662b      	str	r3, [r5, #96]	; 0x60
   293ac:	e779      	b.n	292a2 <mbedtls_sha_update_internal+0x8e>
   293ae:	2a80      	cmp	r2, #128	; 0x80
   293b0:	bf28      	it	cs
   293b2:	2280      	movcs	r2, #128	; 0x80
   293b4:	f105 0164 	add.w	r1, r5, #100	; 0x64
   293b8:	a804      	add	r0, sp, #16
   293ba:	f7ff fa6f 	bl	2889c <CC_PalMemCopyPlat>
   293be:	2300      	movs	r3, #0
   293c0:	e9cd 3300 	strd	r3, r3, [sp]
   293c4:	a804      	add	r0, sp, #16
   293c6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   293c8:	aa02      	add	r2, sp, #8
   293ca:	f000 f915 	bl	295f8 <SetDataBuffersInfo>
   293ce:	2800      	cmp	r0, #0
   293d0:	f47f af76 	bne.w	292c0 <mbedtls_sha_update_internal+0xac>
   293d4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   293d6:	a902      	add	r1, sp, #8
   293d8:	4628      	mov	r0, r5
   293da:	f000 f969 	bl	296b0 <ProcessHashDrv>
   293de:	2800      	cmp	r0, #0
   293e0:	f47f af6e 	bne.w	292c0 <mbedtls_sha_update_internal+0xac>
   293e4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   293e6:	6628      	str	r0, [r5, #96]	; 0x60
   293e8:	e754      	b.n	29294 <mbedtls_sha_update_internal+0x80>
   293ea:	a902      	add	r1, sp, #8
   293ec:	4632      	mov	r2, r6
   293ee:	4628      	mov	r0, r5
   293f0:	f000 f95e 	bl	296b0 <ProcessHashDrv>
   293f4:	2800      	cmp	r0, #0
   293f6:	f47f af63 	bne.w	292c0 <mbedtls_sha_update_internal+0xac>
   293fa:	4437      	add	r7, r6
   293fc:	1ba4      	subs	r4, r4, r6
   293fe:	e74e      	b.n	2929e <mbedtls_sha_update_internal+0x8a>

00029400 <cc_mbedtls_sha256>:
   29400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29402:	461c      	mov	r4, r3
   29404:	4605      	mov	r5, r0
   29406:	4811      	ldr	r0, [pc, #68]	; (2944c <cc_mbedtls_sha256+0x4c>)
   29408:	460e      	mov	r6, r1
   2940a:	4617      	mov	r7, r2
   2940c:	f7ff fe44 	bl	29098 <cc_mbedtls_sha256_init>
   29410:	4621      	mov	r1, r4
   29412:	480e      	ldr	r0, [pc, #56]	; (2944c <cc_mbedtls_sha256+0x4c>)
   29414:	f7ff fe5a 	bl	290cc <cc_mbedtls_sha256_starts>
   29418:	4604      	mov	r4, r0
   2941a:	b120      	cbz	r0, 29426 <cc_mbedtls_sha256+0x26>
   2941c:	480b      	ldr	r0, [pc, #44]	; (2944c <cc_mbedtls_sha256+0x4c>)
   2941e:	f7ff fe4f 	bl	290c0 <cc_mbedtls_sha256_free>
   29422:	4620      	mov	r0, r4
   29424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29426:	4809      	ldr	r0, [pc, #36]	; (2944c <cc_mbedtls_sha256+0x4c>)
   29428:	4632      	mov	r2, r6
   2942a:	4629      	mov	r1, r5
   2942c:	f7ff fe62 	bl	290f4 <cc_mbedtls_sha256_update>
   29430:	4604      	mov	r4, r0
   29432:	2800      	cmp	r0, #0
   29434:	d1f2      	bne.n	2941c <cc_mbedtls_sha256+0x1c>
   29436:	4639      	mov	r1, r7
   29438:	4804      	ldr	r0, [pc, #16]	; (2944c <cc_mbedtls_sha256+0x4c>)
   2943a:	f7ff fe85 	bl	29148 <cc_mbedtls_sha256_finish>
   2943e:	4604      	mov	r4, r0
   29440:	4802      	ldr	r0, [pc, #8]	; (2944c <cc_mbedtls_sha256+0x4c>)
   29442:	f7ff fe3d 	bl	290c0 <cc_mbedtls_sha256_free>
   29446:	4620      	mov	r0, r4
   29448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2944a:	bf00      	nop
   2944c:	200054a0 	.word	0x200054a0

00029450 <RNG_PLAT_SetUserRngParameters>:
   29450:	b530      	push	{r4, r5, lr}
   29452:	b083      	sub	sp, #12
   29454:	231c      	movs	r3, #28
   29456:	a901      	add	r1, sp, #4
   29458:	4605      	mov	r5, r0
   2945a:	9301      	str	r3, [sp, #4]
   2945c:	f000 f832 	bl	294c4 <CC_PalTrngParamGet>
   29460:	4604      	mov	r4, r0
   29462:	b938      	cbnz	r0, 29474 <RNG_PLAT_SetUserRngParameters+0x24>
   29464:	9b01      	ldr	r3, [sp, #4]
   29466:	2b1c      	cmp	r3, #28
   29468:	d007      	beq.n	2947a <RNG_PLAT_SetUserRngParameters+0x2a>
   2946a:	4c14      	ldr	r4, [pc, #80]	; (294bc <RNG_PLAT_SetUserRngParameters+0x6c>)
   2946c:	211c      	movs	r1, #28
   2946e:	4628      	mov	r0, r5
   29470:	f7ff fa18 	bl	288a4 <CC_PalMemSetZeroPlat>
   29474:	4620      	mov	r0, r4
   29476:	b003      	add	sp, #12
   29478:	bd30      	pop	{r4, r5, pc}
   2947a:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   2947e:	1e13      	subs	r3, r2, #0
   29480:	bf18      	it	ne
   29482:	2301      	movne	r3, #1
   29484:	3900      	subs	r1, #0
   29486:	682a      	ldr	r2, [r5, #0]
   29488:	bf18      	it	ne
   2948a:	2101      	movne	r1, #1
   2948c:	009b      	lsls	r3, r3, #2
   2948e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   29492:	2a00      	cmp	r2, #0
   29494:	bf18      	it	ne
   29496:	f043 0301 	orrne.w	r3, r3, #1
   2949a:	68ea      	ldr	r2, [r5, #12]
   2949c:	2001      	movs	r0, #1
   2949e:	61e8      	str	r0, [r5, #28]
   294a0:	b92a      	cbnz	r2, 294ae <RNG_PLAT_SetUserRngParameters+0x5e>
   294a2:	e9c5 3408 	strd	r3, r4, [r5, #32]
   294a6:	2b00      	cmp	r3, #0
   294a8:	d1e4      	bne.n	29474 <RNG_PLAT_SetUserRngParameters+0x24>
   294aa:	4c05      	ldr	r4, [pc, #20]	; (294c0 <RNG_PLAT_SetUserRngParameters+0x70>)
   294ac:	e7de      	b.n	2946c <RNG_PLAT_SetUserRngParameters+0x1c>
   294ae:	f043 0308 	orr.w	r3, r3, #8
   294b2:	4620      	mov	r0, r4
   294b4:	e9c5 3408 	strd	r3, r4, [r5, #32]
   294b8:	b003      	add	sp, #12
   294ba:	bd30      	pop	{r4, r5, pc}
   294bc:	00f00c37 	.word	0x00f00c37
   294c0:	00f00c0e 	.word	0x00f00c0e

000294c4 <CC_PalTrngParamGet>:
   294c4:	b118      	cbz	r0, 294ce <CC_PalTrngParamGet+0xa>
   294c6:	b111      	cbz	r1, 294ce <CC_PalTrngParamGet+0xa>
   294c8:	680b      	ldr	r3, [r1, #0]
   294ca:	2b1c      	cmp	r3, #28
   294cc:	d001      	beq.n	294d2 <CC_PalTrngParamGet+0xe>
   294ce:	2001      	movs	r0, #1
   294d0:	4770      	bx	lr
   294d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   294d6:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   294da:	3201      	adds	r2, #1
   294dc:	bf14      	ite	ne
   294de:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   294e2:	f241 225c 	movweq	r2, #4700	; 0x125c
   294e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   294ea:	6002      	str	r2, [r0, #0]
   294ec:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   294f0:	3201      	adds	r2, #1
   294f2:	bf14      	ite	ne
   294f4:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   294f8:	f641 1264 	movweq	r2, #6500	; 0x1964
   294fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29500:	6042      	str	r2, [r0, #4]
   29502:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   29506:	3201      	adds	r2, #1
   29508:	bf14      	ite	ne
   2950a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   2950e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   29512:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29516:	6082      	str	r2, [r0, #8]
   29518:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   2951c:	3201      	adds	r2, #1
   2951e:	bf14      	ite	ne
   29520:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   29524:	f241 3288 	movweq	r2, #5000	; 0x1388
   29528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2952c:	60c2      	str	r2, [r0, #12]
   2952e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   29532:	3201      	adds	r2, #1
   29534:	bf14      	ite	ne
   29536:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   2953a:	2290      	moveq	r2, #144	; 0x90
   2953c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29540:	6102      	str	r2, [r0, #16]
   29542:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   29546:	3201      	adds	r2, #1
   29548:	bf14      	ite	ne
   2954a:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   2954e:	2251      	moveq	r2, #81	; 0x51
   29550:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29554:	6142      	str	r2, [r0, #20]
   29556:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   2955a:	3201      	adds	r2, #1
   2955c:	bf14      	ite	ne
   2955e:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   29562:	f240 3337 	movweq	r3, #823	; 0x337
   29566:	6183      	str	r3, [r0, #24]
   29568:	2000      	movs	r0, #0
   2956a:	4770      	bx	lr

0002956c <LLF_RND_WaitRngInterrupt>:
   2956c:	b508      	push	{r3, lr}
   2956e:	4601      	mov	r1, r0
   29570:	f44f 6080 	mov.w	r0, #1024	; 0x400
   29574:	f7ff f91e 	bl	287b4 <CC_HalWaitInterruptRND>
   29578:	4b03      	ldr	r3, [pc, #12]	; (29588 <LLF_RND_WaitRngInterrupt+0x1c>)
   2957a:	2200      	movs	r2, #0
   2957c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   29580:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   29584:	bd08      	pop	{r3, pc}
   29586:	bf00      	nop
   29588:	5002b000 	.word	0x5002b000

0002958c <LLF_RND_GetRoscSampleCnt>:
   2958c:	3801      	subs	r0, #1
   2958e:	2807      	cmp	r0, #7
   29590:	d805      	bhi.n	2959e <LLF_RND_GetRoscSampleCnt+0x12>
   29592:	e8df f000 	tbb	[pc, r0]
   29596:	0e10      	.short	0x0e10
   29598:	04040a04 	.word	0x04040a04
   2959c:	0604      	.short	0x0604
   2959e:	4807      	ldr	r0, [pc, #28]	; (295bc <LLF_RND_GetRoscSampleCnt+0x30>)
   295a0:	4770      	bx	lr
   295a2:	68cb      	ldr	r3, [r1, #12]
   295a4:	624b      	str	r3, [r1, #36]	; 0x24
   295a6:	2000      	movs	r0, #0
   295a8:	4770      	bx	lr
   295aa:	688b      	ldr	r3, [r1, #8]
   295ac:	624b      	str	r3, [r1, #36]	; 0x24
   295ae:	2000      	movs	r0, #0
   295b0:	4770      	bx	lr
   295b2:	684b      	ldr	r3, [r1, #4]
   295b4:	e7f6      	b.n	295a4 <LLF_RND_GetRoscSampleCnt+0x18>
   295b6:	680b      	ldr	r3, [r1, #0]
   295b8:	e7f4      	b.n	295a4 <LLF_RND_GetRoscSampleCnt+0x18>
   295ba:	bf00      	nop
   295bc:	00f10c31 	.word	0x00f10c31

000295c0 <LLF_RND_GetFastestRosc>:
   295c0:	680b      	ldr	r3, [r1, #0]
   295c2:	e002      	b.n	295ca <LLF_RND_GetFastestRosc+0xa>
   295c4:	2b08      	cmp	r3, #8
   295c6:	600b      	str	r3, [r1, #0]
   295c8:	d806      	bhi.n	295d8 <LLF_RND_GetFastestRosc+0x18>
   295ca:	6a02      	ldr	r2, [r0, #32]
   295cc:	4213      	tst	r3, r2
   295ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
   295d2:	d0f7      	beq.n	295c4 <LLF_RND_GetFastestRosc+0x4>
   295d4:	2000      	movs	r0, #0
   295d6:	4770      	bx	lr
   295d8:	4800      	ldr	r0, [pc, #0]	; (295dc <LLF_RND_GetFastestRosc+0x1c>)
   295da:	4770      	bx	lr
   295dc:	00f10c31 	.word	0x00f10c31

000295e0 <LLF_RND_TurnOffTrng>:
   295e0:	4b04      	ldr	r3, [pc, #16]	; (295f4 <LLF_RND_TurnOffTrng+0x14>)
   295e2:	2200      	movs	r2, #0
   295e4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   295e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   295ec:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   295f0:	f7ff b8c6 	b.w	28780 <CC_HalClearInterruptBit>
   295f4:	5002b000 	.word	0x5002b000

000295f8 <SetDataBuffersInfo>:
   295f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   295fa:	b083      	sub	sp, #12
   295fc:	461d      	mov	r5, r3
   295fe:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   29602:	f04f 0300 	mov.w	r3, #0
   29606:	f88d 3007 	strb.w	r3, [sp, #7]
   2960a:	d324      	bcc.n	29656 <SetDataBuffersInfo+0x5e>
   2960c:	468c      	mov	ip, r1
   2960e:	4484      	add	ip, r0
   29610:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   29614:	4604      	mov	r4, r0
   29616:	d81e      	bhi.n	29656 <SetDataBuffersInfo+0x5e>
   29618:	4617      	mov	r7, r2
   2961a:	f10d 0307 	add.w	r3, sp, #7
   2961e:	2201      	movs	r2, #1
   29620:	f000 fe64 	bl	2a2ec <CC_PalDataBufferAttrGet>
   29624:	4606      	mov	r6, r0
   29626:	b9b0      	cbnz	r0, 29656 <SetDataBuffersInfo+0x5e>
   29628:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2962a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2962e:	603c      	str	r4, [r7, #0]
   29630:	713b      	strb	r3, [r7, #4]
   29632:	b192      	cbz	r2, 2965a <SetDataBuffersInfo+0x62>
   29634:	b14d      	cbz	r5, 2964a <SetDataBuffersInfo+0x52>
   29636:	4602      	mov	r2, r0
   29638:	9908      	ldr	r1, [sp, #32]
   2963a:	f10d 0307 	add.w	r3, sp, #7
   2963e:	4628      	mov	r0, r5
   29640:	f000 fe54 	bl	2a2ec <CC_PalDataBufferAttrGet>
   29644:	b938      	cbnz	r0, 29656 <SetDataBuffersInfo+0x5e>
   29646:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2964a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2964c:	4630      	mov	r0, r6
   2964e:	6015      	str	r5, [r2, #0]
   29650:	7113      	strb	r3, [r2, #4]
   29652:	b003      	add	sp, #12
   29654:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29656:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   2965a:	4630      	mov	r0, r6
   2965c:	b003      	add	sp, #12
   2965e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029660 <InitHashDrv>:
   29660:	b1d8      	cbz	r0, 2969a <InitHashDrv+0x3a>
   29662:	b508      	push	{r3, lr}
   29664:	6803      	ldr	r3, [r0, #0]
   29666:	2b01      	cmp	r3, #1
   29668:	d004      	beq.n	29674 <InitHashDrv+0x14>
   2966a:	2b02      	cmp	r3, #2
   2966c:	d00f      	beq.n	2968e <InitHashDrv+0x2e>
   2966e:	b143      	cbz	r3, 29682 <InitHashDrv+0x22>
   29670:	480b      	ldr	r0, [pc, #44]	; (296a0 <InitHashDrv+0x40>)
   29672:	bd08      	pop	{r3, pc}
   29674:	490b      	ldr	r1, [pc, #44]	; (296a4 <InitHashDrv+0x44>)
   29676:	2220      	movs	r2, #32
   29678:	3008      	adds	r0, #8
   2967a:	f7ff f90f 	bl	2889c <CC_PalMemCopyPlat>
   2967e:	2000      	movs	r0, #0
   29680:	bd08      	pop	{r3, pc}
   29682:	4909      	ldr	r1, [pc, #36]	; (296a8 <InitHashDrv+0x48>)
   29684:	2214      	movs	r2, #20
   29686:	3008      	adds	r0, #8
   29688:	f7ff f908 	bl	2889c <CC_PalMemCopyPlat>
   2968c:	e7f7      	b.n	2967e <InitHashDrv+0x1e>
   2968e:	4907      	ldr	r1, [pc, #28]	; (296ac <InitHashDrv+0x4c>)
   29690:	2220      	movs	r2, #32
   29692:	3008      	adds	r0, #8
   29694:	f7ff f902 	bl	2889c <CC_PalMemCopyPlat>
   29698:	e7f1      	b.n	2967e <InitHashDrv+0x1e>
   2969a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2969e:	4770      	bx	lr
   296a0:	00f30001 	.word	0x00f30001
   296a4:	00030f5c 	.word	0x00030f5c
   296a8:	00030f9c 	.word	0x00030f9c
   296ac:	00030f7c 	.word	0x00030f7c

000296b0 <ProcessHashDrv>:
   296b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   296b4:	2900      	cmp	r1, #0
   296b6:	f000 80f9 	beq.w	298ac <ProcessHashDrv+0x1fc>
   296ba:	4604      	mov	r4, r0
   296bc:	2800      	cmp	r0, #0
   296be:	f000 80f9 	beq.w	298b4 <ProcessHashDrv+0x204>
   296c2:	6803      	ldr	r3, [r0, #0]
   296c4:	4690      	mov	r8, r2
   296c6:	460f      	mov	r7, r1
   296c8:	2b00      	cmp	r3, #0
   296ca:	f000 80c3 	beq.w	29854 <ProcessHashDrv+0x1a4>
   296ce:	3b01      	subs	r3, #1
   296d0:	2b01      	cmp	r3, #1
   296d2:	f200 80d7 	bhi.w	29884 <ProcessHashDrv+0x1d4>
   296d6:	4879      	ldr	r0, [pc, #484]	; (298bc <ProcessHashDrv+0x20c>)
   296d8:	f04f 31ff 	mov.w	r1, #4294967295
   296dc:	f04f 0902 	mov.w	r9, #2
   296e0:	f7ff f8f8 	bl	288d4 <CC_PalMutexLock>
   296e4:	2800      	cmp	r0, #0
   296e6:	f040 80bf 	bne.w	29868 <ProcessHashDrv+0x1b8>
   296ea:	2000      	movs	r0, #0
   296ec:	f7ff f922 	bl	28934 <CC_PalPowerSaveModeSelect>
   296f0:	4606      	mov	r6, r0
   296f2:	2800      	cmp	r0, #0
   296f4:	f040 80c2 	bne.w	2987c <ProcessHashDrv+0x1cc>
   296f8:	4a71      	ldr	r2, [pc, #452]	; (298c0 <ProcessHashDrv+0x210>)
   296fa:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   296fe:	2b00      	cmp	r3, #0
   29700:	d1fb      	bne.n	296fa <ProcessHashDrv+0x4a>
   29702:	4d6f      	ldr	r5, [pc, #444]	; (298c0 <ProcessHashDrv+0x210>)
   29704:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   29708:	2b00      	cmp	r3, #0
   2970a:	d1fb      	bne.n	29704 <ProcessHashDrv+0x54>
   2970c:	f04f 30ff 	mov.w	r0, #4294967295
   29710:	f7ff f836 	bl	28780 <CC_HalClearInterruptBit>
   29714:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   29718:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   2971c:	f7ff f83e 	bl	2879c <CC_HalMaskInterrupt>
   29720:	2301      	movs	r3, #1
   29722:	2207      	movs	r2, #7
   29724:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   29728:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   2972c:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   29730:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   29732:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   29736:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   29738:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   2973c:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   29740:	6823      	ldr	r3, [r4, #0]
   29742:	b15b      	cbz	r3, 2975c <ProcessHashDrv+0xac>
   29744:	3b01      	subs	r3, #1
   29746:	2b01      	cmp	r3, #1
   29748:	d818      	bhi.n	2977c <ProcessHashDrv+0xcc>
   2974a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2974c:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   29750:	6a23      	ldr	r3, [r4, #32]
   29752:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   29756:	69e3      	ldr	r3, [r4, #28]
   29758:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   2975c:	4b58      	ldr	r3, [pc, #352]	; (298c0 <ProcessHashDrv+0x210>)
   2975e:	69a2      	ldr	r2, [r4, #24]
   29760:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   29764:	6962      	ldr	r2, [r4, #20]
   29766:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   2976a:	6922      	ldr	r2, [r4, #16]
   2976c:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   29770:	68e2      	ldr	r2, [r4, #12]
   29772:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   29776:	68a2      	ldr	r2, [r4, #8]
   29778:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   2977c:	4a50      	ldr	r2, [pc, #320]	; (298c0 <ProcessHashDrv+0x210>)
   2977e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29782:	2b00      	cmp	r3, #0
   29784:	d1fb      	bne.n	2977e <ProcessHashDrv+0xce>
   29786:	f1b8 0f00 	cmp.w	r8, #0
   2978a:	d05f      	beq.n	2984c <ProcessHashDrv+0x19c>
   2978c:	6863      	ldr	r3, [r4, #4]
   2978e:	2b01      	cmp	r3, #1
   29790:	bf08      	it	eq
   29792:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   29796:	4b4a      	ldr	r3, [pc, #296]	; (298c0 <ProcessHashDrv+0x210>)
   29798:	683a      	ldr	r2, [r7, #0]
   2979a:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   2979e:	2040      	movs	r0, #64	; 0x40
   297a0:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   297a4:	f7ff f800 	bl	287a8 <CC_HalWaitInterrupt>
   297a8:	4606      	mov	r6, r0
   297aa:	4a45      	ldr	r2, [pc, #276]	; (298c0 <ProcessHashDrv+0x210>)
   297ac:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   297b0:	2b00      	cmp	r3, #0
   297b2:	d1fb      	bne.n	297ac <ProcessHashDrv+0xfc>
   297b4:	4a42      	ldr	r2, [pc, #264]	; (298c0 <ProcessHashDrv+0x210>)
   297b6:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   297ba:	2b00      	cmp	r3, #0
   297bc:	d1fb      	bne.n	297b6 <ProcessHashDrv+0x106>
   297be:	6823      	ldr	r3, [r4, #0]
   297c0:	b15b      	cbz	r3, 297da <ProcessHashDrv+0x12a>
   297c2:	3b01      	subs	r3, #1
   297c4:	2b01      	cmp	r3, #1
   297c6:	d818      	bhi.n	297fa <ProcessHashDrv+0x14a>
   297c8:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   297cc:	6263      	str	r3, [r4, #36]	; 0x24
   297ce:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   297d2:	6223      	str	r3, [r4, #32]
   297d4:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   297d8:	61e3      	str	r3, [r4, #28]
   297da:	4b39      	ldr	r3, [pc, #228]	; (298c0 <ProcessHashDrv+0x210>)
   297dc:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   297e0:	61a2      	str	r2, [r4, #24]
   297e2:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   297e6:	6162      	str	r2, [r4, #20]
   297e8:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   297ec:	6122      	str	r2, [r4, #16]
   297ee:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   297f2:	60e2      	str	r2, [r4, #12]
   297f4:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   297f8:	60a3      	str	r3, [r4, #8]
   297fa:	4a31      	ldr	r2, [pc, #196]	; (298c0 <ProcessHashDrv+0x210>)
   297fc:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   29800:	64a1      	str	r1, [r4, #72]	; 0x48
   29802:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   29806:	64e1      	str	r1, [r4, #76]	; 0x4c
   29808:	2300      	movs	r3, #0
   2980a:	2101      	movs	r1, #1
   2980c:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   29810:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   29814:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   29818:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2981c:	2b00      	cmp	r3, #0
   2981e:	d1fb      	bne.n	29818 <ProcessHashDrv+0x168>
   29820:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   29824:	2e00      	cmp	r6, #0
   29826:	d13b      	bne.n	298a0 <ProcessHashDrv+0x1f0>
   29828:	4b25      	ldr	r3, [pc, #148]	; (298c0 <ProcessHashDrv+0x210>)
   2982a:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   2982e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   29832:	f7fe ffb3 	bl	2879c <CC_HalMaskInterrupt>
   29836:	2001      	movs	r0, #1
   29838:	f7ff f87c 	bl	28934 <CC_PalPowerSaveModeSelect>
   2983c:	bb60      	cbnz	r0, 29898 <ProcessHashDrv+0x1e8>
   2983e:	481f      	ldr	r0, [pc, #124]	; (298bc <ProcessHashDrv+0x20c>)
   29840:	f7ff f850 	bl	288e4 <CC_PalMutexUnlock>
   29844:	bb10      	cbnz	r0, 2988c <ProcessHashDrv+0x1dc>
   29846:	4630      	mov	r0, r6
   29848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2984c:	2304      	movs	r3, #4
   2984e:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   29852:	e7aa      	b.n	297aa <ProcessHashDrv+0xfa>
   29854:	4819      	ldr	r0, [pc, #100]	; (298bc <ProcessHashDrv+0x20c>)
   29856:	f04f 31ff 	mov.w	r1, #4294967295
   2985a:	f04f 0901 	mov.w	r9, #1
   2985e:	f7ff f839 	bl	288d4 <CC_PalMutexLock>
   29862:	2800      	cmp	r0, #0
   29864:	f43f af41 	beq.w	296ea <ProcessHashDrv+0x3a>
   29868:	4816      	ldr	r0, [pc, #88]	; (298c4 <ProcessHashDrv+0x214>)
   2986a:	f7fe f927 	bl	27abc <CC_PalAbort>
   2986e:	2000      	movs	r0, #0
   29870:	f7ff f860 	bl	28934 <CC_PalPowerSaveModeSelect>
   29874:	4606      	mov	r6, r0
   29876:	2800      	cmp	r0, #0
   29878:	f43f af3e 	beq.w	296f8 <ProcessHashDrv+0x48>
   2987c:	4812      	ldr	r0, [pc, #72]	; (298c8 <ProcessHashDrv+0x218>)
   2987e:	f7fe f91d 	bl	27abc <CC_PalAbort>
   29882:	e739      	b.n	296f8 <ProcessHashDrv+0x48>
   29884:	4e11      	ldr	r6, [pc, #68]	; (298cc <ProcessHashDrv+0x21c>)
   29886:	4630      	mov	r0, r6
   29888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2988c:	4810      	ldr	r0, [pc, #64]	; (298d0 <ProcessHashDrv+0x220>)
   2988e:	f7fe f915 	bl	27abc <CC_PalAbort>
   29892:	4630      	mov	r0, r6
   29894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29898:	480e      	ldr	r0, [pc, #56]	; (298d4 <ProcessHashDrv+0x224>)
   2989a:	f7fe f90f 	bl	27abc <CC_PalAbort>
   2989e:	e7ce      	b.n	2983e <ProcessHashDrv+0x18e>
   298a0:	2110      	movs	r1, #16
   298a2:	f104 0008 	add.w	r0, r4, #8
   298a6:	f7fe fffd 	bl	288a4 <CC_PalMemSetZeroPlat>
   298aa:	e7bd      	b.n	29828 <ProcessHashDrv+0x178>
   298ac:	4e0a      	ldr	r6, [pc, #40]	; (298d8 <ProcessHashDrv+0x228>)
   298ae:	4630      	mov	r0, r6
   298b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   298b4:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   298b8:	e7c5      	b.n	29846 <ProcessHashDrv+0x196>
   298ba:	bf00      	nop
   298bc:	20000a5c 	.word	0x20000a5c
   298c0:	5002b000 	.word	0x5002b000
   298c4:	00030e90 	.word	0x00030e90
   298c8:	00030ea8 	.word	0x00030ea8
   298cc:	00f30001 	.word	0x00f30001
   298d0:	00030ee8 	.word	0x00030ee8
   298d4:	00030ec8 	.word	0x00030ec8
   298d8:	00f30003 	.word	0x00f30003

000298dc <FinishHashDrv>:
   298dc:	b398      	cbz	r0, 29946 <FinishHashDrv+0x6a>
   298de:	b470      	push	{r4, r5, r6}
   298e0:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   298e4:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   298e8:	ba26      	rev	r6, r4
   298ea:	ba0d      	rev	r5, r1
   298ec:	ba14      	rev	r4, r2
   298ee:	ba19      	rev	r1, r3
   298f0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   298f4:	ba12      	rev	r2, r2
   298f6:	e9c0 4104 	strd	r4, r1, [r0, #16]
   298fa:	6182      	str	r2, [r0, #24]
   298fc:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   29900:	e9c0 6502 	strd	r6, r5, [r0, #8]
   29904:	ba1b      	rev	r3, r3
   29906:	ba25      	rev	r5, r4
   29908:	e9c0 3507 	strd	r3, r5, [r0, #28]
   2990c:	ba14      	rev	r4, r2
   2990e:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   29912:	6a81      	ldr	r1, [r0, #40]	; 0x28
   29914:	ba12      	rev	r2, r2
   29916:	ba09      	rev	r1, r1
   29918:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   2991c:	62c2      	str	r2, [r0, #44]	; 0x2c
   2991e:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   29922:	ba1b      	rev	r3, r3
   29924:	ba25      	rev	r5, r4
   29926:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   2992a:	ba14      	rev	r4, r2
   2992c:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   29930:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   29932:	ba12      	rev	r2, r2
   29934:	ba09      	rev	r1, r1
   29936:	ba1b      	rev	r3, r3
   29938:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   2993c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   29940:	2000      	movs	r0, #0
   29942:	bc70      	pop	{r4, r5, r6}
   29944:	4770      	bx	lr
   29946:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2994a:	4770      	bx	lr

0002994c <LoadAesKey>:
   2994c:	2800      	cmp	r0, #0
   2994e:	d047      	beq.n	299e0 <LoadAesKey+0x94>
   29950:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   29954:	2b00      	cmp	r3, #0
   29956:	d034      	beq.n	299c2 <LoadAesKey+0x76>
   29958:	2b03      	cmp	r3, #3
   2995a:	b510      	push	{r4, lr}
   2995c:	d013      	beq.n	29986 <LoadAesKey+0x3a>
   2995e:	4822      	ldr	r0, [pc, #136]	; (299e8 <LoadAesKey+0x9c>)
   29960:	4c22      	ldr	r4, [pc, #136]	; (299ec <LoadAesKey+0xa0>)
   29962:	6822      	ldr	r2, [r4, #0]
   29964:	4b22      	ldr	r3, [pc, #136]	; (299f0 <LoadAesKey+0xa4>)
   29966:	6812      	ldr	r2, [r2, #0]
   29968:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   2996c:	6822      	ldr	r2, [r4, #0]
   2996e:	6852      	ldr	r2, [r2, #4]
   29970:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   29974:	6822      	ldr	r2, [r4, #0]
   29976:	6892      	ldr	r2, [r2, #8]
   29978:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   2997c:	6822      	ldr	r2, [r4, #0]
   2997e:	68d2      	ldr	r2, [r2, #12]
   29980:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   29984:	bd10      	pop	{r4, pc}
   29986:	6b01      	ldr	r1, [r0, #48]	; 0x30
   29988:	6c00      	ldr	r0, [r0, #64]	; 0x40
   2998a:	4c18      	ldr	r4, [pc, #96]	; (299ec <LoadAesKey+0xa0>)
   2998c:	f000 fba8 	bl	2a0e0 <kmu_validate_kdr_slot_and_size>
   29990:	2800      	cmp	r0, #0
   29992:	d1e6      	bne.n	29962 <LoadAesKey+0x16>
   29994:	6822      	ldr	r2, [r4, #0]
   29996:	4b16      	ldr	r3, [pc, #88]	; (299f0 <LoadAesKey+0xa4>)
   29998:	6812      	ldr	r2, [r2, #0]
   2999a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   2999e:	6822      	ldr	r2, [r4, #0]
   299a0:	6852      	ldr	r2, [r2, #4]
   299a2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   299a6:	6822      	ldr	r2, [r4, #0]
   299a8:	6892      	ldr	r2, [r2, #8]
   299aa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   299ae:	6822      	ldr	r2, [r4, #0]
   299b0:	68d2      	ldr	r2, [r2, #12]
   299b2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   299b6:	f000 fba1 	bl	2a0fc <kmu_use_kdr_key>
   299ba:	2800      	cmp	r0, #0
   299bc:	d1d1      	bne.n	29962 <LoadAesKey+0x16>
   299be:	2000      	movs	r0, #0
   299c0:	bd10      	pop	{r4, pc}
   299c2:	4b0b      	ldr	r3, [pc, #44]	; (299f0 <LoadAesKey+0xa4>)
   299c4:	6902      	ldr	r2, [r0, #16]
   299c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   299ca:	6942      	ldr	r2, [r0, #20]
   299cc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   299d0:	6982      	ldr	r2, [r0, #24]
   299d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   299d6:	69c2      	ldr	r2, [r0, #28]
   299d8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   299dc:	2000      	movs	r0, #0
   299de:	4770      	bx	lr
   299e0:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   299e4:	4770      	bx	lr
   299e6:	bf00      	nop
   299e8:	00f10009 	.word	0x00f10009
   299ec:	20000a48 	.word	0x20000a48
   299f0:	5002b000 	.word	0x5002b000

000299f4 <InitAes.part.0>:
   299f4:	4a37      	ldr	r2, [pc, #220]	; (29ad4 <InitAes.part.0+0xe0>)
   299f6:	b538      	push	{r3, r4, r5, lr}
   299f8:	4604      	mov	r4, r0
   299fa:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   299fe:	2b00      	cmp	r3, #0
   29a00:	d1fb      	bne.n	299fa <InitAes.part.0+0x6>
   29a02:	4a34      	ldr	r2, [pc, #208]	; (29ad4 <InitAes.part.0+0xe0>)
   29a04:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   29a08:	2b00      	cmp	r3, #0
   29a0a:	d1fb      	bne.n	29a04 <InitAes.part.0+0x10>
   29a0c:	4a31      	ldr	r2, [pc, #196]	; (29ad4 <InitAes.part.0+0xe0>)
   29a0e:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   29a12:	2b00      	cmp	r3, #0
   29a14:	d1fb      	bne.n	29a0e <InitAes.part.0+0x1a>
   29a16:	4a2f      	ldr	r2, [pc, #188]	; (29ad4 <InitAes.part.0+0xe0>)
   29a18:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   29a1c:	2b00      	cmp	r3, #0
   29a1e:	d1fb      	bne.n	29a18 <InitAes.part.0+0x24>
   29a20:	4a2c      	ldr	r2, [pc, #176]	; (29ad4 <InitAes.part.0+0xe0>)
   29a22:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   29a26:	2b00      	cmp	r3, #0
   29a28:	d1fb      	bne.n	29a22 <InitAes.part.0+0x2e>
   29a2a:	4d2a      	ldr	r5, [pc, #168]	; (29ad4 <InitAes.part.0+0xe0>)
   29a2c:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   29a30:	2b00      	cmp	r3, #0
   29a32:	d1fb      	bne.n	29a2c <InitAes.part.0+0x38>
   29a34:	f04f 30ff 	mov.w	r0, #4294967295
   29a38:	f7fe fea2 	bl	28780 <CC_HalClearInterruptBit>
   29a3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29a3e:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   29a42:	f023 0304 	bic.w	r3, r3, #4
   29a46:	2b03      	cmp	r3, #3
   29a48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   29a4a:	d039      	beq.n	29ac0 <InitAes.part.0+0xcc>
   29a4c:	2b01      	cmp	r3, #1
   29a4e:	bf0c      	ite	eq
   29a50:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   29a54:	f020 0020 	bicne.w	r0, r0, #32
   29a58:	f7fe fea0 	bl	2879c <CC_HalMaskInterrupt>
   29a5c:	4a1d      	ldr	r2, [pc, #116]	; (29ad4 <InitAes.part.0+0xe0>)
   29a5e:	2301      	movs	r3, #1
   29a60:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   29a64:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29a68:	2b00      	cmp	r3, #0
   29a6a:	d1fb      	bne.n	29a64 <InitAes.part.0+0x70>
   29a6c:	4a19      	ldr	r2, [pc, #100]	; (29ad4 <InitAes.part.0+0xe0>)
   29a6e:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   29a72:	2b00      	cmp	r3, #0
   29a74:	d1fb      	bne.n	29a6e <InitAes.part.0+0x7a>
   29a76:	4917      	ldr	r1, [pc, #92]	; (29ad4 <InitAes.part.0+0xe0>)
   29a78:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   29a7c:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   29a80:	2b00      	cmp	r3, #0
   29a82:	d1fb      	bne.n	29a7c <InitAes.part.0+0x88>
   29a84:	4a13      	ldr	r2, [pc, #76]	; (29ad4 <InitAes.part.0+0xe0>)
   29a86:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   29a8a:	2b00      	cmp	r3, #0
   29a8c:	d1fb      	bne.n	29a86 <InitAes.part.0+0x92>
   29a8e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   29a90:	f022 0104 	bic.w	r1, r2, #4
   29a94:	2903      	cmp	r1, #3
   29a96:	bf18      	it	ne
   29a98:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   29a9a:	490e      	ldr	r1, [pc, #56]	; (29ad4 <InitAes.part.0+0xe0>)
   29a9c:	ea4f 0282 	mov.w	r2, r2, lsl #2
   29aa0:	bf18      	it	ne
   29aa2:	f003 0301 	andne.w	r3, r3, #1
   29aa6:	f002 021c 	and.w	r2, r2, #28
   29aaa:	431a      	orrs	r2, r3
   29aac:	f8c1 24c0 	str.w	r2, [r1, #1216]	; 0x4c0
   29ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29ab2:	2b07      	cmp	r3, #7
   29ab4:	bf04      	itt	eq
   29ab6:	2301      	moveq	r3, #1
   29ab8:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   29abc:	2000      	movs	r0, #0
   29abe:	bd38      	pop	{r3, r4, r5, pc}
   29ac0:	2b01      	cmp	r3, #1
   29ac2:	bf0c      	ite	eq
   29ac4:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   29ac8:	f020 0010 	bicne.w	r0, r0, #16
   29acc:	f7fe fe66 	bl	2879c <CC_HalMaskInterrupt>
   29ad0:	e7c4      	b.n	29a5c <InitAes.part.0+0x68>
   29ad2:	bf00      	nop
   29ad4:	5002b000 	.word	0x5002b000

00029ad8 <write_invalid_key>:
   29ad8:	4a09      	ldr	r2, [pc, #36]	; (29b00 <write_invalid_key+0x28>)
   29ada:	4b0a      	ldr	r3, [pc, #40]	; (29b04 <write_invalid_key+0x2c>)
   29adc:	6811      	ldr	r1, [r2, #0]
   29ade:	6809      	ldr	r1, [r1, #0]
   29ae0:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   29ae4:	6811      	ldr	r1, [r2, #0]
   29ae6:	6849      	ldr	r1, [r1, #4]
   29ae8:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   29aec:	6811      	ldr	r1, [r2, #0]
   29aee:	6889      	ldr	r1, [r1, #8]
   29af0:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   29af4:	6812      	ldr	r2, [r2, #0]
   29af6:	68d2      	ldr	r2, [r2, #12]
   29af8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   29afc:	4770      	bx	lr
   29afe:	bf00      	nop
   29b00:	20000a48 	.word	0x20000a48
   29b04:	5002b000 	.word	0x5002b000

00029b08 <ProcessAesDrv>:
   29b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b0c:	b085      	sub	sp, #20
   29b0e:	2900      	cmp	r1, #0
   29b10:	f000 80ec 	beq.w	29cec <ProcessAesDrv+0x1e4>
   29b14:	4690      	mov	r8, r2
   29b16:	2a00      	cmp	r2, #0
   29b18:	f000 80e8 	beq.w	29cec <ProcessAesDrv+0x1e4>
   29b1c:	4605      	mov	r5, r0
   29b1e:	2800      	cmp	r0, #0
   29b20:	f000 8129 	beq.w	29d76 <ProcessAesDrv+0x26e>
   29b24:	4699      	mov	r9, r3
   29b26:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   29b28:	460e      	mov	r6, r1
   29b2a:	2b00      	cmp	r3, #0
   29b2c:	d152      	bne.n	29bd4 <ProcessAesDrv+0xcc>
   29b2e:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   29b32:	d254      	bcs.n	29bde <ProcessAesDrv+0xd6>
   29b34:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   29b38:	2b04      	cmp	r3, #4
   29b3a:	f000 80ff 	beq.w	29d3c <ProcessAesDrv+0x234>
   29b3e:	2700      	movs	r7, #0
   29b40:	48ad      	ldr	r0, [pc, #692]	; (29df8 <ProcessAesDrv+0x2f0>)
   29b42:	f04f 31ff 	mov.w	r1, #4294967295
   29b46:	f7fe fec5 	bl	288d4 <CC_PalMutexLock>
   29b4a:	2800      	cmp	r0, #0
   29b4c:	f040 80d5 	bne.w	29cfa <ProcessAesDrv+0x1f2>
   29b50:	2000      	movs	r0, #0
   29b52:	f7fe feef 	bl	28934 <CC_PalPowerSaveModeSelect>
   29b56:	2800      	cmp	r0, #0
   29b58:	f040 80d8 	bne.w	29d0c <ProcessAesDrv+0x204>
   29b5c:	48a7      	ldr	r0, [pc, #668]	; (29dfc <ProcessAesDrv+0x2f4>)
   29b5e:	2301      	movs	r3, #1
   29b60:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   29b64:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   29b68:	2c00      	cmp	r4, #0
   29b6a:	d1fb      	bne.n	29b64 <ProcessAesDrv+0x5c>
   29b6c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29b6e:	2b03      	cmp	r3, #3
   29b70:	dc3a      	bgt.n	29be8 <ProcessAesDrv+0xe0>
   29b72:	2b00      	cmp	r3, #0
   29b74:	da3b      	bge.n	29bee <ProcessAesDrv+0xe6>
   29b76:	4ca2      	ldr	r4, [pc, #648]	; (29e00 <ProcessAesDrv+0x2f8>)
   29b78:	4aa0      	ldr	r2, [pc, #640]	; (29dfc <ProcessAesDrv+0x2f4>)
   29b7a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29b7e:	2b00      	cmp	r3, #0
   29b80:	d1fb      	bne.n	29b7a <ProcessAesDrv+0x72>
   29b82:	2f00      	cmp	r7, #0
   29b84:	f040 80d1 	bne.w	29d2a <ProcessAesDrv+0x222>
   29b88:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29b8a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   29b8c:	f023 0304 	bic.w	r3, r3, #4
   29b90:	2b03      	cmp	r3, #3
   29b92:	4b9a      	ldr	r3, [pc, #616]	; (29dfc <ProcessAesDrv+0x2f4>)
   29b94:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   29b98:	f000 809f 	beq.w	29cda <ProcessAesDrv+0x1d2>
   29b9c:	2a01      	cmp	r2, #1
   29b9e:	bf0c      	ite	eq
   29ba0:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   29ba4:	f040 0020 	orrne.w	r0, r0, #32
   29ba8:	f7fe fdf8 	bl	2879c <CC_HalMaskInterrupt>
   29bac:	4b93      	ldr	r3, [pc, #588]	; (29dfc <ProcessAesDrv+0x2f4>)
   29bae:	2200      	movs	r2, #0
   29bb0:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   29bb4:	2001      	movs	r0, #1
   29bb6:	f7fe febd 	bl	28934 <CC_PalPowerSaveModeSelect>
   29bba:	2800      	cmp	r0, #0
   29bbc:	f040 80b1 	bne.w	29d22 <ProcessAesDrv+0x21a>
   29bc0:	488d      	ldr	r0, [pc, #564]	; (29df8 <ProcessAesDrv+0x2f0>)
   29bc2:	f7fe fe8f 	bl	288e4 <CC_PalMutexUnlock>
   29bc6:	2800      	cmp	r0, #0
   29bc8:	f040 80a4 	bne.w	29d14 <ProcessAesDrv+0x20c>
   29bcc:	4620      	mov	r0, r4
   29bce:	b005      	add	sp, #20
   29bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29bd4:	2b01      	cmp	r3, #1
   29bd6:	d1ad      	bne.n	29b34 <ProcessAesDrv+0x2c>
   29bd8:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   29bdc:	d3aa      	bcc.n	29b34 <ProcessAesDrv+0x2c>
   29bde:	4c89      	ldr	r4, [pc, #548]	; (29e04 <ProcessAesDrv+0x2fc>)
   29be0:	4620      	mov	r0, r4
   29be2:	b005      	add	sp, #20
   29be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29be8:	3b06      	subs	r3, #6
   29bea:	2b01      	cmp	r3, #1
   29bec:	d8c3      	bhi.n	29b76 <ProcessAesDrv+0x6e>
   29bee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   29bf0:	2b01      	cmp	r3, #1
   29bf2:	f200 80be 	bhi.w	29d72 <ProcessAesDrv+0x26a>
   29bf6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29bf8:	2b01      	cmp	r3, #1
   29bfa:	d87c      	bhi.n	29cf6 <ProcessAesDrv+0x1ee>
   29bfc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   29bfe:	2b01      	cmp	r3, #1
   29c00:	f200 80e8 	bhi.w	29dd4 <ProcessAesDrv+0x2cc>
   29c04:	4628      	mov	r0, r5
   29c06:	f7ff fef5 	bl	299f4 <InitAes.part.0>
   29c0a:	4604      	mov	r4, r0
   29c0c:	2800      	cmp	r0, #0
   29c0e:	d1b3      	bne.n	29b78 <ProcessAesDrv+0x70>
   29c10:	4628      	mov	r0, r5
   29c12:	f7ff fe9b 	bl	2994c <LoadAesKey>
   29c16:	4604      	mov	r4, r0
   29c18:	2800      	cmp	r0, #0
   29c1a:	d1ad      	bne.n	29b78 <ProcessAesDrv+0x70>
   29c1c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29c1e:	2b07      	cmp	r3, #7
   29c20:	d8a9      	bhi.n	29b76 <ProcessAesDrv+0x6e>
   29c22:	2201      	movs	r2, #1
   29c24:	409a      	lsls	r2, r3
   29c26:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   29c2a:	f040 80d5 	bne.w	29dd8 <ProcessAesDrv+0x2d0>
   29c2e:	f012 0f44 	tst.w	r2, #68	; 0x44
   29c32:	f040 80ba 	bne.w	29daa <ProcessAesDrv+0x2a2>
   29c36:	07d2      	lsls	r2, r2, #31
   29c38:	d59d      	bpl.n	29b76 <ProcessAesDrv+0x6e>
   29c3a:	f023 0304 	bic.w	r3, r3, #4
   29c3e:	2b03      	cmp	r3, #3
   29c40:	6832      	ldr	r2, [r6, #0]
   29c42:	d00d      	beq.n	29c60 <ProcessAesDrv+0x158>
   29c44:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   29c46:	f8d8 1000 	ldr.w	r1, [r8]
   29c4a:	2b01      	cmp	r3, #1
   29c4c:	4b6b      	ldr	r3, [pc, #428]	; (29dfc <ProcessAesDrv+0x2f4>)
   29c4e:	bf0b      	itete	eq
   29c50:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   29c54:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   29c58:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   29c5c:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   29c60:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29c62:	2b01      	cmp	r3, #1
   29c64:	4b65      	ldr	r3, [pc, #404]	; (29dfc <ProcessAesDrv+0x2f4>)
   29c66:	bf0b      	itete	eq
   29c68:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   29c6c:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   29c70:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   29c74:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   29c78:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29c7a:	f023 0304 	bic.w	r3, r3, #4
   29c7e:	2b03      	cmp	r3, #3
   29c80:	f000 80a2 	beq.w	29dc8 <ProcessAesDrv+0x2c0>
   29c84:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   29c86:	2b01      	cmp	r3, #1
   29c88:	bf14      	ite	ne
   29c8a:	2020      	movne	r0, #32
   29c8c:	2080      	moveq	r0, #128	; 0x80
   29c8e:	f7fe fd8b 	bl	287a8 <CC_HalWaitInterrupt>
   29c92:	4604      	mov	r4, r0
   29c94:	2800      	cmp	r0, #0
   29c96:	f47f af6f 	bne.w	29b78 <ProcessAesDrv+0x70>
   29c9a:	4b58      	ldr	r3, [pc, #352]	; (29dfc <ProcessAesDrv+0x2f4>)
   29c9c:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   29ca0:	2c00      	cmp	r4, #0
   29ca2:	d1fb      	bne.n	29c9c <ProcessAesDrv+0x194>
   29ca4:	6b69      	ldr	r1, [r5, #52]	; 0x34
   29ca6:	2907      	cmp	r1, #7
   29ca8:	d814      	bhi.n	29cd4 <ProcessAesDrv+0x1cc>
   29caa:	2201      	movs	r2, #1
   29cac:	408a      	lsls	r2, r1
   29cae:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   29cb2:	f040 80bb 	bne.w	29e2c <ProcessAesDrv+0x324>
   29cb6:	f012 0f44 	tst.w	r2, #68	; 0x44
   29cba:	d00b      	beq.n	29cd4 <ProcessAesDrv+0x1cc>
   29cbc:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   29cc0:	602a      	str	r2, [r5, #0]
   29cc2:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   29cc6:	606a      	str	r2, [r5, #4]
   29cc8:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   29ccc:	60aa      	str	r2, [r5, #8]
   29cce:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   29cd2:	60eb      	str	r3, [r5, #12]
   29cd4:	2301      	movs	r3, #1
   29cd6:	65ab      	str	r3, [r5, #88]	; 0x58
   29cd8:	e74e      	b.n	29b78 <ProcessAesDrv+0x70>
   29cda:	2a01      	cmp	r2, #1
   29cdc:	bf0c      	ite	eq
   29cde:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   29ce2:	f040 0010 	orrne.w	r0, r0, #16
   29ce6:	f7fe fd59 	bl	2879c <CC_HalMaskInterrupt>
   29cea:	e75f      	b.n	29bac <ProcessAesDrv+0xa4>
   29cec:	4c46      	ldr	r4, [pc, #280]	; (29e08 <ProcessAesDrv+0x300>)
   29cee:	4620      	mov	r0, r4
   29cf0:	b005      	add	sp, #20
   29cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29cf6:	4c45      	ldr	r4, [pc, #276]	; (29e0c <ProcessAesDrv+0x304>)
   29cf8:	e73e      	b.n	29b78 <ProcessAesDrv+0x70>
   29cfa:	4845      	ldr	r0, [pc, #276]	; (29e10 <ProcessAesDrv+0x308>)
   29cfc:	f7fd fede 	bl	27abc <CC_PalAbort>
   29d00:	2000      	movs	r0, #0
   29d02:	f7fe fe17 	bl	28934 <CC_PalPowerSaveModeSelect>
   29d06:	2800      	cmp	r0, #0
   29d08:	f43f af28 	beq.w	29b5c <ProcessAesDrv+0x54>
   29d0c:	4841      	ldr	r0, [pc, #260]	; (29e14 <ProcessAesDrv+0x30c>)
   29d0e:	f7fd fed5 	bl	27abc <CC_PalAbort>
   29d12:	e723      	b.n	29b5c <ProcessAesDrv+0x54>
   29d14:	4840      	ldr	r0, [pc, #256]	; (29e18 <ProcessAesDrv+0x310>)
   29d16:	f7fd fed1 	bl	27abc <CC_PalAbort>
   29d1a:	4620      	mov	r0, r4
   29d1c:	b005      	add	sp, #20
   29d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d22:	483e      	ldr	r0, [pc, #248]	; (29e1c <ProcessAesDrv+0x314>)
   29d24:	f7fd feca 	bl	27abc <CC_PalAbort>
   29d28:	e74a      	b.n	29bc0 <ProcessAesDrv+0xb8>
   29d2a:	2304      	movs	r3, #4
   29d2c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   29d30:	2120      	movs	r1, #32
   29d32:	f105 0010 	add.w	r0, r5, #16
   29d36:	f7fe fdb5 	bl	288a4 <CC_PalMemSetZeroPlat>
   29d3a:	e725      	b.n	29b88 <ProcessAesDrv+0x80>
   29d3c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   29d3e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   29d40:	f000 f9c0 	bl	2a0c4 <kmu_validate_slot_and_size>
   29d44:	b998      	cbnz	r0, 29d6e <ProcessAesDrv+0x266>
   29d46:	4f36      	ldr	r7, [pc, #216]	; (29e20 <ProcessAesDrv+0x318>)
   29d48:	4c2c      	ldr	r4, [pc, #176]	; (29dfc <ProcessAesDrv+0x2f4>)
   29d4a:	683b      	ldr	r3, [r7, #0]
   29d4c:	681b      	ldr	r3, [r3, #0]
   29d4e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   29d52:	683b      	ldr	r3, [r7, #0]
   29d54:	685b      	ldr	r3, [r3, #4]
   29d56:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   29d5a:	683b      	ldr	r3, [r7, #0]
   29d5c:	689b      	ldr	r3, [r3, #8]
   29d5e:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   29d62:	683b      	ldr	r3, [r7, #0]
   29d64:	68db      	ldr	r3, [r3, #12]
   29d66:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   29d6a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   29d6c:	b131      	cbz	r1, 29d7c <ProcessAesDrv+0x274>
   29d6e:	2701      	movs	r7, #1
   29d70:	e6e6      	b.n	29b40 <ProcessAesDrv+0x38>
   29d72:	4c2c      	ldr	r4, [pc, #176]	; (29e24 <ProcessAesDrv+0x31c>)
   29d74:	e700      	b.n	29b78 <ProcessAesDrv+0x70>
   29d76:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   29d7a:	e727      	b.n	29bcc <ProcessAesDrv+0xc4>
   29d7c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   29d7e:	9301      	str	r3, [sp, #4]
   29d80:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   29d82:	9300      	str	r3, [sp, #0]
   29d84:	f105 0a10 	add.w	sl, r5, #16
   29d88:	f04f 0b10 	mov.w	fp, #16
   29d8c:	f8cd a008 	str.w	sl, [sp, #8]
   29d90:	f8cd b00c 	str.w	fp, [sp, #12]
   29d94:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   29d98:	6c28      	ldr	r0, [r5, #64]	; 0x40
   29d9a:	f000 f9b9 	bl	2a110 <kmu_derive_cmac>
   29d9e:	2800      	cmp	r0, #0
   29da0:	d151      	bne.n	29e46 <ProcessAesDrv+0x33e>
   29da2:	2300      	movs	r3, #0
   29da4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   29da8:	e7e1      	b.n	29d6e <ProcessAesDrv+0x266>
   29daa:	4b14      	ldr	r3, [pc, #80]	; (29dfc <ProcessAesDrv+0x2f4>)
   29dac:	682a      	ldr	r2, [r5, #0]
   29dae:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   29db2:	686a      	ldr	r2, [r5, #4]
   29db4:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   29db8:	68aa      	ldr	r2, [r5, #8]
   29dba:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   29dbe:	68ea      	ldr	r2, [r5, #12]
   29dc0:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   29dc4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29dc6:	e738      	b.n	29c3a <ProcessAesDrv+0x132>
   29dc8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29dca:	2b01      	cmp	r3, #1
   29dcc:	bf14      	ite	ne
   29dce:	2010      	movne	r0, #16
   29dd0:	2040      	moveq	r0, #64	; 0x40
   29dd2:	e75c      	b.n	29c8e <ProcessAesDrv+0x186>
   29dd4:	4c14      	ldr	r4, [pc, #80]	; (29e28 <ProcessAesDrv+0x320>)
   29dd6:	e6cf      	b.n	29b78 <ProcessAesDrv+0x70>
   29dd8:	4b08      	ldr	r3, [pc, #32]	; (29dfc <ProcessAesDrv+0x2f4>)
   29dda:	682a      	ldr	r2, [r5, #0]
   29ddc:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   29de0:	686a      	ldr	r2, [r5, #4]
   29de2:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   29de6:	68aa      	ldr	r2, [r5, #8]
   29de8:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   29dec:	68ea      	ldr	r2, [r5, #12]
   29dee:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   29df2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29df4:	e721      	b.n	29c3a <ProcessAesDrv+0x132>
   29df6:	bf00      	nop
   29df8:	20000a5c 	.word	0x20000a5c
   29dfc:	5002b000 	.word	0x5002b000
   29e00:	00f10001 	.word	0x00f10001
   29e04:	00f10005 	.word	0x00f10005
   29e08:	00f1000b 	.word	0x00f1000b
   29e0c:	00f10003 	.word	0x00f10003
   29e10:	00030e90 	.word	0x00030e90
   29e14:	00030ea8 	.word	0x00030ea8
   29e18:	00030ee8 	.word	0x00030ee8
   29e1c:	00030ec8 	.word	0x00030ec8
   29e20:	20000a48 	.word	0x20000a48
   29e24:	00f10002 	.word	0x00f10002
   29e28:	00f10004 	.word	0x00f10004
   29e2c:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   29e30:	602a      	str	r2, [r5, #0]
   29e32:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   29e36:	606a      	str	r2, [r5, #4]
   29e38:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   29e3c:	60aa      	str	r2, [r5, #8]
   29e3e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   29e42:	60eb      	str	r3, [r5, #12]
   29e44:	e746      	b.n	29cd4 <ProcessAesDrv+0x1cc>
   29e46:	683b      	ldr	r3, [r7, #0]
   29e48:	681b      	ldr	r3, [r3, #0]
   29e4a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   29e4e:	683b      	ldr	r3, [r7, #0]
   29e50:	685b      	ldr	r3, [r3, #4]
   29e52:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   29e56:	683b      	ldr	r3, [r7, #0]
   29e58:	689b      	ldr	r3, [r3, #8]
   29e5a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   29e5e:	683b      	ldr	r3, [r7, #0]
   29e60:	68db      	ldr	r3, [r3, #12]
   29e62:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   29e66:	4659      	mov	r1, fp
   29e68:	4650      	mov	r0, sl
   29e6a:	f7fe fd1b 	bl	288a4 <CC_PalMemSetZeroPlat>
   29e6e:	e798      	b.n	29da2 <ProcessAesDrv+0x29a>

00029e70 <FinishAesDrv>:
   29e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29e74:	b309      	cbz	r1, 29eba <FinishAesDrv+0x4a>
   29e76:	b302      	cbz	r2, 29eba <FinishAesDrv+0x4a>
   29e78:	4604      	mov	r4, r0
   29e7a:	2800      	cmp	r0, #0
   29e7c:	f000 80af 	beq.w	29fde <FinishAesDrv+0x16e>
   29e80:	461d      	mov	r5, r3
   29e82:	6b43      	ldr	r3, [r0, #52]	; 0x34
   29e84:	2b07      	cmp	r3, #7
   29e86:	460e      	mov	r6, r1
   29e88:	d01b      	beq.n	29ec2 <FinishAesDrv+0x52>
   29e8a:	b95d      	cbnz	r5, 29ea4 <FinishAesDrv+0x34>
   29e8c:	2b03      	cmp	r3, #3
   29e8e:	d110      	bne.n	29eb2 <FinishAesDrv+0x42>
   29e90:	6d83      	ldr	r3, [r0, #88]	; 0x58
   29e92:	b973      	cbnz	r3, 29eb2 <FinishAesDrv+0x42>
   29e94:	f100 0364 	add.w	r3, r0, #100	; 0x64
   29e98:	6645      	str	r5, [r0, #100]	; 0x64
   29e9a:	6685      	str	r5, [r0, #104]	; 0x68
   29e9c:	66c5      	str	r5, [r0, #108]	; 0x6c
   29e9e:	6705      	str	r5, [r0, #112]	; 0x70
   29ea0:	600b      	str	r3, [r1, #0]
   29ea2:	2510      	movs	r5, #16
   29ea4:	462b      	mov	r3, r5
   29ea6:	4631      	mov	r1, r6
   29ea8:	4620      	mov	r0, r4
   29eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   29eae:	f7ff be2b 	b.w	29b08 <ProcessAesDrv>
   29eb2:	462f      	mov	r7, r5
   29eb4:	4638      	mov	r0, r7
   29eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29eba:	4f76      	ldr	r7, [pc, #472]	; (2a094 <FinishAesDrv+0x224>)
   29ebc:	4638      	mov	r0, r7
   29ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29ec2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   29ec4:	2b00      	cmp	r3, #0
   29ec6:	f040 808d 	bne.w	29fe4 <FinishAesDrv+0x174>
   29eca:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   29ece:	f080 8090 	bcs.w	29ff2 <FinishAesDrv+0x182>
   29ed2:	b91d      	cbnz	r5, 29edc <FinishAesDrv+0x6c>
   29ed4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   29ed6:	2b00      	cmp	r3, #0
   29ed8:	f040 808b 	bne.w	29ff2 <FinishAesDrv+0x182>
   29edc:	486e      	ldr	r0, [pc, #440]	; (2a098 <FinishAesDrv+0x228>)
   29ede:	f04f 31ff 	mov.w	r1, #4294967295
   29ee2:	f7fe fcf7 	bl	288d4 <CC_PalMutexLock>
   29ee6:	2800      	cmp	r0, #0
   29ee8:	f040 808f 	bne.w	2a00a <FinishAesDrv+0x19a>
   29eec:	2000      	movs	r0, #0
   29eee:	f7fe fd21 	bl	28934 <CC_PalPowerSaveModeSelect>
   29ef2:	2800      	cmp	r0, #0
   29ef4:	f040 8085 	bne.w	2a002 <FinishAesDrv+0x192>
   29ef8:	4a68      	ldr	r2, [pc, #416]	; (2a09c <FinishAesDrv+0x22c>)
   29efa:	2301      	movs	r3, #1
   29efc:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   29f00:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29f04:	2b00      	cmp	r3, #0
   29f06:	d1fb      	bne.n	29f00 <FinishAesDrv+0x90>
   29f08:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29f0a:	2b03      	cmp	r3, #3
   29f0c:	dd4f      	ble.n	29fae <FinishAesDrv+0x13e>
   29f0e:	3b06      	subs	r3, #6
   29f10:	2b01      	cmp	r3, #1
   29f12:	d84e      	bhi.n	29fb2 <FinishAesDrv+0x142>
   29f14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   29f16:	2b01      	cmp	r3, #1
   29f18:	d86d      	bhi.n	29ff6 <FinishAesDrv+0x186>
   29f1a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   29f1c:	2b01      	cmp	r3, #1
   29f1e:	d878      	bhi.n	2a012 <FinishAesDrv+0x1a2>
   29f20:	6e23      	ldr	r3, [r4, #96]	; 0x60
   29f22:	2b01      	cmp	r3, #1
   29f24:	d877      	bhi.n	2a016 <FinishAesDrv+0x1a6>
   29f26:	4620      	mov	r0, r4
   29f28:	f7ff fd64 	bl	299f4 <InitAes.part.0>
   29f2c:	4607      	mov	r7, r0
   29f2e:	2800      	cmp	r0, #0
   29f30:	d140      	bne.n	29fb4 <FinishAesDrv+0x144>
   29f32:	4620      	mov	r0, r4
   29f34:	f7ff fd0a 	bl	2994c <LoadAesKey>
   29f38:	4607      	mov	r7, r0
   29f3a:	2800      	cmp	r0, #0
   29f3c:	d13a      	bne.n	29fb4 <FinishAesDrv+0x144>
   29f3e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   29f40:	2a07      	cmp	r2, #7
   29f42:	d836      	bhi.n	29fb2 <FinishAesDrv+0x142>
   29f44:	2301      	movs	r3, #1
   29f46:	4093      	lsls	r3, r2
   29f48:	f013 0f8a 	tst.w	r3, #138	; 0x8a
   29f4c:	f040 8081 	bne.w	2a052 <FinishAesDrv+0x1e2>
   29f50:	f013 0f44 	tst.w	r3, #68	; 0x44
   29f54:	d16f      	bne.n	2a036 <FinishAesDrv+0x1c6>
   29f56:	07db      	lsls	r3, r3, #31
   29f58:	d52b      	bpl.n	29fb2 <FinishAesDrv+0x142>
   29f5a:	4b50      	ldr	r3, [pc, #320]	; (2a09c <FinishAesDrv+0x22c>)
   29f5c:	2201      	movs	r2, #1
   29f5e:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   29f62:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   29f66:	6831      	ldr	r1, [r6, #0]
   29f68:	2d00      	cmp	r5, #0
   29f6a:	d156      	bne.n	2a01a <FinishAesDrv+0x1aa>
   29f6c:	6da1      	ldr	r1, [r4, #88]	; 0x58
   29f6e:	b909      	cbnz	r1, 29f74 <FinishAesDrv+0x104>
   29f70:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   29f74:	4b49      	ldr	r3, [pc, #292]	; (2a09c <FinishAesDrv+0x22c>)
   29f76:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   29f7a:	2f00      	cmp	r7, #0
   29f7c:	d1fb      	bne.n	29f76 <FinishAesDrv+0x106>
   29f7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   29f80:	2907      	cmp	r1, #7
   29f82:	d817      	bhi.n	29fb4 <FinishAesDrv+0x144>
   29f84:	2201      	movs	r2, #1
   29f86:	408a      	lsls	r2, r1
   29f88:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   29f8c:	d16f      	bne.n	2a06e <FinishAesDrv+0x1fe>
   29f8e:	f012 0f44 	tst.w	r2, #68	; 0x44
   29f92:	d00f      	beq.n	29fb4 <FinishAesDrv+0x144>
   29f94:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   29f98:	6022      	str	r2, [r4, #0]
   29f9a:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   29f9e:	6062      	str	r2, [r4, #4]
   29fa0:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   29fa4:	60a2      	str	r2, [r4, #8]
   29fa6:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   29faa:	60e3      	str	r3, [r4, #12]
   29fac:	e002      	b.n	29fb4 <FinishAesDrv+0x144>
   29fae:	2b00      	cmp	r3, #0
   29fb0:	dab0      	bge.n	29f14 <FinishAesDrv+0xa4>
   29fb2:	4f3b      	ldr	r7, [pc, #236]	; (2a0a0 <FinishAesDrv+0x230>)
   29fb4:	4a39      	ldr	r2, [pc, #228]	; (2a09c <FinishAesDrv+0x22c>)
   29fb6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29fba:	2b00      	cmp	r3, #0
   29fbc:	d1fb      	bne.n	29fb6 <FinishAesDrv+0x146>
   29fbe:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   29fc2:	2001      	movs	r0, #1
   29fc4:	f7fe fcb6 	bl	28934 <CC_PalPowerSaveModeSelect>
   29fc8:	b9b8      	cbnz	r0, 29ffa <FinishAesDrv+0x18a>
   29fca:	4833      	ldr	r0, [pc, #204]	; (2a098 <FinishAesDrv+0x228>)
   29fcc:	f7fe fc8a 	bl	288e4 <CC_PalMutexUnlock>
   29fd0:	2800      	cmp	r0, #0
   29fd2:	f43f af6f 	beq.w	29eb4 <FinishAesDrv+0x44>
   29fd6:	4833      	ldr	r0, [pc, #204]	; (2a0a4 <FinishAesDrv+0x234>)
   29fd8:	f7fd fd70 	bl	27abc <CC_PalAbort>
   29fdc:	e76a      	b.n	29eb4 <FinishAesDrv+0x44>
   29fde:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   29fe2:	e767      	b.n	29eb4 <FinishAesDrv+0x44>
   29fe4:	2b01      	cmp	r3, #1
   29fe6:	f47f af74 	bne.w	29ed2 <FinishAesDrv+0x62>
   29fea:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   29fee:	f4ff af70 	bcc.w	29ed2 <FinishAesDrv+0x62>
   29ff2:	4f2d      	ldr	r7, [pc, #180]	; (2a0a8 <FinishAesDrv+0x238>)
   29ff4:	e75e      	b.n	29eb4 <FinishAesDrv+0x44>
   29ff6:	4f2d      	ldr	r7, [pc, #180]	; (2a0ac <FinishAesDrv+0x23c>)
   29ff8:	e7dc      	b.n	29fb4 <FinishAesDrv+0x144>
   29ffa:	482d      	ldr	r0, [pc, #180]	; (2a0b0 <FinishAesDrv+0x240>)
   29ffc:	f7fd fd5e 	bl	27abc <CC_PalAbort>
   2a000:	e7e3      	b.n	29fca <FinishAesDrv+0x15a>
   2a002:	482c      	ldr	r0, [pc, #176]	; (2a0b4 <FinishAesDrv+0x244>)
   2a004:	f7fd fd5a 	bl	27abc <CC_PalAbort>
   2a008:	e776      	b.n	29ef8 <FinishAesDrv+0x88>
   2a00a:	482b      	ldr	r0, [pc, #172]	; (2a0b8 <FinishAesDrv+0x248>)
   2a00c:	f7fd fd56 	bl	27abc <CC_PalAbort>
   2a010:	e76c      	b.n	29eec <FinishAesDrv+0x7c>
   2a012:	4f2a      	ldr	r7, [pc, #168]	; (2a0bc <FinishAesDrv+0x24c>)
   2a014:	e7ce      	b.n	29fb4 <FinishAesDrv+0x144>
   2a016:	4f2a      	ldr	r7, [pc, #168]	; (2a0c0 <FinishAesDrv+0x250>)
   2a018:	e7cc      	b.n	29fb4 <FinishAesDrv+0x144>
   2a01a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   2a01c:	2a01      	cmp	r2, #1
   2a01e:	d033      	beq.n	2a088 <FinishAesDrv+0x218>
   2a020:	f8c3 1c30 	str.w	r1, [r3, #3120]	; 0xc30
   2a024:	2010      	movs	r0, #16
   2a026:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   2a02a:	f7fe fbbd 	bl	287a8 <CC_HalWaitInterrupt>
   2a02e:	4607      	mov	r7, r0
   2a030:	2800      	cmp	r0, #0
   2a032:	d09f      	beq.n	29f74 <FinishAesDrv+0x104>
   2a034:	e7be      	b.n	29fb4 <FinishAesDrv+0x144>
   2a036:	4b19      	ldr	r3, [pc, #100]	; (2a09c <FinishAesDrv+0x22c>)
   2a038:	6822      	ldr	r2, [r4, #0]
   2a03a:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   2a03e:	6862      	ldr	r2, [r4, #4]
   2a040:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   2a044:	68a2      	ldr	r2, [r4, #8]
   2a046:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   2a04a:	68e2      	ldr	r2, [r4, #12]
   2a04c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   2a050:	e783      	b.n	29f5a <FinishAesDrv+0xea>
   2a052:	4b12      	ldr	r3, [pc, #72]	; (2a09c <FinishAesDrv+0x22c>)
   2a054:	6822      	ldr	r2, [r4, #0]
   2a056:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   2a05a:	6862      	ldr	r2, [r4, #4]
   2a05c:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   2a060:	68a2      	ldr	r2, [r4, #8]
   2a062:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   2a066:	68e2      	ldr	r2, [r4, #12]
   2a068:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   2a06c:	e775      	b.n	29f5a <FinishAesDrv+0xea>
   2a06e:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   2a072:	6022      	str	r2, [r4, #0]
   2a074:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   2a078:	6062      	str	r2, [r4, #4]
   2a07a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   2a07e:	60a2      	str	r2, [r4, #8]
   2a080:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   2a084:	60e3      	str	r3, [r4, #12]
   2a086:	e795      	b.n	29fb4 <FinishAesDrv+0x144>
   2a088:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
   2a08c:	2040      	movs	r0, #64	; 0x40
   2a08e:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   2a092:	e7ca      	b.n	2a02a <FinishAesDrv+0x1ba>
   2a094:	00f1000b 	.word	0x00f1000b
   2a098:	20000a5c 	.word	0x20000a5c
   2a09c:	5002b000 	.word	0x5002b000
   2a0a0:	00f10001 	.word	0x00f10001
   2a0a4:	00030ee8 	.word	0x00030ee8
   2a0a8:	00f10005 	.word	0x00f10005
   2a0ac:	00f10002 	.word	0x00f10002
   2a0b0:	00030ec8 	.word	0x00030ec8
   2a0b4:	00030ea8 	.word	0x00030ea8
   2a0b8:	00030e90 	.word	0x00030e90
   2a0bc:	00f10003 	.word	0x00f10003
   2a0c0:	00f10004 	.word	0x00f10004

0002a0c4 <kmu_validate_slot_and_size>:
   2a0c4:	b929      	cbnz	r1, 2a0d2 <kmu_validate_slot_and_size+0xe>
   2a0c6:	4b04      	ldr	r3, [pc, #16]	; (2a0d8 <kmu_validate_slot_and_size+0x14>)
   2a0c8:	2800      	cmp	r0, #0
   2a0ca:	bf14      	ite	ne
   2a0cc:	4618      	movne	r0, r3
   2a0ce:	2000      	moveq	r0, #0
   2a0d0:	4770      	bx	lr
   2a0d2:	4802      	ldr	r0, [pc, #8]	; (2a0dc <kmu_validate_slot_and_size+0x18>)
   2a0d4:	4770      	bx	lr
   2a0d6:	bf00      	nop
   2a0d8:	00f70001 	.word	0x00f70001
   2a0dc:	00f70003 	.word	0x00f70003

0002a0e0 <kmu_validate_kdr_slot_and_size>:
   2a0e0:	b929      	cbnz	r1, 2a0ee <kmu_validate_kdr_slot_and_size+0xe>
   2a0e2:	4b04      	ldr	r3, [pc, #16]	; (2a0f4 <kmu_validate_kdr_slot_and_size+0x14>)
   2a0e4:	2800      	cmp	r0, #0
   2a0e6:	bf14      	ite	ne
   2a0e8:	4618      	movne	r0, r3
   2a0ea:	2000      	moveq	r0, #0
   2a0ec:	4770      	bx	lr
   2a0ee:	4802      	ldr	r0, [pc, #8]	; (2a0f8 <kmu_validate_kdr_slot_and_size+0x18>)
   2a0f0:	4770      	bx	lr
   2a0f2:	bf00      	nop
   2a0f4:	00f70001 	.word	0x00f70001
   2a0f8:	00f70003 	.word	0x00f70003

0002a0fc <kmu_use_kdr_key>:
   2a0fc:	4b03      	ldr	r3, [pc, #12]	; (2a10c <kmu_use_kdr_key+0x10>)
   2a0fe:	2000      	movs	r0, #0
   2a100:	2201      	movs	r2, #1
   2a102:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   2a106:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   2a10a:	4770      	bx	lr
   2a10c:	5002b000 	.word	0x5002b000

0002a110 <kmu_derive_cmac>:
   2a110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a114:	b0cc      	sub	sp, #304	; 0x130
   2a116:	2400      	movs	r4, #0
   2a118:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   2a11a:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   2a11e:	4682      	mov	sl, r0
   2a120:	4689      	mov	r9, r1
   2a122:	4616      	mov	r6, r2
   2a124:	4621      	mov	r1, r4
   2a126:	2274      	movs	r2, #116	; 0x74
   2a128:	a80e      	add	r0, sp, #56	; 0x38
   2a12a:	461f      	mov	r7, r3
   2a12c:	f002 f8e2 	bl	2c2f4 <memset>
   2a130:	2280      	movs	r2, #128	; 0x80
   2a132:	4621      	mov	r1, r4
   2a134:	a82c      	add	r0, sp, #176	; 0xb0
   2a136:	942b      	str	r4, [sp, #172]	; 0xac
   2a138:	f002 f8dc 	bl	2c2f4 <memset>
   2a13c:	2384      	movs	r3, #132	; 0x84
   2a13e:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2a142:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   2a146:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   2a14a:	9305      	str	r3, [sp, #20]
   2a14c:	d863      	bhi.n	2a216 <kmu_derive_cmac+0x106>
   2a14e:	f7ff fcc3 	bl	29ad8 <write_invalid_key>
   2a152:	ab05      	add	r3, sp, #20
   2a154:	4630      	mov	r0, r6
   2a156:	ae2b      	add	r6, sp, #172	; 0xac
   2a158:	9301      	str	r3, [sp, #4]
   2a15a:	9502      	str	r5, [sp, #8]
   2a15c:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   2a160:	4639      	mov	r1, r7
   2a162:	9600      	str	r6, [sp, #0]
   2a164:	f000 f862 	bl	2a22c <UtilCmacBuildDataForDerivation>
   2a168:	2800      	cmp	r0, #0
   2a16a:	d14f      	bne.n	2a20c <kmu_derive_cmac+0xfc>
   2a16c:	2303      	movs	r3, #3
   2a16e:	f88d 3013 	strb.w	r3, [sp, #19]
   2a172:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2a176:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   2a17a:	2307      	movs	r3, #7
   2a17c:	2200      	movs	r2, #0
   2a17e:	901c      	str	r0, [sp, #112]	; 0x70
   2a180:	2110      	movs	r1, #16
   2a182:	a80e      	add	r0, sp, #56	; 0x38
   2a184:	931b      	str	r3, [sp, #108]	; 0x6c
   2a186:	2401      	movs	r4, #1
   2a188:	2301      	movs	r3, #1
   2a18a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   2a18e:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   2a192:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   2a196:	9426      	str	r4, [sp, #152]	; 0x98
   2a198:	f10d 0920 	add.w	r9, sp, #32
   2a19c:	f7fe fb82 	bl	288a4 <CC_PalMemSetZeroPlat>
   2a1a0:	2210      	movs	r2, #16
   2a1a2:	9200      	str	r2, [sp, #0]
   2a1a4:	9905      	ldr	r1, [sp, #20]
   2a1a6:	f8cd 9004 	str.w	r9, [sp, #4]
   2a1aa:	ab0a      	add	r3, sp, #40	; 0x28
   2a1ac:	4630      	mov	r0, r6
   2a1ae:	aa06      	add	r2, sp, #24
   2a1b0:	f7ff fa22 	bl	295f8 <SetDataBuffersInfo>
   2a1b4:	4607      	mov	r7, r0
   2a1b6:	b170      	cbz	r0, 2a1d6 <kmu_derive_cmac+0xc6>
   2a1b8:	e01d      	b.n	2a1f6 <kmu_derive_cmac+0xe6>
   2a1ba:	a90e      	add	r1, sp, #56	; 0x38
   2a1bc:	eb08 0007 	add.w	r0, r8, r7
   2a1c0:	f7fe fb6c 	bl	2889c <CC_PalMemCopyPlat>
   2a1c4:	2110      	movs	r1, #16
   2a1c6:	a80e      	add	r0, sp, #56	; 0x38
   2a1c8:	f7fe fb6c 	bl	288a4 <CC_PalMemSetZeroPlat>
   2a1cc:	3401      	adds	r4, #1
   2a1ce:	1bad      	subs	r5, r5, r6
   2a1d0:	4437      	add	r7, r6
   2a1d2:	b2e4      	uxtb	r4, r4
   2a1d4:	d024      	beq.n	2a220 <kmu_derive_cmac+0x110>
   2a1d6:	2d10      	cmp	r5, #16
   2a1d8:	464a      	mov	r2, r9
   2a1da:	9b05      	ldr	r3, [sp, #20]
   2a1dc:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2a1e0:	a906      	add	r1, sp, #24
   2a1e2:	a80e      	add	r0, sp, #56	; 0x38
   2a1e4:	462e      	mov	r6, r5
   2a1e6:	bf28      	it	cs
   2a1e8:	2610      	movcs	r6, #16
   2a1ea:	f7ff fe41 	bl	29e70 <FinishAesDrv>
   2a1ee:	4632      	mov	r2, r6
   2a1f0:	2800      	cmp	r0, #0
   2a1f2:	d0e2      	beq.n	2a1ba <kmu_derive_cmac+0xaa>
   2a1f4:	4607      	mov	r7, r0
   2a1f6:	a80e      	add	r0, sp, #56	; 0x38
   2a1f8:	2274      	movs	r2, #116	; 0x74
   2a1fa:	2100      	movs	r1, #0
   2a1fc:	f7fe fb50 	bl	288a0 <CC_PalMemSetPlat>
   2a200:	f7ff fc6a 	bl	29ad8 <write_invalid_key>
   2a204:	4638      	mov	r0, r7
   2a206:	b04c      	add	sp, #304	; 0x130
   2a208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a20c:	4f05      	ldr	r7, [pc, #20]	; (2a224 <kmu_derive_cmac+0x114>)
   2a20e:	4638      	mov	r0, r7
   2a210:	b04c      	add	sp, #304	; 0x130
   2a212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a216:	4f04      	ldr	r7, [pc, #16]	; (2a228 <kmu_derive_cmac+0x118>)
   2a218:	4638      	mov	r0, r7
   2a21a:	b04c      	add	sp, #304	; 0x130
   2a21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a220:	462f      	mov	r7, r5
   2a222:	e7e8      	b.n	2a1f6 <kmu_derive_cmac+0xe6>
   2a224:	00f1000e 	.word	0x00f1000e
   2a228:	00f1000f 	.word	0x00f1000f

0002a22c <UtilCmacBuildDataForDerivation>:
   2a22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a230:	b082      	sub	sp, #8
   2a232:	461e      	mov	r6, r3
   2a234:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2a236:	2300      	movs	r3, #0
   2a238:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2a23c:	9301      	str	r3, [sp, #4]
   2a23e:	d83e      	bhi.n	2a2be <UtilCmacBuildDataForDerivation+0x92>
   2a240:	00ed      	lsls	r5, r5, #3
   2a242:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   2a246:	4617      	mov	r7, r2
   2a248:	f101 32ff 	add.w	r2, r1, #4294967295
   2a24c:	bf34      	ite	cc
   2a24e:	2303      	movcc	r3, #3
   2a250:	2304      	movcs	r3, #4
   2a252:	2a3f      	cmp	r2, #63	; 0x3f
   2a254:	460c      	mov	r4, r1
   2a256:	9300      	str	r3, [sp, #0]
   2a258:	d831      	bhi.n	2a2be <UtilCmacBuildDataForDerivation+0x92>
   2a25a:	b380      	cbz	r0, 2a2be <UtilCmacBuildDataForDerivation+0x92>
   2a25c:	bb66      	cbnz	r6, 2a2b8 <UtilCmacBuildDataForDerivation+0x8c>
   2a25e:	9a08      	ldr	r2, [sp, #32]
   2a260:	b36a      	cbz	r2, 2a2be <UtilCmacBuildDataForDerivation+0x92>
   2a262:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a264:	6811      	ldr	r1, [r2, #0]
   2a266:	b351      	cbz	r1, 2a2be <UtilCmacBuildDataForDerivation+0x92>
   2a268:	19a2      	adds	r2, r4, r6
   2a26a:	4413      	add	r3, r2
   2a26c:	4299      	cmp	r1, r3
   2a26e:	d326      	bcc.n	2a2be <UtilCmacBuildDataForDerivation+0x92>
   2a270:	9b08      	ldr	r3, [sp, #32]
   2a272:	4601      	mov	r1, r0
   2a274:	4622      	mov	r2, r4
   2a276:	1c58      	adds	r0, r3, #1
   2a278:	f7fe fb10 	bl	2889c <CC_PalMemCopyPlat>
   2a27c:	9b08      	ldr	r3, [sp, #32]
   2a27e:	f104 0802 	add.w	r8, r4, #2
   2a282:	441c      	add	r4, r3
   2a284:	2300      	movs	r3, #0
   2a286:	7063      	strb	r3, [r4, #1]
   2a288:	bb26      	cbnz	r6, 2a2d4 <UtilCmacBuildDataForDerivation+0xa8>
   2a28a:	9b08      	ldr	r3, [sp, #32]
   2a28c:	9500      	str	r5, [sp, #0]
   2a28e:	2dff      	cmp	r5, #255	; 0xff
   2a290:	eb03 0008 	add.w	r0, r3, r8
   2a294:	d917      	bls.n	2a2c6 <UtilCmacBuildDataForDerivation+0x9a>
   2a296:	022b      	lsls	r3, r5, #8
   2a298:	b29b      	uxth	r3, r3
   2a29a:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
   2a29e:	2202      	movs	r2, #2
   2a2a0:	a901      	add	r1, sp, #4
   2a2a2:	9301      	str	r3, [sp, #4]
   2a2a4:	f7fe fafa 	bl	2889c <CC_PalMemCopyPlat>
   2a2a8:	f108 0302 	add.w	r3, r8, #2
   2a2ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a2ae:	2000      	movs	r0, #0
   2a2b0:	6013      	str	r3, [r2, #0]
   2a2b2:	b002      	add	sp, #8
   2a2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a2b8:	b10f      	cbz	r7, 2a2be <UtilCmacBuildDataForDerivation+0x92>
   2a2ba:	2e40      	cmp	r6, #64	; 0x40
   2a2bc:	d9cf      	bls.n	2a25e <UtilCmacBuildDataForDerivation+0x32>
   2a2be:	480a      	ldr	r0, [pc, #40]	; (2a2e8 <UtilCmacBuildDataForDerivation+0xbc>)
   2a2c0:	b002      	add	sp, #8
   2a2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a2c6:	2201      	movs	r2, #1
   2a2c8:	4669      	mov	r1, sp
   2a2ca:	f7fe fae7 	bl	2889c <CC_PalMemCopyPlat>
   2a2ce:	f108 0301 	add.w	r3, r8, #1
   2a2d2:	e7eb      	b.n	2a2ac <UtilCmacBuildDataForDerivation+0x80>
   2a2d4:	9b08      	ldr	r3, [sp, #32]
   2a2d6:	4632      	mov	r2, r6
   2a2d8:	eb03 0008 	add.w	r0, r3, r8
   2a2dc:	4639      	mov	r1, r7
   2a2de:	f7fe fadd 	bl	2889c <CC_PalMemCopyPlat>
   2a2e2:	44b0      	add	r8, r6
   2a2e4:	e7d1      	b.n	2a28a <UtilCmacBuildDataForDerivation+0x5e>
   2a2e6:	bf00      	nop
   2a2e8:	80000006 	.word	0x80000006

0002a2ec <CC_PalDataBufferAttrGet>:
   2a2ec:	2000      	movs	r0, #0
   2a2ee:	7018      	strb	r0, [r3, #0]
   2a2f0:	4770      	bx	lr
   2a2f2:	bf00      	nop

0002a2f4 <user_cb>:
}
   2a2f4:	4770      	bx	lr

0002a2f6 <app_clock_cb>:
	return get_dclock();
   2a2f6:	f7e8 bd2d 	b.w	12d54 <get_dclock>

0002a2fa <app_state_cb>:
{
   2a2fa:	b508      	push	{r3, lr}
	return get_dstate();
   2a2fc:	f7e8 fd42 	bl	12d84 <get_dstate>
}
   2a300:	b2c0      	uxtb	r0, r0
   2a302:	bd08      	pop	{r3, pc}

0002a304 <pair_cb>:
{
   2a304:	b508      	push	{r3, lr}
	start_pairing();
   2a306:	f7e8 fc47 	bl	12b98 <start_pairing>
}
   2a30a:	bd08      	pop	{r3, pc}

0002a30c <update_dclock>:
{
   2a30c:	b508      	push	{r3, lr}
		dclk_send_clock_notify(get_dclock());
   2a30e:	f7e8 fd21 	bl	12d54 <get_dclock>
   2a312:	f7e8 fc91 	bl	12c38 <dclk_send_clock_notify>
		dclk_send_state_notify(get_dstate());
   2a316:	f7e8 fd35 	bl	12d84 <get_dstate>
   2a31a:	b2c0      	uxtb	r0, r0
   2a31c:	f7e8 fc6a 	bl	12bf4 <dclk_send_state_notify>
	return z_impl_k_sleep(timeout);
   2a320:	2100      	movs	r1, #0
   2a322:	f242 6067 	movw	r0, #9831	; 0x2667
   2a326:	f7fc fcb9 	bl	26c9c <z_impl_k_sleep>
	while (1)
   2a32a:	e7f0      	b.n	2a30e <update_dclock+0x2>

0002a32c <z_log_msg_static_create.constprop.0>:
   2a32c:	2300      	movs	r3, #0
   2a32e:	f7ea bc49 	b.w	14bc4 <z_impl_z_log_msg_static_create>

0002a332 <setup_accept_list_cb>:
	if ((*bond_cnt) < 0)
   2a332:	680b      	ldr	r3, [r1, #0]
   2a334:	2b00      	cmp	r3, #0
   2a336:	db01      	blt.n	2a33c <setup_accept_list_cb+0xa>
   2a338:	f7e8 babc 	b.w	128b4 <setup_accept_list_cb.part.0>
}
   2a33c:	4770      	bx	lr

0002a33e <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
   2a33e:	b410      	push	{r4}
   2a340:	4603      	mov	r3, r0
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   2a342:	6800      	ldr	r0, [r0, #0]
   2a344:	7919      	ldrb	r1, [r3, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2a346:	6883      	ldr	r3, [r0, #8]
   2a348:	699c      	ldr	r4, [r3, #24]
   2a34a:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   2a34e:	46a4      	mov	ip, r4
   2a350:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
   2a354:	bc10      	pop	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2a356:	4760      	bx	ip

0002a358 <gpio_pin_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   2a358:	b470      	push	{r4, r5, r6}
   2a35a:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
   2a35c:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2a35e:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2a360:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
   2a362:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
   2a366:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   2a368:	6886      	ldr	r6, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2a36a:	f013 0f01 	tst.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2a36e:	f04f 0401 	mov.w	r4, #1
   2a372:	682b      	ldr	r3, [r5, #0]
   2a374:	fa04 f401 	lsl.w	r4, r4, r1
   2a378:	bf14      	ite	ne
   2a37a:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2a37c:	43a3      	biceq	r3, r4
   2a37e:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   2a380:	6833      	ldr	r3, [r6, #0]
}
   2a382:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   2a384:	4718      	bx	r3

0002a386 <cbpprintf_external>:
{
   2a386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a38a:	4606      	mov	r6, r0
   2a38c:	460d      	mov	r5, r1
   2a38e:	4617      	mov	r7, r2
	if (buf == NULL) {
   2a390:	4698      	mov	r8, r3
   2a392:	b32b      	cbz	r3, 2a3e0 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a394:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2a398:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a39c:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a39e:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a3a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2a3a4:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a3a8:	441c      	add	r4, r3
   2a3aa:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2a3ac:	f04f 0a00 	mov.w	sl, #0
   2a3b0:	45ca      	cmp	sl, r9
   2a3b2:	d309      	bcc.n	2a3c8 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   2a3b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2a3b8:	f108 0308 	add.w	r3, r8, #8
   2a3bc:	4639      	mov	r1, r7
   2a3be:	4630      	mov	r0, r6
   2a3c0:	46ac      	mov	ip, r5
}
   2a3c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2a3c6:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2a3c8:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   2a3cc:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2a3d0:	4620      	mov	r0, r4
   2a3d2:	f001 ff2d 	bl	2c230 <strlen>
   2a3d6:	3001      	adds	r0, #1
   2a3d8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2a3da:	f10a 0a01 	add.w	sl, sl, #1
   2a3de:	e7e7      	b.n	2a3b0 <cbpprintf_external+0x2a>
}
   2a3e0:	f06f 0015 	mvn.w	r0, #21
   2a3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a3e8 <is_ptr>:
{
   2a3e8:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   2a3ea:	2500      	movs	r5, #0
{
   2a3ec:	4602      	mov	r2, r0
	bool mod = false;
   2a3ee:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   2a3f0:	4614      	mov	r4, r2
   2a3f2:	f814 3b01 	ldrb.w	r3, [r4], #1
   2a3f6:	b90b      	cbnz	r3, 2a3fc <is_ptr+0x14>
					return false;
   2a3f8:	4618      	mov	r0, r3
   2a3fa:	e009      	b.n	2a410 <is_ptr+0x28>
		if (mod) {
   2a3fc:	b198      	cbz	r0, 2a426 <is_ptr+0x3e>
			if (cnt == n) {
   2a3fe:	428d      	cmp	r5, r1
   2a400:	d107      	bne.n	2a412 <is_ptr+0x2a>
				if (c == 'p') {
   2a402:	2b70      	cmp	r3, #112	; 0x70
   2a404:	d004      	beq.n	2a410 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   2a406:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   2a40a:	2a3a      	cmp	r2, #58	; 0x3a
   2a40c:	d80b      	bhi.n	2a426 <is_ptr+0x3e>
					return false;
   2a40e:	2000      	movs	r0, #0
}
   2a410:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   2a412:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   2a416:	2e3a      	cmp	r6, #58	; 0x3a
   2a418:	d805      	bhi.n	2a426 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   2a41a:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2a41c:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2a41e:	1c94      	adds	r4, r2, #2
   2a420:	2b00      	cmp	r3, #0
   2a422:	d0e9      	beq.n	2a3f8 <is_ptr+0x10>
   2a424:	2000      	movs	r0, #0
		if (c == '%') {
   2a426:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   2a428:	bf08      	it	eq
   2a42a:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   2a42e:	4622      	mov	r2, r4
   2a430:	e7de      	b.n	2a3f0 <is_ptr+0x8>

0002a432 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   2a432:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   2a434:	2364      	movs	r3, #100	; 0x64
{
   2a436:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   2a438:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   2a43a:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2a43c:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   2a43e:	b969      	cbnz	r1, 2a45c <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   2a440:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2a442:	429a      	cmp	r2, r3
   2a444:	fbb2 f4f3 	udiv	r4, r2, r3
   2a448:	d20c      	bcs.n	2a464 <u8_to_dec+0x32>
   2a44a:	2b01      	cmp	r3, #1
   2a44c:	d00a      	beq.n	2a464 <u8_to_dec+0x32>
   2a44e:	b948      	cbnz	r0, 2a464 <u8_to_dec+0x32>
		value -= digit * divisor;
   2a450:	fb03 2214 	mls	r2, r3, r4, r2
   2a454:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2a456:	240a      	movs	r4, #10
   2a458:	fbb3 f3f4 	udiv	r3, r3, r4
	while (buflen > 0 && divisor > 0) {
   2a45c:	3e01      	subs	r6, #1
   2a45e:	d1f0      	bne.n	2a442 <u8_to_dec+0x10>
		*buf = '\0';
   2a460:	702e      	strb	r6, [r5, #0]
	return num_digits;
   2a462:	e7ed      	b.n	2a440 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   2a464:	3430      	adds	r4, #48	; 0x30
   2a466:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   2a46a:	fbb2 f4f3 	udiv	r4, r2, r3
   2a46e:	3901      	subs	r1, #1
   2a470:	fb03 2214 	mls	r2, r3, r4, r2
			num_digits++;
   2a474:	3001      	adds	r0, #1
		divisor /= 10;
   2a476:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   2a47a:	b2c9      	uxtb	r1, r1
			num_digits++;
   2a47c:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   2a47e:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2a480:	b2db      	uxtb	r3, r3
   2a482:	e7dc      	b.n	2a43e <u8_to_dec+0xc>

0002a484 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2a484:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2a488:	b2db      	uxtb	r3, r3
   2a48a:	2b09      	cmp	r3, #9
   2a48c:	d802      	bhi.n	2a494 <char2hex+0x10>
		*x = c - '0';
   2a48e:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2a490:	2000      	movs	r0, #0
   2a492:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2a494:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2a498:	2b05      	cmp	r3, #5
   2a49a:	d802      	bhi.n	2a4a2 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2a49c:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   2a49e:	b2c3      	uxtb	r3, r0
   2a4a0:	e7f5      	b.n	2a48e <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   2a4a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2a4a6:	2b05      	cmp	r3, #5
   2a4a8:	d801      	bhi.n	2a4ae <char2hex+0x2a>
		*x = c - 'A' + 10;
   2a4aa:	3837      	subs	r0, #55	; 0x37
   2a4ac:	e7f7      	b.n	2a49e <char2hex+0x1a>
		return -EINVAL;
   2a4ae:	f06f 0015 	mvn.w	r0, #21
}
   2a4b2:	4770      	bx	lr

0002a4b4 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2a4b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a4b6:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2a4b8:	f001 0001 	and.w	r0, r1, #1
   2a4bc:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   2a4c0:	429e      	cmp	r6, r3
   2a4c2:	ea4f 0751 	mov.w	r7, r1, lsr #1
   2a4c6:	d903      	bls.n	2a4d0 <hex2bin+0x1c>
		return 0;
   2a4c8:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2a4ca:	4630      	mov	r0, r6
   2a4cc:	b003      	add	sp, #12
   2a4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2a4d0:	b158      	cbz	r0, 2a4ea <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2a4d2:	7828      	ldrb	r0, [r5, #0]
   2a4d4:	f10d 0107 	add.w	r1, sp, #7
   2a4d8:	f7ff ffd4 	bl	2a484 <char2hex>
   2a4dc:	2800      	cmp	r0, #0
   2a4de:	dbf3      	blt.n	2a4c8 <hex2bin+0x14>
		buf[0] = dec;
   2a4e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a4e4:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   2a4e8:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2a4ea:	3501      	adds	r5, #1
   2a4ec:	4417      	add	r7, r2
   2a4ee:	42ba      	cmp	r2, r7
   2a4f0:	d0eb      	beq.n	2a4ca <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2a4f2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   2a4f6:	f10d 0107 	add.w	r1, sp, #7
   2a4fa:	f7ff ffc3 	bl	2a484 <char2hex>
   2a4fe:	2800      	cmp	r0, #0
   2a500:	dbe2      	blt.n	2a4c8 <hex2bin+0x14>
		buf[i] = dec << 4;
   2a502:	f89d 4007 	ldrb.w	r4, [sp, #7]
   2a506:	0124      	lsls	r4, r4, #4
   2a508:	b2e4      	uxtb	r4, r4
   2a50a:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2a50c:	f815 0b02 	ldrb.w	r0, [r5], #2
   2a510:	f7ff ffb8 	bl	2a484 <char2hex>
   2a514:	2800      	cmp	r0, #0
   2a516:	dbd7      	blt.n	2a4c8 <hex2bin+0x14>
		buf[i] += dec;
   2a518:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a51c:	441c      	add	r4, r3
   2a51e:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2a522:	e7e4      	b.n	2a4ee <hex2bin+0x3a>

0002a524 <arch_printk_char_out>:
}
   2a524:	2000      	movs	r0, #0
   2a526:	4770      	bx	lr

0002a528 <str_out>:
{
   2a528:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a52a:	688a      	ldr	r2, [r1, #8]
   2a52c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2a52e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a530:	b114      	cbz	r4, 2a538 <str_out+0x10>
   2a532:	684b      	ldr	r3, [r1, #4]
   2a534:	4293      	cmp	r3, r2
   2a536:	dc01      	bgt.n	2a53c <str_out+0x14>
		ctx->count++;
   2a538:	608d      	str	r5, [r1, #8]
}
   2a53a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2a53c:	3b01      	subs	r3, #1
   2a53e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2a540:	bf08      	it	eq
   2a542:	2200      	moveq	r2, #0
   2a544:	608d      	str	r5, [r1, #8]
   2a546:	bf0c      	ite	eq
   2a548:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2a54a:	54a0      	strbne	r0, [r4, r2]
   2a54c:	e7f5      	b.n	2a53a <str_out+0x12>

0002a54e <vprintk>:
		z_log_vprintk(fmt, ap);
   2a54e:	f001 b909 	b.w	2b764 <z_log_vprintk>

0002a552 <printk>:
{
   2a552:	b40f      	push	{r0, r1, r2, r3}
   2a554:	b507      	push	{r0, r1, r2, lr}
   2a556:	a904      	add	r1, sp, #16
   2a558:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2a55c:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   2a55e:	f001 f901 	bl	2b764 <z_log_vprintk>
}
   2a562:	b003      	add	sp, #12
   2a564:	f85d eb04 	ldr.w	lr, [sp], #4
   2a568:	b004      	add	sp, #16
   2a56a:	4770      	bx	lr

0002a56c <snprintk>:
{
   2a56c:	b40c      	push	{r2, r3}
   2a56e:	b507      	push	{r0, r1, r2, lr}
   2a570:	ab04      	add	r3, sp, #16
   2a572:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2a576:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2a578:	f7e9 f834 	bl	135e4 <vsnprintk>
}
   2a57c:	b003      	add	sp, #12
   2a57e:	f85d eb04 	ldr.w	lr, [sp], #4
   2a582:	b002      	add	sp, #8
   2a584:	4770      	bx	lr

0002a586 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2a586:	4604      	mov	r4, r0
   2a588:	b508      	push	{r3, lr}
   2a58a:	4608      	mov	r0, r1
   2a58c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2a58e:	461a      	mov	r2, r3
   2a590:	47a0      	blx	r4
	return z_impl_z_current_get();
   2a592:	f7fc fbb7 	bl	26d04 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2a596:	f7ed f8dd 	bl	17754 <z_impl_k_thread_abort>

0002a59a <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2a59a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2a59e:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2a5a0:	0840      	lsrs	r0, r0, #1
   2a5a2:	4770      	bx	lr

0002a5a4 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   2a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a5a6:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a5a8:	f7ff fff7 	bl	2a59a <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2a5ac:	fab0 f080 	clz	r0, r0
   2a5b0:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2a5b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   2a5b8:	00ca      	lsls	r2, r1, #3
   2a5ba:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2a5be:	1d17      	adds	r7, r2, #4
{
   2a5c0:	460c      	mov	r4, r1
   2a5c2:	3206      	adds	r2, #6
   2a5c4:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2a5c6:	b956      	cbnz	r6, 2a5de <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2a5c8:	2101      	movs	r1, #1
   2a5ca:	fa01 f000 	lsl.w	r0, r1, r0
   2a5ce:	68d9      	ldr	r1, [r3, #12]
   2a5d0:	4301      	orrs	r1, r0
   2a5d2:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2a5d4:	f8cc 4010 	str.w	r4, [ip, #16]
   2a5d8:	53dd      	strh	r5, [r3, r7]
   2a5da:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2a5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2a5de:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2a5e0:	3104      	adds	r1, #4
   2a5e2:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2a5e4:	53d8      	strh	r0, [r3, r7]
   2a5e6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2a5ea:	529e      	strh	r6, [r3, r2]
   2a5ec:	80c5      	strh	r5, [r0, #6]
   2a5ee:	525d      	strh	r5, [r3, r1]
   2a5f0:	e7f4      	b.n	2a5dc <free_list_add+0x38>

0002a5f2 <free_list_remove_bidx>:
{
   2a5f2:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2a5f4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2a5f8:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2a5fa:	4299      	cmp	r1, r3
   2a5fc:	f102 0104 	add.w	r1, r2, #4
   2a600:	d10a      	bne.n	2a618 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2a602:	2301      	movs	r3, #1
   2a604:	fa03 f202 	lsl.w	r2, r3, r2
   2a608:	68c3      	ldr	r3, [r0, #12]
   2a60a:	ea23 0302 	bic.w	r3, r3, r2
   2a60e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2a610:	2300      	movs	r3, #0
   2a612:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2a616:	bd10      	pop	{r4, pc}
   2a618:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2a61a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2a61e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2a622:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2a626:	80cb      	strh	r3, [r1, #6]
   2a628:	8082      	strh	r2, [r0, #4]
}
   2a62a:	e7f4      	b.n	2a616 <free_list_remove_bidx+0x24>

0002a62c <free_list_remove>:
{
   2a62c:	b508      	push	{r3, lr}
   2a62e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a630:	f7ff ffb3 	bl	2a59a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2a634:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2a638:	f1c2 021f 	rsb	r2, r2, #31
   2a63c:	4618      	mov	r0, r3
}
   2a63e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2a642:	f7ff bfd6 	b.w	2a5f2 <free_list_remove_bidx>

0002a646 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2a646:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a64a:	fab1 f581 	clz	r5, r1
   2a64e:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2a652:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   2a656:	4603      	mov	r3, r0
	if (b->next) {
   2a658:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2a65c:	460e      	mov	r6, r1
	if (b->next) {
   2a65e:	b1c2      	cbz	r2, 2a692 <alloc_chunk+0x4c>
   2a660:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2a662:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2a666:	4618      	mov	r0, r3
   2a668:	4621      	mov	r1, r4
   2a66a:	f7ff ff96 	bl	2a59a <chunk_size>
   2a66e:	42b0      	cmp	r0, r6
   2a670:	d306      	bcc.n	2a680 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2a672:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2a674:	4618      	mov	r0, r3
   2a676:	f7ff ffbc 	bl	2a5f2 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2a67a:	4620      	mov	r0, r4
   2a67c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2a680:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   2a684:	3f01      	subs	r7, #1
   2a686:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   2a688:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2a68c:	d001      	beq.n	2a692 <alloc_chunk+0x4c>
   2a68e:	4282      	cmp	r2, r0
   2a690:	d1e7      	bne.n	2a662 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2a692:	f1c5 0220 	rsb	r2, r5, #32
   2a696:	f04f 34ff 	mov.w	r4, #4294967295
   2a69a:	4094      	lsls	r4, r2
   2a69c:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2a69e:	4014      	ands	r4, r2
   2a6a0:	d0eb      	beq.n	2a67a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2a6a2:	fa94 f2a4 	rbit	r2, r4
   2a6a6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2a6aa:	1d11      	adds	r1, r2, #4
   2a6ac:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2a6b0:	4621      	mov	r1, r4
   2a6b2:	e7df      	b.n	2a674 <alloc_chunk+0x2e>

0002a6b4 <merge_chunks>:
{
   2a6b4:	b538      	push	{r3, r4, r5, lr}
   2a6b6:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a6b8:	f7ff ff6f 	bl	2a59a <chunk_size>
{
   2a6bc:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a6be:	4604      	mov	r4, r0
   2a6c0:	4611      	mov	r1, r2
   2a6c2:	4618      	mov	r0, r3
   2a6c4:	f7ff ff69 	bl	2a59a <chunk_size>
		((uint16_t *)cmem)[f] = val;
   2a6c8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2a6cc:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a6ce:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2a6d0:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2a6d2:	4618      	mov	r0, r3
   2a6d4:	f7ff ff61 	bl	2a59a <chunk_size>
	void *cmem = &buf[c];
   2a6d8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a6da:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2a6de:	bd38      	pop	{r3, r4, r5, pc}

0002a6e0 <split_chunks>:
{
   2a6e0:	b538      	push	{r3, r4, r5, lr}
   2a6e2:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2a6e4:	f7ff ff59 	bl	2a59a <chunk_size>
{
   2a6e8:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   2a6ea:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2a6ec:	1a51      	subs	r1, r2, r1
   2a6ee:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   2a6f2:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a6f4:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2a6f6:	8060      	strh	r0, [r4, #2]
   2a6f8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a6fc:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2a6fe:	8044      	strh	r4, [r0, #2]
   2a700:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2a704:	4618      	mov	r0, r3
   2a706:	4611      	mov	r1, r2
   2a708:	f7ff ff47 	bl	2a59a <chunk_size>
	void *cmem = &buf[c];
   2a70c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a70e:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2a712:	bd38      	pop	{r3, r4, r5, pc}

0002a714 <free_chunk>:
{
   2a714:	b538      	push	{r3, r4, r5, lr}
   2a716:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2a718:	f7ff ff3f 	bl	2a59a <chunk_size>
   2a71c:	460c      	mov	r4, r1
   2a71e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2a720:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a724:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2a726:	07da      	lsls	r2, r3, #31
   2a728:	d40a      	bmi.n	2a740 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2a72a:	4628      	mov	r0, r5
   2a72c:	f7ff ff7e 	bl	2a62c <free_list_remove>
	return c + chunk_size(h, c);
   2a730:	4621      	mov	r1, r4
   2a732:	4628      	mov	r0, r5
   2a734:	f7ff ff31 	bl	2a59a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2a738:	1822      	adds	r2, r4, r0
   2a73a:	4628      	mov	r0, r5
   2a73c:	f7ff ffba 	bl	2a6b4 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2a740:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a744:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2a746:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a74a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2a74c:	07db      	lsls	r3, r3, #31
   2a74e:	d40c      	bmi.n	2a76a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2a750:	4628      	mov	r0, r5
   2a752:	f7ff ff6b 	bl	2a62c <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2a756:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2a75a:	4622      	mov	r2, r4
   2a75c:	1a61      	subs	r1, r4, r1
   2a75e:	4628      	mov	r0, r5
   2a760:	f7ff ffa8 	bl	2a6b4 <merge_chunks>
   2a764:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a768:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2a76a:	4621      	mov	r1, r4
   2a76c:	4628      	mov	r0, r5
}
   2a76e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2a772:	f7ff bf17 	b.w	2a5a4 <free_list_add>

0002a776 <sys_heap_free>:
	if (mem == NULL) {
   2a776:	b161      	cbz	r1, 2a792 <sys_heap_free+0x1c>
   2a778:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a77a:	3904      	subs	r1, #4
   2a77c:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2a77e:	f021 0307 	bic.w	r3, r1, #7
   2a782:	4403      	add	r3, r0
	free_chunk(h, c);
   2a784:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2a786:	885a      	ldrh	r2, [r3, #2]
   2a788:	f022 0201 	bic.w	r2, r2, #1
   2a78c:	805a      	strh	r2, [r3, #2]
   2a78e:	f7ff bfc1 	b.w	2a714 <free_chunk>
}
   2a792:	4770      	bx	lr

0002a794 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2a794:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2a796:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2a798:	b909      	cbnz	r1, 2a79e <sys_heap_alloc+0xa>
		return NULL;
   2a79a:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2a79c:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2a79e:	68ab      	ldr	r3, [r5, #8]
   2a7a0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2a7a4:	d9f9      	bls.n	2a79a <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a7a6:	310b      	adds	r1, #11
   2a7a8:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2a7aa:	4621      	mov	r1, r4
   2a7ac:	4628      	mov	r0, r5
   2a7ae:	f7ff ff4a 	bl	2a646 <alloc_chunk>
	if (c == 0U) {
   2a7b2:	4606      	mov	r6, r0
   2a7b4:	2800      	cmp	r0, #0
   2a7b6:	d0f0      	beq.n	2a79a <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2a7b8:	4601      	mov	r1, r0
   2a7ba:	4628      	mov	r0, r5
   2a7bc:	f7ff feed 	bl	2a59a <chunk_size>
   2a7c0:	42a0      	cmp	r0, r4
   2a7c2:	d907      	bls.n	2a7d4 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2a7c4:	1932      	adds	r2, r6, r4
   2a7c6:	4628      	mov	r0, r5
   2a7c8:	f7ff ff8a 	bl	2a6e0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2a7cc:	4611      	mov	r1, r2
   2a7ce:	4628      	mov	r0, r5
   2a7d0:	f7ff fee8 	bl	2a5a4 <free_list_add>
	void *cmem = &buf[c];
   2a7d4:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2a7d8:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a7da:	8853      	ldrh	r3, [r2, #2]
   2a7dc:	f043 0301 	orr.w	r3, r3, #1
   2a7e0:	8053      	strh	r3, [r2, #2]
   2a7e2:	3004      	adds	r0, #4
	return mem;
   2a7e4:	e7da      	b.n	2a79c <sys_heap_alloc+0x8>

0002a7e6 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2a7e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a7ea:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   2a7ee:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   2a7f2:	6806      	ldr	r6, [r0, #0]
{
   2a7f4:	460f      	mov	r7, r1
   2a7f6:	4614      	mov	r4, r2
	if (align != rew) {
   2a7f8:	d00c      	beq.n	2a814 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   2a7fa:	424b      	negs	r3, r1
   2a7fc:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   2a7fe:	2b04      	cmp	r3, #4
   2a800:	461a      	mov	r2, r3
   2a802:	464f      	mov	r7, r9
   2a804:	bf28      	it	cs
   2a806:	2204      	movcs	r2, #4
	rew = align & -align;
   2a808:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2a80a:	b964      	cbnz	r4, 2a826 <sys_heap_aligned_alloc+0x40>
		return NULL;
   2a80c:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2a80e:	4628      	mov	r0, r5
   2a810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2a814:	2904      	cmp	r1, #4
   2a816:	d804      	bhi.n	2a822 <sys_heap_aligned_alloc+0x3c>
}
   2a818:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2a81c:	4611      	mov	r1, r2
   2a81e:	f7ff bfb9 	b.w	2a794 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   2a822:	2204      	movs	r2, #4
   2a824:	e7f1      	b.n	2a80a <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   2a826:	68b3      	ldr	r3, [r6, #8]
   2a828:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2a82c:	d9ee      	bls.n	2a80c <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a82e:	f104 010b 	add.w	r1, r4, #11
   2a832:	4439      	add	r1, r7
   2a834:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2a836:	08c9      	lsrs	r1, r1, #3
   2a838:	4630      	mov	r0, r6
   2a83a:	f7ff ff04 	bl	2a646 <alloc_chunk>
	if (c0 == 0) {
   2a83e:	4680      	mov	r8, r0
   2a840:	2800      	cmp	r0, #0
   2a842:	d0e3      	beq.n	2a80c <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2a844:	f109 0504 	add.w	r5, r9, #4
   2a848:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2a84c:	1e7b      	subs	r3, r7, #1
   2a84e:	4435      	add	r5, r6
   2a850:	441d      	add	r5, r3
   2a852:	427f      	negs	r7, r7
   2a854:	403d      	ands	r5, r7
   2a856:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2a85a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a85c:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2a85e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a860:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2a862:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2a866:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2a868:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a86c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2a870:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2a874:	d208      	bcs.n	2a888 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   2a876:	4601      	mov	r1, r0
   2a878:	463a      	mov	r2, r7
   2a87a:	4630      	mov	r0, r6
   2a87c:	f7ff ff30 	bl	2a6e0 <split_chunks>
		free_list_add(h, c0);
   2a880:	4641      	mov	r1, r8
   2a882:	4630      	mov	r0, r6
   2a884:	f7ff fe8e 	bl	2a5a4 <free_list_add>
	return c + chunk_size(h, c);
   2a888:	4639      	mov	r1, r7
   2a88a:	4630      	mov	r0, r6
   2a88c:	f7ff fe85 	bl	2a59a <chunk_size>
   2a890:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2a892:	4284      	cmp	r4, r0
   2a894:	d207      	bcs.n	2a8a6 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   2a896:	4630      	mov	r0, r6
   2a898:	4622      	mov	r2, r4
   2a89a:	f7ff ff21 	bl	2a6e0 <split_chunks>
		free_list_add(h, c_end);
   2a89e:	4621      	mov	r1, r4
   2a8a0:	4630      	mov	r0, r6
   2a8a2:	f7ff fe7f 	bl	2a5a4 <free_list_add>
	void *cmem = &buf[c];
   2a8a6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a8aa:	8873      	ldrh	r3, [r6, #2]
   2a8ac:	f043 0301 	orr.w	r3, r3, #1
   2a8b0:	8073      	strh	r3, [r6, #2]
   2a8b2:	e7ac      	b.n	2a80e <sys_heap_aligned_alloc+0x28>

0002a8b4 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2a8b4:	3a04      	subs	r2, #4
{
   2a8b6:	b4f0      	push	{r4, r5, r6, r7}
   2a8b8:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2a8ba:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2a8bc:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2a8be:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2a8c2:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2a8c6:	1a0e      	subs	r6, r1, r0
   2a8c8:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2a8ca:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   2a8cc:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   2a8d0:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2a8d2:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   2a8d6:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   2a8d8:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2a8da:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   2a8dc:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a8e0:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2a8e2:	f1c2 0220 	rsb	r2, r2, #32
   2a8e6:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2a8e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   2a8ec:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   2a8f0:	4294      	cmp	r4, r2
   2a8f2:	d1fb      	bne.n	2a8ec <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a8f4:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a8f6:	f042 0201 	orr.w	r2, r2, #1
   2a8fa:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   2a8fc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2a900:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a902:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   2a904:	8007      	strh	r7, [r0, #0]
   2a906:	8065      	strh	r5, [r4, #2]
   2a908:	1984      	adds	r4, r0, r6
   2a90a:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   2a90e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   2a912:	8067      	strh	r7, [r4, #2]
   2a914:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a916:	885a      	ldrh	r2, [r3, #2]
   2a918:	f042 0201 	orr.w	r2, r2, #1
   2a91c:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   2a91e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   2a920:	f7ff be40 	b.w	2a5a4 <free_list_add>

0002a924 <sys_slist_find_and_remove>:
	return list->head;
   2a924:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a926:	2200      	movs	r2, #0
   2a928:	b90b      	cbnz	r3, 2a92e <sys_slist_find_and_remove+0xa>
   2a92a:	4618      	mov	r0, r3
   2a92c:	4770      	bx	lr
   2a92e:	428b      	cmp	r3, r1
   2a930:	d110      	bne.n	2a954 <sys_slist_find_and_remove+0x30>
	return node->next;
   2a932:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a934:	b942      	cbnz	r2, 2a948 <sys_slist_find_and_remove+0x24>
   2a936:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2a938:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a93a:	4291      	cmp	r1, r2
   2a93c:	d100      	bne.n	2a940 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2a93e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2a940:	2300      	movs	r3, #0
   2a942:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a944:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2a946:	4770      	bx	lr
	parent->next = child;
   2a948:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a94a:	6843      	ldr	r3, [r0, #4]
   2a94c:	4299      	cmp	r1, r3
	list->tail = node;
   2a94e:	bf08      	it	eq
   2a950:	6042      	streq	r2, [r0, #4]
}
   2a952:	e7f5      	b.n	2a940 <sys_slist_find_and_remove+0x1c>
	return node->next;
   2a954:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a956:	681b      	ldr	r3, [r3, #0]
   2a958:	e7e6      	b.n	2a928 <sys_slist_find_and_remove+0x4>

0002a95a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a95a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2a95c:	f013 0307 	ands.w	r3, r3, #7
   2a960:	d105      	bne.n	2a96e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2a962:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2a964:	2b00      	cmp	r3, #0
   2a966:	bf0c      	ite	eq
   2a968:	2000      	moveq	r0, #0
   2a96a:	2003      	movne	r0, #3
   2a96c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2a96e:	2b02      	cmp	r3, #2
   2a970:	d105      	bne.n	2a97e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2a972:	8b40      	ldrh	r0, [r0, #26]
   2a974:	fab0 f080 	clz	r0, r0
   2a978:	0940      	lsrs	r0, r0, #5
   2a97a:	0080      	lsls	r0, r0, #2
   2a97c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2a97e:	2b01      	cmp	r3, #1
   2a980:	d105      	bne.n	2a98e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2a982:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2a984:	2b00      	cmp	r3, #0
   2a986:	bf0c      	ite	eq
   2a988:	2000      	moveq	r0, #0
   2a98a:	2005      	movne	r0, #5
   2a98c:	4770      	bx	lr
	int evt = EVT_NOP;
   2a98e:	2000      	movs	r0, #0
}
   2a990:	4770      	bx	lr

0002a992 <validate_args>:
{
   2a992:	b510      	push	{r4, lr}
   2a994:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2a996:	b100      	cbz	r0, 2a99a <validate_args+0x8>
   2a998:	b911      	cbnz	r1, 2a9a0 <validate_args+0xe>
		return -EINVAL;
   2a99a:	f06f 0015 	mvn.w	r0, #21
}
   2a99e:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2a9a0:	1d08      	adds	r0, r1, #4
   2a9a2:	f000 f8d6 	bl	2ab52 <sys_notify_validate>
	if ((rv == 0)
   2a9a6:	2800      	cmp	r0, #0
   2a9a8:	d1f9      	bne.n	2a99e <validate_args+0xc>
	    && ((cli->notify.flags
   2a9aa:	68a3      	ldr	r3, [r4, #8]
   2a9ac:	2b03      	cmp	r3, #3
   2a9ae:	d9f6      	bls.n	2a99e <validate_args+0xc>
   2a9b0:	e7f3      	b.n	2a99a <validate_args+0x8>

0002a9b2 <notify_one>:
{
   2a9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a9b6:	460d      	mov	r5, r1
   2a9b8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a9ba:	4619      	mov	r1, r3
   2a9bc:	1d28      	adds	r0, r5, #4
{
   2a9be:	4690      	mov	r8, r2
   2a9c0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a9c2:	f000 f8da 	bl	2ab7a <sys_notify_finalize>
	if (cb) {
   2a9c6:	4604      	mov	r4, r0
   2a9c8:	b138      	cbz	r0, 2a9da <notify_one+0x28>
		cb(mgr, cli, state, res);
   2a9ca:	4633      	mov	r3, r6
   2a9cc:	4642      	mov	r2, r8
   2a9ce:	4629      	mov	r1, r5
   2a9d0:	4638      	mov	r0, r7
   2a9d2:	46a4      	mov	ip, r4
}
   2a9d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2a9d8:	4760      	bx	ip
}
   2a9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a9de <transition_complete>:
{
   2a9de:	b410      	push	{r4}
	__asm__ volatile(
   2a9e0:	f04f 0440 	mov.w	r4, #64	; 0x40
   2a9e4:	f3ef 8211 	mrs	r2, BASEPRI
   2a9e8:	f384 8812 	msr	BASEPRI_MAX, r4
   2a9ec:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2a9f0:	6141      	str	r1, [r0, #20]
}
   2a9f2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   2a9f4:	2101      	movs	r1, #1
   2a9f6:	f7e8 be0b 	b.w	13610 <process_event>

0002a9fa <onoff_manager_init>:
{
   2a9fa:	b538      	push	{r3, r4, r5, lr}
   2a9fc:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2a9fe:	4605      	mov	r5, r0
   2aa00:	b158      	cbz	r0, 2aa1a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2aa02:	b151      	cbz	r1, 2aa1a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2aa04:	680b      	ldr	r3, [r1, #0]
   2aa06:	b143      	cbz	r3, 2aa1a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2aa08:	684b      	ldr	r3, [r1, #4]
   2aa0a:	b133      	cbz	r3, 2aa1a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2aa0c:	221c      	movs	r2, #28
   2aa0e:	2100      	movs	r1, #0
   2aa10:	f001 fc70 	bl	2c2f4 <memset>
   2aa14:	612c      	str	r4, [r5, #16]
	return 0;
   2aa16:	2000      	movs	r0, #0
}
   2aa18:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2aa1a:	f06f 0015 	mvn.w	r0, #21
   2aa1e:	e7fb      	b.n	2aa18 <onoff_manager_init+0x1e>

0002aa20 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2aa20:	b570      	push	{r4, r5, r6, lr}
   2aa22:	4605      	mov	r5, r0
   2aa24:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2aa26:	f7ff ffb4 	bl	2a992 <validate_args>

	if (rv < 0) {
   2aa2a:	1e04      	subs	r4, r0, #0
   2aa2c:	db15      	blt.n	2aa5a <onoff_request+0x3a>
   2aa2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2aa32:	f3ef 8211 	mrs	r2, BASEPRI
   2aa36:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa3a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2aa3e:	8b6b      	ldrh	r3, [r5, #26]
   2aa40:	8b2c      	ldrh	r4, [r5, #24]
   2aa42:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2aa46:	428b      	cmp	r3, r1
   2aa48:	f004 0407 	and.w	r4, r4, #7
   2aa4c:	d107      	bne.n	2aa5e <onoff_request+0x3e>
	__asm__ volatile(
   2aa4e:	f382 8811 	msr	BASEPRI, r2
   2aa52:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   2aa56:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   2aa5a:	4620      	mov	r0, r4
   2aa5c:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   2aa5e:	2c02      	cmp	r4, #2
   2aa60:	d10c      	bne.n	2aa7c <onoff_request+0x5c>
		mgr->refs += 1U;
   2aa62:	3301      	adds	r3, #1
   2aa64:	836b      	strh	r3, [r5, #26]
   2aa66:	f382 8811 	msr	BASEPRI, r2
   2aa6a:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   2aa6e:	2300      	movs	r3, #0
   2aa70:	4622      	mov	r2, r4
   2aa72:	4631      	mov	r1, r6
   2aa74:	4628      	mov	r0, r5
   2aa76:	f7ff ff9c 	bl	2a9b2 <notify_one>
   2aa7a:	e7ee      	b.n	2aa5a <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   2aa7c:	2c06      	cmp	r4, #6
   2aa7e:	d814      	bhi.n	2aaaa <onoff_request+0x8a>
   2aa80:	e8df f004 	tbb	[pc, r4]
   2aa84:	13131304 	.word	0x13131304
   2aa88:	1a04      	.short	0x1a04
   2aa8a:	04          	.byte	0x04
   2aa8b:	00          	.byte	0x00
	parent->next = child;
   2aa8c:	2300      	movs	r3, #0
   2aa8e:	6033      	str	r3, [r6, #0]
	return list->tail;
   2aa90:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   2aa92:	b93b      	cbnz	r3, 2aaa4 <onoff_request+0x84>
	list->head = node;
   2aa94:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   2aa98:	b9ac      	cbnz	r4, 2aac6 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   2aa9a:	2102      	movs	r1, #2
   2aa9c:	4628      	mov	r0, r5
   2aa9e:	f7e8 fdb7 	bl	13610 <process_event>
   2aaa2:	e7da      	b.n	2aa5a <onoff_request+0x3a>
	parent->next = child;
   2aaa4:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2aaa6:	606e      	str	r6, [r5, #4]
}
   2aaa8:	e7f6      	b.n	2aa98 <onoff_request+0x78>
   2aaaa:	f382 8811 	msr	BASEPRI, r2
   2aaae:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   2aab2:	f06f 0404 	mvn.w	r4, #4
   2aab6:	e7d0      	b.n	2aa5a <onoff_request+0x3a>
   2aab8:	f382 8811 	msr	BASEPRI, r2
   2aabc:	f3bf 8f6f 	isb	sy
   2aac0:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2aac4:	e7c9      	b.n	2aa5a <onoff_request+0x3a>
   2aac6:	f382 8811 	msr	BASEPRI, r2
   2aaca:	f3bf 8f6f 	isb	sy
		if (notify) {
   2aace:	e7c4      	b.n	2aa5a <onoff_request+0x3a>

0002aad0 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   2aad0:	b510      	push	{r4, lr}
	__asm__ volatile(
   2aad2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2aad6:	f3ef 8211 	mrs	r2, BASEPRI
   2aada:	f383 8812 	msr	BASEPRI_MAX, r3
   2aade:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2aae2:	8b04      	ldrh	r4, [r0, #24]
   2aae4:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   2aae8:	2c02      	cmp	r4, #2
   2aaea:	d00a      	beq.n	2ab02 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   2aaec:	2c01      	cmp	r4, #1
   2aaee:	bf0c      	ite	eq
   2aaf0:	f06f 0004 	mvneq.w	r0, #4
   2aaf4:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   2aaf8:	f382 8811 	msr	BASEPRI, r2
   2aafc:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   2ab00:	e008      	b.n	2ab14 <onoff_release+0x44>
	mgr->refs -= 1U;
   2ab02:	8b43      	ldrh	r3, [r0, #26]
   2ab04:	3b01      	subs	r3, #1
   2ab06:	b29b      	uxth	r3, r3
   2ab08:	8343      	strh	r3, [r0, #26]
	if (stop) {
   2ab0a:	b923      	cbnz	r3, 2ab16 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   2ab0c:	4621      	mov	r1, r4
   2ab0e:	f7e8 fd7f 	bl	13610 <process_event>
	int rv = state;
   2ab12:	4620      	mov	r0, r4
}
   2ab14:	bd10      	pop	{r4, pc}
	int rv = state;
   2ab16:	4620      	mov	r0, r4
   2ab18:	e7ee      	b.n	2aaf8 <onoff_release+0x28>

0002ab1a <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   2ab1a:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   2ab1c:	b1b0      	cbz	r0, 2ab4c <onoff_cancel+0x32>
   2ab1e:	b1a9      	cbz	r1, 2ab4c <onoff_cancel+0x32>
	__asm__ volatile(
   2ab20:	f04f 0240 	mov.w	r2, #64	; 0x40
   2ab24:	f3ef 8511 	mrs	r5, BASEPRI
   2ab28:	f382 8812 	msr	BASEPRI_MAX, r2
   2ab2c:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2ab30:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   2ab32:	f7ff fef7 	bl	2a924 <sys_slist_find_and_remove>
   2ab36:	b130      	cbz	r0, 2ab46 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   2ab38:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   2ab3c:	f385 8811 	msr	BASEPRI, r5
   2ab40:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   2ab44:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   2ab46:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2ab4a:	e7f7      	b.n	2ab3c <onoff_cancel+0x22>
		return -EINVAL;
   2ab4c:	f06f 0015 	mvn.w	r0, #21
   2ab50:	e7f8      	b.n	2ab44 <onoff_cancel+0x2a>

0002ab52 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2ab52:	4603      	mov	r3, r0
   2ab54:	b140      	cbz	r0, 2ab68 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2ab56:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2ab58:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2ab5c:	2a02      	cmp	r2, #2
   2ab5e:	d006      	beq.n	2ab6e <sys_notify_validate+0x1c>
   2ab60:	2a03      	cmp	r2, #3
   2ab62:	d004      	beq.n	2ab6e <sys_notify_validate+0x1c>
   2ab64:	2a01      	cmp	r2, #1
   2ab66:	d005      	beq.n	2ab74 <sys_notify_validate+0x22>
   2ab68:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2ab6c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2ab6e:	681a      	ldr	r2, [r3, #0]
   2ab70:	2a00      	cmp	r2, #0
   2ab72:	d0f9      	beq.n	2ab68 <sys_notify_validate+0x16>
		notify->result = 0;
   2ab74:	2000      	movs	r0, #0
   2ab76:	6098      	str	r0, [r3, #8]
   2ab78:	4770      	bx	lr

0002ab7a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   2ab7a:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2ab7c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   2ab7e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   2ab80:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   2ab84:	2a02      	cmp	r2, #2
{
   2ab86:	4603      	mov	r3, r0
	switch (method) {
   2ab88:	f04f 0400 	mov.w	r4, #0
   2ab8c:	d007      	beq.n	2ab9e <sys_notify_finalize+0x24>
   2ab8e:	2a03      	cmp	r2, #3
   2ab90:	d002      	beq.n	2ab98 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2ab92:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   2ab94:	2000      	movs	r0, #0
   2ab96:	e001      	b.n	2ab9c <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   2ab98:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2ab9a:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2ab9c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   2ab9e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2aba0:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2aba2:	2800      	cmp	r0, #0
   2aba4:	d0f6      	beq.n	2ab94 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   2aba6:	f7fc fba1 	bl	272ec <z_impl_k_poll_signal_raise>
   2abaa:	e7f3      	b.n	2ab94 <sys_notify_finalize+0x1a>

0002abac <encode_uint>:
{
   2abac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2abb0:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   2abb2:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   2abb4:	2b6f      	cmp	r3, #111	; 0x6f
{
   2abb6:	4680      	mov	r8, r0
   2abb8:	460f      	mov	r7, r1
   2abba:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2abbc:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   2abc0:	d029      	beq.n	2ac16 <encode_uint+0x6a>
   2abc2:	d824      	bhi.n	2ac0e <encode_uint+0x62>
		return 10;
   2abc4:	2b58      	cmp	r3, #88	; 0x58
   2abc6:	bf0c      	ite	eq
   2abc8:	2610      	moveq	r6, #16
   2abca:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   2abcc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   2abd0:	4632      	mov	r2, r6
   2abd2:	2300      	movs	r3, #0
   2abd4:	4640      	mov	r0, r8
   2abd6:	4639      	mov	r1, r7
   2abd8:	f7d6 fa92 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2abdc:	2a09      	cmp	r2, #9
   2abde:	b2d4      	uxtb	r4, r2
   2abe0:	d81e      	bhi.n	2ac20 <encode_uint+0x74>
   2abe2:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2abe4:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2abe6:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   2abe8:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2abec:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   2abf0:	d301      	bcc.n	2abf6 <encode_uint+0x4a>
   2abf2:	45d1      	cmp	r9, sl
   2abf4:	d811      	bhi.n	2ac1a <encode_uint+0x6e>
	if (conv->flag_hash) {
   2abf6:	782b      	ldrb	r3, [r5, #0]
   2abf8:	069b      	lsls	r3, r3, #26
   2abfa:	d505      	bpl.n	2ac08 <encode_uint+0x5c>
		if (radix == 8) {
   2abfc:	2e08      	cmp	r6, #8
   2abfe:	d115      	bne.n	2ac2c <encode_uint+0x80>
			conv->altform_0 = true;
   2ac00:	78ab      	ldrb	r3, [r5, #2]
   2ac02:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2ac06:	70ab      	strb	r3, [r5, #2]
}
   2ac08:	4648      	mov	r0, r9
   2ac0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2ac0e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   2ac12:	2b70      	cmp	r3, #112	; 0x70
   2ac14:	e7d7      	b.n	2abc6 <encode_uint+0x1a>
	switch (specifier) {
   2ac16:	2608      	movs	r6, #8
   2ac18:	e7d8      	b.n	2abcc <encode_uint+0x20>
		value /= radix;
   2ac1a:	4680      	mov	r8, r0
   2ac1c:	460f      	mov	r7, r1
   2ac1e:	e7d7      	b.n	2abd0 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2ac20:	f1bb 0f19 	cmp.w	fp, #25
   2ac24:	bf94      	ite	ls
   2ac26:	3437      	addls	r4, #55	; 0x37
   2ac28:	3457      	addhi	r4, #87	; 0x57
   2ac2a:	e7db      	b.n	2abe4 <encode_uint+0x38>
		} else if (radix == 16) {
   2ac2c:	2e10      	cmp	r6, #16
   2ac2e:	d1eb      	bne.n	2ac08 <encode_uint+0x5c>
			conv->altform_0c = true;
   2ac30:	78ab      	ldrb	r3, [r5, #2]
   2ac32:	f043 0310 	orr.w	r3, r3, #16
   2ac36:	e7e6      	b.n	2ac06 <encode_uint+0x5a>

0002ac38 <outs>:
{
   2ac38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ac3c:	4607      	mov	r7, r0
   2ac3e:	4688      	mov	r8, r1
   2ac40:	4615      	mov	r5, r2
   2ac42:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2ac44:	4614      	mov	r4, r2
   2ac46:	42b4      	cmp	r4, r6
   2ac48:	d305      	bcc.n	2ac56 <outs+0x1e>
   2ac4a:	b10e      	cbz	r6, 2ac50 <outs+0x18>
	return (int)count;
   2ac4c:	1b60      	subs	r0, r4, r5
   2ac4e:	e008      	b.n	2ac62 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2ac50:	7823      	ldrb	r3, [r4, #0]
   2ac52:	2b00      	cmp	r3, #0
   2ac54:	d0fa      	beq.n	2ac4c <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2ac56:	f814 0b01 	ldrb.w	r0, [r4], #1
   2ac5a:	4641      	mov	r1, r8
   2ac5c:	47b8      	blx	r7
		if (rc < 0) {
   2ac5e:	2800      	cmp	r0, #0
   2ac60:	daf1      	bge.n	2ac46 <outs+0xe>
}
   2ac62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ac66 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2ac66:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
   2ac68:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
   2ac6a:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
   2ac6c:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
   2ac6e:	1baf      	subs	r7, r5, r6
{
   2ac70:	4604      	mov	r4, r0
   2ac72:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
   2ac74:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
   2ac76:	bf98      	it	ls
   2ac78:	1aff      	subls	r7, r7, r3
   2ac7a:	eba5 0000 	sub.w	r0, r5, r0
{
   2ac7e:	4694      	mov	ip, r2
		base += buf->size;
   2ac80:	bf98      	it	ls
   2ac82:	18f6      	addls	r6, r6, r3
   2ac84:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
   2ac86:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
   2ac88:	6823      	ldr	r3, [r4, #0]
   2ac8a:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
   2ac8c:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
   2ac8e:	442b      	add	r3, r5
	size = MIN(size, free_space);
   2ac90:	bf28      	it	cs
   2ac92:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
   2ac94:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
   2ac96:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
   2ac98:	4290      	cmp	r0, r2
   2ac9a:	bf28      	it	cs
   2ac9c:	4610      	movcs	r0, r2
	buf->put_head += size;
   2ac9e:	4403      	add	r3, r0
   2aca0:	6063      	str	r3, [r4, #4]

	return size;
}
   2aca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002aca4 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
   2aca4:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2aca8:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
   2acaa:	428a      	cmp	r2, r1
   2acac:	d30c      	bcc.n	2acc8 <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
   2acae:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
   2acb0:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
   2acb2:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
   2acb4:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
   2acb8:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
   2acba:	428a      	cmp	r2, r1
   2acbc:	d901      	bls.n	2acc2 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
   2acbe:	2000      	movs	r0, #0
   2acc0:	4770      	bx	lr
		buf->put_base += buf->size;
   2acc2:	4413      	add	r3, r2
   2acc4:	60c3      	str	r3, [r0, #12]
   2acc6:	e7fa      	b.n	2acbe <ring_buf_put_finish+0x1a>
		return -EINVAL;
   2acc8:	f06f 0015 	mvn.w	r0, #21
}
   2accc:	4770      	bx	lr

0002acce <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   2acce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2acd2:	4680      	mov	r8, r0
   2acd4:	460e      	mov	r6, r1
   2acd6:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2acd8:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   2acda:	462a      	mov	r2, r5
   2acdc:	a901      	add	r1, sp, #4
   2acde:	4640      	mov	r0, r8
   2ace0:	f7ff ffc1 	bl	2ac66 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   2ace4:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   2ace6:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   2ace8:	4602      	mov	r2, r0
   2acea:	9801      	ldr	r0, [sp, #4]
   2acec:	f001 faf7 	bl	2c2de <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   2acf0:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   2acf2:	4427      	add	r7, r4
		data += partial_size;
   2acf4:	4426      	add	r6, r4
	} while (size && partial_size);
   2acf6:	d001      	beq.n	2acfc <ring_buf_put+0x2e>
   2acf8:	2c00      	cmp	r4, #0
   2acfa:	d1ee      	bne.n	2acda <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   2acfc:	4639      	mov	r1, r7
   2acfe:	4640      	mov	r0, r8
   2ad00:	f7ff ffd0 	bl	2aca4 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   2ad04:	4638      	mov	r0, r7
   2ad06:	b002      	add	sp, #8
   2ad08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ad0c <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2ad0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ad0e:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
   2ad10:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
   2ad12:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
   2ad14:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
   2ad16:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
   2ad18:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
   2ad1a:	42b8      	cmp	r0, r7
{
   2ad1c:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
   2ad1e:	bf98      	it	ls
   2ad20:	1836      	addls	r6, r6, r0
   2ad22:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
   2ad26:	6823      	ldr	r3, [r4, #0]
   2ad28:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
   2ad2c:	bf98      	it	ls
   2ad2e:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
   2ad30:	442b      	add	r3, r5
	size = MIN(size, available_size);
   2ad32:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
   2ad34:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
   2ad38:	bf28      	it	cs
   2ad3a:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
   2ad3c:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
   2ad3e:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
   2ad40:	4290      	cmp	r0, r2
   2ad42:	bf28      	it	cs
   2ad44:	4610      	movcs	r0, r2
	buf->get_head += size;
   2ad46:	4403      	add	r3, r0
   2ad48:	6123      	str	r3, [r4, #16]

	return size;
}
   2ad4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ad4c <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
   2ad4c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   2ad50:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
   2ad52:	428a      	cmp	r2, r1
   2ad54:	d30c      	bcc.n	2ad70 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
   2ad56:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
   2ad58:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
   2ad5c:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
   2ad60:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
   2ad62:	428a      	cmp	r2, r1
   2ad64:	d901      	bls.n	2ad6a <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
   2ad66:	2000      	movs	r0, #0
   2ad68:	4770      	bx	lr
		buf->get_base += buf->size;
   2ad6a:	4413      	add	r3, r2
   2ad6c:	6183      	str	r3, [r0, #24]
   2ad6e:	e7fa      	b.n	2ad66 <ring_buf_get_finish+0x1a>
		return -EINVAL;
   2ad70:	f06f 0015 	mvn.w	r0, #21
}
   2ad74:	4770      	bx	lr

0002ad76 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   2ad76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ad7a:	4680      	mov	r8, r0
   2ad7c:	460d      	mov	r5, r1
   2ad7e:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2ad80:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   2ad82:	4632      	mov	r2, r6
   2ad84:	a901      	add	r1, sp, #4
   2ad86:	4640      	mov	r0, r8
   2ad88:	f7ff ffc0 	bl	2ad0c <ring_buf_get_claim>
   2ad8c:	4604      	mov	r4, r0
		if (data) {
   2ad8e:	b12d      	cbz	r5, 2ad9c <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   2ad90:	4602      	mov	r2, r0
   2ad92:	9901      	ldr	r1, [sp, #4]
   2ad94:	4628      	mov	r0, r5
   2ad96:	f001 faa2 	bl	2c2de <memcpy>
			data += partial_size;
   2ad9a:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   2ad9c:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   2ad9e:	4427      	add	r7, r4
	} while (size && partial_size);
   2ada0:	d001      	beq.n	2ada6 <ring_buf_get+0x30>
   2ada2:	2c00      	cmp	r4, #0
   2ada4:	d1ed      	bne.n	2ad82 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   2ada6:	4639      	mov	r1, r7
   2ada8:	4640      	mov	r0, r8
   2adaa:	f7ff ffcf 	bl	2ad4c <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   2adae:	4638      	mov	r0, r7
   2adb0:	b002      	add	sp, #8
   2adb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002adb6 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   2adb6:	b40f      	push	{r0, r1, r2, r3}
   2adb8:	b507      	push	{r0, r1, r2, lr}
   2adba:	a904      	add	r1, sp, #16
   2adbc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2adc0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2adc2:	f7ff fbc4 	bl	2a54e <vprintk>

	va_end(ap);
}
   2adc6:	b003      	add	sp, #12
   2adc8:	f85d eb04 	ldr.w	lr, [sp], #4
   2adcc:	b004      	add	sp, #16
   2adce:	4770      	bx	lr

0002add0 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   2add0:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   2add2:	6903      	ldr	r3, [r0, #16]
{
   2add4:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   2add6:	f013 0008 	ands.w	r0, r3, #8
   2adda:	d109      	bne.n	2adf0 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2addc:	6813      	ldr	r3, [r2, #0]
   2adde:	68d4      	ldr	r4, [r2, #12]
   2ade0:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
   2ade2:	bf97      	itett	ls
   2ade4:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2ade6:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   2ade8:	1ad3      	subls	r3, r2, r3

	return true;
   2adea:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2adec:	600b      	str	r3, [r1, #0]
}
   2adee:	bd10      	pop	{r4, pc}
   2adf0:	2300      	movs	r3, #0
		return false;
   2adf2:	4618      	mov	r0, r3
   2adf4:	e7fa      	b.n	2adec <free_space+0x1c>

0002adf6 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   2adf6:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   2adf8:	a901      	add	r1, sp, #4
{
   2adfa:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   2adfc:	f7ff ffe8 	bl	2add0 <free_space>
   2ae00:	b120      	cbz	r0, 2ae0c <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   2ae02:	9b01      	ldr	r3, [sp, #4]
   2ae04:	68e2      	ldr	r2, [r4, #12]
   2ae06:	3b01      	subs	r3, #1
   2ae08:	4413      	add	r3, r2
   2ae0a:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   2ae0c:	6a20      	ldr	r0, [r4, #32]
   2ae0e:	9b01      	ldr	r3, [sp, #4]
   2ae10:	1ac0      	subs	r0, r0, r3
}
   2ae12:	3801      	subs	r0, #1
   2ae14:	b002      	add	sp, #8
   2ae16:	bd10      	pop	{r4, pc}

0002ae18 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
   2ae18:	b510      	push	{r4, lr}
   2ae1a:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   2ae1c:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2ae1e:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   2ae20:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2ae22:	07d2      	lsls	r2, r2, #31
   2ae24:	d502      	bpl.n	2ae2c <idx_inc+0x14>
		return i & (buffer->size - 1);
   2ae26:	3b01      	subs	r3, #1
   2ae28:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   2ae2a:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   2ae2c:	4298      	cmp	r0, r3
   2ae2e:	bf28      	it	cs
   2ae30:	1ac0      	subcs	r0, r0, r3
   2ae32:	e7fa      	b.n	2ae2a <idx_inc+0x12>

0002ae34 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
   2ae34:	b510      	push	{r4, lr}
   2ae36:	4604      	mov	r4, r0
   2ae38:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2ae3a:	68c1      	ldr	r1, [r0, #12]
   2ae3c:	f7ff ffec 	bl	2ae18 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   2ae40:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2ae42:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   2ae44:	f023 0308 	bic.w	r3, r3, #8
   2ae48:	6123      	str	r3, [r4, #16]
}
   2ae4a:	bd10      	pop	{r4, pc}

0002ae4c <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   2ae4c:	b538      	push	{r3, r4, r5, lr}
   2ae4e:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2ae50:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   2ae52:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2ae54:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2ae56:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2ae5a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
   2ae5e:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2ae60:	6801      	ldr	r1, [r0, #0]
   2ae62:	462a      	mov	r2, r5
   2ae64:	f7ff ffd8 	bl	2ae18 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2ae68:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2ae6a:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2ae6c:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2ae6e:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   2ae70:	bf02      	ittt	eq
   2ae72:	6923      	ldreq	r3, [r4, #16]
   2ae74:	f043 0308 	orreq.w	r3, r3, #8
   2ae78:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2ae7a:	462a      	mov	r2, r5
   2ae7c:	4620      	mov	r0, r4
   2ae7e:	f7ff ffcb 	bl	2ae18 <idx_inc>
   2ae82:	6060      	str	r0, [r4, #4]
}
   2ae84:	bd38      	pop	{r3, r4, r5, pc}

0002ae86 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   2ae86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2ae8a:	68c7      	ldr	r7, [r0, #12]
   2ae8c:	69c6      	ldr	r6, [r0, #28]
{
   2ae8e:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   2ae90:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   2ae94:	f003 0303 	and.w	r3, r3, #3
   2ae98:	2b02      	cmp	r3, #2
{
   2ae9a:	4604      	mov	r4, r0
   2ae9c:	4688      	mov	r8, r1
   2ae9e:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2aea0:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2aea4:	f04f 0300 	mov.w	r3, #0
   2aea8:	d009      	beq.n	2aebe <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   2aeaa:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   2aeac:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   2aeb0:	6923      	ldr	r3, [r4, #16]
   2aeb2:	0799      	lsls	r1, r3, #30
   2aeb4:	d410      	bmi.n	2aed8 <drop_item_locked+0x52>
		return false;
   2aeb6:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
   2aeb8:	b003      	add	sp, #12
   2aeba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   2aebe:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   2aec2:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   2aec4:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   2aec6:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   2aeca:	d0f1      	beq.n	2aeb0 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   2aecc:	f7ff ffb2 	bl	2ae34 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2aed0:	68e3      	ldr	r3, [r4, #12]
   2aed2:	60a3      	str	r3, [r4, #8]
		return true;
   2aed4:	2001      	movs	r0, #1
   2aed6:	e7ef      	b.n	2aeb8 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   2aed8:	69a3      	ldr	r3, [r4, #24]
   2aeda:	4650      	mov	r0, sl
   2aedc:	4798      	blx	r3
	return item->hdr.valid;
   2aede:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
   2aee2:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
   2aee4:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   2aee6:	d5e6      	bpl.n	2aeb6 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   2aee8:	f013 0302 	ands.w	r3, r3, #2
   2aeec:	d01d      	beq.n	2af2a <drop_item_locked+0xa4>
		if (free_wlen) {
   2aeee:	f1b8 0f00 	cmp.w	r8, #0
   2aef2:	d003      	beq.n	2aefc <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   2aef4:	4641      	mov	r1, r8
   2aef6:	4620      	mov	r0, r4
   2aef8:	f7ff ffa8 	bl	2ae4c <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2aefc:	6861      	ldr	r1, [r4, #4]
   2aefe:	462a      	mov	r2, r5
   2af00:	4620      	mov	r0, r4
   2af02:	f7ff ff89 	bl	2ae18 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2af06:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   2af0a:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2af0c:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2af0e:	d104      	bne.n	2af1a <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   2af10:	462a      	mov	r2, r5
   2af12:	4620      	mov	r0, r4
   2af14:	f7ff ff80 	bl	2ae18 <idx_inc>
   2af18:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   2af1a:	68a3      	ldr	r3, [r4, #8]
   2af1c:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   2af1e:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   2af20:	6923      	ldr	r3, [r4, #16]
   2af22:	f043 0308 	orr.w	r3, r3, #8
   2af26:	6123      	str	r3, [r4, #16]
   2af28:	e7d4      	b.n	2aed4 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   2af2a:	4601      	mov	r1, r0
   2af2c:	4620      	mov	r0, r4
   2af2e:	9301      	str	r3, [sp, #4]
   2af30:	f7ff ff80 	bl	2ae34 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2af34:	68e2      	ldr	r2, [r4, #12]
   2af36:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   2af38:	f1b8 0f00 	cmp.w	r8, #0
   2af3c:	d004      	beq.n	2af48 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   2af3e:	6821      	ldr	r1, [r4, #0]
   2af40:	69e2      	ldr	r2, [r4, #28]
   2af42:	9b01      	ldr	r3, [sp, #4]
   2af44:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   2af48:	eb05 0208 	add.w	r2, r5, r8
   2af4c:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   2af50:	6821      	ldr	r1, [r4, #0]
   2af52:	4620      	mov	r0, r4
   2af54:	f7ff ff60 	bl	2ae18 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   2af58:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   2af5a:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   2af5c:	f043 0308 	orr.w	r3, r3, #8
   2af60:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   2af62:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   2af66:	f36f 0300 	bfc	r3, #0, #1
   2af6a:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   2af6e:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   2af72:	e7af      	b.n	2aed4 <drop_item_locked+0x4e>

0002af74 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   2af74:	b570      	push	{r4, r5, r6, lr}
   2af76:	4604      	mov	r4, r0
   2af78:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   2af7a:	f7ff ff4d 	bl	2ae18 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   2af7e:	6823      	ldr	r3, [r4, #0]
   2af80:	4283      	cmp	r3, r0
   2af82:	d105      	bne.n	2af90 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
   2af84:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   2af86:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   2af88:	f023 0308 	bic.w	r3, r3, #8
   2af8c:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   2af8e:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2af90:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
   2af92:	00ab      	lsls	r3, r5, #2
   2af94:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2af98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   2af9c:	4620      	mov	r0, r4
   2af9e:	6861      	ldr	r1, [r4, #4]
   2afa0:	462a      	mov	r2, r5
   2afa2:	f7ff ff39 	bl	2ae18 <idx_inc>
   2afa6:	6060      	str	r0, [r4, #4]
   2afa8:	e7f1      	b.n	2af8e <post_drop_action+0x1a>

0002afaa <max_utilization_update>:
{
   2afaa:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2afac:	6903      	ldr	r3, [r0, #16]
   2afae:	075b      	lsls	r3, r3, #29
{
   2afb0:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2afb2:	d506      	bpl.n	2afc2 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2afb4:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2afb6:	f7ff ff1e 	bl	2adf6 <get_usage>
   2afba:	4285      	cmp	r5, r0
   2afbc:	bf2c      	ite	cs
   2afbe:	6265      	strcs	r5, [r4, #36]	; 0x24
   2afc0:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   2afc2:	bd38      	pop	{r3, r4, r5, pc}

0002afc4 <mpsc_pbuf_init>:
{
   2afc4:	b538      	push	{r3, r4, r5, lr}
   2afc6:	460d      	mov	r5, r1
   2afc8:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   2afca:	221c      	movs	r2, #28
   2afcc:	2100      	movs	r1, #0
   2afce:	f001 f991 	bl	2c2f4 <memset>
	buffer->get_wlen = cfg->get_wlen;
   2afd2:	68eb      	ldr	r3, [r5, #12]
   2afd4:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   2afd6:	68ab      	ldr	r3, [r5, #8]
   2afd8:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   2afda:	682b      	ldr	r3, [r5, #0]
   2afdc:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   2afde:	686b      	ldr	r3, [r5, #4]
   2afe0:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   2afe2:	2200      	movs	r2, #0
   2afe4:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   2afe6:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   2afe8:	b123      	cbz	r3, 2aff4 <mpsc_pbuf_init+0x30>
   2afea:	1e59      	subs	r1, r3, #1
   2afec:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   2afee:	bf08      	it	eq
   2aff0:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   2aff4:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2aff6:	2201      	movs	r2, #1
   2aff8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2affc:	2100      	movs	r1, #0
}
   2affe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b002:	f004 bb06 	b.w	2f612 <z_impl_k_sem_init>

0002b006 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   2b006:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b00a:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   2b00c:	2500      	movs	r5, #0
{
   2b00e:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   2b010:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
   2b012:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
   2b014:	428b      	cmp	r3, r1
{
   2b016:	4604      	mov	r4, r0
   2b018:	460e      	mov	r6, r1
   2b01a:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
   2b01c:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   2b01e:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
   2b020:	d33a      	bcc.n	2b098 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
   2b022:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b026:	f3ef 8b11 	mrs	fp, BASEPRI
   2b02a:	f383 8812 	msr	BASEPRI_MAX, r3
   2b02e:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
   2b032:	9a05      	ldr	r2, [sp, #20]
   2b034:	46d8      	mov	r8, fp
   2b036:	b12a      	cbz	r2, 2b044 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   2b038:	4629      	mov	r1, r5
   2b03a:	4620      	mov	r0, r4
   2b03c:	f7ff ff9a 	bl	2af74 <post_drop_action>
			tmp_wr_idx_shift = 0;
   2b040:	2300      	movs	r3, #0
   2b042:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
   2b044:	a904      	add	r1, sp, #16
   2b046:	4620      	mov	r0, r4
   2b048:	f7ff fec2 	bl	2add0 <free_space>

		if (free_wlen >= wlen) {
   2b04c:	9904      	ldr	r1, [sp, #16]
   2b04e:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
   2b050:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
   2b052:	d32a      	bcc.n	2b0aa <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   2b054:	6822      	ldr	r2, [r4, #0]
			item =
   2b056:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   2b058:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   2b05c:	f021 0103 	bic.w	r1, r1, #3
   2b060:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   2b064:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2b068:	6821      	ldr	r1, [r4, #0]
   2b06a:	4632      	mov	r2, r6
   2b06c:	4620      	mov	r0, r4
   2b06e:	f7ff fed3 	bl	2ae18 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2b072:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2b074:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2b076:	4298      	cmp	r0, r3
   2b078:	d012      	beq.n	2b0a0 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   2b07a:	2700      	movs	r7, #0
	__asm__ volatile(
   2b07c:	f388 8811 	msr	BASEPRI, r8
   2b080:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   2b084:	9903      	ldr	r1, [sp, #12]
   2b086:	b129      	cbz	r1, 2b094 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   2b088:	6962      	ldr	r2, [r4, #20]
   2b08a:	b10a      	cbz	r2, 2b090 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
   2b08c:	4620      	mov	r0, r4
   2b08e:	4790      	blx	r2
			}
			dropped_item = NULL;
   2b090:	2300      	movs	r3, #0
   2b092:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
   2b094:	2f00      	cmp	r7, #0
   2b096:	d1c4      	bne.n	2b022 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   2b098:	4648      	mov	r0, r9
   2b09a:	b007      	add	sp, #28
   2b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   2b0a0:	6923      	ldr	r3, [r4, #16]
   2b0a2:	f043 0308 	orr.w	r3, r3, #8
   2b0a6:	6123      	str	r3, [r4, #16]
   2b0a8:	e7e7      	b.n	2b07a <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
   2b0aa:	b118      	cbz	r0, 2b0b4 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
   2b0ac:	4620      	mov	r0, r4
   2b0ae:	f7ff fecd 	bl	2ae4c <add_skip_item>
			cont = true;
   2b0b2:	e7e3      	b.n	2b07c <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   2b0b4:	9b00      	ldr	r3, [sp, #0]
   2b0b6:	ea5a 0303 	orrs.w	r3, sl, r3
   2b0ba:	d01a      	beq.n	2b0f2 <mpsc_pbuf_alloc+0xec>
   2b0bc:	9101      	str	r1, [sp, #4]
   2b0be:	f004 f9ee 	bl	2f49e <k_is_in_isr>
   2b0c2:	9901      	ldr	r1, [sp, #4]
   2b0c4:	b9a8      	cbnz	r0, 2b0f2 <mpsc_pbuf_alloc+0xec>
   2b0c6:	f38b 8811 	msr	BASEPRI, fp
   2b0ca:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   2b0ce:	9b00      	ldr	r3, [sp, #0]
   2b0d0:	4652      	mov	r2, sl
   2b0d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2b0d6:	f7fb f905 	bl	262e4 <z_impl_k_sem_take>
	__asm__ volatile(
   2b0da:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b0de:	f3ef 8811 	mrs	r8, BASEPRI
   2b0e2:	f383 8812 	msr	BASEPRI_MAX, r3
   2b0e6:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   2b0ea:	fab0 f780 	clz	r7, r0
   2b0ee:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   2b0f0:	e7c4      	b.n	2b07c <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
   2b0f2:	ab05      	add	r3, sp, #20
   2b0f4:	aa03      	add	r2, sp, #12
   2b0f6:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   2b0f8:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   2b0fa:	f7ff fec4 	bl	2ae86 <drop_item_locked>
   2b0fe:	4607      	mov	r7, r0
   2b100:	e7bc      	b.n	2b07c <mpsc_pbuf_alloc+0x76>

0002b102 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   2b102:	b570      	push	{r4, r5, r6, lr}
   2b104:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2b106:	6983      	ldr	r3, [r0, #24]
   2b108:	4608      	mov	r0, r1
{
   2b10a:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2b10c:	4798      	blx	r3
   2b10e:	4602      	mov	r2, r0
   2b110:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b114:	f3ef 8611 	mrs	r6, BASEPRI
   2b118:	f383 8812 	msr	BASEPRI_MAX, r3
   2b11c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   2b120:	782b      	ldrb	r3, [r5, #0]
   2b122:	f043 0301 	orr.w	r3, r3, #1
   2b126:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2b128:	6861      	ldr	r1, [r4, #4]
   2b12a:	4620      	mov	r0, r4
   2b12c:	f7ff fe74 	bl	2ae18 <idx_inc>
   2b130:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   2b132:	4620      	mov	r0, r4
   2b134:	f7ff ff39 	bl	2afaa <max_utilization_update>
	__asm__ volatile(
   2b138:	f386 8811 	msr	BASEPRI, r6
   2b13c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   2b140:	bd70      	pop	{r4, r5, r6, pc}

0002b142 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   2b142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b144:	4604      	mov	r4, r0
	__asm__ volatile(
   2b146:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b14a:	f3ef 8611 	mrs	r6, BASEPRI
   2b14e:	f383 8812 	msr	BASEPRI_MAX, r3
   2b152:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   2b156:	6923      	ldr	r3, [r4, #16]
   2b158:	f013 0f08 	tst.w	r3, #8
   2b15c:	68a3      	ldr	r3, [r4, #8]
   2b15e:	d102      	bne.n	2b166 <mpsc_pbuf_claim+0x24>
   2b160:	6862      	ldr	r2, [r4, #4]
   2b162:	4293      	cmp	r3, r2
   2b164:	d900      	bls.n	2b168 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
   2b166:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   2b168:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   2b16a:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   2b16c:	b92a      	cbnz	r2, 2b17a <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
   2b16e:	f386 8811 	msr	BASEPRI, r6
   2b172:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
   2b176:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   2b178:	e033      	b.n	2b1e2 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
   2b17a:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   2b17e:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   2b182:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   2b186:	d0f2      	beq.n	2b16e <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
   2b188:	2802      	cmp	r0, #2
   2b18a:	d103      	bne.n	2b194 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
   2b18c:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   2b190:	08ad      	lsrs	r5, r5, #2
   2b192:	d105      	bne.n	2b1a0 <mpsc_pbuf_claim+0x5e>
   2b194:	07d0      	lsls	r0, r2, #31
   2b196:	d412      	bmi.n	2b1be <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
   2b198:	69a3      	ldr	r3, [r4, #24]
   2b19a:	4638      	mov	r0, r7
   2b19c:	4798      	blx	r3
   2b19e:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   2b1a0:	68a1      	ldr	r1, [r4, #8]
   2b1a2:	462a      	mov	r2, r5
   2b1a4:	4620      	mov	r0, r4
   2b1a6:	f7ff fe37 	bl	2ae18 <idx_inc>
				rd_idx_inc(buffer, inc);
   2b1aa:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
   2b1ac:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   2b1ae:	4620      	mov	r0, r4
   2b1b0:	f7ff fe40 	bl	2ae34 <rd_idx_inc>
   2b1b4:	f386 8811 	msr	BASEPRI, r6
   2b1b8:	f3bf 8f6f 	isb	sy
	} while (cont);
   2b1bc:	e7c3      	b.n	2b146 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   2b1be:	f042 0202 	orr.w	r2, r2, #2
   2b1c2:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
   2b1c6:	4638      	mov	r0, r7
   2b1c8:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   2b1ca:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   2b1cc:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   2b1ce:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   2b1d0:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   2b1d2:	4620      	mov	r0, r4
   2b1d4:	f7ff fe20 	bl	2ae18 <idx_inc>
				buffer->tmp_rd_idx =
   2b1d8:	60a0      	str	r0, [r4, #8]
   2b1da:	f386 8811 	msr	BASEPRI, r6
   2b1de:	f3bf 8f6f 	isb	sy
}
   2b1e2:	4638      	mov	r0, r7
   2b1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b1e6 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   2b1e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b1e8:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2b1ea:	6983      	ldr	r3, [r0, #24]
   2b1ec:	4608      	mov	r0, r1
{
   2b1ee:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2b1f0:	4798      	blx	r3
   2b1f2:	4606      	mov	r6, r0
	__asm__ volatile(
   2b1f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b1f8:	f3ef 8711 	mrs	r7, BASEPRI
   2b1fc:	f383 8812 	msr	BASEPRI_MAX, r3
   2b200:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   2b204:	782b      	ldrb	r3, [r5, #0]
   2b206:	f36f 0300 	bfc	r3, #0, #1
   2b20a:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2b20c:	6923      	ldr	r3, [r4, #16]
   2b20e:	079b      	lsls	r3, r3, #30
   2b210:	d505      	bpl.n	2b21e <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   2b212:	68e2      	ldr	r2, [r4, #12]
   2b214:	69e3      	ldr	r3, [r4, #28]
   2b216:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2b21a:	429d      	cmp	r5, r3
   2b21c:	d11a      	bne.n	2b254 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
   2b21e:	782b      	ldrb	r3, [r5, #0]
   2b220:	f36f 0341 	bfc	r3, #1, #1
   2b224:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2b226:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   2b22a:	4299      	cmp	r1, r3
   2b22c:	d104      	bne.n	2b238 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   2b22e:	4632      	mov	r2, r6
   2b230:	4620      	mov	r0, r4
   2b232:	f7ff fdf1 	bl	2ae18 <idx_inc>
   2b236:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   2b238:	4631      	mov	r1, r6
   2b23a:	4620      	mov	r0, r4
   2b23c:	f7ff fdfa 	bl	2ae34 <rd_idx_inc>
	__asm__ volatile(
   2b240:	f387 8811 	msr	BASEPRI, r7
   2b244:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2b248:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   2b24c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2b250:	f7fb b822 	b.w	26298 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   2b254:	682b      	ldr	r3, [r5, #0]
   2b256:	f360 039f 	bfi	r3, r0, #2, #30
   2b25a:	602b      	str	r3, [r5, #0]
   2b25c:	e7f0      	b.n	2b240 <mpsc_pbuf_free+0x5a>

0002b25e <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   2b25e:	6902      	ldr	r2, [r0, #16]
   2b260:	6883      	ldr	r3, [r0, #8]
   2b262:	0712      	lsls	r2, r2, #28
   2b264:	d402      	bmi.n	2b26c <mpsc_pbuf_is_pending+0xe>
   2b266:	6842      	ldr	r2, [r0, #4]
   2b268:	429a      	cmp	r2, r3
   2b26a:	d200      	bcs.n	2b26e <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   2b26c:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   2b26e:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2b270:	1e18      	subs	r0, r3, #0
   2b272:	bf18      	it	ne
   2b274:	2001      	movne	r0, #1
   2b276:	4770      	bx	lr

0002b278 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2b278:	4770      	bx	lr

0002b27a <nvs_flash_rd>:
{
   2b27a:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2b27c:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2b27e:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   2b280:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2b282:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2b284:	fa16 f181 	uxtah	r1, r6, r1
   2b288:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   2b28c:	6884      	ldr	r4, [r0, #8]
   2b28e:	6824      	ldr	r4, [r4, #0]
   2b290:	46a4      	mov	ip, r4
}
   2b292:	bc70      	pop	{r4, r5, r6}
   2b294:	4760      	bx	ip

0002b296 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2b296:	680b      	ldr	r3, [r1, #0]
   2b298:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2b29c:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2b29e:	89c0      	ldrh	r0, [r0, #14]
   2b2a0:	0c1a      	lsrs	r2, r3, #16
   2b2a2:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2b2a6:	bf04      	itt	eq
   2b2a8:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2b2ac:	600b      	streq	r3, [r1, #0]
}
   2b2ae:	4770      	bx	lr

0002b2b0 <nvs_flash_block_cmp>:
{
   2b2b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b2b4:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2b2b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b2b8:	681d      	ldr	r5, [r3, #0]
   2b2ba:	426d      	negs	r5, r5
{
   2b2bc:	b089      	sub	sp, #36	; 0x24
   2b2be:	4681      	mov	r9, r0
   2b2c0:	460e      	mov	r6, r1
   2b2c2:	4617      	mov	r7, r2
	block_size =
   2b2c4:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2b2c8:	b91c      	cbnz	r4, 2b2d2 <nvs_flash_block_cmp+0x22>
	return 0;
   2b2ca:	4620      	mov	r0, r4
}
   2b2cc:	b009      	add	sp, #36	; 0x24
   2b2ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2b2d2:	42ac      	cmp	r4, r5
   2b2d4:	46a0      	mov	r8, r4
   2b2d6:	bf28      	it	cs
   2b2d8:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2b2da:	4643      	mov	r3, r8
   2b2dc:	466a      	mov	r2, sp
   2b2de:	4631      	mov	r1, r6
   2b2e0:	4648      	mov	r0, r9
   2b2e2:	f7ff ffca 	bl	2b27a <nvs_flash_rd>
		if (rc) {
   2b2e6:	2800      	cmp	r0, #0
   2b2e8:	d1f0      	bne.n	2b2cc <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2b2ea:	4642      	mov	r2, r8
   2b2ec:	4669      	mov	r1, sp
   2b2ee:	4638      	mov	r0, r7
   2b2f0:	f000 ffce 	bl	2c290 <memcmp>
		if (rc) {
   2b2f4:	b920      	cbnz	r0, 2b300 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2b2f6:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2b2fa:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2b2fc:	4447      	add	r7, r8
   2b2fe:	e7e3      	b.n	2b2c8 <nvs_flash_block_cmp+0x18>
			return 1;
   2b300:	2001      	movs	r0, #1
   2b302:	e7e3      	b.n	2b2cc <nvs_flash_block_cmp+0x1c>

0002b304 <nvs_flash_cmp_const>:
{
   2b304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b308:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2b30a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b30c:	681d      	ldr	r5, [r3, #0]
   2b30e:	426d      	negs	r5, r5
{
   2b310:	b088      	sub	sp, #32
	block_size =
   2b312:	f005 0520 	and.w	r5, r5, #32
{
   2b316:	4607      	mov	r7, r0
   2b318:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2b31a:	4668      	mov	r0, sp
{
   2b31c:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2b31e:	462a      	mov	r2, r5
   2b320:	f000 ffe8 	bl	2c2f4 <memset>
	while (len) {
   2b324:	b91c      	cbnz	r4, 2b32e <nvs_flash_cmp_const+0x2a>
	return 0;
   2b326:	4620      	mov	r0, r4
}
   2b328:	b008      	add	sp, #32
   2b32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2b32e:	42ac      	cmp	r4, r5
   2b330:	46a0      	mov	r8, r4
   2b332:	bf28      	it	cs
   2b334:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2b336:	4643      	mov	r3, r8
   2b338:	466a      	mov	r2, sp
   2b33a:	4631      	mov	r1, r6
   2b33c:	4638      	mov	r0, r7
   2b33e:	f7ff ffb7 	bl	2b2b0 <nvs_flash_block_cmp>
		if (rc) {
   2b342:	2800      	cmp	r0, #0
   2b344:	d1f0      	bne.n	2b328 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2b346:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2b34a:	4446      	add	r6, r8
   2b34c:	e7ea      	b.n	2b324 <nvs_flash_cmp_const+0x20>

0002b34e <nvs_flash_erase_sector>:
{
   2b34e:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2b350:	8982      	ldrh	r2, [r0, #12]
   2b352:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   2b354:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2b356:	0c09      	lsrs	r1, r1, #16
{
   2b358:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   2b35a:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2b35c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2b35e:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   2b362:	6883      	ldr	r3, [r0, #8]
   2b364:	689b      	ldr	r3, [r3, #8]
   2b366:	4798      	blx	r3
	if (rc) {
   2b368:	b950      	cbnz	r0, 2b380 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2b36a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2b36c:	89a3      	ldrh	r3, [r4, #12]
   2b36e:	7912      	ldrb	r2, [r2, #4]
   2b370:	4629      	mov	r1, r5
   2b372:	4620      	mov	r0, r4
   2b374:	f7ff ffc6 	bl	2b304 <nvs_flash_cmp_const>
		rc = -ENXIO;
   2b378:	2800      	cmp	r0, #0
   2b37a:	bf18      	it	ne
   2b37c:	f06f 0005 	mvnne.w	r0, #5
}
   2b380:	bd38      	pop	{r3, r4, r5, pc}

0002b382 <nvs_ate_crc8_update>:
{
   2b382:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2b384:	4601      	mov	r1, r0
{
   2b386:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2b388:	2207      	movs	r2, #7
   2b38a:	20ff      	movs	r0, #255	; 0xff
   2b38c:	f7e8 fa4e 	bl	1382c <crc8_ccitt>
	entry->crc8 = crc8;
   2b390:	71e0      	strb	r0, [r4, #7]
}
   2b392:	bd10      	pop	{r4, pc}

0002b394 <z_log_msg_static_create.constprop.0>:
   2b394:	2300      	movs	r3, #0
   2b396:	f7e9 bc15 	b.w	14bc4 <z_impl_z_log_msg_static_create>

0002b39a <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2b39a:	7803      	ldrb	r3, [r0, #0]
   2b39c:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2b39e:	bf81      	itttt	hi
   2b3a0:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2b3a4:	18c9      	addhi	r1, r1, r3
   2b3a6:	425b      	neghi	r3, r3
   2b3a8:	4019      	andhi	r1, r3
}
   2b3aa:	4608      	mov	r0, r1
   2b3ac:	4770      	bx	lr

0002b3ae <nvs_ate_valid>:
{
   2b3ae:	b570      	push	{r4, r5, r6, lr}
   2b3b0:	460c      	mov	r4, r1
   2b3b2:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b3b4:	2108      	movs	r1, #8
   2b3b6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2b3b8:	f7ff ffef 	bl	2b39a <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2b3bc:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b3be:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2b3c0:	4621      	mov	r1, r4
   2b3c2:	20ff      	movs	r0, #255	; 0xff
   2b3c4:	f7e8 fa32 	bl	1382c <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2b3c8:	79e3      	ldrb	r3, [r4, #7]
   2b3ca:	4283      	cmp	r3, r0
   2b3cc:	d107      	bne.n	2b3de <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2b3ce:	89aa      	ldrh	r2, [r5, #12]
   2b3d0:	8863      	ldrh	r3, [r4, #2]
   2b3d2:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2b3d4:	4283      	cmp	r3, r0
   2b3d6:	bf2c      	ite	cs
   2b3d8:	2000      	movcs	r0, #0
   2b3da:	2001      	movcc	r0, #1
}
   2b3dc:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2b3de:	2000      	movs	r0, #0
   2b3e0:	e7fc      	b.n	2b3dc <nvs_ate_valid+0x2e>

0002b3e2 <nvs_close_ate_valid>:
{
   2b3e2:	b538      	push	{r3, r4, r5, lr}
   2b3e4:	4605      	mov	r5, r0
   2b3e6:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2b3e8:	f7ff ffe1 	bl	2b3ae <nvs_ate_valid>
   2b3ec:	b1a0      	cbz	r0, 2b418 <nvs_close_ate_valid+0x36>
   2b3ee:	88a0      	ldrh	r0, [r4, #4]
   2b3f0:	b998      	cbnz	r0, 2b41a <nvs_close_ate_valid+0x38>
   2b3f2:	8822      	ldrh	r2, [r4, #0]
   2b3f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b3f8:	429a      	cmp	r2, r3
   2b3fa:	d10d      	bne.n	2b418 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b3fc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2b3fe:	2108      	movs	r1, #8
   2b400:	f7ff ffcb 	bl	2b39a <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2b404:	8862      	ldrh	r2, [r4, #2]
   2b406:	89ab      	ldrh	r3, [r5, #12]
   2b408:	1a9b      	subs	r3, r3, r2
   2b40a:	fbb3 f2f0 	udiv	r2, r3, r0
   2b40e:	fb02 3010 	mls	r0, r2, r0, r3
   2b412:	fab0 f080 	clz	r0, r0
   2b416:	0940      	lsrs	r0, r0, #5
}
   2b418:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2b41a:	2000      	movs	r0, #0
   2b41c:	e7fc      	b.n	2b418 <nvs_close_ate_valid+0x36>

0002b41e <nvs_prev_ate>:
{
   2b41e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b420:	4604      	mov	r4, r0
   2b422:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b424:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2b426:	2108      	movs	r1, #8
   2b428:	f7ff ffb7 	bl	2b39a <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b42c:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b42e:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b430:	2308      	movs	r3, #8
   2b432:	4620      	mov	r0, r4
   2b434:	f7ff ff21 	bl	2b27a <nvs_flash_rd>
	if (rc) {
   2b438:	4606      	mov	r6, r0
   2b43a:	2800      	cmp	r0, #0
   2b43c:	d136      	bne.n	2b4ac <nvs_prev_ate+0x8e>
	*addr += ate_size;
   2b43e:	682b      	ldr	r3, [r5, #0]
   2b440:	443b      	add	r3, r7
   2b442:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2b444:	89a2      	ldrh	r2, [r4, #12]
   2b446:	b299      	uxth	r1, r3
   2b448:	1bd2      	subs	r2, r2, r7
   2b44a:	4291      	cmp	r1, r2
   2b44c:	d12e      	bne.n	2b4ac <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2b44e:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2b450:	bf03      	ittte	eq
   2b452:	89e2      	ldrheq	r2, [r4, #14]
   2b454:	f102 32ff 	addeq.w	r2, r2, #4294967295
   2b458:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   2b45c:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   2b460:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b462:	2308      	movs	r3, #8
   2b464:	466a      	mov	r2, sp
   2b466:	4620      	mov	r0, r4
   2b468:	f7ff ff07 	bl	2b27a <nvs_flash_rd>
	if (rc) {
   2b46c:	b9e8      	cbnz	r0, 2b4aa <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2b46e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2b470:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2b472:	466b      	mov	r3, sp
		if (data8[i] != value) {
   2b474:	f813 1b01 	ldrb.w	r1, [r3], #1
   2b478:	428a      	cmp	r2, r1
   2b47a:	d10c      	bne.n	2b496 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2b47c:	3001      	adds	r0, #1
   2b47e:	2808      	cmp	r0, #8
   2b480:	d1f8      	bne.n	2b474 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   2b482:	6863      	ldr	r3, [r4, #4]
   2b484:	e005      	b.n	2b492 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2b486:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2b488:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2b48c:	0c1b      	lsrs	r3, r3, #16
   2b48e:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2b490:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2b492:	602b      	str	r3, [r5, #0]
		return 0;
   2b494:	e00a      	b.n	2b4ac <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2b496:	4669      	mov	r1, sp
   2b498:	4620      	mov	r0, r4
   2b49a:	f7ff ffa2 	bl	2b3e2 <nvs_close_ate_valid>
   2b49e:	2800      	cmp	r0, #0
   2b4a0:	d1f1      	bne.n	2b486 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   2b4a2:	4629      	mov	r1, r5
   2b4a4:	4620      	mov	r0, r4
   2b4a6:	f7e8 fda3 	bl	13ff0 <nvs_recover_last_ate>
   2b4aa:	4606      	mov	r6, r0
}
   2b4ac:	4630      	mov	r0, r6
   2b4ae:	b003      	add	sp, #12
   2b4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b4b2 <nvs_flash_al_wrt>:
{
   2b4b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b4b6:	4607      	mov	r7, r0
   2b4b8:	b089      	sub	sp, #36	; 0x24
   2b4ba:	4690      	mov	r8, r2
	if (!len) {
   2b4bc:	461e      	mov	r6, r3
   2b4be:	b91b      	cbnz	r3, 2b4c8 <nvs_flash_al_wrt+0x16>
		return 0;
   2b4c0:	2000      	movs	r0, #0
}
   2b4c2:	b009      	add	sp, #36	; 0x24
   2b4c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   2b4c8:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2b4ca:	8983      	ldrh	r3, [r0, #12]
   2b4cc:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2b4ce:	fa14 f181 	uxtah	r1, r4, r1
   2b4d2:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2b4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2b4d8:	681d      	ldr	r5, [r3, #0]
   2b4da:	426d      	negs	r5, r5
	if (blen > 0) {
   2b4dc:	4035      	ands	r5, r6
   2b4de:	d00c      	beq.n	2b4fa <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2b4e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2b4e2:	6883      	ldr	r3, [r0, #8]
   2b4e4:	4621      	mov	r1, r4
   2b4e6:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2b4ea:	462b      	mov	r3, r5
   2b4ec:	47c8      	blx	r9
		if (rc) {
   2b4ee:	2800      	cmp	r0, #0
   2b4f0:	d1e7      	bne.n	2b4c2 <nvs_flash_al_wrt+0x10>
	if (len) {
   2b4f2:	1b76      	subs	r6, r6, r5
   2b4f4:	d0e4      	beq.n	2b4c0 <nvs_flash_al_wrt+0xe>
		offset += blen;
   2b4f6:	442c      	add	r4, r5
		data8 += blen;
   2b4f8:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2b4fa:	4632      	mov	r2, r6
   2b4fc:	4641      	mov	r1, r8
   2b4fe:	4668      	mov	r0, sp
   2b500:	f000 feed 	bl	2c2de <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2b504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2b506:	681a      	ldr	r2, [r3, #0]
   2b508:	7919      	ldrb	r1, [r3, #4]
   2b50a:	1b92      	subs	r2, r2, r6
   2b50c:	eb0d 0006 	add.w	r0, sp, r6
   2b510:	f000 fef0 	bl	2c2f4 <memset>
				 fs->flash_parameters->write_block_size);
   2b514:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   2b518:	681b      	ldr	r3, [r3, #0]
   2b51a:	6882      	ldr	r2, [r0, #8]
   2b51c:	4621      	mov	r1, r4
   2b51e:	6855      	ldr	r5, [r2, #4]
   2b520:	466a      	mov	r2, sp
   2b522:	47a8      	blx	r5
	return rc;
   2b524:	e7cd      	b.n	2b4c2 <nvs_flash_al_wrt+0x10>

0002b526 <nvs_flash_ate_wrt>:
{
   2b526:	b510      	push	{r4, lr}
   2b528:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2b52a:	2308      	movs	r3, #8
   2b52c:	6841      	ldr	r1, [r0, #4]
{
   2b52e:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2b530:	f7ff ffbf 	bl	2b4b2 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2b534:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2b536:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2b538:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2b53a:	f7ff ff2e 	bl	2b39a <nvs_al_size.isra.0>
   2b53e:	6863      	ldr	r3, [r4, #4]
   2b540:	1a1b      	subs	r3, r3, r0
   2b542:	6063      	str	r3, [r4, #4]
}
   2b544:	4610      	mov	r0, r2
   2b546:	bd10      	pop	{r4, pc}

0002b548 <nvs_add_gc_done_ate>:
{
   2b548:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   2b54a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b54e:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2b552:	2300      	movs	r3, #0
{
   2b554:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2b556:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2b55a:	6883      	ldr	r3, [r0, #8]
   2b55c:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2b560:	4668      	mov	r0, sp
   2b562:	f7ff ff0e 	bl	2b382 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2b566:	4669      	mov	r1, sp
   2b568:	4620      	mov	r0, r4
   2b56a:	f7ff ffdc 	bl	2b526 <nvs_flash_ate_wrt>
}
   2b56e:	b002      	add	sp, #8
   2b570:	bd10      	pop	{r4, pc}

0002b572 <nvs_gc>:
{
   2b572:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b576:	4604      	mov	r4, r0
   2b578:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b57a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2b57c:	2108      	movs	r1, #8
   2b57e:	f7ff ff0c 	bl	2b39a <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2b582:	6863      	ldr	r3, [r4, #4]
   2b584:	0c1b      	lsrs	r3, r3, #16
   2b586:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b588:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   2b58a:	a903      	add	r1, sp, #12
   2b58c:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2b58e:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   2b590:	f7ff fe81 	bl	2b296 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2b594:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2b598:	89a6      	ldrh	r6, [r4, #12]
   2b59a:	445e      	add	r6, fp
   2b59c:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b59e:	aa06      	add	r2, sp, #24
   2b5a0:	2308      	movs	r3, #8
   2b5a2:	4631      	mov	r1, r6
   2b5a4:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2b5a6:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b5a8:	f7ff fe67 	bl	2b27a <nvs_flash_rd>
	if (rc < 0) {
   2b5ac:	1e02      	subs	r2, r0, #0
   2b5ae:	f2c0 80a9 	blt.w	2b704 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2b5b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2b5b4:	aa06      	add	r2, sp, #24
   2b5b6:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2b5b8:	2300      	movs	r3, #0
		if (data8[i] != value) {
   2b5ba:	f812 0b01 	ldrb.w	r0, [r2], #1
   2b5be:	4281      	cmp	r1, r0
   2b5c0:	f040 808f 	bne.w	2b6e2 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2b5c4:	3301      	adds	r3, #1
   2b5c6:	2b08      	cmp	r3, #8
   2b5c8:	d1f7      	bne.n	2b5ba <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2b5ca:	68a3      	ldr	r3, [r4, #8]
   2b5cc:	6862      	ldr	r2, [r4, #4]
   2b5ce:	442b      	add	r3, r5
   2b5d0:	429a      	cmp	r2, r3
   2b5d2:	d27e      	bcs.n	2b6d2 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   2b5d4:	4659      	mov	r1, fp
   2b5d6:	4620      	mov	r0, r4
   2b5d8:	f7ff feb9 	bl	2b34e <nvs_flash_erase_sector>
   2b5dc:	4602      	mov	r2, r0
	if (rc) {
   2b5de:	e091      	b.n	2b704 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   2b5e0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   2b5e4:	0c36      	lsrs	r6, r6, #16
   2b5e6:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   2b5e8:	441e      	add	r6, r3
   2b5ea:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2b5ec:	aa08      	add	r2, sp, #32
   2b5ee:	a904      	add	r1, sp, #16
   2b5f0:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   2b5f2:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2b5f6:	f7ff ff12 	bl	2b41e <nvs_prev_ate>
		if (rc) {
   2b5fa:	4602      	mov	r2, r0
   2b5fc:	2800      	cmp	r0, #0
   2b5fe:	f040 8081 	bne.w	2b704 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   2b602:	a908      	add	r1, sp, #32
   2b604:	4620      	mov	r0, r4
   2b606:	f7ff fed2 	bl	2b3ae <nvs_ate_valid>
   2b60a:	b918      	cbnz	r0, 2b614 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   2b60c:	9b01      	ldr	r3, [sp, #4]
   2b60e:	459a      	cmp	sl, r3
   2b610:	d1ec      	bne.n	2b5ec <nvs_gc+0x7a>
   2b612:	e7da      	b.n	2b5ca <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   2b614:	6863      	ldr	r3, [r4, #4]
   2b616:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2b618:	aa0a      	add	r2, sp, #40	; 0x28
   2b61a:	a905      	add	r1, sp, #20
   2b61c:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   2b61e:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2b620:	f7ff fefd 	bl	2b41e <nvs_prev_ate>
			if (rc) {
   2b624:	4602      	mov	r2, r0
   2b626:	2800      	cmp	r0, #0
   2b628:	d16c      	bne.n	2b704 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   2b62a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2b62e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2b632:	429a      	cmp	r2, r3
   2b634:	d027      	beq.n	2b686 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   2b636:	6862      	ldr	r2, [r4, #4]
   2b638:	9b05      	ldr	r3, [sp, #20]
   2b63a:	429a      	cmp	r2, r3
   2b63c:	d1ec      	bne.n	2b618 <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2b63e:	4556      	cmp	r6, sl
   2b640:	d1e4      	bne.n	2b60c <nvs_gc+0x9a>
   2b642:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2b646:	2b00      	cmp	r3, #0
   2b648:	d0e0      	beq.n	2b60c <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   2b64a:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   2b64e:	ea4f 431a 	mov.w	r3, sl, lsr #16
   2b652:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   2b654:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   2b656:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2b658:	68a3      	ldr	r3, [r4, #8]
   2b65a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   2b65e:	f7ff fe90 	bl	2b382 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2b662:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2b664:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2b668:	681e      	ldr	r6, [r3, #0]
   2b66a:	4276      	negs	r6, r6
	block_size =
   2b66c:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   2b670:	f1b9 0f00 	cmp.w	r9, #0
   2b674:	d10e      	bne.n	2b694 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2b676:	a908      	add	r1, sp, #32
   2b678:	4620      	mov	r0, r4
   2b67a:	f7ff ff54 	bl	2b526 <nvs_flash_ate_wrt>
			if (rc) {
   2b67e:	4602      	mov	r2, r0
   2b680:	2800      	cmp	r0, #0
   2b682:	d0c3      	beq.n	2b60c <nvs_gc+0x9a>
   2b684:	e03e      	b.n	2b704 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2b686:	a90a      	add	r1, sp, #40	; 0x28
   2b688:	4620      	mov	r0, r4
   2b68a:	f7ff fe90 	bl	2b3ae <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2b68e:	2800      	cmp	r0, #0
   2b690:	d0d1      	beq.n	2b636 <nvs_gc+0xc4>
   2b692:	e7d4      	b.n	2b63e <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   2b694:	454e      	cmp	r6, r9
   2b696:	46b0      	mov	r8, r6
   2b698:	bf28      	it	cs
   2b69a:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   2b69c:	aa0c      	add	r2, sp, #48	; 0x30
   2b69e:	4643      	mov	r3, r8
   2b6a0:	4639      	mov	r1, r7
   2b6a2:	4620      	mov	r0, r4
   2b6a4:	f7ff fde9 	bl	2b27a <nvs_flash_rd>
		if (rc) {
   2b6a8:	4602      	mov	r2, r0
   2b6aa:	bb58      	cbnz	r0, 2b704 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2b6ac:	4643      	mov	r3, r8
   2b6ae:	68a1      	ldr	r1, [r4, #8]
   2b6b0:	aa0c      	add	r2, sp, #48	; 0x30
   2b6b2:	4620      	mov	r0, r4
   2b6b4:	f7ff fefd 	bl	2b4b2 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   2b6b8:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2b6ba:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   2b6bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2b6be:	f7ff fe6c 	bl	2b39a <nvs_al_size.isra.0>
   2b6c2:	68a3      	ldr	r3, [r4, #8]
   2b6c4:	4403      	add	r3, r0
   2b6c6:	60a3      	str	r3, [r4, #8]
		if (rc) {
   2b6c8:	b9e2      	cbnz	r2, 2b704 <nvs_gc+0x192>
		len -= bytes_to_copy;
   2b6ca:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   2b6ce:	4447      	add	r7, r8
   2b6d0:	e7ce      	b.n	2b670 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   2b6d2:	4620      	mov	r0, r4
   2b6d4:	f7ff ff38 	bl	2b548 <nvs_add_gc_done_ate>
		if (rc) {
   2b6d8:	4602      	mov	r2, r0
   2b6da:	2800      	cmp	r0, #0
   2b6dc:	f43f af7a 	beq.w	2b5d4 <nvs_gc+0x62>
   2b6e0:	e010      	b.n	2b704 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   2b6e2:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2b6e4:	a906      	add	r1, sp, #24
   2b6e6:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   2b6e8:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2b6ea:	f7ff fe7a 	bl	2b3e2 <nvs_close_ate_valid>
   2b6ee:	2800      	cmp	r0, #0
   2b6f0:	f47f af76 	bne.w	2b5e0 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   2b6f4:	a904      	add	r1, sp, #16
   2b6f6:	4620      	mov	r0, r4
   2b6f8:	f7e8 fc7a 	bl	13ff0 <nvs_recover_last_ate>
		if (rc) {
   2b6fc:	4602      	mov	r2, r0
   2b6fe:	2800      	cmp	r0, #0
   2b700:	f43f af74 	beq.w	2b5ec <nvs_gc+0x7a>
}
   2b704:	4610      	mov	r0, r2
   2b706:	b015      	add	sp, #84	; 0x54
   2b708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b70c <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   2b70c:	2300      	movs	r3, #0
   2b70e:	461a      	mov	r2, r3
   2b710:	f7e8 be78 	b.w	14404 <nvs_write>

0002b714 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2b714:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2b716:	2400      	movs	r4, #0
   2b718:	9400      	str	r4, [sp, #0]
   2b71a:	f7e8 ff4f 	bl	145bc <nvs_read_hist>
	return rc;
}
   2b71e:	b002      	add	sp, #8
   2b720:	bd10      	pop	{r4, pc}

0002b722 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   2b722:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2b724:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2b726:	bf5f      	itttt	pl
   2b728:	6803      	ldrpl	r3, [r0, #0]
   2b72a:	8842      	ldrhpl	r2, [r0, #2]
   2b72c:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   2b730:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   2b734:	bf5d      	ittte	pl
   2b736:	3017      	addpl	r0, #23
   2b738:	f020 0007 	bicpl.w	r0, r0, #7
   2b73c:	0880      	lsrpl	r0, r0, #2
	return 0;
   2b73e:	2000      	movmi	r0, #0
}
   2b740:	4770      	bx	lr

0002b742 <dummy_timestamp>:
}
   2b742:	2000      	movs	r0, #0
   2b744:	4770      	bx	lr

0002b746 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   2b746:	f003 bbbb 	b.w	2eec0 <sys_clock_cycle_get_32>

0002b74a <atomic_inc>:
{
   2b74a:	4603      	mov	r3, r0
}
   2b74c:	f3bf 8f5b 	dmb	ish
   2b750:	e853 0f00 	ldrex	r0, [r3]
   2b754:	1c42      	adds	r2, r0, #1
   2b756:	e843 2100 	strex	r1, r2, [r3]
   2b75a:	2900      	cmp	r1, #0
   2b75c:	d1f8      	bne.n	2b750 <atomic_inc+0x6>
   2b75e:	f3bf 8f5b 	dmb	ish
   2b762:	4770      	bx	lr

0002b764 <z_log_vprintk>:
{
   2b764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   2b766:	2300      	movs	r3, #0
   2b768:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2b76c:	e9cd 3300 	strd	r3, r3, [sp]
   2b770:	461a      	mov	r2, r3
   2b772:	4619      	mov	r1, r3
   2b774:	4618      	mov	r0, r3
   2b776:	f7e9 faa9 	bl	14ccc <z_impl_z_log_msg_runtime_vcreate>
}
   2b77a:	b005      	add	sp, #20
   2b77c:	f85d fb04 	ldr.w	pc, [sp], #4

0002b780 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2b780:	2001      	movs	r0, #1
   2b782:	f7e9 b85b 	b.w	1483c <z_log_dropped>

0002b786 <z_log_get_tag>:
}
   2b786:	2000      	movs	r0, #0
   2b788:	4770      	bx	lr

0002b78a <z_cbprintf_cpy>:
{
   2b78a:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   2b78c:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   2b790:	1b9b      	subs	r3, r3, r6
   2b792:	428b      	cmp	r3, r1
{
   2b794:	460c      	mov	r4, r1
   2b796:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   2b798:	d30a      	bcc.n	2b7b0 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2b79a:	6813      	ldr	r3, [r2, #0]
   2b79c:	460a      	mov	r2, r1
   2b79e:	4601      	mov	r1, r0
   2b7a0:	1998      	adds	r0, r3, r6
   2b7a2:	f000 fd9c 	bl	2c2de <memcpy>
	desc->off += len;
   2b7a6:	68ab      	ldr	r3, [r5, #8]
   2b7a8:	4423      	add	r3, r4
   2b7aa:	60ab      	str	r3, [r5, #8]
	return len;
   2b7ac:	4620      	mov	r0, r4
}
   2b7ae:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2b7b0:	f06f 001b 	mvn.w	r0, #27
   2b7b4:	e7fb      	b.n	2b7ae <z_cbprintf_cpy+0x24>

0002b7b6 <z_log_msg_finalize>:
{
   2b7b6:	b570      	push	{r4, r5, r6, lr}
   2b7b8:	460e      	mov	r6, r1
   2b7ba:	4615      	mov	r5, r2
   2b7bc:	4619      	mov	r1, r3
	if (!msg) {
   2b7be:	4604      	mov	r4, r0
   2b7c0:	b918      	cbnz	r0, 2b7ca <z_log_msg_finalize+0x14>
}
   2b7c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2b7c6:	f7e9 b839 	b.w	1483c <z_log_dropped>
	if (data) {
   2b7ca:	b133      	cbz	r3, 2b7da <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   2b7cc:	f3c2 234a 	ubfx	r3, r2, #9, #11
   2b7d0:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   2b7d2:	0d12      	lsrs	r2, r2, #20
   2b7d4:	4418      	add	r0, r3
   2b7d6:	f000 fd82 	bl	2c2de <memcpy>
	msg->hdr.source = source;
   2b7da:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2b7de:	4620      	mov	r0, r4
}
   2b7e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2b7e4:	f7e9 b9ba 	b.w	14b5c <z_log_msg_commit>

0002b7e8 <buffer_write>:
{
   2b7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b7ea:	4606      	mov	r6, r0
   2b7ec:	460d      	mov	r5, r1
   2b7ee:	4614      	mov	r4, r2
   2b7f0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2b7f2:	4621      	mov	r1, r4
   2b7f4:	4628      	mov	r0, r5
   2b7f6:	463a      	mov	r2, r7
   2b7f8:	47b0      	blx	r6
	} while (len != 0);
   2b7fa:	1a24      	subs	r4, r4, r0
		buf += processed;
   2b7fc:	4405      	add	r5, r0
	} while (len != 0);
   2b7fe:	d1f8      	bne.n	2b7f2 <buffer_write+0xa>
}
   2b800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b802 <cbvprintf>:
{
   2b802:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2b804:	2400      	movs	r4, #0
   2b806:	9400      	str	r4, [sp, #0]
   2b808:	f7e8 f826 	bl	13858 <z_cbvprintf_impl>
}
   2b80c:	b002      	add	sp, #8
   2b80e:	bd10      	pop	{r4, pc}

0002b810 <log_output_flush>:
{
   2b810:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2b812:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   2b814:	6881      	ldr	r1, [r0, #8]
{
   2b816:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2b818:	e9d2 2300 	ldrd	r2, r3, [r2]
   2b81c:	6800      	ldr	r0, [r0, #0]
   2b81e:	f7ff ffe3 	bl	2b7e8 <buffer_write>
	output->control_block->offset = 0;
   2b822:	6863      	ldr	r3, [r4, #4]
   2b824:	2200      	movs	r2, #0
   2b826:	601a      	str	r2, [r3, #0]
}
   2b828:	bd10      	pop	{r4, pc}

0002b82a <out_func>:
{
   2b82a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   2b82c:	684b      	ldr	r3, [r1, #4]
   2b82e:	681a      	ldr	r2, [r3, #0]
   2b830:	68cb      	ldr	r3, [r1, #12]
   2b832:	429a      	cmp	r2, r3
{
   2b834:	4605      	mov	r5, r0
   2b836:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2b838:	d102      	bne.n	2b840 <out_func+0x16>
		log_output_flush(out_ctx);
   2b83a:	4608      	mov	r0, r1
   2b83c:	f7ff ffe8 	bl	2b810 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2b840:	6863      	ldr	r3, [r4, #4]
   2b842:	f3bf 8f5b 	dmb	ish
   2b846:	e853 2f00 	ldrex	r2, [r3]
   2b84a:	1c51      	adds	r1, r2, #1
   2b84c:	e843 1000 	strex	r0, r1, [r3]
   2b850:	2800      	cmp	r0, #0
   2b852:	d1f8      	bne.n	2b846 <out_func+0x1c>
   2b854:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   2b858:	68a3      	ldr	r3, [r4, #8]
   2b85a:	549d      	strb	r5, [r3, r2]
}
   2b85c:	2000      	movs	r0, #0
   2b85e:	bd38      	pop	{r3, r4, r5, pc}

0002b860 <cr_out_func>:
	if (c == '\n') {
   2b860:	280a      	cmp	r0, #10
{
   2b862:	b538      	push	{r3, r4, r5, lr}
   2b864:	4604      	mov	r4, r0
   2b866:	460d      	mov	r5, r1
	if (c == '\n') {
   2b868:	d102      	bne.n	2b870 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   2b86a:	200d      	movs	r0, #13
   2b86c:	f7ff ffdd 	bl	2b82a <out_func>
	out_func(c, ctx);
   2b870:	4629      	mov	r1, r5
   2b872:	4620      	mov	r0, r4
   2b874:	f7ff ffd9 	bl	2b82a <out_func>
}
   2b878:	2000      	movs	r0, #0
   2b87a:	bd38      	pop	{r3, r4, r5, pc}

0002b87c <log_backend_uart_init>:
}
   2b87c:	4770      	bx	lr

0002b87e <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2b87e:	4770      	bx	lr

0002b880 <get_sectors_cb>:
{
   2b880:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2b882:	684c      	ldr	r4, [r1, #4]
   2b884:	6803      	ldr	r3, [r0, #0]
   2b886:	42a3      	cmp	r3, r4
   2b888:	d201      	bcs.n	2b88e <get_sectors_cb+0xe>
		*bail_value = true;
   2b88a:	2001      	movs	r0, #1
}
   2b88c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   2b88e:	688a      	ldr	r2, [r1, #8]
   2b890:	4422      	add	r2, r4
   2b892:	4293      	cmp	r3, r2
   2b894:	d301      	bcc.n	2b89a <get_sectors_cb+0x1a>
		*bail_value = false;
   2b896:	2000      	movs	r0, #0
   2b898:	e7f8      	b.n	2b88c <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   2b89a:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   2b89e:	694e      	ldr	r6, [r1, #20]
   2b8a0:	42b5      	cmp	r5, r6
   2b8a2:	d303      	bcc.n	2b8ac <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   2b8a4:	f06f 030b 	mvn.w	r3, #11
   2b8a8:	618b      	str	r3, [r1, #24]
		return true;
   2b8aa:	e7f4      	b.n	2b896 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2b8ac:	1b1b      	subs	r3, r3, r4
   2b8ae:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2b8b2:	6843      	ldr	r3, [r0, #4]
   2b8b4:	6908      	ldr	r0, [r1, #16]
   2b8b6:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   2b8ba:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   2b8bc:	690b      	ldr	r3, [r1, #16]
   2b8be:	3301      	adds	r3, #1
   2b8c0:	610b      	str	r3, [r1, #16]
	return true;
   2b8c2:	e7e2      	b.n	2b88a <get_sectors_cb+0xa>

0002b8c4 <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
   2b8c4:	f010 0f70 	tst.w	r0, #112	; 0x70
   2b8c8:	d108      	bne.n	2b8dc <get_ep_bm_from_addr+0x18>
	ep_idx = ep & (~USB_EP_DIR_IN);
   2b8ca:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (ep & USB_EP_DIR_IN) {
   2b8ce:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
   2b8d2:	bf18      	it	ne
   2b8d4:	3310      	addne	r3, #16
   2b8d6:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
   2b8d8:	4098      	lsls	r0, r3
   2b8da:	4770      	bx	lr
	uint32_t ep_bm = 0;
   2b8dc:	2000      	movs	r0, #0
}
   2b8de:	4770      	bx	lr

0002b8e0 <usb_write>:
{
   2b8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b8e4:	4606      	mov	r6, r0
   2b8e6:	460f      	mov	r7, r1
   2b8e8:	4690      	mov	r8, r2
   2b8ea:	4699      	mov	r9, r3
   2b8ec:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   2b8ee:	464b      	mov	r3, r9
   2b8f0:	4642      	mov	r2, r8
   2b8f2:	4639      	mov	r1, r7
   2b8f4:	4630      	mov	r0, r6
   2b8f6:	f7f5 fee5 	bl	216c4 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   2b8fa:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   2b8fe:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   2b900:	d103      	bne.n	2b90a <usb_write+0x2a>
	z_impl_k_yield();
   2b902:	f7fb f949 	bl	26b98 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   2b906:	3d01      	subs	r5, #1
   2b908:	d1f1      	bne.n	2b8ee <usb_write+0xe>
}
   2b90a:	4620      	mov	r0, r4
   2b90c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002b910 <usb_get_dev_data_by_cfg>:
	return list->head;
   2b910:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2b912:	b140      	cbz	r0, 2b926 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   2b914:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   2b918:	685b      	ldr	r3, [r3, #4]
   2b91a:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2b91c:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   2b920:	d001      	beq.n	2b926 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   2b922:	6840      	ldr	r0, [r0, #4]
   2b924:	e7f5      	b.n	2b912 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   2b926:	4770      	bx	lr

0002b928 <usb_get_dev_data_by_iface>:
	return list->head;
   2b928:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2b92a:	b150      	cbz	r0, 2b942 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   2b92c:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   2b930:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   2b932:	685b      	ldr	r3, [r3, #4]
   2b934:	789b      	ldrb	r3, [r3, #2]
   2b936:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2b938:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   2b93c:	d001      	beq.n	2b942 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   2b93e:	6840      	ldr	r0, [r0, #4]
   2b940:	e7f3      	b.n	2b92a <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   2b942:	4770      	bx	lr

0002b944 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   2b944:	b530      	push	{r4, r5, lr}
	return list->head;
   2b946:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2b948:	b188      	cbz	r0, 2b96e <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   2b94a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2b94e:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   2b950:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2b952:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2b954:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2b956:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   2b958:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2b95a:	b2dc      	uxtb	r4, r3
   2b95c:	42a5      	cmp	r5, r4
   2b95e:	d801      	bhi.n	2b964 <usb_get_dev_data_by_ep+0x20>
	return node->next;
   2b960:	6840      	ldr	r0, [r0, #4]
   2b962:	e7f1      	b.n	2b948 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   2b964:	3301      	adds	r3, #1
   2b966:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   2b96a:	428c      	cmp	r4, r1
   2b96c:	d1f5      	bne.n	2b95a <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   2b96e:	bd30      	pop	{r4, r5, pc}

0002b970 <usb_transfer_is_busy>:
{
   2b970:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   2b972:	f7ea fad7 	bl	15f24 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   2b976:	b128      	cbz	r0, 2b984 <usb_transfer_is_busy+0x14>
   2b978:	6840      	ldr	r0, [r0, #4]
   2b97a:	f110 0f10 	cmn.w	r0, #16
   2b97e:	bf14      	ite	ne
   2b980:	2000      	movne	r0, #0
   2b982:	2001      	moveq	r0, #1
}
   2b984:	bd08      	pop	{r3, pc}

0002b986 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   2b986:	1c4b      	adds	r3, r1, #1
   2b988:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   2b98a:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   2b98c:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   2b98e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   2b992:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   2b994:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   2b998:	4770      	bx	lr

0002b99a <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   2b99a:	e950 3102 	ldrd	r3, r1, [r0, #-8]
   2b99e:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   2b9a2:	4718      	bx	r3

0002b9a4 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2b9a4:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
   2b9a6:	2200      	movs	r2, #0
   2b9a8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
   2b9ac:	4770      	bx	lr

0002b9ae <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2b9ae:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   2b9b0:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   2b9b4:	b108      	cbz	r0, 2b9ba <cdc_acm_irq_tx_ready+0xc>
   2b9b6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
   2b9ba:	4770      	bx	lr

0002b9bc <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2b9bc:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
   2b9be:	2200      	movs	r2, #0
   2b9c0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
   2b9c4:	4770      	bx	lr

0002b9c6 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
   2b9c6:	6903      	ldr	r3, [r0, #16]
}
   2b9c8:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
   2b9cc:	4770      	bx	lr

0002b9ce <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2b9ce:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   2b9d0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   2b9d4:	b112      	cbz	r2, 2b9dc <cdc_acm_irq_is_pending+0xe>
   2b9d6:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
   2b9da:	b92a      	cbnz	r2, 2b9e8 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   2b9dc:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
   2b9e0:	b118      	cbz	r0, 2b9ea <cdc_acm_irq_is_pending+0x1c>
   2b9e2:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
   2b9e6:	4770      	bx	lr
		return 1;
   2b9e8:	2001      	movs	r0, #1
}
   2b9ea:	4770      	bx	lr

0002b9ec <cdc_acm_irq_update>:
}
   2b9ec:	2001      	movs	r0, #1
   2b9ee:	4770      	bx	lr

0002b9f0 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2b9f0:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
   2b9f2:	e9c3 1200 	strd	r1, r2, [r3]
}
   2b9f6:	4770      	bx	lr

0002b9f8 <cdc_acm_configure>:
}
   2b9f8:	2000      	movs	r0, #0
   2b9fa:	4770      	bx	lr

0002b9fc <cdc_acm_config_get>:
{
   2b9fc:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2b9fe:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   2ba00:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   2ba04:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
   2ba06:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
   2ba0a:	b16a      	cbz	r2, 2ba28 <cdc_acm_config_get+0x2c>
   2ba0c:	2a01      	cmp	r2, #1
   2ba0e:	bf0c      	ite	eq
   2ba10:	2202      	moveq	r2, #2
   2ba12:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
   2ba14:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
   2ba16:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
   2ba1a:	1e50      	subs	r0, r2, #1
   2ba1c:	2803      	cmp	r0, #3
   2ba1e:	d805      	bhi.n	2ba2c <cdc_acm_config_get+0x30>
   2ba20:	e8df f000 	tbb	[pc, r0]
   2ba24:	05050505 	.word	0x05050505
	switch (dev_data->line_coding.bCharFormat) {
   2ba28:	2201      	movs	r2, #1
   2ba2a:	e7f3      	b.n	2ba14 <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
   2ba2c:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
   2ba2e:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
   2ba30:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2ba34:	2b06      	cmp	r3, #6
   2ba36:	d009      	beq.n	2ba4c <cdc_acm_config_get+0x50>
   2ba38:	2b07      	cmp	r3, #7
   2ba3a:	d009      	beq.n	2ba50 <cdc_acm_config_get+0x54>
   2ba3c:	2b05      	cmp	r3, #5
   2ba3e:	bf0c      	ite	eq
   2ba40:	2300      	moveq	r3, #0
   2ba42:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
   2ba44:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
   2ba46:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
   2ba48:	71c8      	strb	r0, [r1, #7]
}
   2ba4a:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
   2ba4c:	2301      	movs	r3, #1
   2ba4e:	e7f9      	b.n	2ba44 <cdc_acm_config_get+0x48>
   2ba50:	2302      	movs	r3, #2
   2ba52:	e7f7      	b.n	2ba44 <cdc_acm_config_get+0x48>

0002ba54 <cdc_acm_fifo_read>:
{
   2ba54:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2ba56:	6904      	ldr	r4, [r0, #16]
{
   2ba58:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   2ba5a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   2ba5e:	f7ff f98a 	bl	2ad76 <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   2ba62:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   2ba66:	691a      	ldr	r2, [r3, #16]
   2ba68:	6899      	ldr	r1, [r3, #8]
   2ba6a:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
   2ba6c:	bf04      	itt	eq
   2ba6e:	2200      	moveq	r2, #0
   2ba70:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
   2ba74:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   2ba78:	4606      	mov	r6, r0
	if (dev_data->rx_paused == true) {
   2ba7a:	b19a      	cbz	r2, 2baa4 <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
   2ba7c:	685a      	ldr	r2, [r3, #4]
   2ba7e:	6959      	ldr	r1, [r3, #20]
   2ba80:	69db      	ldr	r3, [r3, #28]
   2ba82:	1a52      	subs	r2, r2, r1
   2ba84:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
   2ba86:	2b3f      	cmp	r3, #63	; 0x3f
   2ba88:	d90c      	bls.n	2baa4 <cdc_acm_fifo_read+0x50>
			if (dev_data->configured) {
   2ba8a:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   2ba8e:	b133      	cbz	r3, 2ba9e <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
   2ba90:	686b      	ldr	r3, [r5, #4]
   2ba92:	6a1b      	ldr	r3, [r3, #32]
   2ba94:	4622      	mov	r2, r4
   2ba96:	7b18      	ldrb	r0, [r3, #12]
   2ba98:	2100      	movs	r1, #0
   2ba9a:	f7ea fd11 	bl	164c0 <cdc_acm_read_cb>
			dev_data->rx_paused = false;
   2ba9e:	2300      	movs	r3, #0
   2baa0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   2baa4:	4630      	mov	r0, r6
   2baa6:	bd70      	pop	{r4, r5, r6, pc}

0002baa8 <cdc_acm_poll_in>:
{
   2baa8:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   2baaa:	2201      	movs	r2, #1
   2baac:	f7ff ffd2 	bl	2ba54 <cdc_acm_fifo_read>
}
   2bab0:	3801      	subs	r0, #1
   2bab2:	bf18      	it	ne
   2bab4:	f04f 30ff 	movne.w	r0, #4294967295
   2bab8:	bd08      	pop	{r3, pc}

0002baba <settings_load>:
	return settings_load_subtree(NULL);
   2baba:	2000      	movs	r0, #0
   2babc:	f7ea bdce 	b.w	1665c <settings_load_subtree>

0002bac0 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   2bac0:	2200      	movs	r2, #0
   2bac2:	4611      	mov	r1, r2
   2bac4:	f7ea bd90 	b.w	165e8 <settings_save_one>

0002bac8 <settings_name_steq>:
{
   2bac8:	4603      	mov	r3, r0
   2baca:	b510      	push	{r4, lr}
   2bacc:	4608      	mov	r0, r1
	if (next) {
   2bace:	b10a      	cbz	r2, 2bad4 <settings_name_steq+0xc>
		*next = NULL;
   2bad0:	2100      	movs	r1, #0
   2bad2:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   2bad4:	b153      	cbz	r3, 2baec <settings_name_steq+0x24>
   2bad6:	b1d0      	cbz	r0, 2bb0e <settings_name_steq+0x46>
   2bad8:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   2bada:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2bade:	b180      	cbz	r0, 2bb02 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   2bae0:	f813 4b01 	ldrb.w	r4, [r3], #1
   2bae4:	42a0      	cmp	r0, r4
   2bae6:	d101      	bne.n	2baec <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2bae8:	283d      	cmp	r0, #61	; 0x3d
   2baea:	d1f6      	bne.n	2bada <settings_name_steq+0x12>
		return 0;
   2baec:	2000      	movs	r0, #0
   2baee:	e00e      	b.n	2bb0e <settings_name_steq+0x46>
			*next = name + 1;
   2baf0:	3301      	adds	r3, #1
   2baf2:	6013      	str	r3, [r2, #0]
   2baf4:	e00a      	b.n	2bb0c <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2baf6:	283d      	cmp	r0, #61	; 0x3d
   2baf8:	d008      	beq.n	2bb0c <settings_name_steq+0x44>
   2bafa:	fab0 f080 	clz	r0, r0
   2bafe:	0940      	lsrs	r0, r0, #5
   2bb00:	e005      	b.n	2bb0e <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2bb02:	7818      	ldrb	r0, [r3, #0]
   2bb04:	282f      	cmp	r0, #47	; 0x2f
   2bb06:	d1f6      	bne.n	2baf6 <settings_name_steq+0x2e>
		if (next) {
   2bb08:	2a00      	cmp	r2, #0
   2bb0a:	d1f1      	bne.n	2baf0 <settings_name_steq+0x28>
		return 1;
   2bb0c:	2001      	movs	r0, #1
}
   2bb0e:	bd10      	pop	{r4, pc}

0002bb10 <settings_name_next>:
{
   2bb10:	b510      	push	{r4, lr}
	if (next) {
   2bb12:	b109      	cbz	r1, 2bb18 <settings_name_next+0x8>
		*next = NULL;
   2bb14:	2300      	movs	r3, #0
   2bb16:	600b      	str	r3, [r1, #0]
	if (!name) {
   2bb18:	b158      	cbz	r0, 2bb32 <settings_name_next+0x22>
   2bb1a:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2bb1c:	781a      	ldrb	r2, [r3, #0]
   2bb1e:	461c      	mov	r4, r3
   2bb20:	3301      	adds	r3, #1
   2bb22:	b12a      	cbz	r2, 2bb30 <settings_name_next+0x20>
   2bb24:	2a3d      	cmp	r2, #61	; 0x3d
   2bb26:	d003      	beq.n	2bb30 <settings_name_next+0x20>
   2bb28:	2a2f      	cmp	r2, #47	; 0x2f
   2bb2a:	d1f7      	bne.n	2bb1c <settings_name_next+0xc>
		if (next) {
   2bb2c:	b101      	cbz	r1, 2bb30 <settings_name_next+0x20>
			*next = name + 1;
   2bb2e:	600b      	str	r3, [r1, #0]
   2bb30:	1a20      	subs	r0, r4, r0
}
   2bb32:	bd10      	pop	{r4, pc}

0002bb34 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   2bb34:	3008      	adds	r0, #8
   2bb36:	4770      	bx	lr

0002bb38 <settings_nvs_read_fn>:
{
   2bb38:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2bb3a:	4613      	mov	r3, r2
{
   2bb3c:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2bb3e:	460a      	mov	r2, r1
   2bb40:	8881      	ldrh	r1, [r0, #4]
   2bb42:	6800      	ldr	r0, [r0, #0]
   2bb44:	f7ff fde6 	bl	2b714 <nvs_read>
}
   2bb48:	42a0      	cmp	r0, r4
   2bb4a:	bfa8      	it	ge
   2bb4c:	4620      	movge	r0, r4
   2bb4e:	bd10      	pop	{r4, pc}

0002bb50 <settings_nvs_save>:
{
   2bb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bb54:	b097      	sub	sp, #92	; 0x5c
   2bb56:	4604      	mov	r4, r0
   2bb58:	9201      	str	r2, [sp, #4]
   2bb5a:	469a      	mov	sl, r3
	if (!name) {
   2bb5c:	4689      	mov	r9, r1
   2bb5e:	2900      	cmp	r1, #0
   2bb60:	d07e      	beq.n	2bc60 <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   2bb62:	b1da      	cbz	r2, 2bb9c <settings_nvs_save+0x4c>
   2bb64:	faba f78a 	clz	r7, sl
   2bb68:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2bb6a:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   2bb6c:	3501      	adds	r5, #1
   2bb6e:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2bb70:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2bb72:	f104 0b08 	add.w	fp, r4, #8
		name_id--;
   2bb76:	1e6e      	subs	r6, r5, #1
   2bb78:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2bb7a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2bb7e:	d029      	beq.n	2bbd4 <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2bb80:	234a      	movs	r3, #74	; 0x4a
   2bb82:	aa03      	add	r2, sp, #12
   2bb84:	4631      	mov	r1, r6
   2bb86:	4658      	mov	r0, fp
   2bb88:	f7ff fdc4 	bl	2b714 <nvs_read>
		if (rc < 0) {
   2bb8c:	2800      	cmp	r0, #0
   2bb8e:	da07      	bge.n	2bba0 <settings_nvs_save+0x50>
		name_id--;
   2bb90:	f110 0f02 	cmn.w	r0, #2
   2bb94:	bf08      	it	eq
   2bb96:	46b0      	moveq	r8, r6
   2bb98:	4635      	mov	r5, r6
   2bb9a:	e7ec      	b.n	2bb76 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   2bb9c:	2701      	movs	r7, #1
   2bb9e:	e7e4      	b.n	2bb6a <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   2bba0:	f100 0358 	add.w	r3, r0, #88	; 0x58
   2bba4:	eb0d 0003 	add.w	r0, sp, r3
   2bba8:	2300      	movs	r3, #0
   2bbaa:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   2bbae:	a903      	add	r1, sp, #12
   2bbb0:	4648      	mov	r0, r9
   2bbb2:	f000 fb4d 	bl	2c250 <strcmp>
   2bbb6:	2800      	cmp	r0, #0
   2bbb8:	d1ee      	bne.n	2bb98 <settings_nvs_save+0x48>
		if (!delete) {
   2bbba:	b32f      	cbz	r7, 2bc08 <settings_nvs_save+0xb8>
		if (name_id == cf->last_name_id) {
   2bbbc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2bbbe:	42b3      	cmp	r3, r6
   2bbc0:	d00b      	beq.n	2bbda <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   2bbc2:	4631      	mov	r1, r6
   2bbc4:	4658      	mov	r0, fp
   2bbc6:	f7ff fda1 	bl	2b70c <nvs_delete>
		if (rc >= 0) {
   2bbca:	2800      	cmp	r0, #0
   2bbcc:	da12      	bge.n	2bbf4 <settings_nvs_save+0xa4>
}
   2bbce:	b017      	add	sp, #92	; 0x5c
   2bbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   2bbd4:	b3b7      	cbz	r7, 2bc44 <settings_nvs_save+0xf4>
			return 0;
   2bbd6:	2000      	movs	r0, #0
   2bbd8:	e7f9      	b.n	2bbce <settings_nvs_save+0x7e>
			cf->last_name_id--;
   2bbda:	4622      	mov	r2, r4
   2bbdc:	1e73      	subs	r3, r6, #1
   2bbde:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2bbe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2bbe6:	2302      	movs	r3, #2
   2bbe8:	4658      	mov	r0, fp
   2bbea:	f7e8 fc0b 	bl	14404 <nvs_write>
			if (rc < 0) {
   2bbee:	2800      	cmp	r0, #0
   2bbf0:	dae7      	bge.n	2bbc2 <settings_nvs_save+0x72>
   2bbf2:	e7ec      	b.n	2bbce <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   2bbf4:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2bbf8:	313f      	adds	r1, #63	; 0x3f
   2bbfa:	b289      	uxth	r1, r1
   2bbfc:	4658      	mov	r0, fp
   2bbfe:	f7ff fd85 	bl	2b70c <nvs_delete>
	if (rc < 0) {
   2bc02:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2bc06:	e7e2      	b.n	2bbce <settings_nvs_save+0x7e>
		name_id--;
   2bc08:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2bc0a:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2bc0e:	d02a      	beq.n	2bc66 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2bc10:	f104 0508 	add.w	r5, r4, #8
   2bc14:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   2bc18:	9a01      	ldr	r2, [sp, #4]
   2bc1a:	4653      	mov	r3, sl
   2bc1c:	b289      	uxth	r1, r1
   2bc1e:	4628      	mov	r0, r5
   2bc20:	f7e8 fbf0 	bl	14404 <nvs_write>
	if (rc < 0) {
   2bc24:	2800      	cmp	r0, #0
   2bc26:	dbd2      	blt.n	2bbce <settings_nvs_save+0x7e>
	if (write_name) {
   2bc28:	b977      	cbnz	r7, 2bc48 <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   2bc2a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2bc2c:	4543      	cmp	r3, r8
   2bc2e:	d2d2      	bcs.n	2bbd6 <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   2bc30:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2bc32:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   2bc34:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2bc38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2bc3c:	4628      	mov	r0, r5
   2bc3e:	f7e8 fbe1 	bl	14404 <nvs_write>
   2bc42:	e7de      	b.n	2bc02 <settings_nvs_save+0xb2>
	write_name = true;
   2bc44:	2701      	movs	r7, #1
   2bc46:	e7e0      	b.n	2bc0a <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2bc48:	4648      	mov	r0, r9
   2bc4a:	f000 faf1 	bl	2c230 <strlen>
   2bc4e:	464a      	mov	r2, r9
   2bc50:	4603      	mov	r3, r0
   2bc52:	4641      	mov	r1, r8
   2bc54:	4628      	mov	r0, r5
   2bc56:	f7e8 fbd5 	bl	14404 <nvs_write>
		if (rc < 0) {
   2bc5a:	2800      	cmp	r0, #0
   2bc5c:	dae5      	bge.n	2bc2a <settings_nvs_save+0xda>
   2bc5e:	e7b6      	b.n	2bbce <settings_nvs_save+0x7e>
		return -EINVAL;
   2bc60:	f06f 0015 	mvn.w	r0, #21
   2bc64:	e7b3      	b.n	2bbce <settings_nvs_save+0x7e>
		return -ENOMEM;
   2bc66:	f06f 000b 	mvn.w	r0, #11
   2bc6a:	e7b0      	b.n	2bbce <settings_nvs_save+0x7e>

0002bc6c <settings_nvs_backend_init>:
{
   2bc6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   2bc6e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   2bc70:	6303      	str	r3, [r0, #48]	; 0x30
{
   2bc72:	4604      	mov	r4, r0
	if (cf->cf_nvs.flash_device == NULL) {
   2bc74:	b1c3      	cbz	r3, 2bca8 <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   2bc76:	f100 0608 	add.w	r6, r0, #8
   2bc7a:	4630      	mov	r0, r6
   2bc7c:	f7e8 f9ea 	bl	14054 <nvs_mount>
	if (rc) {
   2bc80:	4605      	mov	r5, r0
   2bc82:	b970      	cbnz	r0, 2bca2 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   2bc84:	2302      	movs	r3, #2
   2bc86:	f10d 0206 	add.w	r2, sp, #6
   2bc8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2bc8e:	4630      	mov	r0, r6
   2bc90:	f7ff fd40 	bl	2b714 <nvs_read>
	if (rc < 0) {
   2bc94:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   2bc96:	bfac      	ite	ge
   2bc98:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   2bc9c:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   2bca0:	8723      	strh	r3, [r4, #56]	; 0x38
}
   2bca2:	4628      	mov	r0, r5
   2bca4:	b002      	add	sp, #8
   2bca6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2bca8:	f06f 0512 	mvn.w	r5, #18
   2bcac:	e7f9      	b.n	2bca2 <settings_nvs_backend_init+0x36>

0002bcae <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2bcae:	b538      	push	{r3, r4, r5, lr}
   2bcb0:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2bcb2:	42ab      	cmp	r3, r5
{
   2bcb4:	4611      	mov	r1, r2
   2bcb6:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2bcb8:	d804      	bhi.n	2bcc4 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2bcba:	461a      	mov	r2, r3
   2bcbc:	f000 fb0f 	bl	2c2de <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2bcc0:	4620      	mov	r0, r4
   2bcc2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2bcc4:	2400      	movs	r4, #0
   2bcc6:	e7fb      	b.n	2bcc0 <_copy+0x12>

0002bcc8 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2bcc8:	f000 bb14 	b.w	2c2f4 <memset>

0002bccc <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2bccc:	09c3      	lsrs	r3, r0, #7
   2bcce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2bcd2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2bcd6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2bcda:	b2c0      	uxtb	r0, r0
   2bcdc:	4770      	bx	lr

0002bcde <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2bcde:	78cb      	ldrb	r3, [r1, #3]
   2bce0:	7802      	ldrb	r2, [r0, #0]
   2bce2:	4053      	eors	r3, r2
   2bce4:	7003      	strb	r3, [r0, #0]
   2bce6:	884b      	ldrh	r3, [r1, #2]
   2bce8:	7842      	ldrb	r2, [r0, #1]
   2bcea:	4053      	eors	r3, r2
   2bcec:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2bcee:	680a      	ldr	r2, [r1, #0]
   2bcf0:	7883      	ldrb	r3, [r0, #2]
   2bcf2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2bcf6:	7083      	strb	r3, [r0, #2]
   2bcf8:	680a      	ldr	r2, [r1, #0]
   2bcfa:	78c3      	ldrb	r3, [r0, #3]
   2bcfc:	4053      	eors	r3, r2
   2bcfe:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2bd00:	79cb      	ldrb	r3, [r1, #7]
   2bd02:	7902      	ldrb	r2, [r0, #4]
   2bd04:	4053      	eors	r3, r2
   2bd06:	7103      	strb	r3, [r0, #4]
   2bd08:	88cb      	ldrh	r3, [r1, #6]
   2bd0a:	7942      	ldrb	r2, [r0, #5]
   2bd0c:	4053      	eors	r3, r2
   2bd0e:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2bd10:	684a      	ldr	r2, [r1, #4]
   2bd12:	7983      	ldrb	r3, [r0, #6]
   2bd14:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2bd18:	7183      	strb	r3, [r0, #6]
   2bd1a:	684a      	ldr	r2, [r1, #4]
   2bd1c:	79c3      	ldrb	r3, [r0, #7]
   2bd1e:	4053      	eors	r3, r2
   2bd20:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2bd22:	7acb      	ldrb	r3, [r1, #11]
   2bd24:	7a02      	ldrb	r2, [r0, #8]
   2bd26:	4053      	eors	r3, r2
   2bd28:	7203      	strb	r3, [r0, #8]
   2bd2a:	7a42      	ldrb	r2, [r0, #9]
   2bd2c:	894b      	ldrh	r3, [r1, #10]
   2bd2e:	4053      	eors	r3, r2
   2bd30:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2bd32:	688a      	ldr	r2, [r1, #8]
   2bd34:	7a83      	ldrb	r3, [r0, #10]
   2bd36:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2bd3a:	7283      	strb	r3, [r0, #10]
   2bd3c:	688a      	ldr	r2, [r1, #8]
   2bd3e:	7ac3      	ldrb	r3, [r0, #11]
   2bd40:	4053      	eors	r3, r2
   2bd42:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2bd44:	7bcb      	ldrb	r3, [r1, #15]
   2bd46:	7b02      	ldrb	r2, [r0, #12]
   2bd48:	4053      	eors	r3, r2
   2bd4a:	7303      	strb	r3, [r0, #12]
   2bd4c:	89cb      	ldrh	r3, [r1, #14]
   2bd4e:	7b42      	ldrb	r2, [r0, #13]
   2bd50:	4053      	eors	r3, r2
   2bd52:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2bd54:	68ca      	ldr	r2, [r1, #12]
   2bd56:	7b83      	ldrb	r3, [r0, #14]
   2bd58:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2bd5c:	7383      	strb	r3, [r0, #14]
   2bd5e:	68ca      	ldr	r2, [r1, #12]
   2bd60:	7bc3      	ldrb	r3, [r0, #15]
   2bd62:	4053      	eors	r3, r2
   2bd64:	73c3      	strb	r3, [r0, #15]
}
   2bd66:	4770      	bx	lr

0002bd68 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2bd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2bd6a:	7802      	ldrb	r2, [r0, #0]
   2bd6c:	f88d 2000 	strb.w	r2, [sp]
   2bd70:	7942      	ldrb	r2, [r0, #5]
   2bd72:	f88d 2001 	strb.w	r2, [sp, #1]
   2bd76:	7a82      	ldrb	r2, [r0, #10]
   2bd78:	f88d 2002 	strb.w	r2, [sp, #2]
   2bd7c:	7bc2      	ldrb	r2, [r0, #15]
   2bd7e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2bd82:	7902      	ldrb	r2, [r0, #4]
   2bd84:	f88d 2004 	strb.w	r2, [sp, #4]
   2bd88:	7a42      	ldrb	r2, [r0, #9]
   2bd8a:	f88d 2005 	strb.w	r2, [sp, #5]
   2bd8e:	7b82      	ldrb	r2, [r0, #14]
   2bd90:	f88d 2006 	strb.w	r2, [sp, #6]
   2bd94:	78c2      	ldrb	r2, [r0, #3]
   2bd96:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2bd9a:	7a02      	ldrb	r2, [r0, #8]
   2bd9c:	f88d 2008 	strb.w	r2, [sp, #8]
   2bda0:	7b42      	ldrb	r2, [r0, #13]
   2bda2:	f88d 2009 	strb.w	r2, [sp, #9]
   2bda6:	7882      	ldrb	r2, [r0, #2]
   2bda8:	f88d 200a 	strb.w	r2, [sp, #10]
   2bdac:	79c2      	ldrb	r2, [r0, #7]
   2bdae:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2bdb2:	7b02      	ldrb	r2, [r0, #12]
   2bdb4:	f88d 200c 	strb.w	r2, [sp, #12]
   2bdb8:	7842      	ldrb	r2, [r0, #1]
   2bdba:	7ac3      	ldrb	r3, [r0, #11]
   2bdbc:	f88d 200d 	strb.w	r2, [sp, #13]
   2bdc0:	7982      	ldrb	r2, [r0, #6]
   2bdc2:	f88d 200e 	strb.w	r2, [sp, #14]
   2bdc6:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2bdca:	2310      	movs	r3, #16
   2bdcc:	466a      	mov	r2, sp
   2bdce:	4619      	mov	r1, r3
   2bdd0:	f7ff ff6d 	bl	2bcae <_copy>
}
   2bdd4:	b005      	add	sp, #20
   2bdd6:	f85d fb04 	ldr.w	pc, [sp], #4

0002bdda <mult_row_column>:
{
   2bdda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bddc:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2bdde:	7808      	ldrb	r0, [r1, #0]
{
   2bde0:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2bde2:	f7ff ff73 	bl	2bccc <_double_byte>
   2bde6:	4605      	mov	r5, r0
   2bde8:	7860      	ldrb	r0, [r4, #1]
   2bdea:	f7ff ff6f 	bl	2bccc <_double_byte>
   2bdee:	78a2      	ldrb	r2, [r4, #2]
   2bdf0:	7863      	ldrb	r3, [r4, #1]
   2bdf2:	4053      	eors	r3, r2
   2bdf4:	78e2      	ldrb	r2, [r4, #3]
   2bdf6:	4053      	eors	r3, r2
   2bdf8:	405d      	eors	r5, r3
   2bdfa:	4068      	eors	r0, r5
   2bdfc:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2bdfe:	7860      	ldrb	r0, [r4, #1]
   2be00:	7827      	ldrb	r7, [r4, #0]
   2be02:	f7ff ff63 	bl	2bccc <_double_byte>
   2be06:	4605      	mov	r5, r0
   2be08:	78a0      	ldrb	r0, [r4, #2]
   2be0a:	f7ff ff5f 	bl	2bccc <_double_byte>
   2be0e:	78a3      	ldrb	r3, [r4, #2]
   2be10:	405f      	eors	r7, r3
   2be12:	78e3      	ldrb	r3, [r4, #3]
   2be14:	405f      	eors	r7, r3
   2be16:	407d      	eors	r5, r7
   2be18:	4068      	eors	r0, r5
   2be1a:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2be1c:	7863      	ldrb	r3, [r4, #1]
   2be1e:	7827      	ldrb	r7, [r4, #0]
   2be20:	78a0      	ldrb	r0, [r4, #2]
   2be22:	405f      	eors	r7, r3
   2be24:	f7ff ff52 	bl	2bccc <_double_byte>
   2be28:	4605      	mov	r5, r0
   2be2a:	78e0      	ldrb	r0, [r4, #3]
   2be2c:	f7ff ff4e 	bl	2bccc <_double_byte>
   2be30:	78e3      	ldrb	r3, [r4, #3]
   2be32:	405f      	eors	r7, r3
   2be34:	407d      	eors	r5, r7
   2be36:	4068      	eors	r0, r5
   2be38:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2be3a:	7820      	ldrb	r0, [r4, #0]
   2be3c:	f7ff ff46 	bl	2bccc <_double_byte>
   2be40:	7862      	ldrb	r2, [r4, #1]
   2be42:	7823      	ldrb	r3, [r4, #0]
   2be44:	4053      	eors	r3, r2
   2be46:	78a2      	ldrb	r2, [r4, #2]
   2be48:	4053      	eors	r3, r2
   2be4a:	ea80 0503 	eor.w	r5, r0, r3
   2be4e:	78e0      	ldrb	r0, [r4, #3]
   2be50:	f7ff ff3c 	bl	2bccc <_double_byte>
   2be54:	b2ed      	uxtb	r5, r5
   2be56:	4045      	eors	r5, r0
   2be58:	70f5      	strb	r5, [r6, #3]
}
   2be5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002be5c <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2be5c:	b570      	push	{r4, r5, r6, lr}
   2be5e:	4614      	mov	r4, r2
   2be60:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2be62:	4605      	mov	r5, r0
   2be64:	2800      	cmp	r0, #0
   2be66:	d049      	beq.n	2befc <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2be68:	2900      	cmp	r1, #0
   2be6a:	d049      	beq.n	2bf00 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2be6c:	2a00      	cmp	r2, #0
   2be6e:	d049      	beq.n	2bf04 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2be70:	2310      	movs	r3, #16
   2be72:	460a      	mov	r2, r1
   2be74:	4668      	mov	r0, sp
   2be76:	4619      	mov	r1, r3
   2be78:	f7ff ff19 	bl	2bcae <_copy>
	add_round_key(state, s->words);
   2be7c:	4621      	mov	r1, r4
   2be7e:	4668      	mov	r0, sp
   2be80:	f7ff ff2d 	bl	2bcde <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2be84:	3410      	adds	r4, #16
   2be86:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2be8a:	4668      	mov	r0, sp
   2be8c:	f7ea fdd0 	bl	16a30 <sub_bytes>
		shift_rows(state);
   2be90:	4668      	mov	r0, sp
   2be92:	f7ff ff69 	bl	2bd68 <shift_rows>
	mult_row_column(t, s);
   2be96:	4669      	mov	r1, sp
   2be98:	a804      	add	r0, sp, #16
   2be9a:	f7ff ff9e 	bl	2bdda <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2be9e:	a901      	add	r1, sp, #4
   2bea0:	a805      	add	r0, sp, #20
   2bea2:	f7ff ff9a 	bl	2bdda <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2bea6:	a902      	add	r1, sp, #8
   2bea8:	a806      	add	r0, sp, #24
   2beaa:	f7ff ff96 	bl	2bdda <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2beae:	a903      	add	r1, sp, #12
   2beb0:	a807      	add	r0, sp, #28
   2beb2:	f7ff ff92 	bl	2bdda <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2beb6:	2310      	movs	r3, #16
   2beb8:	4619      	mov	r1, r3
   2beba:	eb0d 0203 	add.w	r2, sp, r3
   2bebe:	4668      	mov	r0, sp
   2bec0:	f7ff fef5 	bl	2bcae <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2bec4:	4621      	mov	r1, r4
   2bec6:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2bec8:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2beca:	f7ff ff08 	bl	2bcde <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2bece:	42b4      	cmp	r4, r6
   2bed0:	d1db      	bne.n	2be8a <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2bed2:	f7ea fdad 	bl	16a30 <sub_bytes>
	shift_rows(state);
   2bed6:	4668      	mov	r0, sp
   2bed8:	f7ff ff46 	bl	2bd68 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2bedc:	4621      	mov	r1, r4
   2bede:	4668      	mov	r0, sp
   2bee0:	f7ff fefd 	bl	2bcde <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2bee4:	2310      	movs	r3, #16
   2bee6:	4619      	mov	r1, r3
   2bee8:	466a      	mov	r2, sp
   2beea:	4628      	mov	r0, r5
   2beec:	f7ff fedf 	bl	2bcae <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2bef0:	4668      	mov	r0, sp
   2bef2:	2210      	movs	r2, #16
   2bef4:	2100      	movs	r1, #0
   2bef6:	f7ff fee7 	bl	2bcc8 <_set>

	return TC_CRYPTO_SUCCESS;
   2befa:	2001      	movs	r0, #1
}
   2befc:	b008      	add	sp, #32
   2befe:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2bf00:	4608      	mov	r0, r1
   2bf02:	e7fb      	b.n	2befc <tc_aes_encrypt+0xa0>
   2bf04:	4610      	mov	r0, r2
   2bf06:	e7f9      	b.n	2befc <tc_aes_encrypt+0xa0>

0002bf08 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2bf08:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2bf0a:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2bf0c:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2bf0e:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2bf12:	2b00      	cmp	r3, #0
   2bf14:	bfac      	ite	ge
   2bf16:	2300      	movge	r3, #0
   2bf18:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2bf1a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2bf1e:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2bf22:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2bf24:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2bf28:	d002      	beq.n	2bf30 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2bf2a:	7813      	ldrb	r3, [r2, #0]
   2bf2c:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2bf2e:	e7f4      	b.n	2bf1a <gf_double+0x12>
	}
}
   2bf30:	bd10      	pop	{r4, pc}

0002bf32 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2bf32:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2bf34:	b120      	cbz	r0, 2bf40 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2bf36:	2258      	movs	r2, #88	; 0x58
   2bf38:	2100      	movs	r1, #0
   2bf3a:	f7ff fec5 	bl	2bcc8 <_set>
   2bf3e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2bf40:	bd08      	pop	{r3, pc}

0002bf42 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2bf42:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2bf44:	4604      	mov	r4, r0
   2bf46:	b188      	cbz	r0, 2bf6c <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2bf48:	2210      	movs	r2, #16
   2bf4a:	2100      	movs	r1, #0
   2bf4c:	f7ff febc 	bl	2bcc8 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2bf50:	2210      	movs	r2, #16
   2bf52:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2bf56:	2100      	movs	r1, #0
   2bf58:	f7ff feb6 	bl	2bcc8 <_set>
	s->leftover_offset = 0;
   2bf5c:	2300      	movs	r3, #0
   2bf5e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2bf60:	2200      	movs	r2, #0
   2bf62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2bf66:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2bf6a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2bf6c:	bd10      	pop	{r4, pc}

0002bf6e <tc_cmac_setup>:
{
   2bf6e:	b570      	push	{r4, r5, r6, lr}
   2bf70:	4604      	mov	r4, r0
   2bf72:	460d      	mov	r5, r1
   2bf74:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2bf76:	b310      	cbz	r0, 2bfbe <tc_cmac_setup+0x50>
   2bf78:	b311      	cbz	r1, 2bfc0 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2bf7a:	2258      	movs	r2, #88	; 0x58
   2bf7c:	2100      	movs	r1, #0
   2bf7e:	f7ff fea3 	bl	2bcc8 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2bf82:	4629      	mov	r1, r5
	s->sched = sched;
   2bf84:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2bf86:	4630      	mov	r0, r6
   2bf88:	f7ea fd5e 	bl	16a48 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2bf8c:	2210      	movs	r2, #16
   2bf8e:	2100      	movs	r1, #0
   2bf90:	4620      	mov	r0, r4
   2bf92:	f7ff fe99 	bl	2bcc8 <_set>
	gf_double (s->K1, s->iv);
   2bf96:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2bf9a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2bf9c:	4621      	mov	r1, r4
   2bf9e:	4620      	mov	r0, r4
   2bfa0:	f7ff ff5c 	bl	2be5c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2bfa4:	4621      	mov	r1, r4
   2bfa6:	4628      	mov	r0, r5
   2bfa8:	f7ff ffae 	bl	2bf08 <gf_double>
	gf_double (s->K2, s->K1);
   2bfac:	4629      	mov	r1, r5
   2bfae:	f104 0020 	add.w	r0, r4, #32
   2bfb2:	f7ff ffa9 	bl	2bf08 <gf_double>
	tc_cmac_init(s);
   2bfb6:	4620      	mov	r0, r4
   2bfb8:	f7ff ffc3 	bl	2bf42 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2bfbc:	2001      	movs	r0, #1
}
   2bfbe:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2bfc0:	4608      	mov	r0, r1
   2bfc2:	e7fc      	b.n	2bfbe <tc_cmac_setup+0x50>

0002bfc4 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2bfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bfc8:	460e      	mov	r6, r1
   2bfca:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2bfcc:	4604      	mov	r4, r0
   2bfce:	2800      	cmp	r0, #0
   2bfd0:	d060      	beq.n	2c094 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2bfd2:	b1fa      	cbz	r2, 2c014 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2bfd4:	2900      	cmp	r1, #0
   2bfd6:	d05d      	beq.n	2c094 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2bfd8:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2bfdc:	ea53 0102 	orrs.w	r1, r3, r2
   2bfe0:	d058      	beq.n	2c094 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2bfe2:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2bfe4:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2bfe8:	f142 32ff 	adc.w	r2, r2, #4294967295
   2bfec:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2bff0:	f1b8 0f00 	cmp.w	r8, #0
   2bff4:	d02c      	beq.n	2c050 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2bff6:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2bffa:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2bffe:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2c000:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2c002:	d20a      	bcs.n	2c01a <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2c004:	462b      	mov	r3, r5
   2c006:	4632      	mov	r2, r6
   2c008:	4629      	mov	r1, r5
   2c00a:	f7ff fe50 	bl	2bcae <_copy>
			s->leftover_offset += data_length;
   2c00e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2c010:	442b      	add	r3, r5
   2c012:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2c014:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2c016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   2c01a:	463b      	mov	r3, r7
   2c01c:	4632      	mov	r2, r6
   2c01e:	4639      	mov	r1, r7
   2c020:	f7ff fe45 	bl	2bcae <_copy>
		data_length -= remaining_space;
   2c024:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   2c026:	2300      	movs	r3, #0
   2c028:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2c02a:	4445      	add	r5, r8
		data += remaining_space;
   2c02c:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c02e:	1e63      	subs	r3, r4, #1
   2c030:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2c034:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2c038:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c03c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2c03e:	ea82 0200 	eor.w	r2, r2, r0
   2c042:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c044:	d1f6      	bne.n	2c034 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2c046:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2c048:	4621      	mov	r1, r4
   2c04a:	4620      	mov	r0, r4
   2c04c:	f7ff ff06 	bl	2be5c <tc_aes_encrypt>
   2c050:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2c054:	2d10      	cmp	r5, #16
   2c056:	d80a      	bhi.n	2c06e <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2c058:	2d00      	cmp	r5, #0
   2c05a:	d0db      	beq.n	2c014 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   2c05c:	462b      	mov	r3, r5
   2c05e:	4632      	mov	r2, r6
   2c060:	4629      	mov	r1, r5
   2c062:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2c066:	f7ff fe22 	bl	2bcae <_copy>
		s->leftover_offset = data_length;
   2c06a:	6465      	str	r5, [r4, #68]	; 0x44
   2c06c:	e7d2      	b.n	2c014 <tc_cmac_update+0x50>
   2c06e:	1e63      	subs	r3, r4, #1
   2c070:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2c072:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2c076:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c07a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2c07c:	ea82 0200 	eor.w	r2, r2, r0
   2c080:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c082:	d1f6      	bne.n	2c072 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2c084:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2c086:	4621      	mov	r1, r4
   2c088:	4620      	mov	r0, r4
   2c08a:	f7ff fee7 	bl	2be5c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2c08e:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2c090:	3d10      	subs	r5, #16
   2c092:	e7df      	b.n	2c054 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2c094:	2000      	movs	r0, #0
   2c096:	e7be      	b.n	2c016 <tc_cmac_update+0x52>

0002c098 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2c098:	b570      	push	{r4, r5, r6, lr}
   2c09a:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2c09c:	4605      	mov	r5, r0
   2c09e:	b1e8      	cbz	r0, 2c0dc <tc_cmac_final+0x44>
   2c0a0:	b369      	cbz	r1, 2c0fe <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2c0a2:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2c0a4:	2a10      	cmp	r2, #16
   2c0a6:	d11a      	bne.n	2c0de <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2c0a8:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c0aa:	1e63      	subs	r3, r4, #1
   2c0ac:	3901      	subs	r1, #1
   2c0ae:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2c0b2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2c0b6:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2c0ba:	4072      	eors	r2, r6
   2c0bc:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c0c0:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2c0c2:	ea82 0206 	eor.w	r2, r2, r6
   2c0c6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c0c8:	d1f3      	bne.n	2c0b2 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2c0ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2c0cc:	4621      	mov	r1, r4
   2c0ce:	4628      	mov	r0, r5
   2c0d0:	f7ff fec4 	bl	2be5c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2c0d4:	4620      	mov	r0, r4
   2c0d6:	f7ff ff2c 	bl	2bf32 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2c0da:	2001      	movs	r0, #1
}
   2c0dc:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2c0de:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2c0e2:	2100      	movs	r1, #0
   2c0e4:	f1c2 0210 	rsb	r2, r2, #16
   2c0e8:	4420      	add	r0, r4
   2c0ea:	f7ff fded 	bl	2bcc8 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2c0ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2c0f0:	4423      	add	r3, r4
   2c0f2:	2280      	movs	r2, #128	; 0x80
   2c0f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2c0f8:	f104 0120 	add.w	r1, r4, #32
   2c0fc:	e7d5      	b.n	2c0aa <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2c0fe:	4608      	mov	r0, r1
   2c100:	e7ec      	b.n	2c0dc <tc_cmac_final+0x44>

0002c102 <abort_function>:
{
   2c102:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2c104:	2000      	movs	r0, #0
   2c106:	f7e7 ff59 	bl	13fbc <sys_reboot>

0002c10a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2c10a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2c10c:	6800      	ldr	r0, [r0, #0]
   2c10e:	f7ea bdf9 	b.w	16d04 <z_arm_fatal_error>

0002c112 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2c112:	2100      	movs	r1, #0
   2c114:	2001      	movs	r0, #1
   2c116:	f7ea bdf5 	b.w	16d04 <z_arm_fatal_error>

0002c11a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2c11a:	b508      	push	{r3, lr}
	handler();
   2c11c:	f7ea feb0 	bl	16e80 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2c120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2c124:	f7ea bf88 	b.w	17038 <z_arm_exc_exit>

0002c128 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   2c128:	2300      	movs	r3, #0
   2c12a:	f7e8 bd4b 	b.w	14bc4 <z_impl_z_log_msg_static_create>

0002c12e <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   2c12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c132:	4684      	mov	ip, r0
   2c134:	460f      	mov	r7, r1
	register const char *s = nptr;
   2c136:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   2c138:	4621      	mov	r1, r4
   2c13a:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2c13e:	2b20      	cmp	r3, #32
   2c140:	d0fa      	beq.n	2c138 <strtoul+0xa>
   2c142:	f1a3 0009 	sub.w	r0, r3, #9
   2c146:	2804      	cmp	r0, #4
   2c148:	d9f6      	bls.n	2c138 <strtoul+0xa>
	} while (isspace((unsigned char)c) != 0);
	if (c == '-') {
   2c14a:	2b2d      	cmp	r3, #45	; 0x2d
   2c14c:	d125      	bne.n	2c19a <strtoul+0x6c>
		neg = 1;
		c = *s++;
   2c14e:	784b      	ldrb	r3, [r1, #1]
   2c150:	1c8c      	adds	r4, r1, #2
		neg = 1;
   2c152:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2c156:	bb3a      	cbnz	r2, 2c1a8 <strtoul+0x7a>
   2c158:	2b30      	cmp	r3, #48	; 0x30
   2c15a:	d032      	beq.n	2c1c2 <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   2c15c:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2c15e:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2c162:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2c164:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2c168:	fb02 f801 	mul.w	r8, r2, r1
   2c16c:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   2c170:	4628      	mov	r0, r5
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2c172:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit((unsigned char)c) != 0) {
   2c176:	2e09      	cmp	r6, #9
   2c178:	d82a      	bhi.n	2c1d0 <strtoul+0xa2>
			c -= '0';
   2c17a:	4633      	mov	r3, r6
		} else if (isalpha((unsigned char)c) != 0) {
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   2c17c:	429a      	cmp	r2, r3
   2c17e:	dd37      	ble.n	2c1f0 <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2c180:	1c6e      	adds	r6, r5, #1
   2c182:	d007      	beq.n	2c194 <strtoul+0x66>
   2c184:	4288      	cmp	r0, r1
   2c186:	d830      	bhi.n	2c1ea <strtoul+0xbc>
   2c188:	d101      	bne.n	2c18e <strtoul+0x60>
   2c18a:	4543      	cmp	r3, r8
   2c18c:	dc2d      	bgt.n	2c1ea <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2c18e:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2c192:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   2c194:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c) != 0) {
   2c198:	e7eb      	b.n	2c172 <strtoul+0x44>
	} else if (c == '+') {
   2c19a:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2c19c:	bf04      	itt	eq
   2c19e:	784b      	ldrbeq	r3, [r1, #1]
   2c1a0:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2c1a2:	f04f 0e00 	mov.w	lr, #0
   2c1a6:	e7d6      	b.n	2c156 <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   2c1a8:	2a10      	cmp	r2, #16
   2c1aa:	d1d8      	bne.n	2c15e <strtoul+0x30>
   2c1ac:	2b30      	cmp	r3, #48	; 0x30
   2c1ae:	d1d6      	bne.n	2c15e <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2c1b0:	7821      	ldrb	r1, [r4, #0]
   2c1b2:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   2c1b6:	2958      	cmp	r1, #88	; 0x58
   2c1b8:	d1d1      	bne.n	2c15e <strtoul+0x30>
		c = s[1];
   2c1ba:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   2c1bc:	2210      	movs	r2, #16
		s += 2;
   2c1be:	3402      	adds	r4, #2
	if (base == 0) {
   2c1c0:	e7cd      	b.n	2c15e <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2c1c2:	7822      	ldrb	r2, [r4, #0]
   2c1c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   2c1c8:	2a58      	cmp	r2, #88	; 0x58
   2c1ca:	d0f6      	beq.n	2c1ba <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   2c1cc:	2208      	movs	r2, #8
   2c1ce:	e7c6      	b.n	2c15e <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2c1d0:	f043 0620 	orr.w	r6, r3, #32
   2c1d4:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha((unsigned char)c) != 0) {
   2c1d6:	2e19      	cmp	r6, #25
   2c1d8:	d80a      	bhi.n	2c1f0 <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2c1da:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
   2c1de:	2e1a      	cmp	r6, #26
   2c1e0:	bf34      	ite	cc
   2c1e2:	2637      	movcc	r6, #55	; 0x37
   2c1e4:	2657      	movcs	r6, #87	; 0x57
   2c1e6:	1b9b      	subs	r3, r3, r6
   2c1e8:	e7c8      	b.n	2c17c <strtoul+0x4e>
			any = -1;
   2c1ea:	f04f 35ff 	mov.w	r5, #4294967295
   2c1ee:	e7d1      	b.n	2c194 <strtoul+0x66>
		}
	}
	if (any < 0) {
   2c1f0:	1c6b      	adds	r3, r5, #1
   2c1f2:	d107      	bne.n	2c204 <strtoul+0xd6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2c1f4:	f7f9 fcc8 	bl	25b88 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2c1f8:	2322      	movs	r3, #34	; 0x22
   2c1fa:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2c1fc:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   2c1fe:	b947      	cbnz	r7, 2c212 <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2c200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   2c204:	f1be 0f00 	cmp.w	lr, #0
   2c208:	d000      	beq.n	2c20c <strtoul+0xde>
		acc = -acc;
   2c20a:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2c20c:	2f00      	cmp	r7, #0
   2c20e:	d0f7      	beq.n	2c200 <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   2c210:	b10d      	cbz	r5, 2c216 <strtoul+0xe8>
   2c212:	f104 3cff 	add.w	ip, r4, #4294967295
   2c216:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   2c21a:	e7f1      	b.n	2c200 <strtoul+0xd2>

0002c21c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2c21c:	3901      	subs	r1, #1
   2c21e:	4603      	mov	r3, r0
   2c220:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2c224:	b90a      	cbnz	r2, 2c22a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   2c226:	701a      	strb	r2, [r3, #0]

	return dest;
}
   2c228:	4770      	bx	lr
		*d = *s;
   2c22a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2c22e:	e7f7      	b.n	2c220 <strcpy+0x4>

0002c230 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2c230:	4603      	mov	r3, r0
	size_t n = 0;
   2c232:	2000      	movs	r0, #0

	while (*s != '\0') {
   2c234:	5c1a      	ldrb	r2, [r3, r0]
   2c236:	b902      	cbnz	r2, 2c23a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2c238:	4770      	bx	lr
		n++;
   2c23a:	3001      	adds	r0, #1
   2c23c:	e7fa      	b.n	2c234 <strlen+0x4>

0002c23e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2c23e:	4603      	mov	r3, r0
	size_t n = 0;
   2c240:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2c242:	5c1a      	ldrb	r2, [r3, r0]
   2c244:	b10a      	cbz	r2, 2c24a <strnlen+0xc>
   2c246:	4288      	cmp	r0, r1
   2c248:	d100      	bne.n	2c24c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2c24a:	4770      	bx	lr
		n++;
   2c24c:	3001      	adds	r0, #1
   2c24e:	e7f8      	b.n	2c242 <strnlen+0x4>

0002c250 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2c250:	1e43      	subs	r3, r0, #1
   2c252:	3901      	subs	r1, #1
   2c254:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2c258:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2c25c:	4282      	cmp	r2, r0
   2c25e:	d101      	bne.n	2c264 <strcmp+0x14>
   2c260:	2a00      	cmp	r2, #0
   2c262:	d1f7      	bne.n	2c254 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2c264:	1a10      	subs	r0, r2, r0
   2c266:	4770      	bx	lr

0002c268 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   2c268:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2c26a:	460b      	mov	r3, r1
   2c26c:	4605      	mov	r5, r0
   2c26e:	b16a      	cbz	r2, 2c28c <strncmp+0x24>
   2c270:	f810 6b01 	ldrb.w	r6, [r0], #1
   2c274:	781c      	ldrb	r4, [r3, #0]
   2c276:	42b4      	cmp	r4, r6
   2c278:	f101 0101 	add.w	r1, r1, #1
   2c27c:	d100      	bne.n	2c280 <strncmp+0x18>
   2c27e:	b91c      	cbnz	r4, 2c288 <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2c280:	782a      	ldrb	r2, [r5, #0]
   2c282:	781b      	ldrb	r3, [r3, #0]
   2c284:	1ad0      	subs	r0, r2, r3
   2c286:	e002      	b.n	2c28e <strncmp+0x26>
		n--;
   2c288:	3a01      	subs	r2, #1
   2c28a:	e7ee      	b.n	2c26a <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   2c28c:	4610      	mov	r0, r2
}
   2c28e:	bd70      	pop	{r4, r5, r6, pc}

0002c290 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   2c290:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2c292:	b15a      	cbz	r2, 2c2ac <memcmp+0x1c>
   2c294:	3901      	subs	r1, #1
   2c296:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2c298:	f810 2b01 	ldrb.w	r2, [r0], #1
   2c29c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2c2a0:	42a0      	cmp	r0, r4
   2c2a2:	d001      	beq.n	2c2a8 <memcmp+0x18>
   2c2a4:	429a      	cmp	r2, r3
   2c2a6:	d0f7      	beq.n	2c298 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2c2a8:	1ad0      	subs	r0, r2, r3
}
   2c2aa:	bd10      	pop	{r4, pc}
		return 0;
   2c2ac:	4610      	mov	r0, r2
   2c2ae:	e7fc      	b.n	2c2aa <memcmp+0x1a>

0002c2b0 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   2c2b0:	1a43      	subs	r3, r0, r1
   2c2b2:	4293      	cmp	r3, r2
{
   2c2b4:	b510      	push	{r4, lr}
   2c2b6:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   2c2ba:	d308      	bcc.n	2c2ce <memmove+0x1e>
   2c2bc:	3901      	subs	r1, #1
	char *dest = d;
   2c2be:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   2c2c0:	429a      	cmp	r2, r3
   2c2c2:	d00b      	beq.n	2c2dc <memmove+0x2c>
			*dest = *src;
   2c2c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2c2c8:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2c2cc:	e7f8      	b.n	2c2c0 <memmove+0x10>
   2c2ce:	440a      	add	r2, r1
			dest[n] = src[n];
   2c2d0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2c2d4:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   2c2d8:	428a      	cmp	r2, r1
   2c2da:	d1f9      	bne.n	2c2d0 <memmove+0x20>
		}
	}

	return d;
}
   2c2dc:	bd10      	pop	{r4, pc}

0002c2de <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2c2de:	b510      	push	{r4, lr}
   2c2e0:	1e43      	subs	r3, r0, #1
   2c2e2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2c2e4:	4291      	cmp	r1, r2
   2c2e6:	d100      	bne.n	2c2ea <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2c2e8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2c2ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   2c2ee:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2c2f2:	e7f7      	b.n	2c2e4 <memcpy+0x6>

0002c2f4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2c2f4:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2c2f6:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   2c2f8:	4603      	mov	r3, r0
	while (n > 0) {
   2c2fa:	4293      	cmp	r3, r2
   2c2fc:	d100      	bne.n	2c300 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2c2fe:	4770      	bx	lr
		*(d_byte++) = c_byte;
   2c300:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2c304:	e7f9      	b.n	2c2fa <memset+0x6>

0002c306 <_stdout_hook_default>:
}
   2c306:	f04f 30ff 	mov.w	r0, #4294967295
   2c30a:	4770      	bx	lr

0002c30c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2c30c:	2806      	cmp	r0, #6
   2c30e:	d108      	bne.n	2c322 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2c310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c314:	2201      	movs	r2, #1
   2c316:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2c31a:	f3bf 8f4f 	dsb	sy
        __WFE();
   2c31e:	bf20      	wfe
    while (true)
   2c320:	e7fd      	b.n	2c31e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2c322:	4770      	bx	lr

0002c324 <pm_state_exit_post_ops>:
   2c324:	2300      	movs	r3, #0
   2c326:	f383 8811 	msr	BASEPRI, r3
   2c32a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2c32e:	4770      	bx	lr

0002c330 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   2c330:	b530      	push	{r4, r5, lr}
   2c332:	b085      	sub	sp, #20
   2c334:	4604      	mov	r4, r0
   2c336:	4615      	mov	r5, r2

	LOG_DBG("irk %s", bt_hex(irk, 16));
	LOG_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2c338:	4668      	mov	r0, sp
   2c33a:	2203      	movs	r2, #3
   2c33c:	f7ff ffcf 	bl	2c2de <memcpy>
	(void)memset(res + 3, 0, 13);
   2c340:	220d      	movs	r2, #13
   2c342:	2100      	movs	r1, #0
   2c344:	f10d 0003 	add.w	r0, sp, #3
   2c348:	f7ff ffd4 	bl	2c2f4 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2c34c:	4620      	mov	r0, r4
   2c34e:	466a      	mov	r2, sp
   2c350:	4669      	mov	r1, sp
   2c352:	f002 fe05 	bl	2ef60 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2c356:	4604      	mov	r4, r0
   2c358:	b920      	cbnz	r0, 2c364 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   2c35a:	2203      	movs	r2, #3
   2c35c:	4669      	mov	r1, sp
   2c35e:	4628      	mov	r0, r5
   2c360:	f7ff ffbd 	bl	2c2de <memcpy>

	return 0;
}
   2c364:	4620      	mov	r0, r4
   2c366:	b005      	add	sp, #20
   2c368:	bd30      	pop	{r4, r5, pc}

0002c36a <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2c36a:	b513      	push	{r0, r1, r4, lr}
   2c36c:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   2c36e:	aa01      	add	r2, sp, #4
   2c370:	3103      	adds	r1, #3
   2c372:	f7ff ffdd 	bl	2c330 <ah>
	if (err) {
   2c376:	b948      	cbnz	r0, 2c38c <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2c378:	2203      	movs	r2, #3
   2c37a:	a901      	add	r1, sp, #4
   2c37c:	4620      	mov	r0, r4
   2c37e:	f7ff ff87 	bl	2c290 <memcmp>
   2c382:	fab0 f080 	clz	r0, r0
   2c386:	0940      	lsrs	r0, r0, #5
}
   2c388:	b002      	add	sp, #8
   2c38a:	bd10      	pop	{r4, pc}
		return false;
   2c38c:	2000      	movs	r0, #0
   2c38e:	e7fb      	b.n	2c388 <bt_rpa_irk_matches+0x1e>

0002c390 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   2c390:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   2c392:	1cce      	adds	r6, r1, #3
{
   2c394:	4605      	mov	r5, r0
   2c396:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   2c398:	4630      	mov	r0, r6
   2c39a:	2103      	movs	r1, #3
   2c39c:	f7f7 fbc8 	bl	23b30 <bt_rand>
	if (err) {
   2c3a0:	b960      	cbnz	r0, 2c3bc <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   2c3a2:	7963      	ldrb	r3, [r4, #5]
   2c3a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2c3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c3ac:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   2c3ae:	4622      	mov	r2, r4
   2c3b0:	4631      	mov	r1, r6
   2c3b2:	4628      	mov	r0, r5
	}

	LOG_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   2c3b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   2c3b8:	f7ff bfba 	b.w	2c330 <ah>
}
   2c3bc:	bd70      	pop	{r4, r5, r6, pc}

0002c3be <z_log_msg_static_create.constprop.0>:
   2c3be:	2300      	movs	r3, #0
   2c3c0:	f7e8 bc00 	b.w	14bc4 <z_impl_z_log_msg_static_create>

0002c3c4 <bt_settings_decode_key>:
{
   2c3c4:	b570      	push	{r4, r5, r6, lr}
   2c3c6:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   2c3c8:	2100      	movs	r1, #0
{
   2c3ca:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   2c3cc:	f7ff fba0 	bl	2bb10 <settings_name_next>
   2c3d0:	280d      	cmp	r0, #13
   2c3d2:	d118      	bne.n	2c406 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2c3d4:	7b23      	ldrb	r3, [r4, #12]
   2c3d6:	2b30      	cmp	r3, #48	; 0x30
   2c3d8:	d013      	beq.n	2c402 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   2c3da:	2b31      	cmp	r3, #49	; 0x31
   2c3dc:	d113      	bne.n	2c406 <bt_settings_decode_key+0x42>
   2c3de:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   2c3e0:	f805 3b06 	strb.w	r3, [r5], #6
   2c3e4:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2c3e8:	462a      	mov	r2, r5
   2c3ea:	4620      	mov	r0, r4
   2c3ec:	2301      	movs	r3, #1
   2c3ee:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   2c3f0:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2c3f2:	f7fe f85f 	bl	2a4b4 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2c3f6:	42b4      	cmp	r4, r6
   2c3f8:	f105 35ff 	add.w	r5, r5, #4294967295
   2c3fc:	d1f4      	bne.n	2c3e8 <bt_settings_decode_key+0x24>
	return 0;
   2c3fe:	2000      	movs	r0, #0
}
   2c400:	bd70      	pop	{r4, r5, r6, pc}
   2c402:	2300      	movs	r3, #0
   2c404:	e7ec      	b.n	2c3e0 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   2c406:	f06f 0015 	mvn.w	r0, #21
   2c40a:	e7f9      	b.n	2c400 <bt_settings_decode_key+0x3c>

0002c40c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2c40c:	b510      	push	{r4, lr}
   2c40e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2c410:	7801      	ldrb	r1, [r0, #0]
   2c412:	7822      	ldrb	r2, [r4, #0]
   2c414:	428a      	cmp	r2, r1
{
   2c416:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2c418:	d00f      	beq.n	2c43a <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2c41a:	4669      	mov	r1, sp
   2c41c:	f7eb fd34 	bl	17e88 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2c420:	a905      	add	r1, sp, #20
   2c422:	4620      	mov	r0, r4
   2c424:	f7eb fd30 	bl	17e88 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2c428:	2210      	movs	r2, #16
   2c42a:	f10d 0115 	add.w	r1, sp, #21
   2c42e:	f10d 0001 	add.w	r0, sp, #1
   2c432:	f7ff ff2d 	bl	2c290 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2c436:	b00a      	add	sp, #40	; 0x28
   2c438:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2c43a:	2a01      	cmp	r2, #1
   2c43c:	d006      	beq.n	2c44c <bt_uuid_cmp+0x40>
   2c43e:	2a02      	cmp	r2, #2
   2c440:	d007      	beq.n	2c452 <bt_uuid_cmp+0x46>
   2c442:	b972      	cbnz	r2, 2c462 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2c444:	8840      	ldrh	r0, [r0, #2]
   2c446:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2c448:	1ac0      	subs	r0, r0, r3
   2c44a:	e7f4      	b.n	2c436 <bt_uuid_cmp+0x2a>
   2c44c:	6840      	ldr	r0, [r0, #4]
   2c44e:	6863      	ldr	r3, [r4, #4]
   2c450:	e7fa      	b.n	2c448 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2c452:	2210      	movs	r2, #16
   2c454:	1c61      	adds	r1, r4, #1
   2c456:	3001      	adds	r0, #1
}
   2c458:	b00a      	add	sp, #40	; 0x28
   2c45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2c45e:	f7ff bf17 	b.w	2c290 <memcmp>
	switch (u1->type) {
   2c462:	f06f 0015 	mvn.w	r0, #21
   2c466:	e7e6      	b.n	2c436 <bt_uuid_cmp+0x2a>

0002c468 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2c468:	2a04      	cmp	r2, #4
{
   2c46a:	b510      	push	{r4, lr}
	switch (data_len) {
   2c46c:	d00a      	beq.n	2c484 <bt_uuid_create+0x1c>
   2c46e:	2a10      	cmp	r2, #16
   2c470:	d00d      	beq.n	2c48e <bt_uuid_create+0x26>
   2c472:	2a02      	cmp	r2, #2
   2c474:	f04f 0300 	mov.w	r3, #0
   2c478:	d10f      	bne.n	2c49a <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2c47a:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2c47c:	880b      	ldrh	r3, [r1, #0]
   2c47e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2c480:	2001      	movs	r0, #1
}
   2c482:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   2c484:	2301      	movs	r3, #1
   2c486:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2c488:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2c48a:	6043      	str	r3, [r0, #4]
		break;
   2c48c:	e7f8      	b.n	2c480 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   2c48e:	2302      	movs	r3, #2
   2c490:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2c494:	f7ff ff23 	bl	2c2de <memcpy>
		break;
   2c498:	e7f2      	b.n	2c480 <bt_uuid_create+0x18>
	switch (data_len) {
   2c49a:	4618      	mov	r0, r3
   2c49c:	e7f1      	b.n	2c482 <bt_uuid_create+0x1a>

0002c49e <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2c49e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2c4a0:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2c4a2:	2106      	movs	r1, #6
{
   2c4a4:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2c4a6:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2c4aa:	f7f7 fb41 	bl	23b30 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2c4ae:	b918      	cbnz	r0, 2c4b8 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2c4b0:	79a3      	ldrb	r3, [r4, #6]
   2c4b2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2c4b6:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2c4b8:	bd10      	pop	{r4, pc}

0002c4ba <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   2c4ba:	b510      	push	{r4, lr}
   2c4bc:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   2c4be:	2207      	movs	r2, #7
   2c4c0:	f7ff ff0d 	bl	2c2de <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   2c4c4:	7823      	ldrb	r3, [r4, #0]
   2c4c6:	f023 0302 	bic.w	r3, r3, #2
   2c4ca:	7023      	strb	r3, [r4, #0]
}
   2c4cc:	bd10      	pop	{r4, pc}

0002c4ce <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   2c4ce:	7800      	ldrb	r0, [r0, #0]
}
   2c4d0:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2c4d4:	4770      	bx	lr

0002c4d6 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2c4d6:	280f      	cmp	r0, #15
   2c4d8:	d807      	bhi.n	2c4ea <bt_hci_evt_get_flags+0x14>
   2c4da:	280d      	cmp	r0, #13
   2c4dc:	d80b      	bhi.n	2c4f6 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2c4de:	2805      	cmp	r0, #5
   2c4e0:	bf08      	it	eq
   2c4e2:	2003      	moveq	r0, #3
   2c4e4:	bf18      	it	ne
   2c4e6:	2002      	movne	r0, #2
   2c4e8:	4770      	bx	lr
	switch (evt) {
   2c4ea:	2813      	cmp	r0, #19
   2c4ec:	d003      	beq.n	2c4f6 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2c4ee:	281a      	cmp	r0, #26
   2c4f0:	bf08      	it	eq
   2c4f2:	2001      	moveq	r0, #1
   2c4f4:	e7f6      	b.n	2c4e4 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2c4f6:	2001      	movs	r0, #1
	}
}
   2c4f8:	4770      	bx	lr

0002c4fa <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2c4fa:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2c4fe:	b183      	cbz	r3, 2c522 <update_sec_level+0x28>
   2c500:	7b5a      	ldrb	r2, [r3, #13]
   2c502:	07d1      	lsls	r1, r2, #31
   2c504:	d50d      	bpl.n	2c522 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2c506:	06d2      	lsls	r2, r2, #27
   2c508:	d50d      	bpl.n	2c526 <update_sec_level+0x2c>
   2c50a:	7b1b      	ldrb	r3, [r3, #12]
   2c50c:	2b10      	cmp	r3, #16
   2c50e:	bf14      	ite	ne
   2c510:	2303      	movne	r3, #3
   2c512:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   2c514:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2c516:	7a80      	ldrb	r0, [r0, #10]
}
   2c518:	4298      	cmp	r0, r3
   2c51a:	bf8c      	ite	hi
   2c51c:	2000      	movhi	r0, #0
   2c51e:	2001      	movls	r0, #1
   2c520:	4770      	bx	lr
   2c522:	2302      	movs	r3, #2
   2c524:	e7f6      	b.n	2c514 <update_sec_level+0x1a>
   2c526:	2303      	movs	r3, #3
   2c528:	e7f4      	b.n	2c514 <update_sec_level+0x1a>

0002c52a <hci_vendor_event>:
}
   2c52a:	4770      	bx	lr

0002c52c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c52c:	f3bf 8f5b 	dmb	ish
   2c530:	6800      	ldr	r0, [r0, #0]
   2c532:	f3bf 8f5b 	dmb	ish
}
   2c536:	4770      	bx	lr

0002c538 <bt_addr_le_copy>:
   2c538:	2207      	movs	r2, #7
   2c53a:	f7ff bed0 	b.w	2c2de <memcpy>

0002c53e <atomic_or>:
{
   2c53e:	b510      	push	{r4, lr}
   2c540:	4603      	mov	r3, r0
}
   2c542:	f3bf 8f5b 	dmb	ish
   2c546:	e853 0f00 	ldrex	r0, [r3]
   2c54a:	ea40 0201 	orr.w	r2, r0, r1
   2c54e:	e843 2400 	strex	r4, r2, [r3]
   2c552:	2c00      	cmp	r4, #0
   2c554:	d1f7      	bne.n	2c546 <atomic_or+0x8>
   2c556:	f3bf 8f5b 	dmb	ish
   2c55a:	bd10      	pop	{r4, pc}

0002c55c <unpair_remote>:
{
   2c55c:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   2c55e:	4601      	mov	r1, r0
   2c560:	7818      	ldrb	r0, [r3, #0]
   2c562:	f7eb bd41 	b.w	17fe8 <unpair>

0002c566 <z_log_msg_static_create.constprop.0>:
   2c566:	2300      	movs	r3, #0
   2c568:	f7e8 bb2c 	b.w	14bc4 <z_impl_z_log_msg_static_create>

0002c56c <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c56c:	f3bf 8f5b 	dmb	ish
   2c570:	e850 3f00 	ldrex	r3, [r0]
   2c574:	400b      	ands	r3, r1
   2c576:	e840 3200 	strex	r2, r3, [r0]
   2c57a:	2a00      	cmp	r2, #0
   2c57c:	d1f8      	bne.n	2c570 <atomic_and.isra.0+0x4>
   2c57e:	f3bf 8f5b 	dmb	ish
}
   2c582:	4770      	bx	lr

0002c584 <sys_put_le64>:
	dst[1] = val >> 8;
   2c584:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2c588:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2c58a:	0e00      	lsrs	r0, r0, #24
   2c58c:	7053      	strb	r3, [r2, #1]
   2c58e:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2c590:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2c592:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2c596:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2c598:	7093      	strb	r3, [r2, #2]
   2c59a:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2c59c:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2c59e:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2c5a0:	71d1      	strb	r1, [r2, #7]
}
   2c5a2:	4770      	bx	lr

0002c5a4 <bt_hci_disconnect>:
{
   2c5a4:	b570      	push	{r4, r5, r6, lr}
   2c5a6:	4606      	mov	r6, r0
   2c5a8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2c5aa:	f240 4006 	movw	r0, #1030	; 0x406
   2c5ae:	2103      	movs	r1, #3
   2c5b0:	f7ec f9b6 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   2c5b4:	4604      	mov	r4, r0
   2c5b6:	b168      	cbz	r0, 2c5d4 <bt_hci_disconnect+0x30>
   2c5b8:	2103      	movs	r1, #3
   2c5ba:	300c      	adds	r0, #12
   2c5bc:	f002 f8a1 	bl	2e702 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2c5c0:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2c5c2:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2c5c4:	4621      	mov	r1, r4
   2c5c6:	2200      	movs	r2, #0
}
   2c5c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2c5cc:	f240 4006 	movw	r0, #1030	; 0x406
   2c5d0:	f7ec b9e0 	b.w	18994 <bt_hci_cmd_send_sync>
}
   2c5d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c5d8:	bd70      	pop	{r4, r5, r6, pc}

0002c5da <bt_le_set_data_len>:
{
   2c5da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c5dc:	4607      	mov	r7, r0
   2c5de:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2c5e0:	f242 0022 	movw	r0, #8226	; 0x2022
   2c5e4:	2106      	movs	r1, #6
{
   2c5e6:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2c5e8:	f7ec f99a 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   2c5ec:	4604      	mov	r4, r0
   2c5ee:	b178      	cbz	r0, 2c610 <bt_le_set_data_len+0x36>
   2c5f0:	2106      	movs	r1, #6
   2c5f2:	300c      	adds	r0, #12
   2c5f4:	f002 f885 	bl	2e702 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c5f8:	883b      	ldrh	r3, [r7, #0]
   2c5fa:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2c5fc:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2c5fe:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2c600:	4621      	mov	r1, r4
   2c602:	2200      	movs	r2, #0
}
   2c604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2c608:	f242 0022 	movw	r0, #8226	; 0x2022
   2c60c:	f7ec b9c2 	b.w	18994 <bt_hci_cmd_send_sync>
}
   2c610:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c616 <bt_le_set_phy>:
{
   2c616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c61a:	4681      	mov	r9, r0
   2c61c:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2c61e:	f242 0032 	movw	r0, #8242	; 0x2032
   2c622:	2107      	movs	r1, #7
{
   2c624:	f89d a020 	ldrb.w	sl, [sp, #32]
   2c628:	4617      	mov	r7, r2
   2c62a:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2c62c:	f7ec f978 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   2c630:	4605      	mov	r5, r0
   2c632:	b1a0      	cbz	r0, 2c65e <bt_le_set_phy+0x48>
   2c634:	2107      	movs	r1, #7
   2c636:	300c      	adds	r0, #12
   2c638:	f002 f863 	bl	2e702 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c63c:	f8b9 3000 	ldrh.w	r3, [r9]
   2c640:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2c642:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2c646:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2c648:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2c64a:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2c64e:	4629      	mov	r1, r5
   2c650:	2200      	movs	r2, #0
}
   2c652:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2c656:	f242 0032 	movw	r0, #8242	; 0x2032
   2c65a:	f7ec b99b 	b.w	18994 <bt_hci_cmd_send_sync>
}
   2c65e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c666 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2c666:	68c0      	ldr	r0, [r0, #12]
   2c668:	f7ec ba68 	b.w	18b3c <bt_hci_le_enh_conn_complete>

0002c66c <bt_le_conn_params_valid>:
{
   2c66c:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2c66e:	8803      	ldrh	r3, [r0, #0]
   2c670:	8842      	ldrh	r2, [r0, #2]
   2c672:	4293      	cmp	r3, r2
   2c674:	d819      	bhi.n	2c6aa <bt_le_conn_params_valid+0x3e>
   2c676:	2b05      	cmp	r3, #5
   2c678:	d917      	bls.n	2c6aa <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2c67a:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2c67e:	d814      	bhi.n	2c6aa <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2c680:	8883      	ldrh	r3, [r0, #4]
   2c682:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2c686:	d210      	bcs.n	2c6aa <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c688:	88c0      	ldrh	r0, [r0, #6]
   2c68a:	f1a0 010a 	sub.w	r1, r0, #10
   2c68e:	b289      	uxth	r1, r1
   2c690:	f640 4476 	movw	r4, #3190	; 0xc76
   2c694:	42a1      	cmp	r1, r4
   2c696:	d808      	bhi.n	2c6aa <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2c698:	3301      	adds	r3, #1
   2c69a:	b29b      	uxth	r3, r3
   2c69c:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c69e:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2c6a2:	bf34      	ite	cc
   2c6a4:	2001      	movcc	r0, #1
   2c6a6:	2000      	movcs	r0, #0
}
   2c6a8:	bd10      	pop	{r4, pc}
		return false;
   2c6aa:	2000      	movs	r0, #0
   2c6ac:	e7fc      	b.n	2c6a8 <bt_le_conn_params_valid+0x3c>

0002c6ae <le_conn_param_neg_reply>:
{
   2c6ae:	b570      	push	{r4, r5, r6, lr}
   2c6b0:	4606      	mov	r6, r0
   2c6b2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2c6b4:	f242 0021 	movw	r0, #8225	; 0x2021
   2c6b8:	2103      	movs	r1, #3
   2c6ba:	f7ec f931 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   2c6be:	4604      	mov	r4, r0
   2c6c0:	b918      	cbnz	r0, 2c6ca <le_conn_param_neg_reply+0x1c>
}
   2c6c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c6c6:	f7eb bd21 	b.w	1810c <le_conn_param_neg_reply.part.0>
   2c6ca:	2103      	movs	r1, #3
   2c6cc:	300c      	adds	r0, #12
   2c6ce:	f002 f818 	bl	2e702 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   2c6d2:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   2c6d4:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2c6d6:	4621      	mov	r1, r4
   2c6d8:	f242 0021 	movw	r0, #8225	; 0x2021
}
   2c6dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2c6e0:	f7ec bcda 	b.w	19098 <bt_hci_cmd_send>

0002c6e4 <bt_get_appearance>:
}
   2c6e4:	2000      	movs	r0, #0
   2c6e6:	4770      	bx	lr

0002c6e8 <bt_addr_le_is_bonded>:
{
   2c6e8:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2c6ea:	f7f3 ff75 	bl	205d8 <bt_keys_find_addr>
		return keys && keys->keys;
   2c6ee:	b118      	cbz	r0, 2c6f8 <bt_addr_le_is_bonded+0x10>
   2c6f0:	89c0      	ldrh	r0, [r0, #14]
   2c6f2:	3800      	subs	r0, #0
   2c6f4:	bf18      	it	ne
   2c6f6:	2001      	movne	r0, #1
}
   2c6f8:	bd08      	pop	{r3, pc}

0002c6fa <bt_addr_le_eq>:
{
   2c6fa:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2c6fc:	2207      	movs	r2, #7
   2c6fe:	f7ff fdc7 	bl	2c290 <memcmp>
}
   2c702:	fab0 f080 	clz	r0, r0
   2c706:	0940      	lsrs	r0, r0, #5
   2c708:	bd08      	pop	{r3, pc}

0002c70a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2c70a:	2207      	movs	r2, #7
   2c70c:	f7ff bde7 	b.w	2c2de <memcpy>

0002c710 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c710:	f3bf 8f5b 	dmb	ish
   2c714:	6800      	ldr	r0, [r0, #0]
   2c716:	f3bf 8f5b 	dmb	ish
}
   2c71a:	4770      	bx	lr

0002c71c <atomic_test_bit>:
{
   2c71c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c71e:	f7ff fff7 	bl	2c710 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c722:	4108      	asrs	r0, r1
}
   2c724:	f000 0001 	and.w	r0, r0, #1
   2c728:	bd08      	pop	{r3, pc}

0002c72a <adv_is_private_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2c72a:	f100 0210 	add.w	r2, r0, #16
{
   2c72e:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2c730:	4610      	mov	r0, r2
{
   2c732:	460c      	mov	r4, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2c734:	2107      	movs	r1, #7
   2c736:	f7ff fff1 	bl	2c71c <atomic_test_bit>
   2c73a:	b130      	cbz	r0, 2c74a <adv_is_private_enabled+0x20>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   2c73c:	210d      	movs	r1, #13
   2c73e:	4610      	mov	r0, r2
   2c740:	f7ff ffec 	bl	2c71c <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2c744:	b908      	cbnz	r0, 2c74a <adv_is_private_enabled+0x20>
		*adv_enabled = true;
   2c746:	2301      	movs	r3, #1
   2c748:	7023      	strb	r3, [r4, #0]
}
   2c74a:	bd10      	pop	{r4, pc}

0002c74c <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2c74c:	7a03      	ldrb	r3, [r0, #8]
   2c74e:	075b      	lsls	r3, r3, #29
{
   2c750:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2c752:	d505      	bpl.n	2c760 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2c754:	4601      	mov	r1, r0
   2c756:	322a      	adds	r2, #42	; 0x2a
   2c758:	f811 0b01 	ldrb.w	r0, [r1], #1
   2c75c:	f7ed b92c 	b.w	199b8 <hci_id_add>
}
   2c760:	4770      	bx	lr

0002c762 <z_log_msg_static_create.constprop.0>:
   2c762:	2300      	movs	r3, #0
   2c764:	f7e8 ba2e 	b.w	14bc4 <z_impl_z_log_msg_static_create>

0002c768 <addr_res_enable>:
{
   2c768:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2c76a:	2101      	movs	r1, #1
{
   2c76c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2c76e:	f242 002d 	movw	r0, #8237	; 0x202d
   2c772:	f7ec f8d5 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   2c776:	4604      	mov	r4, r0
   2c778:	b158      	cbz	r0, 2c792 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2c77a:	4629      	mov	r1, r5
   2c77c:	300c      	adds	r0, #12
   2c77e:	f001 ffcf 	bl	2e720 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2c782:	4621      	mov	r1, r4
   2c784:	2200      	movs	r2, #0
}
   2c786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2c78a:	f242 002d 	movw	r0, #8237	; 0x202d
   2c78e:	f7ec b901 	b.w	18994 <bt_hci_cmd_send_sync>
}
   2c792:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c796:	bd38      	pop	{r3, r4, r5, pc}

0002c798 <atomic_or.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c798:	f3bf 8f5b 	dmb	ish
   2c79c:	e850 3f00 	ldrex	r3, [r0]
   2c7a0:	430b      	orrs	r3, r1
   2c7a2:	e840 3200 	strex	r2, r3, [r0]
   2c7a6:	2a00      	cmp	r2, #0
   2c7a8:	d1f8      	bne.n	2c79c <atomic_or.isra.0+0x4>
   2c7aa:	f3bf 8f5b 	dmb	ish
}
   2c7ae:	4770      	bx	lr

0002c7b0 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c7b0:	f100 0210 	add.w	r2, r0, #16
{
   2c7b4:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c7b6:	2107      	movs	r1, #7
{
   2c7b8:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c7ba:	4610      	mov	r0, r2
   2c7bc:	f7ff ffae 	bl	2c71c <atomic_test_bit>
   2c7c0:	b150      	cbz	r0, 2c7d8 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2c7c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2c7c6:	4610      	mov	r0, r2
   2c7c8:	f7ff ffe6 	bl	2c798 <atomic_or.isra.0>
		bt_le_adv_set_enable(adv, false);
   2c7cc:	4620      	mov	r0, r4
   2c7ce:	2100      	movs	r1, #0
}
   2c7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_set_enable(adv, false);
   2c7d4:	f000 b975 	b.w	2cac2 <bt_le_adv_set_enable>
}
   2c7d8:	bd10      	pop	{r4, pc}

0002c7da <find_rl_conflict>:
{
   2c7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conflict->found) {
   2c7de:	684f      	ldr	r7, [r1, #4]
{
   2c7e0:	b086      	sub	sp, #24
   2c7e2:	4605      	mov	r5, r0
   2c7e4:	460c      	mov	r4, r1
	if (conflict->found) {
   2c7e6:	b9c7      	cbnz	r7, 2c81a <find_rl_conflict+0x40>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   2c7e8:	7a03      	ldrb	r3, [r0, #8]
   2c7ea:	075b      	lsls	r3, r3, #29
   2c7ec:	d515      	bpl.n	2c81a <find_rl_conflict+0x40>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   2c7ee:	6808      	ldr	r0, [r1, #0]
   2c7f0:	1c69      	adds	r1, r5, #1
   2c7f2:	3001      	adds	r0, #1
   2c7f4:	f7ff ff81 	bl	2c6fa <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2c7f8:	f8d4 8000 	ldr.w	r8, [r4]
   2c7fc:	2216      	movs	r2, #22
   2c7fe:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   2c800:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2c802:	4668      	mov	r0, sp
   2c804:	f7ff fd76 	bl	2c2f4 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   2c808:	2210      	movs	r2, #16
   2c80a:	4669      	mov	r1, sp
   2c80c:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   2c810:	f7ff fd3e 	bl	2c290 <memcmp>
   2c814:	b920      	cbnz	r0, 2c820 <find_rl_conflict+0x46>
	if (addr_conflict || irk_conflict) {
   2c816:	b106      	cbz	r6, 2c81a <find_rl_conflict+0x40>
		conflict->found = resident;
   2c818:	6065      	str	r5, [r4, #4]
}
   2c81a:	b006      	add	sp, #24
   2c81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c820:	6820      	ldr	r0, [r4, #0]
   2c822:	2210      	movs	r2, #16
   2c824:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   2c828:	302a      	adds	r0, #42	; 0x2a
   2c82a:	f7ff fd31 	bl	2c290 <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2c82e:	2800      	cmp	r0, #0
   2c830:	d0f2      	beq.n	2c818 <find_rl_conflict+0x3e>
   2c832:	e7f0      	b.n	2c816 <find_rl_conflict+0x3c>

0002c834 <adv_unpause_enabled>:
{
   2c834:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c836:	f100 0310 	add.w	r3, r0, #16
   2c83a:	f3bf 8f5b 	dmb	ish
   2c83e:	e853 2f00 	ldrex	r2, [r3]
   2c842:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   2c846:	e843 1400 	strex	r4, r1, [r3]
   2c84a:	2c00      	cmp	r4, #0
   2c84c:	d1f7      	bne.n	2c83e <adv_unpause_enabled+0xa>
   2c84e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2c852:	0413      	lsls	r3, r2, #16
   2c854:	d503      	bpl.n	2c85e <adv_unpause_enabled+0x2a>
}
   2c856:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   2c858:	2101      	movs	r1, #1
   2c85a:	f000 b932 	b.w	2cac2 <bt_le_adv_set_enable>
}
   2c85e:	bc10      	pop	{r4}
   2c860:	4770      	bx	lr

0002c862 <adv_rpa_invalidate>:
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED) &&
   2c862:	f100 0210 	add.w	r2, r0, #16
{
   2c866:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED) &&
   2c868:	2106      	movs	r1, #6
   2c86a:	4610      	mov	r0, r2
   2c86c:	f7ff ff56 	bl	2c71c <atomic_test_bit>
   2c870:	b980      	cbnz	r0, 2c894 <adv_rpa_invalidate+0x32>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   2c872:	210d      	movs	r1, #13
   2c874:	4610      	mov	r0, r2
   2c876:	f7ff ff51 	bl	2c71c <atomic_test_bit>
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED) &&
   2c87a:	b958      	cbnz	r0, 2c894 <adv_rpa_invalidate+0x32>
   2c87c:	f3bf 8f5b 	dmb	ish
   2c880:	e852 3f00 	ldrex	r3, [r2]
   2c884:	f023 0310 	bic.w	r3, r3, #16
   2c888:	e842 3100 	strex	r1, r3, [r2]
   2c88c:	2900      	cmp	r1, #0
   2c88e:	d1f7      	bne.n	2c880 <adv_rpa_invalidate+0x1e>
   2c890:	f3bf 8f5b 	dmb	ish
}
   2c894:	bd08      	pop	{r3, pc}

0002c896 <bt_lookup_id_addr>:
{
   2c896:	b510      	push	{r4, lr}
   2c898:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2c89a:	b930      	cbnz	r0, 2c8aa <bt_lookup_id_addr+0x14>
   2c89c:	b119      	cbz	r1, 2c8a6 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   2c89e:	f7f3 fe49 	bl	20534 <bt_keys_find_irk>
		if (keys) {
   2c8a2:	b100      	cbz	r0, 2c8a6 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   2c8a4:	1c44      	adds	r4, r0, #1
}
   2c8a6:	4620      	mov	r0, r4
   2c8a8:	bd10      	pop	{r4, pc}
		return NULL;
   2c8aa:	2400      	movs	r4, #0
   2c8ac:	e7fb      	b.n	2c8a6 <bt_lookup_id_addr+0x10>

0002c8ae <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   2c8ae:	b118      	cbz	r0, 2c8b8 <bt_id_set_adv_random_addr+0xa>
   2c8b0:	b111      	cbz	r1, 2c8b8 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   2c8b2:	4608      	mov	r0, r1
   2c8b4:	f7ed b9c6 	b.w	19c44 <set_random_address>
}
   2c8b8:	f06f 0015 	mvn.w	r0, #21
   2c8bc:	4770      	bx	lr

0002c8be <bt_id_set_adv_private_addr>:
	CHECKIF(adv == NULL) {
   2c8be:	b110      	cbz	r0, 2c8c6 <bt_id_set_adv_private_addr+0x8>
		return bt_id_set_private_addr(adv->id);
   2c8c0:	7800      	ldrb	r0, [r0, #0]
   2c8c2:	f7ed ba7d 	b.w	19dc0 <bt_id_set_private_addr>
}
   2c8c6:	f06f 0015 	mvn.w	r0, #21
   2c8ca:	4770      	bx	lr

0002c8cc <bt_id_adv_random_addr_check>:
}
   2c8cc:	3800      	subs	r0, #0
   2c8ce:	bf18      	it	ne
   2c8d0:	2001      	movne	r0, #1
   2c8d2:	4770      	bx	lr

0002c8d4 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2c8d4:	7a03      	ldrb	r3, [r0, #8]
   2c8d6:	07d9      	lsls	r1, r3, #31
   2c8d8:	d504      	bpl.n	2c8e4 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2c8da:	f023 0301 	bic.w	r3, r3, #1
   2c8de:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2c8e0:	f7ed bb24 	b.w	19f2c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2c8e4:	0799      	lsls	r1, r3, #30
   2c8e6:	d504      	bpl.n	2c8f2 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2c8e8:	f023 0302 	bic.w	r3, r3, #2
   2c8ec:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2c8ee:	f7ed bb37 	b.w	19f60 <bt_id_del>
}
   2c8f2:	4770      	bx	lr

0002c8f4 <get_adv_channel_map>:
{
   2c8f4:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2c8f6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2c8fa:	bf0c      	ite	eq
   2c8fc:	2007      	moveq	r0, #7
   2c8fe:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2c900:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2c902:	bf48      	it	mi
   2c904:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2c908:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2c90a:	bf48      	it	mi
   2c90c:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2c910:	4770      	bx	lr

0002c912 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c912:	f3bf 8f5b 	dmb	ish
   2c916:	6800      	ldr	r0, [r0, #0]
   2c918:	f3bf 8f5b 	dmb	ish
}
   2c91c:	4770      	bx	lr

0002c91e <atomic_and>:
{
   2c91e:	b510      	push	{r4, lr}
   2c920:	4603      	mov	r3, r0
}
   2c922:	f3bf 8f5b 	dmb	ish
   2c926:	e853 0f00 	ldrex	r0, [r3]
   2c92a:	ea00 0201 	and.w	r2, r0, r1
   2c92e:	e843 2400 	strex	r4, r2, [r3]
   2c932:	2c00      	cmp	r4, #0
   2c934:	d1f7      	bne.n	2c926 <atomic_and+0x8>
   2c936:	f3bf 8f5b 	dmb	ish
   2c93a:	bd10      	pop	{r4, pc}

0002c93c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c93c:	2301      	movs	r3, #1
{
   2c93e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c940:	fa03 f101 	lsl.w	r1, r3, r1
{
   2c944:	4604      	mov	r4, r0
	if (val) {
   2c946:	b162      	cbz	r2, 2c962 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c948:	f3bf 8f5b 	dmb	ish
   2c94c:	e854 3f00 	ldrex	r3, [r4]
   2c950:	430b      	orrs	r3, r1
   2c952:	e844 3200 	strex	r2, r3, [r4]
   2c956:	2a00      	cmp	r2, #0
   2c958:	d1f8      	bne.n	2c94c <atomic_set_bit_to+0x10>
   2c95a:	f3bf 8f5b 	dmb	ish
	}
}
   2c95e:	bc10      	pop	{r4}
   2c960:	4770      	bx	lr
   2c962:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c964:	43c9      	mvns	r1, r1
   2c966:	f7ff bfda 	b.w	2c91e <atomic_and>

0002c96a <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2c96a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c96e:	b087      	sub	sp, #28
   2c970:	4605      	mov	r5, r0
   2c972:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2c976:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2c97a:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   2c97e:	460c      	mov	r4, r1
   2c980:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2c982:	2100      	movs	r1, #0
   2c984:	2210      	movs	r2, #16
   2c986:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2c988:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   2c98a:	f7ff fcb3 	bl	2c2f4 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2c98e:	b9ee      	cbnz	r6, 2c9cc <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   2c990:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   2c994:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2c996:	a902      	add	r1, sp, #8
   2c998:	f242 0008 	movw	r0, #8200	; 0x2008
   2c99c:	f7ed fd06 	bl	1a3ac <hci_set_ad>
		if (err) {
   2c9a0:	4604      	mov	r4, r0
   2c9a2:	b978      	cbnz	r0, 2c9c4 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   2c9a4:	f1ba 0f00 	cmp.w	sl, #0
   2c9a8:	d13e      	bne.n	2ca28 <le_adv_update.constprop.0+0xbe>
   2c9aa:	3510      	adds	r5, #16
   2c9ac:	f3bf 8f5b 	dmb	ish
   2c9b0:	e855 3f00 	ldrex	r3, [r5]
   2c9b4:	f043 0304 	orr.w	r3, r3, #4
   2c9b8:	e845 3200 	strex	r2, r3, [r5]
   2c9bc:	2a00      	cmp	r2, #0
   2c9be:	d1f7      	bne.n	2c9b0 <le_adv_update.constprop.0+0x46>
   2c9c0:	f3bf 8f5b 	dmb	ish
}
   2c9c4:	4620      	mov	r0, r4
   2c9c6:	b007      	add	sp, #28
   2c9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2c9cc:	f7ec ff46 	bl	1985c <bt_get_name>
   2c9d0:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2c9d2:	b9e4      	cbnz	r4, 2ca0e <le_adv_update.constprop.0+0xa4>
   2c9d4:	bb37      	cbnz	r7, 2ca24 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   2c9d6:	4658      	mov	r0, fp
   2c9d8:	f7ff fc2a 	bl	2c230 <strlen>
   2c9dc:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   2c9de:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2c9e0:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   2c9e4:	f88d 3000 	strb.w	r3, [sp]
   2c9e8:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   2c9ec:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2c9f0:	d1d0      	bne.n	2c994 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   2c9f2:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2c9f6:	9605      	str	r6, [sp, #20]
			d_len = 2;
   2c9f8:	2202      	movs	r2, #2
   2c9fa:	e7cc      	b.n	2c996 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2c9fc:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2ca00:	3a08      	subs	r2, #8
   2ca02:	2a01      	cmp	r2, #1
   2ca04:	d925      	bls.n	2ca52 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2ca06:	3301      	adds	r3, #1
   2ca08:	4598      	cmp	r8, r3
   2ca0a:	d1f7      	bne.n	2c9fc <le_adv_update.constprop.0+0x92>
   2ca0c:	e7e2      	b.n	2c9d4 <le_adv_update.constprop.0+0x6a>
   2ca0e:	2300      	movs	r3, #0
   2ca10:	e7fa      	b.n	2ca08 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2ca12:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2ca16:	3a08      	subs	r2, #8
   2ca18:	2a01      	cmp	r2, #1
   2ca1a:	d91a      	bls.n	2ca52 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2ca1c:	3301      	adds	r3, #1
   2ca1e:	4599      	cmp	r9, r3
   2ca20:	d1f7      	bne.n	2ca12 <le_adv_update.constprop.0+0xa8>
   2ca22:	e7d8      	b.n	2c9d6 <le_adv_update.constprop.0+0x6c>
   2ca24:	2300      	movs	r3, #0
   2ca26:	e7fa      	b.n	2ca1e <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   2ca28:	2e02      	cmp	r6, #2
   2ca2a:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   2ca2e:	bf08      	it	eq
   2ca30:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2ca32:	a902      	add	r1, sp, #8
			d_len = 2;
   2ca34:	bf08      	it	eq
   2ca36:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2ca38:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   2ca3c:	bf08      	it	eq
   2ca3e:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2ca42:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2ca46:	f7ed fcb1 	bl	1a3ac <hci_set_ad>
		if (err) {
   2ca4a:	2800      	cmp	r0, #0
   2ca4c:	d0ad      	beq.n	2c9aa <le_adv_update.constprop.0+0x40>
   2ca4e:	4604      	mov	r4, r0
   2ca50:	e7b8      	b.n	2c9c4 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   2ca52:	f06f 0415 	mvn.w	r4, #21
   2ca56:	e7b5      	b.n	2c9c4 <le_adv_update.constprop.0+0x5a>

0002ca58 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2ca58:	6843      	ldr	r3, [r0, #4]
   2ca5a:	f013 0008 	ands.w	r0, r3, #8
   2ca5e:	d00a      	beq.n	2ca76 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2ca60:	035a      	lsls	r2, r3, #13
   2ca62:	d407      	bmi.n	2ca74 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2ca64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   2ca68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2ca6c:	bf14      	ite	ne
   2ca6e:	2002      	movne	r0, #2
   2ca70:	2001      	moveq	r0, #1
   2ca72:	4770      	bx	lr
   2ca74:	2001      	movs	r0, #1
}
   2ca76:	4770      	bx	lr

0002ca78 <bt_le_adv_set_enable_legacy>:
{
   2ca78:	b570      	push	{r4, r5, r6, lr}
   2ca7a:	4606      	mov	r6, r0
   2ca7c:	b086      	sub	sp, #24
   2ca7e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2ca80:	f242 000a 	movw	r0, #8202	; 0x200a
   2ca84:	2101      	movs	r1, #1
   2ca86:	f7eb ff4b 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   2ca8a:	4604      	mov	r4, r0
   2ca8c:	b1b0      	cbz	r0, 2cabc <bt_le_adv_set_enable_legacy+0x44>
   2ca8e:	300c      	adds	r0, #12
	if (enable) {
   2ca90:	b195      	cbz	r5, 2cab8 <bt_le_adv_set_enable_legacy+0x40>
   2ca92:	2101      	movs	r1, #1
   2ca94:	f001 fe44 	bl	2e720 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2ca98:	f106 0210 	add.w	r2, r6, #16
   2ca9c:	a903      	add	r1, sp, #12
   2ca9e:	4620      	mov	r0, r4
   2caa0:	9500      	str	r5, [sp, #0]
   2caa2:	2307      	movs	r3, #7
   2caa4:	f7eb ff2a 	bl	188fc <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2caa8:	2200      	movs	r2, #0
   2caaa:	4621      	mov	r1, r4
   2caac:	f242 000a 	movw	r0, #8202	; 0x200a
   2cab0:	f7eb ff70 	bl	18994 <bt_hci_cmd_send_sync>
}
   2cab4:	b006      	add	sp, #24
   2cab6:	bd70      	pop	{r4, r5, r6, pc}
   2cab8:	4629      	mov	r1, r5
   2caba:	e7eb      	b.n	2ca94 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2cabc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2cac0:	e7f8      	b.n	2cab4 <bt_le_adv_set_enable_legacy+0x3c>

0002cac2 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2cac2:	f7ff bfd9 	b.w	2ca78 <bt_le_adv_set_enable_legacy>

0002cac6 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2cac6:	3018      	adds	r0, #24
   2cac8:	f002 be78 	b.w	2f7bc <k_work_cancel_delayable>

0002cacc <sys_slist_find_and_remove>:
	return list->head;
   2cacc:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cace:	2200      	movs	r2, #0
   2cad0:	b90b      	cbnz	r3, 2cad6 <sys_slist_find_and_remove+0xa>
   2cad2:	4618      	mov	r0, r3
   2cad4:	4770      	bx	lr
   2cad6:	428b      	cmp	r3, r1
   2cad8:	d110      	bne.n	2cafc <sys_slist_find_and_remove+0x30>
	return node->next;
   2cada:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cadc:	b942      	cbnz	r2, 2caf0 <sys_slist_find_and_remove+0x24>
   2cade:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2cae0:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cae2:	4291      	cmp	r1, r2
   2cae4:	d100      	bne.n	2cae8 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2cae6:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2cae8:	2300      	movs	r3, #0
   2caea:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2caec:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2caee:	4770      	bx	lr
	parent->next = child;
   2caf0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2caf2:	6843      	ldr	r3, [r0, #4]
   2caf4:	4299      	cmp	r1, r3
	list->tail = node;
   2caf6:	bf08      	it	eq
   2caf8:	6042      	streq	r2, [r0, #4]
}
   2cafa:	e7f5      	b.n	2cae8 <sys_slist_find_and_remove+0x1c>
	return node->next;
   2cafc:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cafe:	681b      	ldr	r3, [r3, #0]
   2cb00:	e7e6      	b.n	2cad0 <sys_slist_find_and_remove+0x4>

0002cb02 <atomic_and>:
{
   2cb02:	b510      	push	{r4, lr}
   2cb04:	4603      	mov	r3, r0
}
   2cb06:	f3bf 8f5b 	dmb	ish
   2cb0a:	e853 0f00 	ldrex	r0, [r3]
   2cb0e:	ea00 0201 	and.w	r2, r0, r1
   2cb12:	e843 2400 	strex	r4, r2, [r3]
   2cb16:	2c00      	cmp	r4, #0
   2cb18:	d1f7      	bne.n	2cb0a <atomic_and+0x8>
   2cb1a:	f3bf 8f5b 	dmb	ish
   2cb1e:	bd10      	pop	{r4, pc}

0002cb20 <z_log_msg_static_create.constprop.0>:
   2cb20:	2300      	movs	r3, #0
   2cb22:	f7e8 b84f 	b.w	14bc4 <z_impl_z_log_msg_static_create>

0002cb26 <tx_complete_work>:
	tx_notify(conn);
   2cb26:	3828      	subs	r0, #40	; 0x28
   2cb28:	f7ee b920 	b.w	1ad6c <tx_notify>

0002cb2c <bt_conn_reset_rx_state>:
{
   2cb2c:	b510      	push	{r4, lr}
   2cb2e:	4604      	mov	r4, r0
	if (!conn->rx) {
   2cb30:	6900      	ldr	r0, [r0, #16]
   2cb32:	b118      	cbz	r0, 2cb3c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2cb34:	f7f4 f806 	bl	20b44 <net_buf_unref>
	conn->rx = NULL;
   2cb38:	2300      	movs	r3, #0
   2cb3a:	6123      	str	r3, [r4, #16]
}
   2cb3c:	bd10      	pop	{r4, pc}

0002cb3e <conn_cleanup>:
{
   2cb3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cb42:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   2cb44:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2cb46:	f104 0638 	add.w	r6, r4, #56	; 0x38
   2cb4a:	2300      	movs	r3, #0
   2cb4c:	2200      	movs	r2, #0
   2cb4e:	4630      	mov	r0, r6
   2cb50:	f001 fd7c 	bl	2e64c <net_buf_get>
   2cb54:	4603      	mov	r3, r0
   2cb56:	b950      	cbnz	r0, 2cb6e <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   2cb58:	4620      	mov	r0, r4
   2cb5a:	f7ff ffe7 	bl	2cb2c <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2cb5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2cb62:	2200      	movs	r2, #0
}
   2cb64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2cb68:	2300      	movs	r3, #0
   2cb6a:	f7f9 bdcf 	b.w	2670c <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   2cb6e:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   2cb70:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   2cb72:	f7f3 ffe7 	bl	20b44 <net_buf_unref>
		if (tx) {
   2cb76:	2d00      	cmp	r5, #0
   2cb78:	d0e7      	beq.n	2cb4a <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   2cb7a:	4629      	mov	r1, r5
   2cb7c:	4620      	mov	r0, r4
   2cb7e:	f7ee f925 	bl	1adcc <conn_tx_destroy>
   2cb82:	e7e0      	b.n	2cb46 <conn_cleanup+0x8>

0002cb84 <bt_conn_ref>:
{
   2cb84:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2cb86:	f3bf 8f5b 	dmb	ish
   2cb8a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2cb8e:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   2cb92:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
		if (!old) {
   2cb96:	b17b      	cbz	r3, 2cbb8 <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2cb98:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2cb9c:	1c59      	adds	r1, r3, #1
   2cb9e:	e852 4f00 	ldrex	r4, [r2]
   2cba2:	429c      	cmp	r4, r3
   2cba4:	d104      	bne.n	2cbb0 <bt_conn_ref+0x2c>
   2cba6:	e842 1c00 	strex	ip, r1, [r2]
   2cbaa:	f1bc 0f00 	cmp.w	ip, #0
   2cbae:	d1f6      	bne.n	2cb9e <bt_conn_ref+0x1a>
   2cbb0:	f3bf 8f5b 	dmb	ish
   2cbb4:	d1e7      	bne.n	2cb86 <bt_conn_ref+0x2>
}
   2cbb6:	bd10      	pop	{r4, pc}
			return NULL;
   2cbb8:	4618      	mov	r0, r3
   2cbba:	e7fc      	b.n	2cbb6 <bt_conn_ref+0x32>

0002cbbc <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2cbbc:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2cbc0:	f3bf 8f5b 	dmb	ish
   2cbc4:	e853 1f00 	ldrex	r1, [r3]
   2cbc8:	3901      	subs	r1, #1
   2cbca:	e843 1200 	strex	r2, r1, [r3]
   2cbce:	2a00      	cmp	r2, #0
   2cbd0:	d1f8      	bne.n	2cbc4 <bt_conn_unref+0x8>
   2cbd2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2cbd6:	8842      	ldrh	r2, [r0, #2]
   2cbd8:	f240 1301 	movw	r3, #257	; 0x101
   2cbdc:	429a      	cmp	r2, r3
   2cbde:	d108      	bne.n	2cbf2 <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2cbe0:	f3bf 8f5b 	dmb	ish
   2cbe4:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2cbe8:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   2cbec:	b90b      	cbnz	r3, 2cbf2 <bt_conn_unref+0x36>
		bt_le_adv_resume();
   2cbee:	f7ed beab 	b.w	1a948 <bt_le_adv_resume>
}
   2cbf2:	4770      	bx	lr

0002cbf4 <conn_lookup_handle>:
{
   2cbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2cbf8:	4607      	mov	r7, r0
   2cbfa:	460e      	mov	r6, r1
   2cbfc:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2cbfe:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2cc00:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2cc04:	42b4      	cmp	r4, r6
   2cc06:	d103      	bne.n	2cc10 <conn_lookup_handle+0x1c>
	return NULL;
   2cc08:	2300      	movs	r3, #0
}
   2cc0a:	4618      	mov	r0, r3
   2cc0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2cc10:	fb09 7004 	mla	r0, r9, r4, r7
   2cc14:	f7ff ffb6 	bl	2cb84 <bt_conn_ref>
   2cc18:	4603      	mov	r3, r0
		if (!conn) {
   2cc1a:	b158      	cbz	r0, 2cc34 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2cc1c:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2cc1e:	2d01      	cmp	r5, #1
   2cc20:	d002      	beq.n	2cc28 <conn_lookup_handle+0x34>
   2cc22:	3d07      	subs	r5, #7
   2cc24:	2d01      	cmp	r5, #1
   2cc26:	d803      	bhi.n	2cc30 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2cc28:	881a      	ldrh	r2, [r3, #0]
   2cc2a:	4542      	cmp	r2, r8
   2cc2c:	d0ed      	beq.n	2cc0a <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2cc2e:	4618      	mov	r0, r3
   2cc30:	f7ff ffc4 	bl	2cbbc <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2cc34:	3401      	adds	r4, #1
   2cc36:	e7e5      	b.n	2cc04 <conn_lookup_handle+0x10>

0002cc38 <bt_conn_connected>:
{
   2cc38:	b510      	push	{r4, lr}
   2cc3a:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2cc3c:	f7ee ff8e 	bl	1bb5c <bt_l2cap_connected>
	notify_connected(conn);
   2cc40:	4620      	mov	r0, r4
}
   2cc42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2cc46:	f7ee b85f 	b.w	1ad08 <notify_connected>

0002cc4a <bt_conn_disconnect>:
{
   2cc4a:	b510      	push	{r4, lr}
	switch (conn->state) {
   2cc4c:	7b43      	ldrb	r3, [r0, #13]
   2cc4e:	3b02      	subs	r3, #2
{
   2cc50:	4604      	mov	r4, r0
	switch (conn->state) {
   2cc52:	2b06      	cmp	r3, #6
   2cc54:	d816      	bhi.n	2cc84 <bt_conn_disconnect+0x3a>
   2cc56:	e8df f003 	tbb	[pc, r3]
   2cc5a:	1504      	.short	0x1504
   2cc5c:	0b091515 	.word	0x0b091515
   2cc60:	09          	.byte	0x09
   2cc61:	00          	.byte	0x00
		conn->err = reason;
   2cc62:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2cc64:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2cc66:	4620      	mov	r0, r4
   2cc68:	f7ee fb2e 	bl	1b2c8 <bt_conn_set_state>
{
   2cc6c:	2000      	movs	r0, #0
}
   2cc6e:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   2cc70:	8800      	ldrh	r0, [r0, #0]
   2cc72:	f7ff fc97 	bl	2c5a4 <bt_hci_disconnect>
	if (err) {
   2cc76:	2800      	cmp	r0, #0
   2cc78:	d1f9      	bne.n	2cc6e <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   2cc7a:	7b63      	ldrb	r3, [r4, #13]
   2cc7c:	2b07      	cmp	r3, #7
   2cc7e:	d1f5      	bne.n	2cc6c <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2cc80:	2108      	movs	r1, #8
   2cc82:	e7f0      	b.n	2cc66 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   2cc84:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2cc88:	e7f1      	b.n	2cc6e <bt_conn_disconnect+0x24>

0002cc8a <bt_conn_ltk_present>:
{
   2cc8a:	b510      	push	{r4, lr}
   2cc8c:	4604      	mov	r4, r0
	const struct bt_keys *keys = conn->le.keys;
   2cc8e:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
	if (!keys) {
   2cc92:	b928      	cbnz	r0, 2cca0 <bt_conn_ltk_present+0x16>
		keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   2cc94:	7a20      	ldrb	r0, [r4, #8]
   2cc96:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2cc9a:	f7f3 fc9d 	bl	205d8 <bt_keys_find_addr>
	if (keys) {
   2cc9e:	b138      	cbz	r0, 2ccb0 <bt_conn_ltk_present+0x26>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2cca0:	78e2      	ldrb	r2, [r4, #3]
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   2cca2:	89c3      	ldrh	r3, [r0, #14]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2cca4:	b92a      	cbnz	r2, 2ccb2 <bt_conn_ltk_present+0x28>
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   2cca6:	f013 0f21 	tst.w	r3, #33	; 0x21
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   2ccaa:	bf14      	ite	ne
   2ccac:	2001      	movne	r0, #1
   2ccae:	2000      	moveq	r0, #0
}
   2ccb0:	bd10      	pop	{r4, pc}
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   2ccb2:	f013 0f24 	tst.w	r3, #36	; 0x24
   2ccb6:	e7f8      	b.n	2ccaa <bt_conn_ltk_present+0x20>

0002ccb8 <bt_conn_set_security>:
{
   2ccb8:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2ccba:	7b43      	ldrb	r3, [r0, #13]
   2ccbc:	2b07      	cmp	r3, #7
{
   2ccbe:	4604      	mov	r4, r0
   2ccc0:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2ccc2:	d126      	bne.n	2cd12 <bt_conn_set_security+0x5a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2ccc4:	7a43      	ldrb	r3, [r0, #9]
   2ccc6:	428b      	cmp	r3, r1
   2ccc8:	d219      	bcs.n	2ccfe <bt_conn_set_security+0x46>
   2ccca:	7a83      	ldrb	r3, [r0, #10]
   2cccc:	428b      	cmp	r3, r1
   2ccce:	d216      	bcs.n	2ccfe <bt_conn_set_security+0x46>
	if (val) {
   2ccd0:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2ccd2:	f100 0004 	add.w	r0, r0, #4
   2ccd6:	d514      	bpl.n	2cd02 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ccd8:	f3bf 8f5b 	dmb	ish
   2ccdc:	e850 3f00 	ldrex	r3, [r0]
   2cce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2cce4:	e840 3200 	strex	r2, r3, [r0]
   2cce8:	2a00      	cmp	r2, #0
   2ccea:	d1f7      	bne.n	2ccdc <bt_conn_set_security+0x24>
   2ccec:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2ccf0:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2ccf4:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2ccf6:	4620      	mov	r0, r4
   2ccf8:	f7f2 fd3c 	bl	1f774 <bt_smp_start_security>
	if (err) {
   2ccfc:	b930      	cbnz	r0, 2cd0c <bt_conn_set_security+0x54>
		return -ENOTCONN;
   2ccfe:	2000      	movs	r0, #0
}
   2cd00:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cd02:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2cd06:	f7ff fefc 	bl	2cb02 <atomic_and>
   2cd0a:	e7f1      	b.n	2ccf0 <bt_conn_set_security+0x38>
		conn->required_sec_level = conn->sec_level;
   2cd0c:	7a63      	ldrb	r3, [r4, #9]
   2cd0e:	72a3      	strb	r3, [r4, #10]
   2cd10:	e7f6      	b.n	2cd00 <bt_conn_set_security+0x48>
		return -ENOTCONN;
   2cd12:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2cd16:	e7f3      	b.n	2cd00 <bt_conn_set_security+0x48>

0002cd18 <bt_conn_get_security>:
}
   2cd18:	7a40      	ldrb	r0, [r0, #9]
   2cd1a:	4770      	bx	lr

0002cd1c <bt_conn_is_peer_addr_le>:
{
   2cd1c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2cd1e:	7a03      	ldrb	r3, [r0, #8]
   2cd20:	428b      	cmp	r3, r1
{
   2cd22:	4604      	mov	r4, r0
   2cd24:	4615      	mov	r5, r2
	if (id != conn->id) {
   2cd26:	d115      	bne.n	2cd54 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2cd28:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2cd2c:	2207      	movs	r2, #7
   2cd2e:	4628      	mov	r0, r5
   2cd30:	f7ff faae 	bl	2c290 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2cd34:	b180      	cbz	r0, 2cd58 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2cd36:	78e3      	ldrb	r3, [r4, #3]
   2cd38:	2207      	movs	r2, #7
   2cd3a:	b943      	cbnz	r3, 2cd4e <bt_conn_is_peer_addr_le+0x32>
   2cd3c:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2cd40:	4628      	mov	r0, r5
   2cd42:	f7ff faa5 	bl	2c290 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2cd46:	fab0 f080 	clz	r0, r0
   2cd4a:	0940      	lsrs	r0, r0, #5
}
   2cd4c:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2cd4e:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2cd52:	e7f5      	b.n	2cd40 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2cd54:	2000      	movs	r0, #0
   2cd56:	e7f9      	b.n	2cd4c <bt_conn_is_peer_addr_le+0x30>
		return true;
   2cd58:	2001      	movs	r0, #1
   2cd5a:	e7f7      	b.n	2cd4c <bt_conn_is_peer_addr_le+0x30>

0002cd5c <bt_conn_get_dst>:
}
   2cd5c:	3088      	adds	r0, #136	; 0x88
   2cd5e:	4770      	bx	lr

0002cd60 <bt_conn_le_conn_update>:
{
   2cd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cd62:	4607      	mov	r7, r0
   2cd64:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2cd66:	f242 0013 	movw	r0, #8211	; 0x2013
   2cd6a:	210e      	movs	r1, #14
   2cd6c:	f7eb fdd8 	bl	18920 <bt_hci_cmd_create>
	if (!buf) {
   2cd70:	4606      	mov	r6, r0
   2cd72:	b1d0      	cbz	r0, 2cdaa <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2cd74:	210e      	movs	r1, #14
   2cd76:	300c      	adds	r0, #12
   2cd78:	f001 fcc3 	bl	2e702 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2cd7c:	220e      	movs	r2, #14
   2cd7e:	4604      	mov	r4, r0
   2cd80:	2100      	movs	r1, #0
   2cd82:	f7ff fab7 	bl	2c2f4 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2cd86:	883b      	ldrh	r3, [r7, #0]
   2cd88:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2cd8a:	882b      	ldrh	r3, [r5, #0]
   2cd8c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2cd8e:	886b      	ldrh	r3, [r5, #2]
   2cd90:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2cd92:	88ab      	ldrh	r3, [r5, #4]
   2cd94:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2cd96:	88eb      	ldrh	r3, [r5, #6]
   2cd98:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2cd9a:	4631      	mov	r1, r6
   2cd9c:	2200      	movs	r2, #0
}
   2cd9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2cda2:	f242 0013 	movw	r0, #8211	; 0x2013
   2cda6:	f7eb bdf5 	b.w	18994 <bt_hci_cmd_send_sync>
}
   2cdaa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2cdae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cdb0 <l2cap_connected>:
}
   2cdb0:	4770      	bx	lr

0002cdb2 <z_log_msg_static_create.constprop.0>:
   2cdb2:	2300      	movs	r3, #0
   2cdb4:	f7e7 bf06 	b.w	14bc4 <z_impl_z_log_msg_static_create>

0002cdb8 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cdba:	4605      	mov	r5, r0
   2cdbc:	460f      	mov	r7, r1
   2cdbe:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2cdc0:	2300      	movs	r3, #0
   2cdc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2cdc6:	2104      	movs	r1, #4
   2cdc8:	2000      	movs	r0, #0
   2cdca:	f7ee fb8b 	bl	1b4e4 <bt_conn_create_pdu_timeout>
	if (!buf) {
   2cdce:	4604      	mov	r4, r0
   2cdd0:	b920      	cbnz	r0, 2cddc <l2cap_create_le_sig_pdu.constprop.0+0x24>
   2cdd2:	4628      	mov	r0, r5
}
   2cdd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2cdd8:	f7ee be84 	b.w	1bae4 <l2cap_create_le_sig_pdu.part.0>
   2cddc:	2104      	movs	r1, #4
   2cdde:	300c      	adds	r0, #12
   2cde0:	f001 fc8f 	bl	2e702 <net_buf_simple_add>
	hdr->code = code;
   2cde4:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2cde6:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2cde8:	8046      	strh	r6, [r0, #2]
}
   2cdea:	4620      	mov	r0, r4
   2cdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cdee <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2cdee:	4770      	bx	lr

0002cdf0 <bt_l2cap_chan_del>:
{
   2cdf0:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2cdf2:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2cdf6:	4604      	mov	r4, r0
	if (!chan->conn) {
   2cdf8:	b123      	cbz	r3, 2ce04 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2cdfa:	686b      	ldr	r3, [r5, #4]
   2cdfc:	b103      	cbz	r3, 2ce00 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2cdfe:	4798      	blx	r3
	chan->conn = NULL;
   2ce00:	2300      	movs	r3, #0
   2ce02:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2ce04:	68e3      	ldr	r3, [r4, #12]
   2ce06:	b10b      	cbz	r3, 2ce0c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2ce08:	4620      	mov	r0, r4
   2ce0a:	4798      	blx	r3
	if (ops->released) {
   2ce0c:	6a2b      	ldr	r3, [r5, #32]
   2ce0e:	b11b      	cbz	r3, 2ce18 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2ce10:	4620      	mov	r0, r4
}
   2ce12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2ce16:	4718      	bx	r3
}
   2ce18:	bd70      	pop	{r4, r5, r6, pc}

0002ce1a <bt_l2cap_disconnected>:
{
   2ce1a:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2ce1c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ce1e:	b130      	cbz	r0, 2ce2e <bt_l2cap_disconnected+0x14>
	return node->next;
   2ce20:	f850 4908 	ldr.w	r4, [r0], #-8
   2ce24:	b104      	cbz	r4, 2ce28 <bt_l2cap_disconnected+0xe>
   2ce26:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2ce28:	f7ff ffe2 	bl	2cdf0 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ce2c:	b904      	cbnz	r4, 2ce30 <bt_l2cap_disconnected+0x16>
}
   2ce2e:	bd38      	pop	{r3, r4, r5, pc}
   2ce30:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ce32:	b12d      	cbz	r5, 2ce40 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2ce34:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ce36:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2ce38:	f7ff ffda 	bl	2cdf0 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ce3c:	462c      	mov	r4, r5
   2ce3e:	e7f7      	b.n	2ce30 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   2ce40:	4620      	mov	r0, r4
}
   2ce42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2ce46:	f7ff bfd3 	b.w	2cdf0 <bt_l2cap_chan_del>

0002ce4a <bt_l2cap_security_changed>:
{
   2ce4a:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2ce4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2ce4e:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ce50:	b1bb      	cbz	r3, 2ce82 <bt_l2cap_security_changed+0x38>
   2ce52:	4618      	mov	r0, r3
	return node->next;
   2ce54:	f850 4908 	ldr.w	r4, [r0], #-8
   2ce58:	b104      	cbz	r4, 2ce5c <bt_l2cap_security_changed+0x12>
   2ce5a:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2ce5c:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2ce60:	689b      	ldr	r3, [r3, #8]
   2ce62:	b10b      	cbz	r3, 2ce68 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2ce64:	4629      	mov	r1, r5
   2ce66:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ce68:	b15c      	cbz	r4, 2ce82 <bt_l2cap_security_changed+0x38>
   2ce6a:	4620      	mov	r0, r4
   2ce6c:	68a4      	ldr	r4, [r4, #8]
   2ce6e:	6843      	ldr	r3, [r0, #4]
   2ce70:	b124      	cbz	r4, 2ce7c <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   2ce72:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ce74:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2ce76:	2b00      	cmp	r3, #0
   2ce78:	d1f4      	bne.n	2ce64 <bt_l2cap_security_changed+0x1a>
   2ce7a:	e7f6      	b.n	2ce6a <bt_l2cap_security_changed+0x20>
   2ce7c:	689b      	ldr	r3, [r3, #8]
   2ce7e:	2b00      	cmp	r3, #0
   2ce80:	d1f0      	bne.n	2ce64 <bt_l2cap_security_changed+0x1a>
}
   2ce82:	bd38      	pop	{r3, r4, r5, pc}

0002ce84 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2ce84:	3104      	adds	r1, #4
   2ce86:	f7ee bb2d 	b.w	1b4e4 <bt_conn_create_pdu_timeout>

0002ce8a <bt_l2cap_send_cb>:
{
   2ce8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ce8e:	4614      	mov	r4, r2
   2ce90:	4605      	mov	r5, r0
   2ce92:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2ce94:	f102 000c 	add.w	r0, r2, #12
   2ce98:	2104      	movs	r1, #4
   2ce9a:	461e      	mov	r6, r3
   2ce9c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2cea0:	f001 fc46 	bl	2e730 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2cea4:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2cea6:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2cea8:	3a04      	subs	r2, #4
   2ceaa:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2ceac:	4643      	mov	r3, r8
   2ceae:	4632      	mov	r2, r6
   2ceb0:	4621      	mov	r1, r4
   2ceb2:	4628      	mov	r0, r5
}
   2ceb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2ceb8:	f7ee b944 	b.w	1b144 <bt_conn_send_cb>

0002cebc <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2cebc:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2cebe:	b130      	cbz	r0, 2cece <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2cec0:	8b83      	ldrh	r3, [r0, #28]
   2cec2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2cec4:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2cec8:	d001      	beq.n	2cece <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   2ceca:	6880      	ldr	r0, [r0, #8]
   2cecc:	e7f7      	b.n	2cebe <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2cece:	4770      	bx	lr

0002ced0 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2ced0:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ced2:	b130      	cbz	r0, 2cee2 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2ced4:	8983      	ldrh	r3, [r0, #12]
   2ced6:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ced8:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2cedc:	d001      	beq.n	2cee2 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   2cede:	6880      	ldr	r0, [r0, #8]
   2cee0:	e7f7      	b.n	2ced2 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2cee2:	4770      	bx	lr

0002cee4 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2cee4:	4770      	bx	lr

0002cee6 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2cee6:	4603      	mov	r3, r0
	return list->head;
   2cee8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2ceea:	b128      	cbz	r0, 2cef8 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ceec:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2ceee:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2cef0:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2cef2:	4288      	cmp	r0, r1
	list->tail = node;
   2cef4:	bf08      	it	eq
   2cef6:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2cef8:	4770      	bx	lr

0002cefa <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2cefa:	4603      	mov	r3, r0
	size_t bytes = 0;
   2cefc:	2000      	movs	r0, #0

	while (buf) {
   2cefe:	b903      	cbnz	r3, 2cf02 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2cf00:	4770      	bx	lr
		bytes += buf->len;
   2cf02:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2cf04:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2cf06:	4410      	add	r0, r2
		buf = buf->frags;
   2cf08:	e7f9      	b.n	2cefe <net_buf_frags_len+0x4>

0002cf0a <attr_read_type_cb>:
{
   2cf0a:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2cf0c:	68d4      	ldr	r4, [r2, #12]
   2cf0e:	7823      	ldrb	r3, [r4, #0]
   2cf10:	3102      	adds	r1, #2
   2cf12:	b913      	cbnz	r3, 2cf1a <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2cf14:	7021      	strb	r1, [r4, #0]
	return true;
   2cf16:	2001      	movs	r0, #1
}
   2cf18:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2cf1a:	428b      	cmp	r3, r1
   2cf1c:	d0fb      	beq.n	2cf16 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2cf1e:	8a03      	ldrh	r3, [r0, #16]
   2cf20:	3b02      	subs	r3, #2
   2cf22:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2cf24:	2000      	movs	r0, #0
   2cf26:	6110      	str	r0, [r2, #16]
		return false;
   2cf28:	e7f6      	b.n	2cf18 <attr_read_type_cb+0xe>

0002cf2a <att_prepare_write_req>:
}
   2cf2a:	2006      	movs	r0, #6
   2cf2c:	4770      	bx	lr

0002cf2e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2cf2e:	f3bf 8f5b 	dmb	ish
   2cf32:	6800      	ldr	r0, [r0, #0]
   2cf34:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2cf38:	4108      	asrs	r0, r1
}
   2cf3a:	f000 0001 	and.w	r0, r0, #1
   2cf3e:	4770      	bx	lr

0002cf40 <write_cb>:
{
   2cf40:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2cf42:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2cf44:	4601      	mov	r1, r0
{
   2cf46:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2cf48:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2cf4c:	6820      	ldr	r0, [r4, #0]
   2cf4e:	f000 fe82 	bl	2dc56 <bt_gatt_check_perm>
   2cf52:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2cf54:	bb00      	cbnz	r0, 2cf98 <write_cb+0x58>
	if (!data->req) {
   2cf56:	7a23      	ldrb	r3, [r4, #8]
   2cf58:	b1b3      	cbz	r3, 2cf88 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2cf5a:	f1a3 0218 	sub.w	r2, r3, #24
   2cf5e:	4253      	negs	r3, r2
   2cf60:	4153      	adcs	r3, r2
   2cf62:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2cf64:	9301      	str	r3, [sp, #4]
   2cf66:	8a63      	ldrh	r3, [r4, #18]
   2cf68:	9300      	str	r3, [sp, #0]
   2cf6a:	68ae      	ldr	r6, [r5, #8]
   2cf6c:	8a23      	ldrh	r3, [r4, #16]
   2cf6e:	68e2      	ldr	r2, [r4, #12]
   2cf70:	6820      	ldr	r0, [r4, #0]
   2cf72:	4629      	mov	r1, r5
   2cf74:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2cf76:	2800      	cmp	r0, #0
   2cf78:	db08      	blt.n	2cf8c <write_cb+0x4c>
   2cf7a:	8a23      	ldrh	r3, [r4, #16]
   2cf7c:	4298      	cmp	r0, r3
   2cf7e:	d10e      	bne.n	2cf9e <write_cb+0x5e>
	data->err = 0U;
   2cf80:	2300      	movs	r3, #0
   2cf82:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2cf84:	2001      	movs	r0, #1
   2cf86:	e008      	b.n	2cf9a <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2cf88:	2302      	movs	r3, #2
   2cf8a:	e7eb      	b.n	2cf64 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2cf8c:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2cf90:	d305      	bcc.n	2cf9e <write_cb+0x5e>
		return -err;
   2cf92:	4240      	negs	r0, r0
   2cf94:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2cf96:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2cf98:	2000      	movs	r0, #0
}
   2cf9a:	b002      	add	sp, #8
   2cf9c:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2cf9e:	200e      	movs	r0, #14
   2cfa0:	e7f9      	b.n	2cf96 <write_cb+0x56>

0002cfa2 <bt_gatt_foreach_attr>:
{
   2cfa2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2cfa4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2cfa8:	2300      	movs	r3, #0
   2cfaa:	9300      	str	r3, [sp, #0]
   2cfac:	461a      	mov	r2, r3
   2cfae:	f7f0 fe31 	bl	1dc14 <bt_gatt_foreach_attr_type>
}
   2cfb2:	b005      	add	sp, #20
   2cfb4:	f85d fb04 	ldr.w	pc, [sp], #4

0002cfb8 <find_info_cb>:
{
   2cfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2cfba:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2cfbc:	6817      	ldr	r7, [r2, #0]
{
   2cfbe:	4605      	mov	r5, r0
   2cfc0:	460e      	mov	r6, r1
   2cfc2:	4614      	mov	r4, r2
	if (!data->rsp) {
   2cfc4:	b963      	cbnz	r3, 2cfe0 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2cfc6:	6850      	ldr	r0, [r2, #4]
   2cfc8:	2101      	movs	r1, #1
   2cfca:	300c      	adds	r0, #12
   2cfcc:	f001 fb99 	bl	2e702 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2cfd0:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2cfd2:	682b      	ldr	r3, [r5, #0]
   2cfd4:	781b      	ldrb	r3, [r3, #0]
   2cfd6:	2b00      	cmp	r3, #0
   2cfd8:	bf14      	ite	ne
   2cfda:	2302      	movne	r3, #2
   2cfdc:	2301      	moveq	r3, #1
   2cfde:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2cfe0:	68a3      	ldr	r3, [r4, #8]
   2cfe2:	781b      	ldrb	r3, [r3, #0]
   2cfe4:	2b01      	cmp	r3, #1
   2cfe6:	d003      	beq.n	2cff0 <find_info_cb+0x38>
   2cfe8:	2b02      	cmp	r3, #2
   2cfea:	d019      	beq.n	2d020 <find_info_cb+0x68>
   2cfec:	2000      	movs	r0, #0
   2cfee:	e016      	b.n	2d01e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2cff0:	682b      	ldr	r3, [r5, #0]
   2cff2:	781b      	ldrb	r3, [r3, #0]
   2cff4:	2b00      	cmp	r3, #0
   2cff6:	d1f9      	bne.n	2cfec <find_info_cb+0x34>
   2cff8:	6860      	ldr	r0, [r4, #4]
   2cffa:	2104      	movs	r1, #4
   2cffc:	300c      	adds	r0, #12
   2cffe:	f001 fb80 	bl	2e702 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2d002:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2d004:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2d006:	682a      	ldr	r2, [r5, #0]
   2d008:	68e3      	ldr	r3, [r4, #12]
   2d00a:	8852      	ldrh	r2, [r2, #2]
   2d00c:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2d00e:	6863      	ldr	r3, [r4, #4]
   2d010:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2d012:	8a1b      	ldrh	r3, [r3, #16]
   2d014:	1ac0      	subs	r0, r0, r3
   2d016:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2d018:	bf94      	ite	ls
   2d01a:	2000      	movls	r0, #0
   2d01c:	2001      	movhi	r0, #1
}
   2d01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2d020:	682b      	ldr	r3, [r5, #0]
   2d022:	781b      	ldrb	r3, [r3, #0]
   2d024:	2b02      	cmp	r3, #2
   2d026:	d1e1      	bne.n	2cfec <find_info_cb+0x34>
   2d028:	6860      	ldr	r0, [r4, #4]
   2d02a:	2112      	movs	r1, #18
   2d02c:	300c      	adds	r0, #12
   2d02e:	f001 fb68 	bl	2e702 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2d032:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2d034:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2d036:	6829      	ldr	r1, [r5, #0]
   2d038:	68e0      	ldr	r0, [r4, #12]
   2d03a:	2210      	movs	r2, #16
   2d03c:	3101      	adds	r1, #1
   2d03e:	3002      	adds	r0, #2
   2d040:	f7ff f94d 	bl	2c2de <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2d044:	6863      	ldr	r3, [r4, #4]
   2d046:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2d048:	8a1b      	ldrh	r3, [r3, #16]
   2d04a:	1ac0      	subs	r0, r0, r3
   2d04c:	2812      	cmp	r0, #18
   2d04e:	e7e3      	b.n	2d018 <find_info_cb+0x60>

0002d050 <att_chan_mtu_updated>:
{
   2d050:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2d052:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2d054:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d056:	b352      	cbz	r2, 2d0ae <att_chan_mtu_updated+0x5e>
	return node->next;
   2d058:	6813      	ldr	r3, [r2, #0]
   2d05a:	b103      	cbz	r3, 2d05e <att_chan_mtu_updated+0xe>
   2d05c:	3b88      	subs	r3, #136	; 0x88
   2d05e:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   2d062:	2200      	movs	r2, #0
   2d064:	4611      	mov	r1, r2
   2d066:	e000      	b.n	2d06a <att_chan_mtu_updated+0x1a>
   2d068:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   2d06a:	4284      	cmp	r4, r0
   2d06c:	d007      	beq.n	2d07e <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2d06e:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2d070:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2d072:	42b1      	cmp	r1, r6
   2d074:	bf38      	it	cc
   2d076:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2d078:	42a2      	cmp	r2, r4
   2d07a:	bf38      	it	cc
   2d07c:	4622      	movcc	r2, r4
   2d07e:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d080:	b12b      	cbz	r3, 2d08e <att_chan_mtu_updated+0x3e>
   2d082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   2d086:	2b00      	cmp	r3, #0
   2d088:	d1ee      	bne.n	2d068 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2d08a:	4284      	cmp	r4, r0
   2d08c:	d1ef      	bne.n	2d06e <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2d08e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2d090:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2d092:	428b      	cmp	r3, r1
   2d094:	d801      	bhi.n	2d09a <att_chan_mtu_updated+0x4a>
   2d096:	4290      	cmp	r0, r2
   2d098:	d90b      	bls.n	2d0b2 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2d09a:	4282      	cmp	r2, r0
   2d09c:	bf38      	it	cc
   2d09e:	4602      	movcc	r2, r0
   2d0a0:	4299      	cmp	r1, r3
   2d0a2:	6828      	ldr	r0, [r5, #0]
   2d0a4:	bf38      	it	cc
   2d0a6:	4619      	movcc	r1, r3
}
   2d0a8:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2d0aa:	f7f1 baff 	b.w	1e6ac <bt_gatt_att_max_mtu_changed>
   2d0ae:	4611      	mov	r1, r2
   2d0b0:	e7ed      	b.n	2d08e <att_chan_mtu_updated+0x3e>
}
   2d0b2:	bc70      	pop	{r4, r5, r6}
   2d0b4:	4770      	bx	lr

0002d0b6 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2d0b6:	68d0      	ldr	r0, [r2, #12]
   2d0b8:	7803      	ldrb	r3, [r0, #0]
   2d0ba:	3104      	adds	r1, #4
   2d0bc:	b913      	cbnz	r3, 2d0c4 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2d0be:	7001      	strb	r1, [r0, #0]
	return true;
   2d0c0:	2001      	movs	r0, #1
   2d0c2:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2d0c4:	428b      	cmp	r3, r1
   2d0c6:	d0fb      	beq.n	2d0c0 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2d0c8:	6891      	ldr	r1, [r2, #8]
   2d0ca:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   2d0cc:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2d0ce:	3b04      	subs	r3, #4
   2d0d0:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2d0d2:	6110      	str	r0, [r2, #16]
}
   2d0d4:	4770      	bx	lr

0002d0d6 <z_log_msg_static_create.constprop.0>:
   2d0d6:	2300      	movs	r3, #0
   2d0d8:	f7e7 bd74 	b.w	14bc4 <z_impl_z_log_msg_static_create>

0002d0dc <chan_req_send>:
{
   2d0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d0de:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2d0e0:	6888      	ldr	r0, [r1, #8]
   2d0e2:	f7ff ff0a 	bl	2cefa <net_buf_frags_len>
   2d0e6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   2d0e8:	4283      	cmp	r3, r0
{
   2d0ea:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2d0ec:	d30b      	bcc.n	2d106 <chan_req_send+0x2a>
	chan->req = req;
   2d0ee:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   2d0f0:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   2d0f2:	2600      	movs	r6, #0
   2d0f4:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2d0f6:	4628      	mov	r0, r5
   2d0f8:	4639      	mov	r1, r7
   2d0fa:	f7ee ff77 	bl	1bfec <chan_send>
	if (err) {
   2d0fe:	b108      	cbz	r0, 2d104 <chan_req_send+0x28>
		req->buf = buf;
   2d100:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2d102:	63ae      	str	r6, [r5, #56]	; 0x38
}
   2d104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2d106:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2d10a:	e7fb      	b.n	2d104 <chan_req_send+0x28>

0002d10c <process_queue>:
{
   2d10c:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2d10e:	2200      	movs	r2, #0
{
   2d110:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2d112:	2300      	movs	r3, #0
   2d114:	4608      	mov	r0, r1
{
   2d116:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2d118:	f001 fa98 	bl	2e64c <net_buf_get>
	if (buf) {
   2d11c:	4605      	mov	r5, r0
   2d11e:	b158      	cbz	r0, 2d138 <process_queue+0x2c>
	return chan_send(chan, buf);
   2d120:	4601      	mov	r1, r0
   2d122:	4620      	mov	r0, r4
   2d124:	f7ee ff62 	bl	1bfec <chan_send>
		if (err) {
   2d128:	4604      	mov	r4, r0
   2d12a:	b118      	cbz	r0, 2d134 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2d12c:	4629      	mov	r1, r5
   2d12e:	4630      	mov	r0, r6
   2d130:	f002 fa61 	bl	2f5f6 <k_queue_prepend>
}
   2d134:	4620      	mov	r0, r4
   2d136:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2d138:	f06f 0401 	mvn.w	r4, #1
   2d13c:	e7fa      	b.n	2d134 <process_queue+0x28>

0002d13e <bt_att_chan_send_rsp>:
{
   2d13e:	b538      	push	{r3, r4, r5, lr}
   2d140:	4604      	mov	r4, r0
   2d142:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2d144:	f7ee ff52 	bl	1bfec <chan_send>
	if (err) {
   2d148:	b130      	cbz	r0, 2d158 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2d14a:	4629      	mov	r1, r5
   2d14c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   2d150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2d154:	f001 baa9 	b.w	2e6aa <net_buf_put>
}
   2d158:	bd38      	pop	{r3, r4, r5, pc}

0002d15a <att_chan_read>:
{
   2d15a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d15e:	4680      	mov	r8, r0
   2d160:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2d162:	4610      	mov	r0, r2
{
   2d164:	4699      	mov	r9, r3
   2d166:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2d168:	f7ff fec7 	bl	2cefa <net_buf_frags_len>
   2d16c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2d170:	4283      	cmp	r3, r0
{
   2d172:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2d174:	d97a      	bls.n	2d26c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2d176:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2d17a:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2d17c:	4630      	mov	r0, r6
   2d17e:	f001 fa9a 	bl	2e6b6 <net_buf_frag_last>
	size_t len, total = 0;
   2d182:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2d186:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2d188:	4630      	mov	r0, r6
   2d18a:	f7ff feb6 	bl	2cefa <net_buf_frags_len>
   2d18e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2d192:	f105 070c 	add.w	r7, r5, #12
   2d196:	1a24      	subs	r4, r4, r0
   2d198:	4638      	mov	r0, r7
   2d19a:	f001 faed 	bl	2e778 <net_buf_simple_tailroom>
   2d19e:	4284      	cmp	r4, r0
   2d1a0:	d211      	bcs.n	2d1c6 <att_chan_read+0x6c>
   2d1a2:	4630      	mov	r0, r6
   2d1a4:	f7ff fea9 	bl	2cefa <net_buf_frags_len>
   2d1a8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2d1ac:	1a24      	subs	r4, r4, r0
		if (!len) {
   2d1ae:	bb34      	cbnz	r4, 2d1fe <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2d1b0:	7ab0      	ldrb	r0, [r6, #10]
   2d1b2:	f7f3 fc05 	bl	209c0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2d1b6:	2200      	movs	r2, #0
   2d1b8:	2300      	movs	r3, #0
   2d1ba:	f001 fa42 	bl	2e642 <net_buf_alloc_fixed>
			if (!frag) {
   2d1be:	4605      	mov	r5, r0
   2d1c0:	b930      	cbnz	r0, 2d1d0 <att_chan_read+0x76>
	return total;
   2d1c2:	4657      	mov	r7, sl
   2d1c4:	e02c      	b.n	2d220 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2d1c6:	4638      	mov	r0, r7
   2d1c8:	f001 fad6 	bl	2e778 <net_buf_simple_tailroom>
   2d1cc:	4604      	mov	r4, r0
   2d1ce:	e7ee      	b.n	2d1ae <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2d1d0:	4601      	mov	r1, r0
   2d1d2:	4630      	mov	r0, r6
   2d1d4:	f001 fa80 	bl	2e6d8 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2d1d8:	4630      	mov	r0, r6
   2d1da:	f7ff fe8e 	bl	2cefa <net_buf_frags_len>
   2d1de:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2d1e2:	f105 070c 	add.w	r7, r5, #12
   2d1e6:	1a24      	subs	r4, r4, r0
   2d1e8:	4638      	mov	r0, r7
   2d1ea:	f001 fac5 	bl	2e778 <net_buf_simple_tailroom>
   2d1ee:	4284      	cmp	r4, r0
   2d1f0:	d21a      	bcs.n	2d228 <att_chan_read+0xce>
   2d1f2:	4630      	mov	r0, r6
   2d1f4:	f7ff fe81 	bl	2cefa <net_buf_frags_len>
   2d1f8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2d1fc:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2d1fe:	68e9      	ldr	r1, [r5, #12]
   2d200:	8a2a      	ldrh	r2, [r5, #16]
   2d202:	f8cd 9000 	str.w	r9, [sp]
   2d206:	f8db 7004 	ldr.w	r7, [fp, #4]
   2d20a:	9803      	ldr	r0, [sp, #12]
   2d20c:	440a      	add	r2, r1
   2d20e:	b2a3      	uxth	r3, r4
   2d210:	4659      	mov	r1, fp
   2d212:	47b8      	blx	r7
		if (read < 0) {
   2d214:	1e07      	subs	r7, r0, #0
   2d216:	da0c      	bge.n	2d232 <att_chan_read+0xd8>
				return total;
   2d218:	f1ba 0f00 	cmp.w	sl, #0
   2d21c:	bf18      	it	ne
   2d21e:	4657      	movne	r7, sl
}
   2d220:	4638      	mov	r0, r7
   2d222:	b005      	add	sp, #20
   2d224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d228:	4638      	mov	r0, r7
   2d22a:	f001 faa5 	bl	2e778 <net_buf_simple_tailroom>
   2d22e:	4604      	mov	r4, r0
   2d230:	e7e5      	b.n	2d1fe <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2d232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d234:	b993      	cbnz	r3, 2d25c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2d236:	4639      	mov	r1, r7
   2d238:	f105 000c 	add.w	r0, r5, #12
   2d23c:	f001 fa61 	bl	2e702 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2d240:	4630      	mov	r0, r6
   2d242:	f7ff fe5a 	bl	2cefa <net_buf_frags_len>
   2d246:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2d24a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2d24c:	4283      	cmp	r3, r0
		total += read;
   2d24e:	44ba      	add	sl, r7
		offset += read;
   2d250:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2d254:	d9b5      	bls.n	2d1c2 <att_chan_read+0x68>
   2d256:	42a7      	cmp	r7, r4
   2d258:	d096      	beq.n	2d188 <att_chan_read+0x2e>
   2d25a:	e7b2      	b.n	2d1c2 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2d25c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2d25e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d260:	4639      	mov	r1, r7
   2d262:	4628      	mov	r0, r5
   2d264:	4798      	blx	r3
   2d266:	2800      	cmp	r0, #0
   2d268:	d1e5      	bne.n	2d236 <att_chan_read+0xdc>
   2d26a:	e7aa      	b.n	2d1c2 <att_chan_read+0x68>
		return 0;
   2d26c:	2700      	movs	r7, #0
   2d26e:	e7d7      	b.n	2d220 <att_chan_read+0xc6>

0002d270 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   2d270:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d272:	2200      	movs	r2, #0
   2d274:	b903      	cbnz	r3, 2d278 <sys_slist_find_and_remove.isra.0+0x8>
   2d276:	4770      	bx	lr
   2d278:	428b      	cmp	r3, r1
   2d27a:	d10f      	bne.n	2d29c <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2d27c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d27e:	b93a      	cbnz	r2, 2d290 <sys_slist_find_and_remove.isra.0+0x20>
   2d280:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2d282:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d284:	4291      	cmp	r1, r2
   2d286:	d100      	bne.n	2d28a <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2d288:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2d28a:	2300      	movs	r3, #0
   2d28c:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d28e:	4770      	bx	lr
	parent->next = child;
   2d290:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d292:	6843      	ldr	r3, [r0, #4]
   2d294:	4299      	cmp	r1, r3
	list->tail = node;
   2d296:	bf08      	it	eq
   2d298:	6042      	streq	r2, [r0, #4]
}
   2d29a:	e7f6      	b.n	2d28a <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2d29c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d29e:	681b      	ldr	r3, [r3, #0]
   2d2a0:	e7e8      	b.n	2d274 <sys_slist_find_and_remove.isra.0+0x4>

0002d2a2 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d2a2:	2301      	movs	r3, #1
   2d2a4:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d2a6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d2a8:	f3bf 8f5b 	dmb	ish
   2d2ac:	e850 2f00 	ldrex	r2, [r0]
   2d2b0:	401a      	ands	r2, r3
   2d2b2:	e840 2100 	strex	r1, r2, [r0]
   2d2b6:	2900      	cmp	r1, #0
   2d2b8:	d1f8      	bne.n	2d2ac <atomic_clear_bit+0xa>
   2d2ba:	f3bf 8f5b 	dmb	ish
}
   2d2be:	4770      	bx	lr

0002d2c0 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2d2c0:	2006      	movs	r0, #6
   2d2c2:	4770      	bx	lr

0002d2c4 <atomic_test_and_set_bit>:
{
   2d2c4:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d2c6:	2301      	movs	r3, #1
   2d2c8:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d2cc:	f3bf 8f5b 	dmb	ish
   2d2d0:	e850 3f00 	ldrex	r3, [r0]
   2d2d4:	ea43 0201 	orr.w	r2, r3, r1
   2d2d8:	e840 2400 	strex	r4, r2, [r0]
   2d2dc:	2c00      	cmp	r4, #0
   2d2de:	d1f7      	bne.n	2d2d0 <atomic_test_and_set_bit+0xc>
   2d2e0:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2d2e4:	4219      	tst	r1, r3
}
   2d2e6:	bf14      	ite	ne
   2d2e8:	2001      	movne	r0, #1
   2d2ea:	2000      	moveq	r0, #0
   2d2ec:	bd10      	pop	{r4, pc}

0002d2ee <read_cb>:
{
   2d2ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   2d2f0:	6816      	ldr	r6, [r2, #0]
{
   2d2f2:	4605      	mov	r5, r0
	data->err = 0x00;
   2d2f4:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2d2f6:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   2d2f8:	7313      	strb	r3, [r2, #12]
{
   2d2fa:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2d2fc:	4629      	mov	r1, r5
   2d2fe:	2295      	movs	r2, #149	; 0x95
   2d300:	f000 fca9 	bl	2dc56 <bt_gatt_check_perm>
   2d304:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2d306:	b980      	cbnz	r0, 2d32a <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2d308:	e9cd 0000 	strd	r0, r0, [sp]
   2d30c:	4629      	mov	r1, r5
   2d30e:	88a3      	ldrh	r3, [r4, #4]
   2d310:	68a2      	ldr	r2, [r4, #8]
   2d312:	4630      	mov	r0, r6
   2d314:	f7ff ff21 	bl	2d15a <att_chan_read>
	if (ret < 0) {
   2d318:	2800      	cmp	r0, #0
   2d31a:	da09      	bge.n	2d330 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2d31c:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2d320:	bf26      	itte	cs
   2d322:	4240      	negcs	r0, r0
   2d324:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2d326:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   2d328:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2d32a:	2000      	movs	r0, #0
}
   2d32c:	b002      	add	sp, #8
   2d32e:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2d330:	2001      	movs	r0, #1
   2d332:	e7fb      	b.n	2d32c <read_cb+0x3e>

0002d334 <read_vl_cb>:
{
   2d334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2d338:	f8d2 8000 	ldr.w	r8, [r2]
{
   2d33c:	4606      	mov	r6, r0
	data->err = 0x00;
   2d33e:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2d340:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2d344:	7313      	strb	r3, [r2, #12]
{
   2d346:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2d348:	4631      	mov	r1, r6
   2d34a:	2295      	movs	r2, #149	; 0x95
   2d34c:	f000 fc83 	bl	2dc56 <bt_gatt_check_perm>
   2d350:	4605      	mov	r5, r0
   2d352:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2d354:	b9e0      	cbnz	r0, 2d390 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2d356:	68a0      	ldr	r0, [r4, #8]
   2d358:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2d35c:	8a02      	ldrh	r2, [r0, #16]
   2d35e:	1a9b      	subs	r3, r3, r2
   2d360:	2b01      	cmp	r3, #1
   2d362:	dd15      	ble.n	2d390 <read_vl_cb+0x5c>
   2d364:	2102      	movs	r1, #2
   2d366:	300c      	adds	r0, #12
   2d368:	f001 f9cb 	bl	2e702 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2d36c:	e9cd 5500 	strd	r5, r5, [sp]
   2d370:	4607      	mov	r7, r0
   2d372:	88a3      	ldrh	r3, [r4, #4]
   2d374:	68a2      	ldr	r2, [r4, #8]
   2d376:	4631      	mov	r1, r6
   2d378:	4640      	mov	r0, r8
   2d37a:	f7ff feee 	bl	2d15a <att_chan_read>
	if (read < 0) {
   2d37e:	1e03      	subs	r3, r0, #0
   2d380:	da0a      	bge.n	2d398 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2d382:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2d386:	bf26      	itte	cs
   2d388:	425b      	negcs	r3, r3
   2d38a:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2d38c:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   2d38e:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2d390:	2000      	movs	r0, #0
}
   2d392:	b002      	add	sp, #8
   2d394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   2d398:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2d39a:	2001      	movs	r0, #1
   2d39c:	e7f9      	b.n	2d392 <read_vl_cb+0x5e>

0002d39e <bt_att_sent>:
{
   2d39e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   2d3a0:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   2d3a4:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2d3a6:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   2d3a8:	2104      	movs	r1, #4
   2d3aa:	3030      	adds	r0, #48	; 0x30
   2d3ac:	f7ff ff79 	bl	2d2a2 <atomic_clear_bit>
	if (!att) {
   2d3b0:	b304      	cbz	r4, 2d3f4 <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2d3b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2d3b4:	b98b      	cbnz	r3, 2d3da <bt_att_sent+0x3c>
   2d3b6:	6863      	ldr	r3, [r4, #4]
   2d3b8:	b17b      	cbz	r3, 2d3da <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2d3ba:	1d20      	adds	r0, r4, #4
   2d3bc:	f7ff fd93 	bl	2cee6 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2d3c0:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2d3c2:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2d3c4:	4638      	mov	r0, r7
   2d3c6:	f7ff fe89 	bl	2d0dc <chan_req_send>
   2d3ca:	2800      	cmp	r0, #0
   2d3cc:	da12      	bge.n	2d3f4 <bt_att_sent+0x56>
	return list->head;
   2d3ce:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2d3d0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2d3d2:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2d3d4:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2d3d6:	b903      	cbnz	r3, 2d3da <bt_att_sent+0x3c>
	list->tail = node;
   2d3d8:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2d3da:	f105 0138 	add.w	r1, r5, #56	; 0x38
   2d3de:	4638      	mov	r0, r7
   2d3e0:	f7ff fe94 	bl	2d10c <process_queue>
	if (!err) {
   2d3e4:	b130      	cbz	r0, 2d3f4 <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   2d3e6:	f104 010c 	add.w	r1, r4, #12
   2d3ea:	4638      	mov	r0, r7
}
   2d3ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2d3f0:	f7ff be8c 	b.w	2d10c <process_queue>
}
   2d3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d3f6 <att_req_send_process>:
{
   2d3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2d3fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2d3fc:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d3fe:	2c00      	cmp	r4, #0
   2d400:	d03a      	beq.n	2d478 <att_req_send_process+0x82>
	return node->next;
   2d402:	f854 6988 	ldr.w	r6, [r4], #-136
   2d406:	b106      	cbz	r6, 2d40a <att_req_send_process+0x14>
   2d408:	3e88      	subs	r6, #136	; 0x88
{
   2d40a:	2300      	movs	r3, #0
   2d40c:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   2d40e:	f108 0704 	add.w	r7, r8, #4
   2d412:	e013      	b.n	2d43c <att_req_send_process+0x46>
		if (!req && prev &&
   2d414:	b1bb      	cbz	r3, 2d446 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2d416:	2103      	movs	r1, #3
   2d418:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2d41c:	f7ff fd87 	bl	2cf2e <atomic_test_bit>
   2d420:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2d422:	f103 0034 	add.w	r0, r3, #52	; 0x34
   2d426:	f7ff fd82 	bl	2cf2e <atomic_test_bit>
		if (!req && prev &&
   2d42a:	4282      	cmp	r2, r0
   2d42c:	d10b      	bne.n	2d446 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d42e:	b31e      	cbz	r6, 2d478 <att_req_send_process+0x82>
   2d430:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   2d434:	b102      	cbz	r2, 2d438 <att_req_send_process+0x42>
   2d436:	3a88      	subs	r2, #136	; 0x88
{
   2d438:	4634      	mov	r4, r6
   2d43a:	4616      	mov	r6, r2
		if (chan->req) {
   2d43c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2d43e:	2a00      	cmp	r2, #0
   2d440:	d1f5      	bne.n	2d42e <att_req_send_process+0x38>
		if (!req && prev &&
   2d442:	2d00      	cmp	r5, #0
   2d444:	d0e6      	beq.n	2d414 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2d446:	4638      	mov	r0, r7
   2d448:	f7ff fd4d 	bl	2cee6 <sys_slist_get>
	if (node) {
   2d44c:	4605      	mov	r5, r0
   2d44e:	b908      	cbnz	r0, 2d454 <att_req_send_process+0x5e>
   2d450:	4623      	mov	r3, r4
   2d452:	e7ec      	b.n	2d42e <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   2d454:	4601      	mov	r1, r0
   2d456:	4620      	mov	r0, r4
   2d458:	f7ff fe40 	bl	2d0dc <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2d45c:	2800      	cmp	r0, #0
   2d45e:	da0b      	bge.n	2d478 <att_req_send_process+0x82>
	return list->head;
   2d460:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2d464:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2d466:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2d46a:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2d46e:	2b00      	cmp	r3, #0
   2d470:	d1ee      	bne.n	2d450 <att_req_send_process+0x5a>
	list->tail = node;
   2d472:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2d476:	e7eb      	b.n	2d450 <att_req_send_process+0x5a>
}
   2d478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d47c <bt_att_status>:
{
   2d47c:	b538      	push	{r3, r4, r5, lr}
   2d47e:	4605      	mov	r5, r0
   2d480:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2d482:	2100      	movs	r1, #0
   2d484:	f7ff fd53 	bl	2cf2e <atomic_test_bit>
   2d488:	b1b8      	cbz	r0, 2d4ba <bt_att_status+0x3e>
	if (!chan->att) {
   2d48a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2d48e:	b1a0      	cbz	r0, 2d4ba <bt_att_status+0x3e>
	if (chan->req) {
   2d490:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2d492:	b993      	cbnz	r3, 2d4ba <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   2d494:	3004      	adds	r0, #4
   2d496:	f7ff fd26 	bl	2cee6 <sys_slist_get>
	if (!node) {
   2d49a:	4604      	mov	r4, r0
   2d49c:	b168      	cbz	r0, 2d4ba <bt_att_status+0x3e>
	return chan_req_send(chan, req);
   2d49e:	4601      	mov	r1, r0
   2d4a0:	1f28      	subs	r0, r5, #4
   2d4a2:	f7ff fe1b 	bl	2d0dc <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2d4a6:	2800      	cmp	r0, #0
   2d4a8:	da07      	bge.n	2d4ba <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   2d4aa:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2d4ae:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2d4b0:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2d4b2:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2d4b4:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2d4b6:	b902      	cbnz	r2, 2d4ba <bt_att_status+0x3e>
	list->tail = node;
   2d4b8:	609c      	str	r4, [r3, #8]
}
   2d4ba:	bd38      	pop	{r3, r4, r5, pc}

0002d4bc <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2d4bc:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2d4be:	6883      	ldr	r3, [r0, #8]
   2d4c0:	699b      	ldr	r3, [r3, #24]
   2d4c2:	b10b      	cbz	r3, 2d4c8 <att_sent+0xc>
		chan->ops->sent(chan);
   2d4c4:	3004      	adds	r0, #4
   2d4c6:	4718      	bx	r3
}
   2d4c8:	4770      	bx	lr

0002d4ca <att_unknown>:
{
   2d4ca:	b510      	push	{r4, lr}
   2d4cc:	460c      	mov	r4, r1
	if (!err) {
   2d4ce:	b90a      	cbnz	r2, 2d4d4 <att_unknown+0xa>
		att_sent(conn, user_data);
   2d4d0:	f7ff fff4 	bl	2d4bc <att_sent>
	tx_meta_data_free(user_data);
   2d4d4:	4620      	mov	r0, r4
}
   2d4d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2d4da:	f7ee bcb9 	b.w	1be50 <tx_meta_data_free>

0002d4de <att_tx_complete>:
{
   2d4de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d4e2:	4606      	mov	r6, r0
   2d4e4:	460d      	mov	r5, r1
	if (!err) {
   2d4e6:	4614      	mov	r4, r2
   2d4e8:	b122      	cbz	r2, 2d4f4 <att_tx_complete+0x16>
}
   2d4ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2d4ee:	4608      	mov	r0, r1
   2d4f0:	f7ee bcae 	b.w	1be50 <tx_meta_data_free>
		att_sent(conn, user_data);
   2d4f4:	f7ff ffe2 	bl	2d4bc <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2d4f8:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   2d4fa:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2d4fe:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2d502:	4628      	mov	r0, r5
   2d504:	f7ee fca4 	bl	1be50 <tx_meta_data_free>
	if (!err && func) {
   2d508:	b92f      	cbnz	r7, 2d516 <att_tx_complete+0x38>
}
   2d50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2d50e:	4649      	mov	r1, r9
   2d510:	4630      	mov	r0, r6
   2d512:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2d514:	3401      	adds	r4, #1
   2d516:	b2a3      	uxth	r3, r4
   2d518:	4543      	cmp	r3, r8
   2d51a:	d3f8      	bcc.n	2d50e <att_tx_complete+0x30>
   2d51c:	e7f5      	b.n	2d50a <att_tx_complete+0x2c>

0002d51e <att_req_sent>:
{
   2d51e:	b510      	push	{r4, lr}
   2d520:	460c      	mov	r4, r1
	if (!err) {
   2d522:	b90a      	cbnz	r2, 2d528 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2d524:	f7ff ffca 	bl	2d4bc <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2d528:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2d52a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2d52c:	b12b      	cbz	r3, 2d53a <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2d52e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2d532:	2300      	movs	r3, #0
   2d534:	3058      	adds	r0, #88	; 0x58
   2d536:	f7f9 f8e9 	bl	2670c <k_work_reschedule>
	tx_meta_data_free(user_data);
   2d53a:	4620      	mov	r0, r4
}
   2d53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2d540:	f7ee bc86 	b.w	1be50 <tx_meta_data_free>

0002d544 <att_cfm_sent>:
{
   2d544:	b510      	push	{r4, lr}
   2d546:	460c      	mov	r4, r1
	if (!err) {
   2d548:	b90a      	cbnz	r2, 2d54e <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2d54a:	f7ff ffb7 	bl	2d4bc <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   2d54e:	6820      	ldr	r0, [r4, #0]
   2d550:	2101      	movs	r1, #1
   2d552:	3034      	adds	r0, #52	; 0x34
   2d554:	f7ff fea5 	bl	2d2a2 <atomic_clear_bit>
	tx_meta_data_free(data);
   2d558:	4620      	mov	r0, r4
}
   2d55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2d55e:	f7ee bc77 	b.w	1be50 <tx_meta_data_free>

0002d562 <att_rsp_sent>:
{
   2d562:	b510      	push	{r4, lr}
   2d564:	460c      	mov	r4, r1
	if (!err) {
   2d566:	b90a      	cbnz	r2, 2d56c <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2d568:	f7ff ffa8 	bl	2d4bc <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2d56c:	6820      	ldr	r0, [r4, #0]
   2d56e:	2100      	movs	r1, #0
   2d570:	3034      	adds	r0, #52	; 0x34
   2d572:	f7ff fe96 	bl	2d2a2 <atomic_clear_bit>
	tx_meta_data_free(data);
   2d576:	4620      	mov	r0, r4
}
   2d578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2d57c:	f7ee bc68 	b.w	1be50 <tx_meta_data_free>

0002d580 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2d580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d584:	4688      	mov	r8, r1
   2d586:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2d588:	2101      	movs	r1, #1
   2d58a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2d58c:	4605      	mov	r5, r0
   2d58e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2d590:	f7ee ff2a 	bl	1c3e8 <bt_att_chan_create_pdu>
	if (!buf) {
   2d594:	4604      	mov	r4, r0
   2d596:	b170      	cbz	r0, 2d5b6 <send_err_rsp.part.0+0x36>
   2d598:	2104      	movs	r1, #4
   2d59a:	300c      	adds	r0, #12
   2d59c:	f001 f8b1 	bl	2e702 <net_buf_simple_add>
	rsp->request = req;
   2d5a0:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2d5a4:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2d5a8:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2d5aa:	4621      	mov	r1, r4
   2d5ac:	4628      	mov	r0, r5
}
   2d5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2d5b2:	f7ff bdc4 	b.w	2d13e <bt_att_chan_send_rsp>
}
   2d5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d5ba <att_write_req>:
{
   2d5ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d5bc:	460c      	mov	r4, r1
   2d5be:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2d5c0:	f101 000c 	add.w	r0, r1, #12
   2d5c4:	f001 f8cc 	bl	2e760 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2d5c8:	8a22      	ldrh	r2, [r4, #16]
   2d5ca:	9201      	str	r2, [sp, #4]
   2d5cc:	68e2      	ldr	r2, [r4, #12]
   2d5ce:	9200      	str	r2, [sp, #0]
   2d5d0:	4603      	mov	r3, r0
   2d5d2:	2213      	movs	r2, #19
   2d5d4:	2112      	movs	r1, #18
   2d5d6:	4628      	mov	r0, r5
   2d5d8:	f7ef f82a 	bl	1c630 <att_write_rsp.constprop.0>
}
   2d5dc:	b003      	add	sp, #12
   2d5de:	bd30      	pop	{r4, r5, pc}

0002d5e0 <att_write_cmd>:
{
   2d5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d5e2:	460c      	mov	r4, r1
   2d5e4:	4605      	mov	r5, r0
   2d5e6:	f101 000c 	add.w	r0, r1, #12
   2d5ea:	f001 f8b9 	bl	2e760 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2d5ee:	8a22      	ldrh	r2, [r4, #16]
   2d5f0:	9201      	str	r2, [sp, #4]
   2d5f2:	68e2      	ldr	r2, [r4, #12]
   2d5f4:	9200      	str	r2, [sp, #0]
   2d5f6:	2200      	movs	r2, #0
   2d5f8:	4603      	mov	r3, r0
   2d5fa:	4611      	mov	r1, r2
   2d5fc:	4628      	mov	r0, r5
   2d5fe:	f7ef f817 	bl	1c630 <att_write_rsp.constprop.0>
}
   2d602:	b003      	add	sp, #12
   2d604:	bd30      	pop	{r4, r5, pc}

0002d606 <att_read_blob_req>:
{
   2d606:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2d608:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2d60a:	8813      	ldrh	r3, [r2, #0]
   2d60c:	8852      	ldrh	r2, [r2, #2]
   2d60e:	9200      	str	r2, [sp, #0]
   2d610:	210c      	movs	r1, #12
   2d612:	220d      	movs	r2, #13
   2d614:	f7ef f9d2 	bl	1c9bc <att_read_rsp>
}
   2d618:	b003      	add	sp, #12
   2d61a:	f85d fb04 	ldr.w	pc, [sp], #4

0002d61e <att_read_req>:
{
   2d61e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2d620:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2d622:	2200      	movs	r2, #0
   2d624:	881b      	ldrh	r3, [r3, #0]
   2d626:	9200      	str	r2, [sp, #0]
   2d628:	210a      	movs	r1, #10
   2d62a:	220b      	movs	r2, #11
   2d62c:	f7ef f9c6 	bl	1c9bc <att_read_rsp>
}
   2d630:	b003      	add	sp, #12
   2d632:	f85d fb04 	ldr.w	pc, [sp], #4

0002d636 <att_mtu_req>:
{
   2d636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d638:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2d63a:	f850 2b34 	ldr.w	r2, [r0], #52
{
   2d63e:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2d640:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2d642:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2d644:	f7ff fc73 	bl	2cf2e <atomic_test_bit>
   2d648:	4604      	mov	r4, r0
   2d64a:	b9f0      	cbnz	r0, 2d68a <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2d64c:	68db      	ldr	r3, [r3, #12]
   2d64e:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2d650:	2e16      	cmp	r6, #22
   2d652:	d91c      	bls.n	2d68e <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2d654:	4638      	mov	r0, r7
   2d656:	2202      	movs	r2, #2
   2d658:	f7ef f84e 	bl	1c6f8 <bt_att_create_pdu>
	if (!pdu) {
   2d65c:	4607      	mov	r7, r0
   2d65e:	b1c0      	cbz	r0, 2d692 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2d660:	2102      	movs	r1, #2
   2d662:	300c      	adds	r0, #12
   2d664:	f001 f84d 	bl	2e702 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2d668:	2341      	movs	r3, #65	; 0x41
   2d66a:	7003      	strb	r3, [r0, #0]
   2d66c:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2d66e:	4639      	mov	r1, r7
   2d670:	4628      	mov	r0, r5
   2d672:	f7ff fd64 	bl	2d13e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2d676:	2e41      	cmp	r6, #65	; 0x41
   2d678:	bf28      	it	cs
   2d67a:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2d67c:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2d67e:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2d680:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2d682:	f7ff fce5 	bl	2d050 <att_chan_mtu_updated>
	return 0;
   2d686:	4620      	mov	r0, r4
}
   2d688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2d68a:	2006      	movs	r0, #6
   2d68c:	e7fc      	b.n	2d688 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2d68e:	2004      	movs	r0, #4
   2d690:	e7fa      	b.n	2d688 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2d692:	200e      	movs	r0, #14
   2d694:	e7f8      	b.n	2d688 <att_mtu_req+0x52>

0002d696 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2d696:	8a0a      	ldrh	r2, [r1, #16]
   2d698:	68c9      	ldr	r1, [r1, #12]
   2d69a:	2300      	movs	r3, #0
   2d69c:	f7ef bb3a 	b.w	1cd14 <att_handle_rsp>

0002d6a0 <bt_att_encrypt_change>:
{
   2d6a0:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2d6a2:	4606      	mov	r6, r0
	if (!att_chan->att) {
   2d6a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct bt_conn *conn = le_chan->chan.conn;
   2d6a8:	f856 5904 	ldr.w	r5, [r6], #-4
{
   2d6ac:	4604      	mov	r4, r0
	if (!att_chan->att) {
   2d6ae:	2b00      	cmp	r3, #0
   2d6b0:	d036      	beq.n	2d720 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   2d6b2:	b139      	cbz	r1, 2d6c4 <bt_att_encrypt_change+0x24>
		if (att_chan->req && att_chan->req->retrying) {
   2d6b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2d6b6:	2b00      	cmp	r3, #0
   2d6b8:	d032      	beq.n	2d720 <bt_att_encrypt_change+0x80>
   2d6ba:	7c1b      	ldrb	r3, [r3, #16]
   2d6bc:	07da      	lsls	r2, r3, #31
   2d6be:	d52f      	bpl.n	2d720 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   2d6c0:	2305      	movs	r3, #5
   2d6c2:	e020      	b.n	2d706 <bt_att_encrypt_change+0x66>
	bt_gatt_encrypt_change(conn);
   2d6c4:	4628      	mov	r0, r5
   2d6c6:	f7f1 f805 	bl	1e6d4 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2d6ca:	7a6b      	ldrb	r3, [r5, #9]
   2d6cc:	2b01      	cmp	r3, #1
   2d6ce:	d027      	beq.n	2d720 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2d6d0:	6b65      	ldr	r5, [r4, #52]	; 0x34
   2d6d2:	b32d      	cbz	r5, 2d720 <bt_att_encrypt_change+0x80>
   2d6d4:	7c2b      	ldrb	r3, [r5, #16]
   2d6d6:	07db      	lsls	r3, r3, #31
   2d6d8:	d522      	bpl.n	2d720 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   2d6da:	68eb      	ldr	r3, [r5, #12]
   2d6dc:	2b00      	cmp	r3, #0
   2d6de:	d0ef      	beq.n	2d6c0 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2d6e0:	696a      	ldr	r2, [r5, #20]
   2d6e2:	7c69      	ldrb	r1, [r5, #17]
   2d6e4:	4630      	mov	r0, r6
   2d6e6:	f7ee fe7f 	bl	1c3e8 <bt_att_chan_create_pdu>
	if (!buf) {
   2d6ea:	4604      	mov	r4, r0
   2d6ec:	b150      	cbz	r0, 2d704 <bt_att_encrypt_change+0x64>
	if (req->encode(buf, req->len, req->user_data)) {
   2d6ee:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2d6f2:	68eb      	ldr	r3, [r5, #12]
   2d6f4:	4798      	blx	r3
   2d6f6:	b168      	cbz	r0, 2d714 <bt_att_encrypt_change+0x74>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2d6f8:	69a0      	ldr	r0, [r4, #24]
   2d6fa:	f7ee fba9 	bl	1be50 <tx_meta_data_free>
		net_buf_unref(buf);
   2d6fe:	4620      	mov	r0, r4
   2d700:	f7f3 fa20 	bl	20b44 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2d704:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   2d706:	2200      	movs	r2, #0
   2d708:	4630      	mov	r0, r6
   2d70a:	4611      	mov	r1, r2
}
   2d70c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2d710:	f7ef bb00 	b.w	1cd14 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2d714:	4621      	mov	r1, r4
   2d716:	4630      	mov	r0, r6
   2d718:	f7ee fc68 	bl	1bfec <chan_send>
   2d71c:	2800      	cmp	r0, #0
   2d71e:	d1eb      	bne.n	2d6f8 <bt_att_encrypt_change+0x58>
}
   2d720:	bd70      	pop	{r4, r5, r6, pc}

0002d722 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   2d722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d724:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2d726:	f7ee fcd7 	bl	1c0d8 <att_get>
	if (!att) {
   2d72a:	4604      	mov	r4, r0
   2d72c:	b940      	cbnz	r0, 2d740 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2d72e:	69a8      	ldr	r0, [r5, #24]
   2d730:	f7ee fb8e 	bl	1be50 <tx_meta_data_free>
		net_buf_unref(buf);
   2d734:	4628      	mov	r0, r5
   2d736:	f7f3 fa05 	bl	20b44 <net_buf_unref>
		return -ENOTCONN;
   2d73a:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2d73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   2d740:	f100 060c 	add.w	r6, r0, #12
   2d744:	4629      	mov	r1, r5
   2d746:	4630      	mov	r0, r6
   2d748:	f000 ffaf 	bl	2e6aa <net_buf_put>
	return list->head;
   2d74c:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d74e:	b14d      	cbz	r5, 2d764 <bt_att_send+0x42>
	return node->next;
   2d750:	f855 4988 	ldr.w	r4, [r5], #-136
   2d754:	b104      	cbz	r4, 2d758 <bt_att_send+0x36>
   2d756:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   2d758:	4631      	mov	r1, r6
   2d75a:	4628      	mov	r0, r5
   2d75c:	f7ff fcd6 	bl	2d10c <process_queue>
		if (!err) {
   2d760:	4603      	mov	r3, r0
   2d762:	b980      	cbnz	r0, 2d786 <bt_att_send+0x64>
	return 0;
   2d764:	2000      	movs	r0, #0
   2d766:	e7ea      	b.n	2d73e <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2d768:	2103      	movs	r1, #3
   2d76a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2d76e:	f7ff fbde 	bl	2cf2e <atomic_test_bit>
   2d772:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2d774:	f105 0034 	add.w	r0, r5, #52	; 0x34
   2d778:	f7ff fbd9 	bl	2cf2e <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2d77c:	4287      	cmp	r7, r0
   2d77e:	f06f 0301 	mvn.w	r3, #1
   2d782:	d107      	bne.n	2d794 <bt_att_send+0x72>
   2d784:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d786:	2c00      	cmp	r4, #0
   2d788:	d0ec      	beq.n	2d764 <bt_att_send+0x42>
   2d78a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   2d78e:	b922      	cbnz	r2, 2d79a <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   2d790:	3302      	adds	r3, #2
   2d792:	d0e9      	beq.n	2d768 <bt_att_send+0x46>
{
   2d794:	4625      	mov	r5, r4
   2d796:	4614      	mov	r4, r2
   2d798:	e7de      	b.n	2d758 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d79a:	3a88      	subs	r2, #136	; 0x88
   2d79c:	e7f8      	b.n	2d790 <bt_att_send+0x6e>

0002d79e <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2d79e:	b510      	push	{r4, lr}
   2d7a0:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2d7a2:	f7ee fc99 	bl	1c0d8 <att_get>
	if (!att) {
   2d7a6:	b160      	cbz	r0, 2d7c2 <bt_att_req_send+0x24>
	parent->next = child;
   2d7a8:	2300      	movs	r3, #0
   2d7aa:	6023      	str	r3, [r4, #0]
	return list->tail;
   2d7ac:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2d7ae:	b92b      	cbnz	r3, 2d7bc <bt_att_req_send+0x1e>
	list->head = node;
   2d7b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2d7b4:	f7ff fe1f 	bl	2d3f6 <att_req_send_process>

	return 0;
   2d7b8:	2000      	movs	r0, #0
}
   2d7ba:	bd10      	pop	{r4, pc}
	parent->next = child;
   2d7bc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2d7be:	6084      	str	r4, [r0, #8]
}
   2d7c0:	e7f8      	b.n	2d7b4 <bt_att_req_send+0x16>
		return -ENOTCONN;
   2d7c2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d7c6:	e7f8      	b.n	2d7ba <bt_att_req_send+0x1c>

0002d7c8 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2d7c8:	2001      	movs	r0, #1
   2d7ca:	4770      	bx	lr

0002d7cc <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2d7cc:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   2d7ce:	f7ee fc83 	bl	1c0d8 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2d7d2:	b150      	cbz	r0, 2d7ea <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   2d7d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2d7d6:	b144      	cbz	r4, 2d7ea <bt_att_clear_out_of_sync_sent+0x1e>
   2d7d8:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   2d7da:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2d7de:	2105      	movs	r1, #5
   2d7e0:	f7ff fd5f 	bl	2d2a2 <atomic_clear_bit>
	return node->next;
   2d7e4:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   2d7e8:	e7f5      	b.n	2d7d6 <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   2d7ea:	bd10      	pop	{r4, pc}

0002d7ec <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2d7ec:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2d7ee:	2104      	movs	r1, #4
   2d7f0:	f7ff fb6e 	bl	2ced0 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2d7f4:	b128      	cbz	r0, 2d802 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2d7f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2d7fa:	2105      	movs	r1, #5
   2d7fc:	3030      	adds	r0, #48	; 0x30
   2d7fe:	f7ff bb96 	b.w	2cf2e <atomic_test_bit>
}
   2d802:	bd08      	pop	{r3, pc}

0002d804 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2d804:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2d806:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2d80a:	2201      	movs	r2, #1
   2d80c:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2d80e:	7403      	strb	r3, [r0, #16]
}
   2d810:	4770      	bx	lr

0002d812 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2d812:	6010      	str	r0, [r2, #0]
}
   2d814:	2000      	movs	r0, #0
   2d816:	4770      	bx	lr

0002d818 <gatt_ccc_changed>:
{
   2d818:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2d81a:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2d81c:	895a      	ldrh	r2, [r3, #10]
   2d81e:	428a      	cmp	r2, r1
   2d820:	d003      	beq.n	2d82a <gatt_ccc_changed+0x12>
		ccc->value = value;
   2d822:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2d824:	68db      	ldr	r3, [r3, #12]
   2d826:	b103      	cbz	r3, 2d82a <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2d828:	4718      	bx	r3
}
   2d82a:	4770      	bx	lr

0002d82c <gatt_indicate_rsp>:
{
   2d82c:	b510      	push	{r4, lr}
   2d82e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2d830:	68a3      	ldr	r3, [r4, #8]
{
   2d832:	460a      	mov	r2, r1
	if (params->func) {
   2d834:	b10b      	cbz	r3, 2d83a <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2d836:	4621      	mov	r1, r4
   2d838:	4798      	blx	r3
	params->_ref--;
   2d83a:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2d83c:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2d83e:	3b01      	subs	r3, #1
   2d840:	b2db      	uxtb	r3, r3
   2d842:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2d844:	b122      	cbz	r2, 2d850 <gatt_indicate_rsp+0x24>
   2d846:	b91b      	cbnz	r3, 2d850 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2d848:	4620      	mov	r0, r4
}
   2d84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2d84e:	4710      	bx	r2
}
   2d850:	bd10      	pop	{r4, pc}

0002d852 <match_uuid>:
	data->attr = attr;
   2d852:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2d854:	8091      	strh	r1, [r2, #4]
}
   2d856:	2000      	movs	r0, #0
   2d858:	4770      	bx	lr

0002d85a <ccc_set_cb>:
}
   2d85a:	2000      	movs	r0, #0
   2d85c:	4770      	bx	lr

0002d85e <gen_hash_m>:
{
   2d85e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2d860:	6807      	ldr	r7, [r0, #0]
   2d862:	783d      	ldrb	r5, [r7, #0]
{
   2d864:	b089      	sub	sp, #36	; 0x24
   2d866:	4606      	mov	r6, r0
   2d868:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2d86a:	b9dd      	cbnz	r5, 2d8a4 <gen_hash_m+0x46>
	switch (u16->val) {
   2d86c:	887b      	ldrh	r3, [r7, #2]
   2d86e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2d872:	d004      	beq.n	2d87e <gen_hash_m+0x20>
   2d874:	d810      	bhi.n	2d898 <gen_hash_m+0x3a>
   2d876:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2d87a:	2b03      	cmp	r3, #3
   2d87c:	d812      	bhi.n	2d8a4 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2d87e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d882:	2202      	movs	r2, #2
   2d884:	f10d 010a 	add.w	r1, sp, #10
   2d888:	4620      	mov	r0, r4
   2d88a:	f7fe fb9b 	bl	2bfc4 <tc_cmac_update>
   2d88e:	b968      	cbnz	r0, 2d8ac <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2d890:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2d894:	65a2      	str	r2, [r4, #88]	; 0x58
   2d896:	e006      	b.n	2d8a6 <gen_hash_m+0x48>
	switch (u16->val) {
   2d898:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2d89c:	33ff      	adds	r3, #255	; 0xff
   2d89e:	b29b      	uxth	r3, r3
   2d8a0:	2b04      	cmp	r3, #4
   2d8a2:	d91e      	bls.n	2d8e2 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2d8a4:	2501      	movs	r5, #1
}
   2d8a6:	4628      	mov	r0, r5
   2d8a8:	b009      	add	sp, #36	; 0x24
   2d8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   2d8ac:	887b      	ldrh	r3, [r7, #2]
   2d8ae:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d8b2:	2202      	movs	r2, #2
   2d8b4:	f10d 010a 	add.w	r1, sp, #10
   2d8b8:	4620      	mov	r0, r4
   2d8ba:	f7fe fb83 	bl	2bfc4 <tc_cmac_update>
   2d8be:	2800      	cmp	r0, #0
   2d8c0:	d0e6      	beq.n	2d890 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2d8c2:	2000      	movs	r0, #0
   2d8c4:	9000      	str	r0, [sp, #0]
   2d8c6:	aa03      	add	r2, sp, #12
   2d8c8:	6877      	ldr	r7, [r6, #4]
   2d8ca:	2313      	movs	r3, #19
   2d8cc:	4631      	mov	r1, r6
   2d8ce:	47b8      	blx	r7
		if (len < 0) {
   2d8d0:	1e02      	subs	r2, r0, #0
   2d8d2:	dbdf      	blt.n	2d894 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2d8d4:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d8d6:	4620      	mov	r0, r4
   2d8d8:	f7fe fb74 	bl	2bfc4 <tc_cmac_update>
   2d8dc:	2800      	cmp	r0, #0
   2d8de:	d1e1      	bne.n	2d8a4 <gen_hash_m+0x46>
   2d8e0:	e7d6      	b.n	2d890 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2d8e2:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d8e6:	2202      	movs	r2, #2
   2d8e8:	f10d 010a 	add.w	r1, sp, #10
   2d8ec:	4620      	mov	r0, r4
   2d8ee:	f7fe fb69 	bl	2bfc4 <tc_cmac_update>
   2d8f2:	2800      	cmp	r0, #0
   2d8f4:	d0cc      	beq.n	2d890 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2d8f6:	887b      	ldrh	r3, [r7, #2]
   2d8f8:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d8fc:	2202      	movs	r2, #2
   2d8fe:	f10d 010a 	add.w	r1, sp, #10
   2d902:	e7e8      	b.n	2d8d6 <gen_hash_m+0x78>

0002d904 <bt_addr_le_eq>:
{
   2d904:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2d906:	2207      	movs	r2, #7
   2d908:	f7fe fcc2 	bl	2c290 <memcmp>
}
   2d90c:	fab0 f080 	clz	r0, r0
   2d910:	0940      	lsrs	r0, r0, #5
   2d912:	bd08      	pop	{r3, pc}

0002d914 <ccc_find_cfg>:
{
   2d914:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2d916:	7803      	ldrb	r3, [r0, #0]
   2d918:	4293      	cmp	r3, r2
{
   2d91a:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2d91c:	d105      	bne.n	2d92a <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   2d91e:	3001      	adds	r0, #1
   2d920:	f7ff fff0 	bl	2d904 <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   2d924:	b108      	cbz	r0, 2d92a <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   2d926:	4620      	mov	r0, r4
}
   2d928:	bd10      	pop	{r4, pc}
	return NULL;
   2d92a:	2000      	movs	r0, #0
   2d92c:	e7fc      	b.n	2d928 <ccc_find_cfg+0x14>

0002d92e <atomic_or>:
{
   2d92e:	b510      	push	{r4, lr}
   2d930:	4603      	mov	r3, r0
}
   2d932:	f3bf 8f5b 	dmb	ish
   2d936:	e853 0f00 	ldrex	r0, [r3]
   2d93a:	ea40 0201 	orr.w	r2, r0, r1
   2d93e:	e843 2400 	strex	r4, r2, [r3]
   2d942:	2c00      	cmp	r4, #0
   2d944:	d1f7      	bne.n	2d936 <atomic_or+0x8>
   2d946:	f3bf 8f5b 	dmb	ish
   2d94a:	bd10      	pop	{r4, pc}

0002d94c <atomic_and>:
{
   2d94c:	b510      	push	{r4, lr}
   2d94e:	4603      	mov	r3, r0
}
   2d950:	f3bf 8f5b 	dmb	ish
   2d954:	e853 0f00 	ldrex	r0, [r3]
   2d958:	ea00 0201 	and.w	r2, r0, r1
   2d95c:	e843 2400 	strex	r4, r2, [r3]
   2d960:	2c00      	cmp	r4, #0
   2d962:	d1f7      	bne.n	2d954 <atomic_and+0x8>
   2d964:	f3bf 8f5b 	dmb	ish
   2d968:	bd10      	pop	{r4, pc}

0002d96a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2d96a:	2207      	movs	r2, #7
   2d96c:	f7fe bcb7 	b.w	2c2de <memcpy>

0002d970 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d970:	f3bf 8f5b 	dmb	ish
   2d974:	6800      	ldr	r0, [r0, #0]
   2d976:	f3bf 8f5b 	dmb	ish
}
   2d97a:	4770      	bx	lr

0002d97c <z_log_msg_static_create.constprop.0>:
   2d97c:	2300      	movs	r3, #0
   2d97e:	f7e7 b921 	b.w	14bc4 <z_impl_z_log_msg_static_create>

0002d982 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2d982:	2a02      	cmp	r2, #2
{
   2d984:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2d986:	d108      	bne.n	2d99a <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2d988:	2300      	movs	r3, #0
   2d98a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2d98e:	461a      	mov	r2, r3
   2d990:	7a00      	ldrb	r0, [r0, #8]
   2d992:	f7ef fc81 	bl	1d298 <sc_save>
}
   2d996:	2002      	movs	r0, #2
   2d998:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2d99a:	f7ef fdc1 	bl	1d520 <sc_clear>
   2d99e:	e7fa      	b.n	2d996 <sc_ccc_cfg_write+0x14>

0002d9a0 <read_appearance>:
{
   2d9a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d9a2:	4615      	mov	r5, r2
   2d9a4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2d9a8:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d9aa:	f7fe fe9b 	bl	2c6e4 <bt_get_appearance>
	if (offset > value_len) {
   2d9ae:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d9b0:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2d9b4:	d80e      	bhi.n	2d9d4 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   2d9b6:	f1c6 0402 	rsb	r4, r6, #2
   2d9ba:	42bc      	cmp	r4, r7
   2d9bc:	bfa8      	it	ge
   2d9be:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2d9c0:	f10d 0306 	add.w	r3, sp, #6
   2d9c4:	4622      	mov	r2, r4
   2d9c6:	1999      	adds	r1, r3, r6
   2d9c8:	4628      	mov	r0, r5
   2d9ca:	f7fe fc88 	bl	2c2de <memcpy>
}
   2d9ce:	4620      	mov	r0, r4
   2d9d0:	b003      	add	sp, #12
   2d9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d9d4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2d9d8:	e7f9      	b.n	2d9ce <read_appearance+0x2e>

0002d9da <read_name>:
{
   2d9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d9de:	4698      	mov	r8, r3
   2d9e0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2d9e4:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2d9e6:	f7eb ff39 	bl	1985c <bt_get_name>
   2d9ea:	4607      	mov	r7, r0
				 strlen(name));
   2d9ec:	f7fe fc20 	bl	2c230 <strlen>
	if (offset > value_len) {
   2d9f0:	b283      	uxth	r3, r0
   2d9f2:	42b3      	cmp	r3, r6
   2d9f4:	d30c      	bcc.n	2da10 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2d9f6:	1b9c      	subs	r4, r3, r6
   2d9f8:	4544      	cmp	r4, r8
   2d9fa:	bfa8      	it	ge
   2d9fc:	4644      	movge	r4, r8
   2d9fe:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2da00:	4622      	mov	r2, r4
   2da02:	19b9      	adds	r1, r7, r6
   2da04:	4628      	mov	r0, r5
   2da06:	f7fe fc6a 	bl	2c2de <memcpy>
}
   2da0a:	4620      	mov	r0, r4
   2da0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2da10:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2da14:	e7f9      	b.n	2da0a <read_name+0x30>

0002da16 <cf_read>:
{
   2da16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2da18:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2da1a:	2300      	movs	r3, #0
{
   2da1c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2da20:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2da24:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2da26:	f7ef fad7 	bl	1cfd8 <find_cf_cfg>
	if (cfg) {
   2da2a:	b128      	cbz	r0, 2da38 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2da2c:	f100 0108 	add.w	r1, r0, #8
   2da30:	2201      	movs	r2, #1
   2da32:	a801      	add	r0, sp, #4
   2da34:	f7fe fc53 	bl	2c2de <memcpy>
	if (offset > value_len) {
   2da38:	2e01      	cmp	r6, #1
   2da3a:	d80d      	bhi.n	2da58 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2da3c:	f1c6 0401 	rsb	r4, r6, #1
   2da40:	42bc      	cmp	r4, r7
   2da42:	bfa8      	it	ge
   2da44:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2da46:	ab01      	add	r3, sp, #4
   2da48:	4622      	mov	r2, r4
   2da4a:	1999      	adds	r1, r3, r6
   2da4c:	4628      	mov	r0, r5
   2da4e:	f7fe fc46 	bl	2c2de <memcpy>
}
   2da52:	4620      	mov	r0, r4
   2da54:	b003      	add	sp, #12
   2da56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2da58:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2da5c:	e7f9      	b.n	2da52 <cf_read+0x3c>

0002da5e <bt_gatt_attr_read_service>:
{
   2da5e:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   2da60:	68c9      	ldr	r1, [r1, #12]
{
   2da62:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2da64:	780a      	ldrb	r2, [r1, #0]
{
   2da66:	461c      	mov	r4, r3
   2da68:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   2da6c:	b992      	cbnz	r2, 2da94 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2da6e:	884a      	ldrh	r2, [r1, #2]
   2da70:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2da74:	2b02      	cmp	r3, #2
   2da76:	d818      	bhi.n	2daaa <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2da78:	f1c3 0202 	rsb	r2, r3, #2
   2da7c:	4294      	cmp	r4, r2
   2da7e:	bfa8      	it	ge
   2da80:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2da82:	4622      	mov	r2, r4
   2da84:	f10d 0106 	add.w	r1, sp, #6
   2da88:	4419      	add	r1, r3
   2da8a:	f7fe fc28 	bl	2c2de <memcpy>
}
   2da8e:	4620      	mov	r0, r4
   2da90:	b002      	add	sp, #8
   2da92:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   2da94:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   2da96:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2da9a:	d806      	bhi.n	2daaa <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2da9c:	f1c3 0210 	rsb	r2, r3, #16
   2daa0:	4294      	cmp	r4, r2
   2daa2:	bfa8      	it	ge
   2daa4:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2daa6:	4622      	mov	r2, r4
   2daa8:	e7ee      	b.n	2da88 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2daaa:	f06f 0406 	mvn.w	r4, #6
   2daae:	e7ee      	b.n	2da8e <bt_gatt_attr_read_service+0x30>

0002dab0 <bt_gatt_attr_read_ccc>:
{
   2dab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2dab2:	68c9      	ldr	r1, [r1, #12]
{
   2dab4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2dab8:	4615      	mov	r5, r2
   2daba:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2dabc:	f7ef faae 	bl	1d01c <find_ccc_cfg>
	if (cfg) {
   2dac0:	b100      	cbz	r0, 2dac4 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2dac2:	8900      	ldrh	r0, [r0, #8]
   2dac4:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2dac8:	2e02      	cmp	r6, #2
   2daca:	d80e      	bhi.n	2daea <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2dacc:	f1c6 0402 	rsb	r4, r6, #2
   2dad0:	42bc      	cmp	r4, r7
   2dad2:	bfa8      	it	ge
   2dad4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2dad6:	f10d 0306 	add.w	r3, sp, #6
   2dada:	4622      	mov	r2, r4
   2dadc:	1999      	adds	r1, r3, r6
   2dade:	4628      	mov	r0, r5
   2dae0:	f7fe fbfd 	bl	2c2de <memcpy>
}
   2dae4:	4620      	mov	r0, r4
   2dae6:	b003      	add	sp, #12
   2dae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2daea:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2daee:	e7f9      	b.n	2dae4 <bt_gatt_attr_read_ccc+0x34>

0002daf0 <set_change_aware_no_store>:
{
   2daf0:	b508      	push	{r3, lr}
		changed = !atomic_test_and_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2daf2:	300c      	adds	r0, #12
	if (aware) {
   2daf4:	b129      	cbz	r1, 2db02 <set_change_aware_no_store+0x12>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2daf6:	2101      	movs	r1, #1
   2daf8:	f7ff ff19 	bl	2d92e <atomic_or>
		changed = !atomic_test_and_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2dafc:	43c0      	mvns	r0, r0
   2dafe:	4008      	ands	r0, r1
}
   2db00:	bd08      	pop	{r3, pc}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2db02:	f06f 0101 	mvn.w	r1, #1
   2db06:	f7ff ff21 	bl	2d94c <atomic_and>
	return (old & mask) != 0;
   2db0a:	f000 0001 	and.w	r0, r0, #1
   2db0e:	e7f7      	b.n	2db00 <set_change_aware_no_store+0x10>

0002db10 <set_change_aware>:
{
   2db10:	b510      	push	{r4, lr}
   2db12:	4604      	mov	r4, r0
	bool changed = set_change_aware_no_store(cfg, aware);
   2db14:	f7ff ffec 	bl	2daf0 <set_change_aware_no_store>
	if (changed) {
   2db18:	b138      	cbz	r0, 2db2a <set_change_aware+0x1a>
		gatt_delayed_store_enqueue(cfg->id, &cfg->peer, DELAYED_STORE_CF);
   2db1a:	4621      	mov	r1, r4
   2db1c:	2201      	movs	r2, #1
}
   2db1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gatt_delayed_store_enqueue(cfg->id, &cfg->peer, DELAYED_STORE_CF);
   2db22:	f811 0b01 	ldrb.w	r0, [r1], #1
   2db26:	f7ef ba8d 	b.w	1d044 <gatt_delayed_store_enqueue>
}
   2db2a:	bd10      	pop	{r4, pc}

0002db2c <sc_restore_rsp>:
{
   2db2c:	b538      	push	{r3, r4, r5, lr}
   2db2e:	4604      	mov	r4, r0
   2db30:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2db32:	f7ff fe49 	bl	2d7c8 <bt_att_fixed_chan_only>
   2db36:	b148      	cbz	r0, 2db4c <sc_restore_rsp+0x20>
		cfg = find_cf_cfg(conn);
   2db38:	4620      	mov	r0, r4
   2db3a:	f7ef fa4d 	bl	1cfd8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2db3e:	b128      	cbz	r0, 2db4c <sc_restore_rsp+0x20>
   2db40:	7a03      	ldrb	r3, [r0, #8]
   2db42:	07db      	lsls	r3, r3, #31
   2db44:	d502      	bpl.n	2db4c <sc_restore_rsp+0x20>
			set_change_aware(cfg, true);
   2db46:	2101      	movs	r1, #1
   2db48:	f7ff ffe2 	bl	2db10 <set_change_aware>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2db4c:	b985      	cbnz	r5, 2db70 <sc_restore_rsp+0x44>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2db4e:	7a20      	ldrb	r0, [r4, #8]
   2db50:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2db54:	f7ef f9de 	bl	1cf14 <find_sc_cfg>
		if (sc_cfg) {
   2db58:	4604      	mov	r4, r0
   2db5a:	b148      	cbz	r0, 2db70 <sc_restore_rsp+0x44>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2db5c:	4629      	mov	r1, r5
   2db5e:	2204      	movs	r2, #4
   2db60:	3008      	adds	r0, #8
   2db62:	f7fe fbc7 	bl	2c2f4 <memset>
		sc_store(cfg);
   2db66:	4620      	mov	r0, r4
}
   2db68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2db6c:	f7ef bb60 	b.w	1d230 <sc_store>
}
   2db70:	bd38      	pop	{r3, r4, r5, pc}

0002db72 <bt_gatt_attr_read>:
{
   2db72:	b510      	push	{r4, lr}
   2db74:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2db78:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2db7c:	42a1      	cmp	r1, r4
{
   2db7e:	4610      	mov	r0, r2
	if (offset > value_len) {
   2db80:	d80b      	bhi.n	2db9a <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   2db82:	1a64      	subs	r4, r4, r1
   2db84:	429c      	cmp	r4, r3
   2db86:	bfa8      	it	ge
   2db88:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2db8a:	9b03      	ldr	r3, [sp, #12]
   2db8c:	b2a4      	uxth	r4, r4
   2db8e:	4622      	mov	r2, r4
   2db90:	4419      	add	r1, r3
   2db92:	f7fe fba4 	bl	2c2de <memcpy>
}
   2db96:	4620      	mov	r0, r4
   2db98:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2db9a:	f06f 0406 	mvn.w	r4, #6
   2db9e:	e7fa      	b.n	2db96 <bt_gatt_attr_read+0x24>

0002dba0 <bt_gatt_attr_value_handle>:
{
   2dba0:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2dba2:	4604      	mov	r4, r0
   2dba4:	b910      	cbnz	r0, 2dbac <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2dba6:	2000      	movs	r0, #0
}
   2dba8:	b002      	add	sp, #8
   2dbaa:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2dbac:	2300      	movs	r3, #0
   2dbae:	f88d 3004 	strb.w	r3, [sp, #4]
   2dbb2:	6800      	ldr	r0, [r0, #0]
   2dbb4:	f642 0303 	movw	r3, #10243	; 0x2803
   2dbb8:	a901      	add	r1, sp, #4
   2dbba:	f8ad 3006 	strh.w	r3, [sp, #6]
   2dbbe:	f7fe fc25 	bl	2c40c <bt_uuid_cmp>
   2dbc2:	2800      	cmp	r0, #0
   2dbc4:	d1ef      	bne.n	2dba6 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2dbc6:	68e3      	ldr	r3, [r4, #12]
   2dbc8:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2dbca:	2800      	cmp	r0, #0
   2dbcc:	d1ec      	bne.n	2dba8 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2dbce:	4620      	mov	r0, r4
   2dbd0:	f7ef fff0 	bl	1dbb4 <bt_gatt_attr_get_handle>
   2dbd4:	3001      	adds	r0, #1
   2dbd6:	b280      	uxth	r0, r0
	return handle;
   2dbd8:	e7e6      	b.n	2dba8 <bt_gatt_attr_value_handle+0x8>

0002dbda <bt_gatt_attr_read_chrc>:
{
   2dbda:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2dbdc:	68cc      	ldr	r4, [r1, #12]
{
   2dbde:	b087      	sub	sp, #28
   2dbe0:	4608      	mov	r0, r1
   2dbe2:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   2dbe4:	79a3      	ldrb	r3, [r4, #6]
   2dbe6:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2dbea:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2dbee:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2dbf0:	f7ff ffd6 	bl	2dba0 <bt_gatt_attr_value_handle>
   2dbf4:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2dbf8:	6821      	ldr	r1, [r4, #0]
   2dbfa:	780b      	ldrb	r3, [r1, #0]
   2dbfc:	b99b      	cbnz	r3, 2dc26 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2dbfe:	884b      	ldrh	r3, [r1, #2]
   2dc00:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2dc04:	2405      	movs	r4, #5
	if (offset > value_len) {
   2dc06:	42b4      	cmp	r4, r6
   2dc08:	d315      	bcc.n	2dc36 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2dc0a:	1ba4      	subs	r4, r4, r6
   2dc0c:	42bc      	cmp	r4, r7
   2dc0e:	bfa8      	it	ge
   2dc10:	463c      	movge	r4, r7
   2dc12:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2dc14:	ab01      	add	r3, sp, #4
   2dc16:	4622      	mov	r2, r4
   2dc18:	1999      	adds	r1, r3, r6
   2dc1a:	4628      	mov	r0, r5
   2dc1c:	f7fe fb5f 	bl	2c2de <memcpy>
}
   2dc20:	4620      	mov	r0, r4
   2dc22:	b007      	add	sp, #28
   2dc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2dc26:	2210      	movs	r2, #16
   2dc28:	3101      	adds	r1, #1
   2dc2a:	f10d 0007 	add.w	r0, sp, #7
   2dc2e:	f7fe fb56 	bl	2c2de <memcpy>
		value_len += 16U;
   2dc32:	2413      	movs	r4, #19
   2dc34:	e7e7      	b.n	2dc06 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2dc36:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2dc3a:	e7f1      	b.n	2dc20 <bt_gatt_attr_read_chrc+0x46>

0002dc3c <bt_gatt_foreach_attr>:
{
   2dc3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2dc3e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2dc42:	2300      	movs	r3, #0
   2dc44:	9300      	str	r3, [sp, #0]
   2dc46:	461a      	mov	r2, r3
   2dc48:	f7ef ffe4 	bl	1dc14 <bt_gatt_foreach_attr_type>
}
   2dc4c:	b005      	add	sp, #20
   2dc4e:	f85d fb04 	ldr.w	pc, [sp], #4

0002dc52 <db_hash_process>:
	do_db_hash();
   2dc52:	f7f0 b8bd 	b.w	1ddd0 <do_db_hash>

0002dc56 <bt_gatt_check_perm>:
{
   2dc56:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2dc58:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2dc5a:	8a4b      	ldrh	r3, [r1, #18]
{
   2dc5c:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   2dc5e:	d504      	bpl.n	2dc6a <bt_gatt_check_perm+0x14>
   2dc60:	f013 0f95 	tst.w	r3, #149	; 0x95
   2dc64:	d02b      	beq.n	2dcbe <bt_gatt_check_perm+0x68>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2dc66:	6848      	ldr	r0, [r1, #4]
   2dc68:	b348      	cbz	r0, 2dcbe <bt_gatt_check_perm+0x68>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2dc6a:	0790      	lsls	r0, r2, #30
   2dc6c:	d504      	bpl.n	2dc78 <bt_gatt_check_perm+0x22>
   2dc6e:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2dc72:	d026      	beq.n	2dcc2 <bt_gatt_check_perm+0x6c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2dc74:	6889      	ldr	r1, [r1, #8]
   2dc76:	b321      	cbz	r1, 2dcc2 <bt_gatt_check_perm+0x6c>
	mask &= attr->perm;
   2dc78:	ea02 0403 	and.w	r4, r2, r3
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   2dc7c:	f014 0f3c 	tst.w	r4, #60	; 0x3c
   2dc80:	d00d      	beq.n	2dc9e <bt_gatt_check_perm+0x48>
		if (!conn->encrypt) {
   2dc82:	7aeb      	ldrb	r3, [r5, #11]
   2dc84:	b92b      	cbnz	r3, 2dc92 <bt_gatt_check_perm+0x3c>
			if (bt_conn_ltk_present(conn)) {
   2dc86:	4628      	mov	r0, r5
   2dc88:	f7fe ffff 	bl	2cc8a <bt_conn_ltk_present>
   2dc8c:	b9d8      	cbnz	r0, 2dcc6 <bt_gatt_check_perm+0x70>
				return BT_ATT_ERR_AUTHENTICATION;
   2dc8e:	2005      	movs	r0, #5
}
   2dc90:	bd38      	pop	{r3, r4, r5, pc}
		if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2dc92:	f014 0f30 	tst.w	r4, #48	; 0x30
   2dc96:	d104      	bne.n	2dca2 <bt_gatt_check_perm+0x4c>
		if (mask & BT_GATT_PERM_LESC_MASK) {
   2dc98:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2dc9c:	d107      	bne.n	2dcae <bt_gatt_check_perm+0x58>
	return 0;
   2dc9e:	2000      	movs	r0, #0
   2dca0:	e7f6      	b.n	2dc90 <bt_gatt_check_perm+0x3a>
			if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2dca2:	4628      	mov	r0, r5
   2dca4:	f7ff f838 	bl	2cd18 <bt_conn_get_security>
   2dca8:	2802      	cmp	r0, #2
   2dcaa:	d8f5      	bhi.n	2dc98 <bt_gatt_check_perm+0x42>
   2dcac:	e7ef      	b.n	2dc8e <bt_gatt_check_perm+0x38>
			const struct bt_keys *keys = conn->le.keys;
   2dcae:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
			if (!keys || (keys->flags & BT_KEYS_SC) == 0) {
   2dcb2:	2b00      	cmp	r3, #0
   2dcb4:	d0eb      	beq.n	2dc8e <bt_gatt_check_perm+0x38>
   2dcb6:	7b5b      	ldrb	r3, [r3, #13]
   2dcb8:	06db      	lsls	r3, r3, #27
   2dcba:	d5e8      	bpl.n	2dc8e <bt_gatt_check_perm+0x38>
   2dcbc:	e7ef      	b.n	2dc9e <bt_gatt_check_perm+0x48>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2dcbe:	2002      	movs	r0, #2
   2dcc0:	e7e6      	b.n	2dc90 <bt_gatt_check_perm+0x3a>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2dcc2:	2003      	movs	r0, #3
   2dcc4:	e7e4      	b.n	2dc90 <bt_gatt_check_perm+0x3a>
				return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2dcc6:	200f      	movs	r0, #15
   2dcc8:	e7e2      	b.n	2dc90 <bt_gatt_check_perm+0x3a>

0002dcca <bt_gatt_is_subscribed>:
{
   2dcca:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2dcce:	7b43      	ldrb	r3, [r0, #13]
   2dcd0:	2b07      	cmp	r3, #7
{
   2dcd2:	4605      	mov	r5, r0
   2dcd4:	460c      	mov	r4, r1
   2dcd6:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2dcd8:	d110      	bne.n	2dcfc <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2dcda:	2300      	movs	r3, #0
   2dcdc:	f88d 300c 	strb.w	r3, [sp, #12]
   2dce0:	6820      	ldr	r0, [r4, #0]
   2dce2:	f642 0303 	movw	r3, #10243	; 0x2803
   2dce6:	a903      	add	r1, sp, #12
   2dce8:	f8ad 300e 	strh.w	r3, [sp, #14]
   2dcec:	f7fe fb8e 	bl	2c40c <bt_uuid_cmp>
   2dcf0:	b960      	cbnz	r0, 2dd0c <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   2dcf2:	68e3      	ldr	r3, [r4, #12]
   2dcf4:	799b      	ldrb	r3, [r3, #6]
   2dcf6:	f013 0f30 	tst.w	r3, #48	; 0x30
   2dcfa:	d103      	bne.n	2dd04 <bt_gatt_is_subscribed+0x3a>
		return false;
   2dcfc:	2000      	movs	r0, #0
}
   2dcfe:	b004      	add	sp, #16
   2dd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   2dd04:	4620      	mov	r0, r4
   2dd06:	f7f0 f941 	bl	1df8c <bt_gatt_attr_next>
   2dd0a:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2dd0c:	2300      	movs	r3, #0
   2dd0e:	6820      	ldr	r0, [r4, #0]
   2dd10:	f88d 300c 	strb.w	r3, [sp, #12]
   2dd14:	a903      	add	r1, sp, #12
   2dd16:	f642 1302 	movw	r3, #10498	; 0x2902
   2dd1a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2dd1e:	f7fe fb75 	bl	2c40c <bt_uuid_cmp>
   2dd22:	b118      	cbz	r0, 2dd2c <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   2dd24:	4620      	mov	r0, r4
   2dd26:	f7f0 f931 	bl	1df8c <bt_gatt_attr_next>
   2dd2a:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2dd2c:	2600      	movs	r6, #0
   2dd2e:	f642 1802 	movw	r8, #10498	; 0x2902
   2dd32:	6820      	ldr	r0, [r4, #0]
   2dd34:	f88d 6000 	strb.w	r6, [sp]
   2dd38:	4669      	mov	r1, sp
   2dd3a:	f8ad 8002 	strh.w	r8, [sp, #2]
   2dd3e:	f7fe fb65 	bl	2c40c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2dd42:	b9d8      	cbnz	r0, 2dd7c <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2dd44:	2300      	movs	r3, #0
   2dd46:	6820      	ldr	r0, [r4, #0]
   2dd48:	f88d 300c 	strb.w	r3, [sp, #12]
   2dd4c:	a903      	add	r1, sp, #12
   2dd4e:	f642 1302 	movw	r3, #10498	; 0x2902
   2dd52:	f8ad 300e 	strh.w	r3, [sp, #14]
   2dd56:	f7fe fb59 	bl	2c40c <bt_uuid_cmp>
   2dd5a:	2800      	cmp	r0, #0
   2dd5c:	d1ce      	bne.n	2dcfc <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   2dd5e:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2dd60:	4622      	mov	r2, r4
   2dd62:	4628      	mov	r0, r5
   2dd64:	f812 1b01 	ldrb.w	r1, [r2], #1
   2dd68:	f7fe ffd8 	bl	2cd1c <bt_conn_is_peer_addr_le>
   2dd6c:	2800      	cmp	r0, #0
   2dd6e:	d0c5      	beq.n	2dcfc <bt_gatt_is_subscribed+0x32>
   2dd70:	8923      	ldrh	r3, [r4, #8]
   2dd72:	421f      	tst	r7, r3
   2dd74:	bf14      	ite	ne
   2dd76:	2001      	movne	r0, #1
   2dd78:	2000      	moveq	r0, #0
   2dd7a:	e7c0      	b.n	2dcfe <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2dd7c:	6820      	ldr	r0, [r4, #0]
   2dd7e:	f88d 6004 	strb.w	r6, [sp, #4]
   2dd82:	f642 0303 	movw	r3, #10243	; 0x2803
   2dd86:	a901      	add	r1, sp, #4
   2dd88:	f8ad 3006 	strh.w	r3, [sp, #6]
   2dd8c:	f7fe fb3e 	bl	2c40c <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2dd90:	2800      	cmp	r0, #0
   2dd92:	d0d7      	beq.n	2dd44 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2dd94:	6820      	ldr	r0, [r4, #0]
   2dd96:	f88d 6008 	strb.w	r6, [sp, #8]
   2dd9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2dd9e:	a902      	add	r1, sp, #8
   2dda0:	f8ad 300a 	strh.w	r3, [sp, #10]
   2dda4:	f7fe fb32 	bl	2c40c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2dda8:	2800      	cmp	r0, #0
   2ddaa:	d0cb      	beq.n	2dd44 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2ddac:	6820      	ldr	r0, [r4, #0]
   2ddae:	f88d 600c 	strb.w	r6, [sp, #12]
   2ddb2:	f642 0301 	movw	r3, #10241	; 0x2801
   2ddb6:	a903      	add	r1, sp, #12
   2ddb8:	f8ad 300e 	strh.w	r3, [sp, #14]
   2ddbc:	f7fe fb26 	bl	2c40c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2ddc0:	2800      	cmp	r0, #0
   2ddc2:	d0bf      	beq.n	2dd44 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   2ddc4:	4620      	mov	r0, r4
   2ddc6:	f7f0 f8e1 	bl	1df8c <bt_gatt_attr_next>
		if (!attr) {
   2ddca:	4604      	mov	r4, r0
   2ddcc:	2800      	cmp	r0, #0
   2ddce:	d1b0      	bne.n	2dd32 <bt_gatt_is_subscribed+0x68>
   2ddd0:	e794      	b.n	2dcfc <bt_gatt_is_subscribed+0x32>

0002ddd2 <bt_gatt_change_aware>:
{
   2ddd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ddd6:	4605      	mov	r5, r0
   2ddd8:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   2ddda:	f7ef f8fd 	bl	1cfd8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2ddde:	4604      	mov	r4, r0
   2dde0:	b1e0      	cbz	r0, 2de1c <bt_gatt_change_aware+0x4a>
   2dde2:	7a03      	ldrb	r3, [r0, #8]
   2dde4:	07db      	lsls	r3, r3, #31
   2dde6:	d519      	bpl.n	2de1c <bt_gatt_change_aware+0x4a>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2dde8:	f100 070c 	add.w	r7, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ddec:	4638      	mov	r0, r7
   2ddee:	f7ff fdbf 	bl	2d970 <atomic_get>
   2ddf2:	f010 0601 	ands.w	r6, r0, #1
   2ddf6:	d111      	bne.n	2de1c <bt_gatt_change_aware+0x4a>
	if (!req) {
   2ddf8:	f1b8 0f00 	cmp.w	r8, #0
   2ddfc:	d00f      	beq.n	2de1e <bt_gatt_change_aware+0x4c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ddfe:	f06f 0102 	mvn.w	r1, #2
   2de02:	4638      	mov	r0, r7
   2de04:	f7ff fda2 	bl	2d94c <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2de08:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2de0c:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2de0e:	d009      	beq.n	2de24 <bt_gatt_change_aware+0x52>
		bt_att_clear_out_of_sync_sent(conn);
   2de10:	f7ff fcdc 	bl	2d7cc <bt_att_clear_out_of_sync_sent>
		set_change_aware(cfg, true);
   2de14:	2101      	movs	r1, #1
   2de16:	4620      	mov	r0, r4
   2de18:	f7ff fe7a 	bl	2db10 <set_change_aware>
		return true;
   2de1c:	2601      	movs	r6, #1
}
   2de1e:	4630      	mov	r0, r6
   2de20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2de24:	f7ff fcd0 	bl	2d7c8 <bt_att_fixed_chan_only>
   2de28:	2800      	cmp	r0, #0
   2de2a:	d0f8      	beq.n	2de1e <bt_gatt_change_aware+0x4c>
   2de2c:	4628      	mov	r0, r5
   2de2e:	f7ff fcdd 	bl	2d7ec <bt_att_out_of_sync_sent_on_fixed>
   2de32:	2800      	cmp	r0, #0
   2de34:	d0f3      	beq.n	2de1e <bt_gatt_change_aware+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2de36:	f06f 0102 	mvn.w	r1, #2
   2de3a:	4638      	mov	r0, r7
   2de3c:	f7ff fd86 	bl	2d94c <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2de40:	4628      	mov	r0, r5
   2de42:	e7e5      	b.n	2de10 <bt_gatt_change_aware+0x3e>

0002de44 <delayed_store>:
{
   2de44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2de46:	f1a0 0447 	sub.w	r4, r0, #71	; 0x47
   2de4a:	1c47      	adds	r7, r0, #1
		if (bt_addr_le_is_bonded(el->id, &el->peer)) {
   2de4c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2de50:	4621      	mov	r1, r4
   2de52:	f7fe fc49 	bl	2c6e8 <bt_addr_le_is_bonded>
   2de56:	b380      	cbz	r0, 2deba <delayed_store+0x76>
			    atomic_test_and_clear_bit(el->flags, DELAYED_STORE_CCC)) {
   2de58:	1de6      	adds	r6, r4, #7
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2de5a:	f06f 0101 	mvn.w	r1, #1
   2de5e:	4630      	mov	r0, r6
   2de60:	f7ff fd74 	bl	2d94c <atomic_and>
			if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE) &&
   2de64:	07c2      	lsls	r2, r0, #31
   2de66:	d504      	bpl.n	2de72 <delayed_store+0x2e>
				bt_gatt_store_ccc(el->id, &el->peer);
   2de68:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2de6c:	4621      	mov	r1, r4
   2de6e:	f7f0 fc49 	bl	1e704 <bt_gatt_store_ccc>
   2de72:	f06f 0102 	mvn.w	r1, #2
   2de76:	4630      	mov	r0, r6
   2de78:	f7ff fd68 	bl	2d94c <atomic_and>
			if (IS_ENABLED(CONFIG_BT_SETTINGS_CF_STORE_ON_WRITE) &&
   2de7c:	0783      	lsls	r3, r0, #30
   2de7e:	d504      	bpl.n	2de8a <delayed_store+0x46>
				bt_gatt_store_cf(el->id, &el->peer);
   2de80:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2de84:	4621      	mov	r1, r4
   2de86:	f7ef fb79 	bl	1d57c <bt_gatt_store_cf.isra.0>
			if (atomic_get(el->flags) == 0) {
   2de8a:	4630      	mov	r0, r6
   2de8c:	f7ff fd70 	bl	2d970 <atomic_get>
   2de90:	4605      	mov	r5, r0
   2de92:	b990      	cbnz	r0, 2deba <delayed_store+0x76>
	if (el) {
   2de94:	2c01      	cmp	r4, #1
   2de96:	d010      	beq.n	2deba <delayed_store+0x76>
		el->id = 0;
   2de98:	f804 0c01 	strb.w	r0, [r4, #-1]
		memset(&el->peer, 0, sizeof(el->peer));
   2de9c:	4601      	mov	r1, r0
   2de9e:	2207      	movs	r2, #7
   2dea0:	4620      	mov	r0, r4
   2dea2:	f7fe fa27 	bl	2c2f4 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2dea6:	f3bf 8f5b 	dmb	ish
   2deaa:	e856 3f00 	ldrex	r3, [r6]
   2deae:	e846 5200 	strex	r2, r5, [r6]
   2deb2:	2a00      	cmp	r2, #0
   2deb4:	d1f9      	bne.n	2deaa <delayed_store+0x66>
   2deb6:	f3bf 8f5b 	dmb	ish
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   2deba:	340c      	adds	r4, #12
   2debc:	42bc      	cmp	r4, r7
   2debe:	d1c5      	bne.n	2de4c <delayed_store+0x8>
}
   2dec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002dec2 <bt_gatt_pairing_complete>:
{
   2dec2:	b538      	push	{r3, r4, r5, lr}
   2dec4:	4604      	mov	r4, r0
	if (bonded) {
   2dec6:	b159      	cbz	r1, 2dee0 <bt_gatt_pairing_complete+0x1e>
		bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   2dec8:	f100 0588 	add.w	r5, r0, #136	; 0x88
   2decc:	4629      	mov	r1, r5
   2dece:	7a00      	ldrb	r0, [r0, #8]
   2ded0:	f7f0 fc18 	bl	1e704 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn->id, &conn->le.dst);
   2ded4:	7a20      	ldrb	r0, [r4, #8]
   2ded6:	4629      	mov	r1, r5
}
   2ded8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_store_cf(conn->id, &conn->le.dst);
   2dedc:	f7ef bb4e 	b.w	1d57c <bt_gatt_store_cf.isra.0>
}
   2dee0:	bd38      	pop	{r3, r4, r5, pc}

0002dee2 <smp_pairing_rsp>:
}
   2dee2:	2007      	movs	r0, #7
   2dee4:	4770      	bx	lr

0002dee6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2dee6:	f3bf 8f5b 	dmb	ish
   2deea:	6800      	ldr	r0, [r0, #0]
   2deec:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2def0:	4108      	asrs	r0, r1
}
   2def2:	f000 0001 	and.w	r0, r0, #1
   2def6:	4770      	bx	lr

0002def8 <update_keys_check>:
{
   2def8:	b510      	push	{r4, lr}
   2defa:	4603      	mov	r3, r0
	if (!keys ||
   2defc:	b1d9      	cbz	r1, 2df36 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2defe:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2df00:	f010 0f24 	tst.w	r0, #36	; 0x24
   2df04:	d017      	beq.n	2df36 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2df06:	7d1a      	ldrb	r2, [r3, #20]
   2df08:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2df0a:	7b09      	ldrb	r1, [r1, #12]
   2df0c:	42a2      	cmp	r2, r4
   2df0e:	bf28      	it	cs
   2df10:	4622      	movcs	r2, r4
   2df12:	4291      	cmp	r1, r2
   2df14:	d901      	bls.n	2df1a <update_keys_check+0x22>
			return false;
   2df16:	2000      	movs	r0, #0
}
   2df18:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2df1a:	0682      	lsls	r2, r0, #26
   2df1c:	d404      	bmi.n	2df28 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2df1e:	7a18      	ldrb	r0, [r3, #8]
   2df20:	3800      	subs	r0, #0
   2df22:	bf18      	it	ne
   2df24:	2001      	movne	r0, #1
   2df26:	e7f7      	b.n	2df18 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2df28:	2105      	movs	r1, #5
   2df2a:	1d18      	adds	r0, r3, #4
   2df2c:	f7ff ffdb 	bl	2dee6 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2df30:	2800      	cmp	r0, #0
   2df32:	d1f4      	bne.n	2df1e <update_keys_check+0x26>
   2df34:	e7ef      	b.n	2df16 <update_keys_check+0x1e>
	return true;
   2df36:	2001      	movs	r0, #1
   2df38:	e7ee      	b.n	2df18 <update_keys_check+0x20>

0002df3a <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2df3a:	2301      	movs	r3, #1
   2df3c:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2df3e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2df40:	f3bf 8f5b 	dmb	ish
   2df44:	e850 2f00 	ldrex	r2, [r0]
   2df48:	401a      	ands	r2, r3
   2df4a:	e840 2100 	strex	r1, r2, [r0]
   2df4e:	2900      	cmp	r1, #0
   2df50:	d1f8      	bne.n	2df44 <atomic_clear_bit+0xa>
   2df52:	f3bf 8f5b 	dmb	ish
}
   2df56:	4770      	bx	lr

0002df58 <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   2df58:	2007      	movs	r0, #7
   2df5a:	4770      	bx	lr

0002df5c <z_log_msg_static_create.constprop.0>:
   2df5c:	2300      	movs	r3, #0
   2df5e:	f7e6 be31 	b.w	14bc4 <z_impl_z_log_msg_static_create>

0002df62 <smp_chan_get>:
{
   2df62:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2df64:	2106      	movs	r1, #6
   2df66:	f7fe ffb3 	bl	2ced0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2df6a:	b918      	cbnz	r0, 2df74 <smp_chan_get+0x12>
}
   2df6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2df70:	f7f0 bdc2 	b.w	1eaf8 <smp_chan_get.part.0>
   2df74:	38ec      	subs	r0, #236	; 0xec
   2df76:	bd08      	pop	{r3, pc}

0002df78 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2df78:	2301      	movs	r3, #1
   2df7a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2df7c:	f3bf 8f5b 	dmb	ish
   2df80:	e850 2f00 	ldrex	r2, [r0]
   2df84:	431a      	orrs	r2, r3
   2df86:	e840 2100 	strex	r1, r2, [r0]
   2df8a:	2900      	cmp	r1, #0
   2df8c:	d1f8      	bne.n	2df80 <atomic_set_bit+0x8>
   2df8e:	f3bf 8f5b 	dmb	ish
}
   2df92:	4770      	bx	lr

0002df94 <smp_keypress_notif>:
{
   2df94:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2df96:	210e      	movs	r1, #14
   2df98:	f7ff ffee 	bl	2df78 <atomic_set_bit>
}
   2df9c:	2000      	movs	r0, #0
   2df9e:	bd08      	pop	{r3, pc}

0002dfa0 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2dfa0:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2dfa2:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2dfa4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2dfa6:	4628      	mov	r0, r5
   2dfa8:	2104      	movs	r1, #4
   2dfaa:	f7ff ff9c 	bl	2dee6 <atomic_test_bit>
   2dfae:	b168      	cbz	r0, 2dfcc <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2dfb0:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2dfb2:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2dfb4:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2dfb6:	4608      	mov	r0, r1
   2dfb8:	f7fe ff64 	bl	2ce84 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2dfbc:	4604      	mov	r4, r0
   2dfbe:	b940      	cbnz	r0, 2dfd2 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2dfc0:	2104      	movs	r1, #4
   2dfc2:	4628      	mov	r0, r5
   2dfc4:	f7ff ffd8 	bl	2df78 <atomic_set_bit>
}
   2dfc8:	4620      	mov	r0, r4
   2dfca:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2dfcc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2dfd0:	e7ef      	b.n	2dfb2 <smp_create_pdu.constprop.0+0x12>
   2dfd2:	2101      	movs	r1, #1
   2dfd4:	300c      	adds	r0, #12
   2dfd6:	f000 fb94 	bl	2e702 <net_buf_simple_add>
	hdr->code = op;
   2dfda:	7006      	strb	r6, [r0, #0]
	return buf;
   2dfdc:	e7f4      	b.n	2dfc8 <smp_create_pdu.constprop.0+0x28>

0002dfde <send_pairing_rsp>:
{
   2dfde:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2dfe0:	2102      	movs	r1, #2
{
   2dfe2:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2dfe4:	f7ff ffdc 	bl	2dfa0 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2dfe8:	4604      	mov	r4, r0
   2dfea:	b178      	cbz	r0, 2e00c <send_pairing_rsp+0x2e>
   2dfec:	2106      	movs	r1, #6
   2dfee:	300c      	adds	r0, #12
   2dff0:	f000 fb87 	bl	2e702 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2dff4:	2206      	movs	r2, #6
   2dff6:	f105 0111 	add.w	r1, r5, #17
   2dffa:	f7fe f970 	bl	2c2de <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2dffe:	4628      	mov	r0, r5
   2e000:	2200      	movs	r2, #0
   2e002:	4621      	mov	r1, r4
   2e004:	f7f0 fd0e 	bl	1ea24 <smp_send.constprop.0>
	return 0;
   2e008:	2000      	movs	r0, #0
}
   2e00a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2e00c:	2008      	movs	r0, #8
   2e00e:	e7fc      	b.n	2e00a <send_pairing_rsp+0x2c>

0002e010 <smp_send_pairing_random>:
{
   2e010:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2e012:	2104      	movs	r1, #4
{
   2e014:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2e016:	f7ff ffc3 	bl	2dfa0 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2e01a:	4604      	mov	r4, r0
   2e01c:	b178      	cbz	r0, 2e03e <smp_send_pairing_random+0x2e>
   2e01e:	2110      	movs	r1, #16
   2e020:	300c      	adds	r0, #12
   2e022:	f000 fb6e 	bl	2e702 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2e026:	2210      	movs	r2, #16
   2e028:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2e02c:	f7fe f957 	bl	2c2de <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2e030:	4628      	mov	r0, r5
   2e032:	2200      	movs	r2, #0
   2e034:	4621      	mov	r1, r4
   2e036:	f7f0 fcf5 	bl	1ea24 <smp_send.constprop.0>
	return 0;
   2e03a:	2000      	movs	r0, #0
}
   2e03c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2e03e:	2008      	movs	r0, #8
   2e040:	e7fc      	b.n	2e03c <smp_send_pairing_random+0x2c>

0002e042 <smp_dhkey_check>:
{
   2e042:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2e044:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2e048:	78db      	ldrb	r3, [r3, #3]
   2e04a:	2b01      	cmp	r3, #1
{
   2e04c:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2e04e:	d114      	bne.n	2e07a <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2e050:	68ce      	ldr	r6, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2e052:	1d05      	adds	r5, r0, #4
   2e054:	2110      	movs	r1, #16
   2e056:	4628      	mov	r0, r5
   2e058:	f7ff ff6f 	bl	2df3a <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   2e05c:	4631      	mov	r1, r6
   2e05e:	2210      	movs	r2, #16
   2e060:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2e064:	f7fe f93b 	bl	2c2de <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2e068:	2107      	movs	r1, #7
   2e06a:	4628      	mov	r0, r5
   2e06c:	f7ff ff3b 	bl	2dee6 <atomic_test_bit>
   2e070:	b128      	cbz	r0, 2e07e <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2e072:	2109      	movs	r1, #9
   2e074:	4628      	mov	r0, r5
   2e076:	f7ff ff7f 	bl	2df78 <atomic_set_bit>
}
   2e07a:	2000      	movs	r0, #0
   2e07c:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2e07e:	210a      	movs	r1, #10
   2e080:	4628      	mov	r0, r5
   2e082:	f7ff ff30 	bl	2dee6 <atomic_test_bit>
   2e086:	2800      	cmp	r0, #0
   2e088:	d1f3      	bne.n	2e072 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2e08a:	4620      	mov	r0, r4
}
   2e08c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2e090:	f7f1 b940 	b.w	1f314 <compute_and_check_and_send_periph_dhcheck>

0002e094 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2e094:	2007      	movs	r0, #7
   2e096:	4770      	bx	lr

0002e098 <atomic_test_and_clear_bit>:
{
   2e098:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e09a:	2301      	movs	r3, #1
   2e09c:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e0a0:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e0a2:	f3bf 8f5b 	dmb	ish
   2e0a6:	e850 3f00 	ldrex	r3, [r0]
   2e0aa:	ea03 0402 	and.w	r4, r3, r2
   2e0ae:	e840 4500 	strex	r5, r4, [r0]
   2e0b2:	2d00      	cmp	r5, #0
   2e0b4:	d1f7      	bne.n	2e0a6 <atomic_test_and_clear_bit+0xe>
   2e0b6:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2e0ba:	4219      	tst	r1, r3
}
   2e0bc:	bf14      	ite	ne
   2e0be:	2001      	movne	r0, #1
   2e0c0:	2000      	moveq	r0, #0
   2e0c2:	bd30      	pop	{r4, r5, pc}

0002e0c4 <smp_reset>:
{
   2e0c4:	b538      	push	{r3, r4, r5, lr}
   2e0c6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2e0c8:	1d03      	adds	r3, r0, #4
   2e0ca:	2500      	movs	r5, #0
   2e0cc:	f3bf 8f5b 	dmb	ish
   2e0d0:	e853 2f00 	ldrex	r2, [r3]
   2e0d4:	e843 5100 	strex	r1, r5, [r3]
   2e0d8:	2900      	cmp	r1, #0
   2e0da:	d1f9      	bne.n	2e0d0 <smp_reset+0xc>
   2e0dc:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2e0e0:	f504 7090 	add.w	r0, r4, #288	; 0x120
   2e0e4:	f001 fb6a 	bl	2f7bc <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2e0e8:	7225      	strb	r5, [r4, #8]
   2e0ea:	f3bf 8f5b 	dmb	ish
   2e0ee:	e854 3f00 	ldrex	r3, [r4]
   2e0f2:	e844 5200 	strex	r2, r5, [r4]
   2e0f6:	2a00      	cmp	r2, #0
   2e0f8:	d1f9      	bne.n	2e0ee <smp_reset+0x2a>
   2e0fa:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2e0fe:	4620      	mov	r0, r4
   2e100:	2101      	movs	r1, #1
}
   2e102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2e106:	f7ff bf37 	b.w	2df78 <atomic_set_bit>

0002e10a <smp_c1>:
{
   2e10a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e10e:	b089      	sub	sp, #36	; 0x24
   2e110:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2e114:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2e116:	783b      	ldrb	r3, [r7, #0]
{
   2e118:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2e11a:	f88d 3000 	strb.w	r3, [sp]
{
   2e11e:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2e120:	f898 3000 	ldrb.w	r3, [r8]
   2e124:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2e128:	4611      	mov	r1, r2
   2e12a:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2e12c:	2207      	movs	r2, #7
   2e12e:	f10d 0002 	add.w	r0, sp, #2
   2e132:	f7fe f8d4 	bl	2c2de <memcpy>
	memcpy(p1 + 9, pres, 7);
   2e136:	2207      	movs	r2, #7
   2e138:	4649      	mov	r1, r9
   2e13a:	f10d 0009 	add.w	r0, sp, #9
   2e13e:	f7fe f8ce 	bl	2c2de <memcpy>
	while (len--) {
   2e142:	f104 0010 	add.w	r0, r4, #16
	memcpy(p1 + 9, pres, 7);
   2e146:	462a      	mov	r2, r5
   2e148:	4669      	mov	r1, sp
		*r++ = *p++ ^ *q++;
   2e14a:	f814 3b01 	ldrb.w	r3, [r4], #1
   2e14e:	f811 cb01 	ldrb.w	ip, [r1], #1
	while (len--) {
   2e152:	4284      	cmp	r4, r0
		*r++ = *p++ ^ *q++;
   2e154:	ea83 030c 	eor.w	r3, r3, ip
   2e158:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2e15c:	d1f5      	bne.n	2e14a <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2e15e:	462a      	mov	r2, r5
   2e160:	4629      	mov	r1, r5
   2e162:	4630      	mov	r0, r6
   2e164:	f000 fefc 	bl	2ef60 <bt_encrypt_le>
	if (err) {
   2e168:	4604      	mov	r4, r0
   2e16a:	bb20      	cbnz	r0, 2e1b6 <smp_c1+0xac>
	memcpy(p2, ra->a.val, 6);
   2e16c:	2206      	movs	r2, #6
   2e16e:	f108 0101 	add.w	r1, r8, #1
   2e172:	a804      	add	r0, sp, #16
   2e174:	f7fe f8b3 	bl	2c2de <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2e178:	2206      	movs	r2, #6
   2e17a:	1c79      	adds	r1, r7, #1
   2e17c:	f10d 0016 	add.w	r0, sp, #22
   2e180:	f7fe f8ad 	bl	2c2de <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2e184:	2204      	movs	r2, #4
   2e186:	4621      	mov	r1, r4
   2e188:	a807      	add	r0, sp, #28
   2e18a:	f7fe f8b3 	bl	2c2f4 <memset>
	while (len--) {
   2e18e:	f105 0010 	add.w	r0, r5, #16
	(void)memset(p2 + 12, 0, 4);
   2e192:	462a      	mov	r2, r5
   2e194:	ab04      	add	r3, sp, #16
		*r++ = *p++ ^ *q++;
   2e196:	f812 1b01 	ldrb.w	r1, [r2], #1
   2e19a:	f813 4b01 	ldrb.w	r4, [r3], #1
	while (len--) {
   2e19e:	4282      	cmp	r2, r0
		*r++ = *p++ ^ *q++;
   2e1a0:	ea81 0104 	eor.w	r1, r1, r4
   2e1a4:	f802 1c01 	strb.w	r1, [r2, #-1]
	while (len--) {
   2e1a8:	d1f5      	bne.n	2e196 <smp_c1+0x8c>
	return bt_encrypt_le(k, enc_data, enc_data);
   2e1aa:	462a      	mov	r2, r5
   2e1ac:	4629      	mov	r1, r5
   2e1ae:	4630      	mov	r0, r6
   2e1b0:	f000 fed6 	bl	2ef60 <bt_encrypt_le>
   2e1b4:	4604      	mov	r4, r0
}
   2e1b6:	4620      	mov	r0, r4
   2e1b8:	b009      	add	sp, #36	; 0x24
   2e1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002e1be <legacy_pairing_confirm>:
{
   2e1be:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2e1c0:	1d07      	adds	r7, r0, #4
{
   2e1c2:	b085      	sub	sp, #20
   2e1c4:	4604      	mov	r4, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2e1c6:	210a      	movs	r1, #10
   2e1c8:	4638      	mov	r0, r7
   2e1ca:	f7ff fe8c 	bl	2dee6 <atomic_test_bit>
   2e1ce:	bb88      	cbnz	r0, 2e234 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2e1d0:	2104      	movs	r1, #4
   2e1d2:	4620      	mov	r0, r4
   2e1d4:	f7ff fed0 	bl	2df78 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2e1d8:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2e1da:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2e1de:	f7ff fedf 	bl	2dfa0 <smp_create_pdu.constprop.0>
	if (!buf) {
   2e1e2:	4605      	mov	r5, r0
   2e1e4:	b1c0      	cbz	r0, 2e218 <legacy_pairing_confirm+0x5a>
   2e1e6:	2110      	movs	r1, #16
   2e1e8:	300c      	adds	r0, #12
   2e1ea:	f000 fa8a 	bl	2e702 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2e1ee:	f106 0396 	add.w	r3, r6, #150	; 0x96
   2e1f2:	368f      	adds	r6, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2e1f4:	9002      	str	r0, [sp, #8]
   2e1f6:	9301      	str	r3, [sp, #4]
   2e1f8:	9600      	str	r6, [sp, #0]
   2e1fa:	f104 0310 	add.w	r3, r4, #16
   2e1fe:	f104 0209 	add.w	r2, r4, #9
   2e202:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2e206:	f104 0047 	add.w	r0, r4, #71	; 0x47
   2e20a:	f7ff ff7e 	bl	2e10a <smp_c1>
   2e20e:	4606      	mov	r6, r0
   2e210:	b128      	cbz	r0, 2e21e <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   2e212:	4628      	mov	r0, r5
   2e214:	f7f2 fc96 	bl	20b44 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2e218:	2008      	movs	r0, #8
}
   2e21a:	b005      	add	sp, #20
   2e21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   2e21e:	4602      	mov	r2, r0
   2e220:	4629      	mov	r1, r5
   2e222:	4620      	mov	r0, r4
   2e224:	f7f0 fbfe 	bl	1ea24 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2e228:	4631      	mov	r1, r6
   2e22a:	4638      	mov	r0, r7
   2e22c:	f7ff fe85 	bl	2df3a <atomic_clear_bit>
	return 0;
   2e230:	2000      	movs	r0, #0
   2e232:	e7f2      	b.n	2e21a <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2e234:	2100      	movs	r1, #0
   2e236:	4638      	mov	r0, r7
   2e238:	f7ff fe9e 	bl	2df78 <atomic_set_bit>
	return 0;
   2e23c:	e7f8      	b.n	2e230 <legacy_pairing_confirm+0x72>

0002e23e <bt_smp_request_ltk>:
{
   2e23e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2e242:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2e244:	e9cd 2300 	strd	r2, r3, [sp]
   2e248:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2e24a:	f7ff fe8a 	bl	2df62 <smp_chan_get>
	if (!smp) {
   2e24e:	4605      	mov	r5, r0
   2e250:	2800      	cmp	r0, #0
   2e252:	d07c      	beq.n	2e34e <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2e254:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2e258:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   2e25a:	f1b8 0f00 	cmp.w	r8, #0
   2e25e:	d128      	bne.n	2e2b2 <bt_smp_request_ltk+0x74>
   2e260:	e9dd 3200 	ldrd	r3, r2, [sp]
   2e264:	4313      	orrs	r3, r2
   2e266:	d124      	bne.n	2e2b2 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2e268:	2103      	movs	r1, #3
   2e26a:	4630      	mov	r0, r6
   2e26c:	f7ff fe3b 	bl	2dee6 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2e270:	b1f8      	cbz	r0, 2e2b2 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2e272:	2101      	movs	r1, #1
   2e274:	4630      	mov	r0, r6
   2e276:	f7ff fe36 	bl	2dee6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2e27a:	b1d0      	cbz	r0, 2e2b2 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   2e27c:	7d2c      	ldrb	r4, [r5, #20]
   2e27e:	7b6b      	ldrb	r3, [r5, #13]
   2e280:	429c      	cmp	r4, r3
   2e282:	bf28      	it	cs
   2e284:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2e286:	4622      	mov	r2, r4
   2e288:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2e28c:	4638      	mov	r0, r7
   2e28e:	f7fe f826 	bl	2c2de <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2e292:	2c0f      	cmp	r4, #15
   2e294:	d805      	bhi.n	2e2a2 <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   2e296:	f1c4 0210 	rsb	r2, r4, #16
   2e29a:	4641      	mov	r1, r8
   2e29c:	1938      	adds	r0, r7, r4
   2e29e:	f7fe f829 	bl	2c2f4 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2e2a2:	4630      	mov	r0, r6
   2e2a4:	2101      	movs	r1, #1
   2e2a6:	f7ff fe67 	bl	2df78 <atomic_set_bit>
		return true;
   2e2aa:	2001      	movs	r0, #1
}
   2e2ac:	b002      	add	sp, #8
   2e2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2e2b2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   2e2b6:	b983      	cbnz	r3, 2e2da <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   2e2b8:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2e2bc:	7a21      	ldrb	r1, [r4, #8]
   2e2be:	4642      	mov	r2, r8
   2e2c0:	2020      	movs	r0, #32
   2e2c2:	f7f2 f911 	bl	204e8 <bt_keys_find>
   2e2c6:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   2e2ca:	b930      	cbnz	r0, 2e2da <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2e2cc:	7a21      	ldrb	r1, [r4, #8]
   2e2ce:	4642      	mov	r2, r8
   2e2d0:	2001      	movs	r0, #1
   2e2d2:	f7f2 f909 	bl	204e8 <bt_keys_find>
   2e2d6:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   2e2da:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2e2de:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   2e2e2:	f1b8 0f00 	cmp.w	r8, #0
   2e2e6:	d10c      	bne.n	2e302 <bt_smp_request_ltk+0xc4>
   2e2e8:	e9dd 3200 	ldrd	r3, r2, [sp]
   2e2ec:	4313      	orrs	r3, r2
   2e2ee:	d108      	bne.n	2e302 <bt_smp_request_ltk+0xc4>
   2e2f0:	b300      	cbz	r0, 2e334 <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2e2f2:	89c3      	ldrh	r3, [r0, #14]
   2e2f4:	069a      	lsls	r2, r3, #26
   2e2f6:	d505      	bpl.n	2e304 <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   2e2f8:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2e2fa:	f100 011a 	add.w	r1, r0, #26
   2e2fe:	4622      	mov	r2, r4
   2e300:	e7c4      	b.n	2e28c <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2e302:	b1b8      	cbz	r0, 2e334 <bt_smp_request_ltk+0xf6>
   2e304:	89c3      	ldrh	r3, [r0, #14]
   2e306:	07db      	lsls	r3, r3, #31
   2e308:	d514      	bpl.n	2e334 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2e30a:	2208      	movs	r2, #8
   2e30c:	4669      	mov	r1, sp
   2e30e:	3040      	adds	r0, #64	; 0x40
   2e310:	f7fd ffbe 	bl	2c290 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2e314:	b970      	cbnz	r0, 2e334 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2e316:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   2e31a:	2202      	movs	r2, #2
   2e31c:	a908      	add	r1, sp, #32
   2e31e:	3048      	adds	r0, #72	; 0x48
   2e320:	f7fd ffb6 	bl	2c290 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2e324:	4680      	mov	r8, r0
   2e326:	b928      	cbnz	r0, 2e334 <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   2e328:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
   2e32c:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2e32e:	314a      	adds	r1, #74	; 0x4a
   2e330:	4622      	mov	r2, r4
   2e332:	e7ab      	b.n	2e28c <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2e334:	210f      	movs	r1, #15
   2e336:	4630      	mov	r0, r6
   2e338:	f7ff fdd5 	bl	2dee6 <atomic_test_bit>
   2e33c:	b120      	cbz	r0, 2e348 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2e33e:	2202      	movs	r2, #2
   2e340:	2106      	movs	r1, #6
   2e342:	4620      	mov	r0, r4
   2e344:	f7ed f990 	bl	1b668 <bt_conn_security_changed>
	smp_reset(smp);
   2e348:	4628      	mov	r0, r5
   2e34a:	f7ff febb 	bl	2e0c4 <smp_reset>
		return false;
   2e34e:	2000      	movs	r0, #0
   2e350:	e7ac      	b.n	2e2ac <bt_smp_request_ltk+0x6e>

0002e352 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2e352:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e356:	4770      	bx	lr

0002e358 <bt_smp_irk_get>:
{
   2e358:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   2e35a:	2500      	movs	r5, #0
{
   2e35c:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   2e35e:	2210      	movs	r2, #16
   2e360:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   2e362:	e9cd 5500 	strd	r5, r5, [sp]
   2e366:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   2e36a:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   2e36c:	f7fd ff90 	bl	2c290 <memcmp>
   2e370:	b180      	cbz	r0, 2e394 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   2e372:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   2e374:	220c      	movs	r2, #12
   2e376:	4629      	mov	r1, r5
   2e378:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   2e37a:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   2e37c:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   2e37e:	70e5      	strb	r5, [r4, #3]
   2e380:	1d20      	adds	r0, r4, #4
   2e382:	f7fd ffb7 	bl	2c2f4 <memset>
	err = bt_encrypt_le(key, res, res);
   2e386:	4622      	mov	r2, r4
   2e388:	4621      	mov	r1, r4
   2e38a:	4630      	mov	r0, r6
   2e38c:	f000 fde8 	bl	2ef60 <bt_encrypt_le>
}
   2e390:	b004      	add	sp, #16
   2e392:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2e394:	f06f 0015 	mvn.w	r0, #21
   2e398:	e7fa      	b.n	2e390 <bt_smp_irk_get+0x38>

0002e39a <bt_smp_dhkey_ready>:
{
   2e39a:	b570      	push	{r4, r5, r6, lr}
   2e39c:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2e39e:	2008      	movs	r0, #8
   2e3a0:	f7f0 fad0 	bl	1e944 <smp_find>
	if (smp) {
   2e3a4:	4604      	mov	r4, r0
   2e3a6:	b1b8      	cbz	r0, 2e3d8 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2e3a8:	1d05      	adds	r5, r0, #4
   2e3aa:	2108      	movs	r1, #8
   2e3ac:	4628      	mov	r0, r5
   2e3ae:	f7ff fdc4 	bl	2df3a <atomic_clear_bit>
	if (!dhkey) {
   2e3b2:	b38e      	cbz	r6, 2e418 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2e3b4:	2107      	movs	r1, #7
   2e3b6:	f7ff fdc0 	bl	2df3a <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   2e3ba:	4631      	mov	r1, r6
   2e3bc:	2220      	movs	r2, #32
   2e3be:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2e3c2:	f7fd ff8c 	bl	2c2de <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2e3c6:	210a      	movs	r1, #10
   2e3c8:	4628      	mov	r0, r5
   2e3ca:	f7ff fd8c 	bl	2dee6 <atomic_test_bit>
   2e3ce:	b168      	cbz	r0, 2e3ec <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2e3d0:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2e3d2:	4628      	mov	r0, r5
   2e3d4:	f7ff fdd0 	bl	2df78 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2e3d8:	2007      	movs	r0, #7
   2e3da:	f7f0 fab3 	bl	1e944 <smp_find>
		if (smp) {
   2e3de:	4604      	mov	r4, r0
   2e3e0:	b118      	cbz	r0, 2e3ea <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2e3e2:	f7f0 fbb9 	bl	1eb58 <smp_dhkey_generate>
			if (err) {
   2e3e6:	4601      	mov	r1, r0
   2e3e8:	b990      	cbnz	r0, 2e410 <bt_smp_dhkey_ready+0x76>
}
   2e3ea:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2e3ec:	2110      	movs	r1, #16
   2e3ee:	4628      	mov	r0, r5
   2e3f0:	f7ff fd79 	bl	2dee6 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2e3f4:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2e3f6:	2800      	cmp	r0, #0
   2e3f8:	d1eb      	bne.n	2e3d2 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2e3fa:	4628      	mov	r0, r5
   2e3fc:	f7ff fd73 	bl	2dee6 <atomic_test_bit>
   2e400:	2800      	cmp	r0, #0
   2e402:	d0e9      	beq.n	2e3d8 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2e404:	4620      	mov	r0, r4
   2e406:	f7f0 ff85 	bl	1f314 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2e40a:	4601      	mov	r1, r0
   2e40c:	2800      	cmp	r0, #0
   2e40e:	d0e3      	beq.n	2e3d8 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2e410:	4620      	mov	r0, r4
   2e412:	f7f1 fb11 	bl	1fa38 <smp_error>
   2e416:	e7df      	b.n	2e3d8 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2e418:	210b      	movs	r1, #11
   2e41a:	e7f9      	b.n	2e410 <bt_smp_dhkey_ready+0x76>

0002e41c <smp_check_complete.part.0>:
static void smp_check_complete(struct bt_conn *conn, uint8_t dist_complete)
   2e41c:	b510      	push	{r4, lr}
   2e41e:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2e420:	2106      	movs	r1, #6
   2e422:	f7fe fd4b 	bl	2cebc <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2e426:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   2e42a:	ea23 0104 	bic.w	r1, r3, r4
   2e42e:	f800 1c04 	strb.w	r1, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   2e432:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   2e436:	b921      	cbnz	r1, 2e442 <smp_check_complete.part.0+0x26>
}
   2e438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   2e43c:	38ec      	subs	r0, #236	; 0xec
   2e43e:	f7f1 ba5f 	b.w	1f900 <smp_pairing_complete>
}
   2e442:	bd10      	pop	{r4, pc}

0002e444 <smp_ident_sent>:
	if (!err) {
   2e444:	b922      	cbnz	r2, 2e450 <smp_ident_sent+0xc>
	if (conn->type == BT_CONN_TYPE_LE) {
   2e446:	7881      	ldrb	r1, [r0, #2]
   2e448:	2901      	cmp	r1, #1
   2e44a:	d101      	bne.n	2e450 <smp_ident_sent+0xc>
   2e44c:	f7ff bfe6 	b.w	2e41c <smp_check_complete.part.0>
}
   2e450:	4770      	bx	lr

0002e452 <smp_id_sent>:
	if (!err) {
   2e452:	b92a      	cbnz	r2, 2e460 <smp_id_sent+0xe>
	if (conn->type == BT_CONN_TYPE_LE) {
   2e454:	7883      	ldrb	r3, [r0, #2]
   2e456:	2b01      	cmp	r3, #1
   2e458:	d102      	bne.n	2e460 <smp_id_sent+0xe>
   2e45a:	2102      	movs	r1, #2
   2e45c:	f7ff bfde 	b.w	2e41c <smp_check_complete.part.0>
}
   2e460:	4770      	bx	lr

0002e462 <bt_smp_disconnected>:
{
   2e462:	b570      	push	{r4, r5, r6, lr}
   2e464:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2e466:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2e46a:	f850 3b34 	ldr.w	r3, [r0], #52
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2e46e:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2e470:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
	(void)k_work_cancel_delayable(&smp->work);
   2e474:	f001 f9a2 	bl	2f7bc <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2e478:	2103      	movs	r1, #3
   2e47a:	4620      	mov	r0, r4
   2e47c:	f7ff fd33 	bl	2dee6 <atomic_test_bit>
   2e480:	b1a0      	cbz	r0, 2e4ac <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2e482:	2108      	movs	r1, #8
   2e484:	4630      	mov	r0, r6
   2e486:	f7f1 fa3b 	bl	1f900 <smp_pairing_complete>
	if (keys) {
   2e48a:	b13d      	cbz	r5, 2e49c <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2e48c:	89eb      	ldrh	r3, [r5, #14]
   2e48e:	b113      	cbz	r3, 2e496 <bt_smp_disconnected+0x34>
   2e490:	7b6b      	ldrb	r3, [r5, #13]
   2e492:	079b      	lsls	r3, r3, #30
   2e494:	d502      	bpl.n	2e49c <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2e496:	4628      	mov	r0, r5
   2e498:	f7f2 f8bc 	bl	20614 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2e49c:	4630      	mov	r0, r6
   2e49e:	f44f 72ac 	mov.w	r2, #344	; 0x158
}
   2e4a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2e4a6:	2100      	movs	r1, #0
   2e4a8:	f7fd bf24 	b.w	2c2f4 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2e4ac:	2101      	movs	r1, #1
   2e4ae:	4620      	mov	r0, r4
   2e4b0:	f7ff fd19 	bl	2dee6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2e4b4:	2800      	cmp	r0, #0
   2e4b6:	d1e4      	bne.n	2e482 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2e4b8:	210f      	movs	r1, #15
   2e4ba:	4620      	mov	r0, r4
   2e4bc:	f7ff fd13 	bl	2dee6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2e4c0:	2800      	cmp	r0, #0
   2e4c2:	d1de      	bne.n	2e482 <bt_smp_disconnected+0x20>
   2e4c4:	e7e1      	b.n	2e48a <bt_smp_disconnected+0x28>

0002e4c6 <id_add>:
	bt_id_add(keys);
   2e4c6:	f7eb bd31 	b.w	19f2c <bt_id_add>

0002e4ca <bt_keys_get_type>:
{
   2e4ca:	b570      	push	{r4, r5, r6, lr}
   2e4cc:	4604      	mov	r4, r0
   2e4ce:	460d      	mov	r5, r1
   2e4d0:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2e4d2:	f7f2 f809 	bl	204e8 <bt_keys_find>
	if (keys) {
   2e4d6:	b938      	cbnz	r0, 2e4e8 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2e4d8:	4631      	mov	r1, r6
   2e4da:	4628      	mov	r0, r5
   2e4dc:	f7f1 ff84 	bl	203e8 <bt_keys_get_addr>
	if (!keys) {
   2e4e0:	b110      	cbz	r0, 2e4e8 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   2e4e2:	89c3      	ldrh	r3, [r0, #14]
   2e4e4:	431c      	orrs	r4, r3
   2e4e6:	81c4      	strh	r4, [r0, #14]
}
   2e4e8:	bd70      	pop	{r4, r5, r6, pc}

0002e4ea <bt_keys_add_type>:
	keys->keys |= type;
   2e4ea:	89c3      	ldrh	r3, [r0, #14]
   2e4ec:	4319      	orrs	r1, r3
   2e4ee:	81c1      	strh	r1, [r0, #14]
}
   2e4f0:	4770      	bx	lr

0002e4f2 <sys_memcpy_swap>:
	psrc += length - 1;
   2e4f2:	1e53      	subs	r3, r2, #1
   2e4f4:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2e4f6:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2e4f8:	f811 3901 	ldrb.w	r3, [r1], #-1
   2e4fc:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2e500:	4290      	cmp	r0, r2
   2e502:	d1f9      	bne.n	2e4f8 <sys_memcpy_swap+0x6>
}
   2e504:	4770      	bx	lr

0002e506 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2e506:	b510      	push	{r4, lr}
   2e508:	1e43      	subs	r3, r0, #1
   2e50a:	f100 0210 	add.w	r2, r0, #16
   2e50e:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2e510:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2e514:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2e518:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2e51a:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2e51c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2e51e:	d1f7      	bne.n	2e510 <sys_mem_swap.constprop.0+0xa>
	}
}
   2e520:	bd10      	pop	{r4, pc}

0002e522 <bt_crypto_aes_cmac>:
{
   2e522:	b570      	push	{r4, r5, r6, lr}
   2e524:	b0c2      	sub	sp, #264	; 0x108
   2e526:	460d      	mov	r5, r1
   2e528:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2e52a:	4601      	mov	r1, r0
   2e52c:	aa16      	add	r2, sp, #88	; 0x58
   2e52e:	4668      	mov	r0, sp
{
   2e530:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2e532:	f7fd fd1c 	bl	2bf6e <tc_cmac_setup>
   2e536:	b918      	cbnz	r0, 2e540 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2e538:	f06f 0004 	mvn.w	r0, #4
}
   2e53c:	b042      	add	sp, #264	; 0x108
   2e53e:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2e540:	4632      	mov	r2, r6
   2e542:	4629      	mov	r1, r5
   2e544:	4668      	mov	r0, sp
   2e546:	f7fd fd3d 	bl	2bfc4 <tc_cmac_update>
   2e54a:	2800      	cmp	r0, #0
   2e54c:	d0f4      	beq.n	2e538 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2e54e:	4669      	mov	r1, sp
   2e550:	4620      	mov	r0, r4
   2e552:	f7fd fda1 	bl	2c098 <tc_cmac_final>
   2e556:	2800      	cmp	r0, #0
   2e558:	d0ee      	beq.n	2e538 <bt_crypto_aes_cmac+0x16>
	return 0;
   2e55a:	2000      	movs	r0, #0
   2e55c:	e7ee      	b.n	2e53c <bt_crypto_aes_cmac+0x1a>

0002e55e <bt_crypto_f4>:
{
   2e55e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e560:	b097      	sub	sp, #92	; 0x5c
   2e562:	4614      	mov	r4, r2
   2e564:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2e566:	2220      	movs	r2, #32
   2e568:	4601      	mov	r1, r0
   2e56a:	a805      	add	r0, sp, #20
{
   2e56c:	461d      	mov	r5, r3
   2e56e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2e570:	f7ff ffbf 	bl	2e4f2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2e574:	2220      	movs	r2, #32
   2e576:	4631      	mov	r1, r6
   2e578:	a80d      	add	r0, sp, #52	; 0x34
   2e57a:	f7ff ffba 	bl	2e4f2 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2e57e:	4621      	mov	r1, r4
   2e580:	2210      	movs	r2, #16
   2e582:	a801      	add	r0, sp, #4
	m[64] = z;
   2e584:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2e588:	f7ff ffb3 	bl	2e4f2 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   2e58c:	463b      	mov	r3, r7
   2e58e:	2241      	movs	r2, #65	; 0x41
   2e590:	a905      	add	r1, sp, #20
   2e592:	a801      	add	r0, sp, #4
   2e594:	f7ff ffc5 	bl	2e522 <bt_crypto_aes_cmac>
	if (err) {
   2e598:	4604      	mov	r4, r0
   2e59a:	b910      	cbnz	r0, 2e5a2 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   2e59c:	4638      	mov	r0, r7
   2e59e:	f7ff ffb2 	bl	2e506 <sys_mem_swap.constprop.0>
}
   2e5a2:	4620      	mov	r0, r4
   2e5a4:	b017      	add	sp, #92	; 0x5c
   2e5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e5a8 <bt_crypto_f6>:
{
   2e5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e5aa:	b097      	sub	sp, #92	; 0x5c
   2e5ac:	4605      	mov	r5, r0
   2e5ae:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2e5b0:	a805      	add	r0, sp, #20
   2e5b2:	2210      	movs	r2, #16
{
   2e5b4:	461c      	mov	r4, r3
   2e5b6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2e5b8:	f7ff ff9b 	bl	2e4f2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2e5bc:	2210      	movs	r2, #16
   2e5be:	4631      	mov	r1, r6
   2e5c0:	a809      	add	r0, sp, #36	; 0x24
   2e5c2:	f7ff ff96 	bl	2e4f2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2e5c6:	4621      	mov	r1, r4
   2e5c8:	2210      	movs	r2, #16
   2e5ca:	a80d      	add	r0, sp, #52	; 0x34
   2e5cc:	f7ff ff91 	bl	2e4f2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2e5d0:	991c      	ldr	r1, [sp, #112]	; 0x70
   2e5d2:	2203      	movs	r2, #3
   2e5d4:	a811      	add	r0, sp, #68	; 0x44
   2e5d6:	f7ff ff8c 	bl	2e4f2 <sys_memcpy_swap>
	m[51] = a1->type;
   2e5da:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2e5dc:	f814 3b01 	ldrb.w	r3, [r4], #1
   2e5e0:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2e5e4:	4621      	mov	r1, r4
   2e5e6:	2206      	movs	r2, #6
   2e5e8:	a812      	add	r0, sp, #72	; 0x48
   2e5ea:	f7fd fe78 	bl	2c2de <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2e5ee:	4621      	mov	r1, r4
   2e5f0:	2206      	movs	r2, #6
   2e5f2:	a812      	add	r0, sp, #72	; 0x48
   2e5f4:	f7ff ff7d 	bl	2e4f2 <sys_memcpy_swap>
	m[58] = a2->type;
   2e5f8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2e5fa:	f814 3b01 	ldrb.w	r3, [r4], #1
   2e5fe:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2e602:	4621      	mov	r1, r4
   2e604:	2206      	movs	r2, #6
   2e606:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2e60a:	f7fd fe68 	bl	2c2de <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2e60e:	4621      	mov	r1, r4
   2e610:	2206      	movs	r2, #6
   2e612:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2e616:	f7ff ff6c 	bl	2e4f2 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2e61a:	2210      	movs	r2, #16
   2e61c:	4629      	mov	r1, r5
   2e61e:	a801      	add	r0, sp, #4
   2e620:	f7ff ff67 	bl	2e4f2 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2e624:	463b      	mov	r3, r7
   2e626:	2241      	movs	r2, #65	; 0x41
   2e628:	a905      	add	r1, sp, #20
   2e62a:	a801      	add	r0, sp, #4
   2e62c:	f7ff ff79 	bl	2e522 <bt_crypto_aes_cmac>
	if (err) {
   2e630:	4604      	mov	r4, r0
   2e632:	b910      	cbnz	r0, 2e63a <bt_crypto_f6+0x92>
	sys_mem_swap(check, 16);
   2e634:	4638      	mov	r0, r7
   2e636:	f7ff ff66 	bl	2e506 <sys_mem_swap.constprop.0>
}
   2e63a:	4620      	mov	r0, r4
   2e63c:	b017      	add	sp, #92	; 0x5c
   2e63e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e640 <fixed_data_unref>:
}
   2e640:	4770      	bx	lr

0002e642 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2e642:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2e644:	6849      	ldr	r1, [r1, #4]
   2e646:	6809      	ldr	r1, [r1, #0]
   2e648:	f7f2 b9ea 	b.w	20a20 <net_buf_alloc_len>

0002e64c <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2e64c:	f7f7 bdf0 	b.w	26230 <z_impl_k_queue_get>

0002e650 <net_buf_slist_put>:
	__asm__ volatile(
   2e650:	f04f 0340 	mov.w	r3, #64	; 0x40
   2e654:	f3ef 8211 	mrs	r2, BASEPRI
   2e658:	f383 8812 	msr	BASEPRI_MAX, r3
   2e65c:	f3bf 8f6f 	isb	sy
	parent->next = child;
   2e660:	2300      	movs	r3, #0
   2e662:	600b      	str	r3, [r1, #0]
	return list->tail;
   2e664:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   2e666:	b933      	cbnz	r3, 2e676 <net_buf_slist_put+0x26>
	list->head = node;
   2e668:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   2e66c:	f382 8811 	msr	BASEPRI, r2
   2e670:	f3bf 8f6f 	isb	sy
}
   2e674:	4770      	bx	lr
	parent->next = child;
   2e676:	6019      	str	r1, [r3, #0]
	list->tail = node;
   2e678:	6041      	str	r1, [r0, #4]
}
   2e67a:	e7f7      	b.n	2e66c <net_buf_slist_put+0x1c>

0002e67c <net_buf_slist_get>:
{
   2e67c:	b510      	push	{r4, lr}
   2e67e:	4603      	mov	r3, r0
	__asm__ volatile(
   2e680:	f04f 0240 	mov.w	r2, #64	; 0x40
   2e684:	f3ef 8111 	mrs	r1, BASEPRI
   2e688:	f382 8812 	msr	BASEPRI_MAX, r2
   2e68c:	f3bf 8f6f 	isb	sy
	return list->head;
   2e690:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2e692:	b128      	cbz	r0, 2e6a0 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e694:	685c      	ldr	r4, [r3, #4]
	return node->next;
   2e696:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2e698:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e69a:	42a0      	cmp	r0, r4
	list->tail = node;
   2e69c:	bf08      	it	eq
   2e69e:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   2e6a0:	f381 8811 	msr	BASEPRI, r1
   2e6a4:	f3bf 8f6f 	isb	sy
}
   2e6a8:	bd10      	pop	{r4, pc}

0002e6aa <net_buf_put>:
	k_fifo_put(fifo, buf);
   2e6aa:	f000 bf99 	b.w	2f5e0 <k_queue_append>

0002e6ae <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2e6ae:	7a02      	ldrb	r2, [r0, #8]
   2e6b0:	3201      	adds	r2, #1
   2e6b2:	7202      	strb	r2, [r0, #8]
	return buf;
}
   2e6b4:	4770      	bx	lr

0002e6b6 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2e6b6:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2e6b8:	4618      	mov	r0, r3
   2e6ba:	685b      	ldr	r3, [r3, #4]
   2e6bc:	2b00      	cmp	r3, #0
   2e6be:	d1fb      	bne.n	2e6b8 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2e6c0:	4770      	bx	lr

0002e6c2 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2e6c2:	6842      	ldr	r2, [r0, #4]
{
   2e6c4:	b510      	push	{r4, lr}
	if (parent->frags) {
   2e6c6:	b12a      	cbz	r2, 2e6d4 <net_buf_frag_insert+0x12>
   2e6c8:	460b      	mov	r3, r1
	while (buf->frags) {
   2e6ca:	461c      	mov	r4, r3
   2e6cc:	685b      	ldr	r3, [r3, #4]
   2e6ce:	2b00      	cmp	r3, #0
   2e6d0:	d1fb      	bne.n	2e6ca <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2e6d2:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2e6d4:	6041      	str	r1, [r0, #4]
}
   2e6d6:	bd10      	pop	{r4, pc}

0002e6d8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2e6d8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2e6da:	4604      	mov	r4, r0
   2e6dc:	b920      	cbnz	r0, 2e6e8 <net_buf_frag_add+0x10>
	buf->ref++;
   2e6de:	7a0b      	ldrb	r3, [r1, #8]
   2e6e0:	3301      	adds	r3, #1
   2e6e2:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   2e6e4:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2e6e6:	bd10      	pop	{r4, pc}
   2e6e8:	4603      	mov	r3, r0
	while (buf->frags) {
   2e6ea:	4618      	mov	r0, r3
   2e6ec:	685b      	ldr	r3, [r3, #4]
   2e6ee:	2b00      	cmp	r3, #0
   2e6f0:	d1fb      	bne.n	2e6ea <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2e6f2:	f7ff ffe6 	bl	2e6c2 <net_buf_frag_insert>
   2e6f6:	4620      	mov	r0, r4
   2e6f8:	e7f5      	b.n	2e6e6 <net_buf_frag_add+0xe>

0002e6fa <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2e6fa:	6883      	ldr	r3, [r0, #8]
   2e6fc:	440b      	add	r3, r1
   2e6fe:	6003      	str	r3, [r0, #0]
}
   2e700:	4770      	bx	lr

0002e702 <net_buf_simple_add>:
	return buf->data + buf->len;
   2e702:	8883      	ldrh	r3, [r0, #4]
   2e704:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2e706:	4419      	add	r1, r3
   2e708:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2e70a:	18d0      	adds	r0, r2, r3
   2e70c:	4770      	bx	lr

0002e70e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2e70e:	b430      	push	{r4, r5}
   2e710:	8884      	ldrh	r4, [r0, #4]
   2e712:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2e714:	18a3      	adds	r3, r4, r2
   2e716:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2e718:	1928      	adds	r0, r5, r4
}
   2e71a:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2e71c:	f7fd bddf 	b.w	2c2de <memcpy>

0002e720 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2e720:	b510      	push	{r4, lr}
   2e722:	8883      	ldrh	r3, [r0, #4]
   2e724:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   2e726:	1c5c      	adds	r4, r3, #1
   2e728:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2e72a:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2e72c:	18d0      	adds	r0, r2, r3
   2e72e:	bd10      	pop	{r4, pc}

0002e730 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2e730:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2e732:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2e734:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2e736:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2e738:	4411      	add	r1, r2
	buf->data -= len;
   2e73a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2e73c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2e73e:	4770      	bx	lr

0002e740 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2e740:	8882      	ldrh	r2, [r0, #4]
   2e742:	1a52      	subs	r2, r2, r1
{
   2e744:	4603      	mov	r3, r0
	buf->len -= len;
   2e746:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2e748:	6800      	ldr	r0, [r0, #0]
   2e74a:	4408      	add	r0, r1
   2e74c:	6018      	str	r0, [r3, #0]
}
   2e74e:	4770      	bx	lr

0002e750 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2e750:	4603      	mov	r3, r0
	void *data = buf->data;
   2e752:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2e754:	889a      	ldrh	r2, [r3, #4]
   2e756:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2e758:	4401      	add	r1, r0
	buf->len -= len;
   2e75a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2e75c:	6019      	str	r1, [r3, #0]

	return data;
}
   2e75e:	4770      	bx	lr

0002e760 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2e760:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2e762:	6803      	ldr	r3, [r0, #0]
   2e764:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2e766:	2102      	movs	r1, #2
   2e768:	f7ff ffea 	bl	2e740 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2e76c:	4620      	mov	r0, r4
   2e76e:	bd10      	pop	{r4, pc}

0002e770 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2e770:	6802      	ldr	r2, [r0, #0]
   2e772:	6880      	ldr	r0, [r0, #8]
}
   2e774:	1a10      	subs	r0, r2, r0
   2e776:	4770      	bx	lr

0002e778 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2e778:	8883      	ldrh	r3, [r0, #4]
   2e77a:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2e77c:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2e77e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2e780:	6803      	ldr	r3, [r0, #0]
   2e782:	1a5b      	subs	r3, r3, r1
}
   2e784:	1ad0      	subs	r0, r2, r3
   2e786:	4770      	bx	lr

0002e788 <ep_ctx_reset>:
{
   2e788:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   2e78a:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   2e78c:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   2e790:	2300      	movs	r3, #0
   2e792:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   2e794:	7f83      	ldrb	r3, [r0, #30]
{
   2e796:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   2e798:	b113      	cbz	r3, 2e7a0 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2e79a:	7a40      	ldrb	r0, [r0, #9]
   2e79c:	f000 fdae 	bl	2f2fc <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   2e7a0:	2301      	movs	r3, #1
   2e7a2:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   2e7a4:	2300      	movs	r3, #0
   2e7a6:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   2e7a8:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   2e7aa:	77a3      	strb	r3, [r4, #30]
}
   2e7ac:	bd10      	pop	{r4, pc}

0002e7ae <z_log_msg_static_create.constprop.0>:
   2e7ae:	2300      	movs	r3, #0
   2e7b0:	f7e6 ba08 	b.w	14bc4 <z_impl_z_log_msg_static_create>

0002e7b4 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2e7b4:	f7f7 bc86 	b.w	260c4 <z_impl_k_mutex_lock>

0002e7b8 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2e7b8:	f7f7 bcfe 	b.w	261b8 <z_impl_k_mutex_unlock>

0002e7bc <usb_dc_ep_disable>:
{
   2e7bc:	b538      	push	{r3, r4, r5, lr}
   2e7be:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
   2e7c0:	f7f2 f9f2 	bl	20ba8 <endpoint_ctx>
	if (!ep_ctx) {
   2e7c4:	4605      	mov	r5, r0
   2e7c6:	b160      	cbz	r0, 2e7e2 <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
   2e7c8:	7a03      	ldrb	r3, [r0, #8]
   2e7ca:	b16b      	cbz	r3, 2e7e8 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   2e7cc:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
   2e7ce:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   2e7d0:	f7f7 f94a 	bl	25a68 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   2e7d4:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   2e7d6:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   2e7d8:	f7ff ffd6 	bl	2e788 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   2e7dc:	722c      	strb	r4, [r5, #8]
	return 0;
   2e7de:	4620      	mov	r0, r4
}
   2e7e0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2e7e2:	f06f 0015 	mvn.w	r0, #21
   2e7e6:	e7fb      	b.n	2e7e0 <usb_dc_ep_disable+0x24>
		return -EALREADY;
   2e7e8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2e7ec:	e7f8      	b.n	2e7e0 <usb_dc_ep_disable+0x24>

0002e7ee <usb_dc_ep_read>:
{
   2e7ee:	b570      	push	{r4, r5, r6, lr}
   2e7f0:	4604      	mov	r4, r0
   2e7f2:	460e      	mov	r6, r1
   2e7f4:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   2e7f6:	f7f3 f807 	bl	21808 <usb_dc_ep_read_wait>
	if (ret) {
   2e7fa:	b930      	cbnz	r0, 2e80a <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   2e7fc:	b906      	cbnz	r6, 2e800 <usb_dc_ep_read+0x12>
   2e7fe:	b125      	cbz	r5, 2e80a <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   2e800:	4620      	mov	r0, r4
}
   2e802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   2e806:	f7f3 b865 	b.w	218d4 <usb_dc_ep_read_continue>
}
   2e80a:	bd70      	pop	{r4, r5, r6, pc}

0002e80c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2e80c:	6903      	ldr	r3, [r0, #16]
   2e80e:	b2c9      	uxtb	r1, r1
   2e810:	220c      	movs	r2, #12
   2e812:	fb01 3302 	mla	r3, r1, r2, r3
   2e816:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   2e818:	f000 0007 	and.w	r0, r0, #7
   2e81c:	4770      	bx	lr

0002e81e <set_on_state>:
	__asm__ volatile(
   2e81e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2e822:	f3ef 8211 	mrs	r2, BASEPRI
   2e826:	f383 8812 	msr	BASEPRI_MAX, r3
   2e82a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2e82e:	6803      	ldr	r3, [r0, #0]
   2e830:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2e834:	f043 0302 	orr.w	r3, r3, #2
   2e838:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2e83a:	f382 8811 	msr	BASEPRI, r2
   2e83e:	f3bf 8f6f 	isb	sy
}
   2e842:	4770      	bx	lr

0002e844 <stop>:
{
   2e844:	b570      	push	{r4, r5, r6, lr}
   2e846:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   2e848:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   2e84a:	f04f 0440 	mov.w	r4, #64	; 0x40
   2e84e:	f3ef 8511 	mrs	r5, BASEPRI
   2e852:	f384 8812 	msr	BASEPRI_MAX, r4
   2e856:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2e85a:	260c      	movs	r6, #12
   2e85c:	fb06 3401 	mla	r4, r6, r1, r3
   2e860:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2e862:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2e866:	d008      	beq.n	2e87a <stop+0x36>
   2e868:	42a2      	cmp	r2, r4
   2e86a:	d006      	beq.n	2e87a <stop+0x36>
	__asm__ volatile(
   2e86c:	f385 8811 	msr	BASEPRI, r5
   2e870:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   2e874:	f04f 30ff 	mov.w	r0, #4294967295
}
   2e878:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2e87a:	4371      	muls	r1, r6
   2e87c:	440b      	add	r3, r1
   2e87e:	2201      	movs	r2, #1
   2e880:	641a      	str	r2, [r3, #64]	; 0x40
   2e882:	f385 8811 	msr	BASEPRI, r5
   2e886:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2e88a:	6843      	ldr	r3, [r0, #4]
   2e88c:	440b      	add	r3, r1
   2e88e:	685b      	ldr	r3, [r3, #4]
   2e890:	4798      	blx	r3
	return 0;
   2e892:	2000      	movs	r0, #0
   2e894:	e7f0      	b.n	2e878 <stop+0x34>

0002e896 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2e896:	2280      	movs	r2, #128	; 0x80
   2e898:	f7ff bfd4 	b.w	2e844 <stop>

0002e89c <async_start>:
{
   2e89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e89e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2e8a0:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2e8a2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2e8a4:	f04f 0540 	mov.w	r5, #64	; 0x40
   2e8a8:	f3ef 8611 	mrs	r6, BASEPRI
   2e8ac:	f385 8812 	msr	BASEPRI_MAX, r5
   2e8b0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2e8b4:	250c      	movs	r5, #12
   2e8b6:	4369      	muls	r1, r5
   2e8b8:	440c      	add	r4, r1
   2e8ba:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2e8bc:	f005 0c07 	and.w	ip, r5, #7
   2e8c0:	f1bc 0f01 	cmp.w	ip, #1
   2e8c4:	d10b      	bne.n	2e8de <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2e8c6:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   2e8c8:	f386 8811 	msr	BASEPRI, r6
   2e8cc:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2e8d0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2e8d4:	6843      	ldr	r3, [r0, #4]
   2e8d6:	585b      	ldr	r3, [r3, r1]
   2e8d8:	4798      	blx	r3
	return 0;
   2e8da:	2000      	movs	r0, #0
}
   2e8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2e8de:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2e8e2:	42af      	cmp	r7, r5
   2e8e4:	f386 8811 	msr	BASEPRI, r6
   2e8e8:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2e8ec:	bf0c      	ite	eq
   2e8ee:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2e8f2:	f04f 30ff 	movne.w	r0, #4294967295
   2e8f6:	e7f1      	b.n	2e8dc <async_start+0x40>

0002e8f8 <api_start>:
{
   2e8f8:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2e8fa:	2480      	movs	r4, #128	; 0x80
   2e8fc:	9400      	str	r4, [sp, #0]
   2e8fe:	f7ff ffcd 	bl	2e89c <async_start>
}
   2e902:	b002      	add	sp, #8
   2e904:	bd10      	pop	{r4, pc}

0002e906 <onoff_started_callback>:
{
   2e906:	b410      	push	{r4}
	return &data->mgr[type];
   2e908:	6900      	ldr	r0, [r0, #16]
   2e90a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2e90c:	241c      	movs	r4, #28
   2e90e:	fb03 0004 	mla	r0, r3, r4, r0
   2e912:	2100      	movs	r1, #0
}
   2e914:	bc10      	pop	{r4}
	notify(mgr, 0);
   2e916:	4710      	bx	r2

0002e918 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2e918:	2000      	movs	r0, #0
   2e91a:	f7f5 bb27 	b.w	23f6c <nrfx_clock_start>

0002e91e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2e91e:	2000      	movs	r0, #0
   2e920:	f000 bba5 	b.w	2f06e <nrfx_clock_stop>

0002e924 <blocking_start_callback>:
{
   2e924:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2e926:	f7f7 bcb7 	b.w	26298 <z_impl_k_sem_give>

0002e92a <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2e92a:	2000      	movs	r0, #0
   2e92c:	4770      	bx	lr

0002e92e <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2e92e:	b538      	push	{r3, r4, r5, lr}
   2e930:	460c      	mov	r4, r1
   2e932:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2e934:	f7ea ff88 	bl	19848 <bt_is_ready>
   2e938:	b128      	cbz	r0, 2e946 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2e93a:	4629      	mov	r1, r5
   2e93c:	4620      	mov	r0, r4
}
   2e93e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2e942:	f7ea b8cf 	b.w	18ae4 <bt_hci_le_rand>
}
   2e946:	f06f 000a 	mvn.w	r0, #10
   2e94a:	bd38      	pop	{r3, r4, r5, pc}

0002e94c <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   2e94c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e94e:	460f      	mov	r7, r1
   2e950:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   2e952:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2e956:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   2e958:	42a6      	cmp	r6, r4
   2e95a:	d803      	bhi.n	2e964 <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   2e95c:	d016      	beq.n	2e98c <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
   2e95e:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   2e960:	b003      	add	sp, #12
   2e962:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2e964:	1b33      	subs	r3, r6, r4
   2e966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2e96a:	bf38      	it	cc
   2e96c:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   2e96e:	462a      	mov	r2, r5
   2e970:	ab01      	add	r3, sp, #4
   2e972:	1939      	adds	r1, r7, r4
   2e974:	2000      	movs	r0, #0
   2e976:	f7f9 f8f3 	bl	27b60 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   2e97a:	b920      	cbnz	r0, 2e986 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   2e97c:	9b01      	ldr	r3, [sp, #4]
   2e97e:	42ab      	cmp	r3, r5
   2e980:	d101      	bne.n	2e986 <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   2e982:	442c      	add	r4, r5
   2e984:	e7e8      	b.n	2e958 <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   2e986:	f06f 0015 	mvn.w	r0, #21
   2e98a:	e7e9      	b.n	2e960 <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
   2e98c:	2000      	movs	r0, #0
   2e98e:	e7e7      	b.n	2e960 <entropy_cc3xx_rng_get_entropy+0x14>

0002e990 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2e990:	2200      	movs	r2, #0
{
   2e992:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2e994:	4611      	mov	r1, r2
   2e996:	4610      	mov	r0, r2
   2e998:	f7f9 f8b2 	bl	27b00 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   2e99c:	2800      	cmp	r0, #0
	}

	return 0;
}
   2e99e:	bf18      	it	ne
   2e9a0:	f06f 0015 	mvnne.w	r0, #21
   2e9a4:	bd08      	pop	{r3, pc}

0002e9a6 <is_regular_addr_valid>:
{
   2e9a6:	b538      	push	{r3, r4, r5, lr}
   2e9a8:	4605      	mov	r5, r0
   2e9aa:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2e9ac:	f000 fbd0 	bl	2f150 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2e9b0:	2d00      	cmp	r5, #0
   2e9b2:	db07      	blt.n	2e9c4 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2e9b4:	42a8      	cmp	r0, r5
   2e9b6:	d905      	bls.n	2e9c4 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2e9b8:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2e9ba:	4284      	cmp	r4, r0
   2e9bc:	bf8c      	ite	hi
   2e9be:	2000      	movhi	r0, #0
   2e9c0:	2001      	movls	r0, #1
}
   2e9c2:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2e9c4:	2000      	movs	r0, #0
   2e9c6:	e7fc      	b.n	2e9c2 <is_regular_addr_valid+0x1c>

0002e9c8 <flash_nrf_read>:
{
   2e9c8:	b570      	push	{r4, r5, r6, lr}
   2e9ca:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   2e9cc:	4628      	mov	r0, r5
   2e9ce:	4619      	mov	r1, r3
{
   2e9d0:	4616      	mov	r6, r2
   2e9d2:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2e9d4:	f7ff ffe7 	bl	2e9a6 <is_regular_addr_valid>
   2e9d8:	b928      	cbnz	r0, 2e9e6 <flash_nrf_read+0x1e>
   2e9da:	4621      	mov	r1, r4
   2e9dc:	4628      	mov	r0, r5
}
   2e9de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e9e2:	f7f3 bb05 	b.w	21ff0 <flash_nrf_read.part.0>
	if (!len) {
   2e9e6:	b124      	cbz	r4, 2e9f2 <flash_nrf_read+0x2a>
	memcpy(data, (void *)addr, len);
   2e9e8:	4622      	mov	r2, r4
   2e9ea:	4629      	mov	r1, r5
   2e9ec:	4630      	mov	r0, r6
   2e9ee:	f7fd fc76 	bl	2c2de <memcpy>
}
   2e9f2:	2000      	movs	r0, #0
   2e9f4:	bd70      	pop	{r4, r5, r6, pc}

0002e9f6 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2e9f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e9f8:	461c      	mov	r4, r3
   2e9fa:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2e9fc:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
   2e9fe:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2ea00:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2ea02:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   2ea04:	6913      	ldr	r3, [r2, #16]
{
   2ea06:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
   2ea08:	aa01      	add	r2, sp, #4
   2ea0a:	4669      	mov	r1, sp
   2ea0c:	4798      	blx	r3

	while (layout_size--) {
   2ea0e:	9b01      	ldr	r3, [sp, #4]
   2ea10:	1e5a      	subs	r2, r3, #1
   2ea12:	9201      	str	r2, [sp, #4]
   2ea14:	b91b      	cbnz	r3, 2ea1e <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2ea16:	f06f 0015 	mvn.w	r0, #21
}
   2ea1a:	b003      	add	sp, #12
   2ea1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2ea1e:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2ea20:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2ea22:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2ea24:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2ea26:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2ea28:	b985      	cbnz	r5, 2ea4c <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2ea2a:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2ea2c:	f8d0 c000 	ldr.w	ip, [r0]
   2ea30:	4563      	cmp	r3, ip
   2ea32:	bf28      	it	cs
   2ea34:	4663      	movcs	r3, ip
		info->index += index_jmp;
   2ea36:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2ea38:	fb03 1107 	mla	r1, r3, r7, r1
   2ea3c:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2ea3e:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2ea40:	6802      	ldr	r2, [r0, #0]
   2ea42:	429a      	cmp	r2, r3
   2ea44:	d806      	bhi.n	2ea54 <flash_get_page_info+0x5e>
		layout++;
   2ea46:	3008      	adds	r0, #8
   2ea48:	9000      	str	r0, [sp, #0]
   2ea4a:	e7e0      	b.n	2ea0e <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2ea4c:	1a6b      	subs	r3, r5, r1
   2ea4e:	fbb3 f3f7 	udiv	r3, r3, r7
   2ea52:	e7eb      	b.n	2ea2c <flash_get_page_info+0x36>
			return 0;
   2ea54:	2000      	movs	r0, #0
   2ea56:	e7e0      	b.n	2ea1a <flash_get_page_info+0x24>

0002ea58 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2ea58:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2ea5a:	2200      	movs	r2, #0
   2ea5c:	f7ff bfcb 	b.w	2e9f6 <flash_get_page_info>

0002ea60 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2ea60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2ea64:	6883      	ldr	r3, [r0, #8]
{
   2ea66:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2ea68:	691b      	ldr	r3, [r3, #16]
{
   2ea6a:	4688      	mov	r8, r1
   2ea6c:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2ea6e:	a901      	add	r1, sp, #4
   2ea70:	aa02      	add	r2, sp, #8
   2ea72:	4798      	blx	r3
	off_t off = 0;
   2ea74:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2ea76:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2ea78:	4625      	mov	r5, r4
   2ea7a:	9b02      	ldr	r3, [sp, #8]
   2ea7c:	42ab      	cmp	r3, r5
   2ea7e:	d802      	bhi.n	2ea86 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2ea80:	b006      	add	sp, #24
   2ea82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2ea86:	9f01      	ldr	r7, [sp, #4]
   2ea88:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2ea8c:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2ea8e:	687b      	ldr	r3, [r7, #4]
   2ea90:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2ea92:	683a      	ldr	r2, [r7, #0]
   2ea94:	42b2      	cmp	r2, r6
   2ea96:	eb0a 0306 	add.w	r3, sl, r6
   2ea9a:	d802      	bhi.n	2eaa2 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2ea9c:	3501      	adds	r5, #1
   2ea9e:	469a      	mov	sl, r3
   2eaa0:	e7eb      	b.n	2ea7a <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   2eaa2:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2eaa4:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2eaa6:	4649      	mov	r1, r9
   2eaa8:	a803      	add	r0, sp, #12
   2eaaa:	47c0      	blx	r8
   2eaac:	2800      	cmp	r0, #0
   2eaae:	d0e7      	beq.n	2ea80 <flash_page_foreach+0x20>
			off += page_info.size;
   2eab0:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2eab2:	3601      	adds	r6, #1
			off += page_info.size;
   2eab4:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2eab6:	e7ec      	b.n	2ea92 <flash_page_foreach+0x32>

0002eab8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2eab8:	6843      	ldr	r3, [r0, #4]
   2eaba:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2eabc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2eac0:	600b      	str	r3, [r1, #0]
}
   2eac2:	2000      	movs	r0, #0
   2eac4:	4770      	bx	lr

0002eac6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2eac6:	6843      	ldr	r3, [r0, #4]
   2eac8:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2eaca:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2eace:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2ead2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2ead6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2eada:	2000      	movs	r0, #0
   2eadc:	4770      	bx	lr

0002eade <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2eade:	6843      	ldr	r3, [r0, #4]
   2eae0:	685b      	ldr	r3, [r3, #4]
}
   2eae2:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2eae4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2eae8:	4770      	bx	lr

0002eaea <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2eaea:	6843      	ldr	r3, [r0, #4]
   2eaec:	685b      	ldr	r3, [r3, #4]
}
   2eaee:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2eaf0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2eaf4:	4770      	bx	lr

0002eaf6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2eaf6:	6843      	ldr	r3, [r0, #4]
   2eaf8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2eafa:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2eafe:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2eb02:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2eb04:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2eb08:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2eb0c:	2000      	movs	r0, #0
   2eb0e:	4770      	bx	lr

0002eb10 <gpio_nrfx_manage_callback>:
{
   2eb10:	b510      	push	{r4, lr}
	return port->data;
   2eb12:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2eb14:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2eb16:	b1f8      	cbz	r0, 2eb58 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2eb18:	4288      	cmp	r0, r1
   2eb1a:	d119      	bne.n	2eb50 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   2eb1c:	689c      	ldr	r4, [r3, #8]
	return node->next;
   2eb1e:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   2eb20:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2eb22:	42a1      	cmp	r1, r4
   2eb24:	d100      	bne.n	2eb28 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2eb26:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2eb28:	2000      	movs	r0, #0
   2eb2a:	6008      	str	r0, [r1, #0]
	if (set) {
   2eb2c:	b12a      	cbz	r2, 2eb3a <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   2eb2e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2eb30:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2eb32:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2eb34:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2eb36:	b902      	cbnz	r2, 2eb3a <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   2eb38:	6099      	str	r1, [r3, #8]
	return 0;
   2eb3a:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2eb3c:	e010      	b.n	2eb60 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2eb3e:	4281      	cmp	r1, r0
   2eb40:	d106      	bne.n	2eb50 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   2eb42:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   2eb44:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2eb46:	6898      	ldr	r0, [r3, #8]
   2eb48:	4281      	cmp	r1, r0
   2eb4a:	d1ed      	bne.n	2eb28 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2eb4c:	609c      	str	r4, [r3, #8]
}
   2eb4e:	e7eb      	b.n	2eb28 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   2eb50:	4604      	mov	r4, r0
   2eb52:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2eb54:	2800      	cmp	r0, #0
   2eb56:	d1f2      	bne.n	2eb3e <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   2eb58:	2a00      	cmp	r2, #0
   2eb5a:	d1e8      	bne.n	2eb2e <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   2eb5c:	f06f 0015 	mvn.w	r0, #21
}
   2eb60:	bd10      	pop	{r4, pc}

0002eb62 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   2eb62:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   2eb64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
   2eb68:	2908      	cmp	r1, #8
   2eb6a:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2eb6c:	6e52      	ldr	r2, [r2, #100]	; 0x64
   2eb6e:	bf28      	it	cs
   2eb70:	2108      	movcs	r1, #8
   2eb72:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
   2eb74:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   2eb76:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
   2eb78:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   2eb7a:	460a      	mov	r2, r1
   2eb7c:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   2eb7e:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   2eb80:	f7fd fbad 	bl	2c2de <memcpy>

	return length;
}
   2eb84:	4620      	mov	r0, r4
   2eb86:	b002      	add	sp, #8
   2eb88:	bd10      	pop	{r4, pc}

0002eb8a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2eb8a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2eb8c:	6843      	ldr	r3, [r0, #4]
   2eb8e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2eb90:	7a05      	ldrb	r5, [r0, #8]
   2eb92:	6844      	ldr	r4, [r0, #4]
   2eb94:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2eb98:	42a3      	cmp	r3, r4
   2eb9a:	d302      	bcc.n	2eba2 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2eb9c:	f06f 0001 	mvn.w	r0, #1
}
   2eba0:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2eba2:	795c      	ldrb	r4, [r3, #5]
   2eba4:	428c      	cmp	r4, r1
   2eba6:	d001      	beq.n	2ebac <pinctrl_lookup_state+0x22>
		(*state)++;
   2eba8:	3308      	adds	r3, #8
   2ebaa:	e7f0      	b.n	2eb8e <pinctrl_lookup_state+0x4>
			return 0;
   2ebac:	2000      	movs	r0, #0
   2ebae:	e7f7      	b.n	2eba0 <pinctrl_lookup_state+0x16>

0002ebb0 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   2ebb0:	6902      	ldr	r2, [r0, #16]
{
   2ebb2:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2ebb4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2ebb8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2ebbc:	2000      	movs	r0, #0
   2ebbe:	4770      	bx	lr

0002ebc0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2ebc0:	6843      	ldr	r3, [r0, #4]
   2ebc2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2ebc4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2ebc8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2ebcc:	4770      	bx	lr

0002ebce <tx_start>:
{
   2ebce:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2ebd0:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2ebd2:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2ebd4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2ebd8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ebdc:	2200      	movs	r2, #0
   2ebde:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2ebe2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2ebe6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2ebea:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2ebee:	6862      	ldr	r2, [r4, #4]
   2ebf0:	06d2      	lsls	r2, r2, #27
   2ebf2:	d508      	bpl.n	2ec06 <tx_start+0x38>
	return config->uarte_regs;
   2ebf4:	6842      	ldr	r2, [r0, #4]
   2ebf6:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2ebf8:	2108      	movs	r1, #8
   2ebfa:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2ebfe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2ec02:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ec06:	2201      	movs	r2, #1
   2ec08:	609a      	str	r2, [r3, #8]
}
   2ec0a:	bd10      	pop	{r4, pc}

0002ec0c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2ec0c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2ec0e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2ec10:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ec12:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2ec16:	b150      	cbz	r0, 2ec2e <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   2ec18:	6992      	ldr	r2, [r2, #24]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ec1a:	2000      	movs	r0, #0
   2ec1c:	7812      	ldrb	r2, [r2, #0]
   2ec1e:	700a      	strb	r2, [r1, #0]
   2ec20:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2ec24:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ec28:	2201      	movs	r2, #1
   2ec2a:	601a      	str	r2, [r3, #0]
	return 0;
   2ec2c:	4770      	bx	lr
		return -1;
   2ec2e:	f04f 30ff 	mov.w	r0, #4294967295
}
   2ec32:	4770      	bx	lr

0002ec34 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2ec34:	2a00      	cmp	r2, #0
{
   2ec36:	b510      	push	{r4, lr}
   2ec38:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2ec3a:	dd10      	ble.n	2ec5e <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   2ec3c:	6843      	ldr	r3, [r0, #4]
   2ec3e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ec40:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2ec44:	b150      	cbz	r0, 2ec5c <uarte_nrfx_fifo_read+0x28>
	const struct uarte_nrfx_data *data = dev->data;
   2ec46:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ec48:	2000      	movs	r0, #0
   2ec4a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
   2ec4e:	6992      	ldr	r2, [r2, #24]
   2ec50:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   2ec54:	7812      	ldrb	r2, [r2, #0]
   2ec56:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ec58:	2001      	movs	r0, #1
   2ec5a:	6018      	str	r0, [r3, #0]
}
   2ec5c:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   2ec5e:	2000      	movs	r0, #0
   2ec60:	e7fc      	b.n	2ec5c <uarte_nrfx_fifo_read+0x28>

0002ec62 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   2ec62:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2ec64:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   2ec66:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2ec68:	f04f 0040 	mov.w	r0, #64	; 0x40
   2ec6c:	f3ef 8311 	mrs	r3, BASEPRI
   2ec70:	f380 8812 	msr	BASEPRI_MAX, r0
   2ec74:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2ec78:	68c9      	ldr	r1, [r1, #12]
   2ec7a:	2000      	movs	r0, #0
   2ec7c:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2ec7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2ec82:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2ec86:	f383 8811 	msr	BASEPRI, r3
   2ec8a:	f3bf 8f6f 	isb	sy
}
   2ec8e:	4770      	bx	lr

0002ec90 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2ec90:	6903      	ldr	r3, [r0, #16]
   2ec92:	68db      	ldr	r3, [r3, #12]
   2ec94:	2201      	movs	r2, #1
   2ec96:	739a      	strb	r2, [r3, #14]
}
   2ec98:	4770      	bx	lr

0002ec9a <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   2ec9a:	6903      	ldr	r3, [r0, #16]
   2ec9c:	68db      	ldr	r3, [r3, #12]
   2ec9e:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2eca0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   2eca4:	b962      	cbnz	r2, 2ecc0 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   2eca6:	6842      	ldr	r2, [r0, #4]
   2eca8:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ecaa:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   2ecae:	b140      	cbz	r0, 2ecc2 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   2ecb0:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2ecb4:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2ecb8:	d003      	beq.n	2ecc2 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   2ecba:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2ecbc:	2001      	movs	r0, #1
   2ecbe:	4770      	bx	lr
   2ecc0:	2000      	movs	r0, #0
}
   2ecc2:	4770      	bx	lr

0002ecc4 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2ecc4:	6843      	ldr	r3, [r0, #4]
   2ecc6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ecc8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2eccc:	3800      	subs	r0, #0
   2ecce:	bf18      	it	ne
   2ecd0:	2001      	movne	r0, #1
   2ecd2:	4770      	bx	lr

0002ecd4 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   2ecd4:	6843      	ldr	r3, [r0, #4]
   2ecd6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2ecd8:	2210      	movs	r2, #16
   2ecda:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2ecde:	4770      	bx	lr

0002ece0 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   2ece0:	6843      	ldr	r3, [r0, #4]
   2ece2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2ece4:	2210      	movs	r2, #16
   2ece6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2ecea:	4770      	bx	lr

0002ecec <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   2ecec:	6843      	ldr	r3, [r0, #4]
   2ecee:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2ecf0:	f44f 7200 	mov.w	r2, #512	; 0x200
   2ecf4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2ecf8:	4770      	bx	lr

0002ecfa <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   2ecfa:	6843      	ldr	r3, [r0, #4]
   2ecfc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2ecfe:	f44f 7200 	mov.w	r2, #512	; 0x200
   2ed02:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2ed06:	4770      	bx	lr

0002ed08 <uarte_nrfx_irq_is_pending>:
{
   2ed08:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2ed0a:	6843      	ldr	r3, [r0, #4]
   2ed0c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2ed0e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2ed12:	025b      	lsls	r3, r3, #9
{
   2ed14:	4604      	mov	r4, r0
		||
   2ed16:	d405      	bmi.n	2ed24 <uarte_nrfx_irq_is_pending+0x1c>
   2ed18:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   2ed1c:	f010 0010 	ands.w	r0, r0, #16
   2ed20:	d106      	bne.n	2ed30 <uarte_nrfx_irq_is_pending+0x28>
}
   2ed22:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2ed24:	f7ff ffb9 	bl	2ec9a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2ed28:	2800      	cmp	r0, #0
   2ed2a:	d0f5      	beq.n	2ed18 <uarte_nrfx_irq_is_pending+0x10>
		||
   2ed2c:	2001      	movs	r0, #1
   2ed2e:	e7f8      	b.n	2ed22 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2ed30:	4620      	mov	r0, r4
   2ed32:	f7ff ffc7 	bl	2ecc4 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2ed36:	3800      	subs	r0, #0
   2ed38:	bf18      	it	ne
   2ed3a:	2001      	movne	r0, #1
   2ed3c:	e7f1      	b.n	2ed22 <uarte_nrfx_irq_is_pending+0x1a>

0002ed3e <uarte_nrfx_irq_update>:
}
   2ed3e:	2001      	movs	r0, #1
   2ed40:	4770      	bx	lr

0002ed42 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2ed42:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   2ed44:	68d8      	ldr	r0, [r3, #12]
   2ed46:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   2ed48:	68db      	ldr	r3, [r3, #12]
   2ed4a:	605a      	str	r2, [r3, #4]
}
   2ed4c:	4770      	bx	lr

0002ed4e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2ed4e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2ed50:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ed52:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2ed56:	b940      	cbnz	r0, 2ed6a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2ed58:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2ed5a:	079b      	lsls	r3, r3, #30
   2ed5c:	d406      	bmi.n	2ed6c <is_tx_ready.isra.0+0x1e>
   2ed5e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2ed62:	3800      	subs	r0, #0
   2ed64:	bf18      	it	ne
   2ed66:	2001      	movne	r0, #1
   2ed68:	4770      	bx	lr
   2ed6a:	2001      	movs	r0, #1
}
   2ed6c:	4770      	bx	lr

0002ed6e <uarte_nrfx_fifo_fill>:
{
   2ed6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   2ed70:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   2ed72:	68f3      	ldr	r3, [r6, #12]
   2ed74:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2ed76:	f3bf 8f5b 	dmb	ish
   2ed7a:	4294      	cmp	r4, r2
   2ed7c:	bfa8      	it	ge
   2ed7e:	4614      	movge	r4, r2
{
   2ed80:	4605      	mov	r5, r0
   2ed82:	3310      	adds	r3, #16
   2ed84:	2201      	movs	r2, #1
   2ed86:	e853 0f00 	ldrex	r0, [r3]
   2ed8a:	2800      	cmp	r0, #0
   2ed8c:	d103      	bne.n	2ed96 <uarte_nrfx_fifo_fill+0x28>
   2ed8e:	e843 2700 	strex	r7, r2, [r3]
   2ed92:	2f00      	cmp	r7, #0
   2ed94:	d1f7      	bne.n	2ed86 <uarte_nrfx_fifo_fill+0x18>
   2ed96:	f3bf 8f5b 	dmb	ish
   2ed9a:	bf0c      	ite	eq
   2ed9c:	4613      	moveq	r3, r2
   2ed9e:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2eda0:	d11f      	bne.n	2ede2 <uarte_nrfx_fifo_fill+0x74>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   2eda2:	68f3      	ldr	r3, [r6, #12]
   2eda4:	4622      	mov	r2, r4
   2eda6:	6898      	ldr	r0, [r3, #8]
   2eda8:	f7fd fa99 	bl	2c2de <memcpy>
	__asm__ volatile(
   2edac:	f04f 0340 	mov.w	r3, #64	; 0x40
   2edb0:	f3ef 8711 	mrs	r7, BASEPRI
   2edb4:	f383 8812 	msr	BASEPRI_MAX, r3
   2edb8:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   2edbc:	6868      	ldr	r0, [r5, #4]
   2edbe:	f7ff ffc6 	bl	2ed4e <is_tx_ready.isra.0>
   2edc2:	68f3      	ldr	r3, [r6, #12]
   2edc4:	b938      	cbnz	r0, 2edd6 <uarte_nrfx_fifo_fill+0x68>
		data->int_driven->fifo_fill_lock = 0;
   2edc6:	6118      	str	r0, [r3, #16]
		len = 0;
   2edc8:	4604      	mov	r4, r0
	__asm__ volatile(
   2edca:	f387 8811 	msr	BASEPRI, r7
   2edce:	f3bf 8f6f 	isb	sy
}
   2edd2:	4620      	mov	r0, r4
   2edd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   2edd6:	6899      	ldr	r1, [r3, #8]
   2edd8:	4622      	mov	r2, r4
   2edda:	4628      	mov	r0, r5
   2eddc:	f7ff fef7 	bl	2ebce <tx_start>
   2ede0:	e7f3      	b.n	2edca <uarte_nrfx_fifo_fill+0x5c>
		return 0;
   2ede2:	461c      	mov	r4, r3
   2ede4:	e7f5      	b.n	2edd2 <uarte_nrfx_fifo_fill+0x64>

0002ede6 <uarte_nrfx_isr_int>:
{
   2ede6:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
   2ede8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2edea:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2edec:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2edf0:	05c9      	lsls	r1, r1, #23
   2edf2:	d518      	bpl.n	2ee26 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2edf4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2edf8:	b1a9      	cbz	r1, 2ee26 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   2edfa:	f04f 0440 	mov.w	r4, #64	; 0x40
   2edfe:	f3ef 8111 	mrs	r1, BASEPRI
   2ee02:	f384 8812 	msr	BASEPRI_MAX, r4
   2ee06:	f3bf 8f6f 	isb	sy
   2ee0a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2ee0e:	b134      	cbz	r4, 2ee1e <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ee10:	2400      	movs	r4, #0
   2ee12:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   2ee16:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ee1a:	2401      	movs	r4, #1
   2ee1c:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   2ee1e:	f381 8811 	msr	BASEPRI, r1
   2ee22:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2ee26:	6852      	ldr	r2, [r2, #4]
   2ee28:	06d2      	lsls	r2, r2, #27
   2ee2a:	d51a      	bpl.n	2ee62 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   2ee2c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2ee30:	f3ef 8111 	mrs	r1, BASEPRI
   2ee34:	f382 8812 	msr	BASEPRI_MAX, r2
   2ee38:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ee3c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2ee40:	b112      	cbz	r2, 2ee48 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2ee42:	2200      	movs	r2, #0
   2ee44:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2ee48:	6902      	ldr	r2, [r0, #16]
   2ee4a:	68d2      	ldr	r2, [r2, #12]
   2ee4c:	b10a      	cbz	r2, 2ee52 <uarte_nrfx_isr_int+0x6c>
   2ee4e:	6912      	ldr	r2, [r2, #16]
   2ee50:	b91a      	cbnz	r2, 2ee5a <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   2ee52:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2ee56:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   2ee5a:	f381 8811 	msr	BASEPRI, r1
   2ee5e:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   2ee62:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
   2ee64:	68d4      	ldr	r4, [r2, #12]
   2ee66:	b16c      	cbz	r4, 2ee84 <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ee68:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2ee6c:	b161      	cbz	r1, 2ee88 <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
   2ee6e:	2100      	movs	r1, #0
   2ee70:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
   2ee72:	68d4      	ldr	r4, [r2, #12]
   2ee74:	7ba4      	ldrb	r4, [r4, #14]
   2ee76:	b13c      	cbz	r4, 2ee88 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
   2ee78:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   2ee7c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   2ee80:	68d3      	ldr	r3, [r2, #12]
   2ee82:	7399      	strb	r1, [r3, #14]
}
   2ee84:	bc10      	pop	{r4}
   2ee86:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ee88:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2ee8c:	b121      	cbz	r1, 2ee98 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ee8e:	2100      	movs	r1, #0
   2ee90:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   2ee94:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2ee98:	68d2      	ldr	r2, [r2, #12]
   2ee9a:	6813      	ldr	r3, [r2, #0]
   2ee9c:	2b00      	cmp	r3, #0
   2ee9e:	d0f1      	beq.n	2ee84 <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2eea0:	6851      	ldr	r1, [r2, #4]
}
   2eea2:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2eea4:	4718      	bx	r3

0002eea6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2eea6:	4770      	bx	lr

0002eea8 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2eea8:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2eeac:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2eeae:	b29b      	uxth	r3, r3
   2eeb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2eeb4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2eeb8:	2200      	movs	r2, #0
   2eeba:	601a      	str	r2, [r3, #0]
   2eebc:	681b      	ldr	r3, [r3, #0]
}
   2eebe:	4770      	bx	lr

0002eec0 <sys_clock_cycle_get_32>:
{
   2eec0:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2eec2:	f7f3 fe35 	bl	22b30 <z_nrf_rtc_timer_read>
}
   2eec6:	bd08      	pop	{r3, pc}

0002eec8 <hci_driver_close>:
{
   2eec8:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2eeca:	f7f4 ff77 	bl	23dbc <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2eece:	f04f 30ff 	mov.w	r0, #4294967295
   2eed2:	f04f 31ff 	mov.w	r1, #4294967295
   2eed6:	f7f3 ffd7 	bl	22e88 <multithreading_lock_acquire>
	if (err) {
   2eeda:	4604      	mov	r4, r0
   2eedc:	b920      	cbnz	r0, 2eee8 <hci_driver_close+0x20>
	err = sdc_disable();
   2eede:	f7d2 fce5 	bl	18ac <sdc_disable>
	if (err) {
   2eee2:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   2eee4:	f7f3 ffd8 	bl	22e98 <multithreading_lock_release>
}
   2eee8:	4620      	mov	r0, r4
   2eeea:	bd10      	pop	{r4, pc}

0002eeec <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   2eeec:	f7f4 b814 	b.w	22f18 <rand_prio_low_vector_get>

0002eef0 <hci_driver_send>:
{
   2eef0:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2eef2:	8a03      	ldrh	r3, [r0, #16]
{
   2eef4:	4605      	mov	r5, r0
	if (!buf->len) {
   2eef6:	b373      	cbz	r3, 2ef56 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2eef8:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   2eefa:	b1a3      	cbz	r3, 2ef26 <hci_driver_send+0x36>
   2eefc:	2b02      	cmp	r3, #2
   2eefe:	d12a      	bne.n	2ef56 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2ef00:	f04f 30ff 	mov.w	r0, #4294967295
   2ef04:	f04f 31ff 	mov.w	r1, #4294967295
   2ef08:	f7f3 ffbe 	bl	22e88 <multithreading_lock_acquire>
	if (!errcode) {
   2ef0c:	4604      	mov	r4, r0
   2ef0e:	b940      	cbnz	r0, 2ef22 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   2ef10:	68e8      	ldr	r0, [r5, #12]
   2ef12:	f7df f901 	bl	e118 <sdc_hci_data_put>
   2ef16:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2ef18:	f7f3 ffbe 	bl	22e98 <multithreading_lock_release>
		if (errcode) {
   2ef1c:	b1b4      	cbz	r4, 2ef4c <hci_driver_send+0x5c>
			receive_signal_raise();
   2ef1e:	f7f4 f80f 	bl	22f40 <receive_signal_raise>
}
   2ef22:	4620      	mov	r0, r4
   2ef24:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2ef26:	f04f 30ff 	mov.w	r0, #4294967295
   2ef2a:	f04f 31ff 	mov.w	r1, #4294967295
   2ef2e:	f7f3 ffab 	bl	22e88 <multithreading_lock_acquire>
	if (!errcode) {
   2ef32:	4604      	mov	r4, r0
   2ef34:	2800      	cmp	r0, #0
   2ef36:	d1f4      	bne.n	2ef22 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   2ef38:	68e8      	ldr	r0, [r5, #12]
   2ef3a:	f7f4 f98d 	bl	23258 <hci_internal_cmd_put>
   2ef3e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2ef40:	f7f3 ffaa 	bl	22e98 <multithreading_lock_release>
	if (errcode) {
   2ef44:	2c00      	cmp	r4, #0
   2ef46:	d1ec      	bne.n	2ef22 <hci_driver_send+0x32>
	receive_signal_raise();
   2ef48:	f7f3 fffa 	bl	22f40 <receive_signal_raise>
		net_buf_unref(buf);
   2ef4c:	4628      	mov	r0, r5
   2ef4e:	f7f1 fdf9 	bl	20b44 <net_buf_unref>
   2ef52:	2400      	movs	r4, #0
   2ef54:	e7e5      	b.n	2ef22 <hci_driver_send+0x32>
	switch (type) {
   2ef56:	f06f 0415 	mvn.w	r4, #21
   2ef5a:	e7e2      	b.n	2ef22 <hci_driver_send+0x32>

0002ef5c <receive_work_handler>:
	hci_driver_receive_process();
   2ef5c:	f7f4 b900 	b.w	23160 <hci_driver_receive_process>

0002ef60 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2ef60:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ef62:	b08d      	sub	sp, #52	; 0x34
   2ef64:	4615      	mov	r5, r2
   2ef66:	466a      	mov	r2, sp
   2ef68:	f100 0310 	add.w	r3, r0, #16
   2ef6c:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   2ef6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2ef72:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   2ef76:	4283      	cmp	r3, r0
   2ef78:	d1f9      	bne.n	2ef6e <bt_encrypt_le+0xe>
   2ef7a:	aa04      	add	r2, sp, #16
   2ef7c:	f101 0310 	add.w	r3, r1, #16
   2ef80:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   2ef82:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2ef86:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   2ef8a:	4299      	cmp	r1, r3
   2ef8c:	d1f9      	bne.n	2ef82 <bt_encrypt_le+0x22>
	LOG_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2ef8e:	f04f 30ff 	mov.w	r0, #4294967295
   2ef92:	f04f 31ff 	mov.w	r1, #4294967295
   2ef96:	f7f3 ff77 	bl	22e88 <multithreading_lock_acquire>

	if (!errcode) {
   2ef9a:	4604      	mov	r4, r0
   2ef9c:	b990      	cbnz	r0, 2efc4 <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2ef9e:	aa08      	add	r2, sp, #32
   2efa0:	4639      	mov	r1, r7
   2efa2:	4630      	mov	r0, r6
   2efa4:	f7de fdf7 	bl	db96 <sdc_soc_ecb_block_encrypt>
   2efa8:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2efaa:	f7f3 ff75 	bl	22e98 <multithreading_lock_release>
	}

	if (!errcode) {
   2efae:	b94c      	cbnz	r4, 2efc4 <bt_encrypt_le+0x64>
   2efb0:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   2efb2:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   2efb6:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   2efb8:	f812 1901 	ldrb.w	r1, [r2], #-1
   2efbc:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   2efc0:	429d      	cmp	r5, r3
   2efc2:	d1f9      	bne.n	2efb8 <bt_encrypt_le+0x58>

		LOG_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2efc4:	4620      	mov	r0, r4
   2efc6:	b00d      	add	sp, #52	; 0x34
   2efc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002efca <sys_memcpy_swap.constprop.0>:
   2efca:	f101 0320 	add.w	r3, r1, #32
   2efce:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   2efd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2efd4:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2efd8:	428b      	cmp	r3, r1
   2efda:	d1f9      	bne.n	2efd0 <sys_memcpy_swap.constprop.0+0x6>
}
   2efdc:	4770      	bx	lr

0002efde <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2efde:	2100      	movs	r1, #0
   2efe0:	f7f4 bf0e 	b.w	23e00 <cmd_le_generate_dhkey>

0002efe4 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2efe4:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2efe8:	2901      	cmp	r1, #1
   2efea:	d801      	bhi.n	2eff0 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2efec:	f7f4 bf08 	b.w	23e00 <cmd_le_generate_dhkey>
}
   2eff0:	2012      	movs	r0, #18
   2eff2:	4770      	bx	lr

0002eff4 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2eff4:	4668      	mov	r0, sp
   2eff6:	f020 0107 	bic.w	r1, r0, #7
   2effa:	468d      	mov	sp, r1
   2effc:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2effe:	f7dd fa1f 	bl	c440 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2f002:	f7e7 ff2f 	bl	16e64 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2f006:	f7e8 f817 	bl	17038 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2f00a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2f00e:	4685      	mov	sp, r0
   2f010:	4770      	bx	lr

0002f012 <mpsl_low_prio_work_handler>:
{
   2f012:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2f014:	f04f 31ff 	mov.w	r1, #4294967295
   2f018:	f04f 30ff 	mov.w	r0, #4294967295
   2f01c:	f7f3 ff34 	bl	22e88 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   2f020:	f7e2 fe60 	bl	11ce4 <mpsl_low_priority_process>
}
   2f024:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   2f028:	f7f3 bf36 	b.w	22e98 <multithreading_lock_release>

0002f02c <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2f02c:	4668      	mov	r0, sp
   2f02e:	f020 0107 	bic.w	r1, r0, #7
   2f032:	468d      	mov	sp, r1
   2f034:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2f036:	f7dd f9b9 	bl	c3ac <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2f03a:	f7e7 ff13 	bl	16e64 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2f03e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2f042:	4685      	mov	sp, r0
   2f044:	4770      	bx	lr

0002f046 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2f046:	4668      	mov	r0, sp
   2f048:	f020 0107 	bic.w	r1, r0, #7
   2f04c:	468d      	mov	sp, r1
   2f04e:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2f050:	f7da fe34 	bl	9cbc <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2f054:	f7e7 ff06 	bl	16e64 <_arch_isr_direct_pm>
   2f058:	f7e7 ffee 	bl	17038 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2f05c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2f060:	4685      	mov	sp, r0
   2f062:	4770      	bx	lr

0002f064 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   2f064:	b508      	push	{r3, lr}

	mpsl_fem_init();
   2f066:	f7e3 f813 	bl	12090 <mpsl_fem_init>

	return 0;
}
   2f06a:	2000      	movs	r0, #0
   2f06c:	bd08      	pop	{r3, pc}

0002f06e <nrfx_clock_stop>:
	switch (domain) {
   2f06e:	2801      	cmp	r0, #1
   2f070:	d101      	bne.n	2f076 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   2f072:	f7de b879 	b.w	d168 <mpsl_clock_hfclk_release>
}
   2f076:	4770      	bx	lr

0002f078 <nrfx_clock_enable>:
}
   2f078:	4770      	bx	lr

0002f07a <nrfx_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2f07a:	f7dd be7f 	b.w	cd7c <MPSL_IRQ_CLOCK_Handler>

0002f07e <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2f07e:	f7de ba57 	b.w	d530 <mpsl_is_initialized>

0002f082 <nrf_flash_sync_get_timestamp_begin>:
}
   2f082:	4770      	bx	lr

0002f084 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2f084:	f7f8 bce6 	b.w	27a54 <nrf_cc3xx_platform_init>

0002f088 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
   2f088:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2f08a:	f7e7 fd2f 	bl	16aec <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2f08e:	f7e7 fe03 	bl	16c98 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
   2f092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   2f096:	f7f8 bcdd 	b.w	27a54 <nrf_cc3xx_platform_init>

0002f09a <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2f09a:	4700      	bx	r0

0002f09c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2f09c:	f000 bd2e 	b.w	2fafc <z_impl_k_busy_wait>

0002f0a0 <nrf_gpio_reconfigure>:
{
   2f0a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2f0a2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f0a4:	a801      	add	r0, sp, #4
{
   2f0a6:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   2f0aa:	4616      	mov	r6, r2
   2f0ac:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f0ae:	f7f5 f9bd 	bl	2442c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2f0b2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2f0b4:	f1b6 0c00 	subs.w	ip, r6, #0
   2f0b8:	bf18      	it	ne
   2f0ba:	f04f 0c01 	movne.w	ip, #1
   2f0be:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2f0c2:	1e0b      	subs	r3, r1, #0
   2f0c4:	bf18      	it	ne
   2f0c6:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2f0c8:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2f0ca:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2f0ce:	bf14      	ite	ne
   2f0d0:	f04f 0c0c 	movne.w	ip, #12
   2f0d4:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2f0d8:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2f0da:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2f0de:	bf14      	ite	ne
   2f0e0:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   2f0e4:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2f0e8:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2f0ea:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2f0ee:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2f0f2:	bf14      	ite	ne
   2f0f4:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2f0f8:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2f0fc:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2f100:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2f104:	b101      	cbz	r1, 2f108 <nrf_gpio_reconfigure+0x68>
   2f106:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2f108:	b10e      	cbz	r6, 2f10e <nrf_gpio_reconfigure+0x6e>
   2f10a:	7836      	ldrb	r6, [r6, #0]
   2f10c:	0076      	lsls	r6, r6, #1
   2f10e:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2f110:	b10d      	cbz	r5, 2f116 <nrf_gpio_reconfigure+0x76>
   2f112:	782d      	ldrb	r5, [r5, #0]
   2f114:	00ad      	lsls	r5, r5, #2
   2f116:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2f118:	b10c      	cbz	r4, 2f11e <nrf_gpio_reconfigure+0x7e>
   2f11a:	7824      	ldrb	r4, [r4, #0]
   2f11c:	0224      	lsls	r4, r4, #8
   2f11e:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2f120:	b10f      	cbz	r7, 2f126 <nrf_gpio_reconfigure+0x86>
   2f122:	783f      	ldrb	r7, [r7, #0]
   2f124:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2f126:	430c      	orrs	r4, r1
   2f128:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2f12a:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2f12e:	b003      	add	sp, #12
   2f130:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f132 <nrf_gpio_cfg_sense_set>:
{
   2f132:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2f134:	f10d 030f 	add.w	r3, sp, #15
   2f138:	9301      	str	r3, [sp, #4]
   2f13a:	2300      	movs	r3, #0
{
   2f13c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2f140:	9300      	str	r3, [sp, #0]
   2f142:	461a      	mov	r2, r3
   2f144:	4619      	mov	r1, r3
   2f146:	f7ff ffab 	bl	2f0a0 <nrf_gpio_reconfigure>
}
   2f14a:	b005      	add	sp, #20
   2f14c:	f85d fb04 	ldr.w	pc, [sp], #4

0002f150 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   2f150:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2f154:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   2f156:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2f158:	4350      	muls	r0, r2
   2f15a:	4770      	bx	lr

0002f15c <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2f15c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2f160:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2f162:	4770      	bx	lr

0002f164 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2f164:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2f168:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2f16a:	4770      	bx	lr

0002f16c <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f16c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2f170:	681a      	ldr	r2, [r3, #0]
   2f172:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f174:	bf1f      	itttt	ne
   2f176:	2200      	movne	r2, #0
   2f178:	601a      	strne	r2, [r3, #0]
   2f17a:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f17c:	2001      	movne	r0, #1
   2f17e:	bf08      	it	eq
   2f180:	2000      	moveq	r0, #0
}
   2f182:	4770      	bx	lr

0002f184 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   2f184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2f188:	f44f 7260 	mov.w	r2, #896	; 0x380
   2f18c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2f190:	4770      	bx	lr

0002f192 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   2f192:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2f196:	f44f 7260 	mov.w	r2, #896	; 0x380
   2f19a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2f19e:	4770      	bx	lr

0002f1a0 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   2f1a0:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   2f1a2:	f7f5 fd35 	bl	24c10 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   2f1a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   2f1aa:	f7ff bf66 	b.w	2f07a <nrfx_clock_irq_handler>

0002f1ae <nrfx_usbd_consumer>:
{
   2f1ae:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   2f1b0:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   2f1b2:	429c      	cmp	r4, r3
   2f1b4:	d209      	bcs.n	2f1ca <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
   2f1b6:	2500      	movs	r5, #0
   2f1b8:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   2f1ba:	6809      	ldr	r1, [r1, #0]
   2f1bc:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
   2f1be:	429a      	cmp	r2, r3
   2f1c0:	d10c      	bne.n	2f1dc <nrfx_usbd_consumer+0x2e>
   2f1c2:	1e20      	subs	r0, r4, #0
   2f1c4:	bf18      	it	ne
   2f1c6:	2001      	movne	r0, #1
}
   2f1c8:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
   2f1ca:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   2f1cc:	680d      	ldr	r5, [r1, #0]
   2f1ce:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
   2f1d0:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
   2f1d2:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   2f1d4:	4418      	add	r0, r3
        p_transfer->size = size;
   2f1d6:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   2f1d8:	6008      	str	r0, [r1, #0]
   2f1da:	e7f0      	b.n	2f1be <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
   2f1dc:	2000      	movs	r0, #0
   2f1de:	e7f3      	b.n	2f1c8 <nrfx_usbd_consumer+0x1a>

0002f1e0 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
   2f1e0:	684b      	ldr	r3, [r1, #4]
   2f1e2:	429a      	cmp	r2, r3
   2f1e4:	bf28      	it	cs
   2f1e6:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
   2f1e8:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
   2f1ea:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
   2f1ee:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2f1f0:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   2f1f2:	1a80      	subs	r0, r0, r2
   2f1f4:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2f1f6:	4413      	add	r3, r2
}
   2f1f8:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   2f1fa:	600b      	str	r3, [r1, #0]
}
   2f1fc:	bf18      	it	ne
   2f1fe:	2001      	movne	r0, #1
   2f200:	4770      	bx	lr

0002f202 <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
   2f202:	684b      	ldr	r3, [r1, #4]
   2f204:	429a      	cmp	r2, r3
   2f206:	bf28      	it	cs
   2f208:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   2f20a:	b162      	cbz	r2, 2f226 <nrfx_usbd_feeder_ram_zlp+0x24>
   2f20c:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
   2f20e:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
   2f212:	684b      	ldr	r3, [r1, #4]
   2f214:	1a9b      	subs	r3, r3, r2
   2f216:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2f218:	680b      	ldr	r3, [r1, #0]
}
   2f21a:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
   2f21c:	4413      	add	r3, r2
   2f21e:	600b      	str	r3, [r1, #0]
}
   2f220:	bf18      	it	ne
   2f222:	2001      	movne	r0, #1
   2f224:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   2f226:	4613      	mov	r3, r2
   2f228:	e7f1      	b.n	2f20e <nrfx_usbd_feeder_ram_zlp+0xc>

0002f22a <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   2f22a:	43c3      	mvns	r3, r0
   2f22c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   2f230:	f000 000f 	and.w	r0, r0, #15
}
   2f234:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   2f238:	4770      	bx	lr

0002f23a <ev_started_handler>:
}
   2f23a:	4770      	bx	lr

0002f23c <nrf_usbd_epin_dma_handler>:
{
   2f23c:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   2f23e:	f7f5 fe5b 	bl	24ef8 <usbd_dma_pending_clear>
{
   2f242:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2f244:	f7f5 fd4e 	bl	24ce4 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2f248:	7b83      	ldrb	r3, [r0, #14]
   2f24a:	2b03      	cmp	r3, #3
   2f24c:	d10a      	bne.n	2f264 <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2f24e:	4608      	mov	r0, r1
   2f250:	f7ff ffeb 	bl	2f22a <ep2bit>
   2f254:	2301      	movs	r3, #1
   2f256:	fa03 f000 	lsl.w	r0, r3, r0
   2f25a:	43c0      	mvns	r0, r0
}
   2f25c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2f260:	f7f5 be3a 	b.w	24ed8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2f264:	6803      	ldr	r3, [r0, #0]
   2f266:	2b00      	cmp	r3, #0
   2f268:	d0f1      	beq.n	2f24e <nrf_usbd_epin_dma_handler+0x12>
}
   2f26a:	bd08      	pop	{r3, pc}

0002f26c <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   2f26c:	2087      	movs	r0, #135	; 0x87
   2f26e:	f7ff bfe5 	b.w	2f23c <nrf_usbd_epin_dma_handler>

0002f272 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   2f272:	2086      	movs	r0, #134	; 0x86
   2f274:	f7ff bfe2 	b.w	2f23c <nrf_usbd_epin_dma_handler>

0002f278 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   2f278:	2085      	movs	r0, #133	; 0x85
   2f27a:	f7ff bfdf 	b.w	2f23c <nrf_usbd_epin_dma_handler>

0002f27e <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   2f27e:	2084      	movs	r0, #132	; 0x84
   2f280:	f7ff bfdc 	b.w	2f23c <nrf_usbd_epin_dma_handler>

0002f284 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   2f284:	2083      	movs	r0, #131	; 0x83
   2f286:	f7ff bfd9 	b.w	2f23c <nrf_usbd_epin_dma_handler>

0002f28a <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   2f28a:	2082      	movs	r0, #130	; 0x82
   2f28c:	f7ff bfd6 	b.w	2f23c <nrf_usbd_epin_dma_handler>

0002f290 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   2f290:	2081      	movs	r0, #129	; 0x81
   2f292:	f7ff bfd3 	b.w	2f23c <nrf_usbd_epin_dma_handler>

0002f296 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   2f296:	f7f5 be41 	b.w	24f1c <nrf_usbd_ep0in_dma_handler>

0002f29a <nrfx_usbd_ep_max_packet_size_set>:
{
   2f29a:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2f29c:	f7f5 fd22 	bl	24ce4 <ep_state_access>
    p_state->max_packet_size = size;
   2f2a0:	8181      	strh	r1, [r0, #12]
}
   2f2a2:	bd08      	pop	{r3, pc}

0002f2a4 <nrfx_usbd_ep_status_get>:
{
   2f2a4:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   2f2a6:	f7f5 fd1d 	bl	24ce4 <ep_state_access>
	__asm__ volatile(
   2f2aa:	f04f 0240 	mov.w	r2, #64	; 0x40
   2f2ae:	f3ef 8311 	mrs	r3, BASEPRI
   2f2b2:	f382 8812 	msr	BASEPRI_MAX, r2
   2f2b6:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   2f2ba:	6882      	ldr	r2, [r0, #8]
   2f2bc:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   2f2be:	6802      	ldr	r2, [r0, #0]
   2f2c0:	b92a      	cbnz	r2, 2f2ce <nrfx_usbd_ep_status_get+0x2a>
   2f2c2:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   2f2c4:	f383 8811 	msr	BASEPRI, r3
   2f2c8:	f3bf 8f6f 	isb	sy
}
   2f2cc:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   2f2ce:	2004      	movs	r0, #4
   2f2d0:	e7f8      	b.n	2f2c4 <nrfx_usbd_ep_status_get+0x20>

0002f2d2 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   2f2d2:	2007      	movs	r0, #7
   2f2d4:	f7f6 b98e 	b.w	255f4 <nrf_usbd_epout_dma_handler>

0002f2d8 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   2f2d8:	2006      	movs	r0, #6
   2f2da:	f7f6 b98b 	b.w	255f4 <nrf_usbd_epout_dma_handler>

0002f2de <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   2f2de:	2005      	movs	r0, #5
   2f2e0:	f7f6 b988 	b.w	255f4 <nrf_usbd_epout_dma_handler>

0002f2e4 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   2f2e4:	2004      	movs	r0, #4
   2f2e6:	f7f6 b985 	b.w	255f4 <nrf_usbd_epout_dma_handler>

0002f2ea <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   2f2ea:	2003      	movs	r0, #3
   2f2ec:	f7f6 b982 	b.w	255f4 <nrf_usbd_epout_dma_handler>

0002f2f0 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   2f2f0:	2002      	movs	r0, #2
   2f2f2:	f7f6 b97f 	b.w	255f4 <nrf_usbd_epout_dma_handler>

0002f2f6 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   2f2f6:	2001      	movs	r0, #1
   2f2f8:	f7f6 b97c 	b.w	255f4 <nrf_usbd_epout_dma_handler>

0002f2fc <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   2f2fc:	f7f6 ba70 	b.w	257e0 <usbd_ep_abort>

0002f300 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2f300:	4770      	bx	lr

0002f302 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2f302:	b140      	cbz	r0, 2f316 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2f304:	68c3      	ldr	r3, [r0, #12]
   2f306:	7858      	ldrb	r0, [r3, #1]
   2f308:	f010 0001 	ands.w	r0, r0, #1
   2f30c:	bf1e      	ittt	ne
   2f30e:	7818      	ldrbne	r0, [r3, #0]
   2f310:	fab0 f080 	clzne	r0, r0
   2f314:	0940      	lsrne	r0, r0, #5
}
   2f316:	4770      	bx	lr

0002f318 <z_early_memset>:
	(void) memset(dst, c, n);
   2f318:	f7fc bfec 	b.w	2c2f4 <memset>

0002f31c <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   2f31c:	f7fc bfdf 	b.w	2c2de <memcpy>

0002f320 <k_heap_init>:
{
   2f320:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2f322:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2f326:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2f32a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2f32c:	f7fb bac2 	b.w	2a8b4 <sys_heap_init>

0002f330 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2f330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f334:	b085      	sub	sp, #20
   2f336:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   2f33a:	4607      	mov	r7, r0
   2f33c:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2f33e:	4650      	mov	r0, sl
   2f340:	4621      	mov	r1, r4
{
   2f342:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2f344:	f000 fbde 	bl	2fb04 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2f348:	f1b4 3fff 	cmp.w	r4, #4294967295
   2f34c:	bf08      	it	eq
   2f34e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2f352:	4605      	mov	r5, r0
   2f354:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2f356:	bf04      	itt	eq
   2f358:	f04f 35ff 	moveq.w	r5, #4294967295
   2f35c:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2f360:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   2f364:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f368:	f3ef 8411 	mrs	r4, BASEPRI
   2f36c:	f383 8812 	msr	BASEPRI_MAX, r3
   2f370:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2f374:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2f378:	464a      	mov	r2, r9
   2f37a:	4641      	mov	r1, r8
   2f37c:	4638      	mov	r0, r7
   2f37e:	f7fb fa32 	bl	2a7e6 <sys_heap_aligned_alloc>
   2f382:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2f384:	f7f7 fe9a 	bl	270bc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2f388:	9b03      	ldr	r3, [sp, #12]
   2f38a:	b13b      	cbz	r3, 2f39c <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   2f38c:	f384 8811 	msr	BASEPRI, r4
   2f390:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2f394:	4618      	mov	r0, r3
   2f396:	b005      	add	sp, #20
   2f398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2f39c:	1a28      	subs	r0, r5, r0
   2f39e:	eb66 0101 	sbc.w	r1, r6, r1
   2f3a2:	2801      	cmp	r0, #1
   2f3a4:	f171 0200 	sbcs.w	r2, r1, #0
   2f3a8:	dbf0      	blt.n	2f38c <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2f3aa:	e9cd 0100 	strd	r0, r1, [sp]
   2f3ae:	465a      	mov	r2, fp
   2f3b0:	4621      	mov	r1, r4
   2f3b2:	4650      	mov	r0, sl
   2f3b4:	f7f7 faf2 	bl	2699c <z_pend_curr>
	__asm__ volatile(
   2f3b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f3bc:	f3ef 8411 	mrs	r4, BASEPRI
   2f3c0:	f383 8812 	msr	BASEPRI_MAX, r3
   2f3c4:	f3bf 8f6f 	isb	sy
	return k;
   2f3c8:	e7d6      	b.n	2f378 <k_heap_aligned_alloc+0x48>

0002f3ca <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2f3ca:	b538      	push	{r3, r4, r5, lr}
   2f3cc:	4604      	mov	r4, r0
   2f3ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f3d2:	f3ef 8511 	mrs	r5, BASEPRI
   2f3d6:	f383 8812 	msr	BASEPRI_MAX, r3
   2f3da:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2f3de:	f7fb f9ca 	bl	2a776 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2f3e2:	f104 000c 	add.w	r0, r4, #12
   2f3e6:	f000 fb1a 	bl	2fa1e <z_unpend_all>
   2f3ea:	b130      	cbz	r0, 2f3fa <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2f3ec:	4629      	mov	r1, r5
   2f3ee:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2f3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2f3f6:	f7f7 bb35 	b.w	26a64 <z_reschedule>
	__asm__ volatile(
   2f3fa:	f385 8811 	msr	BASEPRI, r5
   2f3fe:	f3bf 8f6f 	isb	sy
}
   2f402:	bd38      	pop	{r3, r4, r5, pc}

0002f404 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2f404:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   2f408:	4313      	orrs	r3, r2
   2f40a:	f013 0303 	ands.w	r3, r3, #3
   2f40e:	d10c      	bne.n	2f42a <create_free_list+0x26>
	slab->free_list = NULL;
   2f410:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2f412:	6881      	ldr	r1, [r0, #8]
   2f414:	4299      	cmp	r1, r3
   2f416:	d801      	bhi.n	2f41c <create_free_list+0x18>
	return 0;
   2f418:	2000      	movs	r0, #0
   2f41a:	4770      	bx	lr
		*(char **)p = slab->free_list;
   2f41c:	6941      	ldr	r1, [r0, #20]
   2f41e:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2f420:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   2f422:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2f424:	3301      	adds	r3, #1
		p += slab->block_size;
   2f426:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2f428:	e7f3      	b.n	2f412 <create_free_list+0xe>
		return -EINVAL;
   2f42a:	f06f 0015 	mvn.w	r0, #21
}
   2f42e:	4770      	bx	lr

0002f430 <k_mem_slab_init>:
{
   2f430:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   2f432:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   2f436:	2300      	movs	r3, #0
	slab->buffer = buffer;
   2f438:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   2f43a:	6183      	str	r3, [r0, #24]
{
   2f43c:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   2f43e:	f7ff ffe1 	bl	2f404 <create_free_list>
	if (rc < 0) {
   2f442:	2800      	cmp	r0, #0
   2f444:	bfa8      	it	ge
   2f446:	e9c4 4400 	strdge	r4, r4, [r4]
}
   2f44a:	bd10      	pop	{r4, pc}

0002f44c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2f44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f44e:	4604      	mov	r4, r0
   2f450:	460d      	mov	r5, r1
	__asm__ volatile(
   2f452:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f456:	f3ef 8611 	mrs	r6, BASEPRI
   2f45a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f45e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2f462:	6947      	ldr	r7, [r0, #20]
   2f464:	b977      	cbnz	r7, 2f484 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2f466:	f000 fa90 	bl	2f98a <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2f46a:	b158      	cbz	r0, 2f484 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2f46c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2f46e:	6142      	str	r2, [r0, #20]
   2f470:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2f472:	f000 fa2b 	bl	2f8cc <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2f476:	4631      	mov	r1, r6
   2f478:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2f47c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2f480:	f7f7 baf0 	b.w	26a64 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2f484:	682b      	ldr	r3, [r5, #0]
   2f486:	6962      	ldr	r2, [r4, #20]
   2f488:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2f48a:	682b      	ldr	r3, [r5, #0]
   2f48c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2f48e:	69a3      	ldr	r3, [r4, #24]
   2f490:	3b01      	subs	r3, #1
   2f492:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2f494:	f386 8811 	msr	BASEPRI, r6
   2f498:	f3bf 8f6f 	isb	sy
}
   2f49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002f49e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2f49e:	f3ef 8005 	mrs	r0, IPSR
}
   2f4a2:	3800      	subs	r0, #0
   2f4a4:	bf18      	it	ne
   2f4a6:	2001      	movne	r0, #1
   2f4a8:	4770      	bx	lr

0002f4aa <z_impl_k_thread_name_set>:
}
   2f4aa:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2f4ae:	4770      	bx	lr

0002f4b0 <k_thread_name_get>:
}
   2f4b0:	2000      	movs	r0, #0
   2f4b2:	4770      	bx	lr

0002f4b4 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2f4b4:	f7f7 bae8 	b.w	26a88 <z_sched_start>

0002f4b8 <z_pm_save_idle_exit>:
{
   2f4b8:	b508      	push	{r3, lr}
	pm_system_resume();
   2f4ba:	f7e5 fe9f 	bl	151fc <pm_system_resume>
}
   2f4be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2f4c2:	f7ff bcf0 	b.w	2eea6 <sys_clock_idle_exit>

0002f4c6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2f4c6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2f4ca:	428b      	cmp	r3, r1
   2f4cc:	d001      	beq.n	2f4d2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2f4ce:	f7f7 ba83 	b.w	269d8 <z_set_prio>
}
   2f4d2:	2000      	movs	r0, #0
   2f4d4:	4770      	bx	lr

0002f4d6 <z_impl_k_mutex_init>:
{
   2f4d6:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2f4d8:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2f4da:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2f4de:	e9c3 3300 	strd	r3, r3, [r3]
}
   2f4e2:	4770      	bx	lr

0002f4e4 <queue_insert>:
{
   2f4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f4e8:	4699      	mov	r9, r3
   2f4ea:	4604      	mov	r4, r0
   2f4ec:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2f4f0:	460d      	mov	r5, r1
   2f4f2:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2f4f4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2f4f8:	f04f 0240 	mov.w	r2, #64	; 0x40
   2f4fc:	f3ef 8711 	mrs	r7, BASEPRI
   2f500:	f382 8812 	msr	BASEPRI_MAX, r2
   2f504:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2f508:	b103      	cbz	r3, 2f50c <queue_insert+0x28>
	return list->tail;
   2f50a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2f50c:	4630      	mov	r0, r6
   2f50e:	f000 fa3c 	bl	2f98a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2f512:	b158      	cbz	r0, 2f52c <queue_insert+0x48>
   2f514:	2300      	movs	r3, #0
   2f516:	67c3      	str	r3, [r0, #124]	; 0x7c
   2f518:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2f51c:	f000 f9d6 	bl	2f8cc <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2f520:	4630      	mov	r0, r6
   2f522:	4639      	mov	r1, r7
   2f524:	f7f7 fa9e 	bl	26a64 <z_reschedule>
		return 0;
   2f528:	2000      	movs	r0, #0
   2f52a:	e00c      	b.n	2f546 <queue_insert+0x62>
	if (alloc) {
   2f52c:	f1b9 0f00 	cmp.w	r9, #0
   2f530:	d01b      	beq.n	2f56a <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2f532:	2108      	movs	r1, #8
   2f534:	f7f7 ff02 	bl	2733c <z_thread_aligned_alloc>
		if (anode == NULL) {
   2f538:	b938      	cbnz	r0, 2f54a <queue_insert+0x66>
	__asm__ volatile(
   2f53a:	f387 8811 	msr	BASEPRI, r7
   2f53e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2f542:	f06f 000b 	mvn.w	r0, #11
}
   2f546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2f54a:	2201      	movs	r2, #1
		anode->data = data;
   2f54c:	f8c0 8004 	str.w	r8, [r0, #4]
   2f550:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f552:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f554:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2f558:	b95d      	cbnz	r5, 2f572 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f55a:	6822      	ldr	r2, [r4, #0]
   2f55c:	430a      	orrs	r2, r1
   2f55e:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2f560:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2f562:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2f564:	b96a      	cbnz	r2, 2f582 <queue_insert+0x9e>
	list->tail = node;
   2f566:	6060      	str	r0, [r4, #4]
}
   2f568:	e00b      	b.n	2f582 <queue_insert+0x9e>
	node->next_and_flags = flags;
   2f56a:	f8c8 9000 	str.w	r9, [r8]
}
   2f56e:	4640      	mov	r0, r8
   2f570:	e7ef      	b.n	2f552 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2f572:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2f574:	2a03      	cmp	r2, #3
   2f576:	d810      	bhi.n	2f59a <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f578:	6001      	str	r1, [r0, #0]
	return list->tail;
   2f57a:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2f57c:	b939      	cbnz	r1, 2f58e <queue_insert+0xaa>
	list->head = node;
   2f57e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2f582:	2104      	movs	r1, #4
   2f584:	f104 0010 	add.w	r0, r4, #16
   2f588:	f000 fc47 	bl	2fe1a <z_handle_obj_poll_events>
   2f58c:	e7c8      	b.n	2f520 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f58e:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f590:	f002 0203 	and.w	r2, r2, #3
   2f594:	4302      	orrs	r2, r0
   2f596:	600a      	str	r2, [r1, #0]
   2f598:	e7e5      	b.n	2f566 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2f59a:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f59e:	430a      	orrs	r2, r1
   2f5a0:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f5a2:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f5a4:	f002 0203 	and.w	r2, r2, #3
   2f5a8:	ea40 0302 	orr.w	r3, r0, r2
   2f5ac:	602b      	str	r3, [r5, #0]
}
   2f5ae:	e7e8      	b.n	2f582 <queue_insert+0x9e>

0002f5b0 <z_queue_node_peek>:
{
   2f5b0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2f5b2:	4604      	mov	r4, r0
   2f5b4:	b130      	cbz	r0, 2f5c4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f5b6:	6802      	ldr	r2, [r0, #0]
   2f5b8:	0793      	lsls	r3, r2, #30
   2f5ba:	d003      	beq.n	2f5c4 <z_queue_node_peek+0x14>
		ret = anode->data;
   2f5bc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2f5be:	b109      	cbz	r1, 2f5c4 <z_queue_node_peek+0x14>
			k_free(anode);
   2f5c0:	f000 fc41 	bl	2fe46 <k_free>
}
   2f5c4:	4620      	mov	r0, r4
   2f5c6:	bd10      	pop	{r4, pc}

0002f5c8 <z_impl_k_queue_init>:
	list->head = NULL;
   2f5c8:	2300      	movs	r3, #0
	list->tail = NULL;
   2f5ca:	e9c0 3300 	strd	r3, r3, [r0]
   2f5ce:	f100 0308 	add.w	r3, r0, #8
   2f5d2:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2f5d6:	f100 0310 	add.w	r3, r0, #16
   2f5da:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2f5de:	4770      	bx	lr

0002f5e0 <k_queue_append>:
{
   2f5e0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2f5e2:	2301      	movs	r3, #1
   2f5e4:	9300      	str	r3, [sp, #0]
   2f5e6:	2300      	movs	r3, #0
{
   2f5e8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2f5ea:	4619      	mov	r1, r3
   2f5ec:	f7ff ff7a 	bl	2f4e4 <queue_insert>
}
   2f5f0:	b003      	add	sp, #12
   2f5f2:	f85d fb04 	ldr.w	pc, [sp], #4

0002f5f6 <k_queue_prepend>:
{
   2f5f6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2f5f8:	2300      	movs	r3, #0
{
   2f5fa:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2f5fc:	9300      	str	r3, [sp, #0]
   2f5fe:	4619      	mov	r1, r3
   2f600:	f7ff ff70 	bl	2f4e4 <queue_insert>
}
   2f604:	b003      	add	sp, #12
   2f606:	f85d fb04 	ldr.w	pc, [sp], #4

0002f60a <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   2f60a:	6800      	ldr	r0, [r0, #0]
   2f60c:	2100      	movs	r1, #0
   2f60e:	f7ff bfcf 	b.w	2f5b0 <z_queue_node_peek>

0002f612 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2f612:	b15a      	cbz	r2, 2f62c <z_impl_k_sem_init+0x1a>
   2f614:	428a      	cmp	r2, r1
   2f616:	d309      	bcc.n	2f62c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2f618:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2f61c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2f620:	e9c0 0000 	strd	r0, r0, [r0]
   2f624:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2f628:	2000      	movs	r0, #0
   2f62a:	4770      	bx	lr
		return -EINVAL;
   2f62c:	f06f 0015 	mvn.w	r0, #21
}
   2f630:	4770      	bx	lr

0002f632 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2f632:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2f634:	2301      	movs	r3, #1
   2f636:	408b      	lsls	r3, r1
   2f638:	ea22 0303 	bic.w	r3, r2, r3
   2f63c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2f63e:	fa22 f001 	lsr.w	r0, r2, r1
}
   2f642:	f000 0001 	and.w	r0, r0, #1
   2f646:	4770      	bx	lr

0002f648 <unschedule_locked>:
{
   2f648:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2f64a:	2103      	movs	r1, #3
{
   2f64c:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2f64e:	300c      	adds	r0, #12
   2f650:	f7ff ffef 	bl	2f632 <flag_test_and_clear>
   2f654:	b130      	cbz	r0, 2f664 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   2f656:	f104 0010 	add.w	r0, r4, #16
   2f65a:	f000 fa13 	bl	2fa84 <z_abort_timeout>
   2f65e:	fab0 f080 	clz	r0, r0
   2f662:	0940      	lsrs	r0, r0, #5
}
   2f664:	bd10      	pop	{r4, pc}

0002f666 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2f666:	b120      	cbz	r0, 2f672 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2f668:	2200      	movs	r2, #0
   2f66a:	4611      	mov	r1, r2
   2f66c:	3088      	adds	r0, #136	; 0x88
   2f66e:	f000 b9e6 	b.w	2fa3e <z_sched_wake>
}
   2f672:	4770      	bx	lr

0002f674 <cancel_async_locked>:
{
   2f674:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2f676:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2f678:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2f67c:	079b      	lsls	r3, r3, #30
{
   2f67e:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2f680:	d416      	bmi.n	2f6b0 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2f682:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2f684:	2102      	movs	r1, #2
   2f686:	300c      	adds	r0, #12
   2f688:	f7ff ffd3 	bl	2f632 <flag_test_and_clear>
   2f68c:	b180      	cbz	r0, 2f6b0 <cancel_async_locked+0x3c>
	return list->head;
   2f68e:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f692:	b16a      	cbz	r2, 2f6b0 <cancel_async_locked+0x3c>
   2f694:	4294      	cmp	r4, r2
   2f696:	d11d      	bne.n	2f6d4 <cancel_async_locked+0x60>
	return node->next;
   2f698:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f69a:	b99e      	cbnz	r6, 2f6c4 <cancel_async_locked+0x50>
   2f69c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   2f6a0:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2f6a4:	429c      	cmp	r4, r3
   2f6a6:	d101      	bne.n	2f6ac <cancel_async_locked+0x38>
	list->tail = node;
   2f6a8:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   2f6ac:	2300      	movs	r3, #0
   2f6ae:	6023      	str	r3, [r4, #0]
	return *flagp;
   2f6b0:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2f6b2:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2f6b6:	bf1e      	ittt	ne
   2f6b8:	f043 0302 	orrne.w	r3, r3, #2
   2f6bc:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2f6be:	f040 0002 	orrne.w	r0, r0, #2
}
   2f6c2:	bd70      	pop	{r4, r5, r6, pc}
   2f6c4:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f6c6:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   2f6ca:	4294      	cmp	r4, r2
	list->tail = node;
   2f6cc:	bf08      	it	eq
   2f6ce:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   2f6d2:	e7eb      	b.n	2f6ac <cancel_async_locked+0x38>
	return node->next;
   2f6d4:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f6d6:	6812      	ldr	r2, [r2, #0]
   2f6d8:	e7db      	b.n	2f692 <cancel_async_locked+0x1e>

0002f6da <work_timeout>:
{
   2f6da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f6dc:	4604      	mov	r4, r0
	__asm__ volatile(
   2f6de:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f6e2:	f3ef 8511 	mrs	r5, BASEPRI
   2f6e6:	f383 8812 	msr	BASEPRI_MAX, r3
   2f6ea:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2f6ee:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2f6f0:	f1a0 0610 	sub.w	r6, r0, #16
   2f6f4:	2103      	movs	r1, #3
   2f6f6:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2f6f8:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2f6fa:	f7ff ff9a 	bl	2f632 <flag_test_and_clear>
   2f6fe:	b128      	cbz	r0, 2f70c <work_timeout+0x32>
		queue = dw->queue;
   2f700:	69a3      	ldr	r3, [r4, #24]
   2f702:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2f704:	a901      	add	r1, sp, #4
   2f706:	4630      	mov	r0, r6
   2f708:	f7f6 ff0a 	bl	26520 <submit_to_queue_locked>
	__asm__ volatile(
   2f70c:	f385 8811 	msr	BASEPRI, r5
   2f710:	f3bf 8f6f 	isb	sy
}
   2f714:	b002      	add	sp, #8
   2f716:	bd70      	pop	{r4, r5, r6, pc}

0002f718 <k_work_init>:
{
   2f718:	b538      	push	{r3, r4, r5, lr}
   2f71a:	4604      	mov	r4, r0
   2f71c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2f71e:	2210      	movs	r2, #16
   2f720:	2100      	movs	r1, #0
   2f722:	f7fc fde7 	bl	2c2f4 <memset>
   2f726:	6065      	str	r5, [r4, #4]
}
   2f728:	bd38      	pop	{r3, r4, r5, pc}

0002f72a <k_work_busy_get>:
	__asm__ volatile(
   2f72a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2f72e:	f3ef 8311 	mrs	r3, BASEPRI
   2f732:	f382 8812 	msr	BASEPRI_MAX, r2
   2f736:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   2f73a:	68c0      	ldr	r0, [r0, #12]
   2f73c:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2f740:	f383 8811 	msr	BASEPRI, r3
   2f744:	f3bf 8f6f 	isb	sy
}
   2f748:	4770      	bx	lr

0002f74a <z_work_submit_to_queue>:
{
   2f74a:	b513      	push	{r0, r1, r4, lr}
   2f74c:	9001      	str	r0, [sp, #4]
   2f74e:	4608      	mov	r0, r1
	__asm__ volatile(
   2f750:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f754:	f3ef 8411 	mrs	r4, BASEPRI
   2f758:	f383 8812 	msr	BASEPRI_MAX, r3
   2f75c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2f760:	a901      	add	r1, sp, #4
   2f762:	f7f6 fedd 	bl	26520 <submit_to_queue_locked>
	__asm__ volatile(
   2f766:	f384 8811 	msr	BASEPRI, r4
   2f76a:	f3bf 8f6f 	isb	sy
}
   2f76e:	b002      	add	sp, #8
   2f770:	bd10      	pop	{r4, pc}

0002f772 <k_work_submit_to_queue>:
{
   2f772:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2f774:	f7ff ffe9 	bl	2f74a <z_work_submit_to_queue>
	if (ret > 0) {
   2f778:	1e04      	subs	r4, r0, #0
   2f77a:	dd09      	ble.n	2f790 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2f77c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f780:	f3ef 8011 	mrs	r0, BASEPRI
   2f784:	f383 8812 	msr	BASEPRI_MAX, r3
   2f788:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2f78c:	f000 f931 	bl	2f9f2 <z_reschedule_irqlock>
}
   2f790:	4620      	mov	r0, r4
   2f792:	bd10      	pop	{r4, pc}

0002f794 <k_work_queue_init>:
{
   2f794:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   2f796:	22a0      	movs	r2, #160	; 0xa0
   2f798:	2100      	movs	r1, #0
   2f79a:	f7fc fdab 	bl	2c2f4 <memset>
}
   2f79e:	bd08      	pop	{r3, pc}

0002f7a0 <k_work_init_delayable>:
{
   2f7a0:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2f7a2:	2230      	movs	r2, #48	; 0x30
{
   2f7a4:	4604      	mov	r4, r0
   2f7a6:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2f7a8:	2100      	movs	r1, #0
   2f7aa:	f7fc fda3 	bl	2c2f4 <memset>
   2f7ae:	f44f 7380 	mov.w	r3, #256	; 0x100
   2f7b2:	6065      	str	r5, [r4, #4]
   2f7b4:	60e3      	str	r3, [r4, #12]
}
   2f7b6:	bd38      	pop	{r3, r4, r5, pc}

0002f7b8 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   2f7b8:	f7ff bfb7 	b.w	2f72a <k_work_busy_get>

0002f7bc <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2f7bc:	b538      	push	{r3, r4, r5, lr}
   2f7be:	4604      	mov	r4, r0
   2f7c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f7c4:	f3ef 8511 	mrs	r5, BASEPRI
   2f7c8:	f383 8812 	msr	BASEPRI_MAX, r3
   2f7cc:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2f7d0:	f7ff ff3a 	bl	2f648 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2f7d4:	4620      	mov	r0, r4
   2f7d6:	f7ff ff4d 	bl	2f674 <cancel_async_locked>
	__asm__ volatile(
   2f7da:	f385 8811 	msr	BASEPRI, r5
   2f7de:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2f7e2:	bd38      	pop	{r3, r4, r5, pc}

0002f7e4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2f7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f7e6:	4604      	mov	r4, r0
   2f7e8:	460d      	mov	r5, r1
	__asm__ volatile(
   2f7ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f7ee:	f3ef 8611 	mrs	r6, BASEPRI
   2f7f2:	f383 8812 	msr	BASEPRI_MAX, r3
   2f7f6:	f3bf 8f6f 	isb	sy
	return *flagp;
   2f7fa:	68c3      	ldr	r3, [r0, #12]
   2f7fc:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2f800:	2b00      	cmp	r3, #0
   2f802:	bf14      	ite	ne
   2f804:	2701      	movne	r7, #1
   2f806:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2f808:	d105      	bne.n	2f816 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   2f80a:	f386 8811 	msr	BASEPRI, r6
   2f80e:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2f812:	4638      	mov	r0, r7
   2f814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   2f816:	f7ff ff17 	bl	2f648 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2f81a:	4620      	mov	r0, r4
   2f81c:	f7ff ff2a 	bl	2f674 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2f820:	4629      	mov	r1, r5
   2f822:	4620      	mov	r0, r4
   2f824:	f7f6 fe5e 	bl	264e4 <cancel_sync_locked>
   2f828:	f386 8811 	msr	BASEPRI, r6
   2f82c:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   2f830:	2800      	cmp	r0, #0
   2f832:	d0ee      	beq.n	2f812 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   2f834:	f04f 32ff 	mov.w	r2, #4294967295
   2f838:	f04f 33ff 	mov.w	r3, #4294967295
   2f83c:	f105 0008 	add.w	r0, r5, #8
   2f840:	f7f6 fd50 	bl	262e4 <z_impl_k_sem_take>
   2f844:	e7e5      	b.n	2f812 <k_work_cancel_delayable_sync+0x2e>

0002f846 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2f846:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2f84a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2f84c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2f84e:	2300      	movs	r3, #0
	node->prev = NULL;
   2f850:	e9c0 3300 	strd	r3, r3, [r0]
}
   2f854:	4770      	bx	lr

0002f856 <unpend_thread_no_timeout>:
{
   2f856:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2f858:	f7ff fff5 	bl	2f846 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2f85c:	7b43      	ldrb	r3, [r0, #13]
   2f85e:	f023 0302 	bic.w	r3, r3, #2
   2f862:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2f864:	2300      	movs	r3, #0
   2f866:	6083      	str	r3, [r0, #8]
}
   2f868:	bd08      	pop	{r3, pc}

0002f86a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2f86a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2f86e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2f872:	4283      	cmp	r3, r0
		return b2 - b1;
   2f874:	bf14      	ite	ne
   2f876:	1ac0      	subne	r0, r0, r3
	return 0;
   2f878:	2000      	moveq	r0, #0
}
   2f87a:	4770      	bx	lr

0002f87c <add_to_waitq_locked>:
{
   2f87c:	b538      	push	{r3, r4, r5, lr}
   2f87e:	4604      	mov	r4, r0
   2f880:	460d      	mov	r5, r1
	unready_thread(thread);
   2f882:	f7f7 f82b 	bl	268dc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2f886:	7b63      	ldrb	r3, [r4, #13]
   2f888:	f043 0302 	orr.w	r3, r3, #2
   2f88c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2f88e:	b1e5      	cbz	r5, 2f8ca <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   2f890:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   2f892:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f894:	429d      	cmp	r5, r3
   2f896:	d109      	bne.n	2f8ac <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   2f898:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2f89a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2f89e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2f8a0:	606c      	str	r4, [r5, #4]
}
   2f8a2:	e012      	b.n	2f8ca <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   2f8a4:	686a      	ldr	r2, [r5, #4]
   2f8a6:	4293      	cmp	r3, r2
   2f8a8:	d0f6      	beq.n	2f898 <add_to_waitq_locked+0x1c>
   2f8aa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2f8ac:	2b00      	cmp	r3, #0
   2f8ae:	d0f3      	beq.n	2f898 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   2f8b0:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2f8b4:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2f8b8:	428a      	cmp	r2, r1
   2f8ba:	d0f3      	beq.n	2f8a4 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2f8bc:	4291      	cmp	r1, r2
   2f8be:	ddf1      	ble.n	2f8a4 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   2f8c0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2f8c2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2f8c6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2f8c8:	605c      	str	r4, [r3, #4]
}
   2f8ca:	bd38      	pop	{r3, r4, r5, pc}

0002f8cc <z_ready_thread>:
{
   2f8cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   2f8ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f8d2:	f3ef 8411 	mrs	r4, BASEPRI
   2f8d6:	f383 8812 	msr	BASEPRI_MAX, r3
   2f8da:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2f8de:	f7f6 ffc9 	bl	26874 <ready_thread>
	__asm__ volatile(
   2f8e2:	f384 8811 	msr	BASEPRI, r4
   2f8e6:	f3bf 8f6f 	isb	sy
}
   2f8ea:	bd10      	pop	{r4, pc}

0002f8ec <z_unpend_thread_no_timeout>:
{
   2f8ec:	b508      	push	{r3, lr}
	__asm__ volatile(
   2f8ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   2f8f2:	f3ef 8111 	mrs	r1, BASEPRI
   2f8f6:	f382 8812 	msr	BASEPRI_MAX, r2
   2f8fa:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2f8fe:	6883      	ldr	r3, [r0, #8]
   2f900:	b10b      	cbz	r3, 2f906 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   2f902:	f7ff ffa8 	bl	2f856 <unpend_thread_no_timeout>
	__asm__ volatile(
   2f906:	f381 8811 	msr	BASEPRI, r1
   2f90a:	f3bf 8f6f 	isb	sy
}
   2f90e:	bd08      	pop	{r3, pc}

0002f910 <z_sched_wake_thread>:
{
   2f910:	b538      	push	{r3, r4, r5, lr}
   2f912:	4604      	mov	r4, r0
	__asm__ volatile(
   2f914:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f918:	f3ef 8511 	mrs	r5, BASEPRI
   2f91c:	f383 8812 	msr	BASEPRI_MAX, r3
   2f920:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2f924:	7b43      	ldrb	r3, [r0, #13]
   2f926:	f013 0f28 	tst.w	r3, #40	; 0x28
   2f92a:	d10b      	bne.n	2f944 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   2f92c:	6883      	ldr	r3, [r0, #8]
   2f92e:	b10b      	cbz	r3, 2f934 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   2f930:	f7ff ff91 	bl	2f856 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2f934:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   2f936:	b951      	cbnz	r1, 2f94e <z_sched_wake_thread+0x3e>
   2f938:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2f93c:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   2f93e:	4620      	mov	r0, r4
   2f940:	f7f6 ff98 	bl	26874 <ready_thread>
	__asm__ volatile(
   2f944:	f385 8811 	msr	BASEPRI, r5
   2f948:	f3bf 8f6f 	isb	sy
}
   2f94c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2f94e:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   2f952:	e7f3      	b.n	2f93c <z_sched_wake_thread+0x2c>

0002f954 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   2f954:	2101      	movs	r1, #1
   2f956:	3818      	subs	r0, #24
   2f958:	f7ff bfda 	b.w	2f910 <z_sched_wake_thread>

0002f95c <z_unpend1_no_timeout>:
{
   2f95c:	b508      	push	{r3, lr}
   2f95e:	4603      	mov	r3, r0
	__asm__ volatile(
   2f960:	f04f 0240 	mov.w	r2, #64	; 0x40
   2f964:	f3ef 8111 	mrs	r1, BASEPRI
   2f968:	f382 8812 	msr	BASEPRI_MAX, r2
   2f96c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2f970:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f972:	4283      	cmp	r3, r0
   2f974:	d007      	beq.n	2f986 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   2f976:	b108      	cbz	r0, 2f97c <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   2f978:	f7ff ff6d 	bl	2f856 <unpend_thread_no_timeout>
	__asm__ volatile(
   2f97c:	f381 8811 	msr	BASEPRI, r1
   2f980:	f3bf 8f6f 	isb	sy
}
   2f984:	bd08      	pop	{r3, pc}
   2f986:	2000      	movs	r0, #0
   2f988:	e7f8      	b.n	2f97c <z_unpend1_no_timeout+0x20>

0002f98a <z_unpend_first_thread>:
{
   2f98a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2f98c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f990:	f3ef 8511 	mrs	r5, BASEPRI
   2f994:	f383 8812 	msr	BASEPRI_MAX, r3
   2f998:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2f99c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f99e:	42a0      	cmp	r0, r4
   2f9a0:	d00d      	beq.n	2f9be <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   2f9a2:	b134      	cbz	r4, 2f9b2 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   2f9a4:	4620      	mov	r0, r4
   2f9a6:	f7ff ff56 	bl	2f856 <unpend_thread_no_timeout>
   2f9aa:	f104 0018 	add.w	r0, r4, #24
   2f9ae:	f000 f869 	bl	2fa84 <z_abort_timeout>
	__asm__ volatile(
   2f9b2:	f385 8811 	msr	BASEPRI, r5
   2f9b6:	f3bf 8f6f 	isb	sy
}
   2f9ba:	4620      	mov	r0, r4
   2f9bc:	bd38      	pop	{r3, r4, r5, pc}
   2f9be:	2400      	movs	r4, #0
   2f9c0:	e7f7      	b.n	2f9b2 <z_unpend_first_thread+0x28>

0002f9c2 <z_unpend_thread>:
{
   2f9c2:	b510      	push	{r4, lr}
   2f9c4:	4601      	mov	r1, r0
	__asm__ volatile(
   2f9c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f9ca:	f3ef 8411 	mrs	r4, BASEPRI
   2f9ce:	f383 8812 	msr	BASEPRI_MAX, r3
   2f9d2:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2f9d6:	6883      	ldr	r3, [r0, #8]
   2f9d8:	b10b      	cbz	r3, 2f9de <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   2f9da:	f7ff ff3c 	bl	2f856 <unpend_thread_no_timeout>
	__asm__ volatile(
   2f9de:	f384 8811 	msr	BASEPRI, r4
   2f9e2:	f3bf 8f6f 	isb	sy
}
   2f9e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f9ea:	f101 0018 	add.w	r0, r1, #24
   2f9ee:	f000 b849 	b.w	2fa84 <z_abort_timeout>

0002f9f2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2f9f2:	4603      	mov	r3, r0
   2f9f4:	b920      	cbnz	r0, 2fa00 <z_reschedule_irqlock+0xe>
   2f9f6:	f3ef 8205 	mrs	r2, IPSR
   2f9fa:	b90a      	cbnz	r2, 2fa00 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2f9fc:	f7e7 ba60 	b.w	16ec0 <arch_swap>
   2fa00:	f383 8811 	msr	BASEPRI, r3
   2fa04:	f3bf 8f6f 	isb	sy
}
   2fa08:	4770      	bx	lr

0002fa0a <z_reschedule_unlocked>:
	__asm__ volatile(
   2fa0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fa0e:	f3ef 8011 	mrs	r0, BASEPRI
   2fa12:	f383 8812 	msr	BASEPRI_MAX, r3
   2fa16:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2fa1a:	f7ff bfea 	b.w	2f9f2 <z_reschedule_irqlock>

0002fa1e <z_unpend_all>:
{
   2fa1e:	b538      	push	{r3, r4, r5, lr}
   2fa20:	4605      	mov	r5, r0
	int need_sched = 0;
   2fa22:	2000      	movs	r0, #0
	return list->head == list;
   2fa24:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2fa26:	42a5      	cmp	r5, r4
   2fa28:	d000      	beq.n	2fa2c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2fa2a:	b904      	cbnz	r4, 2fa2e <z_unpend_all+0x10>
}
   2fa2c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2fa2e:	4620      	mov	r0, r4
   2fa30:	f7ff ffc7 	bl	2f9c2 <z_unpend_thread>
		z_ready_thread(thread);
   2fa34:	4620      	mov	r0, r4
   2fa36:	f7ff ff49 	bl	2f8cc <z_ready_thread>
		need_sched = 1;
   2fa3a:	2001      	movs	r0, #1
   2fa3c:	e7f2      	b.n	2fa24 <z_unpend_all+0x6>

0002fa3e <z_sched_wake>:
{
   2fa3e:	b538      	push	{r3, r4, r5, lr}
   2fa40:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fa44:	f3ef 8511 	mrs	r5, BASEPRI
   2fa48:	f383 8812 	msr	BASEPRI_MAX, r3
   2fa4c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2fa50:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2fa52:	42a0      	cmp	r0, r4
   2fa54:	d012      	beq.n	2fa7c <z_sched_wake+0x3e>
		if (thread != NULL) {
   2fa56:	b19c      	cbz	r4, 2fa80 <z_sched_wake+0x42>
   2fa58:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   2fa5a:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   2fa5c:	4620      	mov	r0, r4
   2fa5e:	f7ff fefa 	bl	2f856 <unpend_thread_no_timeout>
   2fa62:	f104 0018 	add.w	r0, r4, #24
   2fa66:	f000 f80d 	bl	2fa84 <z_abort_timeout>
			ready_thread(thread);
   2fa6a:	4620      	mov	r0, r4
   2fa6c:	f7f6 ff02 	bl	26874 <ready_thread>
			ret = true;
   2fa70:	2001      	movs	r0, #1
	__asm__ volatile(
   2fa72:	f385 8811 	msr	BASEPRI, r5
   2fa76:	f3bf 8f6f 	isb	sy
}
   2fa7a:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   2fa7c:	2000      	movs	r0, #0
   2fa7e:	e7f8      	b.n	2fa72 <z_sched_wake+0x34>
   2fa80:	4620      	mov	r0, r4
   2fa82:	e7f6      	b.n	2fa72 <z_sched_wake+0x34>

0002fa84 <z_abort_timeout>:
{
   2fa84:	b510      	push	{r4, lr}
	__asm__ volatile(
   2fa86:	f04f 0240 	mov.w	r2, #64	; 0x40
   2fa8a:	f3ef 8411 	mrs	r4, BASEPRI
   2fa8e:	f382 8812 	msr	BASEPRI_MAX, r2
   2fa92:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2fa96:	6803      	ldr	r3, [r0, #0]
   2fa98:	b13b      	cbz	r3, 2faaa <z_abort_timeout+0x26>
			remove_timeout(to);
   2fa9a:	f7f7 f9ef 	bl	26e7c <remove_timeout>
			ret = 0;
   2fa9e:	2000      	movs	r0, #0
	__asm__ volatile(
   2faa0:	f384 8811 	msr	BASEPRI, r4
   2faa4:	f3bf 8f6f 	isb	sy
}
   2faa8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2faaa:	f06f 0015 	mvn.w	r0, #21
   2faae:	e7f7      	b.n	2faa0 <z_abort_timeout+0x1c>

0002fab0 <z_timeout_remaining>:
{
   2fab0:	b510      	push	{r4, lr}
	__asm__ volatile(
   2fab2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fab6:	f3ef 8411 	mrs	r4, BASEPRI
   2faba:	f383 8812 	msr	BASEPRI_MAX, r3
   2fabe:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   2fac2:	f7f7 f9f7 	bl	26eb4 <timeout_rem>
	__asm__ volatile(
   2fac6:	f384 8811 	msr	BASEPRI, r4
   2faca:	f3bf 8f6f 	isb	sy
}
   2face:	bd10      	pop	{r4, pc}

0002fad0 <z_get_next_timeout_expiry>:
{
   2fad0:	b510      	push	{r4, lr}
	__asm__ volatile(
   2fad2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fad6:	f3ef 8411 	mrs	r4, BASEPRI
   2fada:	f383 8812 	msr	BASEPRI_MAX, r3
   2fade:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2fae2:	f7f7 f9ab 	bl	26e3c <next_timeout>
	__asm__ volatile(
   2fae6:	f384 8811 	msr	BASEPRI, r4
   2faea:	f3bf 8f6f 	isb	sy
}
   2faee:	bd10      	pop	{r4, pc}

0002faf0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2faf0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2faf2:	f7f7 fae3 	bl	270bc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2faf6:	bd08      	pop	{r3, pc}

0002faf8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2faf8:	f7f7 bae0 	b.w	270bc <sys_clock_tick_get>

0002fafc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2fafc:	b108      	cbz	r0, 2fb02 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2fafe:	f7e7 bf75 	b.w	179ec <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2fb02:	4770      	bx	lr

0002fb04 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2fb04:	f1b1 3fff 	cmp.w	r1, #4294967295
   2fb08:	bf08      	it	eq
   2fb0a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2fb0e:	b538      	push	{r3, r4, r5, lr}
   2fb10:	460c      	mov	r4, r1
   2fb12:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2fb14:	d014      	beq.n	2fb40 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2fb16:	4308      	orrs	r0, r1
   2fb18:	d103      	bne.n	2fb22 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2fb1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2fb1e:	f7f7 bacd 	b.w	270bc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2fb22:	f06f 0001 	mvn.w	r0, #1
   2fb26:	1b40      	subs	r0, r0, r5
   2fb28:	f04f 33ff 	mov.w	r3, #4294967295
   2fb2c:	eb63 0101 	sbc.w	r1, r3, r1
   2fb30:	2900      	cmp	r1, #0
   2fb32:	da04      	bge.n	2fb3e <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2fb34:	f7f7 fac2 	bl	270bc <sys_clock_tick_get>
   2fb38:	1940      	adds	r0, r0, r5
   2fb3a:	eb41 0104 	adc.w	r1, r1, r4
}
   2fb3e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2fb40:	f04f 30ff 	mov.w	r0, #4294967295
   2fb44:	4601      	mov	r1, r0
   2fb46:	e7fa      	b.n	2fb3e <sys_clock_timeout_end_calc+0x3a>

0002fb48 <k_timer_init>:
	timer->status = 0U;
   2fb48:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2fb4a:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2fb4e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2fb52:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2fb56:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2fb5a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2fb5c:	6343      	str	r3, [r0, #52]	; 0x34
}
   2fb5e:	4770      	bx	lr

0002fb60 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2fb60:	b510      	push	{r4, lr}
   2fb62:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2fb64:	f7ff ff8e 	bl	2fa84 <z_abort_timeout>

	if (inactive) {
   2fb68:	b9b0      	cbnz	r0, 2fb98 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2fb6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2fb6c:	b10b      	cbz	r3, 2fb72 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2fb6e:	4620      	mov	r0, r4
   2fb70:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2fb72:	f104 0018 	add.w	r0, r4, #24
   2fb76:	f7ff fef1 	bl	2f95c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2fb7a:	b168      	cbz	r0, 2fb98 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2fb7c:	f7ff fea6 	bl	2f8cc <z_ready_thread>
	__asm__ volatile(
   2fb80:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fb84:	f3ef 8011 	mrs	r0, BASEPRI
   2fb88:	f383 8812 	msr	BASEPRI_MAX, r3
   2fb8c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2fb90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2fb94:	f7ff bf2d 	b.w	2f9f2 <z_reschedule_irqlock>
   2fb98:	bd10      	pop	{r4, pc}

0002fb9a <add_event>:
{
   2fb9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fb9c:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2fb9e:	e9d0 1300 	ldrd	r1, r3, [r0]
   2fba2:	4288      	cmp	r0, r1
   2fba4:	4604      	mov	r4, r0
   2fba6:	d105      	bne.n	2fbb4 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2fba8:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2fbaa:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2fbae:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2fbb0:	6065      	str	r5, [r4, #4]
   2fbb2:	e01d      	b.n	2fbf0 <add_event+0x56>
	if ((pending == NULL) ||
   2fbb4:	2b00      	cmp	r3, #0
   2fbb6:	d0f7      	beq.n	2fba8 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2fbb8:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2fbba:	b100      	cbz	r0, 2fbbe <add_event+0x24>
   2fbbc:	3860      	subs	r0, #96	; 0x60
   2fbbe:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2fbc2:	4639      	mov	r1, r7
   2fbc4:	f7ff fe51 	bl	2f86a <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2fbc8:	2800      	cmp	r0, #0
   2fbca:	dced      	bgt.n	2fba8 <add_event+0xe>
	return list->head == list;
   2fbcc:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2fbce:	42b4      	cmp	r4, r6
   2fbd0:	d0ea      	beq.n	2fba8 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2fbd2:	2e00      	cmp	r6, #0
   2fbd4:	d0e8      	beq.n	2fba8 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2fbd6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2fbd8:	b101      	cbz	r1, 2fbdc <add_event+0x42>
   2fbda:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2fbdc:	4638      	mov	r0, r7
   2fbde:	f7ff fe44 	bl	2f86a <z_sched_prio_cmp>
   2fbe2:	2800      	cmp	r0, #0
   2fbe4:	dd05      	ble.n	2fbf2 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2fbe6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2fbe8:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2fbec:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2fbee:	6075      	str	r5, [r6, #4]
}
   2fbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2fbf2:	6863      	ldr	r3, [r4, #4]
   2fbf4:	429e      	cmp	r6, r3
   2fbf6:	d0d7      	beq.n	2fba8 <add_event+0xe>
   2fbf8:	6836      	ldr	r6, [r6, #0]
   2fbfa:	e7ea      	b.n	2fbd2 <add_event+0x38>

0002fbfc <register_events>:
{
   2fbfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2fc00:	2500      	movs	r5, #0
{
   2fc02:	468b      	mov	fp, r1
   2fc04:	4614      	mov	r4, r2
   2fc06:	461f      	mov	r7, r3
   2fc08:	4682      	mov	sl, r0
	int events_registered = 0;
   2fc0a:	462e      	mov	r6, r5
	event->poller = NULL;
   2fc0c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2fc0e:	455d      	cmp	r5, fp
   2fc10:	db02      	blt.n	2fc18 <register_events+0x1c>
}
   2fc12:	4630      	mov	r0, r6
   2fc14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fc18:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fc1c:	f3ef 8911 	mrs	r9, BASEPRI
   2fc20:	f383 8812 	msr	BASEPRI_MAX, r3
   2fc24:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2fc28:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2fc2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2fc30:	3b01      	subs	r3, #1
   2fc32:	2b07      	cmp	r3, #7
   2fc34:	d80f      	bhi.n	2fc56 <register_events+0x5a>
   2fc36:	e8df f003 	tbb	[pc, r3]
   2fc3a:	041e      	.short	0x041e
   2fc3c:	0e0e0a0e 	.word	0x0e0e0a0e
   2fc40:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   2fc42:	f8da 3010 	ldr.w	r3, [sl, #16]
   2fc46:	689b      	ldr	r3, [r3, #8]
   2fc48:	b12b      	cbz	r3, 2fc56 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2fc4a:	2302      	movs	r3, #2
   2fc4c:	e020      	b.n	2fc90 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2fc4e:	f8da 3010 	ldr.w	r3, [sl, #16]
   2fc52:	681b      	ldr	r3, [r3, #0]
   2fc54:	bb8b      	cbnz	r3, 2fcba <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2fc56:	bb47      	cbnz	r7, 2fcaa <register_events+0xae>
   2fc58:	7823      	ldrb	r3, [r4, #0]
   2fc5a:	b333      	cbz	r3, 2fcaa <register_events+0xae>
	switch (event->type) {
   2fc5c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2fc60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2fc64:	3b01      	subs	r3, #1
   2fc66:	2b07      	cmp	r3, #7
   2fc68:	d830      	bhi.n	2fccc <register_events+0xd0>
   2fc6a:	e8df f003 	tbb	[pc, r3]
   2fc6e:	2833      	.short	0x2833
   2fc70:	2f2f282f 	.word	0x2f2f282f
   2fc74:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   2fc76:	f8da 3010 	ldr.w	r3, [sl, #16]
   2fc7a:	689b      	ldr	r3, [r3, #8]
   2fc7c:	2b00      	cmp	r3, #0
   2fc7e:	d0ea      	beq.n	2fc56 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2fc80:	2301      	movs	r3, #1
   2fc82:	e005      	b.n	2fc90 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2fc84:	f8da 3010 	ldr.w	r3, [sl, #16]
   2fc88:	6a1b      	ldr	r3, [r3, #32]
   2fc8a:	2b00      	cmp	r3, #0
   2fc8c:	d0e3      	beq.n	2fc56 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2fc8e:	2310      	movs	r3, #16
	event->state |= state;
   2fc90:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2fc94:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2fc98:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2fc9c:	430b      	orrs	r3, r1
   2fc9e:	f363 3294 	bfi	r2, r3, #14, #7
   2fca2:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2fca6:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2fcaa:	f389 8811 	msr	BASEPRI, r9
   2fcae:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2fcb2:	3501      	adds	r5, #1
   2fcb4:	f10a 0a14 	add.w	sl, sl, #20
   2fcb8:	e7a9      	b.n	2fc0e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2fcba:	2304      	movs	r3, #4
   2fcbc:	e7e8      	b.n	2fc90 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2fcbe:	f8da 0010 	ldr.w	r0, [sl, #16]
   2fcc2:	4622      	mov	r2, r4
   2fcc4:	4651      	mov	r1, sl
   2fcc6:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2fcc8:	f7ff ff67 	bl	2fb9a <add_event>
	event->poller = poller;
   2fccc:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2fcd0:	3601      	adds	r6, #1
   2fcd2:	e7ea      	b.n	2fcaa <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2fcd4:	f8da 0010 	ldr.w	r0, [sl, #16]
   2fcd8:	4622      	mov	r2, r4
   2fcda:	4651      	mov	r1, sl
   2fcdc:	e7f4      	b.n	2fcc8 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2fcde:	f8da 0010 	ldr.w	r0, [sl, #16]
   2fce2:	4622      	mov	r2, r4
   2fce4:	4651      	mov	r1, sl
   2fce6:	3024      	adds	r0, #36	; 0x24
   2fce8:	e7ee      	b.n	2fcc8 <register_events+0xcc>

0002fcea <signal_poll_event>:
{
   2fcea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2fcee:	6884      	ldr	r4, [r0, #8]
{
   2fcf0:	4605      	mov	r5, r0
   2fcf2:	460e      	mov	r6, r1
	if (poller != NULL) {
   2fcf4:	b144      	cbz	r4, 2fd08 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2fcf6:	7863      	ldrb	r3, [r4, #1]
   2fcf8:	2b01      	cmp	r3, #1
   2fcfa:	d12e      	bne.n	2fd5a <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2fcfc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2fd00:	f013 0302 	ands.w	r3, r3, #2
   2fd04:	d10a      	bne.n	2fd1c <signal_poll_event+0x32>
		poller->is_polling = false;
   2fd06:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2fd08:	68eb      	ldr	r3, [r5, #12]
   2fd0a:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2fd0e:	4316      	orrs	r6, r2
	event->poller = NULL;
   2fd10:	2000      	movs	r0, #0
	event->state |= state;
   2fd12:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   2fd16:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2fd18:	60eb      	str	r3, [r5, #12]
	return retcode;
   2fd1a:	e03e      	b.n	2fd9a <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2fd1c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2fd20:	f1b3 3fff 	cmp.w	r3, #4294967295
   2fd24:	bf08      	it	eq
   2fd26:	f112 0f02 	cmneq.w	r2, #2
   2fd2a:	d032      	beq.n	2fd92 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2fd2c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2fd30:	4640      	mov	r0, r8
   2fd32:	f7ff fe46 	bl	2f9c2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2fd36:	2e08      	cmp	r6, #8
   2fd38:	bf0c      	ite	eq
   2fd3a:	f06f 0303 	mvneq.w	r3, #3
   2fd3e:	2300      	movne	r3, #0
   2fd40:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2fd42:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2fd46:	06db      	lsls	r3, r3, #27
   2fd48:	d109      	bne.n	2fd5e <signal_poll_event+0x74>
   2fd4a:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2fd4e:	b937      	cbnz	r7, 2fd5e <signal_poll_event+0x74>
	z_ready_thread(thread);
   2fd50:	4640      	mov	r0, r8
   2fd52:	f7ff fdbb 	bl	2f8cc <z_ready_thread>
		poller->is_polling = false;
   2fd56:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2fd58:	e7d6      	b.n	2fd08 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2fd5a:	2b02      	cmp	r3, #2
   2fd5c:	d001      	beq.n	2fd62 <signal_poll_event+0x78>
		poller->is_polling = false;
   2fd5e:	2300      	movs	r3, #0
   2fd60:	e7d1      	b.n	2fd06 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2fd62:	7823      	ldrb	r3, [r4, #0]
   2fd64:	2b00      	cmp	r3, #0
   2fd66:	d0cf      	beq.n	2fd08 <signal_poll_event+0x1e>
   2fd68:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2fd6c:	2f00      	cmp	r7, #0
   2fd6e:	d0f2      	beq.n	2fd56 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2fd70:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2fd74:	f1a4 0914 	sub.w	r9, r4, #20
   2fd78:	f104 0014 	add.w	r0, r4, #20
   2fd7c:	f7ff fe82 	bl	2fa84 <z_abort_timeout>
		twork->poll_result = 0;
   2fd80:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2fd84:	4649      	mov	r1, r9
   2fd86:	4638      	mov	r0, r7
   2fd88:	f7ff fcdf 	bl	2f74a <z_work_submit_to_queue>
		poller->is_polling = false;
   2fd8c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2fd90:	e7ba      	b.n	2fd08 <signal_poll_event+0x1e>
		poller->is_polling = false;
   2fd92:	2300      	movs	r3, #0
   2fd94:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2fd96:	f06f 000a 	mvn.w	r0, #10
}
   2fd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002fd9e <clear_event_registrations>:
	while (num_events--) {
   2fd9e:	2314      	movs	r3, #20
{
   2fda0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fda2:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2fda6:	2400      	movs	r4, #0
	switch (event->type) {
   2fda8:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   2fdac:	b901      	cbnz	r1, 2fdb0 <clear_event_registrations+0x12>
}
   2fdae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2fdb0:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2fdb4:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2fdb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2fdbc:	2b08      	cmp	r3, #8
   2fdbe:	f1a0 0714 	sub.w	r7, r0, #20
   2fdc2:	d80c      	bhi.n	2fdde <clear_event_registrations+0x40>
   2fdc4:	fa26 f303 	lsr.w	r3, r6, r3
   2fdc8:	07db      	lsls	r3, r3, #31
   2fdca:	d508      	bpl.n	2fdde <clear_event_registrations+0x40>
	return node->next != NULL;
   2fdcc:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2fdd0:	b12b      	cbz	r3, 2fdde <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2fdd2:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2fdd6:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2fdd8:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2fdda:	e940 4405 	strd	r4, r4, [r0, #-20]
   2fdde:	f382 8811 	msr	BASEPRI, r2
   2fde2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2fde6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fdea:	f3ef 8211 	mrs	r2, BASEPRI
   2fdee:	f383 8812 	msr	BASEPRI_MAX, r3
   2fdf2:	f3bf 8f6f 	isb	sy
   2fdf6:	3901      	subs	r1, #1
   2fdf8:	4638      	mov	r0, r7
   2fdfa:	e7d7      	b.n	2fdac <clear_event_registrations+0xe>

0002fdfc <k_poll_event_init>:
{
   2fdfc:	b510      	push	{r4, lr}
	event->type = type;
   2fdfe:	0552      	lsls	r2, r2, #21
   2fe00:	0209      	lsls	r1, r1, #8
   2fe02:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2fe06:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   2fe0a:	430a      	orrs	r2, r1
   2fe0c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2fe0e:	2400      	movs	r4, #0
	event->type = type;
   2fe10:	430a      	orrs	r2, r1
	event->obj = obj;
   2fe12:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2fe16:	6084      	str	r4, [r0, #8]
}
   2fe18:	bd10      	pop	{r4, pc}

0002fe1a <z_handle_obj_poll_events>:
{
   2fe1a:	4603      	mov	r3, r0
	return list->head == list;
   2fe1c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2fe1e:	4283      	cmp	r3, r0
   2fe20:	d008      	beq.n	2fe34 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2fe22:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2fe26:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2fe28:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2fe2a:	2300      	movs	r3, #0
	node->prev = NULL;
   2fe2c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2fe30:	f7ff bf5b 	b.w	2fcea <signal_poll_event>
}
   2fe34:	4770      	bx	lr

0002fe36 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2fe36:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2fe38:	e9c0 0000 	strd	r0, r0, [r0]
   2fe3c:	6083      	str	r3, [r0, #8]
}
   2fe3e:	4770      	bx	lr

0002fe40 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2fe40:	2300      	movs	r3, #0
   2fe42:	6083      	str	r3, [r0, #8]
}
   2fe44:	4770      	bx	lr

0002fe46 <k_free>:
	if (ptr != NULL) {
   2fe46:	b120      	cbz	r0, 2fe52 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2fe48:	1f01      	subs	r1, r0, #4
   2fe4a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2fe4e:	f7ff babc 	b.w	2f3ca <k_heap_free>
}
   2fe52:	4770      	bx	lr

0002fe54 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2fe54:	4770      	bx	lr
	...
